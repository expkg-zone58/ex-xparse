<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-01-27T23:00:59.851Z</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>parser</xqdoc:uri>
    <xqdoc:name>xpath-30.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>The parser that was generated for the parser grammar.</xqdoc:description>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="p" uri="parser"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>p:lk</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state for accessing the combined
(i.e. level &gt; 1) lookahead code.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:b0</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state for accessing the position in the
input string of the begin of the token that has been shifted.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:e0</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state for accessing the position in the
input string of the end of the token that has been shifted.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:l1</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state for accessing the code of the
level-1-lookahead token.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:b1</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state for accessing the position in the
input string of the begin of the level-1-lookahead token.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:e1</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state for accessing the position in the
input string of the end of the level-1-lookahead token.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:l2</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state for accessing the code of the
level-2-lookahead token.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:b2</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state for accessing the position in the
input string of the begin of the level-2-lookahead token.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:e2</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state for accessing the position in the
input string of the end of the level-2-lookahead token.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:l3</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state for accessing the code of the
level-3-lookahead token.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:b3</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state for accessing the position in the
input string of the begin of the level-3-lookahead token.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:e3</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state for accessing the position in the
input string of the end of the level-3-lookahead token.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:error</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state for accessing the token code that
was expected when an error was found.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:result</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state that points to the first entry
used for collecting action results.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:MAP0</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The codepoint to charclass mapping for 7 bit codepoints.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type occurrence="+">xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:MAP1</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The codepoint to charclass mapping for codepoints below the surrogate block.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type occurrence="+">xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:MAP2</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The codepoint to charclass mapping for codepoints above the surrogate block.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type occurrence="+">xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:INITIAL</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The token-set-id to DFA-initial-state mapping.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type occurrence="+">xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:TRANSITION</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The DFA transition table.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type occurrence="+">xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:EXPECTED</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The DFA-state to expected-token-set mapping.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type occurrence="+">xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:TOKEN</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The token-string table.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type occurrence="+">xs:string</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Match next token in input string, starting at given index, using
the DFA entry state for the set of tokens that are expected in
the current context.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$begin the index where to start in input string.</xqdoc:param>
        <xqdoc:param>$token-set the expected token set id.</xqdoc:param>
        <xqdoc:return>a sequence of three: the token code of the result token,
with input string begin and end positions. If there is no valid
token, return the negative id of the DFA state that failed, along
with begin and end positions of the longest viable prefix.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:match</xqdoc:name>
      <xqdoc:signature>declare function p:match($input as xs:string, $begin as xs:integer, $token-set as xs:integer) as xs:integer+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>begin</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>token-set</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="7">
      <xqdoc:comment>
        <xqdoc:description>The DFA state transition function. If we are in a valid DFA state, save
it's result annotation, consume one input codepoint, calculate the next
state, and use tail recursion to do the same again. Otherwise, return
any valid result or a negative DFA state id in case of an error.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$begin the begin index of the current token in the input string.</xqdoc:param>
        <xqdoc:param>$current the index of the current position in the input string.</xqdoc:param>
        <xqdoc:param>$end the end index of the result in the input string.</xqdoc:param>
        <xqdoc:param>$result the result code.</xqdoc:param>
        <xqdoc:param>$current-state the current DFA state.</xqdoc:param>
        <xqdoc:param>$previous-state the  previous DFA state.</xqdoc:param>
        <xqdoc:return>a sequence of three: the token code of the result token,
with input string begin and end positions. If there is no valid
token, return the negative id of the DFA state that failed, along
with begin and end positions of the longest viable prefix.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:transition</xqdoc:name>
      <xqdoc:signature>declare function p:transition($input as xs:string, $begin as xs:integer, $current as xs:integer, $end as xs:integer, $result as xs:integer, $current-state as xs:integer, $previous-state as xs:integer) as xs:integer+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>begin</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>current</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>end</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>result</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>current-state</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>previous-state</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Recursively translate one 32-bit chunk of an expected token bitset
to the corresponding sequence of token strings.</xqdoc:description>
        <xqdoc:param>$result the result of previous recursion levels.</xqdoc:param>
        <xqdoc:param>$chunk the 32-bit chunk of the expected token bitset.</xqdoc:param>
        <xqdoc:param>$base-token-code the token code of bit 0 in the current chunk.</xqdoc:param>
        <xqdoc:return>the set of token strings.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:token</xqdoc:name>
      <xqdoc:signature>declare function p:token($result as xs:string*, $chunk as xs:integer, $base-token-code as xs:integer) as xs:string*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>result</xqdoc:name>
          <xqdoc:type occurrence="*">xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>chunk</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>base-token-code</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Calculate expected token set for a given DFA state as a sequence
of strings.</xqdoc:description>
        <xqdoc:param>$state the DFA state.</xqdoc:param>
        <xqdoc:return>the set of token strings</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:expected-token-set</xqdoc:name>
      <xqdoc:signature>declare function p:expected-token-set($state as xs:integer) as xs:string*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Classify codepoint by doing a tail recursive binary search for a
matching codepoint range entry in MAP2, the codepoint to charclass
map for codepoints above the surrogate block.</xqdoc:description>
        <xqdoc:param>$c the codepoint.</xqdoc:param>
        <xqdoc:param>$lo the binary search lower bound map index.</xqdoc:param>
        <xqdoc:param>$hi the binary search upper bound map index.</xqdoc:param>
        <xqdoc:return>the character class.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:map2</xqdoc:name>
      <xqdoc:signature>declare function p:map2($c as xs:integer, $lo as xs:integer, $hi as xs:integer) as xs:integer</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>c</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>lo</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>hi</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production Comment (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-Comment-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-Comment-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing Comment.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-Comment</xqdoc:name>
      <xqdoc:signature>declare function p:try-Comment($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing Whitespace.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-Whitespace</xqdoc:name>
      <xqdoc:signature>declare function p:try-Whitespace($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse NodeComp.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-NodeComp</xqdoc:name>
      <xqdoc:signature>declare function p:parse-NodeComp($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse GeneralComp.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-GeneralComp</xqdoc:name>
      <xqdoc:signature>declare function p:parse-GeneralComp($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ValueComp.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ValueComp</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ValueComp($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse SimpleTypeName.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-SimpleTypeName</xqdoc:name>
      <xqdoc:signature>declare function p:parse-SimpleTypeName($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse SingleType.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-SingleType</xqdoc:name>
      <xqdoc:signature>declare function p:parse-SingleType($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production PredicateList (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-PredicateList-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-PredicateList-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse PredicateList.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-PredicateList</xqdoc:name>
      <xqdoc:signature>declare function p:parse-PredicateList($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse AbbrevForwardStep.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-AbbrevForwardStep</xqdoc:name>
      <xqdoc:signature>declare function p:parse-AbbrevForwardStep($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ForwardAxis.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ForwardAxis</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ForwardAxis($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ForwardStep.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ForwardStep</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ForwardStep($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse AbbrevReverseStep.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-AbbrevReverseStep</xqdoc:name>
      <xqdoc:signature>declare function p:parse-AbbrevReverseStep($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse NameTest.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-NameTest</xqdoc:name>
      <xqdoc:signature>declare function p:parse-NameTest($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse NodeTest.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-NodeTest</xqdoc:name>
      <xqdoc:signature>declare function p:parse-NodeTest($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ReverseAxis.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ReverseAxis</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ReverseAxis($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ReverseStep.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ReverseStep</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ReverseStep($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse AxisStep.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-AxisStep</xqdoc:name>
      <xqdoc:signature>declare function p:parse-AxisStep($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse Predicate.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-Predicate</xqdoc:name>
      <xqdoc:signature>declare function p:parse-Predicate($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse EnclosedExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-EnclosedExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-EnclosedExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse FunctionBody.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-FunctionBody</xqdoc:name>
      <xqdoc:signature>declare function p:parse-FunctionBody($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse OccurrenceIndicator.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-OccurrenceIndicator</xqdoc:name>
      <xqdoc:signature>declare function p:parse-OccurrenceIndicator($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ParenthesizedItemType.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ParenthesizedItemType</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ParenthesizedItemType($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse AtomicOrUnionType.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-AtomicOrUnionType</xqdoc:name>
      <xqdoc:signature>declare function p:parse-AtomicOrUnionType($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production TypedFunctionTest (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-TypedFunctionTest-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-TypedFunctionTest-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse TypedFunctionTest.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-TypedFunctionTest</xqdoc:name>
      <xqdoc:signature>declare function p:parse-TypedFunctionTest($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse AnyFunctionTest.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-AnyFunctionTest</xqdoc:name>
      <xqdoc:signature>declare function p:parse-AnyFunctionTest($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse FunctionTest.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-FunctionTest</xqdoc:name>
      <xqdoc:signature>declare function p:parse-FunctionTest($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse AnyKindTest.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-AnyKindTest</xqdoc:name>
      <xqdoc:signature>declare function p:parse-AnyKindTest($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse NamespaceNodeTest.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-NamespaceNodeTest</xqdoc:name>
      <xqdoc:signature>declare function p:parse-NamespaceNodeTest($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse TextTest.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-TextTest</xqdoc:name>
      <xqdoc:signature>declare function p:parse-TextTest($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse CommentTest.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-CommentTest</xqdoc:name>
      <xqdoc:signature>declare function p:parse-CommentTest($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse PITest.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-PITest</xqdoc:name>
      <xqdoc:signature>declare function p:parse-PITest($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse AttributeDeclaration.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-AttributeDeclaration</xqdoc:name>
      <xqdoc:signature>declare function p:parse-AttributeDeclaration($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse SchemaAttributeTest.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-SchemaAttributeTest</xqdoc:name>
      <xqdoc:signature>declare function p:parse-SchemaAttributeTest($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse AttributeName.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-AttributeName</xqdoc:name>
      <xqdoc:signature>declare function p:parse-AttributeName($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse AttribNameOrWildcard.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-AttribNameOrWildcard</xqdoc:name>
      <xqdoc:signature>declare function p:parse-AttribNameOrWildcard($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse AttributeTest.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-AttributeTest</xqdoc:name>
      <xqdoc:signature>declare function p:parse-AttributeTest($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ElementDeclaration.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ElementDeclaration</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ElementDeclaration($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse SchemaElementTest.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-SchemaElementTest</xqdoc:name>
      <xqdoc:signature>declare function p:parse-SchemaElementTest($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse TypeName.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-TypeName</xqdoc:name>
      <xqdoc:signature>declare function p:parse-TypeName($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ElementName.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ElementName</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ElementName($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ElementNameOrWildcard.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ElementNameOrWildcard</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ElementNameOrWildcard($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ElementTest.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ElementTest</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ElementTest($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse DocumentTest.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-DocumentTest</xqdoc:name>
      <xqdoc:signature>declare function p:parse-DocumentTest($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse KindTest.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-KindTest</xqdoc:name>
      <xqdoc:signature>declare function p:parse-KindTest($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ItemType.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ItemType</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ItemType($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse SequenceType.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-SequenceType</xqdoc:name>
      <xqdoc:signature>declare function p:parse-SequenceType($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse TypeDeclaration.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-TypeDeclaration</xqdoc:name>
      <xqdoc:signature>declare function p:parse-TypeDeclaration($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse Param.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-Param</xqdoc:name>
      <xqdoc:signature>declare function p:parse-Param($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production ParamList (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ParamList-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ParamList-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ParamList.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ParamList</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ParamList($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse InlineFunctionExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-InlineFunctionExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-InlineFunctionExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse NamedFunctionRef.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-NamedFunctionRef</xqdoc:name>
      <xqdoc:signature>declare function p:parse-NamedFunctionRef($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse FunctionItemExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-FunctionItemExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-FunctionItemExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ArgumentPlaceholder.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ArgumentPlaceholder</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ArgumentPlaceholder($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse Argument.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-Argument</xqdoc:name>
      <xqdoc:signature>declare function p:parse-Argument($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production ArgumentList (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ArgumentList-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ArgumentList-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ArgumentList.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ArgumentList</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ArgumentList($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse FunctionEQName.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-FunctionEQName</xqdoc:name>
      <xqdoc:signature>declare function p:parse-FunctionEQName($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse FunctionCall.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-FunctionCall</xqdoc:name>
      <xqdoc:signature>declare function p:parse-FunctionCall($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ContextItemExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ContextItemExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ContextItemExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ParenthesizedExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ParenthesizedExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ParenthesizedExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse VarRef.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-VarRef</xqdoc:name>
      <xqdoc:signature>declare function p:parse-VarRef($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse NumericLiteral.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-NumericLiteral</xqdoc:name>
      <xqdoc:signature>declare function p:parse-NumericLiteral($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse Literal.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-Literal</xqdoc:name>
      <xqdoc:signature>declare function p:parse-Literal($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse PrimaryExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-PrimaryExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-PrimaryExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production PostfixExpr (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-PostfixExpr-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-PostfixExpr-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse PostfixExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-PostfixExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-PostfixExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse StepExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-StepExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-StepExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production RelativePathExpr (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-RelativePathExpr-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-RelativePathExpr-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse RelativePathExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-RelativePathExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-RelativePathExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse PathExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-PathExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-PathExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production SimpleMapExpr (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-SimpleMapExpr-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-SimpleMapExpr-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse SimpleMapExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-SimpleMapExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-SimpleMapExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ValueExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ValueExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ValueExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production UnaryExpr (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-UnaryExpr-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-UnaryExpr-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse UnaryExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-UnaryExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-UnaryExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse CastExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-CastExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-CastExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse CastableExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-CastableExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-CastableExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse TreatExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-TreatExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-TreatExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse InstanceofExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-InstanceofExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-InstanceofExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production IntersectExceptExpr (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-IntersectExceptExpr-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-IntersectExceptExpr-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse IntersectExceptExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-IntersectExceptExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-IntersectExceptExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production UnionExpr (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-UnionExpr-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-UnionExpr-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse UnionExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-UnionExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-UnionExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production MultiplicativeExpr (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-MultiplicativeExpr-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-MultiplicativeExpr-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse MultiplicativeExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-MultiplicativeExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-MultiplicativeExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production AdditiveExpr (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-AdditiveExpr-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-AdditiveExpr-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse AdditiveExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-AdditiveExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-AdditiveExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse RangeExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-RangeExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-RangeExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production StringConcatExpr (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-StringConcatExpr-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-StringConcatExpr-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse StringConcatExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-StringConcatExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-StringConcatExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ComparisonExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ComparisonExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ComparisonExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production AndExpr (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-AndExpr-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-AndExpr-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse AndExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-AndExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-AndExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production OrExpr (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-OrExpr-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-OrExpr-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse OrExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-OrExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-OrExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse IfExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-IfExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-IfExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production QuantifiedExpr (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-QuantifiedExpr-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-QuantifiedExpr-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse QuantifiedExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-QuantifiedExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-QuantifiedExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse SimpleLetBinding.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-SimpleLetBinding</xqdoc:name>
      <xqdoc:signature>declare function p:parse-SimpleLetBinding($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production SimpleLetClause (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-SimpleLetClause-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-SimpleLetClause-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse SimpleLetClause.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-SimpleLetClause</xqdoc:name>
      <xqdoc:signature>declare function p:parse-SimpleLetClause($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse LetExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-LetExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-LetExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse FunctionName.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-FunctionName</xqdoc:name>
      <xqdoc:signature>declare function p:parse-FunctionName($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse QName.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-QName</xqdoc:name>
      <xqdoc:signature>declare function p:parse-QName($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse EQName.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-EQName</xqdoc:name>
      <xqdoc:signature>declare function p:parse-EQName($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse VarName.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-VarName</xqdoc:name>
      <xqdoc:signature>declare function p:parse-VarName($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse SimpleForBinding.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-SimpleForBinding</xqdoc:name>
      <xqdoc:signature>declare function p:parse-SimpleForBinding($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production SimpleForClause (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-SimpleForClause-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-SimpleForClause-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse SimpleForClause.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-SimpleForClause</xqdoc:name>
      <xqdoc:signature>declare function p:parse-SimpleForClause($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ForExpr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ForExpr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ForExpr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ExprSingle.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ExprSingle</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ExprSingle($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production Expr (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-Expr-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-Expr-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse Expr.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-Expr</xqdoc:name>
      <xqdoc:signature>declare function p:parse-Expr($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse XPath.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-XPath</xqdoc:name>
      <xqdoc:signature>declare function p:parse-XPath($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Create a textual error message from a parsing error.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$error the parsing error descriptor.</xqdoc:param>
        <xqdoc:return>the error message.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:error-message</xqdoc:name>
      <xqdoc:signature>declare function p:error-message($input as xs:string, $error as element(error)) as xs:string</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>error</xqdoc:name>
          <xqdoc:type>element(error)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Shift one token, i.e. compare lookahead token 1 with expected
token and in case of a match, shift lookahead tokens down such that
l1 becomes the current token, and higher lookahead tokens move down.
When lookahead token 1 does not match the expected token, raise an
error by saving the expected token code in the error field of the
parser state.</xqdoc:description>
        <xqdoc:param>$code the expected token.</xqdoc:param>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:shift</xqdoc:name>
      <xqdoc:signature>declare function p:shift($code as xs:integer, $input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>code</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Shift one token, i.e. compare lookahead token 1 with expected
token and in case of a match, shift lookahead tokens down such that
l1 becomes the current token, and higher lookahead tokens move down.
When lookahead token 1 does not match the expected token, raise an
error by saving the expected token code in the error field of the
parser state. In contrast to p:shift, do not create any output.</xqdoc:description>
        <xqdoc:param>$code the expected token.</xqdoc:param>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:shiftT</xqdoc:name>
      <xqdoc:signature>declare function p:shiftT($code as xs:integer, $input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>code</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Consume whitespace.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:whitespace</xqdoc:name>
      <xqdoc:signature>declare function p:whitespace($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Use p:match to fetch the next token, but skip any leading
whitespace.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$begin the index where to start.</xqdoc:param>
        <xqdoc:param>$token-set the valid token set id.</xqdoc:param>
        <xqdoc:return>a sequence of three values: the token code of the result
token, with input string positions of token begin and end.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:matchW</xqdoc:name>
      <xqdoc:signature>declare function p:matchW($input as xs:string, $begin as xs:integer, $token-set as xs:integer) as xs:integer+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>begin</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>token-set</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Lookahead one token on level 1 with whitespace skipping.</xqdoc:description>
        <xqdoc:param>$set the code of the DFA entry state for the set of valid tokens.</xqdoc:param>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:lookahead1W</xqdoc:name>
      <xqdoc:signature>declare function p:lookahead1W($set as xs:integer, $input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>set</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Lookahead one token on level 2 with whitespace skipping.</xqdoc:description>
        <xqdoc:param>$set the code of the DFA entry state for the set of valid tokens.</xqdoc:param>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:lookahead2W</xqdoc:name>
      <xqdoc:signature>declare function p:lookahead2W($set as xs:integer, $input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>set</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Lookahead one token on level 3 with whitespace skipping.</xqdoc:description>
        <xqdoc:param>$set the code of the DFA entry state for the set of valid tokens.</xqdoc:param>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:lookahead3W</xqdoc:name>
      <xqdoc:signature>declare function p:lookahead3W($set as xs:integer, $input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>set</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Lookahead one token on level 1.</xqdoc:description>
        <xqdoc:param>$set the code of the DFA entry state for the set of valid tokens.</xqdoc:param>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:lookahead1</xqdoc:name>
      <xqdoc:signature>declare function p:lookahead1($set as xs:integer, $input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>set</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="5">
      <xqdoc:comment>
        <xqdoc:description>Reduce the result stack, creating a nonterminal element. Pop
$count elements off the stack, wrap them in a new element
named $name, and push the new element.</xqdoc:description>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:param>$name the name of the result node.</xqdoc:param>
        <xqdoc:param>$count the number of child nodes.</xqdoc:param>
        <xqdoc:param>$begin the input index where the nonterminal begins.</xqdoc:param>
        <xqdoc:param>$end the input index where the nonterminal ends.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:reduce</xqdoc:name>
      <xqdoc:signature>declare function p:reduce($state as item()+, $name as xs:string, $count as xs:integer, $begin as xs:integer, $end as xs:integer) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>count</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>begin</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>end</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Parse start symbol XPath from given string.</xqdoc:description>
        <xqdoc:param>$s the string to be parsed.</xqdoc:param>
        <xqdoc:return>the result as generated by parser actions.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-XPath</xqdoc:name>
      <xqdoc:signature>declare function p:parse-XPath($s as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>s</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>