<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-01-27T23:00:59.851Z</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>parser</xqdoc:uri>
    <xqdoc:name>EcmaScript.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>The parser that was generated for the EcmaScript grammar.</xqdoc:description>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="p" uri="parser"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>p:lk</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state for accessing the combined
(i.e. level &gt; 1) lookahead code.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:b0</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state for accessing the position in the
input string of the begin of the token that has been shifted.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:e0</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state for accessing the position in the
input string of the end of the token that has been shifted.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:l1</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state for accessing the code of the
level-1-lookahead token.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:b1</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state for accessing the position in the
input string of the begin of the level-1-lookahead token.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:e1</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state for accessing the position in the
input string of the end of the level-1-lookahead token.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:error</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state for accessing the token code that
was expected when an error was found.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:memo</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state for accessing the memoization
of backtracking results.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:result</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The index of the parser state that points to the first entry
used for collecting action results.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:MAP0</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The codepoint to charclass mapping for 7 bit codepoints.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type occurrence="+">xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:MAP1</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The codepoint to charclass mapping for codepoints below the surrogate block.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type occurrence="+">xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:MAP2</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The codepoint to charclass mapping for codepoints above the surrogate block.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type occurrence="+">xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:INITIAL</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The token-set-id to DFA-initial-state mapping.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type occurrence="+">xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:TRANSITION</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The DFA transition table.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type occurrence="+">xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:EXPECTED</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The DFA-state to expected-token-set mapping.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type occurrence="+">xs:integer</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>p:TOKEN</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>The token-string table.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type occurrence="+">xs:string</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Match next token in input string, starting at given index, using
the DFA entry state for the set of tokens that are expected in
the current context.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$begin the index where to start in input string.</xqdoc:param>
        <xqdoc:param>$token-set the expected token set id.</xqdoc:param>
        <xqdoc:return>a sequence of three: the token code of the result token,
with input string begin and end positions. If there is no valid
token, return the negative id of the DFA state that failed, along
with begin and end positions of the longest viable prefix.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:match</xqdoc:name>
      <xqdoc:signature>declare function p:match($input as xs:string, $begin as xs:integer, $token-set as xs:integer) as xs:integer+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>begin</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>token-set</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="7">
      <xqdoc:comment>
        <xqdoc:description>The DFA state transition function. If we are in a valid DFA state, save
it's result annotation, consume one input codepoint, calculate the next
state, and use tail recursion to do the same again. Otherwise, return
any valid result or a negative DFA state id in case of an error.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$begin the begin index of the current token in the input string.</xqdoc:param>
        <xqdoc:param>$current the index of the current position in the input string.</xqdoc:param>
        <xqdoc:param>$end the end index of the result in the input string.</xqdoc:param>
        <xqdoc:param>$result the result code.</xqdoc:param>
        <xqdoc:param>$current-state the current DFA state.</xqdoc:param>
        <xqdoc:param>$previous-state the  previous DFA state.</xqdoc:param>
        <xqdoc:return>a sequence of three: the token code of the result token,
with input string begin and end positions. If there is no valid
token, return the negative id of the DFA state that failed, along
with begin and end positions of the longest viable prefix.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:transition</xqdoc:name>
      <xqdoc:signature>declare function p:transition($input as xs:string, $begin as xs:integer, $current as xs:integer, $end as xs:integer, $result as xs:integer, $current-state as xs:integer, $previous-state as xs:integer) as xs:integer+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>begin</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>current</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>end</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>result</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>current-state</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>previous-state</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Recursively translate one 32-bit chunk of an expected token bitset
to the corresponding sequence of token strings.</xqdoc:description>
        <xqdoc:param>$result the result of previous recursion levels.</xqdoc:param>
        <xqdoc:param>$chunk the 32-bit chunk of the expected token bitset.</xqdoc:param>
        <xqdoc:param>$base-token-code the token code of bit 0 in the current chunk.</xqdoc:param>
        <xqdoc:return>the set of token strings.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:token</xqdoc:name>
      <xqdoc:signature>declare function p:token($result as xs:string*, $chunk as xs:integer, $base-token-code as xs:integer) as xs:string*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>result</xqdoc:name>
          <xqdoc:type occurrence="*">xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>chunk</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>base-token-code</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Calculate expected token set for a given DFA state as a sequence
of strings.</xqdoc:description>
        <xqdoc:param>$state the DFA state.</xqdoc:param>
        <xqdoc:return>the set of token strings</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:expected-token-set</xqdoc:name>
      <xqdoc:signature>declare function p:expected-token-set($state as xs:integer) as xs:string*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Classify codepoint by doing a tail recursive binary search for a
matching codepoint range entry in MAP2, the codepoint to charclass
map for codepoints above the surrogate block.</xqdoc:description>
        <xqdoc:param>$c the codepoint.</xqdoc:param>
        <xqdoc:param>$lo the binary search lower bound map index.</xqdoc:param>
        <xqdoc:param>$hi the binary search upper bound map index.</xqdoc:param>
        <xqdoc:return>the character class.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:map2</xqdoc:name>
      <xqdoc:signature>declare function p:map2($c as xs:integer, $lo as xs:integer, $hi as xs:integer) as xs:integer</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>c</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>lo</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>hi</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse DebuggerStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-DebuggerStatement</xqdoc:name>
      <xqdoc:signature>declare function p:parse-DebuggerStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing DebuggerStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-DebuggerStatement</xqdoc:name>
      <xqdoc:signature>declare function p:try-DebuggerStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse Finally.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-Finally</xqdoc:name>
      <xqdoc:signature>declare function p:parse-Finally($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing Finally.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-Finally</xqdoc:name>
      <xqdoc:signature>declare function p:try-Finally($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse Catch.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-Catch</xqdoc:name>
      <xqdoc:signature>declare function p:parse-Catch($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing Catch.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-Catch</xqdoc:name>
      <xqdoc:signature>declare function p:try-Catch($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse TryStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-TryStatement</xqdoc:name>
      <xqdoc:signature>declare function p:parse-TryStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing TryStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-TryStatement</xqdoc:name>
      <xqdoc:signature>declare function p:try-TryStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ThrowStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ThrowStatement</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ThrowStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing ThrowStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-ThrowStatement</xqdoc:name>
      <xqdoc:signature>declare function p:try-ThrowStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production DefaultClause (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-DefaultClause-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-DefaultClause-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production DefaultClause (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-DefaultClause-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-DefaultClause-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse DefaultClause.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-DefaultClause</xqdoc:name>
      <xqdoc:signature>declare function p:parse-DefaultClause($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing DefaultClause.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-DefaultClause</xqdoc:name>
      <xqdoc:signature>declare function p:try-DefaultClause($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production CaseClause (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-CaseClause-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-CaseClause-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production CaseClause (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-CaseClause-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-CaseClause-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse CaseClause.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-CaseClause</xqdoc:name>
      <xqdoc:signature>declare function p:parse-CaseClause($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing CaseClause.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-CaseClause</xqdoc:name>
      <xqdoc:signature>declare function p:try-CaseClause($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production CaseBlock (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-CaseBlock-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-CaseBlock-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production CaseBlock (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-CaseBlock-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-CaseBlock-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 2nd loop of production CaseBlock (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-CaseBlock-2</xqdoc:name>
      <xqdoc:signature>declare function p:parse-CaseBlock-2($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 2nd loop of production CaseBlock (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-CaseBlock-2</xqdoc:name>
      <xqdoc:signature>declare function p:try-CaseBlock-2($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse CaseBlock.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-CaseBlock</xqdoc:name>
      <xqdoc:signature>declare function p:parse-CaseBlock($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing CaseBlock.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-CaseBlock</xqdoc:name>
      <xqdoc:signature>declare function p:try-CaseBlock($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse SwitchStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-SwitchStatement</xqdoc:name>
      <xqdoc:signature>declare function p:parse-SwitchStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing SwitchStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-SwitchStatement</xqdoc:name>
      <xqdoc:signature>declare function p:try-SwitchStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse LabelledStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-LabelledStatement</xqdoc:name>
      <xqdoc:signature>declare function p:parse-LabelledStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing LabelledStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-LabelledStatement</xqdoc:name>
      <xqdoc:signature>declare function p:try-LabelledStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse WithStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-WithStatement</xqdoc:name>
      <xqdoc:signature>declare function p:parse-WithStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing WithStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-WithStatement</xqdoc:name>
      <xqdoc:signature>declare function p:try-WithStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ReturnStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ReturnStatement</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ReturnStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing ReturnStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-ReturnStatement</xqdoc:name>
      <xqdoc:signature>declare function p:try-ReturnStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse BreakStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-BreakStatement</xqdoc:name>
      <xqdoc:signature>declare function p:parse-BreakStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing BreakStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-BreakStatement</xqdoc:name>
      <xqdoc:signature>declare function p:try-BreakStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ContinueStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ContinueStatement</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ContinueStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing ContinueStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-ContinueStatement</xqdoc:name>
      <xqdoc:signature>declare function p:try-ContinueStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse InitialiserNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-InitialiserNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:parse-InitialiserNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing InitialiserNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-InitialiserNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:try-InitialiserNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse VariableDeclarationNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-VariableDeclarationNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:parse-VariableDeclarationNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing VariableDeclarationNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-VariableDeclarationNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:try-VariableDeclarationNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production VariableDeclarationListNoIn (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-VariableDeclarationListNoIn-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-VariableDeclarationListNoIn-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production VariableDeclarationListNoIn (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-VariableDeclarationListNoIn-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-VariableDeclarationListNoIn-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse VariableDeclarationListNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-VariableDeclarationListNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:parse-VariableDeclarationListNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing VariableDeclarationListNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-VariableDeclarationListNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:try-VariableDeclarationListNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production RelationalExpressionNoIn (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-RelationalExpressionNoIn-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-RelationalExpressionNoIn-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production RelationalExpressionNoIn (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-RelationalExpressionNoIn-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-RelationalExpressionNoIn-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse RelationalExpressionNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-RelationalExpressionNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:parse-RelationalExpressionNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing RelationalExpressionNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-RelationalExpressionNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:try-RelationalExpressionNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production EqualityExpressionNoIn (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-EqualityExpressionNoIn-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-EqualityExpressionNoIn-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production EqualityExpressionNoIn (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-EqualityExpressionNoIn-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-EqualityExpressionNoIn-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse EqualityExpressionNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-EqualityExpressionNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:parse-EqualityExpressionNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing EqualityExpressionNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-EqualityExpressionNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:try-EqualityExpressionNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production BitwiseANDExpressionNoIn (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-BitwiseANDExpressionNoIn-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-BitwiseANDExpressionNoIn-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production BitwiseANDExpressionNoIn (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-BitwiseANDExpressionNoIn-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-BitwiseANDExpressionNoIn-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse BitwiseANDExpressionNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-BitwiseANDExpressionNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:parse-BitwiseANDExpressionNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing BitwiseANDExpressionNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-BitwiseANDExpressionNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:try-BitwiseANDExpressionNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production BitwiseXORExpressionNoIn (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-BitwiseXORExpressionNoIn-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-BitwiseXORExpressionNoIn-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production BitwiseXORExpressionNoIn (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-BitwiseXORExpressionNoIn-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-BitwiseXORExpressionNoIn-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse BitwiseXORExpressionNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-BitwiseXORExpressionNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:parse-BitwiseXORExpressionNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing BitwiseXORExpressionNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-BitwiseXORExpressionNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:try-BitwiseXORExpressionNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production BitwiseORExpressionNoIn (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-BitwiseORExpressionNoIn-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-BitwiseORExpressionNoIn-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production BitwiseORExpressionNoIn (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-BitwiseORExpressionNoIn-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-BitwiseORExpressionNoIn-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse BitwiseORExpressionNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-BitwiseORExpressionNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:parse-BitwiseORExpressionNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing BitwiseORExpressionNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-BitwiseORExpressionNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:try-BitwiseORExpressionNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production LogicalANDExpressionNoIn (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-LogicalANDExpressionNoIn-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-LogicalANDExpressionNoIn-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production LogicalANDExpressionNoIn (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-LogicalANDExpressionNoIn-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-LogicalANDExpressionNoIn-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse LogicalANDExpressionNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-LogicalANDExpressionNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:parse-LogicalANDExpressionNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing LogicalANDExpressionNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-LogicalANDExpressionNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:try-LogicalANDExpressionNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production LogicalORExpressionNoIn (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-LogicalORExpressionNoIn-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-LogicalORExpressionNoIn-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production LogicalORExpressionNoIn (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-LogicalORExpressionNoIn-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-LogicalORExpressionNoIn-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse LogicalORExpressionNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-LogicalORExpressionNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:parse-LogicalORExpressionNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing LogicalORExpressionNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-LogicalORExpressionNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:try-LogicalORExpressionNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production ConditionalExpressionNoIn (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ConditionalExpressionNoIn-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ConditionalExpressionNoIn-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production ConditionalExpressionNoIn (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-ConditionalExpressionNoIn-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-ConditionalExpressionNoIn-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ConditionalExpressionNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ConditionalExpressionNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ConditionalExpressionNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing ConditionalExpressionNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-ConditionalExpressionNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:try-ConditionalExpressionNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse AssignmentExpressionNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-AssignmentExpressionNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:parse-AssignmentExpressionNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing AssignmentExpressionNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-AssignmentExpressionNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:try-AssignmentExpressionNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production ExpressionNoIn (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ExpressionNoIn-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ExpressionNoIn-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production ExpressionNoIn (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-ExpressionNoIn-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-ExpressionNoIn-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ExpressionNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ExpressionNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ExpressionNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing ExpressionNoIn.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-ExpressionNoIn</xqdoc:name>
      <xqdoc:signature>declare function p:try-ExpressionNoIn($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse IterationStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-IterationStatement</xqdoc:name>
      <xqdoc:signature>declare function p:parse-IterationStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing IterationStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-IterationStatement</xqdoc:name>
      <xqdoc:signature>declare function p:try-IterationStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse IfStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-IfStatement</xqdoc:name>
      <xqdoc:signature>declare function p:parse-IfStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing IfStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-IfStatement</xqdoc:name>
      <xqdoc:signature>declare function p:try-IfStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ExpressionStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ExpressionStatement</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ExpressionStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing ExpressionStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-ExpressionStatement</xqdoc:name>
      <xqdoc:signature>declare function p:try-ExpressionStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse EmptyStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-EmptyStatement</xqdoc:name>
      <xqdoc:signature>declare function p:parse-EmptyStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing EmptyStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-EmptyStatement</xqdoc:name>
      <xqdoc:signature>declare function p:try-EmptyStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse Semicolon.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-Semicolon</xqdoc:name>
      <xqdoc:signature>declare function p:parse-Semicolon($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing Semicolon.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-Semicolon</xqdoc:name>
      <xqdoc:signature>declare function p:try-Semicolon($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse PostfixExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-PostfixExpression</xqdoc:name>
      <xqdoc:signature>declare function p:parse-PostfixExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing PostfixExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-PostfixExpression</xqdoc:name>
      <xqdoc:signature>declare function p:try-PostfixExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse UnaryExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-UnaryExpression</xqdoc:name>
      <xqdoc:signature>declare function p:parse-UnaryExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing UnaryExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-UnaryExpression</xqdoc:name>
      <xqdoc:signature>declare function p:try-UnaryExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production MultiplicativeExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-MultiplicativeExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-MultiplicativeExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production MultiplicativeExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-MultiplicativeExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-MultiplicativeExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse MultiplicativeExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-MultiplicativeExpression</xqdoc:name>
      <xqdoc:signature>declare function p:parse-MultiplicativeExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing MultiplicativeExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-MultiplicativeExpression</xqdoc:name>
      <xqdoc:signature>declare function p:try-MultiplicativeExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production AdditiveExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-AdditiveExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-AdditiveExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production AdditiveExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-AdditiveExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-AdditiveExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse AdditiveExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-AdditiveExpression</xqdoc:name>
      <xqdoc:signature>declare function p:parse-AdditiveExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing AdditiveExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-AdditiveExpression</xqdoc:name>
      <xqdoc:signature>declare function p:try-AdditiveExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production ShiftExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ShiftExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ShiftExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production ShiftExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-ShiftExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-ShiftExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ShiftExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ShiftExpression</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ShiftExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing ShiftExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-ShiftExpression</xqdoc:name>
      <xqdoc:signature>declare function p:try-ShiftExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production RelationalExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-RelationalExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-RelationalExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production RelationalExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-RelationalExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-RelationalExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse RelationalExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-RelationalExpression</xqdoc:name>
      <xqdoc:signature>declare function p:parse-RelationalExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing RelationalExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-RelationalExpression</xqdoc:name>
      <xqdoc:signature>declare function p:try-RelationalExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production EqualityExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-EqualityExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-EqualityExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production EqualityExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-EqualityExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-EqualityExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse EqualityExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-EqualityExpression</xqdoc:name>
      <xqdoc:signature>declare function p:parse-EqualityExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing EqualityExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-EqualityExpression</xqdoc:name>
      <xqdoc:signature>declare function p:try-EqualityExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production BitwiseANDExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-BitwiseANDExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-BitwiseANDExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production BitwiseANDExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-BitwiseANDExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-BitwiseANDExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse BitwiseANDExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-BitwiseANDExpression</xqdoc:name>
      <xqdoc:signature>declare function p:parse-BitwiseANDExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing BitwiseANDExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-BitwiseANDExpression</xqdoc:name>
      <xqdoc:signature>declare function p:try-BitwiseANDExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production BitwiseXORExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-BitwiseXORExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-BitwiseXORExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production BitwiseXORExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-BitwiseXORExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-BitwiseXORExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse BitwiseXORExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-BitwiseXORExpression</xqdoc:name>
      <xqdoc:signature>declare function p:parse-BitwiseXORExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing BitwiseXORExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-BitwiseXORExpression</xqdoc:name>
      <xqdoc:signature>declare function p:try-BitwiseXORExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production BitwiseORExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-BitwiseORExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-BitwiseORExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production BitwiseORExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-BitwiseORExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-BitwiseORExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse BitwiseORExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-BitwiseORExpression</xqdoc:name>
      <xqdoc:signature>declare function p:parse-BitwiseORExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing BitwiseORExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-BitwiseORExpression</xqdoc:name>
      <xqdoc:signature>declare function p:try-BitwiseORExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production LogicalANDExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-LogicalANDExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-LogicalANDExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production LogicalANDExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-LogicalANDExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-LogicalANDExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse LogicalANDExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-LogicalANDExpression</xqdoc:name>
      <xqdoc:signature>declare function p:parse-LogicalANDExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing LogicalANDExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-LogicalANDExpression</xqdoc:name>
      <xqdoc:signature>declare function p:try-LogicalANDExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production LogicalORExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-LogicalORExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-LogicalORExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production LogicalORExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-LogicalORExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-LogicalORExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse LogicalORExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-LogicalORExpression</xqdoc:name>
      <xqdoc:signature>declare function p:parse-LogicalORExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing LogicalORExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-LogicalORExpression</xqdoc:name>
      <xqdoc:signature>declare function p:try-LogicalORExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ConditionalExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ConditionalExpression</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ConditionalExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing ConditionalExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-ConditionalExpression</xqdoc:name>
      <xqdoc:signature>declare function p:try-ConditionalExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse AssignmentOperator.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-AssignmentOperator</xqdoc:name>
      <xqdoc:signature>declare function p:parse-AssignmentOperator($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing AssignmentOperator.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-AssignmentOperator</xqdoc:name>
      <xqdoc:signature>declare function p:try-AssignmentOperator($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse NewExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-NewExpression</xqdoc:name>
      <xqdoc:signature>declare function p:parse-NewExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing NewExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-NewExpression</xqdoc:name>
      <xqdoc:signature>declare function p:try-NewExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production Arguments (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-Arguments-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-Arguments-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production Arguments (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-Arguments-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-Arguments-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse Arguments.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-Arguments</xqdoc:name>
      <xqdoc:signature>declare function p:parse-Arguments($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing Arguments.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-Arguments</xqdoc:name>
      <xqdoc:signature>declare function p:try-Arguments($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse FunctionExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-FunctionExpression</xqdoc:name>
      <xqdoc:signature>declare function p:parse-FunctionExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing FunctionExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-FunctionExpression</xqdoc:name>
      <xqdoc:signature>declare function p:try-FunctionExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production Expression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-Expression-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-Expression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production Expression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-Expression-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-Expression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse Expression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-Expression</xqdoc:name>
      <xqdoc:signature>declare function p:parse-Expression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing Expression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-Expression</xqdoc:name>
      <xqdoc:signature>declare function p:try-Expression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse PropertySetParameterList.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-PropertySetParameterList</xqdoc:name>
      <xqdoc:signature>declare function p:parse-PropertySetParameterList($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing PropertySetParameterList.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-PropertySetParameterList</xqdoc:name>
      <xqdoc:signature>declare function p:try-PropertySetParameterList($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse PropertyName.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-PropertyName</xqdoc:name>
      <xqdoc:signature>declare function p:parse-PropertyName($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing PropertyName.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-PropertyName</xqdoc:name>
      <xqdoc:signature>declare function p:try-PropertyName($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse PropertyAssignment.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-PropertyAssignment</xqdoc:name>
      <xqdoc:signature>declare function p:parse-PropertyAssignment($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing PropertyAssignment.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-PropertyAssignment</xqdoc:name>
      <xqdoc:signature>declare function p:try-PropertyAssignment($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production ObjectLiteral (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ObjectLiteral-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ObjectLiteral-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production ObjectLiteral (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-ObjectLiteral-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-ObjectLiteral-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ObjectLiteral.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ObjectLiteral</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ObjectLiteral($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing ObjectLiteral.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-ObjectLiteral</xqdoc:name>
      <xqdoc:signature>declare function p:try-ObjectLiteral($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production ArrayLiteral (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ArrayLiteral-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ArrayLiteral-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production ArrayLiteral (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-ArrayLiteral-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-ArrayLiteral-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse ArrayLiteral.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-ArrayLiteral</xqdoc:name>
      <xqdoc:signature>declare function p:parse-ArrayLiteral($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing ArrayLiteral.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-ArrayLiteral</xqdoc:name>
      <xqdoc:signature>declare function p:try-ArrayLiteral($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse NumericLiteral.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-NumericLiteral</xqdoc:name>
      <xqdoc:signature>declare function p:parse-NumericLiteral($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing NumericLiteral.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-NumericLiteral</xqdoc:name>
      <xqdoc:signature>declare function p:try-NumericLiteral($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse Literal.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-Literal</xqdoc:name>
      <xqdoc:signature>declare function p:parse-Literal($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing Literal.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-Literal</xqdoc:name>
      <xqdoc:signature>declare function p:try-Literal($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse PrimaryExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-PrimaryExpression</xqdoc:name>
      <xqdoc:signature>declare function p:parse-PrimaryExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing PrimaryExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-PrimaryExpression</xqdoc:name>
      <xqdoc:signature>declare function p:try-PrimaryExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production MemberExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-MemberExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-MemberExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production MemberExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-MemberExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-MemberExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse MemberExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-MemberExpression</xqdoc:name>
      <xqdoc:signature>declare function p:parse-MemberExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing MemberExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-MemberExpression</xqdoc:name>
      <xqdoc:signature>declare function p:try-MemberExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production CallExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-CallExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-CallExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production CallExpression (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-CallExpression-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-CallExpression-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse CallExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-CallExpression</xqdoc:name>
      <xqdoc:signature>declare function p:parse-CallExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing CallExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-CallExpression</xqdoc:name>
      <xqdoc:signature>declare function p:try-CallExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse LeftHandSideExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-LeftHandSideExpression</xqdoc:name>
      <xqdoc:signature>declare function p:parse-LeftHandSideExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing LeftHandSideExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-LeftHandSideExpression</xqdoc:name>
      <xqdoc:signature>declare function p:try-LeftHandSideExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse AssignmentExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-AssignmentExpression</xqdoc:name>
      <xqdoc:signature>declare function p:parse-AssignmentExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing AssignmentExpression.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-AssignmentExpression</xqdoc:name>
      <xqdoc:signature>declare function p:try-AssignmentExpression($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse Initialiser.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-Initialiser</xqdoc:name>
      <xqdoc:signature>declare function p:parse-Initialiser($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing Initialiser.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-Initialiser</xqdoc:name>
      <xqdoc:signature>declare function p:try-Initialiser($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse VariableDeclaration.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-VariableDeclaration</xqdoc:name>
      <xqdoc:signature>declare function p:parse-VariableDeclaration($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing VariableDeclaration.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-VariableDeclaration</xqdoc:name>
      <xqdoc:signature>declare function p:try-VariableDeclaration($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production VariableDeclarationList (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-VariableDeclarationList-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-VariableDeclarationList-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production VariableDeclarationList (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-VariableDeclarationList-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-VariableDeclarationList-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse VariableDeclarationList.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-VariableDeclarationList</xqdoc:name>
      <xqdoc:signature>declare function p:parse-VariableDeclarationList($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing VariableDeclarationList.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-VariableDeclarationList</xqdoc:name>
      <xqdoc:signature>declare function p:try-VariableDeclarationList($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse VariableStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-VariableStatement</xqdoc:name>
      <xqdoc:signature>declare function p:parse-VariableStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing VariableStatement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-VariableStatement</xqdoc:name>
      <xqdoc:signature>declare function p:try-VariableStatement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production Block (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-Block-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-Block-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production Block (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-Block-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-Block-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse Block.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-Block</xqdoc:name>
      <xqdoc:signature>declare function p:parse-Block($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing Block.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-Block</xqdoc:name>
      <xqdoc:signature>declare function p:try-Block($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse Statement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-Statement</xqdoc:name>
      <xqdoc:signature>declare function p:parse-Statement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing Statement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-Statement</xqdoc:name>
      <xqdoc:signature>declare function p:try-Statement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production FunctionBody (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-FunctionBody-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-FunctionBody-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production FunctionBody (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-FunctionBody-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-FunctionBody-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse FunctionBody.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-FunctionBody</xqdoc:name>
      <xqdoc:signature>declare function p:parse-FunctionBody($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing FunctionBody.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-FunctionBody</xqdoc:name>
      <xqdoc:signature>declare function p:try-FunctionBody($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production FormalParameterList (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-FormalParameterList-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-FormalParameterList-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing the 1st loop of production FormalParameterList (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-FormalParameterList-1</xqdoc:name>
      <xqdoc:signature>declare function p:try-FormalParameterList-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse FormalParameterList.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-FormalParameterList</xqdoc:name>
      <xqdoc:signature>declare function p:parse-FormalParameterList($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing FormalParameterList.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-FormalParameterList</xqdoc:name>
      <xqdoc:signature>declare function p:try-FormalParameterList($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse FunctionDeclaration.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-FunctionDeclaration</xqdoc:name>
      <xqdoc:signature>declare function p:parse-FunctionDeclaration($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing FunctionDeclaration.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-FunctionDeclaration</xqdoc:name>
      <xqdoc:signature>declare function p:try-FunctionDeclaration($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse SourceElement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-SourceElement</xqdoc:name>
      <xqdoc:signature>declare function p:parse-SourceElement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Try parsing SourceElement.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:try-SourceElement</xqdoc:name>
      <xqdoc:signature>declare function p:try-SourceElement($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse the 1st loop of production Program (zero or more). Use
tail recursion for iteratively updating the parser state.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-Program-1</xqdoc:name>
      <xqdoc:signature>declare function p:parse-Program-1($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parse Program.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-Program</xqdoc:name>
      <xqdoc:signature>declare function p:parse-Program($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Create a textual error message from a parsing error.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$error the parsing error descriptor.</xqdoc:param>
        <xqdoc:return>the error message.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:error-message</xqdoc:name>
      <xqdoc:signature>declare function p:error-message($input as xs:string, $error as element(error)) as xs:string</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>error</xqdoc:name>
          <xqdoc:type>element(error)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Shift one token, i.e. compare lookahead token 1 with expected
token and in case of a match, shift lookahead tokens down such that
l1 becomes the current token, and higher lookahead tokens move down.
When lookahead token 1 does not match the expected token, raise an
error by saving the expected token code in the error field of the
parser state.</xqdoc:description>
        <xqdoc:param>$code the expected token.</xqdoc:param>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:shift</xqdoc:name>
      <xqdoc:signature>declare function p:shift($code as xs:integer, $input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>code</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Shift one token, i.e. compare lookahead token 1 with expected
token and in case of a match, shift lookahead tokens down such that
l1 becomes the current token, and higher lookahead tokens move down.
When lookahead token 1 does not match the expected token, raise an
error by saving the expected token code in the error field of the
parser state. In contrast to p:shift, do not create any output.</xqdoc:description>
        <xqdoc:param>$code the expected token.</xqdoc:param>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:shiftT</xqdoc:name>
      <xqdoc:signature>declare function p:shiftT($code as xs:integer, $input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>code</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Consume whitespace.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:whitespace</xqdoc:name>
      <xqdoc:signature>declare function p:whitespace($input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Use p:match to fetch the next token, but skip any leading
whitespace.</xqdoc:description>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$begin the index where to start.</xqdoc:param>
        <xqdoc:param>$token-set the valid token set id.</xqdoc:param>
        <xqdoc:return>a sequence of three values: the token code of the result
token, with input string positions of token begin and end.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:matchW</xqdoc:name>
      <xqdoc:signature>declare function p:matchW($input as xs:string, $begin as xs:integer, $token-set as xs:integer) as xs:integer+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>begin</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>token-set</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Lookahead one token on level 1 with whitespace skipping.</xqdoc:description>
        <xqdoc:param>$set the code of the DFA entry state for the set of valid tokens.</xqdoc:param>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:lookahead1W</xqdoc:name>
      <xqdoc:signature>declare function p:lookahead1W($set as xs:integer, $input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>set</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Lookahead one token on level 1.</xqdoc:description>
        <xqdoc:param>$set the code of the DFA entry state for the set of valid tokens.</xqdoc:param>
        <xqdoc:param>$input the input string.</xqdoc:param>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:lookahead1</xqdoc:name>
      <xqdoc:signature>declare function p:lookahead1($set as xs:integer, $input as xs:string, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>set</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="5">
      <xqdoc:comment>
        <xqdoc:description>Reduce the result stack, creating a nonterminal element. Pop
$count elements off the stack, wrap them in a new element
named $name, and push the new element.</xqdoc:description>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:param>$name the name of the result node.</xqdoc:param>
        <xqdoc:param>$count the number of child nodes.</xqdoc:param>
        <xqdoc:param>$begin the input index where the nonterminal begins.</xqdoc:param>
        <xqdoc:param>$end the input index where the nonterminal ends.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:reduce</xqdoc:name>
      <xqdoc:signature>declare function p:reduce($state as item()+, $name as xs:string, $count as xs:integer, $begin as xs:integer, $end as xs:integer) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>count</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>begin</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>end</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Strip result from parser state, in order to avoid carrying it while
backtracking.</xqdoc:description>
        <xqdoc:param>$state the parser state after an alternative failed.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:strip-result</xqdoc:name>
      <xqdoc:signature>declare function p:strip-result($state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Restore parser state after unsuccessfully trying an alternative,
merging any memoization that was collected on the way.</xqdoc:description>
        <xqdoc:param>$backtrack the parser state before backtracking started.</xqdoc:param>
        <xqdoc:param>$state the parser state after an alternative failed.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:restore</xqdoc:name>
      <xqdoc:signature>declare function p:restore($backtrack as item()+, $state as item()+) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>backtrack</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="4">
      <xqdoc:comment>
        <xqdoc:description>Memoize the backtracking result that was computed at decision point
$i for input position $state[$p:e0].</xqdoc:description>
        <xqdoc:param>$backtrack the parser state before backtracking started.</xqdoc:param>
        <xqdoc:param>$state the parser state after successfully trying an alternative.</xqdoc:param>
        <xqdoc:param>$v the id of the successful alternative.</xqdoc:param>
        <xqdoc:param>$i the decision point id.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:memoize</xqdoc:name>
      <xqdoc:signature>declare function p:memoize($backtrack as item()+, $state as item()+, $v as xs:integer, $i as xs:integer) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>backtrack</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>v</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>i</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Retrieve memoized backtracking result for decision point $i
and input position $state[$p:e0] into $state[$p:lk].</xqdoc:description>
        <xqdoc:param>$state the parser state.</xqdoc:param>
        <xqdoc:param>$i the decision point id.</xqdoc:param>
        <xqdoc:return>the updated parser state.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:memoized</xqdoc:name>
      <xqdoc:signature>declare function p:memoized($state as item()+, $i as xs:integer) as item()+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>state</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>i</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Parse start symbol Program from given string.</xqdoc:description>
        <xqdoc:param>$s the string to be parsed.</xqdoc:param>
        <xqdoc:return>the result as generated by parser actions.</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>p:parse-Program</xqdoc:name>
      <xqdoc:signature>declare function p:parse-Program($s as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>s</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>