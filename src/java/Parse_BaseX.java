// This file was generated on Thu May 16, 2019 18:58 (UTC+02) by REx v5.49 which is Copyright (c) 1979-2019 by Gunther Rademacher <grd@gmx.net>
// REx command line: file.ebnf -ll 2 -backtrack -tree -java -basex -name expkg-zone58.text.parse.Parse-BaseX

package expkg_zone58.text.parse;

import java.io.IOException;
import java.util.Arrays;

import org.basex.build.MemBuilder;
import org.basex.build.SingleParser;
import org.basex.core.MainOptions;
import org.basex.io.IOContent;
import org.basex.query.value.item.Str;
import org.basex.query.value.node.ANode;
import org.basex.query.value.node.DBNode;
import org.basex.util.Atts;
import org.basex.util.Token;

public class Parse_BaseX
{
  public static class ParseException extends RuntimeException
  {
    private static final long serialVersionUID = 1L;
    private int begin, end, offending, expected, state;

    public ParseException(int b, int e, int s, int o, int x)
    {
      begin = b;
      end = e;
      state = s;
      offending = o;
      expected = x;
    }

    @Override
    public String getMessage()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    }

    public void serialize(EventHandler eventHandler)
    {
    }

    public int getBegin() {return begin;}
    public int getEnd() {return end;}
    public int getState() {return state;}
    public int getOffending() {return offending;}
    public int getExpected() {return expected;}
    public boolean isAmbiguousInput() {return false;}
  }

  public interface EventHandler
  {
    public void reset(CharSequence string);
    public void startNonterminal(String name, int begin);
    public void endNonterminal(String name, int end);
    public void terminal(String name, int begin, int end);
    public void whitespace(int begin, int end);
  }

  public static class TopDownTreeBuilder implements EventHandler
  {
    private CharSequence input = null;
    private Nonterminal[] stack = new Nonterminal[64];
    private int top = -1;

    @Override
    public void reset(CharSequence input)
    {
      this.input = input;
      top = -1;
    }

    @Override
    public void startNonterminal(String name, int begin)
    {
      Nonterminal nonterminal = new Nonterminal(name, begin, begin, new Symbol[0]);
      if (top >= 0) addChild(nonterminal);
      if (++top >= stack.length) stack = Arrays.copyOf(stack, stack.length << 1);
      stack[top] = nonterminal;
    }

    @Override
    public void endNonterminal(String name, int end)
    {
      stack[top].end = end;
      if (top > 0) --top;
    }

    @Override
    public void terminal(String name, int begin, int end)
    {
      addChild(new Terminal(name, begin, end));
    }

    @Override
    public void whitespace(int begin, int end)
    {
    }

    private void addChild(Symbol s)
    {
      Nonterminal current = stack[top];
      current.children = Arrays.copyOf(current.children, current.children.length + 1);
      current.children[current.children.length - 1] = s;
    }

    public void serialize(EventHandler e)
    {
      e.reset(input);
      stack[0].send(e);
    }
  }

  public static abstract class Symbol
  {
    public String name;
    public int begin;
    public int end;

    protected Symbol(String name, int begin, int end)
    {
      this.name = name;
      this.begin = begin;
      this.end = end;
    }

    public abstract void send(EventHandler e);
  }

  public static class Terminal extends Symbol
  {
    public Terminal(String name, int begin, int end)
    {
      super(name, begin, end);
    }

    @Override
    public void send(EventHandler e)
    {
      e.terminal(name, begin, end);
    }
  }

  public static class Nonterminal extends Symbol
  {
    public Symbol[] children;

    public Nonterminal(String name, int begin, int end, Symbol[] children)
    {
      super(name, begin, end);
      this.children = children;
    }

    @Override
    public void send(EventHandler e)
    {
      e.startNonterminal(name, begin);
      int pos = begin;
      for (Symbol c : children)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
      if (pos < end) e.whitespace(pos, end);
      e.endNonterminal(name, end);
    }
  }

  public static ANode parseXQuery(Str str) throws IOException
  {
    BaseXFunction baseXFunction = new BaseXFunction()
    {
      @Override
      public void execute(Parse_BaseX p) {p.parse_XQuery();}
    };
    return baseXFunction.call(str);
  }

  public static abstract class BaseXFunction
  {
    protected abstract void execute(Parse_BaseX p);

    public ANode call(Str str) throws IOException
    {
      String input = str.toJava();
      SingleParser singleParser = new SingleParser(new IOContent(""), MainOptions.get())
      {
        @Override
        protected void parse() throws IOException {}
      };
      MemBuilder memBuilder = new MemBuilder(input, singleParser);
      memBuilder.init();
      BaseXTreeBuilder treeBuilder = new BaseXTreeBuilder(memBuilder);
      Parse_BaseX parser = new Parse_BaseX();
      parser.initialize(input, treeBuilder);
      try
      {
        execute(parser);
      }
      catch (ParseException pe)
      {
        memBuilder = new MemBuilder(input, singleParser);
        memBuilder.init();
        Atts atts = new Atts();
        atts.add(Token.token("b"), Token.token(pe.getBegin() + 1));
        atts.add(Token.token("e"), Token.token(pe.getEnd() + 1));
        if (pe.getOffending() < 0)
        {
          atts.add(Token.token("s"), Token.token(pe.getState()));
        }
        else
        {
          atts.add(Token.token("o"), Token.token(pe.getOffending()));
          atts.add(Token.token("x"), Token.token(pe.getExpected()));
        }
        memBuilder.openElem(Token.token("ERROR"), atts, new Atts());
        memBuilder.text(Token.token(parser.getErrorMessage(pe)));
        memBuilder.closeElem();
      }
      return new DBNode(memBuilder.data());
    }
  }

  public static class BaseXTreeBuilder implements EventHandler
  {
    private CharSequence input;
    private MemBuilder builder;
    private Atts nsp = new Atts();
    private Atts atts = new Atts();

    public BaseXTreeBuilder(MemBuilder b)
    {
      input = null;
      builder = b;
    }

    @Override
    public void reset(CharSequence string)
    {
      input = string;
    }

    @Override
    public void startNonterminal(String name, int begin)
    {
      try
      {
        builder.openElem(Token.token(name), atts, nsp);
      }
      catch (IOException e)
      {
        throw new RuntimeException(e);
      }
    }

    @Override
    public void endNonterminal(String name, int end)
    {
      try
      {
        builder.closeElem();
      }
      catch (IOException e)
      {
        throw new RuntimeException(e);
      }
    }

    @Override
    public void terminal(String name, int begin, int end)
    {
      if (name.charAt(0) == '\'')
      {
        name = "TOKEN";
      }
      startNonterminal(name, begin);
      characters(begin, end);
      endNonterminal(name, end);
    }

    @Override
    public void whitespace(int begin, int end)
    {
      characters(begin, end);
    }

    private void characters(int begin, int end)
    {
      if (begin < end)
      {
        try
        {
          builder.text(Token.token(input.subSequence(begin, end).toString()));
        }
        catch (IOException e)
        {
          throw new RuntimeException(e);
        }
      }
    }
  }

  public Parse_BaseX()
  {
  }

  public Parse_BaseX(CharSequence string, EventHandler t)
  {
    initialize(string, t);
  }

  public void initialize(CharSequence source, EventHandler parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = source;
    size = source.length();
    reset(0, 0, 0);
  }

  public CharSequence getInput()
  {
    return input;
  }

  public int getTokenOffset()
  {
    return b0;
  }

  public int getTokenEnd()
  {
    return e0;
  }

  public final void reset(int l, int b, int e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0;
    end = e;
    ex = -1;
    memo.clear();
    eventHandler.reset(input);
  }

  public void reset()
  {
    reset(0, 0, 0);
  }

  public static String getOffendingToken(ParseException e)
  {
    return e.getOffending() < 0 ? null : TOKEN[e.getOffending()];
  }

  public static String[] getExpectedTokenSet(ParseException e)
  {
    String[] expected;
    if (e.getExpected() >= 0)
    {
      expected = new String[]{TOKEN[e.getExpected()]};
    }
    else
    {
      expected = getTokenSet(- e.getState());
    }
    return expected;
  }

  public String getErrorMessage(ParseException e)
  {
    String message = e.getMessage();
    String[] tokenSet = getExpectedTokenSet(e);
    String found = getOffendingToken(e);
    int size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : java.util.Arrays.toString(tokenSet))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    String prefix = input.subSequence(0, e.getBegin()).toString();
    int line = prefix.replaceAll("[^\n]", "").length() + 1;
    int column = prefix.length() - prefix.lastIndexOf('\n');
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.subSequence(e.getBegin(), Math.min(input.length(), e.getBegin() + 64))
         + "...";
  }

  public void parse_XQuery()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Module();
    consume(25);                    // EOF
    eventHandler.endNonterminal("XQuery", e0);
  }

  private void parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 262:                       // 'xquery'
      lookahead2W(182);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'encoding' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'transform' | 'treat' | 'union' | 'update' | 'version' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 63750                 // 'xquery' 'encoding'
     || lk == 129286)               // 'xquery' 'version'
    {
      parse_VersionDecl();
    }
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 175:                       // 'module'
      lookahead2W(181);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'or' | 'to' | 'transform' | 'treat' | 'union' | 'update' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 90799:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  private void parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    consume(262);                   // 'xquery'
    lookahead1W(110);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 124:                       // 'encoding'
      consume(124);                 // 'encoding'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      break;
    default:
      consume(252);                 // 'version'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      lookahead1W(102);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 124)                // 'encoding'
      {
        consume(124);               // 'encoding'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consume(4);                 // StringLiteral
      }
    }
    lookahead1W(31);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  private void parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(132);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  private void parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    consume(175);                   // 'module'
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consume(177);                   // 'namespace'
    lookahead1W(174);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
    whitespace();
    parse_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(31);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  private void parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(238);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(185);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'base-uri' | 'boundary-space' | 'cast' | 'castable' | 'construction' |
                                    // 'contains' | 'context' | 'copy-namespaces' | 'decimal-format' | 'default' |
                                    // 'div' | 'eq' | 'except' | 'ft-option' | 'function' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'option' | 'or' | 'ordering' | 'revalidation' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'update' | 'variable' | '|' | '||'
        break;
      case 150:                     // 'import'
        lookahead2W(183);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'module' | 'ne' | 'or' |
                                    // 'schema' | 'to' | 'transform' | 'treat' | 'union' | 'update' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 44651               // 'declare' 'base-uri'
       && lk != 45675               // 'declare' 'boundary-space'
       && lk != 50283               // 'declare' 'construction'
       && lk != 52843               // 'declare' 'copy-namespaces'
       && lk != 53867               // 'declare' 'decimal-format'
       && lk != 55403               // 'declare' 'default'
       && lk != 70763               // 'declare' 'ft-option'
       && lk != 89750               // 'import' 'module'
       && lk != 90731               // 'declare' 'namespace'
       && lk != 99435               // 'declare' 'ordering'
       && lk != 108139              // 'declare' 'revalidation'
       && lk != 109718)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(167);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 55403)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 90731:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 150:                     // 'import'
        whitespace();
        parse_Import();
        break;
      case 70763:                   // 'declare' 'ft-option'
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(238);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(184);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'context' | 'div' | 'eq' | 'except' |
                                    // 'function' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'lt' | 'mod' | 'ne' | 'option' | 'or' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'variable' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 16491               // 'declare' '%'
       && lk != 51819               // 'declare' 'context'
       && lk != 72811               // 'declare' 'function'
       && lk != 97387               // 'declare' 'option'
       && lk != 128619)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(156);           // S^WS | '%' | '(:' | 'context' | 'function' | 'option' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 51819:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 97387:                   // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  private void parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    consume(52);                    // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  private void parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 107:                       // 'declare'
      lookahead2W(162);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 55403)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (ParseException p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (ParseException p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 45675:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 44651:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 50283:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 99435:                     // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 108139:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 52843:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  private void parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(36);                // S^WS | '(:' | 'boundary-space'
    consume(89);                    // 'boundary-space'
    lookahead1W(127);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 204:                       // 'preserve'
      consume(204);                 // 'preserve'
      break;
    default:
      consume(230);                 // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  private void parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(108);                   // 'default'
    lookahead1W(40);                // S^WS | '(:' | 'collation'
    consume(96);                    // 'collation'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  private void try_DefaultCollationDecl()
  {
    consumeT(107);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(108);                  // 'default'
    lookahead1W(40);                // S^WS | '(:' | 'collation'
    consumeT(96);                   // 'collation'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
  }

  private void parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(35);                // S^WS | '(:' | 'base-uri'
    consume(87);                    // 'base-uri'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  private void parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'construction'
    consume(98);                    // 'construction'
    lookahead1W(127);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 230:                       // 'strip'
      consume(230);                 // 'strip'
      break;
    default:
      consume(204);                 // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  private void parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(62);                // S^WS | '(:' | 'ordering'
    consume(194);                   // 'ordering'
    lookahead1W(125);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 193:                       // 'ordered'
      consume(193);                 // 'ordered'
      break;
    default:
      consume(244);                 // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  private void parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(108);                   // 'default'
    lookahead1W(61);                // S^WS | '(:' | 'order'
    consume(192);                   // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(122);                   // 'empty'
    lookahead1W(115);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 144:                       // 'greatest'
      consume(144);                 // 'greatest'
      break;
    default:
      consume(166);                 // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  private void try_EmptyOrderDecl()
  {
    consumeT(107);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(108);                  // 'default'
    lookahead1W(61);                // S^WS | '(:' | 'order'
    consumeT(192);                  // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(122);                  // 'empty'
    lookahead1W(115);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 144:                       // 'greatest'
      consumeT(144);                // 'greatest'
      break;
    default:
      consumeT(166);                // 'least'
    }
  }

  private void parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'copy-namespaces'
    consume(103);                   // 'copy-namespaces'
    lookahead1W(122);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(27);                // S^WS | '(:' | ','
    consume(40);                    // ','
    lookahead1W(117);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  private void parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 204:                       // 'preserve'
      consume(204);                 // 'preserve'
      break;
    default:
      consume(183);                 // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  private void parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 153:                       // 'inherit'
      consume(153);                 // 'inherit'
      break;
    default:
      consume(182);                 // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  private void parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(108);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 105:                       // 'decimal-format'
      consume(105);                 // 'decimal-format'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      consume(108);                 // 'default'
      lookahead1W(45);              // S^WS | '(:' | 'decimal-format'
      consume(105);                 // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(172);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'exponent-separator' | 'grouping-separator' | 'infinity' | 'minus-sign' |
                                    // 'pattern-separator' | 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 52)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  private void parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 106:                       // 'decimal-separator'
      consume(106);                 // 'decimal-separator'
      break;
    case 146:                       // 'grouping-separator'
      consume(146);                 // 'grouping-separator'
      break;
    case 152:                       // 'infinity'
      consume(152);                 // 'infinity'
      break;
    case 172:                       // 'minus-sign'
      consume(172);                 // 'minus-sign'
      break;
    case 68:                        // 'NaN'
      consume(68);                  // 'NaN'
      break;
    case 200:                       // 'percent'
      consume(200);                 // 'percent'
      break;
    case 199:                       // 'per-mille'
      consume(199);                 // 'per-mille'
      break;
    case 263:                       // 'zero-digit'
      consume(263);                 // 'zero-digit'
      break;
    case 115:                       // 'digit'
      consume(115);                 // 'digit'
      break;
    case 198:                       // 'pattern-separator'
      consume(198);                 // 'pattern-separator'
      break;
    default:
      consume(131);                 // 'exponent-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  private void parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 150:                       // 'import'
      lookahead2W(120);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 109718:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  private void parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    consume(150);                   // 'import'
    lookahead1W(65);                // S^WS | '(:' | 'schema'
    consume(214);                   // 'schema'
    lookahead1W(131);               // StringLiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 4)                    // StringLiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(101);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 85)                   // 'at'
    {
      consume(85);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(93);            // S^WS | '(:' | ',' | ';'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  private void parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 177:                       // 'namespace'
      consume(177);                 // 'namespace'
      lookahead1W(174);             // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
      whitespace();
      parse_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
      break;
    default:
      consume(108);                 // 'default'
      lookahead1W(47);              // S^WS | '(:' | 'element'
      consume(120);                 // 'element'
      lookahead1W(57);              // S^WS | '(:' | 'namespace'
      consume(177);                 // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  private void parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    consume(150);                   // 'import'
    lookahead1W(56);                // S^WS | '(:' | 'module'
    consume(175);                   // 'module'
    lookahead1W(82);                // StringLiteral | S^WS | '(:' | 'namespace'
    if (l1 == 177)                  // 'namespace'
    {
      consume(177);                 // 'namespace'
      lookahead1W(174);             // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
      whitespace();
      parse_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(101);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 85)                   // 'at'
    {
      consume(85);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(93);            // S^WS | '(:' | ',' | ';'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  private void parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consume(177);                   // 'namespace'
    lookahead1W(174);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
    whitespace();
    parse_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  private void parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(108);                   // 'default'
    lookahead1W(109);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 120:                       // 'element'
      consume(120);                 // 'element'
      break;
    default:
      consume(142);                 // 'function'
    }
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consume(177);                   // 'namespace'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  private void try_DefaultNamespaceDecl()
  {
    consumeT(107);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(108);                  // 'default'
    lookahead1W(109);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 120:                       // 'element'
      consumeT(120);                // 'element'
      break;
    default:
      consumeT(142);                // 'function'
    }
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consumeT(177);                  // 'namespace'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
  }

  private void parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(51);                // S^WS | '(:' | 'ft-option'
    consume(138);                   // 'ft-option'
    lookahead1W(74);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  private void parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    consume(107);                   // 'declare'
    for (;;)
    {
      lookahead1W(135);             // S^WS | '%' | '(:' | 'function' | 'variable'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 251:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    default:
      whitespace();
      parse_FunctionDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  private void parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    consume(32);                    // '%'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(147);               // S^WS | '%' | '(' | '(:' | 'function' | 'variable'
    if (l1 == 34)                   // '('
    {
      consume(34);                  // '('
      lookahead1W(145);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(145);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  private void try_Annotation()
  {
    consumeT(32);                   // '%'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(147);               // S^WS | '%' | '(' | '(:' | 'function' | 'variable'
    if (l1 == 34)                   // '('
    {
      consumeT(34);                 // '('
      lookahead1W(145);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(145);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      consumeT(37);                 // ')'
    }
  }

  private void parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    consume(251);                   // 'variable'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(139);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(100);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 51:                        // ':='
      consume(51);                  // ':='
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(132);                 // 'external'
      lookahead1W(98);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consume(51);                // ':='
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  private void parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  private void parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  private void parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(43);                // S^WS | '(:' | 'context'
    consume(101);                   // 'context'
    lookahead1W(54);                // S^WS | '(:' | 'item'
    consume(161);                   // 'item'
    lookahead1W(139);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 83)                   // 'as'
    {
      consume(83);                  // 'as'
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(100);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 51:                        // ':='
      consume(51);                  // ':='
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(132);                 // 'external'
      lookahead1W(98);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consume(51);                // ':='
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  private void parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    consume(142);                   // 'function'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(85);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(140);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 83)                   // 'as'
    {
      consume(83);                  // 'as'
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(113);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      whitespace();
      parse_FunctionBody();
      break;
    default:
      consume(132);                 // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  private void parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  private void try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  private void parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(137);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  private void try_Param()
  {
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(137);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  private void parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  private void try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  private void parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    consume(264);                   // '{'
    lookahead1W(242);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  private void try_EnclosedExpr()
  {
    consumeT(264);                  // '{'
    lookahead1W(242);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      try_Expr();
    }
    consumeT(268);                  // '}'
  }

  private void parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(60);                // S^WS | '(:' | 'option'
    consume(190);                   // 'option'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  private void parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(163);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 210)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  private void try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(163);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 210)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  private void parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(134);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
      parse_ForClause();
      break;
    case 167:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  private void try_InitialClause()
  {
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(134);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
      try_ForClause();
      break;
    case 167:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  private void parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 136:                       // 'for'
    case 167:                       // 'let'
      parse_InitialClause();
      break;
    case 255:                       // 'where'
      parse_WhereClause();
      break;
    case 145:                       // 'group'
      parse_GroupByClause();
      break;
    case 104:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  private void try_IntermediateClause()
  {
    switch (l1)
    {
    case 136:                       // 'for'
    case 167:                       // 'let'
      try_InitialClause();
      break;
    case 255:                       // 'where'
      try_WhereClause();
      break;
    case 145:                       // 'group'
      try_GroupByClause();
      break;
    case 104:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  private void parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    consume(136);                   // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  private void try_ForClause()
  {
    consumeT(136);                  // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  private void parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(157);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(149);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 77)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(142);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 85)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(116);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 217)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  private void try_ForBinding()
  {
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(157);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(149);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 77)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(142);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 85)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(116);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 217)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    consume(77);                    // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(122);                   // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  private void try_AllowingEmpty()
  {
    consumeT(77);                   // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(122);                  // 'empty'
  }

  private void parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    consume(85);                    // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  private void try_PositionalVar()
  {
    consumeT(85);                   // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  private void parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    consume(217);                   // 'score'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  private void try_FTScoreVar()
  {
    consumeT(217);                  // 'score'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  private void parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    consume(167);                   // 'let'
    lookahead1W(87);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(87);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  private void try_LetClause()
  {
    consumeT(167);                  // 'let'
    lookahead1W(87);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(87);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  private void parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 31:                        // '$'
      consume(31);                  // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(99);              // S^WS | '(:' | ':=' | 'as'
      if (l1 == 83)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(30);                // S^WS | '(:' | ':='
    consume(51);                    // ':='
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  private void try_LetBinding()
  {
    switch (l1)
    {
    case 31:                        // '$'
      consumeT(31);                 // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(99);              // S^WS | '(:' | ':=' | 'as'
      if (l1 == 83)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(30);                // S^WS | '(:' | ':='
    consumeT(51);                   // ':='
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    consume(136);                   // 'for'
    lookahead1W(129);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 240:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  private void try_WindowClause()
  {
    consumeT(136);                  // 'for'
    lookahead1W(129);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 240:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  private void parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    consume(240);                   // 'tumbling'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consume(257);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    whitespace();
    parse_WindowStartCondition();
    lookahead1W(168);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 125                   // 'end'
     || l1 == 189)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  private void try_TumblingWindowClause()
  {
    consumeT(240);                  // 'tumbling'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consumeT(257);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    try_WindowStartCondition();
    lookahead1W(168);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 125                   // 'end'
     || l1 == 189)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  private void parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    consume(223);                   // 'sliding'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consume(257);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    whitespace();
    parse_WindowStartCondition();
    lookahead1W(111);               // S^WS | '(:' | 'end' | 'only'
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  private void try_SlidingWindowClause()
  {
    consumeT(223);                  // 'sliding'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consumeT(257);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    try_WindowStartCondition();
    lookahead1W(111);               // S^WS | '(:' | 'end' | 'only'
    try_WindowEndCondition();
  }

  private void parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    consume(226);                   // 'start'
    lookahead1W(155);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consume(254);                   // 'when'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  private void try_WindowStartCondition()
  {
    consumeT(226);                  // 'start'
    lookahead1W(155);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consumeT(254);                  // 'when'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 189)                  // 'only'
    {
      consume(189);                 // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consume(125);                   // 'end'
    lookahead1W(155);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consume(254);                   // 'when'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  private void try_WindowEndCondition()
  {
    if (l1 == 189)                  // 'only'
    {
      consumeT(189);                // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consumeT(125);                  // 'end'
    lookahead1W(155);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consumeT(254);                  // 'when'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(150);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 85)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(144);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 205)                  // 'previous'
    {
      consume(205);                 // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(121);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 180)                  // 'next'
    {
      consume(180);                 // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  private void try_WindowVars()
  {
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_CurrentItem();
    }
    lookahead1W(150);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 85)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(144);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 205)                  // 'previous'
    {
      consumeT(205);                // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_PreviousItem();
    }
    lookahead1W(121);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 180)                  // 'next'
    {
      consumeT(180);                // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_NextItem();
    }
  }

  private void parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  private void try_CurrentItem()
  {
    try_EQName();
  }

  private void parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  private void try_PreviousItem()
  {
    try_EQName();
  }

  private void parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  private void try_NextItem()
  {
    try_EQName();
  }

  private void parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    consume(104);                   // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  private void try_CountClause()
  {
    consumeT(104);                  // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  private void parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    consume(255);                   // 'where'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  private void try_WhereClause()
  {
    consumeT(255);                  // 'where'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    consume(145);                   // 'group'
    lookahead1W(37);                // S^WS | '(:' | 'by'
    consume(90);                    // 'by'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  private void try_GroupByClause()
  {
    consumeT(145);                  // 'group'
    lookahead1W(37);                // S^WS | '(:' | 'by'
    consumeT(90);                   // 'by'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_GroupingSpecList();
  }

  private void parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  private void try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_GroupingSpec();
    }
  }

  private void parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 2591                  // '$' URIQualifiedName
     || lk == 7711                  // '$' QName^Token
     || lk == 39967                 // '$' 'ancestor'
     || lk == 40479                 // '$' 'ancestor-or-self'
     || lk == 40991                 // '$' 'and'
     || lk == 42015                 // '$' 'array'
     || lk == 42527                 // '$' 'as'
     || lk == 43039                 // '$' 'ascending'
     || lk == 43551                 // '$' 'at'
     || lk == 44063                 // '$' 'attribute'
     || lk == 46623                 // '$' 'case'
     || lk == 47135                 // '$' 'cast'
     || lk == 47647                 // '$' 'castable'
     || lk == 48671                 // '$' 'child'
     || lk == 49183                 // '$' 'collation'
     || lk == 49695                 // '$' 'comment'
     || lk == 52255                 // '$' 'copy'
     || lk == 53279                 // '$' 'count'
     || lk == 54815                 // '$' 'declare'
     || lk == 55327                 // '$' 'default'
     || lk == 55839                 // '$' 'delete'
     || lk == 56351                 // '$' 'descendant'
     || lk == 56863                 // '$' 'descendant-or-self'
     || lk == 57375                 // '$' 'descending'
     || lk == 59935                 // '$' 'div'
     || lk == 60447                 // '$' 'document'
     || lk == 60959                 // '$' 'document-node'
     || lk == 61471                 // '$' 'element'
     || lk == 61983                 // '$' 'else'
     || lk == 62495                 // '$' 'empty'
     || lk == 63007                 // '$' 'empty-sequence'
     || lk == 64031                 // '$' 'end'
     || lk == 65055                 // '$' 'eq'
     || lk == 65567                 // '$' 'every'
     || lk == 66591                 // '$' 'except'
     || lk == 68639                 // '$' 'following'
     || lk == 69151                 // '$' 'following-sibling'
     || lk == 69663                 // '$' 'for'
     || lk == 72735                 // '$' 'function'
     || lk == 73247                 // '$' 'ge'
     || lk == 74271                 // '$' 'group'
     || lk == 75295                 // '$' 'gt'
     || lk == 75807                 // '$' 'idiv'
     || lk == 76319                 // '$' 'if'
     || lk == 76831                 // '$' 'import'
     || lk == 79391                 // '$' 'insert'
     || lk == 79903                 // '$' 'instance'
     || lk == 80415                 // '$' 'intersect'
     || lk == 81439                 // '$' 'invoke'
     || lk == 81951                 // '$' 'is'
     || lk == 82463                 // '$' 'item'
     || lk == 84511                 // '$' 'le'
     || lk == 85535                 // '$' 'let'
     || lk == 87071                 // '$' 'lt'
     || lk == 87583                 // '$' 'map'
     || lk == 88607                 // '$' 'mod'
     || lk == 89119                 // '$' 'modify'
     || lk == 89631                 // '$' 'module'
     || lk == 90655                 // '$' 'namespace'
     || lk == 91167                 // '$' 'namespace-node'
     || lk == 91679                 // '$' 'ne'
     || lk == 94239                 // '$' 'node'
     || lk == 96799                 // '$' 'only'
     || lk == 97823                 // '$' 'or'
     || lk == 98335                 // '$' 'order'
     || lk == 98847                 // '$' 'ordered'
     || lk == 100895                // '$' 'parent'
     || lk == 103455                // '$' 'preceding'
     || lk == 103967                // '$' 'preceding-sibling'
     || lk == 105503                // '$' 'processing-instruction'
     || lk == 106527                // '$' 'rename'
     || lk == 107039                // '$' 'replace'
     || lk == 107551                // '$' 'return'
     || lk == 109087                // '$' 'satisfies'
     || lk == 110111                // '$' 'schema-attribute'
     || lk == 110623                // '$' 'schema-element'
     || lk == 111647                // '$' 'self'
     || lk == 114719                // '$' 'some'
     || lk == 115231                // '$' 'stable'
     || lk == 115743                // '$' 'start'
     || lk == 118303                // '$' 'switch'
     || lk == 118815                // '$' 'text'
     || lk == 120863                // '$' 'to'
     || lk == 121375                // '$' 'transform'
     || lk == 121887                // '$' 'treat'
     || lk == 122399                // '$' 'try'
     || lk == 123935                // '$' 'typeswitch'
     || lk == 124447                // '$' 'union'
     || lk == 124959                // '$' 'unordered'
     || lk == 125471                // '$' 'update'
     || lk == 127519                // '$' 'validate'
     || lk == 130591                // '$' 'where'
     || lk == 132127                // '$' 'with'
     || lk == 134175)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(171);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 51              // ':='
           || l1 == 83)             // 'as'
          {
            if (l1 == 83)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(30);        // S^WS | '(:' | ':='
            consumeT(51);           // ':='
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_ExprSingle();
          }
          lookahead1W(166);         // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
          if (l1 == 96)             // 'collation'
          {
            consumeT(96);           // 'collation'
            lookahead1W(19);        // StringLiteral | S^WS | '(:'
            try_URILiteral();
          }
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(2, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      parse_GroupingVariable();
      lookahead1W(171);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 51                  // ':='
       || l1 == 83)                 // 'as'
      {
        if (l1 == 83)               // 'as'
        {
          whitespace();
          parse_TypeDeclaration();
        }
        lookahead1W(30);            // S^WS | '(:' | ':='
        consume(51);                // ':='
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
      lookahead1W(166);             // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
      if (l1 == 96)                 // 'collation'
      {
        consume(96);                // 'collation'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  private void try_GroupingSpec()
  {
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 2591                  // '$' URIQualifiedName
     || lk == 7711                  // '$' QName^Token
     || lk == 39967                 // '$' 'ancestor'
     || lk == 40479                 // '$' 'ancestor-or-self'
     || lk == 40991                 // '$' 'and'
     || lk == 42015                 // '$' 'array'
     || lk == 42527                 // '$' 'as'
     || lk == 43039                 // '$' 'ascending'
     || lk == 43551                 // '$' 'at'
     || lk == 44063                 // '$' 'attribute'
     || lk == 46623                 // '$' 'case'
     || lk == 47135                 // '$' 'cast'
     || lk == 47647                 // '$' 'castable'
     || lk == 48671                 // '$' 'child'
     || lk == 49183                 // '$' 'collation'
     || lk == 49695                 // '$' 'comment'
     || lk == 52255                 // '$' 'copy'
     || lk == 53279                 // '$' 'count'
     || lk == 54815                 // '$' 'declare'
     || lk == 55327                 // '$' 'default'
     || lk == 55839                 // '$' 'delete'
     || lk == 56351                 // '$' 'descendant'
     || lk == 56863                 // '$' 'descendant-or-self'
     || lk == 57375                 // '$' 'descending'
     || lk == 59935                 // '$' 'div'
     || lk == 60447                 // '$' 'document'
     || lk == 60959                 // '$' 'document-node'
     || lk == 61471                 // '$' 'element'
     || lk == 61983                 // '$' 'else'
     || lk == 62495                 // '$' 'empty'
     || lk == 63007                 // '$' 'empty-sequence'
     || lk == 64031                 // '$' 'end'
     || lk == 65055                 // '$' 'eq'
     || lk == 65567                 // '$' 'every'
     || lk == 66591                 // '$' 'except'
     || lk == 68639                 // '$' 'following'
     || lk == 69151                 // '$' 'following-sibling'
     || lk == 69663                 // '$' 'for'
     || lk == 72735                 // '$' 'function'
     || lk == 73247                 // '$' 'ge'
     || lk == 74271                 // '$' 'group'
     || lk == 75295                 // '$' 'gt'
     || lk == 75807                 // '$' 'idiv'
     || lk == 76319                 // '$' 'if'
     || lk == 76831                 // '$' 'import'
     || lk == 79391                 // '$' 'insert'
     || lk == 79903                 // '$' 'instance'
     || lk == 80415                 // '$' 'intersect'
     || lk == 81439                 // '$' 'invoke'
     || lk == 81951                 // '$' 'is'
     || lk == 82463                 // '$' 'item'
     || lk == 84511                 // '$' 'le'
     || lk == 85535                 // '$' 'let'
     || lk == 87071                 // '$' 'lt'
     || lk == 87583                 // '$' 'map'
     || lk == 88607                 // '$' 'mod'
     || lk == 89119                 // '$' 'modify'
     || lk == 89631                 // '$' 'module'
     || lk == 90655                 // '$' 'namespace'
     || lk == 91167                 // '$' 'namespace-node'
     || lk == 91679                 // '$' 'ne'
     || lk == 94239                 // '$' 'node'
     || lk == 96799                 // '$' 'only'
     || lk == 97823                 // '$' 'or'
     || lk == 98335                 // '$' 'order'
     || lk == 98847                 // '$' 'ordered'
     || lk == 100895                // '$' 'parent'
     || lk == 103455                // '$' 'preceding'
     || lk == 103967                // '$' 'preceding-sibling'
     || lk == 105503                // '$' 'processing-instruction'
     || lk == 106527                // '$' 'rename'
     || lk == 107039                // '$' 'replace'
     || lk == 107551                // '$' 'return'
     || lk == 109087                // '$' 'satisfies'
     || lk == 110111                // '$' 'schema-attribute'
     || lk == 110623                // '$' 'schema-element'
     || lk == 111647                // '$' 'self'
     || lk == 114719                // '$' 'some'
     || lk == 115231                // '$' 'stable'
     || lk == 115743                // '$' 'start'
     || lk == 118303                // '$' 'switch'
     || lk == 118815                // '$' 'text'
     || lk == 120863                // '$' 'to'
     || lk == 121375                // '$' 'transform'
     || lk == 121887                // '$' 'treat'
     || lk == 122399                // '$' 'try'
     || lk == 123935                // '$' 'typeswitch'
     || lk == 124447                // '$' 'union'
     || lk == 124959                // '$' 'unordered'
     || lk == 125471                // '$' 'update'
     || lk == 127519                // '$' 'validate'
     || lk == 130591                // '$' 'where'
     || lk == 132127                // '$' 'with'
     || lk == 134175)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(171);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 51              // ':='
           || l1 == 83)             // 'as'
          {
            if (l1 == 83)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(30);        // S^WS | '(:' | ':='
            consumeT(51);           // ':='
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_ExprSingle();
          }
          lookahead1W(166);         // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
          if (l1 == 96)             // 'collation'
          {
            consumeT(96);           // 'collation'
            lookahead1W(19);        // StringLiteral | S^WS | '(:'
            try_URILiteral();
          }
          memoize(2, e0A, -1);
          lk = -3;
        }
        catch (ParseException p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      try_GroupingVariable();
      lookahead1W(171);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 51                  // ':='
       || l1 == 83)                 // 'as'
      {
        if (l1 == 83)               // 'as'
        {
          try_TypeDeclaration();
        }
        lookahead1W(30);            // S^WS | '(:' | ':='
        consumeT(51);               // ':='
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_ExprSingle();
      }
      lookahead1W(166);             // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
      if (l1 == 96)                 // 'collation'
      {
        consumeT(96);               // 'collation'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        try_URILiteral();
      }
      break;
    case -3:
      break;
    default:
      try_ExprSingle();
    }
  }

  private void parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  private void try_GroupingVariable()
  {
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  private void parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 192:                       // 'order'
      consume(192);                 // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consume(90);                  // 'by'
      break;
    default:
      consume(225);                 // 'stable'
      lookahead1W(61);              // S^WS | '(:' | 'order'
      consume(192);                 // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consume(90);                  // 'by'
    }
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  private void try_OrderByClause()
  {
    switch (l1)
    {
    case 192:                       // 'order'
      consumeT(192);                // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consumeT(90);                 // 'by'
      break;
    default:
      consumeT(225);                // 'stable'
      lookahead1W(61);              // S^WS | '(:' | 'order'
      consumeT(192);                // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consumeT(90);                 // 'by'
    }
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_OrderSpecList();
  }

  private void parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  private void try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_OrderSpec();
    }
  }

  private void parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    lookahead1W(173);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  private void try_OrderSpec()
  {
    try_ExprSingle();
    lookahead1W(173);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    try_OrderModifier();
  }

  private void parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 84                    // 'ascending'
     || l1 == 112)                  // 'descending'
    {
      switch (l1)
      {
      case 84:                      // 'ascending'
        consume(84);                // 'ascending'
        break;
      default:
        consume(112);               // 'descending'
      }
    }
    lookahead1W(169);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 122)                  // 'empty'
    {
      consume(122);                 // 'empty'
      lookahead1W(115);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 144:                     // 'greatest'
        consume(144);               // 'greatest'
        break;
      default:
        consume(166);               // 'least'
      }
    }
    lookahead1W(166);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 96)                   // 'collation'
    {
      consume(96);                  // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  private void try_OrderModifier()
  {
    if (l1 == 84                    // 'ascending'
     || l1 == 112)                  // 'descending'
    {
      switch (l1)
      {
      case 84:                      // 'ascending'
        consumeT(84);               // 'ascending'
        break;
      default:
        consumeT(112);              // 'descending'
      }
    }
    lookahead1W(169);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 122)                  // 'empty'
    {
      consumeT(122);                // 'empty'
      lookahead1W(115);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 144:                     // 'greatest'
        consumeT(144);              // 'greatest'
        break;
      default:
        consumeT(166);              // 'least'
      }
    }
    lookahead1W(166);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 96)                   // 'collation'
    {
      consumeT(96);                 // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
    }
  }

  private void parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    consume(210);                   // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  private void try_ReturnClause()
  {
    consumeT(210);                  // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 224:                       // 'some'
      consume(224);                 // 'some'
      break;
    default:
      consume(128);                 // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_QuantifiedVarDecl();
    for (;;)
    {
      lookahead1W(96);              // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_QuantifiedVarDecl();
    }
    consume(213);                   // 'satisfies'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  private void try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 224:                       // 'some'
      consumeT(224);                // 'some'
      break;
    default:
      consumeT(128);                // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_QuantifiedVarDecl();
    for (;;)
    {
      lookahead1W(96);              // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_QuantifiedVarDecl();
    }
    consumeT(213);                  // 'satisfies'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_QuantifiedVarDecl()
  {
    eventHandler.startNonterminal("QuantifiedVarDecl", e0);
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedVarDecl", e0);
  }

  private void try_QuantifiedVarDecl()
  {
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    consume(231);                   // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(108);                   // 'default'
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consume(210);                   // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  private void try_SwitchExpr()
  {
    consumeT(231);                  // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(108);                  // 'default'
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consumeT(210);                  // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      consume(91);                  // 'case'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SwitchCaseOperand();
      lookahead1W(107);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(210);                   // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  private void try_SwitchCaseClause()
  {
    for (;;)
    {
      consumeT(91);                 // 'case'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_SwitchCaseOperand();
      lookahead1W(107);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(210);                  // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  private void try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  private void parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    consume(242);                   // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(108);                   // 'default'
    lookahead1W(86);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consume(210);                   // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  private void try_TypeswitchExpr()
  {
    consumeT(242);                  // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_CaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(108);                  // 'default'
    lookahead1W(86);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_VarName();
    }
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consumeT(210);                  // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    consume(91);                    // 'case'
    lookahead1W(232);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
    }
    lookahead1W(230);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    consume(210);                   // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  private void try_CaseClause()
  {
    consumeT(91);                   // 'case'
    lookahead1W(232);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
    }
    lookahead1W(230);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SequenceTypeUnion();
    consumeT(210);                  // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(128);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consume(266);                 // '|'
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  private void try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(128);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consumeT(266);                // '|'
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  private void parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    consume(149);                   // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consume(233);                   // 'then'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consume(121);                   // 'else'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  private void try_IfExpr()
  {
    consumeT(149);                  // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consumeT(233);                  // 'then'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consumeT(121);                  // 'else'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(188);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'catch' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 94)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  private void try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(188);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'catch' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 94)                 // 'catch'
      {
        break;
      }
    }
  }

  private void parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    consume(239);                   // 'try'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedTryTargetExpr();
    eventHandler.endNonterminal("TryClause", e0);
  }

  private void try_TryClause()
  {
    consumeT(239);                  // 'try'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedTryTargetExpr();
  }

  private void parse_EnclosedTryTargetExpr()
  {
    eventHandler.startNonterminal("EnclosedTryTargetExpr", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("EnclosedTryTargetExpr", e0);
  }

  private void try_EnclosedTryTargetExpr()
  {
    try_EnclosedExpr();
  }

  private void parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    consume(94);                    // 'catch'
    lookahead1W(225);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_CatchErrorList();
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CatchClause", e0);
  }

  private void try_CatchClause()
  {
    consumeT(94);                   // 'catch'
    lookahead1W(225);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_CatchErrorList();
    try_EnclosedExpr();
  }

  private void parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(130);             // S^WS | '(:' | '{' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consume(266);                 // '|'
      lookahead1W(225);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  private void try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(130);             // S^WS | '(:' | '{' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consumeT(266);                // '|'
      lookahead1W(225);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_NameTest();
    }
  }

  private void parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      switch (l1)
      {
      case 191:                     // 'or'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(191);          // 'or'
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_AndExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      consume(191);                 // 'or'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  private void try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      switch (l1)
      {
      case 191:                     // 'or'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(191);          // 'or'
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_AndExpr();
            memoize(3, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(3, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      consumeT(191);                // 'or'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AndExpr();
    }
  }

  private void parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      switch (l1)
      {
      case 80:                      // 'and'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(80);           // 'and'
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_ComparisonExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(4, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      consume(80);                  // 'and'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  private void try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      switch (l1)
      {
      case 80:                      // 'and'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(80);           // 'and'
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_ComparisonExpr();
            memoize(4, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(4, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      consumeT(80);                 // 'and'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_ComparisonExpr();
    }
  }

  private void parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    switch (l1)
    {
    case 27:                        // '!='
    case 53:                        // '<'
    case 57:                        // '<<'
    case 58:                        // '<='
    case 60:                        // '='
    case 62:                        // '>'
    case 63:                        // '>='
    case 64:                        // '>>'
    case 127:                       // 'eq'
    case 143:                       // 'ge'
    case 147:                       // 'gt'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 170:                       // 'lt'
    case 179:                       // 'ne'
      lookahead2W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk != 25                    // EOF
     && lk != 37                    // ')'
     && lk != 38                    // '*'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 70                    // ']'
     && lk != 75                    // 'after'
     && lk != 80                    // 'and'
     && lk != 83                    // 'as'
     && lk != 84                    // 'ascending'
     && lk != 88                    // 'before'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 96                    // 'collation'
     && lk != 99                    // 'contains'
     && lk != 104                   // 'count'
     && lk != 108                   // 'default'
     && lk != 112                   // 'descending'
     && lk != 117                   // 'div'
     && lk != 121                   // 'else'
     && lk != 122                   // 'empty'
     && lk != 125                   // 'end'
     && lk != 130                   // 'except'
     && lk != 136                   // 'for'
     && lk != 145                   // 'group'
     && lk != 148                   // 'idiv'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'intersect'
     && lk != 158                   // 'into'
     && lk != 167                   // 'let'
     && lk != 173                   // 'mod'
     && lk != 174                   // 'modify'
     && lk != 189                   // 'only'
     && lk != 191                   // 'or'
     && lk != 192                   // 'order'
     && lk != 196                   // 'paragraphs'
     && lk != 210                   // 'return'
     && lk != 213                   // 'satisfies'
     && lk != 221                   // 'sentences'
     && lk != 225                   // 'stable'
     && lk != 226                   // 'start'
     && lk != 235                   // 'times'
     && lk != 236                   // 'to'
     && lk != 237                   // 'transform'
     && lk != 238                   // 'treat'
     && lk != 243                   // 'union'
     && lk != 255                   // 'where'
     && lk != 258                   // 'with'
     && lk != 261                   // 'words'
     && lk != 266                   // '|'
     && lk != 267                   // '||'
     && lk != 268                   // '}'
     && lk != 269)                  // '}`'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          switch (l1)
          {
          case 127:                 // 'eq'
          case 143:                 // 'ge'
          case 147:                 // 'gt'
          case 165:                 // 'le'
          case 170:                 // 'lt'
          case 179:                 // 'ne'
            try_ValueComp();
            break;
          case 57:                  // '<<'
          case 64:                  // '>>'
          case 160:                 // 'is'
            try_NodeComp();
            break;
          default:
            try_GeneralComp();
          }
          lookahead1W(237);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_FTContainsExpr();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0, lk);
      }
    }
    if (lk == -1)
    {
      switch (l1)
      {
      case 127:                     // 'eq'
      case 143:                     // 'ge'
      case 147:                     // 'gt'
      case 165:                     // 'le'
      case 170:                     // 'lt'
      case 179:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 57:                      // '<<'
      case 64:                      // '>>'
      case 160:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  private void try_ComparisonExpr()
  {
    try_FTContainsExpr();
    switch (l1)
    {
    case 27:                        // '!='
    case 53:                        // '<'
    case 57:                        // '<<'
    case 58:                        // '<='
    case 60:                        // '='
    case 62:                        // '>'
    case 63:                        // '>='
    case 64:                        // '>>'
    case 127:                       // 'eq'
    case 143:                       // 'ge'
    case 147:                       // 'gt'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 170:                       // 'lt'
    case 179:                       // 'ne'
      lookahead2W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk != 25                    // EOF
     && lk != 37                    // ')'
     && lk != 38                    // '*'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 70                    // ']'
     && lk != 75                    // 'after'
     && lk != 80                    // 'and'
     && lk != 83                    // 'as'
     && lk != 84                    // 'ascending'
     && lk != 88                    // 'before'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 96                    // 'collation'
     && lk != 99                    // 'contains'
     && lk != 104                   // 'count'
     && lk != 108                   // 'default'
     && lk != 112                   // 'descending'
     && lk != 117                   // 'div'
     && lk != 121                   // 'else'
     && lk != 122                   // 'empty'
     && lk != 125                   // 'end'
     && lk != 130                   // 'except'
     && lk != 136                   // 'for'
     && lk != 145                   // 'group'
     && lk != 148                   // 'idiv'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'intersect'
     && lk != 158                   // 'into'
     && lk != 167                   // 'let'
     && lk != 173                   // 'mod'
     && lk != 174                   // 'modify'
     && lk != 189                   // 'only'
     && lk != 191                   // 'or'
     && lk != 192                   // 'order'
     && lk != 196                   // 'paragraphs'
     && lk != 210                   // 'return'
     && lk != 213                   // 'satisfies'
     && lk != 221                   // 'sentences'
     && lk != 225                   // 'stable'
     && lk != 226                   // 'start'
     && lk != 235                   // 'times'
     && lk != 236                   // 'to'
     && lk != 237                   // 'transform'
     && lk != 238                   // 'treat'
     && lk != 243                   // 'union'
     && lk != 255                   // 'where'
     && lk != 258                   // 'with'
     && lk != 261                   // 'words'
     && lk != 266                   // '|'
     && lk != 267                   // '||'
     && lk != 268                   // '}'
     && lk != 269)                  // '}`'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          switch (l1)
          {
          case 127:                 // 'eq'
          case 143:                 // 'ge'
          case 147:                 // 'gt'
          case 165:                 // 'le'
          case 170:                 // 'lt'
          case 179:                 // 'ne'
            try_ValueComp();
            break;
          case 57:                  // '<<'
          case 64:                  // '>>'
          case 160:                 // 'is'
            try_NodeComp();
            break;
          default:
            try_GeneralComp();
          }
          lookahead1W(237);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_FTContainsExpr();
          memoize(5, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(5, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      switch (l1)
      {
      case 127:                     // 'eq'
      case 143:                     // 'ge'
      case 147:                     // 'gt'
      case 165:                     // 'le'
      case 170:                     // 'lt'
      case 179:                     // 'ne'
        try_ValueComp();
        break;
      case 57:                      // '<<'
      case 64:                      // '>>'
      case 160:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_FTContainsExpr();
    }
  }

  private void parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    switch (l1)
    {
    case 99:                        // 'contains'
      lookahead2W(69);              // S^WS | '(:' | 'text'
      break;
    default:
      lk = l1;
    }
    if (lk == 118883)               // 'contains' 'text'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(99);             // 'contains'
          lookahead1W(69);          // S^WS | '(:' | 'text'
          consumeT(232);            // 'text'
          lookahead1W(154);         // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
          try_FTSelection();
          if (l1 == 259)            // 'without'
          {
            try_FTIgnoreOption();
          }
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(6, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(99);                  // 'contains'
      lookahead1W(69);              // S^WS | '(:' | 'text'
      consume(232);                 // 'text'
      lookahead1W(154);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 259)                // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  private void try_FTContainsExpr()
  {
    try_StringConcatExpr();
    switch (l1)
    {
    case 99:                        // 'contains'
      lookahead2W(69);              // S^WS | '(:' | 'text'
      break;
    default:
      lk = l1;
    }
    if (lk == 118883)               // 'contains' 'text'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(99);             // 'contains'
          lookahead1W(69);          // S^WS | '(:' | 'text'
          consumeT(232);            // 'text'
          lookahead1W(154);         // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
          try_FTSelection();
          if (l1 == 259)            // 'without'
          {
            try_FTIgnoreOption();
          }
          memoize(6, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(6, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(99);                 // 'contains'
      lookahead1W(69);              // S^WS | '(:' | 'text'
      consumeT(232);                // 'text'
      lookahead1W(154);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 259)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  private void parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 267:                     // '||'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(7, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(267);          // '||'
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_RangeExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(7, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      consume(267);                 // '||'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  private void try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 267:                     // '||'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(7, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(267);          // '||'
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_RangeExpr();
            memoize(7, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(7, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      consumeT(267);                // '||'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_RangeExpr();
    }
  }

  private void parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    switch (l1)
    {
    case 236:                       // 'to'
      lookahead2W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk != 25                    // EOF
     && lk != 27                    // '!='
     && lk != 37                    // ')'
     && lk != 38                    // '*'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 53                    // '<'
     && lk != 57                    // '<<'
     && lk != 58                    // '<='
     && lk != 60                    // '='
     && lk != 62                    // '>'
     && lk != 63                    // '>='
     && lk != 64                    // '>>'
     && lk != 70                    // ']'
     && lk != 75                    // 'after'
     && lk != 80                    // 'and'
     && lk != 83                    // 'as'
     && lk != 84                    // 'ascending'
     && lk != 88                    // 'before'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 96                    // 'collation'
     && lk != 99                    // 'contains'
     && lk != 104                   // 'count'
     && lk != 108                   // 'default'
     && lk != 112                   // 'descending'
     && lk != 117                   // 'div'
     && lk != 121                   // 'else'
     && lk != 122                   // 'empty'
     && lk != 125                   // 'end'
     && lk != 127                   // 'eq'
     && lk != 130                   // 'except'
     && lk != 136                   // 'for'
     && lk != 143                   // 'ge'
     && lk != 145                   // 'group'
     && lk != 147                   // 'gt'
     && lk != 148                   // 'idiv'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'intersect'
     && lk != 158                   // 'into'
     && lk != 160                   // 'is'
     && lk != 165                   // 'le'
     && lk != 167                   // 'let'
     && lk != 170                   // 'lt'
     && lk != 173                   // 'mod'
     && lk != 174                   // 'modify'
     && lk != 179                   // 'ne'
     && lk != 189                   // 'only'
     && lk != 191                   // 'or'
     && lk != 192                   // 'order'
     && lk != 196                   // 'paragraphs'
     && lk != 210                   // 'return'
     && lk != 213                   // 'satisfies'
     && lk != 221                   // 'sentences'
     && lk != 225                   // 'stable'
     && lk != 226                   // 'start'
     && lk != 235                   // 'times'
     && lk != 237                   // 'transform'
     && lk != 238                   // 'treat'
     && lk != 243                   // 'union'
     && lk != 255                   // 'where'
     && lk != 258                   // 'with'
     && lk != 261                   // 'words'
     && lk != 266                   // '|'
     && lk != 267                   // '||'
     && lk != 268                   // '}'
     && lk != 269)                  // '}`'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(236);            // 'to'
          lookahead1W(237);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_AdditiveExpr();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(8, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(236);                 // 'to'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  private void try_RangeExpr()
  {
    try_AdditiveExpr();
    switch (l1)
    {
    case 236:                       // 'to'
      lookahead2W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk != 25                    // EOF
     && lk != 27                    // '!='
     && lk != 37                    // ')'
     && lk != 38                    // '*'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 53                    // '<'
     && lk != 57                    // '<<'
     && lk != 58                    // '<='
     && lk != 60                    // '='
     && lk != 62                    // '>'
     && lk != 63                    // '>='
     && lk != 64                    // '>>'
     && lk != 70                    // ']'
     && lk != 75                    // 'after'
     && lk != 80                    // 'and'
     && lk != 83                    // 'as'
     && lk != 84                    // 'ascending'
     && lk != 88                    // 'before'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 96                    // 'collation'
     && lk != 99                    // 'contains'
     && lk != 104                   // 'count'
     && lk != 108                   // 'default'
     && lk != 112                   // 'descending'
     && lk != 117                   // 'div'
     && lk != 121                   // 'else'
     && lk != 122                   // 'empty'
     && lk != 125                   // 'end'
     && lk != 127                   // 'eq'
     && lk != 130                   // 'except'
     && lk != 136                   // 'for'
     && lk != 143                   // 'ge'
     && lk != 145                   // 'group'
     && lk != 147                   // 'gt'
     && lk != 148                   // 'idiv'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'intersect'
     && lk != 158                   // 'into'
     && lk != 160                   // 'is'
     && lk != 165                   // 'le'
     && lk != 167                   // 'let'
     && lk != 170                   // 'lt'
     && lk != 173                   // 'mod'
     && lk != 174                   // 'modify'
     && lk != 179                   // 'ne'
     && lk != 189                   // 'only'
     && lk != 191                   // 'or'
     && lk != 192                   // 'order'
     && lk != 196                   // 'paragraphs'
     && lk != 210                   // 'return'
     && lk != 213                   // 'satisfies'
     && lk != 221                   // 'sentences'
     && lk != 225                   // 'stable'
     && lk != 226                   // 'start'
     && lk != 235                   // 'times'
     && lk != 237                   // 'transform'
     && lk != 238                   // 'treat'
     && lk != 243                   // 'union'
     && lk != 255                   // 'where'
     && lk != 258                   // 'with'
     && lk != 261                   // 'words'
     && lk != 266                   // '|'
     && lk != 267                   // '||'
     && lk != 268                   // '}'
     && lk != 269)                  // '}`'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(236);            // 'to'
          lookahead1W(237);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_AdditiveExpr();
          memoize(8, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(8, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(236);                // 'to'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AdditiveExpr();
    }
  }

  private void parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 39:                      // '+'
      case 41:                      // '-'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // ','
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(9, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 39:                // '+'
              consumeT(39);         // '+'
              break;
            default:
              consumeT(41);         // '-'
            }
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_MultiplicativeExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(9, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '+'
        consume(39);                // '+'
        break;
      default:
        consume(41);                // '-'
      }
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  private void try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 39:                      // '+'
      case 41:                      // '-'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // ','
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(9, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 39:                // '+'
              consumeT(39);         // '+'
              break;
            default:
              consumeT(41);         // '-'
            }
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_MultiplicativeExpr();
            memoize(9, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(9, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '+'
        consumeT(39);               // '+'
        break;
      default:
        consumeT(41);               // '-'
      }
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_MultiplicativeExpr();
    }
  }

  private void parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      switch (l1)
      {
      case 38:                      // '*'
      case 117:                     // 'div'
      case 148:                     // 'idiv'
      case 173:                     // 'mod'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(10, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 38:                // '*'
              consumeT(38);         // '*'
              break;
            case 117:               // 'div'
              consumeT(117);        // 'div'
              break;
            case 148:               // 'idiv'
              consumeT(148);        // 'idiv'
              break;
            default:
              consumeT(173);        // 'mod'
            }
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_UnionExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(10, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consume(38);                // '*'
        break;
      case 117:                     // 'div'
        consume(117);               // 'div'
        break;
      case 148:                     // 'idiv'
        consume(148);               // 'idiv'
        break;
      default:
        consume(173);               // 'mod'
      }
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  private void try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      switch (l1)
      {
      case 38:                      // '*'
      case 117:                     // 'div'
      case 148:                     // 'idiv'
      case 173:                     // 'mod'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(10, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 38:                // '*'
              consumeT(38);         // '*'
              break;
            case 117:               // 'div'
              consumeT(117);        // 'div'
              break;
            case 148:               // 'idiv'
              consumeT(148);        // 'idiv'
              break;
            default:
              consumeT(173);        // 'mod'
            }
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_UnionExpr();
            memoize(10, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(10, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consumeT(38);               // '*'
        break;
      case 117:                     // 'div'
        consumeT(117);              // 'div'
        break;
      case 148:                     // 'idiv'
        consumeT(148);              // 'idiv'
        break;
      default:
        consumeT(173);              // 'mod'
      }
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_UnionExpr();
    }
  }

  private void parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      switch (l1)
      {
      case 243:                     // 'union'
      case 266:                     // '|'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(11, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 243:               // 'union'
              consumeT(243);        // 'union'
              break;
            default:
              consumeT(266);        // '|'
            }
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_IntersectExceptExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(11, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 243:                     // 'union'
        consume(243);               // 'union'
        break;
      default:
        consume(266);               // '|'
      }
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  private void try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      switch (l1)
      {
      case 243:                     // 'union'
      case 266:                     // '|'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(11, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 243:               // 'union'
              consumeT(243);        // 'union'
              break;
            default:
              consumeT(266);        // '|'
            }
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_IntersectExceptExpr();
            memoize(11, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(11, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 243:                     // 'union'
        consumeT(243);              // 'union'
        break;
      default:
        consumeT(266);              // '|'
      }
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_IntersectExceptExpr();
    }
  }

  private void parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(186);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 130:                     // 'except'
      case 157:                     // 'intersect'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(12, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 157:               // 'intersect'
              consumeT(157);        // 'intersect'
              break;
            default:
              consumeT(130);        // 'except'
            }
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_InstanceofExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(12, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 157:                     // 'intersect'
        consume(157);               // 'intersect'
        break;
      default:
        consume(130);               // 'except'
      }
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  private void try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(186);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 130:                     // 'except'
      case 157:                     // 'intersect'
        lookahead2W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(12, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 157:               // 'intersect'
              consumeT(157);        // 'intersect'
              break;
            default:
              consumeT(130);        // 'except'
            }
            lookahead1W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_InstanceofExpr();
            memoize(12, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(12, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 157:                     // 'intersect'
        consumeT(157);              // 'intersect'
        break;
      default:
        consumeT(130);              // 'except'
      }
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_InstanceofExpr();
    }
  }

  private void parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 156:                       // 'instance'
      lookahead2W(59);              // S^WS | '(:' | 'of'
      break;
    default:
      lk = l1;
    }
    if (lk == 96412)                // 'instance' 'of'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(156);            // 'instance'
          lookahead1W(59);          // S^WS | '(:' | 'of'
          consumeT(188);            // 'of'
          lookahead1W(230);         // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SequenceType();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(13, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(156);                 // 'instance'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consume(188);                 // 'of'
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  private void try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 156:                       // 'instance'
      lookahead2W(59);              // S^WS | '(:' | 'of'
      break;
    default:
      lk = l1;
    }
    if (lk == 96412)                // 'instance' 'of'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(156);            // 'instance'
          lookahead1W(59);          // S^WS | '(:' | 'of'
          consumeT(188);            // 'of'
          lookahead1W(230);         // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SequenceType();
          memoize(13, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(13, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(156);                // 'instance'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consumeT(188);                // 'of'
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  private void parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 238:                       // 'treat'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42734)                // 'treat' 'as'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(238);            // 'treat'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(230);         // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SequenceType();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(14, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(238);                 // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  private void try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 238:                       // 'treat'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42734)                // 'treat' 'as'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(238);            // 'treat'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(230);         // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SequenceType();
          memoize(14, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(14, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(238);                // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  private void parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 93:                        // 'castable'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42589)                // 'castable' 'as'
    {
      lk = memoized(15, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(93);             // 'castable'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(223);         // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SingleType();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(15, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(93);                  // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  private void try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 93:                        // 'castable'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42589)                // 'castable' 'as'
    {
      lk = memoized(15, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(93);             // 'castable'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(223);         // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SingleType();
          memoize(15, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(15, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(93);                 // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SingleType();
    }
  }

  private void parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_TransformWithExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 92:                        // 'cast'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42588)                // 'cast' 'as'
    {
      lk = memoized(16, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(92);             // 'cast'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(223);         // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SingleType();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(16, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(92);                  // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  private void try_CastExpr()
  {
    try_TransformWithExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 92:                        // 'cast'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42588)                // 'cast' 'as'
    {
      lk = memoized(16, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(92);             // 'cast'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(223);         // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SingleType();
          memoize(16, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(16, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(92);                 // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SingleType();
    }
  }

  private void parse_TransformWithExpr()
  {
    eventHandler.startNonterminal("TransformWithExpr", e0);
    parse_BasexUpdate1Expr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 237:                       // 'transform'
      lookahead2W(78);              // S^WS | '(:' | 'with'
      break;
    default:
      lk = l1;
    }
    if (lk == 132333)               // 'transform' 'with'
    {
      lk = memoized(17, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(237);            // 'transform'
          lookahead1W(78);          // S^WS | '(:' | 'with'
          consumeT(258);            // 'with'
          lookahead1W(80);          // S^WS | '(:' | '{'
          consumeT(264);            // '{'
          lookahead1W(242);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
          if (l1 != 268)            // '}'
          {
            try_Expr();
          }
          consumeT(268);            // '}'
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(17, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(237);                 // 'transform'
      lookahead1W(78);              // S^WS | '(:' | 'with'
      consume(258);                 // 'with'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consume(264);                 // '{'
      lookahead1W(242);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        whitespace();
        parse_Expr();
      }
      consume(268);                 // '}'
    }
    eventHandler.endNonterminal("TransformWithExpr", e0);
  }

  private void try_TransformWithExpr()
  {
    try_BasexUpdate1Expr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 237:                       // 'transform'
      lookahead2W(78);              // S^WS | '(:' | 'with'
      break;
    default:
      lk = l1;
    }
    if (lk == 132333)               // 'transform' 'with'
    {
      lk = memoized(17, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(237);            // 'transform'
          lookahead1W(78);          // S^WS | '(:' | 'with'
          consumeT(258);            // 'with'
          lookahead1W(80);          // S^WS | '(:' | '{'
          consumeT(264);            // '{'
          lookahead1W(242);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
          if (l1 != 268)            // '}'
          {
            try_Expr();
          }
          consumeT(268);            // '}'
          memoize(17, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(17, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(237);                // 'transform'
      lookahead1W(78);              // S^WS | '(:' | 'with'
      consumeT(258);                // 'with'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consumeT(264);                // '{'
      lookahead1W(242);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        try_Expr();
      }
      consumeT(268);                // '}'
    }
  }

  private void parse_BasexUpdate1Expr()
  {
    eventHandler.startNonterminal("BasexUpdate1Expr", e0);
    parse_BasexUpdateExpr();
    if (l1 == 245)                  // 'update'
    {
      consume(245);                 // 'update'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("BasexUpdate1Expr", e0);
  }

  private void try_BasexUpdate1Expr()
  {
    try_BasexUpdateExpr();
    if (l1 == 245)                  // 'update'
    {
      consumeT(245);                // 'update'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_ExprSingle();
    }
  }

  private void parse_BasexUpdateExpr()
  {
    eventHandler.startNonterminal("BasexUpdateExpr", e0);
    parse_ArrowExpr();
    for (;;)
    {
      lookahead1W(189);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 245:                     // 'update'
        lookahead2W(241);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
        break;
      default:
        lk = l1;
      }
      if (lk != 135413)             // 'update' '{'
      {
        break;
      }
      consume(245);                 // 'update'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consume(264);                 // '{'
      lookahead1W(242);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        whitespace();
        parse_Expr();
      }
      consume(268);                 // '}'
    }
    eventHandler.endNonterminal("BasexUpdateExpr", e0);
  }

  private void try_BasexUpdateExpr()
  {
    try_ArrowExpr();
    for (;;)
    {
      lookahead1W(189);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 245:                     // 'update'
        lookahead2W(241);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
        break;
      default:
        lk = l1;
      }
      if (lk != 135413)             // 'update' '{'
      {
        break;
      }
      consumeT(245);                // 'update'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consumeT(264);                // '{'
      lookahead1W(242);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        try_Expr();
      }
      consumeT(268);                // '}'
    }
  }

  private void parse_ArrowExpr()
  {
    eventHandler.startNonterminal("ArrowExpr", e0);
    parse_UnaryExpr();
    for (;;)
    {
      lookahead1W(190);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 61)                 // '=>'
      {
        break;
      }
      consume(61);                  // '=>'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      whitespace();
      parse_ArgumentList();
    }
    eventHandler.endNonterminal("ArrowExpr", e0);
  }

  private void try_ArrowExpr()
  {
    try_UnaryExpr();
    for (;;)
    {
      lookahead1W(190);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 61)                 // '=>'
      {
        break;
      }
      consumeT(61);                 // '=>'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      try_ArgumentList();
    }
  }

  private void parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      if (l1 != 39                  // '+'
       && l1 != 41)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '-'
        consume(41);                // '-'
        break;
      default:
        consume(39);                // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  private void try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      if (l1 != 39                  // '+'
       && l1 != 41)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '-'
        consumeT(41);               // '-'
        break;
      default:
        consumeT(39);               // '+'
      }
    }
    try_ValueExpr();
  }

  private void parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 249:                       // 'validate'
      lookahead2W(213);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'transform' | 'treat' | 'type' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 84217:                     // 'validate' 'lax'
    case 117497:                    // 'validate' 'strict'
    case 123641:                    // 'validate' 'type'
    case 135417:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 35:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  private void try_ValueExpr()
  {
    switch (l1)
    {
    case 249:                       // 'validate'
      lookahead2W(213);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'transform' | 'treat' | 'type' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 84217:                     // 'validate' 'lax'
    case 117497:                    // 'validate' 'strict'
    case 123641:                    // 'validate' 'type'
    case 135417:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 35:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  private void parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consume(26);                  // '!'
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  private void try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consumeT(26);                 // '!'
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_PathExpr();
    }
  }

  private void parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 60:                        // '='
      consume(60);                  // '='
      break;
    case 27:                        // '!='
      consume(27);                  // '!='
      break;
    case 53:                        // '<'
      consume(53);                  // '<'
      break;
    case 58:                        // '<='
      consume(58);                  // '<='
      break;
    case 62:                        // '>'
      consume(62);                  // '>'
      break;
    default:
      consume(63);                  // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  private void try_GeneralComp()
  {
    switch (l1)
    {
    case 60:                        // '='
      consumeT(60);                 // '='
      break;
    case 27:                        // '!='
      consumeT(27);                 // '!='
      break;
    case 53:                        // '<'
      consumeT(53);                 // '<'
      break;
    case 58:                        // '<='
      consumeT(58);                 // '<='
      break;
    case 62:                        // '>'
      consumeT(62);                 // '>'
      break;
    default:
      consumeT(63);                 // '>='
    }
  }

  private void parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 127:                       // 'eq'
      consume(127);                 // 'eq'
      break;
    case 179:                       // 'ne'
      consume(179);                 // 'ne'
      break;
    case 170:                       // 'lt'
      consume(170);                 // 'lt'
      break;
    case 165:                       // 'le'
      consume(165);                 // 'le'
      break;
    case 147:                       // 'gt'
      consume(147);                 // 'gt'
      break;
    default:
      consume(143);                 // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  private void try_ValueComp()
  {
    switch (l1)
    {
    case 127:                       // 'eq'
      consumeT(127);                // 'eq'
      break;
    case 179:                       // 'ne'
      consumeT(179);                // 'ne'
      break;
    case 170:                       // 'lt'
      consumeT(170);                // 'lt'
      break;
    case 165:                       // 'le'
      consumeT(165);                // 'le'
      break;
    case 147:                       // 'gt'
      consumeT(147);                // 'gt'
      break;
    default:
      consumeT(143);                // 'ge'
    }
  }

  private void parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 160:                       // 'is'
      consume(160);                 // 'is'
      break;
    case 57:                        // '<<'
      consume(57);                  // '<<'
      break;
    default:
      consume(64);                  // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  private void try_NodeComp()
  {
    switch (l1)
    {
    case 160:                       // 'is'
      consumeT(160);                // 'is'
      break;
    case 57:                        // '<<'
      consumeT(57);                 // '<<'
      break;
    default:
      consumeT(64);                 // '>>'
    }
  }

  private void parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    consume(249);                   // 'validate'
    lookahead1W(152);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 264)                  // '{'
    {
      switch (l1)
      {
      case 241:                     // 'type'
        consume(241);               // 'type'
        lookahead1W(223);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  private void try_ValidateExpr()
  {
    consumeT(249);                  // 'validate'
    lookahead1W(152);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 264)                  // '{'
    {
      switch (l1)
      {
      case 241:                     // 'type'
        consumeT(241);              // 'type'
        lookahead1W(223);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  private void parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 164:                       // 'lax'
      consume(164);                 // 'lax'
      break;
    default:
      consume(229);                 // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  private void try_ValidationMode()
  {
    switch (l1)
    {
    case 164:                       // 'lax'
      consumeT(164);                // 'lax'
      break;
    default:
      consumeT(229);                // 'strict'
    }
  }

  private void parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(264);                   // '{'
    lookahead1W(242);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  private void try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(264);                  // '{'
    lookahead1W(242);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      try_Expr();
    }
    consumeT(268);                  // '}'
  }

  private void parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    consume(35);                    // '(#'
    lookahead1(222);                // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
    }
    parse_EQName();
    lookahead1(12);                 // S | '#)'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
      lookahead1(2);                // PragmaContents
      consume(20);                  // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consume(30);                    // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  private void try_Pragma()
  {
    consumeT(35);                   // '(#'
    lookahead1(222);                // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
    }
    try_EQName();
    lookahead1(12);                 // S | '#)'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
      lookahead1(2);                // PragmaContents
      consumeT(20);                 // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consumeT(30);                   // '#)'
  }

  private void parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 45:                        // '/'
      consume(45);                  // '/'
      lookahead1W(246);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'contains' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'sentences' | 'some' |
                                    // 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'words' | 'xquery' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 39:                      // '+'
      case 40:                      // ','
      case 41:                      // '-'
      case 48:                      // ':'
      case 52:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '=>'
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 75:                      // 'after'
      case 88:                      // 'before'
      case 99:                      // 'contains'
      case 158:                     // 'into'
      case 196:                     // 'paragraphs'
      case 221:                     // 'sentences'
      case 235:                     // 'times'
      case 261:                     // 'words'
      case 266:                     // '|'
      case 267:                     // '||'
      case 268:                     // '}'
      case 269:                     // '}`'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 46:                        // '//'
      consume(46);                  // '//'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  private void try_PathExpr()
  {
    switch (l1)
    {
    case 45:                        // '/'
      consumeT(45);                 // '/'
      lookahead1W(246);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'contains' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'sentences' | 'some' |
                                    // 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'words' | 'xquery' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 39:                      // '+'
      case 40:                      // ','
      case 41:                      // '-'
      case 48:                      // ':'
      case 52:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '=>'
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 75:                      // 'after'
      case 88:                      // 'before'
      case 99:                      // 'contains'
      case 158:                     // 'into'
      case 196:                     // 'paragraphs'
      case 221:                     // 'sentences'
      case 235:                     // 'times'
      case 261:                     // 'words'
      case 266:                     // '|'
      case 267:                     // '||'
      case 268:                     // '}'
      case 269:                     // '}`'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 46:                        // '//'
      consumeT(46);                 // '//'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  private void parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(236);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '=>'
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 245                 // 'update'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269                 // '}`'
       && lk != 23066               // '!' '/'
       && lk != 23578)              // '!' '//'
      {
        lk = memoized(18, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 45:                // '/'
              consumeT(45);         // '/'
              break;
            case 46:                // '//'
              consumeT(46);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
            try_StepExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(18, e0, lk);
        }
      }
      if (lk != -1
       && lk != 45                  // '/'
       && lk != 46)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 45:                      // '/'
        consume(45);                // '/'
        break;
      case 46:                      // '//'
        consume(46);                // '//'
        break;
      default:
        consume(26);                // '!'
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  private void try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(236);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '=>'
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 245                 // 'update'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269                 // '}`'
       && lk != 23066               // '!' '/'
       && lk != 23578)              // '!' '//'
      {
        lk = memoized(18, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 45:                // '/'
              consumeT(45);         // '/'
              break;
            case 46:                // '//'
              consumeT(46);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
            try_StepExpr();
            memoize(18, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(18, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 45                  // '/'
       && lk != 46)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 45:                      // '/'
        consumeT(45);               // '/'
        break;
      case 46:                      // '//'
        consumeT(46);               // '//'
        break;
      default:
        consumeT(26);               // '!'
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_StepExpr();
    }
  }

  private void parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(245);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'contains' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 120:                       // 'element'
      lookahead2W(244);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'contains' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 82:                        // 'array'
    case 171:                       // 'map'
      lookahead2W(197);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 177:                       // 'namespace'
    case 206:                       // 'processing-instruction'
      lookahead2W(209);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 97:                        // 'comment'
    case 118:                       // 'document'
    case 193:                       // 'ordered'
    case 232:                       // 'text'
    case 244:                       // 'unordered'
      lookahead2W(205);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 109:                       // 'delete'
    case 123:                       // 'empty-sequence'
    case 149:                       // 'if'
    case 155:                       // 'insert'
    case 161:                       // 'item'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(192);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 218:                       // 'self'
      lookahead2W(203);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 119:                       // 'document-node'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 136:                       // 'for'
    case 142:                       // 'function'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 178:                       // 'namespace-node'
    case 179:                       // 'ne'
    case 184:                       // 'node'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(195);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 41046                 // 'attribute' 'and'
     || lk == 41080                 // 'element' 'and'
     || lk == 41137                 // 'namespace' 'and'
     || lk == 41166                 // 'processing-instruction' 'and'
     || lk == 42582                 // 'attribute' 'as'
     || lk == 42616                 // 'element' 'as'
     || lk == 42673                 // 'namespace' 'as'
     || lk == 42702                 // 'processing-instruction' 'as'
     || lk == 43094                 // 'attribute' 'ascending'
     || lk == 43128                 // 'element' 'ascending'
     || lk == 43185                 // 'namespace' 'ascending'
     || lk == 43214                 // 'processing-instruction' 'ascending'
     || lk == 46678                 // 'attribute' 'case'
     || lk == 46712                 // 'element' 'case'
     || lk == 46769                 // 'namespace' 'case'
     || lk == 46798                 // 'processing-instruction' 'case'
     || lk == 47190                 // 'attribute' 'cast'
     || lk == 47224                 // 'element' 'cast'
     || lk == 47281                 // 'namespace' 'cast'
     || lk == 47310                 // 'processing-instruction' 'cast'
     || lk == 47702                 // 'attribute' 'castable'
     || lk == 47736                 // 'element' 'castable'
     || lk == 47793                 // 'namespace' 'castable'
     || lk == 47822                 // 'processing-instruction' 'castable'
     || lk == 49238                 // 'attribute' 'collation'
     || lk == 49272                 // 'element' 'collation'
     || lk == 49329                 // 'namespace' 'collation'
     || lk == 49358                 // 'processing-instruction' 'collation'
     || lk == 53334                 // 'attribute' 'count'
     || lk == 53368                 // 'element' 'count'
     || lk == 53425                 // 'namespace' 'count'
     || lk == 53454                 // 'processing-instruction' 'count'
     || lk == 55382                 // 'attribute' 'default'
     || lk == 55416                 // 'element' 'default'
     || lk == 55473                 // 'namespace' 'default'
     || lk == 55502                 // 'processing-instruction' 'default'
     || lk == 57430                 // 'attribute' 'descending'
     || lk == 57464                 // 'element' 'descending'
     || lk == 57521                 // 'namespace' 'descending'
     || lk == 57550                 // 'processing-instruction' 'descending'
     || lk == 59990                 // 'attribute' 'div'
     || lk == 60024                 // 'element' 'div'
     || lk == 60081                 // 'namespace' 'div'
     || lk == 60110                 // 'processing-instruction' 'div'
     || lk == 62038                 // 'attribute' 'else'
     || lk == 62072                 // 'element' 'else'
     || lk == 62129                 // 'namespace' 'else'
     || lk == 62158                 // 'processing-instruction' 'else'
     || lk == 62550                 // 'attribute' 'empty'
     || lk == 62584                 // 'element' 'empty'
     || lk == 62641                 // 'namespace' 'empty'
     || lk == 62670                 // 'processing-instruction' 'empty'
     || lk == 64086                 // 'attribute' 'end'
     || lk == 64120                 // 'element' 'end'
     || lk == 64177                 // 'namespace' 'end'
     || lk == 64206                 // 'processing-instruction' 'end'
     || lk == 65110                 // 'attribute' 'eq'
     || lk == 65144                 // 'element' 'eq'
     || lk == 65201                 // 'namespace' 'eq'
     || lk == 65230                 // 'processing-instruction' 'eq'
     || lk == 66646                 // 'attribute' 'except'
     || lk == 66680                 // 'element' 'except'
     || lk == 66737                 // 'namespace' 'except'
     || lk == 66766                 // 'processing-instruction' 'except'
     || lk == 69718                 // 'attribute' 'for'
     || lk == 69752                 // 'element' 'for'
     || lk == 69809                 // 'namespace' 'for'
     || lk == 69838                 // 'processing-instruction' 'for'
     || lk == 73302                 // 'attribute' 'ge'
     || lk == 73336                 // 'element' 'ge'
     || lk == 73393                 // 'namespace' 'ge'
     || lk == 73422                 // 'processing-instruction' 'ge'
     || lk == 74326                 // 'attribute' 'group'
     || lk == 74360                 // 'element' 'group'
     || lk == 74417                 // 'namespace' 'group'
     || lk == 74446                 // 'processing-instruction' 'group'
     || lk == 75350                 // 'attribute' 'gt'
     || lk == 75384                 // 'element' 'gt'
     || lk == 75441                 // 'namespace' 'gt'
     || lk == 75470                 // 'processing-instruction' 'gt'
     || lk == 75862                 // 'attribute' 'idiv'
     || lk == 75896                 // 'element' 'idiv'
     || lk == 75953                 // 'namespace' 'idiv'
     || lk == 75982                 // 'processing-instruction' 'idiv'
     || lk == 79958                 // 'attribute' 'instance'
     || lk == 79992                 // 'element' 'instance'
     || lk == 80049                 // 'namespace' 'instance'
     || lk == 80078                 // 'processing-instruction' 'instance'
     || lk == 80470                 // 'attribute' 'intersect'
     || lk == 80504                 // 'element' 'intersect'
     || lk == 80561                 // 'namespace' 'intersect'
     || lk == 80590                 // 'processing-instruction' 'intersect'
     || lk == 82006                 // 'attribute' 'is'
     || lk == 82040                 // 'element' 'is'
     || lk == 82097                 // 'namespace' 'is'
     || lk == 82126                 // 'processing-instruction' 'is'
     || lk == 84566                 // 'attribute' 'le'
     || lk == 84600                 // 'element' 'le'
     || lk == 84657                 // 'namespace' 'le'
     || lk == 84686                 // 'processing-instruction' 'le'
     || lk == 85590                 // 'attribute' 'let'
     || lk == 85624                 // 'element' 'let'
     || lk == 85681                 // 'namespace' 'let'
     || lk == 85710                 // 'processing-instruction' 'let'
     || lk == 87126                 // 'attribute' 'lt'
     || lk == 87160                 // 'element' 'lt'
     || lk == 87217                 // 'namespace' 'lt'
     || lk == 87246                 // 'processing-instruction' 'lt'
     || lk == 88662                 // 'attribute' 'mod'
     || lk == 88696                 // 'element' 'mod'
     || lk == 88753                 // 'namespace' 'mod'
     || lk == 88782                 // 'processing-instruction' 'mod'
     || lk == 89174                 // 'attribute' 'modify'
     || lk == 89208                 // 'element' 'modify'
     || lk == 91734                 // 'attribute' 'ne'
     || lk == 91768                 // 'element' 'ne'
     || lk == 91825                 // 'namespace' 'ne'
     || lk == 91854                 // 'processing-instruction' 'ne'
     || lk == 96854                 // 'attribute' 'only'
     || lk == 96888                 // 'element' 'only'
     || lk == 96945                 // 'namespace' 'only'
     || lk == 96974                 // 'processing-instruction' 'only'
     || lk == 97878                 // 'attribute' 'or'
     || lk == 97912                 // 'element' 'or'
     || lk == 97969                 // 'namespace' 'or'
     || lk == 97998                 // 'processing-instruction' 'or'
     || lk == 98390                 // 'attribute' 'order'
     || lk == 98424                 // 'element' 'order'
     || lk == 98481                 // 'namespace' 'order'
     || lk == 98510                 // 'processing-instruction' 'order'
     || lk == 107606                // 'attribute' 'return'
     || lk == 107640                // 'element' 'return'
     || lk == 107697                // 'namespace' 'return'
     || lk == 107726                // 'processing-instruction' 'return'
     || lk == 109142                // 'attribute' 'satisfies'
     || lk == 109176                // 'element' 'satisfies'
     || lk == 109233                // 'namespace' 'satisfies'
     || lk == 109262                // 'processing-instruction' 'satisfies'
     || lk == 115286                // 'attribute' 'stable'
     || lk == 115320                // 'element' 'stable'
     || lk == 115377                // 'namespace' 'stable'
     || lk == 115406                // 'processing-instruction' 'stable'
     || lk == 115798                // 'attribute' 'start'
     || lk == 115832                // 'element' 'start'
     || lk == 115889                // 'namespace' 'start'
     || lk == 115918                // 'processing-instruction' 'start'
     || lk == 120918                // 'attribute' 'to'
     || lk == 120952                // 'element' 'to'
     || lk == 121009                // 'namespace' 'to'
     || lk == 121038                // 'processing-instruction' 'to'
     || lk == 121430                // 'attribute' 'transform'
     || lk == 121464                // 'element' 'transform'
     || lk == 121942                // 'attribute' 'treat'
     || lk == 121976                // 'element' 'treat'
     || lk == 122033                // 'namespace' 'treat'
     || lk == 122062                // 'processing-instruction' 'treat'
     || lk == 124502                // 'attribute' 'union'
     || lk == 124536                // 'element' 'union'
     || lk == 124593                // 'namespace' 'union'
     || lk == 124622                // 'processing-instruction' 'union'
     || lk == 125526                // 'attribute' 'update'
     || lk == 125560                // 'element' 'update'
     || lk == 130646                // 'attribute' 'where'
     || lk == 130680                // 'element' 'where'
     || lk == 130737                // 'namespace' 'where'
     || lk == 130766                // 'processing-instruction' 'where'
     || lk == 132182                // 'attribute' 'with'
     || lk == 132216)               // 'element' 'with'
    {
      lk = memoized(19, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(19, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 43:                        // '.'
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
    case 65:                        // '?'
    case 69:                        // '['
    case 73:                        // '``['
    case 2646:                      // 'attribute' URIQualifiedName
    case 2680:                      // 'element' URIQualifiedName
    case 7345:                      // 'namespace' NCName^Token
    case 7374:                      // 'processing-instruction' NCName^Token
    case 7766:                      // 'attribute' QName^Token
    case 7800:                      // 'element' QName^Token
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14930:                     // 'array' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14957:                     // 'delete' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14967:                     // 'document-node' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14971:                     // 'empty-sequence' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14990:                     // 'function' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14997:                     // 'if' '#'
    case 14998:                     // 'import' '#'
    case 15003:                     // 'insert' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15009:                     // 'item' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15019:                     // 'map' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15026:                     // 'namespace-node' '#'
    case 15027:                     // 'ne' '#'
    case 15032:                     // 'node' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15056:                     // 'rename' '#'
    case 15057:                     // 'replace' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15063:                     // 'schema-attribute' '#'
    case 15064:                     // 'schema-element' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15079:                     // 'switch' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15090:                     // 'typeswitch' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17550:                     // 'function' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
    case 40022:                     // 'attribute' 'ancestor'
    case 40056:                     // 'element' 'ancestor'
    case 40534:                     // 'attribute' 'ancestor-or-self'
    case 40568:                     // 'element' 'ancestor-or-self'
    case 42070:                     // 'attribute' 'array'
    case 42104:                     // 'element' 'array'
    case 43606:                     // 'attribute' 'at'
    case 43640:                     // 'element' 'at'
    case 44118:                     // 'attribute' 'attribute'
    case 44152:                     // 'element' 'attribute'
    case 48726:                     // 'attribute' 'child'
    case 48760:                     // 'element' 'child'
    case 49750:                     // 'attribute' 'comment'
    case 49784:                     // 'element' 'comment'
    case 52310:                     // 'attribute' 'copy'
    case 52344:                     // 'element' 'copy'
    case 54870:                     // 'attribute' 'declare'
    case 54904:                     // 'element' 'declare'
    case 55894:                     // 'attribute' 'delete'
    case 55928:                     // 'element' 'delete'
    case 56406:                     // 'attribute' 'descendant'
    case 56440:                     // 'element' 'descendant'
    case 56918:                     // 'attribute' 'descendant-or-self'
    case 56952:                     // 'element' 'descendant-or-self'
    case 60502:                     // 'attribute' 'document'
    case 60536:                     // 'element' 'document'
    case 61014:                     // 'attribute' 'document-node'
    case 61048:                     // 'element' 'document-node'
    case 61526:                     // 'attribute' 'element'
    case 61560:                     // 'element' 'element'
    case 63062:                     // 'attribute' 'empty-sequence'
    case 63096:                     // 'element' 'empty-sequence'
    case 65622:                     // 'attribute' 'every'
    case 65656:                     // 'element' 'every'
    case 68694:                     // 'attribute' 'following'
    case 68728:                     // 'element' 'following'
    case 69206:                     // 'attribute' 'following-sibling'
    case 69240:                     // 'element' 'following-sibling'
    case 72790:                     // 'attribute' 'function'
    case 72824:                     // 'element' 'function'
    case 76374:                     // 'attribute' 'if'
    case 76408:                     // 'element' 'if'
    case 76886:                     // 'attribute' 'import'
    case 76920:                     // 'element' 'import'
    case 79446:                     // 'attribute' 'insert'
    case 79480:                     // 'element' 'insert'
    case 81494:                     // 'attribute' 'invoke'
    case 81528:                     // 'element' 'invoke'
    case 82518:                     // 'attribute' 'item'
    case 82552:                     // 'element' 'item'
    case 87638:                     // 'attribute' 'map'
    case 87672:                     // 'element' 'map'
    case 89686:                     // 'attribute' 'module'
    case 89720:                     // 'element' 'module'
    case 90710:                     // 'attribute' 'namespace'
    case 90744:                     // 'element' 'namespace'
    case 91222:                     // 'attribute' 'namespace-node'
    case 91256:                     // 'element' 'namespace-node'
    case 94294:                     // 'attribute' 'node'
    case 94328:                     // 'element' 'node'
    case 98902:                     // 'attribute' 'ordered'
    case 98936:                     // 'element' 'ordered'
    case 100950:                    // 'attribute' 'parent'
    case 100984:                    // 'element' 'parent'
    case 103510:                    // 'attribute' 'preceding'
    case 103544:                    // 'element' 'preceding'
    case 104022:                    // 'attribute' 'preceding-sibling'
    case 104056:                    // 'element' 'preceding-sibling'
    case 105558:                    // 'attribute' 'processing-instruction'
    case 105592:                    // 'element' 'processing-instruction'
    case 106582:                    // 'attribute' 'rename'
    case 106616:                    // 'element' 'rename'
    case 107094:                    // 'attribute' 'replace'
    case 107128:                    // 'element' 'replace'
    case 110166:                    // 'attribute' 'schema-attribute'
    case 110200:                    // 'element' 'schema-attribute'
    case 110678:                    // 'attribute' 'schema-element'
    case 110712:                    // 'element' 'schema-element'
    case 111702:                    // 'attribute' 'self'
    case 111736:                    // 'element' 'self'
    case 114774:                    // 'attribute' 'some'
    case 114808:                    // 'element' 'some'
    case 118358:                    // 'attribute' 'switch'
    case 118392:                    // 'element' 'switch'
    case 118870:                    // 'attribute' 'text'
    case 118904:                    // 'element' 'text'
    case 122454:                    // 'attribute' 'try'
    case 122488:                    // 'element' 'try'
    case 123990:                    // 'attribute' 'typeswitch'
    case 124024:                    // 'element' 'typeswitch'
    case 125014:                    // 'attribute' 'unordered'
    case 125048:                    // 'element' 'unordered'
    case 127574:                    // 'attribute' 'validate'
    case 127608:                    // 'element' 'validate'
    case 134230:                    // 'attribute' 'xquery'
    case 134264:                    // 'element' 'xquery'
    case 135250:                    // 'array' '{'
    case 135254:                    // 'attribute' '{'
    case 135265:                    // 'comment' '{'
    case 135286:                    // 'document' '{'
    case 135288:                    // 'element' '{'
    case 135339:                    // 'map' '{'
    case 135345:                    // 'namespace' '{'
    case 135361:                    // 'ordered' '{'
    case 135374:                    // 'processing-instruction' '{'
    case 135400:                    // 'text' '{'
    case 135412:                    // 'unordered' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  private void try_StepExpr()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(245);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'contains' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 120:                       // 'element'
      lookahead2W(244);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                    // 'contains' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 82:                        // 'array'
    case 171:                       // 'map'
      lookahead2W(197);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 177:                       // 'namespace'
    case 206:                       // 'processing-instruction'
      lookahead2W(209);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 97:                        // 'comment'
    case 118:                       // 'document'
    case 193:                       // 'ordered'
    case 232:                       // 'text'
    case 244:                       // 'unordered'
      lookahead2W(205);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 109:                       // 'delete'
    case 123:                       // 'empty-sequence'
    case 149:                       // 'if'
    case 155:                       // 'insert'
    case 161:                       // 'item'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(192);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 218:                       // 'self'
      lookahead2W(203);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 119:                       // 'document-node'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 136:                       // 'for'
    case 142:                       // 'function'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 178:                       // 'namespace-node'
    case 179:                       // 'ne'
    case 184:                       // 'node'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(195);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 41046                 // 'attribute' 'and'
     || lk == 41080                 // 'element' 'and'
     || lk == 41137                 // 'namespace' 'and'
     || lk == 41166                 // 'processing-instruction' 'and'
     || lk == 42582                 // 'attribute' 'as'
     || lk == 42616                 // 'element' 'as'
     || lk == 42673                 // 'namespace' 'as'
     || lk == 42702                 // 'processing-instruction' 'as'
     || lk == 43094                 // 'attribute' 'ascending'
     || lk == 43128                 // 'element' 'ascending'
     || lk == 43185                 // 'namespace' 'ascending'
     || lk == 43214                 // 'processing-instruction' 'ascending'
     || lk == 46678                 // 'attribute' 'case'
     || lk == 46712                 // 'element' 'case'
     || lk == 46769                 // 'namespace' 'case'
     || lk == 46798                 // 'processing-instruction' 'case'
     || lk == 47190                 // 'attribute' 'cast'
     || lk == 47224                 // 'element' 'cast'
     || lk == 47281                 // 'namespace' 'cast'
     || lk == 47310                 // 'processing-instruction' 'cast'
     || lk == 47702                 // 'attribute' 'castable'
     || lk == 47736                 // 'element' 'castable'
     || lk == 47793                 // 'namespace' 'castable'
     || lk == 47822                 // 'processing-instruction' 'castable'
     || lk == 49238                 // 'attribute' 'collation'
     || lk == 49272                 // 'element' 'collation'
     || lk == 49329                 // 'namespace' 'collation'
     || lk == 49358                 // 'processing-instruction' 'collation'
     || lk == 53334                 // 'attribute' 'count'
     || lk == 53368                 // 'element' 'count'
     || lk == 53425                 // 'namespace' 'count'
     || lk == 53454                 // 'processing-instruction' 'count'
     || lk == 55382                 // 'attribute' 'default'
     || lk == 55416                 // 'element' 'default'
     || lk == 55473                 // 'namespace' 'default'
     || lk == 55502                 // 'processing-instruction' 'default'
     || lk == 57430                 // 'attribute' 'descending'
     || lk == 57464                 // 'element' 'descending'
     || lk == 57521                 // 'namespace' 'descending'
     || lk == 57550                 // 'processing-instruction' 'descending'
     || lk == 59990                 // 'attribute' 'div'
     || lk == 60024                 // 'element' 'div'
     || lk == 60081                 // 'namespace' 'div'
     || lk == 60110                 // 'processing-instruction' 'div'
     || lk == 62038                 // 'attribute' 'else'
     || lk == 62072                 // 'element' 'else'
     || lk == 62129                 // 'namespace' 'else'
     || lk == 62158                 // 'processing-instruction' 'else'
     || lk == 62550                 // 'attribute' 'empty'
     || lk == 62584                 // 'element' 'empty'
     || lk == 62641                 // 'namespace' 'empty'
     || lk == 62670                 // 'processing-instruction' 'empty'
     || lk == 64086                 // 'attribute' 'end'
     || lk == 64120                 // 'element' 'end'
     || lk == 64177                 // 'namespace' 'end'
     || lk == 64206                 // 'processing-instruction' 'end'
     || lk == 65110                 // 'attribute' 'eq'
     || lk == 65144                 // 'element' 'eq'
     || lk == 65201                 // 'namespace' 'eq'
     || lk == 65230                 // 'processing-instruction' 'eq'
     || lk == 66646                 // 'attribute' 'except'
     || lk == 66680                 // 'element' 'except'
     || lk == 66737                 // 'namespace' 'except'
     || lk == 66766                 // 'processing-instruction' 'except'
     || lk == 69718                 // 'attribute' 'for'
     || lk == 69752                 // 'element' 'for'
     || lk == 69809                 // 'namespace' 'for'
     || lk == 69838                 // 'processing-instruction' 'for'
     || lk == 73302                 // 'attribute' 'ge'
     || lk == 73336                 // 'element' 'ge'
     || lk == 73393                 // 'namespace' 'ge'
     || lk == 73422                 // 'processing-instruction' 'ge'
     || lk == 74326                 // 'attribute' 'group'
     || lk == 74360                 // 'element' 'group'
     || lk == 74417                 // 'namespace' 'group'
     || lk == 74446                 // 'processing-instruction' 'group'
     || lk == 75350                 // 'attribute' 'gt'
     || lk == 75384                 // 'element' 'gt'
     || lk == 75441                 // 'namespace' 'gt'
     || lk == 75470                 // 'processing-instruction' 'gt'
     || lk == 75862                 // 'attribute' 'idiv'
     || lk == 75896                 // 'element' 'idiv'
     || lk == 75953                 // 'namespace' 'idiv'
     || lk == 75982                 // 'processing-instruction' 'idiv'
     || lk == 79958                 // 'attribute' 'instance'
     || lk == 79992                 // 'element' 'instance'
     || lk == 80049                 // 'namespace' 'instance'
     || lk == 80078                 // 'processing-instruction' 'instance'
     || lk == 80470                 // 'attribute' 'intersect'
     || lk == 80504                 // 'element' 'intersect'
     || lk == 80561                 // 'namespace' 'intersect'
     || lk == 80590                 // 'processing-instruction' 'intersect'
     || lk == 82006                 // 'attribute' 'is'
     || lk == 82040                 // 'element' 'is'
     || lk == 82097                 // 'namespace' 'is'
     || lk == 82126                 // 'processing-instruction' 'is'
     || lk == 84566                 // 'attribute' 'le'
     || lk == 84600                 // 'element' 'le'
     || lk == 84657                 // 'namespace' 'le'
     || lk == 84686                 // 'processing-instruction' 'le'
     || lk == 85590                 // 'attribute' 'let'
     || lk == 85624                 // 'element' 'let'
     || lk == 85681                 // 'namespace' 'let'
     || lk == 85710                 // 'processing-instruction' 'let'
     || lk == 87126                 // 'attribute' 'lt'
     || lk == 87160                 // 'element' 'lt'
     || lk == 87217                 // 'namespace' 'lt'
     || lk == 87246                 // 'processing-instruction' 'lt'
     || lk == 88662                 // 'attribute' 'mod'
     || lk == 88696                 // 'element' 'mod'
     || lk == 88753                 // 'namespace' 'mod'
     || lk == 88782                 // 'processing-instruction' 'mod'
     || lk == 89174                 // 'attribute' 'modify'
     || lk == 89208                 // 'element' 'modify'
     || lk == 91734                 // 'attribute' 'ne'
     || lk == 91768                 // 'element' 'ne'
     || lk == 91825                 // 'namespace' 'ne'
     || lk == 91854                 // 'processing-instruction' 'ne'
     || lk == 96854                 // 'attribute' 'only'
     || lk == 96888                 // 'element' 'only'
     || lk == 96945                 // 'namespace' 'only'
     || lk == 96974                 // 'processing-instruction' 'only'
     || lk == 97878                 // 'attribute' 'or'
     || lk == 97912                 // 'element' 'or'
     || lk == 97969                 // 'namespace' 'or'
     || lk == 97998                 // 'processing-instruction' 'or'
     || lk == 98390                 // 'attribute' 'order'
     || lk == 98424                 // 'element' 'order'
     || lk == 98481                 // 'namespace' 'order'
     || lk == 98510                 // 'processing-instruction' 'order'
     || lk == 107606                // 'attribute' 'return'
     || lk == 107640                // 'element' 'return'
     || lk == 107697                // 'namespace' 'return'
     || lk == 107726                // 'processing-instruction' 'return'
     || lk == 109142                // 'attribute' 'satisfies'
     || lk == 109176                // 'element' 'satisfies'
     || lk == 109233                // 'namespace' 'satisfies'
     || lk == 109262                // 'processing-instruction' 'satisfies'
     || lk == 115286                // 'attribute' 'stable'
     || lk == 115320                // 'element' 'stable'
     || lk == 115377                // 'namespace' 'stable'
     || lk == 115406                // 'processing-instruction' 'stable'
     || lk == 115798                // 'attribute' 'start'
     || lk == 115832                // 'element' 'start'
     || lk == 115889                // 'namespace' 'start'
     || lk == 115918                // 'processing-instruction' 'start'
     || lk == 120918                // 'attribute' 'to'
     || lk == 120952                // 'element' 'to'
     || lk == 121009                // 'namespace' 'to'
     || lk == 121038                // 'processing-instruction' 'to'
     || lk == 121430                // 'attribute' 'transform'
     || lk == 121464                // 'element' 'transform'
     || lk == 121942                // 'attribute' 'treat'
     || lk == 121976                // 'element' 'treat'
     || lk == 122033                // 'namespace' 'treat'
     || lk == 122062                // 'processing-instruction' 'treat'
     || lk == 124502                // 'attribute' 'union'
     || lk == 124536                // 'element' 'union'
     || lk == 124593                // 'namespace' 'union'
     || lk == 124622                // 'processing-instruction' 'union'
     || lk == 125526                // 'attribute' 'update'
     || lk == 125560                // 'element' 'update'
     || lk == 130646                // 'attribute' 'where'
     || lk == 130680                // 'element' 'where'
     || lk == 130737                // 'namespace' 'where'
     || lk == 130766                // 'processing-instruction' 'where'
     || lk == 132182                // 'attribute' 'with'
     || lk == 132216)               // 'element' 'with'
    {
      lk = memoized(19, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(19, e0A, -1);
          lk = -3;
        }
        catch (ParseException p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(19, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 43:                        // '.'
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
    case 65:                        // '?'
    case 69:                        // '['
    case 73:                        // '``['
    case 2646:                      // 'attribute' URIQualifiedName
    case 2680:                      // 'element' URIQualifiedName
    case 7345:                      // 'namespace' NCName^Token
    case 7374:                      // 'processing-instruction' NCName^Token
    case 7766:                      // 'attribute' QName^Token
    case 7800:                      // 'element' QName^Token
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14930:                     // 'array' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14957:                     // 'delete' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14967:                     // 'document-node' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14971:                     // 'empty-sequence' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14990:                     // 'function' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14997:                     // 'if' '#'
    case 14998:                     // 'import' '#'
    case 15003:                     // 'insert' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15009:                     // 'item' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15019:                     // 'map' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15026:                     // 'namespace-node' '#'
    case 15027:                     // 'ne' '#'
    case 15032:                     // 'node' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15056:                     // 'rename' '#'
    case 15057:                     // 'replace' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15063:                     // 'schema-attribute' '#'
    case 15064:                     // 'schema-element' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15079:                     // 'switch' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15090:                     // 'typeswitch' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17550:                     // 'function' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
    case 40022:                     // 'attribute' 'ancestor'
    case 40056:                     // 'element' 'ancestor'
    case 40534:                     // 'attribute' 'ancestor-or-self'
    case 40568:                     // 'element' 'ancestor-or-self'
    case 42070:                     // 'attribute' 'array'
    case 42104:                     // 'element' 'array'
    case 43606:                     // 'attribute' 'at'
    case 43640:                     // 'element' 'at'
    case 44118:                     // 'attribute' 'attribute'
    case 44152:                     // 'element' 'attribute'
    case 48726:                     // 'attribute' 'child'
    case 48760:                     // 'element' 'child'
    case 49750:                     // 'attribute' 'comment'
    case 49784:                     // 'element' 'comment'
    case 52310:                     // 'attribute' 'copy'
    case 52344:                     // 'element' 'copy'
    case 54870:                     // 'attribute' 'declare'
    case 54904:                     // 'element' 'declare'
    case 55894:                     // 'attribute' 'delete'
    case 55928:                     // 'element' 'delete'
    case 56406:                     // 'attribute' 'descendant'
    case 56440:                     // 'element' 'descendant'
    case 56918:                     // 'attribute' 'descendant-or-self'
    case 56952:                     // 'element' 'descendant-or-self'
    case 60502:                     // 'attribute' 'document'
    case 60536:                     // 'element' 'document'
    case 61014:                     // 'attribute' 'document-node'
    case 61048:                     // 'element' 'document-node'
    case 61526:                     // 'attribute' 'element'
    case 61560:                     // 'element' 'element'
    case 63062:                     // 'attribute' 'empty-sequence'
    case 63096:                     // 'element' 'empty-sequence'
    case 65622:                     // 'attribute' 'every'
    case 65656:                     // 'element' 'every'
    case 68694:                     // 'attribute' 'following'
    case 68728:                     // 'element' 'following'
    case 69206:                     // 'attribute' 'following-sibling'
    case 69240:                     // 'element' 'following-sibling'
    case 72790:                     // 'attribute' 'function'
    case 72824:                     // 'element' 'function'
    case 76374:                     // 'attribute' 'if'
    case 76408:                     // 'element' 'if'
    case 76886:                     // 'attribute' 'import'
    case 76920:                     // 'element' 'import'
    case 79446:                     // 'attribute' 'insert'
    case 79480:                     // 'element' 'insert'
    case 81494:                     // 'attribute' 'invoke'
    case 81528:                     // 'element' 'invoke'
    case 82518:                     // 'attribute' 'item'
    case 82552:                     // 'element' 'item'
    case 87638:                     // 'attribute' 'map'
    case 87672:                     // 'element' 'map'
    case 89686:                     // 'attribute' 'module'
    case 89720:                     // 'element' 'module'
    case 90710:                     // 'attribute' 'namespace'
    case 90744:                     // 'element' 'namespace'
    case 91222:                     // 'attribute' 'namespace-node'
    case 91256:                     // 'element' 'namespace-node'
    case 94294:                     // 'attribute' 'node'
    case 94328:                     // 'element' 'node'
    case 98902:                     // 'attribute' 'ordered'
    case 98936:                     // 'element' 'ordered'
    case 100950:                    // 'attribute' 'parent'
    case 100984:                    // 'element' 'parent'
    case 103510:                    // 'attribute' 'preceding'
    case 103544:                    // 'element' 'preceding'
    case 104022:                    // 'attribute' 'preceding-sibling'
    case 104056:                    // 'element' 'preceding-sibling'
    case 105558:                    // 'attribute' 'processing-instruction'
    case 105592:                    // 'element' 'processing-instruction'
    case 106582:                    // 'attribute' 'rename'
    case 106616:                    // 'element' 'rename'
    case 107094:                    // 'attribute' 'replace'
    case 107128:                    // 'element' 'replace'
    case 110166:                    // 'attribute' 'schema-attribute'
    case 110200:                    // 'element' 'schema-attribute'
    case 110678:                    // 'attribute' 'schema-element'
    case 110712:                    // 'element' 'schema-element'
    case 111702:                    // 'attribute' 'self'
    case 111736:                    // 'element' 'self'
    case 114774:                    // 'attribute' 'some'
    case 114808:                    // 'element' 'some'
    case 118358:                    // 'attribute' 'switch'
    case 118392:                    // 'element' 'switch'
    case 118870:                    // 'attribute' 'text'
    case 118904:                    // 'element' 'text'
    case 122454:                    // 'attribute' 'try'
    case 122488:                    // 'element' 'try'
    case 123990:                    // 'attribute' 'typeswitch'
    case 124024:                    // 'element' 'typeswitch'
    case 125014:                    // 'attribute' 'unordered'
    case 125048:                    // 'element' 'unordered'
    case 127574:                    // 'attribute' 'validate'
    case 127608:                    // 'element' 'validate'
    case 134230:                    // 'attribute' 'xquery'
    case 134264:                    // 'element' 'xquery'
    case 135250:                    // 'array' '{'
    case 135254:                    // 'attribute' '{'
    case 135265:                    // 'comment' '{'
    case 135286:                    // 'document' '{'
    case 135288:                    // 'element' '{'
    case 135339:                    // 'map' '{'
    case 135345:                    // 'namespace' '{'
    case 135361:                    // 'ordered' '{'
    case 135374:                    // 'processing-instruction' '{'
    case 135400:                    // 'text' '{'
    case 135412:                    // 'unordered' '{'
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  private void parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
      lookahead2W(194);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 44:                        // '..'
    case 25678:                     // 'ancestor' '::'
    case 25679:                     // 'ancestor-or-self' '::'
    case 25797:                     // 'parent' '::'
    case 25802:                     // 'preceding' '::'
    case 25803:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(191);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  private void try_AxisStep()
  {
    switch (l1)
    {
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
      lookahead2W(194);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 44:                        // '..'
    case 25678:                     // 'ancestor' '::'
    case 25679:                     // 'ancestor-or-self' '::'
    case 25797:                     // 'parent' '::'
    case 25802:                     // 'preceding' '::'
    case 25803:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(191);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    try_PredicateList();
  }

  private void parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(198);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 218:                       // 'self'
      lookahead2W(194);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 25686:                     // 'attribute' '::'
    case 25695:                     // 'child' '::'
    case 25710:                     // 'descendant' '::'
    case 25711:                     // 'descendant-or-self' '::'
    case 25734:                     // 'following' '::'
    case 25735:                     // 'following-sibling' '::'
    case 25818:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(225);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  private void try_ForwardStep()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(198);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 218:                       // 'self'
      lookahead2W(194);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 25686:                     // 'attribute' '::'
    case 25695:                     // 'child' '::'
    case 25710:                     // 'descendant' '::'
    case 25711:                     // 'descendant-or-self' '::'
    case 25734:                     // 'following' '::'
    case 25735:                     // 'following-sibling' '::'
    case 25818:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(225);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  private void parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 95:                        // 'child'
      consume(95);                  // 'child'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 110:                       // 'descendant'
      consume(110);                 // 'descendant'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 86:                        // 'attribute'
      consume(86);                  // 'attribute'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 218:                       // 'self'
      consume(218);                 // 'self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 111:                       // 'descendant-or-self'
      consume(111);                 // 'descendant-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 135:                       // 'following-sibling'
      consume(135);                 // 'following-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    default:
      consume(134);                 // 'following'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  private void try_ForwardAxis()
  {
    switch (l1)
    {
    case 95:                        // 'child'
      consumeT(95);                 // 'child'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 110:                       // 'descendant'
      consumeT(110);                // 'descendant'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 86:                        // 'attribute'
      consumeT(86);                 // 'attribute'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 218:                       // 'self'
      consumeT(218);                // 'self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 111:                       // 'descendant-or-self'
      consumeT(111);                // 'descendant-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 135:                       // 'following-sibling'
      consumeT(135);                // 'following-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    default:
      consumeT(134);                // 'following'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
    }
  }

  private void parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 67)                   // '@'
    {
      consume(67);                  // '@'
    }
    lookahead1W(225);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  private void try_AbbrevForwardStep()
  {
    if (l1 == 67)                   // '@'
    {
      consumeT(67);                 // '@'
    }
    lookahead1W(225);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_NodeTest();
  }

  private void parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 44:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(225);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  private void try_ReverseStep()
  {
    switch (l1)
    {
    case 44:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(225);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_NodeTest();
    }
  }

  private void parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 197:                       // 'parent'
      consume(197);                 // 'parent'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 203:                       // 'preceding-sibling'
      consume(203);                 // 'preceding-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 202:                       // 'preceding'
      consume(202);                 // 'preceding'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    default:
      consume(79);                  // 'ancestor-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  private void try_ReverseAxis()
  {
    switch (l1)
    {
    case 197:                       // 'parent'
      consumeT(197);                // 'parent'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 203:                       // 'preceding-sibling'
      consumeT(203);                // 'preceding-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 202:                       // 'preceding'
      consumeT(202);                // 'preceding'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    default:
      consumeT(79);                 // 'ancestor-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
    }
  }

  private void parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    consume(44);                    // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  private void try_AbbrevReverseStep()
  {
    consumeT(44);                   // '..'
  }

  private void parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(193);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  private void try_NodeTest()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(193);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  private void parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 21:                        // Wildcard
      consume(21);                  // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  private void try_NameTest()
  {
    switch (l1)
    {
    case 21:                        // Wildcard
      consumeT(21);                 // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  private void parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(199);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 34                  // '('
       && l1 != 65                  // '?'
       && l1 != 69)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        whitespace();
        parse_Predicate();
        break;
      case 34:                      // '('
        whitespace();
        parse_ArgumentList();
        break;
      default:
        whitespace();
        parse_Lookup();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  private void try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(199);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 34                  // '('
       && l1 != 65                  // '?'
       && l1 != 69)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        try_Predicate();
        break;
      case 34:                      // '('
        try_ArgumentList();
        break;
      default:
        try_Lookup();
      }
    }
  }

  private void parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    consume(34);                    // '('
    lookahead1W(239);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_Argument();
      }
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  private void try_ArgumentList()
  {
    consumeT(34);                   // '('
    lookahead1W(239);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_Argument();
      }
    }
    consumeT(37);                   // ')'
  }

  private void parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(191);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 69)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  private void try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(191);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 69)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  private void parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    consume(69);                    // '['
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(70);                    // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  private void try_Predicate()
  {
    consumeT(69);                   // '['
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(70);                   // ']'
  }

  private void parse_Lookup()
  {
    eventHandler.startNonterminal("Lookup", e0);
    consume(65);                    // '?'
    lookahead1W(178);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("Lookup", e0);
  }

  private void try_Lookup()
  {
    consumeT(65);                   // '?'
    lookahead1W(178);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
    try_KeySpecifier();
  }

  private void parse_UnaryLookup()
  {
    eventHandler.startNonterminal("UnaryLookup", e0);
    consume(65);                    // '?'
    lookahead1W(178);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("UnaryLookup", e0);
  }

  private void try_UnaryLookup()
  {
    consumeT(65);                   // '?'
    lookahead1W(178);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
    try_KeySpecifier();
  }

  private void parse_KeySpecifier()
  {
    eventHandler.startNonterminal("KeySpecifier", e0);
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consume(1);                   // IntegerLiteral
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_NCName();
    }
    eventHandler.endNonterminal("KeySpecifier", e0);
  }

  private void try_KeySpecifier()
  {
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consumeT(1);                  // IntegerLiteral
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_NCName();
    }
  }

  private void parse_ArrowFunctionSpecifier()
  {
    eventHandler.startNonterminal("ArrowFunctionSpecifier", e0);
    switch (l1)
    {
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("ArrowFunctionSpecifier", e0);
  }

  private void try_ArrowFunctionSpecifier()
  {
    switch (l1)
    {
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    default:
      try_EQName();
    }
  }

  private void parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 4:                         // StringLiteral
      consume(4);                   // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  private void try_Literal()
  {
    switch (l1)
    {
    case 4:                         // StringLiteral
      consumeT(4);                  // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  private void parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consume(1);                   // IntegerLiteral
      break;
    case 2:                         // DecimalLiteral
      consume(2);                   // DecimalLiteral
      break;
    default:
      consume(3);                   // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  private void try_NumericLiteral()
  {
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consumeT(1);                  // IntegerLiteral
      break;
    case 2:                         // DecimalLiteral
      consumeT(2);                  // DecimalLiteral
      break;
    default:
      consumeT(3);                  // DoubleLiteral
    }
  }

  private void parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  private void try_VarRef()
  {
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
  }

  private void parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  private void try_VarName()
  {
    try_EQName();
  }

  private void parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    consume(34);                    // '('
    lookahead1W(239);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  private void try_ParenthesizedExpr()
  {
    consumeT(34);                   // '('
    lookahead1W(239);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_Expr();
    }
    consumeT(37);                   // ')'
  }

  private void parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    consume(43);                    // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  private void try_ContextItemExpr()
  {
    consumeT(43);                   // '.'
  }

  private void parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    consume(193);                   // 'ordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  private void try_OrderedExpr()
  {
    consumeT(193);                  // 'ordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  private void parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    consume(244);                   // 'unordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  private void try_UnorderedExpr()
  {
    consumeT(244);                  // 'unordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  private void parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionEQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  private void try_FunctionCall()
  {
    try_FunctionEQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  private void parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 65:                        // '?'
      lookahead2W(180);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'and' |
                                    // 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19009:                     // '?' ')'
    case 20545:                     // '?' ','
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  private void try_Argument()
  {
    switch (l1)
    {
    case 65:                        // '?'
      lookahead2W(180);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'and' |
                                    // 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19009:                     // '?' ')'
    case 20545:                     // '?' ','
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  private void parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    consume(65);                    // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  private void try_ArgumentPlaceholder()
  {
    consumeT(65);                   // '?'
  }

  private void parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  private void try_Constructor()
  {
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  private void parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 53:                        // '<'
      parse_DirElemConstructor();
      break;
    case 54:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  private void try_DirectConstructor()
  {
    switch (l1)
    {
    case 53:                        // '<'
      try_DirElemConstructor();
      break;
    case 54:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  private void parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    consume(53);                    // '<'
    parse_QName();
    parse_DirAttributeList();
    switch (l1)
    {
    case 47:                        // '/>'
      consume(47);                  // '/>'
      break;
    default:
      consume(62);                  // '>'
      for (;;)
      {
        lookahead1(164);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      consume(56);                  // '</'
      parse_QName();
      lookahead1(14);               // S | '>'
      if (l1 == 17)                 // S
      {
        consume(17);                // S
      }
      lookahead1(9);                // '>'
      consume(62);                  // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  private void try_DirElemConstructor()
  {
    consumeT(53);                   // '<'
    try_QName();
    try_DirAttributeList();
    switch (l1)
    {
    case 47:                        // '/>'
      consumeT(47);                 // '/>'
      break;
    default:
      consumeT(62);                 // '>'
      for (;;)
      {
        lookahead1(164);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      consumeT(56);                 // '</'
      try_QName();
      lookahead1(14);               // S | '>'
      if (l1 == 17)                 // S
      {
        consumeT(17);               // S
      }
      lookahead1(9);                // '>'
      consumeT(62);                 // '>'
    }
  }

  private void parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 17)                 // S
      {
        break;
      }
      consume(17);                  // S
      lookahead1(224);              // QName^Token | S | '/>' | '>' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 17                  // S
       && l1 != 47                  // '/>'
       && l1 != 62)                 // '>'
      {
        parse_QName();
        lookahead1(13);             // S | '='
        if (l1 == 17)               // S
        {
          consume(17);              // S
        }
        lookahead1(8);              // '='
        consume(60);                // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 17)               // S
        {
          consume(17);              // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  private void try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 17)                 // S
      {
        break;
      }
      consumeT(17);                 // S
      lookahead1(224);              // QName^Token | S | '/>' | '>' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      if (l1 != 17                  // S
       && l1 != 47                  // '/>'
       && l1 != 62)                 // '>'
      {
        try_QName();
        lookahead1(13);             // S | '='
        if (l1 == 17)               // S
        {
          consumeT(17);             // S
        }
        lookahead1(8);              // '='
        consumeT(60);               // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 17)               // S
        {
          consumeT(17);             // S
        }
        try_DirAttributeValue();
      }
    }
  }

  private void parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(16);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consume(28);                  // '"'
      for (;;)
      {
        lookahead1(159);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          consume(7);               // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      consume(28);                  // '"'
      break;
    default:
      consume(33);                  // "'"
      for (;;)
      {
        lookahead1(160);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          consume(8);               // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      consume(33);                  // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  private void try_DirAttributeValue()
  {
    lookahead1(16);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consumeT(28);                 // '"'
      for (;;)
      {
        lookahead1(159);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          consumeT(7);              // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      consumeT(28);                 // '"'
      break;
    default:
      consumeT(33);                 // "'"
      for (;;)
      {
        lookahead1(160);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          consumeT(8);              // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      consumeT(33);                 // "'"
    }
  }

  private void parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      consume(10);                  // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  private void try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      consumeT(10);                 // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  private void parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      consume(11);                  // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  private void try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      consumeT(11);                 // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  private void parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    case 55:                        // '<![CDATA['
      parse_CDataSection();
      break;
    case 9:                         // ElementContentChar
      consume(9);                   // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  private void try_DirElemContent()
  {
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    case 55:                        // '<![CDATA['
      try_CDataSection();
      break;
    case 9:                         // ElementContentChar
      consumeT(9);                  // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  private void parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    consume(54);                    // '<!--'
    lookahead1(3);                  // DirCommentContents
    consume(22);                    // DirCommentContents
    lookahead1(7);                  // '-->'
    consume(42);                    // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  private void try_DirCommentConstructor()
  {
    consumeT(54);                   // '<!--'
    lookahead1(3);                  // DirCommentContents
    consumeT(22);                   // DirCommentContents
    lookahead1(7);                  // '-->'
    consumeT(42);                   // '-->'
  }

  private void parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    consume(59);                    // '<?'
    lookahead1(0);                  // PITarget
    consume(12);                    // PITarget
    lookahead1(15);                 // S | '?>'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
      lookahead1(4);                // DirPIContents
      consume(23);                  // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consume(66);                    // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  private void try_DirPIConstructor()
  {
    consumeT(59);                   // '<?'
    lookahead1(0);                  // PITarget
    consumeT(12);                   // PITarget
    lookahead1(15);                 // S | '?>'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
      lookahead1(4);                // DirPIContents
      consumeT(23);                 // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consumeT(66);                   // '?>'
  }

  private void parse_CDataSection()
  {
    eventHandler.startNonterminal("CDataSection", e0);
    consume(55);                    // '<![CDATA['
    lookahead1(5);                  // CDataSectionContents
    consume(24);                    // CDataSectionContents
    lookahead1(11);                 // ']]>'
    consume(71);                    // ']]>'
    eventHandler.endNonterminal("CDataSection", e0);
  }

  private void try_CDataSection()
  {
    consumeT(55);                   // '<![CDATA['
    lookahead1(5);                  // CDataSectionContents
    consumeT(24);                   // CDataSectionContents
    lookahead1(11);                 // ']]>'
    consumeT(71);                   // ']]>'
  }

  private void parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 118:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 120:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 86:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 177:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 232:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  private void try_ComputedConstructor()
  {
    switch (l1)
    {
    case 118:                       // 'document'
      try_CompDocConstructor();
      break;
    case 120:                       // 'element'
      try_CompElemConstructor();
      break;
    case 86:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 177:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 232:                       // 'text'
      try_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  private void parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    consume(120);                   // 'element'
    lookahead1W(227);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedContentExpr();
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  private void try_CompElemConstructor()
  {
    consumeT(120);                  // 'element'
    lookahead1W(227);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedContentExpr();
  }

  private void parse_EnclosedContentExpr()
  {
    eventHandler.startNonterminal("EnclosedContentExpr", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("EnclosedContentExpr", e0);
  }

  private void try_EnclosedContentExpr()
  {
    try_EnclosedExpr();
  }

  private void parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    consume(177);                   // 'namespace'
    lookahead1W(175);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_PrefixExpr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_URIExpr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  private void try_CompNamespaceConstructor()
  {
    consumeT(177);                  // 'namespace'
    lookahead1W(175);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_PrefixExpr();
      consumeT(268);                // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_URIExpr();
    consumeT(268);                  // '}'
  }

  private void parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  private void try_Prefix()
  {
    try_NCName();
  }

  private void parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  private void try_PrefixExpr()
  {
    try_Expr();
  }

  private void parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  private void try_URIExpr()
  {
    try_Expr();
  }

  private void parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  private void try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  private void parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consume(29);                    // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consume(1);                     // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  private void try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consumeT(29);                   // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consumeT(1);                    // IntegerLiteral
  }

  private void parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(142);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(85);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(104);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 83)                   // 'as'
    {
      consume(83);                  // 'as'
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  private void try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(142);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(85);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      try_ParamList();
    }
    consumeT(37);                   // ')'
    lookahead1W(104);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 83)                   // 'as'
    {
      consumeT(83);                 // 'as'
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  private void parse_MapConstructor()
  {
    eventHandler.startNonterminal("MapConstructor", e0);
    consume(171);                   // 'map'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(242);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_MapConstructorEntry();
      for (;;)
      {
        lookahead1W(97);            // S^WS | '(:' | ',' | '}'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_MapConstructorEntry();
      }
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("MapConstructor", e0);
  }

  private void try_MapConstructor()
  {
    consumeT(171);                  // 'map'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(242);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      try_MapConstructorEntry();
      for (;;)
      {
        lookahead1W(97);            // S^WS | '(:' | ',' | '}'
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_MapConstructorEntry();
      }
    }
    consumeT(268);                  // '}'
  }

  private void parse_MapConstructorEntry()
  {
    eventHandler.startNonterminal("MapConstructorEntry", e0);
    parse_MapKeyExpr();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consume(48);                    // ':'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_MapValueExpr();
    eventHandler.endNonterminal("MapConstructorEntry", e0);
  }

  private void try_MapConstructorEntry()
  {
    try_MapKeyExpr();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consumeT(48);                   // ':'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_MapValueExpr();
  }

  private void parse_MapKeyExpr()
  {
    eventHandler.startNonterminal("MapKeyExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapKeyExpr", e0);
  }

  private void try_MapKeyExpr()
  {
    try_ExprSingle();
  }

  private void parse_MapValueExpr()
  {
    eventHandler.startNonterminal("MapValueExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapValueExpr", e0);
  }

  private void try_MapValueExpr()
  {
    try_ExprSingle();
  }

  private void parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    switch (l1)
    {
    case 69:                        // '['
      parse_SquareArrayConstructor();
      break;
    default:
      parse_CurlyArrayConstructor();
    }
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  private void try_ArrayConstructor()
  {
    switch (l1)
    {
    case 69:                        // '['
      try_SquareArrayConstructor();
      break;
    default:
      try_CurlyArrayConstructor();
    }
  }

  private void parse_SquareArrayConstructor()
  {
    eventHandler.startNonterminal("SquareArrayConstructor", e0);
    consume(69);                    // '['
    lookahead1W(240);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 70)                   // ']'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(94);            // S^WS | '(:' | ',' | ']'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(70);                    // ']'
    eventHandler.endNonterminal("SquareArrayConstructor", e0);
  }

  private void try_SquareArrayConstructor()
  {
    consumeT(69);                   // '['
    lookahead1W(240);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 70)                   // ']'
    {
      try_ExprSingle();
      for (;;)
      {
        lookahead1W(94);            // S^WS | '(:' | ',' | ']'
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_ExprSingle();
      }
    }
    consumeT(70);                   // ']'
  }

  private void parse_CurlyArrayConstructor()
  {
    eventHandler.startNonterminal("CurlyArrayConstructor", e0);
    consume(82);                    // 'array'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CurlyArrayConstructor", e0);
  }

  private void try_CurlyArrayConstructor()
  {
    consumeT(82);                   // 'array'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  private void parse_StringConstructor()
  {
    eventHandler.startNonterminal("StringConstructor", e0);
    consume(73);                    // '``['
    parse_StringConstructorContent();
    consume(72);                    // ']``'
    eventHandler.endNonterminal("StringConstructor", e0);
  }

  private void try_StringConstructor()
  {
    consumeT(73);                   // '``['
    try_StringConstructorContent();
    consumeT(72);                   // ']``'
  }

  private void parse_StringConstructorContent()
  {
    eventHandler.startNonterminal("StringConstructorContent", e0);
    lookahead1(1);                  // StringConstructorChars
    consume(16);                    // StringConstructorChars
    for (;;)
    {
      lookahead1(17);               // ']``' | '`{'
      if (l1 != 74)                 // '`{'
      {
        break;
      }
      parse_StringConstructorInterpolation();
      lookahead1(1);                // StringConstructorChars
      consume(16);                  // StringConstructorChars
    }
    eventHandler.endNonterminal("StringConstructorContent", e0);
  }

  private void try_StringConstructorContent()
  {
    lookahead1(1);                  // StringConstructorChars
    consumeT(16);                   // StringConstructorChars
    for (;;)
    {
      lookahead1(17);               // ']``' | '`{'
      if (l1 != 74)                 // '`{'
      {
        break;
      }
      try_StringConstructorInterpolation();
      lookahead1(1);                // StringConstructorChars
      consumeT(16);                 // StringConstructorChars
    }
  }

  private void parse_StringConstructorInterpolation()
  {
    eventHandler.startNonterminal("StringConstructorInterpolation", e0);
    consume(74);                    // '`{'
    lookahead1W(243);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}`'
    if (l1 != 269)                  // '}`'
    {
      whitespace();
      parse_Expr();
    }
    consume(269);                   // '}`'
    eventHandler.endNonterminal("StringConstructorInterpolation", e0);
  }

  private void try_StringConstructorInterpolation()
  {
    consumeT(74);                   // '`{'
    lookahead1W(243);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}`'
    if (l1 != 269)                  // '}`'
    {
      try_Expr();
    }
    consumeT(269);                  // '}`'
  }

  private void parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(187);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 65)                   // '?'
    {
      consume(65);                  // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  private void try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(187);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 65)                   // '?'
    {
      consumeT(65);                 // '?'
    }
  }

  private void parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    consume(83);                    // 'as'
    lookahead1W(230);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  private void try_TypeDeclaration()
  {
    consumeT(83);                   // 'as'
    lookahead1W(230);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SequenceType();
  }

  private void parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 123:                       // 'empty-sequence'
      lookahead2W(208);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17531:                     // 'empty-sequence' '('
      consume(123);                 // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(200);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      switch (l1)
      {
      case 38:                      // '*'
      case 39:                      // '+'
      case 65:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  private void try_SequenceType()
  {
    switch (l1)
    {
    case 123:                       // 'empty-sequence'
      lookahead2W(208);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17531:                     // 'empty-sequence' '('
      consumeT(123);                // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(200);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      switch (l1)
      {
      case 38:                      // '*'
      case 39:                      // '+'
      case 65:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  private void parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 65:                        // '?'
      consume(65);                  // '?'
      break;
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      consume(39);                  // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  private void try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 65:                        // '?'
      consumeT(65);                 // '?'
      break;
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      consumeT(39);                 // '+'
    }
  }

  private void parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 142:                       // 'function'
    case 161:                       // 'item'
    case 171:                       // 'map'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(208);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      parse_KindTest();
      break;
    case 17569:                     // 'item' '('
      consume(161);                 // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      parse_FunctionTest();
      break;
    case 34:                        // '('
      parse_ParenthesizedItemType();
      break;
    case 17579:                     // 'map' '('
      parse_MapType();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  private void try_ItemType()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 142:                       // 'function'
    case 161:                       // 'item'
    case 171:                       // 'map'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(208);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      try_KindTest();
      break;
    case 17569:                     // 'item' '('
      consumeT(161);                // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      try_FunctionTest();
      break;
    case 34:                        // '('
      try_ParenthesizedItemType();
      break;
    case 17579:                     // 'map' '('
      try_MapType();
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  private void parse_MapType()
  {
    eventHandler.startNonterminal("MapType", e0);
    consume(171);                   // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(226);               // URIQualifiedName | QName^Token | S^WS | '(:' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      whitespace();
      parse_AtomicOrUnionType();
      lookahead1W(27);              // S^WS | '(:' | ','
      consume(40);                  // ','
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("MapType", e0);
  }

  private void try_MapType()
  {
    consumeT(171);                  // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(226);               // URIQualifiedName | QName^Token | S^WS | '(:' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_AtomicOrUnionType();
      lookahead1W(27);              // S^WS | '(:' | ','
      consumeT(40);                 // ','
      lookahead1W(230);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  private void try_AtomicOrUnionType()
  {
    try_EQName();
  }

  private void parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 119:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 120:                       // 'element'
      parse_ElementTest();
      break;
    case 86:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 216:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 215:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 206:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 97:                        // 'comment'
      parse_CommentTest();
      break;
    case 232:                       // 'text'
      parse_TextTest();
      break;
    case 178:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  private void try_KindTest()
  {
    switch (l1)
    {
    case 119:                       // 'document-node'
      try_DocumentTest();
      break;
    case 120:                       // 'element'
      try_ElementTest();
      break;
    case 86:                        // 'attribute'
      try_AttributeTest();
      break;
    case 216:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 215:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 206:                       // 'processing-instruction'
      try_PITest();
      break;
    case 97:                        // 'comment'
      try_CommentTest();
      break;
    case 232:                       // 'text'
      try_TextTest();
      break;
    case 178:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  private void parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    consume(184);                   // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  private void try_AnyKindTest()
  {
    consumeT(184);                  // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    consume(119);                   // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(138);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 120:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  private void try_DocumentTest()
  {
    consumeT(119);                  // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(138);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 120:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    consume(232);                   // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  private void try_TextTest()
  {
    consumeT(232);                  // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    consume(97);                    // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  private void try_CommentTest()
  {
    consumeT(97);                   // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    consume(178);                   // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  private void try_NamespaceNodeTest()
  {
    consumeT(178);                  // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    consume(206);                   // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(176);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 4:                       // StringLiteral
        consume(4);                 // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  private void try_PITest()
  {
    consumeT(206);                  // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(176);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 4:                       // StringLiteral
        consumeT(4);                // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    consume(86);                    // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consume(40);                // ','
        lookahead1W(223);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  private void try_AttributeTest()
  {
    consumeT(86);                   // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consumeT(40);               // ','
        lookahead1W(223);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  private void try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  private void parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    consume(215);                   // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  private void try_SchemaAttributeTest()
  {
    consumeT(215);                  // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  private void try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  private void parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    consume(120);                   // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consume(40);                // ','
        lookahead1W(223);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(92);            // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          consume(65);              // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  private void try_ElementTest()
  {
    consumeT(120);                  // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consumeT(40);               // ','
        lookahead1W(223);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_TypeName();
        lookahead1W(92);            // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          consumeT(65);             // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  private void try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_ElementName();
    }
  }

  private void parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    consume(216);                   // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  private void try_SchemaElementTest()
  {
    consumeT(216);                  // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  private void try_ElementDeclaration()
  {
    try_ElementName();
  }

  private void parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  private void try_AttributeName()
  {
    try_EQName();
  }

  private void parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  private void try_ElementName()
  {
    try_EQName();
  }

  private void parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  private void try_SimpleTypeName()
  {
    try_TypeName();
  }

  private void parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  private void try_TypeName()
  {
    try_EQName();
  }

  private void parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(20, e0);
    if (lk == 0)
    {
      int b0A = b0; int e0A = e0; int l1A = l1;
      int b1A = b1; int e1A = e1; int l2A = l2;
      int b2A = b2; int e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (ParseException p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(20, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  private void try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(20, e0);
    if (lk == 0)
    {
      int b0A = b0; int e0A = e0; int l1A = l1;
      int b1A = b1; int e1A = e1; int l2A = l2;
      int b2A = b2; int e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(20, e0A, -1);
        lk = -3;
      }
      catch (ParseException p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(20, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  private void parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    consume(142);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  private void try_AnyFunctionTest()
  {
    consumeT(142);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    consume(142);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(233);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(230);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    consume(37);                    // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consume(83);                    // 'as'
    lookahead1W(230);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  private void try_TypedFunctionTest()
  {
    consumeT(142);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(233);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(230);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_SequenceType();
      }
    }
    consumeT(37);                   // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consumeT(83);                   // 'as'
    lookahead1W(230);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SequenceType();
  }

  private void parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    consume(34);                    // '('
    lookahead1W(230);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  private void try_ParenthesizedItemType()
  {
    consumeT(34);                   // '('
    lookahead1W(230);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_URILiteral()
  {
    eventHandler.startNonterminal("URILiteral", e0);
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("URILiteral", e0);
  }

  private void try_URILiteral()
  {
    consumeT(4);                    // StringLiteral
  }

  private void parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(221);                // URIQualifiedName | QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consume(5);                   // URIQualifiedName
      break;
    default:
      parse_QName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  private void try_EQName()
  {
    lookahead1(221);                // URIQualifiedName | QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consumeT(5);                  // URIQualifiedName
      break;
    default:
      try_QName();
    }
  }

  private void parse_FunctionEQName()
  {
    eventHandler.startNonterminal("FunctionEQName", e0);
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consume(5);                   // URIQualifiedName
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("FunctionEQName", e0);
  }

  private void try_FunctionEQName()
  {
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consumeT(5);                  // URIQualifiedName
      break;
    default:
      try_FunctionName();
    }
  }

  private void parse_QName()
  {
    eventHandler.startNonterminal("QName", e0);
    lookahead1(220);                // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 82:                        // 'array'
      consume(82);                  // 'array'
      break;
    case 86:                        // 'attribute'
      consume(86);                  // 'attribute'
      break;
    case 97:                        // 'comment'
      consume(97);                  // 'comment'
      break;
    case 109:                       // 'delete'
      consume(109);                 // 'delete'
      break;
    case 119:                       // 'document-node'
      consume(119);                 // 'document-node'
      break;
    case 120:                       // 'element'
      consume(120);                 // 'element'
      break;
    case 123:                       // 'empty-sequence'
      consume(123);                 // 'empty-sequence'
      break;
    case 142:                       // 'function'
      consume(142);                 // 'function'
      break;
    case 149:                       // 'if'
      consume(149);                 // 'if'
      break;
    case 155:                       // 'insert'
      consume(155);                 // 'insert'
      break;
    case 161:                       // 'item'
      consume(161);                 // 'item'
      break;
    case 171:                       // 'map'
      consume(171);                 // 'map'
      break;
    case 178:                       // 'namespace-node'
      consume(178);                 // 'namespace-node'
      break;
    case 184:                       // 'node'
      consume(184);                 // 'node'
      break;
    case 206:                       // 'processing-instruction'
      consume(206);                 // 'processing-instruction'
      break;
    case 208:                       // 'rename'
      consume(208);                 // 'rename'
      break;
    case 209:                       // 'replace'
      consume(209);                 // 'replace'
      break;
    case 215:                       // 'schema-attribute'
      consume(215);                 // 'schema-attribute'
      break;
    case 216:                       // 'schema-element'
      consume(216);                 // 'schema-element'
      break;
    case 231:                       // 'switch'
      consume(231);                 // 'switch'
      break;
    case 232:                       // 'text'
      consume(232);                 // 'text'
      break;
    case 242:                       // 'typeswitch'
      consume(242);                 // 'typeswitch'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("QName", e0);
  }

  private void try_QName()
  {
    lookahead1(220);                // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 82:                        // 'array'
      consumeT(82);                 // 'array'
      break;
    case 86:                        // 'attribute'
      consumeT(86);                 // 'attribute'
      break;
    case 97:                        // 'comment'
      consumeT(97);                 // 'comment'
      break;
    case 109:                       // 'delete'
      consumeT(109);                // 'delete'
      break;
    case 119:                       // 'document-node'
      consumeT(119);                // 'document-node'
      break;
    case 120:                       // 'element'
      consumeT(120);                // 'element'
      break;
    case 123:                       // 'empty-sequence'
      consumeT(123);                // 'empty-sequence'
      break;
    case 142:                       // 'function'
      consumeT(142);                // 'function'
      break;
    case 149:                       // 'if'
      consumeT(149);                // 'if'
      break;
    case 155:                       // 'insert'
      consumeT(155);                // 'insert'
      break;
    case 161:                       // 'item'
      consumeT(161);                // 'item'
      break;
    case 171:                       // 'map'
      consumeT(171);                // 'map'
      break;
    case 178:                       // 'namespace-node'
      consumeT(178);                // 'namespace-node'
      break;
    case 184:                       // 'node'
      consumeT(184);                // 'node'
      break;
    case 206:                       // 'processing-instruction'
      consumeT(206);                // 'processing-instruction'
      break;
    case 208:                       // 'rename'
      consumeT(208);                // 'rename'
      break;
    case 209:                       // 'replace'
      consumeT(209);                // 'replace'
      break;
    case 215:                       // 'schema-attribute'
      consumeT(215);                // 'schema-attribute'
      break;
    case 216:                       // 'schema-element'
      consumeT(216);                // 'schema-element'
      break;
    case 231:                       // 'switch'
      consumeT(231);                // 'switch'
      break;
    case 232:                       // 'text'
      consumeT(232);                // 'text'
      break;
    case 242:                       // 'typeswitch'
      consumeT(242);                // 'typeswitch'
      break;
    default:
      try_FunctionName();
    }
  }

  private void parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 15:                        // QName^Token
      consume(15);                  // QName^Token
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consume(79);                  // 'ancestor-or-self'
      break;
    case 80:                        // 'and'
      consume(80);                  // 'and'
      break;
    case 83:                        // 'as'
      consume(83);                  // 'as'
      break;
    case 84:                        // 'ascending'
      consume(84);                  // 'ascending'
      break;
    case 85:                        // 'at'
      consume(85);                  // 'at'
      break;
    case 91:                        // 'case'
      consume(91);                  // 'case'
      break;
    case 92:                        // 'cast'
      consume(92);                  // 'cast'
      break;
    case 93:                        // 'castable'
      consume(93);                  // 'castable'
      break;
    case 95:                        // 'child'
      consume(95);                  // 'child'
      break;
    case 96:                        // 'collation'
      consume(96);                  // 'collation'
      break;
    case 102:                       // 'copy'
      consume(102);                 // 'copy'
      break;
    case 104:                       // 'count'
      consume(104);                 // 'count'
      break;
    case 107:                       // 'declare'
      consume(107);                 // 'declare'
      break;
    case 108:                       // 'default'
      consume(108);                 // 'default'
      break;
    case 110:                       // 'descendant'
      consume(110);                 // 'descendant'
      break;
    case 111:                       // 'descendant-or-self'
      consume(111);                 // 'descendant-or-self'
      break;
    case 112:                       // 'descending'
      consume(112);                 // 'descending'
      break;
    case 117:                       // 'div'
      consume(117);                 // 'div'
      break;
    case 118:                       // 'document'
      consume(118);                 // 'document'
      break;
    case 121:                       // 'else'
      consume(121);                 // 'else'
      break;
    case 122:                       // 'empty'
      consume(122);                 // 'empty'
      break;
    case 125:                       // 'end'
      consume(125);                 // 'end'
      break;
    case 127:                       // 'eq'
      consume(127);                 // 'eq'
      break;
    case 128:                       // 'every'
      consume(128);                 // 'every'
      break;
    case 130:                       // 'except'
      consume(130);                 // 'except'
      break;
    case 134:                       // 'following'
      consume(134);                 // 'following'
      break;
    case 135:                       // 'following-sibling'
      consume(135);                 // 'following-sibling'
      break;
    case 136:                       // 'for'
      consume(136);                 // 'for'
      break;
    case 143:                       // 'ge'
      consume(143);                 // 'ge'
      break;
    case 145:                       // 'group'
      consume(145);                 // 'group'
      break;
    case 147:                       // 'gt'
      consume(147);                 // 'gt'
      break;
    case 148:                       // 'idiv'
      consume(148);                 // 'idiv'
      break;
    case 150:                       // 'import'
      consume(150);                 // 'import'
      break;
    case 156:                       // 'instance'
      consume(156);                 // 'instance'
      break;
    case 157:                       // 'intersect'
      consume(157);                 // 'intersect'
      break;
    case 159:                       // 'invoke'
      consume(159);                 // 'invoke'
      break;
    case 160:                       // 'is'
      consume(160);                 // 'is'
      break;
    case 165:                       // 'le'
      consume(165);                 // 'le'
      break;
    case 167:                       // 'let'
      consume(167);                 // 'let'
      break;
    case 170:                       // 'lt'
      consume(170);                 // 'lt'
      break;
    case 173:                       // 'mod'
      consume(173);                 // 'mod'
      break;
    case 175:                       // 'module'
      consume(175);                 // 'module'
      break;
    case 174:                       // 'modify'
      consume(174);                 // 'modify'
      break;
    case 177:                       // 'namespace'
      consume(177);                 // 'namespace'
      break;
    case 179:                       // 'ne'
      consume(179);                 // 'ne'
      break;
    case 189:                       // 'only'
      consume(189);                 // 'only'
      break;
    case 191:                       // 'or'
      consume(191);                 // 'or'
      break;
    case 192:                       // 'order'
      consume(192);                 // 'order'
      break;
    case 193:                       // 'ordered'
      consume(193);                 // 'ordered'
      break;
    case 197:                       // 'parent'
      consume(197);                 // 'parent'
      break;
    case 202:                       // 'preceding'
      consume(202);                 // 'preceding'
      break;
    case 203:                       // 'preceding-sibling'
      consume(203);                 // 'preceding-sibling'
      break;
    case 210:                       // 'return'
      consume(210);                 // 'return'
      break;
    case 213:                       // 'satisfies'
      consume(213);                 // 'satisfies'
      break;
    case 218:                       // 'self'
      consume(218);                 // 'self'
      break;
    case 224:                       // 'some'
      consume(224);                 // 'some'
      break;
    case 225:                       // 'stable'
      consume(225);                 // 'stable'
      break;
    case 226:                       // 'start'
      consume(226);                 // 'start'
      break;
    case 236:                       // 'to'
      consume(236);                 // 'to'
      break;
    case 237:                       // 'transform'
      consume(237);                 // 'transform'
      break;
    case 238:                       // 'treat'
      consume(238);                 // 'treat'
      break;
    case 239:                       // 'try'
      consume(239);                 // 'try'
      break;
    case 243:                       // 'union'
      consume(243);                 // 'union'
      break;
    case 244:                       // 'unordered'
      consume(244);                 // 'unordered'
      break;
    case 245:                       // 'update'
      consume(245);                 // 'update'
      break;
    case 249:                       // 'validate'
      consume(249);                 // 'validate'
      break;
    case 255:                       // 'where'
      consume(255);                 // 'where'
      break;
    case 258:                       // 'with'
      consume(258);                 // 'with'
      break;
    default:
      consume(262);                 // 'xquery'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  private void try_FunctionName()
  {
    switch (l1)
    {
    case 15:                        // QName^Token
      consumeT(15);                 // QName^Token
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consumeT(79);                 // 'ancestor-or-self'
      break;
    case 80:                        // 'and'
      consumeT(80);                 // 'and'
      break;
    case 83:                        // 'as'
      consumeT(83);                 // 'as'
      break;
    case 84:                        // 'ascending'
      consumeT(84);                 // 'ascending'
      break;
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      break;
    case 91:                        // 'case'
      consumeT(91);                 // 'case'
      break;
    case 92:                        // 'cast'
      consumeT(92);                 // 'cast'
      break;
    case 93:                        // 'castable'
      consumeT(93);                 // 'castable'
      break;
    case 95:                        // 'child'
      consumeT(95);                 // 'child'
      break;
    case 96:                        // 'collation'
      consumeT(96);                 // 'collation'
      break;
    case 102:                       // 'copy'
      consumeT(102);                // 'copy'
      break;
    case 104:                       // 'count'
      consumeT(104);                // 'count'
      break;
    case 107:                       // 'declare'
      consumeT(107);                // 'declare'
      break;
    case 108:                       // 'default'
      consumeT(108);                // 'default'
      break;
    case 110:                       // 'descendant'
      consumeT(110);                // 'descendant'
      break;
    case 111:                       // 'descendant-or-self'
      consumeT(111);                // 'descendant-or-self'
      break;
    case 112:                       // 'descending'
      consumeT(112);                // 'descending'
      break;
    case 117:                       // 'div'
      consumeT(117);                // 'div'
      break;
    case 118:                       // 'document'
      consumeT(118);                // 'document'
      break;
    case 121:                       // 'else'
      consumeT(121);                // 'else'
      break;
    case 122:                       // 'empty'
      consumeT(122);                // 'empty'
      break;
    case 125:                       // 'end'
      consumeT(125);                // 'end'
      break;
    case 127:                       // 'eq'
      consumeT(127);                // 'eq'
      break;
    case 128:                       // 'every'
      consumeT(128);                // 'every'
      break;
    case 130:                       // 'except'
      consumeT(130);                // 'except'
      break;
    case 134:                       // 'following'
      consumeT(134);                // 'following'
      break;
    case 135:                       // 'following-sibling'
      consumeT(135);                // 'following-sibling'
      break;
    case 136:                       // 'for'
      consumeT(136);                // 'for'
      break;
    case 143:                       // 'ge'
      consumeT(143);                // 'ge'
      break;
    case 145:                       // 'group'
      consumeT(145);                // 'group'
      break;
    case 147:                       // 'gt'
      consumeT(147);                // 'gt'
      break;
    case 148:                       // 'idiv'
      consumeT(148);                // 'idiv'
      break;
    case 150:                       // 'import'
      consumeT(150);                // 'import'
      break;
    case 156:                       // 'instance'
      consumeT(156);                // 'instance'
      break;
    case 157:                       // 'intersect'
      consumeT(157);                // 'intersect'
      break;
    case 159:                       // 'invoke'
      consumeT(159);                // 'invoke'
      break;
    case 160:                       // 'is'
      consumeT(160);                // 'is'
      break;
    case 165:                       // 'le'
      consumeT(165);                // 'le'
      break;
    case 167:                       // 'let'
      consumeT(167);                // 'let'
      break;
    case 170:                       // 'lt'
      consumeT(170);                // 'lt'
      break;
    case 173:                       // 'mod'
      consumeT(173);                // 'mod'
      break;
    case 175:                       // 'module'
      consumeT(175);                // 'module'
      break;
    case 174:                       // 'modify'
      consumeT(174);                // 'modify'
      break;
    case 177:                       // 'namespace'
      consumeT(177);                // 'namespace'
      break;
    case 179:                       // 'ne'
      consumeT(179);                // 'ne'
      break;
    case 189:                       // 'only'
      consumeT(189);                // 'only'
      break;
    case 191:                       // 'or'
      consumeT(191);                // 'or'
      break;
    case 192:                       // 'order'
      consumeT(192);                // 'order'
      break;
    case 193:                       // 'ordered'
      consumeT(193);                // 'ordered'
      break;
    case 197:                       // 'parent'
      consumeT(197);                // 'parent'
      break;
    case 202:                       // 'preceding'
      consumeT(202);                // 'preceding'
      break;
    case 203:                       // 'preceding-sibling'
      consumeT(203);                // 'preceding-sibling'
      break;
    case 210:                       // 'return'
      consumeT(210);                // 'return'
      break;
    case 213:                       // 'satisfies'
      consumeT(213);                // 'satisfies'
      break;
    case 218:                       // 'self'
      consumeT(218);                // 'self'
      break;
    case 224:                       // 'some'
      consumeT(224);                // 'some'
      break;
    case 225:                       // 'stable'
      consumeT(225);                // 'stable'
      break;
    case 226:                       // 'start'
      consumeT(226);                // 'start'
      break;
    case 236:                       // 'to'
      consumeT(236);                // 'to'
      break;
    case 237:                       // 'transform'
      consumeT(237);                // 'transform'
      break;
    case 238:                       // 'treat'
      consumeT(238);                // 'treat'
      break;
    case 239:                       // 'try'
      consumeT(239);                // 'try'
      break;
    case 243:                       // 'union'
      consumeT(243);                // 'union'
      break;
    case 244:                       // 'unordered'
      consumeT(244);                // 'unordered'
      break;
    case 245:                       // 'update'
      consumeT(245);                // 'update'
      break;
    case 249:                       // 'validate'
      consumeT(249);                // 'validate'
      break;
    case 255:                       // 'where'
      consumeT(255);                // 'where'
      break;
    case 258:                       // 'with'
      consumeT(258);                // 'with'
      break;
    default:
      consumeT(262);                // 'xquery'
    }
  }

  private void parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(64);                // S^WS | '(:' | 'revalidation'
    consume(211);                   // 'revalidation'
    lookahead1W(143);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 229:                       // 'strict'
      consume(229);                 // 'strict'
      break;
    case 164:                       // 'lax'
      consume(164);                 // 'lax'
      break;
    default:
      consume(222);                 // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  private void parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 75:                        // 'after'
      consume(75);                  // 'after'
      break;
    case 88:                        // 'before'
      consume(88);                  // 'before'
      break;
    default:
      if (l1 == 83)                 // 'as'
      {
        consume(83);                // 'as'
        lookahead1W(114);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 133:                   // 'first'
          consume(133);             // 'first'
          break;
        default:
          consume(163);             // 'last'
        }
      }
      lookahead1W(53);              // S^WS | '(:' | 'into'
      consume(158);                 // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  private void try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 75:                        // 'after'
      consumeT(75);                 // 'after'
      break;
    case 88:                        // 'before'
      consumeT(88);                 // 'before'
      break;
    default:
      if (l1 == 83)                 // 'as'
      {
        consumeT(83);               // 'as'
        lookahead1W(114);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 133:                   // 'first'
          consumeT(133);            // 'first'
          break;
        default:
          consumeT(163);            // 'last'
        }
      }
      lookahead1W(53);              // S^WS | '(:' | 'into'
      consumeT(158);                // 'into'
    }
  }

  private void parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    consume(155);                   // 'insert'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consume(184);                 // 'node'
      break;
    default:
      consume(185);                 // 'nodes'
    }
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SourceExpr();
    lookahead1W(148);               // S^WS | '(:' | 'after' | 'as' | 'before' | 'into'
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  private void try_InsertExpr()
  {
    consumeT(155);                  // 'insert'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consumeT(184);                // 'node'
      break;
    default:
      consumeT(185);                // 'nodes'
    }
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_SourceExpr();
    lookahead1W(148);               // S^WS | '(:' | 'after' | 'as' | 'before' | 'into'
    try_InsertExprTargetChoice();
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_TargetExpr();
  }

  private void parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    consume(109);                   // 'delete'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consume(184);                 // 'node'
      break;
    default:
      consume(185);                 // 'nodes'
    }
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  private void try_DeleteExpr()
  {
    consumeT(109);                  // 'delete'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consumeT(184);                // 'node'
      break;
    default:
      consumeT(185);                // 'nodes'
    }
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_TargetExpr();
  }

  private void parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    consume(209);                   // 'replace'
    lookahead1W(124);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 250)                  // 'value'
    {
      consume(250);                 // 'value'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consume(188);                 // 'of'
    }
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consume(184);                   // 'node'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(78);                // S^WS | '(:' | 'with'
    consume(258);                   // 'with'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  private void try_ReplaceExpr()
  {
    consumeT(209);                  // 'replace'
    lookahead1W(124);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 250)                  // 'value'
    {
      consumeT(250);                // 'value'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consumeT(188);                // 'of'
    }
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consumeT(184);                  // 'node'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_TargetExpr();
    lookahead1W(78);                // S^WS | '(:' | 'with'
    consumeT(258);                  // 'with'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    consume(208);                   // 'rename'
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consume(184);                   // 'node'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consume(83);                    // 'as'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  private void try_RenameExpr()
  {
    consumeT(208);                  // 'rename'
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consumeT(184);                  // 'node'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_TargetExpr();
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consumeT(83);                   // 'as'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_NewNameExpr();
  }

  private void parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  private void try_SourceExpr()
  {
    try_ExprSingle();
  }

  private void parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  private void try_TargetExpr()
  {
    try_ExprSingle();
  }

  private void parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  private void try_NewNameExpr()
  {
    try_ExprSingle();
  }

  private void parse_UpdatingFunctionCall()
  {
    eventHandler.startNonterminal("UpdatingFunctionCall", e0);
    consume(159);                   // 'invoke'
    lookahead1W(73);                // S^WS | '(:' | 'updating'
    consume(246);                   // 'updating'
    lookahead1W(234);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_PrimaryExpr();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(239);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("UpdatingFunctionCall", e0);
  }

  private void try_UpdatingFunctionCall()
  {
    consumeT(159);                  // 'invoke'
    lookahead1W(73);                // S^WS | '(:' | 'updating'
    consumeT(246);                  // 'updating'
    lookahead1W(234);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_PrimaryExpr();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(239);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ExprSingle();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_ExprSingle();
      }
    }
    consumeT(37);                   // ')'
  }

  private void parse_CopyModifyExpr()
  {
    eventHandler.startNonterminal("CopyModifyExpr", e0);
    consume(102);                   // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consume(51);                    // ':='
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(95);              // S^WS | '(:' | ',' | 'modify'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | ':='
      consume(51);                  // ':='
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    consume(174);                   // 'modify'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consume(210);                   // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CopyModifyExpr", e0);
  }

  private void try_CopyModifyExpr()
  {
    consumeT(102);                  // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consumeT(51);                   // ':='
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(95);              // S^WS | '(:' | ',' | 'modify'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(223);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | ':='
      consumeT(51);                 // ':='
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_ExprSingle();
    }
    consumeT(174);                  // 'modify'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consumeT(210);                  // 'return'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(201);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'ordered' | 'paragraphs' | 'return' |
                                    // 'same' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 85                  // 'at'
       && l1 != 114                 // 'different'
       && l1 != 116                 // 'distance'
       && l1 != 126                 // 'entire'
       && l1 != 193                 // 'ordered'
       && l1 != 212                 // 'same'
       && l1 != 257)                // 'window'
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  private void try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(201);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'ordered' | 'paragraphs' | 'return' |
                                    // 'same' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 85                  // 'at'
       && l1 != 114                 // 'different'
       && l1 != 116                 // 'distance'
       && l1 != 126                 // 'entire'
       && l1 != 193                 // 'ordered'
       && l1 != 212                 // 'same'
       && l1 != 257)                // 'window'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  private void parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    consume(253);                   // 'weight'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  private void try_FTWeight()
  {
    consumeT(253);                  // 'weight'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  private void parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 141)                // 'ftor'
      {
        break;
      }
      consume(141);                 // 'ftor'
      lookahead1W(154);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  private void try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 141)                // 'ftor'
      {
        break;
      }
      consumeT(141);                // 'ftor'
      lookahead1W(154);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  private void parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 139)                // 'ftand'
      {
        break;
      }
      consume(139);                 // 'ftand'
      lookahead1W(154);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  private void try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 139)                // 'ftand'
      {
        break;
      }
      consumeT(139);                // 'ftand'
      lookahead1W(154);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  private void parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(212);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' |
                                    // 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 186)                // 'not'
      {
        break;
      }
      consume(186);                 // 'not'
      lookahead1W(52);              // S^WS | '(:' | 'in'
      consume(151);                 // 'in'
      lookahead1W(154);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  private void try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(212);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' |
                                    // 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 186)                // 'not'
      {
        break;
      }
      consumeT(186);                // 'not'
      lookahead1W(52);              // S^WS | '(:' | 'in'
      consumeT(151);                // 'in'
      lookahead1W(154);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  private void parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 140)                  // 'ftnot'
    {
      consume(140);                 // 'ftnot'
    }
    lookahead1W(146);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  private void try_FTUnaryNot()
  {
    if (l1 == 140)                  // 'ftnot'
    {
      consumeT(140);                // 'ftnot'
    }
    lookahead1W(146);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  private void parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    if (l1 == 248)                  // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 253)                  // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  private void try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    if (l1 == 248)                  // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 253)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  private void parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 34:                        // '('
      consume(34);                  // '('
      lookahead1W(154);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      consume(37);                  // ')'
      break;
    case 35:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 == 187)                // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  private void try_FTPrimary()
  {
    switch (l1)
    {
    case 34:                        // '('
      consumeT(34);                 // '('
      lookahead1W(154);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      consumeT(37);                 // ')'
      break;
    case 35:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 == 187)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  private void parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(219);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'different' | 'distance' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'paragraphs' | 'phrase' | 'return' |
                                    // 'same' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'using' | 'weight' | 'where' | 'window' |
                                    // 'with' | 'without' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 76                    // 'all'
     || l1 == 81                    // 'any'
     || l1 == 201)                  // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  private void try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(219);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'different' | 'distance' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'paragraphs' | 'phrase' | 'return' |
                                    // 'same' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'using' | 'weight' | 'where' | 'window' |
                                    // 'with' | 'without' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 76                    // 'all'
     || l1 == 81                    // 'any'
     || l1 == 201)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  private void parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 4:                         // StringLiteral
      consume(4);                   // StringLiteral
      break;
    default:
      consume(264);                 // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  private void try_FTWordsValue()
  {
    switch (l1)
    {
    case 4:                         // StringLiteral
      consumeT(4);                  // StringLiteral
      break;
    default:
      consumeT(264);                // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
    }
  }

  private void parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(264);                   // '{'
    lookahead1W(158);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  private void try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(264);                  // '{'
    lookahead1W(158);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 268)                  // '}'
    {
      try_FTSelection();
    }
    consumeT(268);                  // '}'
  }

  private void parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 81:                        // 'any'
      consume(81);                  // 'any'
      lookahead1W(217);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'word' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 == 260)                // 'word'
      {
        consume(260);               // 'word'
      }
      break;
    case 76:                        // 'all'
      consume(76);                  // 'all'
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 261:                     // 'words'
        lookahead2W(215);           // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
        break;
      default:
        lk = l1;
      }
      if (lk == 13061               // 'words' EOF
       || lk == 14085               // 'words' '!='
       || lk == 19205               // 'words' ')'
       || lk == 19717               // 'words' '*'
       || lk == 20229               // 'words' '+'
       || lk == 20741               // 'words' ','
       || lk == 21253               // 'words' '-'
       || lk == 24837               // 'words' ':'
       || lk == 26885               // 'words' ';'
       || lk == 27397               // 'words' '<'
       || lk == 29445               // 'words' '<<'
       || lk == 29957               // 'words' '<='
       || lk == 30981               // 'words' '='
       || lk == 32005               // 'words' '>'
       || lk == 32517               // 'words' '>='
       || lk == 33029               // 'words' '>>'
       || lk == 36101               // 'words' ']'
       || lk == 38661               // 'words' 'after'
       || lk == 41221               // 'words' 'and'
       || lk == 42757               // 'words' 'as'
       || lk == 43269               // 'words' 'ascending'
       || lk == 43781               // 'words' 'at'
       || lk == 45317               // 'words' 'before'
       || lk == 46853               // 'words' 'case'
       || lk == 47365               // 'words' 'cast'
       || lk == 47877               // 'words' 'castable'
       || lk == 49413               // 'words' 'collation'
       || lk == 50949               // 'words' 'contains'
       || lk == 53509               // 'words' 'count'
       || lk == 55557               // 'words' 'default'
       || lk == 57605               // 'words' 'descending'
       || lk == 58629               // 'words' 'different'
       || lk == 59653               // 'words' 'distance'
       || lk == 60165               // 'words' 'div'
       || lk == 62213               // 'words' 'else'
       || lk == 62725               // 'words' 'empty'
       || lk == 64261               // 'words' 'end'
       || lk == 64773               // 'words' 'entire'
       || lk == 65285               // 'words' 'eq'
       || lk == 66821               // 'words' 'except'
       || lk == 69893               // 'words' 'for'
       || lk == 73477               // 'words' 'ge'
       || lk == 74501               // 'words' 'group'
       || lk == 75525               // 'words' 'gt'
       || lk == 76037               // 'words' 'idiv'
       || lk == 80133               // 'words' 'instance'
       || lk == 80645               // 'words' 'intersect'
       || lk == 81157               // 'words' 'into'
       || lk == 82181               // 'words' 'is'
       || lk == 84741               // 'words' 'le'
       || lk == 85765               // 'words' 'let'
       || lk == 87301               // 'words' 'lt'
       || lk == 88837               // 'words' 'mod'
       || lk == 89349               // 'words' 'modify'
       || lk == 91909               // 'words' 'ne'
       || lk == 97029               // 'words' 'only'
       || lk == 98053               // 'words' 'or'
       || lk == 98565               // 'words' 'order'
       || lk == 99077               // 'words' 'ordered'
       || lk == 100613              // 'words' 'paragraphs'
       || lk == 107781              // 'words' 'return'
       || lk == 108805              // 'words' 'same'
       || lk == 109317              // 'words' 'satisfies'
       || lk == 113413              // 'words' 'sentences'
       || lk == 115461              // 'words' 'stable'
       || lk == 115973              // 'words' 'start'
       || lk == 120581              // 'words' 'times'
       || lk == 121093              // 'words' 'to'
       || lk == 121605              // 'words' 'transform'
       || lk == 122117              // 'words' 'treat'
       || lk == 124677              // 'words' 'union'
       || lk == 130821              // 'words' 'where'
       || lk == 131845              // 'words' 'window'
       || lk == 132357              // 'words' 'with'
       || lk == 132869              // 'words' 'without'
       || lk == 133893              // 'words' 'words'
       || lk == 136453              // 'words' '|'
       || lk == 136965              // 'words' '||'
       || lk == 137477              // 'words' '}'
       || lk == 137989)             // 'words' '}`'
      {
        lk = memoized(21, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(261);          // 'words'
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(21, e0, lk);
        }
      }
      if (lk == -1
       || lk == 71429               // 'words' 'ftand'
       || lk == 72453               // 'words' 'ftor'
       || lk == 95493               // 'words' 'not'
       || lk == 96005               // 'words' 'occurs'
       || lk == 127237              // 'words' 'using'
       || lk == 129797)             // 'words' 'weight'
      {
        consume(261);               // 'words'
      }
      break;
    default:
      consume(201);                 // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  private void try_FTAnyallOption()
  {
    switch (l1)
    {
    case 81:                        // 'any'
      consumeT(81);                 // 'any'
      lookahead1W(217);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'word' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 == 260)                // 'word'
      {
        consumeT(260);              // 'word'
      }
      break;
    case 76:                        // 'all'
      consumeT(76);                 // 'all'
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 261:                     // 'words'
        lookahead2W(215);           // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
        break;
      default:
        lk = l1;
      }
      if (lk == 13061               // 'words' EOF
       || lk == 14085               // 'words' '!='
       || lk == 19205               // 'words' ')'
       || lk == 19717               // 'words' '*'
       || lk == 20229               // 'words' '+'
       || lk == 20741               // 'words' ','
       || lk == 21253               // 'words' '-'
       || lk == 24837               // 'words' ':'
       || lk == 26885               // 'words' ';'
       || lk == 27397               // 'words' '<'
       || lk == 29445               // 'words' '<<'
       || lk == 29957               // 'words' '<='
       || lk == 30981               // 'words' '='
       || lk == 32005               // 'words' '>'
       || lk == 32517               // 'words' '>='
       || lk == 33029               // 'words' '>>'
       || lk == 36101               // 'words' ']'
       || lk == 38661               // 'words' 'after'
       || lk == 41221               // 'words' 'and'
       || lk == 42757               // 'words' 'as'
       || lk == 43269               // 'words' 'ascending'
       || lk == 43781               // 'words' 'at'
       || lk == 45317               // 'words' 'before'
       || lk == 46853               // 'words' 'case'
       || lk == 47365               // 'words' 'cast'
       || lk == 47877               // 'words' 'castable'
       || lk == 49413               // 'words' 'collation'
       || lk == 50949               // 'words' 'contains'
       || lk == 53509               // 'words' 'count'
       || lk == 55557               // 'words' 'default'
       || lk == 57605               // 'words' 'descending'
       || lk == 58629               // 'words' 'different'
       || lk == 59653               // 'words' 'distance'
       || lk == 60165               // 'words' 'div'
       || lk == 62213               // 'words' 'else'
       || lk == 62725               // 'words' 'empty'
       || lk == 64261               // 'words' 'end'
       || lk == 64773               // 'words' 'entire'
       || lk == 65285               // 'words' 'eq'
       || lk == 66821               // 'words' 'except'
       || lk == 69893               // 'words' 'for'
       || lk == 73477               // 'words' 'ge'
       || lk == 74501               // 'words' 'group'
       || lk == 75525               // 'words' 'gt'
       || lk == 76037               // 'words' 'idiv'
       || lk == 80133               // 'words' 'instance'
       || lk == 80645               // 'words' 'intersect'
       || lk == 81157               // 'words' 'into'
       || lk == 82181               // 'words' 'is'
       || lk == 84741               // 'words' 'le'
       || lk == 85765               // 'words' 'let'
       || lk == 87301               // 'words' 'lt'
       || lk == 88837               // 'words' 'mod'
       || lk == 89349               // 'words' 'modify'
       || lk == 91909               // 'words' 'ne'
       || lk == 97029               // 'words' 'only'
       || lk == 98053               // 'words' 'or'
       || lk == 98565               // 'words' 'order'
       || lk == 99077               // 'words' 'ordered'
       || lk == 100613              // 'words' 'paragraphs'
       || lk == 107781              // 'words' 'return'
       || lk == 108805              // 'words' 'same'
       || lk == 109317              // 'words' 'satisfies'
       || lk == 113413              // 'words' 'sentences'
       || lk == 115461              // 'words' 'stable'
       || lk == 115973              // 'words' 'start'
       || lk == 120581              // 'words' 'times'
       || lk == 121093              // 'words' 'to'
       || lk == 121605              // 'words' 'transform'
       || lk == 122117              // 'words' 'treat'
       || lk == 124677              // 'words' 'union'
       || lk == 130821              // 'words' 'where'
       || lk == 131845              // 'words' 'window'
       || lk == 132357              // 'words' 'with'
       || lk == 132869              // 'words' 'without'
       || lk == 133893              // 'words' 'words'
       || lk == 136453              // 'words' '|'
       || lk == 136965              // 'words' '||'
       || lk == 137477              // 'words' '}'
       || lk == 137989)             // 'words' '}`'
      {
        lk = memoized(21, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(261);          // 'words'
            memoize(21, e0A, -1);
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(21, e0A, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1
       || lk == 71429               // 'words' 'ftand'
       || lk == 72453               // 'words' 'ftor'
       || lk == 95493               // 'words' 'not'
       || lk == 96005               // 'words' 'occurs'
       || lk == 127237              // 'words' 'using'
       || lk == 129797)             // 'words' 'weight'
      {
        consumeT(261);              // 'words'
      }
      break;
    default:
      consumeT(201);                // 'phrase'
    }
  }

  private void parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    consume(187);                   // 'occurs'
    lookahead1W(141);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    consume(235);                   // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  private void try_FTTimes()
  {
    consumeT(187);                  // 'occurs'
    lookahead1W(141);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    consumeT(235);                  // 'times'
  }

  private void parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 129:                       // 'exactly'
      consume(129);                 // 'exactly'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
      break;
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consume(166);               // 'least'
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        consume(176);               // 'most'
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      consume(137);                 // 'from'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
      consume(236);                 // 'to'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  private void try_FTRange()
  {
    switch (l1)
    {
    case 129:                       // 'exactly'
      consumeT(129);                // 'exactly'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AdditiveExpr();
      break;
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consumeT(166);              // 'least'
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_AdditiveExpr();
        break;
      default:
        consumeT(176);              // 'most'
        lookahead1W(237);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_AdditiveExpr();
      }
      break;
    default:
      consumeT(137);                // 'from'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AdditiveExpr();
      consumeT(236);                // 'to'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AdditiveExpr();
    }
  }

  private void parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 193:                       // 'ordered'
      parse_FTOrder();
      break;
    case 257:                       // 'window'
      parse_FTWindow();
      break;
    case 116:                       // 'distance'
      parse_FTDistance();
      break;
    case 114:                       // 'different'
    case 212:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  private void try_FTPosFilter()
  {
    switch (l1)
    {
    case 193:                       // 'ordered'
      try_FTOrder();
      break;
    case 257:                       // 'window'
      try_FTWindow();
      break;
    case 116:                       // 'distance'
      try_FTDistance();
      break;
    case 114:                       // 'different'
    case 212:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  private void parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    consume(193);                   // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  private void try_FTOrder()
  {
    consumeT(193);                  // 'ordered'
  }

  private void parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    consume(257);                   // 'window'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  private void try_FTWindow()
  {
    consumeT(257);                  // 'window'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_AdditiveExpr();
    try_FTUnit();
  }

  private void parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    consume(116);                   // 'distance'
    lookahead1W(141);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  private void try_FTDistance()
  {
    consumeT(116);                  // 'distance'
    lookahead1W(141);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  private void parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 261:                       // 'words'
      consume(261);                 // 'words'
      break;
    case 221:                       // 'sentences'
      consume(221);                 // 'sentences'
      break;
    default:
      consume(196);                 // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  private void try_FTUnit()
  {
    switch (l1)
    {
    case 261:                       // 'words'
      consumeT(261);                // 'words'
      break;
    case 221:                       // 'sentences'
      consumeT(221);                // 'sentences'
      break;
    default:
      consumeT(196);                // 'paragraphs'
    }
  }

  private void parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 212:                       // 'same'
      consume(212);                 // 'same'
      break;
    default:
      consume(114);                 // 'different'
    }
    lookahead1W(126);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  private void try_FTScope()
  {
    switch (l1)
    {
    case 212:                       // 'same'
      consumeT(212);                // 'same'
      break;
    default:
      consumeT(114);                // 'different'
    }
    lookahead1W(126);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  private void parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 220:                       // 'sentence'
      consume(220);                 // 'sentence'
      break;
    default:
      consume(195);                 // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  private void try_FTBigUnit()
  {
    switch (l1)
    {
    case 220:                       // 'sentence'
      consumeT(220);                // 'sentence'
      break;
    default:
      consumeT(195);                // 'paragraph'
    }
  }

  private void parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(112);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 226:                     // 'start'
        consume(226);               // 'start'
        break;
      default:
        consume(125);               // 'end'
      }
      break;
    default:
      consume(126);                 // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consume(100);                 // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  private void try_FTContent()
  {
    switch (l1)
    {
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(112);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 226:                     // 'start'
        consumeT(226);              // 'start'
        break;
      default:
        consumeT(125);              // 'end'
      }
      break;
    default:
      consumeT(126);                // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consumeT(100);                // 'content'
    }
  }

  private void parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      consume(248);                 // 'using'
      lookahead1W(170);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      whitespace();
      parse_FTMatchOption();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 248)                // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  private void try_FTMatchOptions()
  {
    for (;;)
    {
      consumeT(248);                // 'using'
      lookahead1W(170);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      try_FTMatchOption();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 248)                // 'using'
      {
        break;
      }
    }
  }

  private void parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    switch (l1)
    {
    case 181:                       // 'no'
      lookahead2W(153);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 162:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 256:                       // 'wildcards'
    case 131253:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 234:                       // 'thesaurus'
    case 119989:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 227:                       // 'stemming'
    case 116405:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 113:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 228:                       // 'stop'
    case 116917:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 190:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  private void try_FTMatchOption()
  {
    switch (l1)
    {
    case 181:                       // 'no'
      lookahead2W(153);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 162:                       // 'language'
      try_FTLanguageOption();
      break;
    case 256:                       // 'wildcards'
    case 131253:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 234:                       // 'thesaurus'
    case 119989:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 227:                       // 'stemming'
    case 116405:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 113:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 228:                       // 'stop'
    case 116917:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 190:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  private void parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 91:                        // 'case'
      consume(91);                  // 'case'
      lookahead1W(118);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 154:                     // 'insensitive'
        consume(154);               // 'insensitive'
        break;
      default:
        consume(219);               // 'sensitive'
      }
      break;
    case 169:                       // 'lowercase'
      consume(169);                 // 'lowercase'
      break;
    default:
      consume(247);                 // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  private void try_FTCaseOption()
  {
    switch (l1)
    {
    case 91:                        // 'case'
      consumeT(91);                 // 'case'
      lookahead1W(118);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 154:                     // 'insensitive'
        consumeT(154);              // 'insensitive'
        break;
      default:
        consumeT(219);              // 'sensitive'
      }
      break;
    case 169:                       // 'lowercase'
      consumeT(169);                // 'lowercase'
      break;
    default:
      consumeT(247);                // 'uppercase'
    }
  }

  private void parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    consume(113);                   // 'diacritics'
    lookahead1W(118);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 154:                       // 'insensitive'
      consume(154);                 // 'insensitive'
      break;
    default:
      consume(219);                 // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  private void try_FTDiacriticsOption()
  {
    consumeT(113);                  // 'diacritics'
    lookahead1W(118);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 154:                       // 'insensitive'
      consumeT(154);                // 'insensitive'
      break;
    default:
      consumeT(219);                // 'sensitive'
    }
  }

  private void parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 227:                       // 'stemming'
      consume(227);                 // 'stemming'
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(67);              // S^WS | '(:' | 'stemming'
      consume(227);                 // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  private void try_FTStemOption()
  {
    switch (l1)
    {
    case 227:                       // 'stemming'
      consumeT(227);                // 'stemming'
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(67);              // S^WS | '(:' | 'stemming'
      consumeT(227);                // 'stemming'
    }
  }

  private void parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 234:                       // 'thesaurus'
      consume(234);                 // 'thesaurus'
      lookahead1W(136);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 85:                      // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 108:                     // 'default'
        consume(108);               // 'default'
        break;
      default:
        consume(34);                // '('
        lookahead1W(105);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 85:                    // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          consume(108);             // 'default'
        }
        for (;;)
        {
          lookahead1W(91);          // S^WS | '(:' | ')' | ','
          if (l1 != 40)             // ','
          {
            break;
          }
          consume(40);              // ','
          lookahead1W(34);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        consume(37);                // ')'
      }
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(71);              // S^WS | '(:' | 'thesaurus'
      consume(234);                 // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  private void try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 234:                       // 'thesaurus'
      consumeT(234);                // 'thesaurus'
      lookahead1W(136);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 85:                      // 'at'
        try_FTThesaurusID();
        break;
      case 108:                     // 'default'
        consumeT(108);              // 'default'
        break;
      default:
        consumeT(34);               // '('
        lookahead1W(105);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 85:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          consumeT(108);            // 'default'
        }
        for (;;)
        {
          lookahead1W(91);          // S^WS | '(:' | ')' | ','
          if (l1 != 40)             // ','
          {
            break;
          }
          consumeT(40);             // ','
          lookahead1W(34);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        consumeT(37);               // ')'
      }
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(71);              // S^WS | '(:' | 'thesaurus'
      consumeT(234);                // 'thesaurus'
    }
  }

  private void parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    consume(85);                    // 'at'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(218);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'except' | 'for' | 'from' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'relationship' | 'return' | 'same' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' |
                                    // 'without' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 207)                  // 'relationship'
    {
      consume(207);                 // 'relationship'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'except' | 'for' | 'from' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 85:                        // 'at'
      lookahead2W(151);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 129                   // 'exactly'
     || lk == 137                   // 'from'
     || lk == 85077                 // 'at' 'least'
     || lk == 90197)                // 'at' 'most'
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(55);              // S^WS | '(:' | 'levels'
      consume(168);                 // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  private void try_FTThesaurusID()
  {
    consumeT(85);                   // 'at'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
    lookahead1W(218);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'except' | 'for' | 'from' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'relationship' | 'return' | 'same' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' |
                                    // 'without' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 207)                  // 'relationship'
    {
      consumeT(207);                // 'relationship'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consumeT(4);                  // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'except' | 'for' | 'from' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 85:                        // 'at'
      lookahead2W(151);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 129                   // 'exactly'
     || lk == 137                   // 'from'
     || lk == 85077                 // 'at' 'least'
     || lk == 90197)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(55);              // S^WS | '(:' | 'levels'
      consumeT(168);                // 'levels'
    }
  }

  private void parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 129:                       // 'exactly'
      consume(129);                 // 'exactly'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(1);                   // IntegerLiteral
      break;
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consume(166);               // 'least'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consume(1);                 // IntegerLiteral
        break;
      default:
        consume(176);               // 'most'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consume(1);                 // IntegerLiteral
      }
      break;
    default:
      consume(137);                 // 'from'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(1);                   // IntegerLiteral
      lookahead1W(72);              // S^WS | '(:' | 'to'
      consume(236);                 // 'to'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(1);                   // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  private void try_FTLiteralRange()
  {
    switch (l1)
    {
    case 129:                       // 'exactly'
      consumeT(129);                // 'exactly'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(1);                  // IntegerLiteral
      break;
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consumeT(166);              // 'least'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consumeT(1);                // IntegerLiteral
        break;
      default:
        consumeT(176);              // 'most'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consumeT(1);                // IntegerLiteral
      }
      break;
    default:
      consumeT(137);                // 'from'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(1);                  // IntegerLiteral
      lookahead1W(72);              // S^WS | '(:' | 'to'
      consumeT(236);                // 'to'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(1);                  // IntegerLiteral
    }
  }

  private void parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 228:                       // 'stop'
      consume(228);                 // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consume(261);                 // 'words'
      lookahead1W(136);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 108:                     // 'default'
        consume(108);               // 'default'
        for (;;)
        {
          lookahead1W(214);         // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
          switch (l1)
          {
          case 130:                 // 'except'
          case 243:                 // 'union'
            lookahead2W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            break;
          default:
            lk = l1;
          }
          if (lk == 17538           // 'except' '('
           || lk == 17651           // 'union' '('
           || lk == 43650           // 'except' 'at'
           || lk == 43763)          // 'union' 'at'
          {
            lk = memoized(23, e0);
            if (lk == 0)
            {
              int b0A = b0; int e0A = e0; int l1A = l1;
              int b1A = b1; int e1A = e1; int l2A = l2;
              int b2A = b2; int e2A = e2;
              try
              {
                try_FTStopWordsInclExcl();
                lk = -1;
              }
              catch (ParseException p1A)
              {
                lk = -2;
              }
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              memoize(23, e0, lk);
            }
          }
          if (lk != -1)
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(214);         // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
          switch (l1)
          {
          case 130:                 // 'except'
          case 243:                 // 'union'
            lookahead2W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            break;
          default:
            lk = l1;
          }
          if (lk == 17538           // 'except' '('
           || lk == 17651           // 'union' '('
           || lk == 43650           // 'except' 'at'
           || lk == 43763)          // 'union' 'at'
          {
            lk = memoized(22, e0);
            if (lk == 0)
            {
              int b0A = b0; int e0A = e0; int l1A = l1;
              int b1A = b1; int e1A = e1; int l2A = l2;
              int b2A = b2; int e2A = e2;
              try
              {
                try_FTStopWordsInclExcl();
                lk = -1;
              }
              catch (ParseException p1A)
              {
                lk = -2;
              }
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              memoize(22, e0, lk);
            }
          }
          if (lk != -1)
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(68);              // S^WS | '(:' | 'stop'
      consume(228);                 // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consume(261);                 // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  private void try_FTStopWordOption()
  {
    switch (l1)
    {
    case 228:                       // 'stop'
      consumeT(228);                // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consumeT(261);                // 'words'
      lookahead1W(136);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 108:                     // 'default'
        consumeT(108);              // 'default'
        for (;;)
        {
          lookahead1W(214);         // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
          switch (l1)
          {
          case 130:                 // 'except'
          case 243:                 // 'union'
            lookahead2W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            break;
          default:
            lk = l1;
          }
          if (lk == 17538           // 'except' '('
           || lk == 17651           // 'union' '('
           || lk == 43650           // 'except' 'at'
           || lk == 43763)          // 'union' 'at'
          {
            lk = memoized(23, e0);
            if (lk == 0)
            {
              int b0A = b0; int e0A = e0; int l1A = l1;
              int b1A = b1; int e1A = e1; int l2A = l2;
              int b2A = b2; int e2A = e2;
              try
              {
                try_FTStopWordsInclExcl();
                memoize(23, e0A, -1);
                continue;
              }
              catch (ParseException p1A)
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(23, e0A, -2);
                break;
              }
            }
          }
          if (lk != -1)
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(214);         // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
          switch (l1)
          {
          case 130:                 // 'except'
          case 243:                 // 'union'
            lookahead2W(237);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            break;
          default:
            lk = l1;
          }
          if (lk == 17538           // 'except' '('
           || lk == 17651           // 'union' '('
           || lk == 43650           // 'except' 'at'
           || lk == 43763)          // 'union' 'at'
          {
            lk = memoized(22, e0);
            if (lk == 0)
            {
              int b0A = b0; int e0A = e0; int l1A = l1;
              int b1A = b1; int e1A = e1; int l2A = l2;
              int b2A = b2; int e2A = e2;
              try
              {
                try_FTStopWordsInclExcl();
                memoize(22, e0A, -1);
                continue;
              }
              catch (ParseException p1A)
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(22, e0A, -2);
                break;
              }
            }
          }
          if (lk != -1)
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(68);              // S^WS | '(:' | 'stop'
      consumeT(228);                // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consumeT(261);                // 'words'
    }
  }

  private void parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      break;
    default:
      consume(34);                  // '('
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consume(4);                 // StringLiteral
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  private void try_FTStopWords()
  {
    switch (l1)
    {
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
      break;
    default:
      consumeT(34);                 // '('
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consumeT(4);                  // StringLiteral
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consumeT(4);                // StringLiteral
      }
      consumeT(37);                 // ')'
    }
  }

  private void parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 243:                       // 'union'
      consume(243);                 // 'union'
      break;
    default:
      consume(130);                 // 'except'
    }
    lookahead1W(89);                // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  private void try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 243:                       // 'union'
      consumeT(243);                // 'union'
      break;
    default:
      consumeT(130);                // 'except'
    }
    lookahead1W(89);                // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  private void parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    consume(162);                   // 'language'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  private void try_FTLanguageOption()
  {
    consumeT(162);                  // 'language'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consumeT(4);                    // StringLiteral
  }

  private void parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 256:                       // 'wildcards'
      consume(256);                 // 'wildcards'
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'wildcards'
      consume(256);                 // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  private void try_FTWildCardOption()
  {
    switch (l1)
    {
    case 256:                       // 'wildcards'
      consumeT(256);                // 'wildcards'
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'wildcards'
      consumeT(256);                // 'wildcards'
    }
  }

  private void parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    consume(190);                   // 'option'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  private void try_FTExtensionOption()
  {
    consumeT(190);                  // 'option'
    lookahead1W(223);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consumeT(4);                    // StringLiteral
  }

  private void parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    consume(259);                   // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consume(100);                   // 'content'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  private void try_FTIgnoreOption()
  {
    consumeT(259);                  // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consumeT(100);                  // 'content'
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_UnionExpr();
  }

  private void try_Comment()
  {
    consumeT(36);                   // '(:'
    for (;;)
    {
      lookahead1(81);               // CommentContents | '(:' | ':)'
      if (l1 == 49)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 19:                      // CommentContents
        consumeT(19);               // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    consumeT(49);                   // ':)'
  }

  private void try_Whitespace()
  {
    switch (l1)
    {
    case 18:                        // S^WS
      consumeT(18);                 // S^WS
      break;
    default:
      try_Comment();
    }
  }

  private void parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 14:                        // NCName^Token
      consume(14);                  // NCName^Token
      break;
    case 80:                        // 'and'
      consume(80);                  // 'and'
      break;
    case 83:                        // 'as'
      consume(83);                  // 'as'
      break;
    case 84:                        // 'ascending'
      consume(84);                  // 'ascending'
      break;
    case 91:                        // 'case'
      consume(91);                  // 'case'
      break;
    case 92:                        // 'cast'
      consume(92);                  // 'cast'
      break;
    case 93:                        // 'castable'
      consume(93);                  // 'castable'
      break;
    case 96:                        // 'collation'
      consume(96);                  // 'collation'
      break;
    case 104:                       // 'count'
      consume(104);                 // 'count'
      break;
    case 108:                       // 'default'
      consume(108);                 // 'default'
      break;
    case 112:                       // 'descending'
      consume(112);                 // 'descending'
      break;
    case 117:                       // 'div'
      consume(117);                 // 'div'
      break;
    case 121:                       // 'else'
      consume(121);                 // 'else'
      break;
    case 122:                       // 'empty'
      consume(122);                 // 'empty'
      break;
    case 125:                       // 'end'
      consume(125);                 // 'end'
      break;
    case 127:                       // 'eq'
      consume(127);                 // 'eq'
      break;
    case 130:                       // 'except'
      consume(130);                 // 'except'
      break;
    case 136:                       // 'for'
      consume(136);                 // 'for'
      break;
    case 143:                       // 'ge'
      consume(143);                 // 'ge'
      break;
    case 145:                       // 'group'
      consume(145);                 // 'group'
      break;
    case 147:                       // 'gt'
      consume(147);                 // 'gt'
      break;
    case 148:                       // 'idiv'
      consume(148);                 // 'idiv'
      break;
    case 156:                       // 'instance'
      consume(156);                 // 'instance'
      break;
    case 157:                       // 'intersect'
      consume(157);                 // 'intersect'
      break;
    case 160:                       // 'is'
      consume(160);                 // 'is'
      break;
    case 165:                       // 'le'
      consume(165);                 // 'le'
      break;
    case 167:                       // 'let'
      consume(167);                 // 'let'
      break;
    case 170:                       // 'lt'
      consume(170);                 // 'lt'
      break;
    case 173:                       // 'mod'
      consume(173);                 // 'mod'
      break;
    case 179:                       // 'ne'
      consume(179);                 // 'ne'
      break;
    case 189:                       // 'only'
      consume(189);                 // 'only'
      break;
    case 191:                       // 'or'
      consume(191);                 // 'or'
      break;
    case 192:                       // 'order'
      consume(192);                 // 'order'
      break;
    case 210:                       // 'return'
      consume(210);                 // 'return'
      break;
    case 213:                       // 'satisfies'
      consume(213);                 // 'satisfies'
      break;
    case 225:                       // 'stable'
      consume(225);                 // 'stable'
      break;
    case 226:                       // 'start'
      consume(226);                 // 'start'
      break;
    case 236:                       // 'to'
      consume(236);                 // 'to'
      break;
    case 238:                       // 'treat'
      consume(238);                 // 'treat'
      break;
    case 243:                       // 'union'
      consume(243);                 // 'union'
      break;
    default:
      consume(255);                 // 'where'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  private void try_NCName()
  {
    switch (l1)
    {
    case 14:                        // NCName^Token
      consumeT(14);                 // NCName^Token
      break;
    case 80:                        // 'and'
      consumeT(80);                 // 'and'
      break;
    case 83:                        // 'as'
      consumeT(83);                 // 'as'
      break;
    case 84:                        // 'ascending'
      consumeT(84);                 // 'ascending'
      break;
    case 91:                        // 'case'
      consumeT(91);                 // 'case'
      break;
    case 92:                        // 'cast'
      consumeT(92);                 // 'cast'
      break;
    case 93:                        // 'castable'
      consumeT(93);                 // 'castable'
      break;
    case 96:                        // 'collation'
      consumeT(96);                 // 'collation'
      break;
    case 104:                       // 'count'
      consumeT(104);                // 'count'
      break;
    case 108:                       // 'default'
      consumeT(108);                // 'default'
      break;
    case 112:                       // 'descending'
      consumeT(112);                // 'descending'
      break;
    case 117:                       // 'div'
      consumeT(117);                // 'div'
      break;
    case 121:                       // 'else'
      consumeT(121);                // 'else'
      break;
    case 122:                       // 'empty'
      consumeT(122);                // 'empty'
      break;
    case 125:                       // 'end'
      consumeT(125);                // 'end'
      break;
    case 127:                       // 'eq'
      consumeT(127);                // 'eq'
      break;
    case 130:                       // 'except'
      consumeT(130);                // 'except'
      break;
    case 136:                       // 'for'
      consumeT(136);                // 'for'
      break;
    case 143:                       // 'ge'
      consumeT(143);                // 'ge'
      break;
    case 145:                       // 'group'
      consumeT(145);                // 'group'
      break;
    case 147:                       // 'gt'
      consumeT(147);                // 'gt'
      break;
    case 148:                       // 'idiv'
      consumeT(148);                // 'idiv'
      break;
    case 156:                       // 'instance'
      consumeT(156);                // 'instance'
      break;
    case 157:                       // 'intersect'
      consumeT(157);                // 'intersect'
      break;
    case 160:                       // 'is'
      consumeT(160);                // 'is'
      break;
    case 165:                       // 'le'
      consumeT(165);                // 'le'
      break;
    case 167:                       // 'let'
      consumeT(167);                // 'let'
      break;
    case 170:                       // 'lt'
      consumeT(170);                // 'lt'
      break;
    case 173:                       // 'mod'
      consumeT(173);                // 'mod'
      break;
    case 179:                       // 'ne'
      consumeT(179);                // 'ne'
      break;
    case 189:                       // 'only'
      consumeT(189);                // 'only'
      break;
    case 191:                       // 'or'
      consumeT(191);                // 'or'
      break;
    case 192:                       // 'order'
      consumeT(192);                // 'order'
      break;
    case 210:                       // 'return'
      consumeT(210);                // 'return'
      break;
    case 213:                       // 'satisfies'
      consumeT(213);                // 'satisfies'
      break;
    case 225:                       // 'stable'
      consumeT(225);                // 'stable'
      break;
    case 226:                       // 'start'
      consumeT(226);                // 'start'
      break;
    case 236:                       // 'to'
      consumeT(236);                // 'to'
      break;
    case 238:                       // 'treat'
      consumeT(238);                // 'treat'
      break;
    case 243:                       // 'union'
      consumeT(243);                // 'union'
      break;
    default:
      consumeT(255);                // 'where'
    }
  }

  private void parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_QueryBody();
    eventHandler.endNonterminal("MainModule", e0);
  }

  private void parse_QueryBody()
  {
    eventHandler.startNonterminal("QueryBody", e0);
    parse_Expr();
    eventHandler.endNonterminal("QueryBody", e0);
  }

  private void parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(161);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '}' | '}`'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  private void try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(161);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '}' | '}`'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_ExprSingle();
    }
  }

  private void parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(211);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'sliding' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'tumbling' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 159:                       // 'invoke'
      lookahead2W(204);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'updating' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 167:                       // 'let'
      lookahead2W(210);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 208:                       // 'rename'
      lookahead2W(196);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 209:                       // 'replace'
      lookahead2W(207);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'value' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 239:                       // 'try'
      lookahead2W(205);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 109:                       // 'delete'
    case 155:                       // 'insert'
      lookahead2W(206);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 102:                       // 'copy'
    case 128:                       // 'every'
    case 224:                       // 'some'
      lookahead2W(202);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 149:                       // 'if'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(195);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
    case 16039:                     // 'let' '$'
    case 111271:                    // 'let' 'score'
    case 114312:                    // 'for' 'sliding'
    case 123016:                    // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 16000:                     // 'every' '$'
    case 16096:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 17639:                     // 'switch' '('
      parse_SwitchExpr();
      break;
    case 17650:                     // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    case 17557:                     // 'if' '('
      parse_IfExpr();
      break;
    case 135407:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 94363:                     // 'insert' 'node'
    case 94875:                     // 'insert' 'nodes'
      parse_InsertExpr();
      break;
    case 94317:                     // 'delete' 'node'
    case 94829:                     // 'delete' 'nodes'
      parse_DeleteExpr();
      break;
    case 94416:                     // 'rename' 'node'
      parse_RenameExpr();
      break;
    case 94417:                     // 'replace' 'node'
    case 128209:                    // 'replace' 'value'
      parse_ReplaceExpr();
      break;
    case 126111:                    // 'invoke' 'updating'
      parse_UpdatingFunctionCall();
      break;
    case 15974:                     // 'copy' '$'
      parse_CopyModifyExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  private void try_ExprSingle()
  {
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(211);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'sliding' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'tumbling' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 159:                       // 'invoke'
      lookahead2W(204);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'updating' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 167:                       // 'let'
      lookahead2W(210);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 208:                       // 'rename'
      lookahead2W(196);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 209:                       // 'replace'
      lookahead2W(207);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'value' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 239:                       // 'try'
      lookahead2W(205);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 109:                       // 'delete'
    case 155:                       // 'insert'
      lookahead2W(206);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 102:                       // 'copy'
    case 128:                       // 'every'
    case 224:                       // 'some'
      lookahead2W(202);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 149:                       // 'if'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(195);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
    case 16039:                     // 'let' '$'
    case 111271:                    // 'let' 'score'
    case 114312:                    // 'for' 'sliding'
    case 123016:                    // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 16000:                     // 'every' '$'
    case 16096:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case 17639:                     // 'switch' '('
      try_SwitchExpr();
      break;
    case 17650:                     // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    case 17557:                     // 'if' '('
      try_IfExpr();
      break;
    case 135407:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 94363:                     // 'insert' 'node'
    case 94875:                     // 'insert' 'nodes'
      try_InsertExpr();
      break;
    case 94317:                     // 'delete' 'node'
    case 94829:                     // 'delete' 'nodes'
      try_DeleteExpr();
      break;
    case 94416:                     // 'rename' 'node'
      try_RenameExpr();
      break;
    case 94417:                     // 'replace' 'node'
    case 128209:                    // 'replace' 'value'
      try_ReplaceExpr();
      break;
    case 126111:                    // 'invoke' 'updating'
      try_UpdatingFunctionCall();
      break;
    case 15974:                     // 'copy' '$'
      try_CopyModifyExpr();
      break;
    default:
      try_OrExpr();
    }
  }

  private void parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      consume(6);                   // PredefinedEntityRef
      break;
    case 13:                        // CharRef
      consume(13);                  // CharRef
      break;
    case 265:                       // '{{'
      consume(265);                 // '{{'
      break;
    case 270:                       // '}}'
      consume(270);                 // '}}'
      break;
    default:
      parse_EnclosedExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  private void try_CommonContent()
  {
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      consumeT(6);                  // PredefinedEntityRef
      break;
    case 13:                        // CharRef
      consumeT(13);                 // CharRef
      break;
    case 265:                       // '{{'
      consumeT(265);                // '{{'
      break;
    case 270:                       // '}}'
      consumeT(270);                // '}}'
      break;
    default:
      try_EnclosedExpr();
    }
  }

  private void parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    consume(118);                   // 'document'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  private void try_CompDocConstructor()
  {
    consumeT(118);                  // 'document'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  private void parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    consume(86);                    // 'attribute'
    lookahead1W(227);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  private void try_CompAttrConstructor()
  {
    consumeT(86);                   // 'attribute'
    lookahead1W(227);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  private void parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    consume(206);                   // 'processing-instruction'
    lookahead1W(175);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  private void try_CompPIConstructor()
  {
    consumeT(206);                  // 'processing-instruction'
    lookahead1W(175);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  private void parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    consume(97);                    // 'comment'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  private void try_CompCommentConstructor()
  {
    consumeT(97);                   // 'comment'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  private void parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    consume(232);                   // 'text'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  private void try_CompTextConstructor()
  {
    consumeT(232);                  // 'text'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  private void parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 177:                       // 'namespace'
      lookahead2W(179);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'treat' | 'union' | 'where' | '{'
      break;
    case 206:                       // 'processing-instruction'
      lookahead2W(177);             // NCName^Token | S^WS | '#' | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
      break;
    case 86:                        // 'attribute'
    case 120:                       // 'element'
      lookahead2W(228);             // URIQualifiedName | QName^Token | S^WS | '#' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
      break;
    case 118:                       // 'document'
    case 193:                       // 'ordered'
    case 244:                       // 'unordered'
      lookahead2W(133);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 82:                        // 'array'
    case 97:                        // 'comment'
    case 171:                       // 'map'
    case 232:                       // 'text'
      lookahead2W(84);              // S^WS | '#' | '(:' | '{'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 95:                        // 'child'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 136:                       // 'for'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 179:                       // 'ne'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 218:                       // 'self'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
      parse_Literal();
      break;
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 43:                        // '.'
      parse_ContextItemExpr();
      break;
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
      parse_FunctionCall();
      break;
    case 135361:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 135412:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 109:                       // 'delete'
    case 119:                       // 'document-node'
    case 123:                       // 'empty-sequence'
    case 142:                       // 'function'
    case 149:                       // 'if'
    case 155:                       // 'insert'
    case 161:                       // 'item'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14930:                     // 'array' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14998:                     // 'import' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15019:                     // 'map' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15027:                     // 'ne' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case 135339:                    // 'map' '{'
      parse_MapConstructor();
      break;
    case 69:                        // '['
    case 135250:                    // 'array' '{'
      parse_ArrayConstructor();
      break;
    case 73:                        // '``['
      parse_StringConstructor();
      break;
    case 65:                        // '?'
      parse_UnaryLookup();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  private void try_PrimaryExpr()
  {
    switch (l1)
    {
    case 177:                       // 'namespace'
      lookahead2W(179);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'treat' | 'union' | 'where' | '{'
      break;
    case 206:                       // 'processing-instruction'
      lookahead2W(177);             // NCName^Token | S^WS | '#' | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
      break;
    case 86:                        // 'attribute'
    case 120:                       // 'element'
      lookahead2W(228);             // URIQualifiedName | QName^Token | S^WS | '#' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
      break;
    case 118:                       // 'document'
    case 193:                       // 'ordered'
    case 244:                       // 'unordered'
      lookahead2W(133);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 82:                        // 'array'
    case 97:                        // 'comment'
    case 171:                       // 'map'
    case 232:                       // 'text'
      lookahead2W(84);              // S^WS | '#' | '(:' | '{'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 95:                        // 'child'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 136:                       // 'for'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 179:                       // 'ne'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 218:                       // 'self'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
      try_Literal();
      break;
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 43:                        // '.'
      try_ContextItemExpr();
      break;
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
      try_FunctionCall();
      break;
    case 135361:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 135412:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 109:                       // 'delete'
    case 119:                       // 'document-node'
    case 123:                       // 'empty-sequence'
    case 142:                       // 'function'
    case 149:                       // 'if'
    case 155:                       // 'insert'
    case 161:                       // 'item'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14930:                     // 'array' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14998:                     // 'import' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15019:                     // 'map' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15027:                     // 'ne' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case 135339:                    // 'map' '{'
      try_MapConstructor();
      break;
    case 69:                        // '['
    case 135250:                    // 'array' '{'
      try_ArrayConstructor();
      break;
    case 73:                        // '``['
      try_StringConstructor();
      break;
    case 65:                        // '?'
      try_UnaryLookup();
      break;
    default:
      try_Constructor();
    }
  }

  private void consume(int t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  private void consumeT(int t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  private void skip(int code)
  {
    int b0W = b0; int e0W = e0; int l1W = l1;
    int b1W = b1; int e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  private void whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  private int matchW(int set)
  {
    int code;
    for (;;)
    {
      code = match(set);
      if (code != 18)               // S^WS
      {
        if (code != 36)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  private void lookahead1W(int set)
  {
    if (l1 == 0)
    {
      l1 = matchW(set);
      b1 = begin;
      e1 = end;
    }
  }

  private void lookahead2W(int set)
  {
    if (l2 == 0)
    {
      l2 = matchW(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  private void lookahead1(int set)
  {
    if (l1 == 0)
    {
      l1 = match(set);
      b1 = begin;
      e1 = end;
    }
  }

  private int error(int b, int e, int s, int l, int t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new ParseException(bx, ex, sx, lx, tx);
  }

  private void memoize(int i, int e, int v)
  {
    memo.put((e << 5) + i, v);
  }

  private int memoized(int i, int e)
  {
    Integer v = memo.get((e << 5) + i);
    return v == null ? 0 : v;
  }

  private int lk, b0, e0;
  private int l1, b1, e1;
  private int l2, b2, e2;
  private int bx, ex, sx, lx, tx;
  private EventHandler eventHandler = null;
  private java.util.Map<Integer, Integer> memo = new java.util.HashMap<Integer, Integer>();
  private CharSequence input = null;
  private int size = 0;
  private int begin = 0;
  private int end = 0;

  private int match(int tokenSetId)
  {
    boolean nonbmp = false;
    begin = end;
    int current = end;
    int result = INITIAL[tokenSetId];
    int state = 0;

    for (int code = result & 4095; code != 0; )
    {
      int charclass;
      int c0 = current < size ? input.charAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        int c1 = c0 >> 4;
        charclass = MAP1[(c0 & 15) + MAP1[(c1 & 31) + MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          int c1 = current < size ? input.charAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            nonbmp = true;
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
          }
        }

        int lo = 0, hi = 5;
        for (int m = 3; ; m = (hi + lo) >> 1)
        {
          if (MAP2[m] > c0) {hi = m - 1;}
          else if (MAP2[6 + m] < c0) {lo = m + 1;}
          else {charclass = MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      int i0 = (charclass << 12) + code - 1;
      code = TRANSITION[(i0 & 15) + TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      int c1 = end < size ? input.charAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000)
      {
        --end;
      }
      return error(begin, end, state, -1, -1);
    }
    else if (nonbmp)
    {
      for (int i = result >> 9; i > 0; --i)
      {
        --end;
        int c1 = end < size ? input.charAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000)
        {
          --end;
        }
      }
    }
    else
    {
      end -= result >> 9;
    }

    if (end > size) end = size;
    return (result & 511) - 1;
  }

  private static String[] getTokenSet(int tokenSetId)
  {
    java.util.ArrayList<String> expected = new java.util.ArrayList<>();
    int s = tokenSetId < 0 ? - tokenSetId : INITIAL[tokenSetId] & 4095;
    for (int i = 0; i < 271; i += 32)
    {
      int j = i;
      int i0 = (i >> 5) * 2568 + s - 1;
      int i1 = i0 >> 1;
      int i2 = i1 >> 2;
      int f = EXPECTED[(i0 & 1) + EXPECTED[(i1 & 3) + EXPECTED[(i2 & 3) + EXPECTED[i2 >> 2]]]];
      for ( ; f != 0; f >>>= 1, ++j)
      {
        if ((f & 1) != 0)
        {
          expected.add(TOKEN[j]);
        }
      }
    }
    return expected.toArray(new String[]{});
  }

  private static final int[] MAP0 = new int[128];
  static
  {
    final String s1[] =
    {
      /*   0 */ "70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2",
      /*  34 */ "3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20",
      /*  61 */ "21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30",
      /*  86 */ "30, 30, 36, 30, 30, 37, 38, 39, 38, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 30, 50, 51, 52, 53",
      /* 111 */ "54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 38, 38"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 128; ++i) {MAP0[i] = Integer.parseInt(s2[i]);}
  }

  private static final int[] MAP1 = new int[456];
  static
  {
    final String s1[] =
    {
      /*   0 */ "108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181",
      /*  20 */ "181, 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214",
      /*  40 */ "214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214",
      /*  60 */ "214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214",
      /*  80 */ "214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214",
      /* 100 */ "214, 214, 214, 214, 214, 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415",
      /* 120 */ "339, 331, 339, 331, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339",
      /* 140 */ "440, 440, 440, 440, 440, 440, 440, 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424",
      /* 160 */ "422, 423, 423, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339",
      /* 180 */ "339, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423",
      /* 200 */ "423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 338, 339, 339, 339, 339, 339, 339",
      /* 220 */ "339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339",
      /* 240 */ "339, 339, 339, 339, 339, 339, 423, 70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 269 */ "0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17",
      /* 299 */ "17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33",
      /* 324 */ "30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30",
      /* 349 */ "30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30, 40, 41, 42",
      /* 374 */ "43, 44, 45, 46, 47, 48, 49, 30, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66",
      /* 399 */ "67, 68, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 69, 38",
      /* 424 */ "38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69",
      /* 449 */ "69, 69, 69, 69, 69, 69, 69"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 456; ++i) {MAP1[i] = Integer.parseInt(s2[i]);}
  }

  private static final int[] MAP2 = new int[18];
  static
  {
    final String s1[] =
    {
      /*  0 */ "57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30",
      /* 16 */ "30, 38"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 18; ++i) {MAP2[i] = Integer.parseInt(s2[i]);}
  }

  private static final int[] INITIAL = new int[247];
  static
  {
    final String s1[] =
    {
      /*   0 */ "1, 2, 3, 94212, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27",
      /*  27 */ "28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52",
      /*  52 */ "53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77",
      /*  77 */ "78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102",
      /* 102 */ "103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122",
      /* 122 */ "123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142",
      /* 142 */ "143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162",
      /* 162 */ "163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182",
      /* 182 */ "183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202",
      /* 202 */ "203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222",
      /* 222 */ "223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242",
      /* 242 */ "243, 244, 245, 246, 247"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 247; ++i) {INITIAL[i] = Integer.parseInt(s2[i]);}
  }

  private static final int[] TRANSITION = new int[42727];
  static
  {
    final String s1[] =
    {
      /*     0 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*    14 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*    28 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*    42 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*    56 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*    70 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*    84 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*    98 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   112 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   126 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   140 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   154 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   168 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   182 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   196 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   210 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   224 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   238 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   252 */ "19211, 19211, 19211, 19211, 18176, 18192, 18198, 18198, 18198, 18215, 18198, 18198, 18198, 18199",
      /*   266 */ "18235, 18198, 18198, 18219, 18197, 18244, 18260, 19211, 19211, 20169, 19211, 19211, 42710, 19211",
      /*   280 */ "19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 18296, 18338, 29933",
      /*   294 */ "18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449",
      /*   308 */ "18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491",
      /*   322 */ "18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498",
      /*   336 */ "19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924",
      /*   350 */ "18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430",
      /*   364 */ "19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312",
      /*   378 */ "23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681",
      /*   392 */ "19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729",
      /*   406 */ "27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211",
      /*   420 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   434 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   448 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   462 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   476 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   490 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   504 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 19211, 19211, 19211, 19211, 21020",
      /*   518 */ "19211, 19211, 19211, 21022, 19978, 41899, 19999, 20015, 19211, 27725, 19048, 19211, 19211, 20169",
      /*   532 */ "19211, 19211, 42710, 19211, 20043, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 18667",
      /*   546 */ "19428, 18296, 18338, 29933, 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094",
      /*   560 */ "18429, 19079, 19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211",
      /*   574 */ "19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622",
      /*   588 */ "18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105",
      /*   602 */ "18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005",
      /*   616 */ "19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247",
      /*   630 */ "24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414",
      /*   644 */ "19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647",
      /*   658 */ "19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901",
      /*   672 */ "19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   686 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   700 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   714 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   728 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   742 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   756 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 20060",
      /*   770 */ "19211, 19211, 19211, 20081, 19211, 19211, 37754, 20100, 19978, 20083, 19211, 19211, 23616, 20116",
      /*   784 */ "24880, 19211, 19211, 20169, 19211, 19211, 42710, 20166, 19211, 18433, 26135, 19211, 19211, 20470",
      /*   798 */ "26134, 27495, 19321, 24216, 19320, 20185, 18338, 29933, 18354, 19211, 19211, 23610, 19211, 42351",
      /*   812 */ "18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497",
      /*   826 */ "19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897",
      /*   840 */ "18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269",
      /*   854 */ "19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216",
      /*   868 */ "35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191",
      /*   882 */ "42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358",
      /*   896 */ "31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871",
      /*   910 */ "19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789",
      /*   924 */ "19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   938 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   952 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   966 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   980 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*   994 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1008 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1022 */ "19211, 19211, 20235, 25438, 19211, 19211, 19211, 20281, 19211, 19211, 25439, 21022, 19978, 20302",
      /*  1036 */ "20328, 20344, 25440, 28085, 19048, 19211, 19211, 20169, 20366, 19211, 42710, 20385, 19211, 18433",
      /*  1050 */ "26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 20405, 18338, 29933, 18354, 19211",
      /*  1064 */ "19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 19757",
      /*  1078 */ "19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535",
      /*  1092 */ "18574, 39184, 37440, 23897, 18646, 27498, 20446, 18622, 18641, 18662, 20588, 27498, 19916, 21266",
      /*  1106 */ "18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874",
      /*  1120 */ "18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189",
      /*  1134 */ "42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337",
      /*  1148 */ "18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532",
      /*  1162 */ "28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438",
      /*  1176 */ "27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211",
      /*  1190 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1204 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1218 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1232 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1246 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1260 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1274 */ "19211, 19211, 19211, 19211, 19211, 19211, 19956, 41066, 19211, 19211, 19211, 20462, 19211, 19211",
      /*  1288 */ "41067, 31119, 19978, 19211, 41063, 20486, 18310, 18322, 19048, 19211, 19211, 20169, 19211, 19211",
      /*  1302 */ "42710, 19211, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 18296",
      /*  1316 */ "18338, 29933, 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079",
      /*  1330 */ "19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072",
      /*  1344 */ "28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662",
      /*  1358 */ "20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880",
      /*  1372 */ "18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064",
      /*  1386 */ "19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853",
      /*  1400 */ "19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454",
      /*  1414 */ "19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773",
      /*  1428 */ "19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211",
      /*  1442 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1456 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1470 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1484 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1498 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1512 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1526 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 19211, 19211, 19211",
      /*  1540 */ "19211, 20506, 19211, 19211, 31878, 31882, 19978, 18989, 19211, 19211, 25728, 25740, 19048, 19211",
      /*  1554 */ "19211, 20169, 19211, 19211, 42710, 19211, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495",
      /*  1568 */ "19321, 24216, 19320, 18296, 18338, 29933, 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399",
      /*  1582 */ "18415, 19094, 18429, 19079, 19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834",
      /*  1596 */ "19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498",
      /*  1610 */ "20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777",
      /*  1624 */ "18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962",
      /*  1638 */ "36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228",
      /*  1652 */ "41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393",
      /*  1666 */ "26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564",
      /*  1680 */ "19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844",
      /*  1694 */ "19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1708 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1722 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1736 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1750 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1764 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1778 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1792 */ "19956, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 30416, 20531, 19211, 19211, 19211",
      /*  1806 */ "19211, 29940, 24756, 19211, 19211, 20169, 19211, 19211, 42710, 19211, 19211, 18433, 26135, 19211",
      /*  1820 */ "19211, 20470, 26134, 27495, 19321, 24216, 19320, 18296, 18338, 29933, 18354, 19211, 19211, 23610",
      /*  1834 */ "19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 20552, 19773, 18454",
      /*  1848 */ "18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184",
      /*  1862 */ "37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719",
      /*  1876 */ "18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918",
      /*  1890 */ "18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207",
      /*  1904 */ "19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473",
      /*  1918 */ "19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862",
      /*  1932 */ "34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231",
      /*  1946 */ "19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1960 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1974 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  1988 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2002 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2016 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2030 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2044 */ "19211, 19211, 19211, 19211, 19956, 20609, 19211, 19211, 19211, 20630, 19211, 19211, 38187, 20649",
      /*  2058 */ "20665, 20632, 19211, 19211, 19962, 20686, 32997, 19211, 19211, 20169, 19211, 19211, 42710, 39895",
      /*  2072 */ "19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 20726, 18338, 29933",
      /*  2086 */ "18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449",
      /*  2100 */ "18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491",
      /*  2114 */ "18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498",
      /*  2128 */ "19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924",
      /*  2142 */ "18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430",
      /*  2156 */ "19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312",
      /*  2170 */ "23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681",
      /*  2184 */ "19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729",
      /*  2198 */ "27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211",
      /*  2212 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2226 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2240 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2254 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2268 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2282 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2296 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 20855, 20767, 20767, 20767, 20798",
      /*  2310 */ "20767, 20767, 20866, 20826, 20762, 20812, 20783, 20842, 20882, 20895, 19048, 19211, 19211, 40876",
      /*  2324 */ "19211, 19211, 42710, 19211, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216",
      /*  2338 */ "19320, 18296, 18338, 29933, 20911, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094",
      /*  2352 */ "18429, 19079, 19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211",
      /*  2366 */ "19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622",
      /*  2380 */ "18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105",
      /*  2394 */ "18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005",
      /*  2408 */ "19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247",
      /*  2422 */ "24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414",
      /*  2436 */ "19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647",
      /*  2450 */ "19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901",
      /*  2464 */ "19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2478 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2492 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2506 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2520 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2534 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2548 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 23404",
      /*  2562 */ "19211, 19211, 19211, 20947, 19211, 19211, 26934, 21022, 20989, 20959, 20969, 20973, 42206, 28279",
      /*  2576 */ "19048, 19211, 19211, 20369, 19211, 19211, 42710, 19211, 19211, 18433, 26135, 19211, 19211, 20470",
      /*  2590 */ "26134, 27495, 19321, 24216, 19320, 18296, 18338, 29933, 21010, 19211, 19211, 23610, 19211, 42351",
      /*  2604 */ "18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497",
      /*  2618 */ "19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897",
      /*  2632 */ "18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269",
      /*  2646 */ "19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216",
      /*  2660 */ "35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191",
      /*  2674 */ "42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358",
      /*  2688 */ "31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871",
      /*  2702 */ "19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789",
      /*  2716 */ "19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2730 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2744 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2758 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2772 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2786 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2800 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2814 */ "19211, 19211, 19956, 41150, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 19978, 21038",
      /*  2828 */ "21058, 21042, 21074, 21086, 19048, 19211, 19211, 20169, 19211, 19211, 42710, 19211, 19211, 18433",
      /*  2842 */ "26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 18296, 18338, 29933, 18354, 19211",
      /*  2856 */ "19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 20564",
      /*  2870 */ "19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535",
      /*  2884 */ "18574, 39184, 37440, 23897, 18646, 27498, 20593, 21102, 18641, 18662, 20588, 27498, 19916, 21266",
      /*  2898 */ "18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874",
      /*  2912 */ "18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189",
      /*  2926 */ "42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337",
      /*  2940 */ "18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532",
      /*  2954 */ "28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438",
      /*  2968 */ "27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211",
      /*  2982 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  2996 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3010 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3024 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3038 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3052 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3066 */ "19211, 19211, 19211, 19211, 19211, 19211, 19956, 19211, 19211, 19211, 19211, 21020, 19211, 19211",
      /*  3080 */ "19211, 21022, 19978, 18549, 18554, 18558, 38288, 21121, 19048, 19211, 19211, 20169, 19211, 19211",
      /*  3094 */ "42710, 19211, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 18296",
      /*  3108 */ "18338, 29933, 18354, 19211, 19211, 24413, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079",
      /*  3122 */ "19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072",
      /*  3136 */ "28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662",
      /*  3150 */ "20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880",
      /*  3164 */ "18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064",
      /*  3178 */ "19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853",
      /*  3192 */ "19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454",
      /*  3206 */ "19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773",
      /*  3220 */ "19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211",
      /*  3234 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3248 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3262 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3276 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3290 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3304 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3318 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 23717, 19211, 19211",
      /*  3332 */ "19211, 21172, 21201, 19211, 23719, 21022, 21219, 28658, 21185, 28662, 19211, 28430, 19048, 19211",
      /*  3346 */ "19211, 20169, 19211, 19211, 42710, 19211, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495",
      /*  3360 */ "19321, 24216, 19320, 18296, 18338, 29933, 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399",
      /*  3374 */ "18415, 19094, 18429, 19079, 19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834",
      /*  3388 */ "19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498",
      /*  3402 */ "20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777",
      /*  3416 */ "18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962",
      /*  3430 */ "36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228",
      /*  3444 */ "41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393",
      /*  3458 */ "26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564",
      /*  3472 */ "19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844",
      /*  3486 */ "19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3500 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3514 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3528 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3542 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3556 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3570 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3584 */ "21258, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 19978, 35480, 35485, 35489",
      /*  3598 */ "39333, 21282, 21318, 19211, 19211, 20169, 19211, 19211, 42710, 19211, 19211, 29824, 32442, 19211",
      /*  3612 */ "19211, 25500, 32441, 41308, 33159, 33116, 33158, 21353, 27167, 19211, 20536, 21358, 21374, 24413",
      /*  3626 */ "35316, 25499, 29825, 25047, 19211, 19211, 29820, 33582, 27093, 27093, 27093, 42679, 33114, 33114",
      /*  3640 */ "23993, 40531, 30415, 19211, 19211, 19211, 19211, 35280, 39379, 24336, 29825, 25046, 19211, 25501",
      /*  3654 */ "24989, 27093, 27093, 27093, 26896, 33113, 33114, 33114, 33114, 28310, 41249, 23812, 19211, 19211",
      /*  3668 */ "19211, 19211, 35564, 29823, 25047, 30196, 25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114",
      /*  3682 */ "33114, 40533, 19211, 19211, 19211, 19211, 34379, 29822, 27056, 26007, 41309, 21391, 27093, 25696",
      /*  3696 */ "38376, 33114, 33114, 29434, 19211, 19211, 30261, 30196, 25048, 35938, 27093, 25273, 34908, 33114",
      /*  3710 */ "21409, 29349, 19211, 34359, 21431, 41846, 27093, 23766, 33114, 21509, 19211, 38001, 26008, 33771",
      /*  3724 */ "42137, 41034, 21843, 19211, 24098, 21451, 37193, 19211, 38691, 41240, 24260, 21479, 28548, 21482",
      /*  3738 */ "21498, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3752 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3766 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3780 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3794 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3808 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3822 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  3836 */ "19211, 19211, 19211, 19211, 19956, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21596",
      /*  3850 */ "19978, 19211, 19211, 19211, 41212, 21612, 19048, 19211, 19211, 20169, 19211, 19211, 19940, 19211",
      /*  3864 */ "19211, 29824, 32442, 19211, 19211, 25500, 32441, 41308, 33159, 33116, 21648, 21353, 19211, 19211",
      /*  3878 */ "20536, 19211, 19211, 23610, 19211, 25499, 29825, 25047, 19211, 19211, 29820, 33582, 27093, 27093",
      /*  3892 */ "27093, 42679, 33114, 33114, 33115, 40531, 30415, 19211, 19211, 19211, 19211, 35280, 19211, 21692",
      /*  3906 */ "29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093, 26896, 33113, 33114, 33114, 33114, 28310",
      /*  3920 */ "30415, 19211, 19211, 19211, 19211, 19211, 19211, 29823, 25047, 30196, 25653, 27093, 27093, 27093",
      /*  3934 */ "25591, 34909, 33114, 33114, 33114, 40533, 19211, 19211, 19211, 19211, 19211, 29822, 27056, 26007",
      /*  3948 */ "41309, 27093, 27093, 25696, 33114, 33114, 33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938",
      /*  3962 */ "27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415",
      /*  3976 */ "19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592",
      /*  3990 */ "41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211",
      /*  4004 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4018 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4032 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4046 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4060 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4074 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4088 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 20260, 19211, 19211, 19211, 21020",
      /*  4102 */ "19211, 19211, 19211, 21022, 19978, 36840, 21665, 36854, 20265, 21675, 19048, 19211, 19211, 20169",
      /*  4116 */ "19211, 19211, 42710, 19211, 21691, 18433, 21708, 19211, 19211, 20470, 26134, 27495, 19321, 24216",
      /*  4130 */ "19320, 18296, 18338, 29933, 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094",
      /*  4144 */ "18429, 19079, 19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211",
      /*  4158 */ "19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622",
      /*  4172 */ "18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105",
      /*  4186 */ "18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005",
      /*  4200 */ "19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247",
      /*  4214 */ "24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414",
      /*  4228 */ "19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647",
      /*  4242 */ "19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901",
      /*  4256 */ "19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4270 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4284 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4298 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4312 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4326 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4340 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 21728",
      /*  4354 */ "19211, 19211, 19211, 21020, 19211, 19211, 19211, 21747, 19978, 21763, 19211, 19211, 23955, 21784",
      /*  4368 */ "23229, 19211, 19211, 20169, 19211, 19211, 29640, 19211, 19211, 29824, 32442, 19211, 19211, 25500",
      /*  4382 */ "32441, 41308, 33159, 33116, 21833, 21353, 19211, 19211, 20536, 19211, 19211, 41467, 19211, 25499",
      /*  4396 */ "29825, 25047, 19211, 19211, 29820, 33582, 27093, 27093, 27093, 42679, 33114, 33114, 33115, 40531",
      /*  4410 */ "37015, 19211, 19211, 19211, 19211, 34341, 21868, 21692, 29825, 25046, 19211, 25501, 24989, 27093",
      /*  4424 */ "27093, 27093, 26896, 33113, 33114, 33114, 33114, 28310, 21887, 19211, 19211, 19211, 19211, 21580",
      /*  4438 */ "19211, 29823, 25047, 30196, 25653, 27093, 27093, 27093, 25785, 34909, 33114, 33114, 33114, 28312",
      /*  4452 */ "21895, 19211, 19211, 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093, 21912, 33114, 33114",
      /*  4466 */ "33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093, 21947, 33114, 40569, 30415",
      /*  4480 */ "19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114",
      /*  4494 */ "21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431",
      /*  4508 */ "27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4522 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4536 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4550 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4564 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4578 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4592 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4606 */ "19211, 19211, 19956, 37064, 19211, 19211, 19211, 21967, 21985, 19211, 19398, 21022, 22006, 41536",
      /*  4620 */ "22043, 22059, 19211, 28744, 38269, 19211, 19211, 40951, 22105, 19211, 42710, 19211, 19211, 18433",
      /*  4634 */ "26135, 19211, 19211, 20470, 26134, 28866, 22775, 22365, 22734, 22659, 18338, 29933, 22124, 19211",
      /*  4648 */ "19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 22159, 22175, 22191, 22221, 22233",
      /*  4662 */ "35197, 22261, 22391, 22866, 22709, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535",
      /*  4676 */ "18574, 39184, 18519, 22593, 22301, 28869, 22317, 22362, 22381, 22830, 22525, 22915, 23119, 21266",
      /*  4690 */ "18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 22415, 22441, 22456, 22472, 22972, 22488",
      /*  4704 */ "22273, 22517, 22541, 22868, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 22582, 22609",
      /*  4718 */ "22205, 22625, 23051, 22645, 22784, 22700, 41353, 19247, 24527, 39853, 19266, 22726, 22750, 22800",
      /*  4732 */ "35172, 23205, 22816, 22556, 31543, 19393, 26121, 22852, 22765, 22884, 22900, 22926, 19486, 19532",
      /*  4746 */ "28133, 35141, 22942, 35186, 22245, 19564, 22958, 22988, 22285, 28773, 23004, 23020, 28863, 22836",
      /*  4760 */ "22425, 22399, 23036, 22501, 23067, 23106, 23135, 23190, 23221, 19211, 19211, 19211, 19211, 19211",
      /*  4774 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4788 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4802 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4816 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4830 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4844 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  4858 */ "19211, 19211, 19211, 19211, 19211, 19211, 19956, 21203, 19211, 19211, 19211, 23245, 23256, 19211",
      /*  4872 */ "19211, 21022, 23279, 27930, 23320, 23324, 19211, 29248, 19048, 19211, 19211, 20169, 19211, 19211",
      /*  4886 */ "42710, 19211, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 18296",
      /*  4900 */ "18338, 29933, 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079",
      /*  4914 */ "19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072",
      /*  4928 */ "23340, 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662",
      /*  4942 */ "20588, 27498, 23367, 21266, 18683, 18719, 18754, 29357, 19211, 18777, 18814, 28105, 18849, 18880",
      /*  4956 */ "18902, 18924, 18946, 18874, 18896, 18918, 18940, 21105, 23383, 18962, 36826, 19005, 19021, 19064",
      /*  4970 */ "19132, 37430, 19171, 19189, 42450, 23420, 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853",
      /*  4984 */ "19266, 19312, 23468, 19337, 23457, 23473, 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454",
      /*  4998 */ "19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773",
      /*  5012 */ "19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211",
      /*  5026 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5040 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5054 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5068 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5082 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5096 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5110 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 19211, 19211, 19211",
      /*  5124 */ "19211, 21020, 19211, 19211, 19211, 19211, 31492, 19146, 19151, 19155, 41789, 23489, 19048, 19211",
      /*  5138 */ "19211, 20169, 19211, 19211, 42710, 19211, 19211, 18433, 23549, 19211, 19211, 20470, 26134, 27495",
      /*  5152 */ "19321, 24216, 23570, 18296, 18338, 29933, 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399",
      /*  5166 */ "18415, 19094, 18429, 19079, 19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834",
      /*  5180 */ "19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498",
      /*  5194 */ "20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777",
      /*  5208 */ "18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962",
      /*  5222 */ "36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228",
      /*  5236 */ "41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393",
      /*  5250 */ "26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564",
      /*  5264 */ "19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844",
      /*  5278 */ "19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5292 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5306 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5320 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5334 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5348 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5362 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5376 */ "23596, 19211, 19630, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 19978, 19606, 23632, 19619",
      /*  5390 */ "19211, 32109, 20515, 19211, 19211, 20169, 19211, 19211, 42710, 19211, 19211, 18433, 23648, 19211",
      /*  5404 */ "19211, 20470, 26134, 27495, 19321, 24216, 23671, 18296, 18338, 29933, 18354, 19211, 19211, 23610",
      /*  5418 */ "19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 19757, 19773, 18454",
      /*  5432 */ "18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184",
      /*  5446 */ "37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719",
      /*  5460 */ "18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918",
      /*  5474 */ "18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207",
      /*  5488 */ "19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473",
      /*  5502 */ "19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862",
      /*  5516 */ "34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231",
      /*  5530 */ "19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5544 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5558 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5572 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5586 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5600 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5614 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5628 */ "19211, 19211, 19211, 19211, 23697, 19691, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022",
      /*  5642 */ "19978, 19819, 19824, 19828, 19696, 34120, 23735, 19211, 19211, 20169, 19211, 19211, 42710, 19211",
      /*  5656 */ "19211, 18433, 18791, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 19677, 18338, 29933",
      /*  5670 */ "18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449",
      /*  5684 */ "18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491",
      /*  5698 */ "18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498",
      /*  5712 */ "19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924",
      /*  5726 */ "18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430",
      /*  5740 */ "19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312",
      /*  5754 */ "23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681",
      /*  5768 */ "19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729",
      /*  5782 */ "27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211",
      /*  5796 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5810 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5824 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5838 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5852 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5866 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  5880 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23783, 19211, 19211, 19211, 19211, 23799",
      /*  5894 */ "19211, 19211, 19211, 21022, 19978, 24051, 18271, 18279, 41971, 23834, 19048, 19211, 19211, 20169",
      /*  5908 */ "19211, 19211, 42710, 19211, 23870, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 23580",
      /*  5922 */ "23887, 18296, 18338, 29933, 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094",
      /*  5936 */ "18429, 19079, 19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211",
      /*  5950 */ "19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622",
      /*  5964 */ "18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105",
      /*  5978 */ "18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005",
      /*  5992 */ "19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247",
      /*  6006 */ "24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414",
      /*  6020 */ "19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647",
      /*  6034 */ "19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901",
      /*  6048 */ "19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6062 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6076 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6090 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6104 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6118 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6132 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 19211",
      /*  6146 */ "19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 19978, 19211, 19211, 19211, 18703, 23913",
      /*  6160 */ "19048, 19211, 19211, 20169, 19211, 19211, 42710, 19211, 19211, 18433, 26135, 19211, 19211, 20470",
      /*  6174 */ "26134, 27495, 19321, 24216, 19320, 18296, 18338, 29933, 18354, 19211, 19211, 23610, 19211, 42351",
      /*  6188 */ "18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497",
      /*  6202 */ "19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897",
      /*  6216 */ "18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269",
      /*  6230 */ "19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216",
      /*  6244 */ "35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191",
      /*  6258 */ "42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358",
      /*  6272 */ "31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871",
      /*  6286 */ "19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789",
      /*  6300 */ "19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6314 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6328 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6342 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6356 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6370 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6384 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6398 */ "19211, 19211, 23949, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 23971, 27057",
      /*  6412 */ "19211, 28032, 37207, 21463, 18761, 19211, 19211, 20169, 19211, 19211, 19211, 19211, 19211, 29824",
      /*  6426 */ "32442, 19211, 19211, 25500, 32441, 41308, 33159, 33116, 33158, 21353, 19211, 19211, 20536, 19211",
      /*  6440 */ "19211, 19211, 19211, 25499, 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257",
      /*  6454 */ "33114, 33114, 33115, 40531, 30415, 19211, 19211, 19211, 19211, 19211, 25179, 21692, 29825, 25046",
      /*  6468 */ "19211, 25501, 24989, 27093, 27093, 27093, 32390, 23992, 33114, 33114, 33114, 28310, 32988, 19211",
      /*  6482 */ "19211, 19211, 19211, 21580, 19211, 29823, 25047, 30196, 25653, 27093, 27093, 27093, 25591, 34909",
      /*  6496 */ "33114, 33114, 33114, 28312, 21895, 19211, 19211, 19211, 24009, 29822, 27056, 26007, 41309, 27093",
      /*  6510 */ "27093, 30763, 33114, 33114, 33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093",
      /*  6524 */ "21947, 33114, 40569, 30415, 19211, 42591, 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211",
      /*  6538 */ "26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592",
      /*  6552 */ "28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211",
      /*  6566 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6580 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6594 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6608 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6622 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6636 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6650 */ "19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211, 19211, 21020, 19211, 19211",
      /*  6664 */ "19211, 21022, 23971, 27057, 19211, 28032, 37207, 21463, 18761, 19211, 19211, 20169, 19211, 19211",
      /*  6678 */ "19211, 19211, 19211, 29824, 32442, 19211, 19211, 25500, 32441, 41308, 33159, 33116, 33158, 21353",
      /*  6692 */ "19211, 19211, 20536, 19211, 19211, 19211, 19211, 25499, 29825, 25047, 19211, 19211, 29820, 42499",
      /*  6706 */ "27093, 27093, 27093, 32257, 33114, 33114, 33115, 40531, 30415, 19211, 19211, 19211, 19211, 19211",
      /*  6720 */ "25179, 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093, 32390, 23992, 33114, 33114",
      /*  6734 */ "33114, 28310, 32988, 19211, 19211, 19211, 19211, 21580, 19211, 29823, 25047, 30196, 25653, 27093",
      /*  6748 */ "27093, 27093, 25591, 34909, 33114, 33114, 33114, 28312, 21895, 19211, 19211, 19211, 19211, 29822",
      /*  6762 */ "27056, 26007, 41309, 27093, 27093, 30763, 33114, 33114, 33114, 29434, 19211, 19211, 19211, 30196",
      /*  6776 */ "25048, 35938, 27093, 27093, 21947, 33114, 40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766",
      /*  6790 */ "33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211",
      /*  6804 */ "23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211",
      /*  6818 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6832 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6846 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6860 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6874 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6888 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  6902 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211",
      /*  6916 */ "19211, 21020, 19211, 19211, 19211, 21022, 23971, 27057, 19211, 28032, 37207, 21463, 18761, 19211",
      /*  6930 */ "19211, 20169, 19211, 19211, 19211, 19211, 19211, 29824, 32442, 19211, 19211, 25500, 32441, 41308",
      /*  6944 */ "33159, 33116, 33158, 21353, 19211, 19211, 20536, 19211, 19211, 19211, 19211, 25499, 29825, 25047",
      /*  6958 */ "19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257, 33114, 33114, 33115, 40531, 30415, 19211",
      /*  6972 */ "19211, 19211, 19211, 19211, 24031, 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093",
      /*  6986 */ "32390, 23992, 33114, 33114, 33114, 28310, 32988, 19211, 19211, 19211, 19211, 21580, 19211, 29823",
      /*  7000 */ "25047, 30196, 25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 28312, 21895, 19211",
      /*  7014 */ "19211, 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093, 30763, 33114, 33114, 33114, 29434",
      /*  7028 */ "19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093, 21947, 33114, 40569, 30415, 19211, 19211",
      /*  7042 */ "25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211",
      /*  7056 */ "24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525",
      /*  7070 */ "21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7084 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7098 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7112 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7126 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7140 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7154 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7168 */ "23949, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 23971, 27057, 19211, 28032",
      /*  7182 */ "37207, 21463, 18761, 19211, 19211, 20169, 19211, 19211, 19211, 19211, 19211, 29824, 32442, 19211",
      /*  7196 */ "19211, 25500, 32441, 41308, 33159, 33116, 33158, 21353, 19211, 19211, 20536, 19211, 19211, 19211",
      /*  7210 */ "19211, 25499, 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257, 33114, 33114",
      /*  7224 */ "33115, 40531, 30415, 19211, 19211, 19211, 19211, 19211, 25179, 21692, 29825, 25046, 19211, 25501",
      /*  7238 */ "24989, 27093, 27093, 27093, 32390, 23992, 33114, 33114, 33114, 28310, 32988, 19211, 19211, 19211",
      /*  7252 */ "19211, 21580, 24067, 29823, 25047, 30196, 25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114",
      /*  7266 */ "33114, 28312, 21895, 19211, 19211, 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093, 30763",
      /*  7280 */ "33114, 33114, 33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093, 21947, 33114",
      /*  7294 */ "40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756",
      /*  7308 */ "27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482",
      /*  7322 */ "23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7336 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7350 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7364 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7378 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7392 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7406 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7420 */ "19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022",
      /*  7434 */ "23971, 27057, 19211, 28032, 37207, 21463, 18761, 19211, 19211, 20169, 19211, 19211, 27145, 19211",
      /*  7448 */ "19211, 29824, 32442, 19211, 19211, 25500, 32441, 41308, 33159, 33116, 33158, 21353, 19211, 19211",
      /*  7462 */ "20536, 19211, 19211, 27149, 19211, 25499, 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093",
      /*  7476 */ "27093, 32257, 33114, 33114, 33115, 40531, 30415, 19211, 19211, 19211, 19211, 19211, 25179, 21692",
      /*  7490 */ "29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093, 32390, 23992, 33114, 33114, 33114, 28310",
      /*  7504 */ "32988, 19211, 19211, 19211, 19211, 21580, 19211, 29823, 25047, 30196, 25653, 27093, 27093, 27093",
      /*  7518 */ "25591, 34909, 33114, 33114, 33114, 28312, 21895, 19211, 19211, 19211, 19211, 29822, 27056, 26007",
      /*  7532 */ "41309, 27093, 27093, 30763, 33114, 33114, 33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938",
      /*  7546 */ "27093, 27093, 21947, 33114, 40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415",
      /*  7560 */ "19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592",
      /*  7574 */ "41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211",
      /*  7588 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7602 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7616 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7630 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7644 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7658 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7672 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211, 19211, 21020",
      /*  7686 */ "19211, 19211, 19211, 21022, 23971, 27057, 19211, 28032, 37207, 21463, 18761, 19211, 19211, 20169",
      /*  7700 */ "19211, 19211, 19211, 19211, 19211, 29824, 32442, 19211, 19211, 25500, 32441, 41308, 33159, 33116",
      /*  7714 */ "33158, 21353, 19211, 19211, 20536, 19211, 19211, 19211, 19211, 25499, 29825, 25047, 19211, 19211",
      /*  7728 */ "29820, 42499, 27093, 27093, 27093, 32257, 33114, 33114, 33115, 40531, 30415, 19211, 19211, 19211",
      /*  7742 */ "19211, 19211, 19211, 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093, 32390, 23992",
      /*  7756 */ "33114, 33114, 33114, 28310, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 29823, 25047, 30196",
      /*  7770 */ "25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 40533, 19211, 19211, 19211, 19211",
      /*  7784 */ "19211, 29822, 27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114, 33114, 29434, 19211, 19211",
      /*  7798 */ "19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211, 25500, 41846",
      /*  7812 */ "27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764",
      /*  7826 */ "29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561",
      /*  7840 */ "30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7854 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7868 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7882 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7896 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7910 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  7924 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211",
      /*  7938 */ "19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 23971, 27057, 19211, 28032, 37207, 21463",
      /*  7952 */ "18761, 19211, 19211, 20169, 19211, 19211, 19211, 19211, 19211, 29824, 32442, 19211, 19211, 25500",
      /*  7966 */ "32441, 41308, 33159, 33116, 33158, 21575, 19211, 19211, 20536, 19211, 19211, 19211, 19211, 25499",
      /*  7980 */ "29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257, 33114, 33114, 33115, 40531",
      /*  7994 */ "30415, 19211, 19211, 19211, 19211, 19211, 19211, 21692, 29825, 25046, 19211, 25501, 24989, 27093",
      /*  8008 */ "27093, 27093, 32390, 23992, 33114, 33114, 33114, 28310, 30415, 19211, 19211, 19211, 19211, 19211",
      /*  8022 */ "19211, 29823, 25047, 30196, 25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 40533",
      /*  8036 */ "19211, 19211, 19211, 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114",
      /*  8050 */ "33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415",
      /*  8064 */ "19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114",
      /*  8078 */ "21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431",
      /*  8092 */ "27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8106 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8120 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8134 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8148 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8162 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8176 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8190 */ "19211, 19211, 23949, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 23971, 27057",
      /*  8204 */ "19211, 28032, 37207, 34180, 18761, 19211, 19211, 20169, 19211, 19211, 19211, 19211, 19211, 29824",
      /*  8218 */ "32442, 19211, 19211, 25500, 32441, 41308, 33159, 33116, 33158, 21353, 19211, 19211, 20536, 19211",
      /*  8232 */ "19211, 19211, 19211, 25499, 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257",
      /*  8246 */ "33114, 33114, 33115, 40531, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 21692, 29825, 25046",
      /*  8260 */ "19211, 25501, 24989, 27093, 27093, 27093, 32390, 23992, 33114, 33114, 33114, 28310, 30415, 19211",
      /*  8274 */ "19211, 19211, 19211, 19211, 19211, 29823, 25047, 30196, 25653, 27093, 27093, 27093, 25591, 34909",
      /*  8288 */ "33114, 33114, 33114, 40533, 19211, 19211, 19211, 19211, 19211, 29822, 27056, 26007, 41309, 27093",
      /*  8302 */ "27093, 25696, 33114, 33114, 33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093",
      /*  8316 */ "34908, 33114, 40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211",
      /*  8330 */ "26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592",
      /*  8344 */ "28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211",
      /*  8358 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8372 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8386 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8400 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8414 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8428 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8442 */ "19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211, 19211, 21020, 19211, 19211",
      /*  8456 */ "19211, 21022, 24085, 27057, 19211, 28032, 37207, 21463, 18761, 19211, 19211, 20169, 19211, 19211",
      /*  8470 */ "19211, 19211, 19211, 29824, 32442, 19211, 19211, 25500, 32441, 41308, 33159, 33116, 33158, 21353",
      /*  8484 */ "19211, 19211, 20536, 19211, 19211, 19211, 27800, 25499, 29825, 25047, 19211, 19211, 29820, 42499",
      /*  8498 */ "27093, 27093, 27093, 32257, 33114, 33114, 33115, 40531, 30415, 19211, 19211, 19211, 19211, 19211",
      /*  8512 */ "19211, 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093, 32390, 23992, 33114, 33114",
      /*  8526 */ "33114, 28310, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 29823, 25047, 30196, 25653, 27093",
      /*  8540 */ "27093, 27093, 25591, 34909, 33114, 33114, 33114, 40533, 19211, 19211, 19211, 19211, 19211, 29822",
      /*  8554 */ "27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114, 33114, 29434, 19211, 19211, 19211, 30196",
      /*  8568 */ "25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766",
      /*  8582 */ "33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211",
      /*  8596 */ "23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211",
      /*  8610 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8624 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8638 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8652 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8666 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8680 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8694 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211",
      /*  8708 */ "19211, 21020, 19211, 19211, 19211, 21022, 23971, 27057, 19211, 24122, 24138, 24150, 18761, 19211",
      /*  8722 */ "19211, 20169, 19211, 19211, 19211, 19211, 19211, 29824, 32442, 19211, 19211, 25500, 32441, 41308",
      /*  8736 */ "33159, 33116, 33158, 21353, 19211, 19211, 20536, 19211, 19211, 19211, 19211, 25499, 29825, 25047",
      /*  8750 */ "19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257, 33114, 33114, 33115, 40531, 30415, 19211",
      /*  8764 */ "19211, 19211, 19211, 19211, 19211, 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093",
      /*  8778 */ "32390, 23992, 33114, 33114, 33114, 28310, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 29823",
      /*  8792 */ "25047, 30196, 25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 40533, 19211, 19211",
      /*  8806 */ "19211, 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114, 33114, 29434",
      /*  8820 */ "19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211",
      /*  8834 */ "25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211",
      /*  8848 */ "24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525",
      /*  8862 */ "21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8876 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8890 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8904 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8918 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8932 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8946 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  8960 */ "23949, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 23971, 27057, 19211, 28032",
      /*  8974 */ "37207, 21463, 18761, 19211, 19211, 20169, 19211, 19211, 19211, 19211, 19211, 29824, 32442, 19211",
      /*  8988 */ "19211, 25500, 32441, 41308, 33159, 33116, 33158, 21353, 19211, 19211, 20536, 19211, 19211, 19211",
      /*  9002 */ "19211, 25499, 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257, 33114, 33114",
      /*  9016 */ "33115, 40531, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 21692, 29825, 25046, 19211, 25501",
      /*  9030 */ "24989, 27093, 27093, 27093, 32390, 23992, 33114, 33114, 33114, 28310, 30415, 19211, 19211, 19211",
      /*  9044 */ "19211, 19211, 19211, 29823, 25047, 30196, 25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114",
      /*  9058 */ "33114, 40533, 19211, 19211, 19211, 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093, 25696",
      /*  9072 */ "33114, 33114, 33114, 29434, 19211, 19211, 36308, 30196, 25048, 35938, 27093, 27093, 34908, 33114",
      /*  9086 */ "40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756",
      /*  9100 */ "27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482",
      /*  9114 */ "23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9128 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9142 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9156 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9170 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9184 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9198 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9212 */ "19211, 19211, 19211, 19211, 24166, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022",
      /*  9226 */ "23971, 27057, 19211, 28032, 37207, 21463, 18761, 19211, 19211, 20169, 19211, 19211, 19211, 19211",
      /*  9240 */ "19211, 29824, 32442, 19211, 19211, 25500, 32441, 41308, 33159, 33116, 33158, 21353, 19211, 19211",
      /*  9254 */ "20536, 19211, 19211, 19211, 19211, 25499, 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093",
      /*  9268 */ "27093, 32257, 33114, 33114, 33115, 40531, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 21692",
      /*  9282 */ "29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093, 32390, 23992, 33114, 33114, 33114, 28310",
      /*  9296 */ "30415, 19211, 19211, 19211, 19211, 19211, 19211, 29823, 25047, 30196, 25653, 27093, 27093, 27093",
      /*  9310 */ "25591, 34909, 33114, 33114, 33114, 40533, 19211, 19211, 19211, 19211, 19211, 29822, 27056, 26007",
      /*  9324 */ "41309, 27093, 27093, 25696, 33114, 33114, 33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938",
      /*  9338 */ "27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415",
      /*  9352 */ "19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592",
      /*  9366 */ "41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211",
      /*  9380 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9394 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9408 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9422 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9436 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9450 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9464 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 19211, 19211, 19211, 19211, 21020",
      /*  9478 */ "19211, 19211, 19211, 21022, 19978, 20199, 24188, 20213, 42018, 24198, 19048, 19211, 19211, 20169",
      /*  9492 */ "19211, 19211, 42710, 19211, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216",
      /*  9506 */ "19320, 18296, 18338, 29933, 18354, 19211, 19211, 23610, 29994, 42351, 18383, 18399, 18415, 19094",
      /*  9520 */ "18429, 19079, 19768, 18449, 18470, 19757, 19773, 18454, 18475, 24214, 19210, 38834, 19211, 19211",
      /*  9534 */ "19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622",
      /*  9548 */ "18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105",
      /*  9562 */ "18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005",
      /*  9576 */ "19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247",
      /*  9590 */ "24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414",
      /*  9604 */ "19465, 19454, 19470, 23681, 19486, 24232, 28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647",
      /*  9618 */ "19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901",
      /*  9632 */ "19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9646 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9660 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9674 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9688 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9702 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9716 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 19211",
      /*  9730 */ "19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 19978, 19211, 19211, 19211, 19211, 29940",
      /*  9744 */ "19048, 19211, 19211, 20169, 19211, 19211, 42710, 19211, 19211, 18433, 26135, 19211, 19211, 20470",
      /*  9758 */ "26134, 27495, 19321, 24216, 19320, 18296, 18338, 29933, 18354, 19211, 19211, 23610, 19211, 42351",
      /*  9772 */ "18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497",
      /*  9786 */ "19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897",
      /*  9800 */ "18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269",
      /*  9814 */ "19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216",
      /*  9828 */ "35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191",
      /*  9842 */ "42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358",
      /*  9856 */ "31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871",
      /*  9870 */ "19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789",
      /*  9884 */ "19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9898 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9912 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9926 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9940 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9954 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9968 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /*  9982 */ "19211, 19211, 24248, 24283, 19211, 19211, 19211, 24301, 19211, 19211, 19211, 21022, 24331, 42040",
      /*  9996 */ "24352, 24356, 19211, 24315, 24372, 19211, 19211, 20169, 19211, 19211, 42710, 19211, 19211, 18433",
      /* 10010 */ "26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 24399, 18338, 29933, 18354, 19211",
      /* 10024 */ "19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 19757",
      /* 10038 */ "19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535",
      /* 10052 */ "18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266",
      /* 10066 */ "18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874",
      /* 10080 */ "18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189",
      /* 10094 */ "42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337",
      /* 10108 */ "18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532",
      /* 10122 */ "28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438",
      /* 10136 */ "27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211",
      /* 10150 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10164 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10178 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10192 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10206 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10220 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10234 */ "19211, 19211, 19211, 19211, 19211, 19211, 24436, 24458, 19211, 19211, 19211, 21020, 19211, 19211",
      /* 10248 */ "19211, 21022, 19978, 19211, 19211, 19211, 24442, 24476, 37494, 19211, 19211, 20169, 19211, 19211",
      /* 10262 */ "42710, 21329, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 18625, 19320, 24513",
      /* 10276 */ "18338, 29933, 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079",
      /* 10290 */ "19768, 18449, 18470, 19757, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072",
      /* 10304 */ "28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662",
      /* 10318 */ "20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880",
      /* 10332 */ "18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064",
      /* 10346 */ "19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853",
      /* 10360 */ "19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454",
      /* 10374 */ "19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773",
      /* 10388 */ "19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211",
      /* 10402 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10416 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10430 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10444 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10458 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10472 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10486 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 24576, 19211",
      /* 10500 */ "19211, 24595, 38513, 19211, 21337, 31397, 24621, 24635, 24645, 24661, 24676, 24688, 18761, 24704",
      /* 10514 */ "24832, 20169, 39883, 21242, 24725, 24747, 41339, 24772, 24823, 33395, 25136, 24855, 24871, 24896",
      /* 10528 */ "24912, 33974, 24941, 24957, 19211, 27278, 20536, 37235, 23871, 19211, 36512, 25499, 29825, 24984",
      /* 10542 */ "35512, 35690, 32162, 25005, 27093, 27093, 41439, 32257, 33114, 33114, 37001, 40531, 30415, 21151",
      /* 10556 */ "28445, 33095, 23554, 19211, 25179, 21692, 25040, 38026, 28759, 32596, 25064, 34484, 27093, 40205",
      /* 10570 */ "25095, 25111, 33114, 38662, 33039, 29420, 32988, 25152, 34140, 19211, 32327, 25170, 19211, 25198",
      /* 10584 */ "36131, 25248, 25653, 25264, 25282, 38114, 25591, 25325, 25545, 41284, 33114, 25362, 25399, 35018",
      /* 10598 */ "19211, 38852, 32124, 29822, 27056, 26007, 41309, 27093, 40901, 25426, 33114, 33114, 27239, 29434",
      /* 10612 */ "25456, 34135, 25479, 25496, 29092, 25517, 40255, 27093, 21947, 32265, 33741, 26375, 19211, 19211",
      /* 10626 */ "25500, 41846, 30859, 27560, 25542, 25561, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211",
      /* 10640 */ "24098, 23764, 29843, 19211, 23762, 26159, 25585, 32897, 25607, 32634, 23767, 25569, 27566, 21525",
      /* 10654 */ "21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10668 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10682 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10696 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10710 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10724 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10738 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10752 */ "23949, 19211, 39122, 19211, 19211, 21020, 19211, 19211, 19211, 23533, 25636, 22027, 25669, 25684",
      /* 10766 */ "37207, 32419, 18761, 19211, 19211, 20169, 19211, 19211, 19211, 19211, 19211, 29824, 32442, 19211",
      /* 10780 */ "19211, 25500, 32441, 41308, 33159, 33116, 33158, 21353, 19211, 19211, 20536, 19211, 19211, 19211",
      /* 10794 */ "19211, 25499, 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257, 33114, 33114",
      /* 10808 */ "33115, 40531, 30415, 19211, 19211, 19211, 29957, 19211, 25716, 21692, 29825, 36728, 30792, 25501",
      /* 10822 */ "24989, 27093, 27093, 27019, 32390, 23992, 33114, 33114, 37673, 28310, 32988, 19211, 19211, 19211",
      /* 10836 */ "19211, 21580, 19211, 29823, 25047, 30196, 25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114",
      /* 10850 */ "33114, 28312, 21895, 19211, 19211, 35716, 19211, 25756, 40173, 26007, 25778, 27093, 27093, 30763",
      /* 10864 */ "40564, 33114, 33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093, 21947, 33114",
      /* 10878 */ "40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756",
      /* 10892 */ "27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592, 25801, 25840",
      /* 10906 */ "23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10920 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10934 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10948 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10962 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10976 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 10990 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11004 */ "19211, 19211, 19211, 19211, 23949, 19211, 23351, 19211, 19211, 21020, 20350, 19211, 19211, 37758",
      /* 11018 */ "25883, 25897, 25910, 25926, 25941, 25953, 18761, 19211, 24285, 20169, 25969, 19211, 25986, 19211",
      /* 11032 */ "19211, 29824, 32442, 19211, 19211, 26005, 41090, 41308, 26024, 36931, 26049, 21353, 27657, 19211",
      /* 11046 */ "20536, 26065, 21768, 19211, 25480, 19296, 26085, 38918, 19211, 26107, 29820, 32570, 34454, 27093",
      /* 11060 */ "27093, 28180, 26151, 33114, 33115, 40531, 21852, 19211, 19211, 21297, 19211, 21627, 29272, 24709",
      /* 11074 */ "39978, 25046, 19211, 25501, 24989, 27835, 26683, 32514, 32390, 26175, 34698, 39834, 33114, 28310",
      /* 11088 */ "32988, 19211, 31800, 19211, 19211, 29263, 19211, 29823, 25047, 30196, 25653, 27093, 27093, 37309",
      /* 11102 */ "25591, 34909, 33114, 33114, 31754, 28312, 21895, 19211, 19211, 19211, 29194, 29822, 27056, 26007",
      /* 11116 */ "41309, 27093, 26191, 30763, 33114, 33114, 26212, 29434, 19211, 19211, 26231, 30196, 26249, 26265",
      /* 11130 */ "39471, 27093, 21947, 39240, 31759, 26290, 19211, 19211, 30178, 26337, 31210, 23766, 26033, 21415",
      /* 11144 */ "19211, 42614, 26008, 23756, 41705, 33114, 26366, 19211, 24098, 23764, 29843, 19211, 23762, 26592",
      /* 11158 */ "41305, 27859, 26391, 26427, 23767, 26431, 27566, 21525, 21525, 26447, 30408, 19211, 19211, 19211",
      /* 11172 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11186 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11200 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11214 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11228 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11242 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11256 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19250, 19211, 19211, 21020",
      /* 11270 */ "37022, 19211, 39175, 21022, 26477, 26491, 26501, 26517, 26532, 26544, 18761, 19211, 19211, 20169",
      /* 11284 */ "19211, 19211, 19211, 19211, 19211, 32838, 39949, 19211, 26560, 23976, 32441, 29869, 33159, 26588",
      /* 11298 */ "26576, 21353, 26814, 26608, 19885, 19211, 26634, 19211, 19211, 18738, 26655, 26705, 37620, 30651",
      /* 11312 */ "26739, 24787, 32186, 38953, 26795, 33668, 33736, 34168, 36229, 40531, 30415, 19211, 29905, 26811",
      /* 11326 */ "30573, 19211, 25179, 21692, 29825, 25046, 19211, 25501, 26830, 27093, 27093, 27093, 32390, 23992",
      /* 11340 */ "33114, 33114, 33114, 28900, 26858, 19211, 19211, 39606, 38976, 21580, 19211, 29823, 25047, 30196",
      /* 11354 */ "19377, 26892, 27093, 27093, 26912, 26950, 33114, 33114, 36362, 28312, 21895, 19211, 19211, 19211",
      /* 11368 */ "19211, 26976, 27056, 26007, 26996, 27093, 27017, 30763, 27035, 38587, 33114, 29434, 18833, 32539",
      /* 11382 */ "19211, 35603, 27054, 35938, 27073, 27092, 27110, 37331, 40569, 30415, 27165, 19211, 25500, 41846",
      /* 11396 */ "27093, 23766, 33114, 21415, 19211, 27183, 26008, 23756, 33943, 33114, 33801, 19211, 24098, 23764",
      /* 11410 */ "29843, 19211, 23762, 26592, 25849, 27201, 27226, 27255, 23767, 26431, 27566, 21525, 21525, 21561",
      /* 11424 */ "30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11438 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11452 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11466 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11480 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11494 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11508 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211",
      /* 11522 */ "19212, 27275, 19211, 21020, 29471, 27294, 23818, 28498, 27312, 27326, 27336, 27352, 27367, 27379",
      /* 11536 */ "18761, 39128, 39277, 27395, 23174, 27411, 39298, 24579, 29504, 27427, 34423, 18367, 27467, 27514",
      /* 11550 */ "27530, 27546, 27588, 27636, 27673, 27689, 18606, 27710, 27763, 38531, 27798, 20131, 26715, 25499",
      /* 11564 */ "29825, 38825, 31172, 19211, 21435, 42499, 26274, 34587, 27816, 27851, 27875, 27898, 41996, 40531",
      /* 11578 */ "28934, 39360, 27946, 41128, 27968, 28002, 25179, 28018, 28054, 28070, 28121, 28149, 32227, 28165",
      /* 11592 */ "28196, 28223, 28264, 28295, 37723, 25814, 28328, 28354, 32988, 28370, 19211, 28395, 27480, 21580",
      /* 11606 */ "28415, 28480, 41813, 28514, 28538, 34663, 27093, 28564, 40452, 28585, 28623, 29801, 41724, 28643",
      /* 11620 */ "21895, 28678, 30979, 37084, 28695, 29822, 28729, 28789, 28819, 25024, 28835, 28851, 42158, 28909",
      /* 11634 */ "28885, 28925, 19211, 42545, 23849, 30196, 28950, 28979, 40427, 24801, 28995, 33915, 29022, 30415",
      /* 11648 */ "29044, 29060, 25463, 29108, 29137, 29167, 29324, 29217, 29233, 42180, 29288, 33512, 28237, 29311",
      /* 11662 */ "21843, 30775, 24098, 38764, 39247, 26302, 29121, 29340, 29373, 33677, 29389, 34089, 29405, 26431",
      /* 11676 */ "27566, 29457, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11690 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11704 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11718 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11732 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11746 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11760 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11774 */ "19211, 19211, 23949, 19211, 19211, 39706, 19211, 29487, 21731, 29520, 30332, 40081, 29539, 29553",
      /* 11788 */ "29563, 29579, 29594, 29606, 18761, 19211, 31461, 20169, 19211, 19211, 24015, 19211, 19211, 29824",
      /* 11802 */ "32442, 24012, 24012, 29622, 32441, 29656, 33159, 29702, 29690, 21353, 22336, 19211, 20536, 22342",
      /* 11816 */ "19211, 31036, 19211, 29722, 29825, 25047, 19211, 29766, 38911, 42499, 35430, 27093, 27093, 40406",
      /* 11830 */ "33114, 33114, 33115, 29782, 30415, 19211, 19211, 19211, 19211, 19211, 25179, 21692, 29825, 25046",
      /* 11844 */ "19211, 29817, 24989, 27093, 27093, 40971, 32390, 23992, 33114, 33114, 29841, 28310, 32988, 19211",
      /* 11858 */ "19211, 28458, 19211, 21580, 19211, 29823, 25047, 30196, 29859, 27093, 35435, 27093, 25591, 34909",
      /* 11872 */ "33114, 29885, 33114, 28312, 21895, 19211, 29904, 19211, 19211, 29822, 29921, 23441, 41309, 27093",
      /* 11886 */ "40701, 30763, 33114, 33114, 31830, 29434, 19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093",
      /* 11900 */ "21947, 33114, 40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415, 29956, 19211",
      /* 11914 */ "26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592",
      /* 11928 */ "28548, 21482, 23767, 26431, 27566, 29973, 21525, 30010, 30408, 19211, 19211, 19211, 19211, 19211",
      /* 11942 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11956 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11970 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11984 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 11998 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12012 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12026 */ "19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211, 19211, 21020, 19211, 40504",
      /* 12040 */ "19211, 21022, 30040, 30054, 30064, 30080, 30095, 30107, 18761, 19211, 19211, 20169, 19211, 19211",
      /* 12054 */ "19211, 30123, 19211, 29824, 32442, 19211, 19211, 25500, 32441, 41308, 33159, 33116, 33158, 30143",
      /* 12068 */ "19211, 19211, 20536, 19211, 19211, 19211, 19211, 30177, 29825, 25047, 19211, 19211, 29820, 42499",
      /* 12082 */ "27093, 27093, 27093, 32257, 33114, 33114, 33115, 40531, 30415, 19211, 19211, 19211, 19211, 19211",
      /* 12096 */ "19211, 30194, 29825, 25046, 19211, 25501, 32926, 27093, 27093, 27093, 26196, 23992, 33114, 33114",
      /* 12110 */ "33114, 28310, 30415, 19211, 39420, 19211, 37527, 19211, 19211, 29823, 25047, 23435, 30212, 27093",
      /* 12124 */ "27093, 27093, 25591, 34909, 33114, 33114, 33114, 30238, 19211, 19211, 19211, 19211, 19211, 29822",
      /* 12138 */ "27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114, 33114, 29434, 19211, 19211, 30285, 30196",
      /* 12152 */ "25048, 35938, 27093, 27093, 34908, 33114, 40569, 33810, 30301, 30323, 30348, 41846, 27093, 23766",
      /* 12166 */ "33114, 21415, 19211, 19211, 30371, 33619, 30394, 30432, 21843, 19211, 30462, 34077, 30478, 19211",
      /* 12180 */ "23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 30515, 21561, 30408, 19211",
      /* 12194 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12208 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12222 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12236 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12250 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12264 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12278 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211",
      /* 12292 */ "19211, 21020, 19211, 19211, 19211, 21022, 23971, 27057, 19211, 28032, 37207, 21463, 18761, 19211",
      /* 12306 */ "19211, 30555, 19211, 19211, 19211, 22710, 19211, 29824, 30571, 19211, 30307, 30154, 30589, 30605",
      /* 12320 */ "37593, 21951, 30627, 30675, 19211, 28399, 20536, 36770, 27185, 19211, 19211, 25499, 29825, 25047",
      /* 12334 */ "19211, 19211, 29820, 42499, 27093, 27093, 39754, 32257, 33114, 33114, 30696, 40531, 30415, 19211",
      /* 12348 */ "19211, 30733, 19211, 19211, 19211, 21692, 29825, 25046, 19211, 29084, 30751, 27093, 27093, 27093",
      /* 12362 */ "24267, 23992, 33114, 33114, 31928, 28310, 30415, 30791, 19211, 19211, 19211, 19211, 19211, 29823",
      /* 12376 */ "25047, 30196, 39926, 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 40533, 19211, 19211",
      /* 12390 */ "38843, 19211, 19211, 29822, 27056, 26007, 41309, 27093, 33530, 25696, 33114, 33114, 36922, 29434",
      /* 12404 */ "19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211",
      /* 12418 */ "25500, 41846, 27093, 23766, 33114, 21415, 19211, 30808, 26008, 30827, 27094, 33114, 41118, 19211",
      /* 12432 */ "30849, 35382, 38627, 19211, 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525",
      /* 12446 */ "21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12460 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12474 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12488 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12502 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12516 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12530 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12544 */ "23949, 19211, 19211, 27138, 19211, 21020, 31284, 39291, 31277, 28803, 30883, 30897, 30907, 30923",
      /* 12558 */ "30938, 30950, 18761, 19211, 19211, 29201, 28464, 19211, 19211, 19211, 30966, 30995, 31018, 27782",
      /* 12572 */ "31952, 31052, 31075, 31091, 39212, 37677, 40012, 31114, 19211, 19211, 18587, 19211, 19116, 31135",
      /* 12586 */ "19211, 25499, 34221, 42491, 31154, 19211, 29820, 39741, 31188, 31207, 32370, 38468, 29888, 33114",
      /* 12600 */ "39582, 40531, 30415, 31226, 31246, 20924, 31263, 31300, 19211, 21799, 29825, 31325, 31230, 31348",
      /* 12614 */ "24989, 27093, 35399, 31578, 35956, 23992, 33114, 30446, 38347, 28310, 30415, 19211, 19211, 26321",
      /* 12628 */ "31383, 27776, 19211, 29823, 25047, 30196, 25653, 31413, 27093, 27093, 25591, 31430, 33114, 33114",
      /* 12642 */ "33114, 40533, 19211, 23504, 31453, 23519, 31477, 29822, 29632, 22018, 31513, 38947, 27093, 25696",
      /* 12656 */ "33114, 40670, 33114, 29181, 23712, 31531, 19211, 25383, 33575, 42665, 33629, 31559, 36961, 31594",
      /* 12670 */ "31630, 31660, 19211, 31367, 31678, 41846, 35374, 31718, 31740, 21415, 36249, 19211, 31775, 23756",
      /* 12684 */ "27094, 33114, 25824, 31799, 24098, 23764, 29843, 19211, 31816, 26592, 28038, 38891, 28548, 21482",
      /* 12698 */ "23767, 27259, 31856, 21525, 21525, 21561, 31898, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12712 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12726 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12740 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12754 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12768 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12782 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12796 */ "19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022",
      /* 12810 */ "23971, 27057, 19211, 28032, 37207, 21463, 18761, 19211, 19211, 20169, 19211, 19211, 36523, 19211",
      /* 12824 */ "19211, 29824, 32442, 19211, 19211, 25500, 32441, 41308, 33159, 33116, 33158, 21353, 19211, 19211",
      /* 12838 */ "20536, 19211, 19211, 19211, 19211, 25499, 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093",
      /* 12852 */ "27093, 32257, 33114, 33114, 33115, 40531, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 21692",
      /* 12866 */ "29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093, 32390, 23992, 33114, 33114, 33114, 28310",
      /* 12880 */ "30415, 19211, 19211, 19211, 19211, 19211, 19211, 29823, 25047, 30196, 25653, 27093, 38121, 27093",
      /* 12894 */ "25591, 34909, 33114, 31927, 33114, 40533, 19211, 19211, 19211, 19211, 19211, 29822, 27056, 26007",
      /* 12908 */ "41309, 27093, 27093, 25696, 33114, 33114, 33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938",
      /* 12922 */ "27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415",
      /* 12936 */ "19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592",
      /* 12950 */ "41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211",
      /* 12964 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12978 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 12992 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13006 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13020 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13034 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13048 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 29496, 19211, 21020",
      /* 13062 */ "19211, 31944, 21375, 31309, 31968, 31982, 31992, 32008, 32023, 32035, 18761, 38191, 19211, 20169",
      /* 13076 */ "19211, 25182, 22629, 32051, 19211, 32071, 32442, 19211, 32094, 32158, 32148, 32178, 40213, 33116",
      /* 13090 */ "33158, 25125, 36536, 19211, 22566, 18600, 32202, 41949, 36530, 24172, 29825, 32222, 19211, 36537",
      /* 13104 */ "25645, 26670, 32243, 31414, 33523, 32281, 36027, 31437, 32310, 32297, 34816, 19211, 19211, 19211",
      /* 13118 */ "19211, 32326, 19211, 21692, 32343, 25046, 19211, 25501, 24989, 32362, 32386, 35947, 26196, 32406",
      /* 13132 */ "36018, 36289, 33114, 28310, 30415, 33212, 34000, 19211, 30735, 32780, 19211, 29823, 32435, 30196",
      /* 13146 */ "25653, 27093, 35583, 36270, 25591, 34909, 33114, 38658, 32458, 40533, 26639, 19211, 19211, 42522",
      /* 13160 */ "19211, 32477, 27056, 26007, 32501, 27093, 27093, 25696, 26411, 33114, 33114, 29434, 32537, 19211",
      /* 13174 */ "22329, 32555, 28489, 40626, 27093, 27093, 36075, 33114, 40569, 30415, 24046, 19211, 24491, 41846",
      /* 13188 */ "27093, 23766, 33114, 21415, 19211, 36764, 26008, 23756, 29674, 33114, 32586, 19211, 24098, 23764",
      /* 13202 */ "29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482, 32612, 29441, 32628, 21525, 32650, 21561",
      /* 13216 */ "30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13230 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13244 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13258 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13272 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13286 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13300 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211",
      /* 13314 */ "19211, 32132, 19211, 32680, 19211, 19507, 19211, 19516, 32696, 32710, 32720, 32736, 32751, 32763",
      /* 13328 */ "18761, 24069, 19211, 20169, 19211, 19211, 32779, 19211, 19211, 32796, 32442, 19211, 32819, 32830",
      /* 13342 */ "39401, 32854, 40909, 32893, 32881, 21353, 19211, 18698, 20536, 19211, 20746, 27296, 19211, 25499",
      /* 13356 */ "29825, 25047, 19211, 21990, 32913, 42499, 32954, 34615, 36156, 35227, 33114, 41660, 32974, 33013",
      /* 13370 */ "27649, 20248, 28705, 19211, 19211, 20740, 19211, 21692, 29825, 25046, 19211, 25501, 24989, 40392",
      /* 13384 */ "40050, 27093, 32390, 33029, 33055, 33074, 33114, 28310, 30415, 41365, 19498, 19211, 19211, 33092",
      /* 13398 */ "20027, 29823, 25047, 30196, 25653, 28569, 27093, 35364, 24807, 33111, 33132, 40473, 33114, 40533",
      /* 13412 */ "19211, 19211, 19211, 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114",
      /* 13426 */ "33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 37228",
      /* 13440 */ "19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008, 33151, 25232, 33114",
      /* 13454 */ "33175, 19211, 24098, 23764, 29843, 18980, 30833, 37145, 41305, 26592, 28548, 21482, 23767, 26431",
      /* 13468 */ "27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13482 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13496 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13510 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13524 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13538 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13552 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13566 */ "19211, 19211, 23949, 19211, 19211, 23263, 19211, 33209, 19211, 34538, 39807, 33228, 33244, 33258",
      /* 13580 */ "33270, 33286, 33301, 33313, 18761, 21896, 33329, 20169, 24968, 33348, 19211, 19211, 33374, 33411",
      /* 13594 */ "33461, 33498, 33546, 33562, 33605, 33653, 33693, 33757, 33787, 21353, 19109, 19211, 28713, 29523",
      /* 13608 */ "38523, 22346, 33826, 20701, 29825, 32078, 30811, 33854, 33880, 42499, 21393, 27093, 33939, 32257",
      /* 13622 */ "36083, 33076, 33115, 33959, 27210, 19211, 22143, 19211, 19211, 19211, 31028, 21692, 34022, 25046",
      /* 13636 */ "34045, 25501, 34065, 29667, 27093, 27093, 34105, 34156, 33114, 33114, 36222, 28310, 30415, 19211",
      /* 13650 */ "19211, 19211, 34196, 19211, 27986, 34214, 41838, 34237, 32485, 27093, 27093, 34256, 34275, 34313",
      /* 13664 */ "33114, 36009, 42120, 40533, 38740, 34335, 34357, 34375, 36585, 34395, 30378, 34411, 34439, 34500",
      /* 13678 */ "39465, 25696, 29006, 29793, 41002, 27602, 38861, 41942, 34526, 34554, 21817, 34578, 34611, 27093",
      /* 13692 */ "34761, 33114, 31614, 30415, 34631, 19211, 38815, 26754, 34650, 34679, 40321, 29028, 34714, 19211",
      /* 13706 */ "38720, 32664, 35648, 34732, 21843, 30680, 24098, 34777, 34795, 19211, 24106, 37804, 33589, 34832",
      /* 13720 */ "30222, 40111, 23767, 26431, 27566, 34894, 21525, 21561, 30492, 19211, 19211, 19211, 19211, 19211",
      /* 13734 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13748 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13762 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13776 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13790 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13804 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 13818 */ "19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19983, 19211, 21020, 20084, 21871",
      /* 13832 */ "19211, 20389, 34925, 34939, 34949, 34965, 34980, 34992, 18761, 35008, 35308, 23304, 35034, 35050",
      /* 13846 */ "19211, 26723, 35073, 35095, 35126, 35157, 41929, 37505, 35110, 35213, 35243, 34747, 35259, 35275",
      /* 13860 */ "19211, 19697, 20614, 19211, 18732, 35296, 28100, 35332, 36453, 25047, 19211, 19211, 29820, 35351",
      /* 13874 */ "27093, 35398, 35415, 32257, 23933, 32461, 41668, 40531, 30415, 27747, 19211, 37377, 19211, 35451",
      /* 13888 */ "35505, 20430, 29825, 41174, 23292, 30659, 24989, 27093, 41870, 27093, 40639, 23992, 33135, 35528",
      /* 13902 */ "40278, 33723, 33987, 19211, 35545, 35563, 19211, 19211, 19211, 29823, 25047, 21632, 25653, 27093",
      /* 13916 */ "35580, 27093, 25591, 34909, 36000, 33114, 33114, 40533, 19211, 19211, 35599, 27694, 19211, 29822",
      /* 13930 */ "27056, 26007, 41309, 27093, 27093, 26842, 33114, 33114, 33114, 29434, 19211, 35619, 19211, 30196",
      /* 13944 */ "36428, 35638, 25300, 36384, 23928, 41280, 39537, 30528, 19211, 19211, 24839, 41846, 35664, 34779",
      /* 13958 */ "33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 26960, 19211, 42253, 39760, 29843, 35684",
      /* 13972 */ "29750, 35706, 40120, 35740, 28548, 21482, 23767, 26431, 31724, 35766, 35782, 21561, 34809, 19211",
      /* 13986 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14000 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14014 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14028 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14042 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14056 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14070 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211",
      /* 14084 */ "19211, 21020, 19211, 36860, 19211, 35812, 35828, 31783, 35857, 35872, 35887, 35899, 18761, 19211",
      /* 14098 */ "40180, 24383, 19211, 19211, 19211, 19211, 31165, 29824, 32442, 35915, 19211, 19368, 35972, 41308",
      /* 14112 */ "35991, 27882, 33158, 21353, 20312, 19211, 20536, 19211, 39710, 35079, 36061, 36099, 36124, 25047",
      /* 14126 */ "26233, 19211, 29820, 42499, 36147, 37115, 36180, 36194, 36568, 24925, 36045, 36210, 29986, 19211",
      /* 14140 */ "19039, 19211, 22137, 19288, 36245, 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093",
      /* 14154 */ "32390, 23992, 33114, 33114, 33114, 28310, 30251, 21156, 19211, 19211, 39811, 31662, 30717, 30161",
      /* 14168 */ "32803, 30196, 25653, 27093, 36265, 27093, 30611, 36286, 26779, 33114, 33114, 40533, 19211, 36305",
      /* 14182 */ "19211, 19211, 19211, 29822, 27056, 26007, 41309, 27076, 27093, 32938, 33114, 38551, 33114, 29434",
      /* 14196 */ "19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 19211, 36324",
      /* 14210 */ "25500, 29737, 27093, 23766, 33114, 37218, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211",
      /* 14224 */ "24098, 23764, 29843, 36341, 23762, 26592, 36378, 26592, 28548, 21482, 23767, 26431, 27566, 21525",
      /* 14238 */ "21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14252 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14266 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14280 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14294 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14308 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14322 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14336 */ "23949, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 23971, 27057, 19211, 28032",
      /* 14350 */ "37207, 21463, 18761, 19211, 19211, 20169, 19211, 19211, 19211, 36400, 19211, 36420, 27441, 27447",
      /* 14364 */ "27451, 36444, 36735, 36477, 28207, 27038, 33158, 36501, 19211, 19211, 20536, 19211, 19211, 19211",
      /* 14378 */ "19211, 25499, 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257, 33114, 33114",
      /* 14392 */ "33115, 40531, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 21692, 29825, 25046, 19211, 25501",
      /* 14406 */ "24989, 27093, 27093, 27093, 27001, 23992, 33114, 33114, 33114, 28310, 30415, 19211, 19211, 19211",
      /* 14420 */ "19211, 19211, 19211, 29823, 25047, 30196, 25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114",
      /* 14434 */ "33114, 40533, 19211, 19211, 19211, 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093, 25696",
      /* 14448 */ "33114, 33114, 33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114",
      /* 14462 */ "40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756",
      /* 14476 */ "36553, 42112, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482",
      /* 14490 */ "23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14504 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14518 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14532 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14546 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14560 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14574 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14588 */ "19211, 19211, 19211, 19211, 23949, 19211, 19211, 20044, 36584, 36601, 20065, 19211, 36607, 21022",
      /* 14602 */ "36624, 36638, 36648, 36664, 36679, 36691, 18761, 19211, 27952, 20169, 25700, 38219, 40747, 26069",
      /* 14616 */ "36707, 20710, 32442, 36751, 36786, 42482, 36811, 36876, 36892, 36947, 36986, 37038, 19211, 19211",
      /* 14630 */ "34006, 27740, 30539, 37060, 37080, 36718, 38079, 25047, 19211, 40755, 28522, 37100, 34259, 27093",
      /* 14644 */ "37161, 26769, 36036, 28627, 33115, 37179, 37251, 19211, 22082, 37268, 37274, 19211, 32206, 21692",
      /* 14658 */ "29825, 24550, 28679, 25501, 33424, 37290, 37307, 31515, 42264, 37325, 34691, 33114, 37708, 28310",
      /* 14672 */ "30415, 19211, 37347, 33864, 23165, 37369, 37393, 30355, 37415, 42374, 38087, 27093, 37126, 37456",
      /* 14686 */ "38328, 34909, 41006, 40146, 35529, 37480, 21924, 19211, 34049, 37521, 34634, 29822, 40361, 37543",
      /* 14700 */ "37581, 27093, 27093, 25696, 40030, 33114, 33114, 27912, 35622, 36608, 19211, 30196, 25048, 35938",
      /* 14714 */ "27093, 32958, 34908, 33114, 33445, 30415, 42568, 19211, 25500, 39675, 27093, 33904, 33114, 37609",
      /* 14728 */ "37867, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 37636, 37658, 28597",
      /* 14742 */ "41305, 29706, 37693, 27572, 23767, 26431, 27566, 37739, 37774, 37790, 30408, 19211, 19211, 19211",
      /* 14756 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14770 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14784 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14798 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14812 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14826 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 14840 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211, 37820, 37842",
      /* 14854 */ "37866, 37883, 37899, 33838, 37915, 37929, 37939, 37955, 37970, 37982, 24420, 19211, 19211, 42066",
      /* 14868 */ "19211, 19211, 24731, 37998, 19631, 38017, 38034, 25989, 38050, 38066, 42063, 38103, 33637, 38149",
      /* 14882 */ "38137, 38172, 38207, 19211, 20536, 24605, 19211, 19211, 19211, 35057, 38248, 34029, 38285, 38304",
      /* 14896 */ "34562, 42499, 38320, 25018, 27093, 25079, 38344, 38375, 33115, 38363, 31905, 19211, 31497, 21931",
      /* 14910 */ "38392, 19211, 19211, 21692, 29825, 25046, 31911, 25501, 24989, 27093, 27093, 27093, 32390, 23992",
      /* 14924 */ "33114, 33114, 33114, 28310, 30415, 31247, 19211, 38415, 26314, 40508, 21302, 29823, 38438, 20143",
      /* 14938 */ "38454, 27093, 37163, 25291, 38498, 38547, 33114, 31644, 36904, 29151, 21545, 19211, 34297, 19211",
      /* 14952 */ "19211, 24497, 29295, 42224, 41309, 31098, 38567, 25696, 33114, 36913, 38586, 29434, 19211, 35750",
      /* 14966 */ "19211, 23747, 25048, 35938, 25226, 38603, 38623, 38643, 40569, 30415, 19211, 28607, 25500, 38678",
      /* 14980 */ "27093, 23766, 33114, 30640, 21233, 36404, 38707, 38756, 25309, 41484, 28338, 19277, 38780, 23764",
      /* 14994 */ "26215, 19211, 26350, 38805, 41305, 26592, 38877, 21482, 33436, 38934, 28248, 21525, 21525, 21561",
      /* 15008 */ "30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15022 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15036 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15050 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15064 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15078 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15092 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211",
      /* 15106 */ "19211, 19211, 33386, 21020, 19211, 19211, 38969, 35724, 38992, 39006, 39016, 39032, 39047, 39059",
      /* 15120 */ "39902, 19211, 39075, 39091, 19211, 21712, 25410, 39107, 19211, 36108, 37555, 20670, 37565, 39144",
      /* 15134 */ "39160, 39200, 39228, 39263, 39314, 21353, 39330, 39349, 41372, 39376, 19211, 26618, 18827, 24540",
      /* 15148 */ "39984, 39395, 39417, 21136, 39436, 39452, 39487, 34467, 39504, 39525, 33114, 39553, 33058, 39569",
      /* 15162 */ "21538, 39598, 22089, 32055, 39622, 19211, 19211, 37353, 39660, 26091, 39691, 39726, 24989, 39776",
      /* 15176 */ "36164, 37291, 39792, 39827, 30024, 33114, 31608, 33708, 30415, 39850, 33358, 23150, 19211, 39869",
      /* 15190 */ "27612, 39918, 39942, 39965, 40000, 40238, 40046, 38570, 40066, 40097, 40136, 33114, 40309, 40533",
      /* 15204 */ "28963, 19211, 37826, 22071, 19211, 40162, 33482, 35335, 40196, 40229, 40254, 25696, 40271, 40294",
      /* 15218 */ "33114, 26461, 40337, 18971, 34198, 35928, 40359, 40377, 40422, 31191, 35796, 33114, 25867, 30415",
      /* 15232 */ "24560, 37252, 25500, 41846, 40443, 34510, 40468, 40489, 25377, 19211, 20150, 40524, 40549, 41041",
      /* 15246 */ "40585, 40611, 35841, 25526, 40655, 19211, 23762, 26592, 41305, 26592, 28548, 38156, 25858, 40690",
      /* 15260 */ "40717, 40733, 21525, 40771, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15274 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15288 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15302 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15316 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15330 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15344 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15358 */ "19211, 19211, 23949, 19211, 19211, 19211, 23655, 21020, 19211, 22108, 19211, 21022, 40787, 40801",
      /* 15372 */ "40814, 40830, 40845, 40857, 18761, 19211, 19211, 20169, 40873, 24460, 19211, 19211, 19211, 29824",
      /* 15386 */ "32442, 20994, 19211, 25500, 31361, 40892, 21649, 33116, 33158, 40925, 19211, 19211, 20536, 19211",
      /* 15400 */ "19211, 19211, 40941, 20219, 29825, 25047, 19211, 40948, 21809, 42499, 40967, 27093, 27093, 40987",
      /* 15414 */ "33114, 33114, 41514, 41022, 31868, 31138, 41057, 19211, 37850, 19211, 38422, 38901, 26980, 41083",
      /* 15428 */ "27978, 25501, 33892, 38607, 32865, 36485, 32390, 23992, 41106, 38482, 33114, 28310, 30415, 33185",
      /* 15442 */ "19211, 19211, 19211, 19211, 41144, 41166, 25047, 30196, 25653, 37464, 27093, 27093, 26689, 41190",
      /* 15456 */ "33114, 33114, 33114, 40533, 41206, 37642, 19211, 19211, 19211, 29822, 27056, 33474, 41309, 27093",
      /* 15470 */ "27093, 25696, 33114, 33114, 33114, 27124, 19211, 19211, 40343, 30196, 25048, 42405, 27093, 27093",
      /* 15484 */ "36355, 33114, 40569, 30499, 19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211",
      /* 15498 */ "26008, 23756, 27094, 33114, 21843, 19211, 24098, 41228, 41265, 19211, 23762, 26592, 41305, 26592",
      /* 15512 */ "28548, 21482, 37136, 41300, 27566, 21525, 41325, 21561, 30408, 19211, 19211, 19211, 19211, 19211",
      /* 15526 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15540 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15554 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15568 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15582 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15596 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15610 */ "19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211, 19211, 21020, 21969, 20490",
      /* 15624 */ "38228, 38232, 23971, 38259, 20633, 41388, 41403, 41415, 18761, 19211, 19211, 20169, 19211, 19211",
      /* 15638 */ "19211, 19211, 19211, 29824, 32442, 19211, 19211, 25500, 32441, 41431, 30867, 33116, 33158, 21353",
      /* 15652 */ "19211, 41455, 20536, 19211, 19211, 19211, 19211, 34240, 29825, 31002, 19211, 25970, 29820, 42499",
      /* 15666 */ "42417, 27829, 27093, 32257, 41483, 41512, 33115, 41500, 30415, 19211, 19211, 19211, 19211, 38399",
      /* 15680 */ "19211, 21692, 32346, 25762, 19211, 25501, 24989, 27093, 34476, 27093, 32390, 23992, 40674, 33114",
      /* 15694 */ "33114, 28310, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 29823, 25047, 30196, 25653, 27093",
      /* 15708 */ "27093, 27093, 25591, 34909, 33114, 33114, 33114, 40533, 19211, 19211, 19211, 19211, 19211, 29822",
      /* 15722 */ "27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114, 33114, 29434, 19211, 35975, 19211, 30196",
      /* 15736 */ "25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 23854, 19211, 25500, 41846, 27093, 23766",
      /* 15750 */ "33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 41530, 24098, 23764, 29843, 19211",
      /* 15764 */ "23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211",
      /* 15778 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15792 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15806 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15820 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15834 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15848 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 15862 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211",
      /* 15876 */ "20286, 21020, 19211, 18798, 19211, 41552, 41568, 41582, 41592, 41608, 41623, 41635, 18761, 19211",
      /* 15890 */ "19211, 20169, 19211, 19211, 19211, 19211, 19211, 29824, 32442, 19211, 19211, 25500, 32441, 41308",
      /* 15904 */ "41651, 36970, 41684, 21353, 19211, 19211, 20536, 19211, 19211, 19211, 30127, 25499, 29825, 25047",
      /* 15918 */ "19211, 19211, 29820, 42499, 27093, 27093, 27093, 32257, 33114, 33114, 33115, 40531, 30415, 19211",
      /* 15932 */ "19211, 19211, 19211, 19211, 19211, 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093",
      /* 15946 */ "32390, 23992, 33114, 33114, 33114, 28310, 30415, 19211, 19211, 19211, 19211, 27620, 19211, 29823",
      /* 15960 */ "25047, 30196, 25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 40533, 19211, 33332",
      /* 15974 */ "19211, 19211, 19211, 29822, 27056, 26007, 41309, 41700, 42085, 25696, 33114, 41721, 34319, 29434",
      /* 15988 */ "19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211",
      /* 16002 */ "25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211",
      /* 16016 */ "24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525",
      /* 16030 */ "21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16044 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16058 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16072 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16086 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16100 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16114 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16128 */ "24166, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022, 23971, 27057, 19211, 41740",
      /* 16142 */ "41755, 41767, 18761, 19211, 19211, 20169, 27924, 19211, 41783, 19211, 20931, 41805, 31692, 31698",
      /* 16156 */ "31702, 41829, 31332, 41862, 34595, 33116, 33158, 21353, 19211, 19211, 41886, 18280, 19211, 41915",
      /* 16170 */ "19211, 25499, 29825, 25047, 19211, 19211, 29820, 42499, 27093, 27093, 42423, 32257, 33114, 33114",
      /* 16184 */ "25620, 40531, 30710, 19211, 19211, 19211, 19211, 19211, 19211, 21692, 29825, 25046, 19211, 25501",
      /* 16198 */ "24989, 27093, 27093, 27093, 32390, 23992, 33114, 33114, 33114, 28310, 30415, 19211, 19211, 19211",
      /* 16212 */ "19211, 19211, 19211, 29823, 25047, 30196, 25653, 27093, 27093, 27093, 32521, 34909, 33114, 33114",
      /* 16226 */ "33114, 40533, 33193, 19211, 19211, 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093, 25696",
      /* 16240 */ "33114, 33114, 33114, 29434, 19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114",
      /* 16254 */ "40569, 30415, 19211, 19211, 25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756",
      /* 16268 */ "27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482",
      /* 16282 */ "23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16296 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16310 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16324 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16338 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16352 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16366 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16380 */ "19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 19211, 21022",
      /* 16394 */ "23971, 27057, 19211, 28032, 37207, 21463, 18761, 41965, 19211, 20169, 19211, 19211, 25154, 19211",
      /* 16408 */ "19211, 29824, 32442, 19211, 19211, 25500, 38730, 41308, 41987, 33923, 38789, 42012, 19211, 19211",
      /* 16422 */ "20536, 19211, 19211, 19211, 19211, 25499, 29825, 25047, 19211, 19211, 29820, 25213, 27093, 27093",
      /* 16436 */ "35668, 32257, 33114, 33114, 31840, 40531, 30415, 42034, 19211, 37044, 19211, 19211, 19211, 21692",
      /* 16450 */ "29825, 42056, 19211, 25501, 24989, 31572, 27093, 42082, 32390, 42101, 33114, 40022, 33114, 28310",
      /* 16464 */ "30415, 37399, 19211, 19211, 19211, 19211, 19211, 31059, 25047, 30196, 36461, 39488, 42136, 27093",
      /* 16478 */ "25591, 42153, 26404, 33114, 33114, 40533, 19211, 36325, 19211, 19211, 19211, 29822, 27056, 36795",
      /* 16492 */ "41309, 39509, 27093, 42174, 33114, 42687, 33114, 42196, 19211, 19211, 19030, 30196, 25048, 35938",
      /* 16506 */ "27093, 27093, 34908, 33114, 40569, 25340, 19211, 19211, 42222, 41846, 27093, 23766, 33114, 21415",
      /* 16520 */ "19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764, 29843, 19211, 23762, 26592",
      /* 16534 */ "41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561, 30408, 19211, 19211, 19211",
      /* 16548 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16562 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16576 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16590 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16604 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16618 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16632 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 23949, 19211, 19211, 19211, 19211, 21020",
      /* 16646 */ "19211, 19211, 19211, 21022, 42240, 27057, 19211, 28032, 37207, 21463, 18761, 19211, 19211, 20169",
      /* 16660 */ "19211, 19211, 19211, 19211, 19211, 29824, 32442, 19211, 19211, 25500, 32441, 41308, 33159, 33116",
      /* 16674 */ "33158, 21353, 19211, 19211, 20536, 19211, 19211, 19211, 19211, 25499, 29825, 25047, 19211, 19211",
      /* 16688 */ "29820, 42499, 27093, 27093, 27093, 32257, 33114, 33114, 33115, 40531, 30415, 19211, 19211, 19211",
      /* 16702 */ "19211, 19211, 19211, 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093, 32390, 23992",
      /* 16716 */ "33114, 33114, 33114, 28310, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 29823, 25047, 30196",
      /* 16730 */ "25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 40533, 19211, 19211, 19211, 19211",
      /* 16744 */ "19211, 29822, 27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114, 33114, 29434, 19211, 19211",
      /* 16758 */ "19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211, 25500, 41846",
      /* 16772 */ "27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211, 24098, 23764",
      /* 16786 */ "29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525, 21525, 21561",
      /* 16800 */ "30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16814 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16828 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16842 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16856 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16870 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 16884 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 19211",
      /* 16898 */ "19211, 19211, 19211, 42280, 42311, 42329, 22684, 42288, 42304, 42327, 22673, 42345, 42367, 42390",
      /* 16912 */ "20419, 19211, 19211, 20169, 19211, 19211, 42710, 34290, 19211, 18433, 26135, 19211, 19211, 20470",
      /* 16926 */ "26134, 27495, 42439, 24216, 19320, 42468, 18338, 29933, 18354, 19211, 19211, 23610, 19211, 42351",
      /* 16940 */ "18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 19854, 19773, 18454, 18475, 27497",
      /* 16954 */ "42515, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897",
      /* 16968 */ "18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269",
      /* 16982 */ "19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216",
      /* 16996 */ "35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191",
      /* 17010 */ "42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358",
      /* 17024 */ "31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871",
      /* 17038 */ "19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789",
      /* 17052 */ "19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17066 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17080 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17094 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17108 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17122 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17136 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17150 */ "19211, 19211, 19956, 19211, 19211, 19211, 19211, 21020, 19211, 19211, 42538, 21022, 19978, 23081",
      /* 17164 */ "23086, 23090, 19211, 34847, 19048, 19211, 19211, 20169, 19211, 19211, 42710, 19211, 19211, 18433",
      /* 17178 */ "26135, 42561, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 18296, 18338, 29933, 18354, 19211",
      /* 17192 */ "19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 19757",
      /* 17206 */ "19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535",
      /* 17220 */ "18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266",
      /* 17234 */ "18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874",
      /* 17248 */ "18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189",
      /* 17262 */ "42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337",
      /* 17276 */ "18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532",
      /* 17290 */ "28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438",
      /* 17304 */ "27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211",
      /* 17318 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17332 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17346 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17360 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17374 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17388 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17402 */ "19211, 19211, 19211, 19211, 19211, 19211, 19956, 19211, 19211, 19211, 19211, 21020, 42584, 19211",
      /* 17416 */ "19211, 35547, 42607, 25346, 42630, 42634, 19211, 42650, 19048, 19211, 19211, 20169, 19211, 19211",
      /* 17430 */ "42710, 23397, 19211, 18433, 26135, 19211, 19211, 20470, 26134, 27495, 19321, 24216, 19320, 18296",
      /* 17444 */ "18338, 29933, 18354, 19211, 19211, 23610, 19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079",
      /* 17458 */ "19768, 18449, 18470, 20576, 19773, 18454, 18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072",
      /* 17472 */ "28379, 18491, 18507, 18535, 18574, 39184, 37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662",
      /* 17486 */ "20588, 27498, 19916, 21266, 18683, 18719, 18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880",
      /* 17500 */ "18902, 18924, 18946, 18874, 18896, 18918, 18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064",
      /* 17514 */ "19132, 37430, 19171, 19189, 42450, 19207, 19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853",
      /* 17528 */ "19266, 19312, 23468, 19337, 18858, 23473, 19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454",
      /* 17542 */ "19470, 23681, 19486, 19532, 28133, 34862, 34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773",
      /* 17556 */ "19713, 19729, 27492, 19438, 27495, 19231, 19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211",
      /* 17570 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17584 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17598 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17612 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17626 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17640 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17654 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19956, 19211, 19211, 19211",
      /* 17668 */ "19211, 21020, 19211, 19211, 19211, 21022, 19978, 19211, 19211, 19211, 19211, 40595, 18761, 19211",
      /* 17682 */ "19211, 20169, 19211, 19211, 19211, 19211, 19211, 29824, 32442, 19211, 19211, 25500, 32441, 41308",
      /* 17696 */ "33159, 33116, 33158, 21353, 19211, 19211, 20536, 19211, 19211, 19211, 19211, 25499, 29825, 25047",
      /* 17710 */ "19211, 19211, 29820, 33582, 27093, 27093, 27093, 42679, 33114, 33114, 33115, 40531, 30415, 19211",
      /* 17724 */ "19211, 19211, 19211, 19211, 19211, 21692, 29825, 25046, 19211, 25501, 24989, 27093, 27093, 27093",
      /* 17738 */ "26896, 33113, 33114, 33114, 33114, 28310, 30415, 19211, 19211, 19211, 19211, 19211, 19211, 29823",
      /* 17752 */ "25047, 30196, 25653, 27093, 27093, 27093, 25591, 34909, 33114, 33114, 33114, 40533, 19211, 19211",
      /* 17766 */ "19211, 19211, 19211, 29822, 27056, 26007, 41309, 27093, 27093, 25696, 33114, 33114, 33114, 29434",
      /* 17780 */ "19211, 19211, 19211, 30196, 25048, 35938, 27093, 27093, 34908, 33114, 40569, 30415, 19211, 19211",
      /* 17794 */ "25500, 41846, 27093, 23766, 33114, 21415, 19211, 19211, 26008, 23756, 27094, 33114, 21843, 19211",
      /* 17808 */ "24098, 23764, 29843, 19211, 23762, 26592, 41305, 26592, 28548, 21482, 23767, 26431, 27566, 21525",
      /* 17822 */ "21525, 21561, 30408, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17836 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17850 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17864 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17878 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17892 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17906 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 17920 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 26873, 19211, 26876, 39635, 39640, 39644",
      /* 17934 */ "34716, 26927, 42711, 19211, 19211, 19211, 19211, 19211, 42710, 19211, 19211, 18433, 26135, 19211",
      /* 17948 */ "19211, 20470, 26134, 27495, 19321, 24216, 19320, 19592, 18338, 29933, 42703, 19211, 19211, 23610",
      /* 17962 */ "19211, 42351, 18383, 18399, 18415, 19094, 18429, 19079, 19768, 18449, 18470, 19854, 19773, 18454",
      /* 17976 */ "18475, 27497, 19210, 38834, 19211, 19211, 19211, 29072, 28379, 18491, 18507, 18535, 18574, 39184",
      /* 17990 */ "37440, 23897, 18646, 27498, 20593, 18622, 18641, 18662, 20588, 27498, 19916, 21266, 18683, 18719",
      /* 18004 */ "18754, 30269, 19211, 18777, 18814, 28105, 18849, 18880, 18902, 18924, 18946, 18874, 18896, 18918",
      /* 18018 */ "18940, 24216, 35466, 18962, 36826, 19005, 19021, 19064, 19132, 37430, 19171, 19189, 42450, 19207",
      /* 18032 */ "19173, 19191, 42452, 19228, 41353, 19247, 24527, 39853, 19266, 19312, 23468, 19337, 18858, 23473",
      /* 18046 */ "19342, 19358, 31543, 19393, 26121, 19414, 19465, 19454, 19470, 23681, 19486, 19532, 28133, 34862",
      /* 18060 */ "34878, 34871, 19548, 19564, 19578, 19647, 19663, 28773, 19713, 19729, 27492, 19438, 27495, 19231",
      /* 18074 */ "19745, 19789, 19805, 19844, 19870, 19901, 19932, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 18088 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 18102 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 18116 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 18130 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 18144 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 18158 */ "19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211, 19211",
      /* 18172 */ "19211, 19211, 19211, 19211, 0, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 73988, 73988, 73988, 73988, 0",
      /* 18193 */ "0, 78087, 78087, 73988, 73988, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087",
      /* 18208 */ "78087, 78087, 78087, 78087, 78087, 78087, 45056, 78087, 318, 78087, 78087, 78087, 78087, 78087",
      /* 18222 */ "78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 0, 0, 73988, 78087, 49152, 78087",
      /* 18237 */ "78087, 78087, 40960, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 78087, 0",
      /* 18252 */ "0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 73988, 0, 0, 78087, 0, 2105344, 266, 267, 0, 0, 0, 0, 0, 0, 0",
      /* 18278 */ "270336, 270336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 997, 2162688, 2162688, 0, 2, 6, 0, 0",
      /* 18303 */ "0, 0, 0, 0, 0, 2441216, 2449408, 0, 0, 0, 0, 0, 131072, 0, 0, 131072, 0, 131072, 131072, 131072",
      /* 18323 */ "131072, 131072, 131072, 0, 0, 131072, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 2469888, 0, 0, 0, 0, 0, 0, 0",
      /* 18346 */ "0, 0, 0, 0, 0, 0, 0, 2719744, 0, 0, 0, 3067904, 0, 0, 0, 0, 0, 0, 0, 318, 318, 0, 0, 0, 0, 0, 744",
      /* 18373 */ "0, 0, 0, 0, 628, 0, 0, 0, 0, 756, 2158592, 2158592, 2158592, 2621440, 2158592, 2158592, 2686976",
      /* 18390 */ "2158592, 2703360, 2158592, 2158592, 2756608, 2777088, 2797568, 2158592, 2834432, 2158592, 2883584",
      /* 18401 */ "2158592, 2158592, 2158592, 3067904, 2158592, 2158592, 2158592, 0, 0, 0, 0, 2621440, 0, 2686976",
      /* 18415 */ "2703360, 0, 0, 2756608, 2777088, 2797568, 0, 2834432, 2883584, 0, 0, 0, 0, 0, 0, 2883584, 0, 0, 0",
      /* 18434 */ "2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592",
      /* 18445 */ "2158592, 2158592, 2158592, 2158592, 2162688, 2703360, 2162688, 2711552, 2162688, 2162688, 2756608",
      /* 18456 */ "2162688, 2777088, 2797568, 2162688, 2162688, 2162688, 2834432, 2162688, 2162688, 2883584, 2162688",
      /* 18467 */ "2162688, 2162688, 2162688, 2883584, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 18478 */ "2162688, 2162688, 2162688, 3067904, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 18489 */ "2162688, 0, 0, 0, 0, 2379776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2428928, 2158592, 2158592, 2158592",
      /* 18510 */ "2158592, 2158592, 2158592, 2580480, 2158592, 2158592, 2613248, 2158592, 2658304, 2158592, 2158592",
      /* 18521 */ "2158592, 2158592, 0, 0, 0, 0, 0, 0, 0, 2162688, 2163485, 2429725, 2163485, 2163485, 2785280",
      /* 18536 */ "2809856, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2428928, 0, 0",
      /* 18548 */ "2580480, 0, 0, 0, 0, 0, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840",
      /* 18563 */ "163840, 163840, 163840, 163840, 163840, 163840, 163840, 0, 0, 0, 0, 0, 0, 2809856, 0, 0, 0, 0",
      /* 18581 */ "2809856, 0, 0, 0, 0, 2809856, 0, 0, 0, 0, 0, 974, 0, 0, 0, 0, 0, 318, 318, 0, 0, 0, 0, 0, 987, 0, 0",
      /* 18608 */ "0, 0, 0, 0, 0, 0, 0, 0, 950, 0, 0, 0, 0, 0, 0, 2162688, 2428928, 2162688, 2162688, 2162688, 2162688",
      /* 18629 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 913",
      /* 18641 */ "2580480, 2162688, 2162688, 2162688, 2162688, 2613248, 2162688, 2162688, 2162688, 2658304, 2162688",
      /* 18652 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2785280, 2801664, 2809856, 2162688",
      /* 18663 */ "2162688, 2785280, 2801664, 2809856, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 18674 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 912, 0, 2854912, 0, 0, 0, 0, 0, 0, 0",
      /* 18691 */ "0, 3051520, 3055616, 0, 0, 0, 3141632, 0, 0, 0, 0, 959, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 278528",
      /* 18715 */ "278528, 278528, 278528, 278528, 0, 3158016, 0, 0, 0, 0, 0, 0, 0, 0, 2875392, 0, 2768896, 0, 0, 0, 0",
      /* 18736 */ "0, 1003, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056, 402, 402, 402, 402, 402, 0, 0, 0, 2838528, 0, 0",
      /* 18760 */ "2854912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266, 267, 0, 0, 0, 0, 0, 0, 0, 2158592, 2473984, 2478080",
      /* 18782 */ "2158592, 2158592, 2158592, 2158592, 2596864, 2158592, 2158592, 2158592, 2707456, 2158592, 2158592",
      /* 18793 */ "0, 0, 0, 253952, 266240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 313, 0, 0, 0, 0, 0, 0, 2875392, 2158592",
      /* 18816 */ "2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2478080, 0, 0, 2707456, 0, 0, 0, 0",
      /* 18831 */ "0, 1035, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2046, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592",
      /* 18853 */ "2158592, 2158592, 3158016, 2158592, 0, 0, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 18867 */ "2162688, 2162688, 2162688, 2547712, 2162688, 2162688, 2162688, 0, 0, 0, 2162688, 2162688, 2162688",
      /* 18880 */ "2162688, 2473984, 2478080, 2162688, 2162688, 2162688, 2519040, 2162688, 2162688, 2162688, 2162688",
      /* 18891 */ "2162688, 2162688, 2162688, 2596864, 2162688, 2162688, 2162688, 2162688, 2162688, 2596864, 2162688",
      /* 18902 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2707456, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 18913 */ "2760704, 2162688, 2162688, 2162688, 2854912, 2162688, 2760704, 2162688, 2162688, 2162688, 2854912",
      /* 18924 */ "2875392, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2994176",
      /* 18935 */ "3018752, 2162688, 2162688, 2162688, 3051520, 2994176, 3018752, 2162688, 2162688, 2162688, 3051520",
      /* 18946 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3158016, 2162688, 0, 0, 0",
      /* 18959 */ "0, 2121728, 0, 0, 0, 0, 2887680, 0, 0, 0, 0, 3026944, 0, 0, 0, 0, 0, 0, 0, 0, 2057, 0, 0, 0, 0, 0",
      /* 18985 */ "0, 0, 0, 2401, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 3043328, 0, 0, 0, 0",
      /* 19012 */ "0, 0, 0, 0, 0, 0, 0, 2527232, 2695168, 0, 3145728, 0, 0, 0, 0, 0, 0, 2572288, 0, 0, 0, 0, 0, 0, 0",
      /* 19037 */ "0, 532480, 0, 0, 0, 0, 0, 0, 0, 0, 937984, 0, 0, 0, 0, 0, 0, 0, 0, 2105344, 266, 267, 0, 0, 0, 0, 0",
      /* 19064 */ "0, 0, 0, 2158592, 2158592, 2158592, 2527232, 2158592, 2158592, 2600960, 2158592, 2695168, 2158592",
      /* 19077 */ "2158592, 2887680, 2158592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2162688, 2162688, 2441216, 0, 0, 0",
      /* 19098 */ "0, 2777088, 0, 2883584, 0, 0, 0, 0, 0, 0, 2719744, 0, 0, 0, 0, 944, 945, 946, 0, 0, 0, 0, 0, 0, 0",
      /* 19123 */ "0, 0, 1007, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 3026944, 3076096, 3096576, 3145728, 0, 0, 0, 0, 0",
      /* 19143 */ "0, 3076096, 3096576, 0, 0, 0, 0, 0, 221605, 221605, 221605, 221605, 221605, 221605, 221605, 221605",
      /* 19159 */ "221605, 221605, 221605, 221605, 221605, 221605, 221605, 221605, 0, 0, 0, 0, 0, 0, 2162688, 2437120",
      /* 19175 */ "2162688, 2162688, 2162688, 2490368, 2162688, 2162688, 2527232, 2162688, 2162688, 2162688, 2162688",
      /* 19186 */ "2162688, 2162688, 2600960, 2162688, 2600960, 2625536, 2162688, 2162688, 2162688, 2695168, 2162688",
      /* 19197 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2887680, 2162688, 2162688, 2162688",
      /* 19208 */ "2162688, 3145728, 2162688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 285, 3145728, 2162688",
      /* 19230 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 19246 */ "2162688, 3153920, 0, 2813952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 283, 284, 0, 2158592, 2158592",
      /* 19268 */ "2633728, 2158592, 2158592, 2961408, 2158592, 3022848, 0, 0, 2633728, 0, 0, 0, 0, 0, 0, 0, 466944, 0",
      /* 19286 */ "2363, 2364, 0, 0, 0, 0, 0, 0, 0, 913408, 0, 0, 0, 0, 0, 0, 0, 0, 1054, 0, 402, 1057, 402, 402, 402",
      /* 19311 */ "402, 0, 0, 0, 2158592, 2813952, 2158592, 2158592, 2158592, 0, 2162688, 2162688, 2162688, 2162688",
      /* 19325 */ "2162688, 2162688, 2162688, 2162688, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 19336 */ "2162688, 2162688, 2908160, 2162688, 2162688, 2953216, 2162688, 2961408, 2162688, 2162688, 3022848",
      /* 19347 */ "3047424, 2162688, 2162688, 2162688, 2162688, 3174400, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 19358 */ "2162688, 0, 0, 0, 0, 2514944, 0, 0, 2543616, 2592768, 0, 0, 0, 0, 0, 0, 0, 773, 0, 402, 402, 402",
      /* 19380 */ "402, 402, 402, 402, 402, 573440, 0, 0, 0, 0, 500, 500, 500, 0, 0, 3014656, 0, 2539520, 0, 0, 0, 0",
      /* 19402 */ "0, 0, 0, 0, 0, 0, 0, 270, 0, 0, 0, 0, 2158592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592",
      /* 19427 */ "2158592, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 912, 2162688",
      /* 19439 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2502656, 0, 0",
      /* 19452 */ "0, 0, 2891776, 2162688, 2162688, 2957312, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 19464 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2498560, 2539520, 2543616, 2162688, 2162688, 2592768",
      /* 19475 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2891776, 2162688, 2162688, 2957312, 2162688",
      /* 19486 */ "0, 0, 0, 2895872, 0, 0, 0, 2682880, 0, 2641920, 2609152, 2691072, 0, 0, 0, 0, 0, 0, 1624, 0, 1626",
      /* 19507 */ "0, 0, 0, 0, 0, 0, 0, 339, 294, 0, 0, 0, 0, 0, 0, 0, 339, 0, 0, 0, 0, 0, 0, 0, 45056, 2936832, 0, 0",
      /* 19535 */ "3084288, 3129344, 0, 2940928, 2416640, 0, 0, 0, 0, 0, 0, 0, 2723840, 2162688, 2162688, 2162688",
      /* 19551 */ "2162688, 2162688, 3121152, 2162688, 2162688, 2162688, 2162688, 0, 2494464, 0, 0, 0, 2826240, 0",
      /* 19565 */ "2973696, 0, 0, 0, 3100672, 0, 0, 0, 0, 0, 0, 0, 2916352, 0, 2445312, 2494464, 2158592, 2744320",
      /* 19583 */ "2973696, 2744320, 0, 2158592, 0, 2162688, 2445312, 2453504, 2494464, 2162688, 2162688, 0, 0, 0, 0",
      /* 19598 */ "0, 0, 0, 0, 0, 0, 2441216, 2449408, 0, 0, 0, 0, 0, 250278, 250278, 250278, 250278, 250278, 249856",
      /* 19617 */ "249856, 249856, 249856, 250278, 250278, 250278, 249856, 250278, 249856, 249856, 249856, 249856",
      /* 19629 */ "249856, 249856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 697, 2162688, 2162688, 2650112",
      /* 19650 */ "2744320, 2826240, 2928640, 2162688, 2973696, 2162688, 2162688, 2162688, 3100672, 2162688, 2445312",
      /* 19661 */ "2453504, 2494464, 2162688, 2162688, 2162688, 2162688, 2650112, 2744320, 2826240, 2928640, 2162688",
      /* 19672 */ "2973696, 2162688, 2162688, 2162688, 3100672, 2162688, 2162688, 0, 2, 0, 176128, 294912, 0, 0, 0, 0",
      /* 19688 */ "0, 2441216, 2449408, 0, 0, 0, 0, 0, 258048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 969",
      /* 19713 */ "2560000, 0, 2162688, 2551808, 2560000, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 19724 */ "2162688, 2162688, 3092480, 2162688, 2551808, 2560000, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 19735 */ "2162688, 2162688, 2162688, 3092480, 0, 0, 0, 0, 0, 2850816, 2162688, 2588672, 2162688, 2162688",
      /* 19749 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2588672, 2162688, 2162688, 2162688",
      /* 19760 */ "2162688, 853, 0, 0, 856, 2162688, 2162688, 2441216, 2449408, 2162688, 2162688, 2162688, 2162688",
      /* 19773 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2621440, 2162688, 2162688, 2162688, 2162688, 2686976",
      /* 19784 */ "2162688, 2703360, 2162688, 2711552, 2162688, 2162688, 2162688, 2162688, 2465792, 0, 2531328",
      /* 19795 */ "2985984, 0, 0, 0, 0, 2162688, 2162688, 2605056, 2162688, 2830336, 2162688, 2162688, 2162688",
      /* 19808 */ "2985984, 2162688, 2162688, 2605056, 2162688, 2830336, 2162688, 2162688, 2162688, 2985984, 2523136",
      /* 19819 */ "0, 0, 0, 0, 0, 258471, 258471, 258471, 258471, 258471, 258471, 258471, 258471, 258471, 258471",
      /* 19834 */ "258471, 258471, 258471, 258471, 258471, 258471, 0, 0, 0, 0, 0, 0, 2162688, 2162688, 2162688",
      /* 19849 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0",
      /* 19862 */ "2162688, 2162688, 2441216, 2449408, 2162688, 2162688, 2162688, 2162688, 0, 0, 2424832, 2162688",
      /* 19874 */ "2162688, 2162688, 2162688, 2981888, 2424832, 2162688, 2162688, 2162688, 2162688, 2981888, 2535424",
      /* 19885 */ "0, 0, 0, 0, 973, 0, 0, 0, 0, 0, 0, 318, 318, 0, 0, 982, 0, 2912256, 2162688, 2654208, 2932736",
      /* 19906 */ "2162688, 2162688, 2654208, 2932736, 2162688, 2637824, 2699264, 2555904, 2162688, 2555904, 2162688",
      /* 19917 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2473984, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 19937 */ "2162688, 2945024, 2945024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2106006, 0, 0, 0, 0, 0, 0, 0, 2, 3, 94212, 5",
      /* 19961 */ "6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 267, 267, 267, 267, 267, 267, 49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0",
      /* 19988 */ "0, 0, 0, 0, 0, 0, 297, 298, 299, 300, 0, 111011, 111011, 111011, 111011, 111011, 111011, 111011",
      /* 20006 */ "111011, 419, 419, 111011, 111011, 111011, 111011, 111011, 111011, 419, 111011, 111011, 111011, 419",
      /* 20020 */ "111011, 419, 419, 419, 419, 419, 419, 0, 0, 0, 0, 0, 0, 1672, 0, 0, 0, 0, 0, 0, 1679, 0, 0, 681, 0",
      /* 20045 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 301, 118784, 0, 0, 266, 118784, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 20074 */ "0, 0, 301, 0, 0, 0, 0, 0, 318, 266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 330, 0, 266, 266",
      /* 20103 */ "0, 0, 0, 0, 0, 0, 0, 266, 0, 0, 0, 266, 119155, 266, 266, 266, 266, 0, 0, 266, 0, 0, 2, 2, 3, 94212",
      /* 20129 */ "5, 6, 0, 0, 0, 0, 1018, 663, 0, 0, 0, 0, 0, 968, 0, 0, 0, 0, 0, 0, 966656, 0, 0, 0, 0, 0, 0, 402",
      /* 20157 */ "402, 402, 402, 402, 2309, 402, 0, 0, 2311, 0, 0, 32768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318",
      /* 20183 */ "318, 318, 2162688, 2162688, 0, 2, 6, 0, 0, 0, 266, 0, 0, 0, 2441216, 2449408, 0, 0, 0, 0, 0, 286720",
      /* 20205 */ "286720, 286720, 286720, 286720, 0, 0, 0, 0, 0, 286720, 286720, 286720, 0, 286720, 0, 0, 0, 0, 0, 0",
      /* 20225 */ "0, 0, 0, 0, 402, 402, 402, 1060, 402, 402, 0, 2, 2183420, 94212, 5, 6, 256, 0, 0, 0, 0, 0, 256, 0",
      /* 20249 */ "0, 0, 0, 0, 1305, 0, 0, 0, 0, 0, 1309, 0, 0, 0, 0, 0, 268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188836",
      /* 20278 */ "188836, 188836, 188836, 0, 318, 0, 122880, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 313, 314, 315",
      /* 20300 */ "316, 317, 0, 122880, 0, 122880, 0, 122880, 122880, 122880, 122880, 122880, 0, 0, 0, 0, 0, 0, 0, 947",
      /* 20320 */ "0, 0, 0, 0, 952, 0, 0, 0, 122880, 0, 0, 122880, 122880, 122880, 0, 0, 0, 0, 122880, 122880, 122880",
      /* 20341 */ "122880, 122880, 122880, 0, 122880, 122880, 122880, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276",
      /* 20361 */ "276, 0, 0, 0, 0, 0, 0, 147456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318, 318, 204800, 0, 0, 0",
      /* 20388 */ "670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 0, 0, 45056, 2162688, 2162688, 0, 2, 6, 0, 0, 0, 0",
      /* 20414 */ "931, 935, 0, 2441216, 2449408, 0, 0, 0, 0, 0, 307200, 0, 0, 2105344, 266, 267, 0, 0, 0, 0, 0, 0",
      /* 20436 */ "1385, 0, 0, 0, 0, 0, 1392, 0, 0, 402, 2162688, 2162688, 2162688, 3080192, 2162688, 2162688, 2162688",
      /* 20453 */ "2162688, 2162688, 2162688, 2162688, 2162688, 1515, 0, 0, 1520, 0, 318, 0, 0, 0, 131072, 131072",
      /* 20469 */ "131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 0",
      /* 20487 */ "0, 131072, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 344, 0, 0, 0, 0, 318, 0, 0, 0, 0, 0, 0",
      /* 20514 */ "135168, 0, 0, 0, 0, 0, 0, 0, 0, 2105344, 266, 267, 0, 0, 212992, 0, 0, 372, 0, 0, 0, 372, 0, 0, 0",
      /* 20539 */ "0, 0, 0, 0, 0, 0, 0, 0, 318, 318, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 1197, 0, 0, 1200",
      /* 20560 */ "2162688, 2162688, 2441216, 2449408, 2162688, 2162688, 2162688, 2162688, 853, 0, 90112, 856, 2162688",
      /* 20573 */ "2162688, 2441216, 2449408, 2162688, 2162688, 2162688, 2162688, 1198, 0, 0, 1201, 2162688, 2162688",
      /* 20586 */ "2441216, 2449408, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3080192",
      /* 20597 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0, 139264, 0, 0",
      /* 20612 */ "267, 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318, 318, 980, 0, 0, 0, 318, 267, 0, 0, 0, 0, 0, 0, 0",
      /* 20640 */ "0, 0, 0, 0, 0, 0, 0, 0, 344, 0, 267, 267, 0, 0, 0, 0, 0, 0, 0, 267, 0, 0, 0, 267, 45056, 139639, 0",
      /* 20667 */ "0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 591, 0, 0, 0, 0, 267, 267, 267, 267, 0, 0, 267, 0, 0",
      /* 20695 */ "2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 1050, 0, 0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 712, 402, 402",
      /* 20720 */ "402, 402, 722, 402, 402, 727, 2162688, 2162688, 0, 2, 6, 0, 0, 0, 0, 0, 0, 267, 2441216, 2449408, 0",
      /* 20741 */ "0, 0, 0, 0, 565248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1008, 0, 0, 0, 0, 0, 49152, 264, 264, 264, 40960",
      /* 20767 */ "264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 143624, 264",
      /* 20786 */ "143624, 264, 264, 143624, 143624, 264, 264, 143624, 143624, 143624, 143624, 264, 264, 319, 264",
      /* 20801 */ "143624, 264, 264, 264, 264, 264, 143624, 323, 264, 264, 264, 264, 264, 143624, 143624, 143624",
      /* 20817 */ "143624, 143624, 143624, 143624, 143624, 264, 264, 264, 264, 264, 264, 143683, 143624, 264, 264, 264",
      /* 20833 */ "264, 264, 264, 143683, 264, 264, 264, 143683, 45056, 143624, 143624, 143624, 143624, 264, 143624",
      /* 20848 */ "264, 264, 264, 264, 264, 264, 0, 0, 0, 264, 264, 0, 0, 264, 264, 143624, 264, 264, 264, 264, 264",
      /* 20869 */ "264, 264, 143624, 264, 264, 143624, 264, 264, 264, 264, 264, 264, 264, 0, 264, 264, 264, 264",
      /* 20887 */ "143624, 143624, 264, 143624, 143624, 143624, 143624, 143624, 143683, 143683, 143683, 143683, 143624",
      /* 20900 */ "143624, 143624, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 3067904, 0, 0, 0, 0, 0, 0, 0, 2179692",
      /* 20923 */ "2179692, 0, 0, 0, 0, 0, 1334, 1335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 690, 0, 0, 0, 0, 0, 0, 0, 318, 0, 0",
      /* 20951 */ "0, 155648, 0, 0, 0, 0, 0, 155648, 155648, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 155648, 155648, 155648",
      /* 20972 */ "155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648",
      /* 20984 */ "155648, 0, 0, 0, 0, 49152, 155648, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 623, 0, 0, 0, 0, 0",
      /* 21011 */ "0, 0, 3067904, 0, 0, 0, 0, 0, 0, 0, 318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 0, 0",
      /* 21040 */ "159744, 0, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744",
      /* 21053 */ "159744, 0, 0, 0, 0, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744",
      /* 21068 */ "159744, 159744, 159744, 159744, 159744, 159744, 0, 90633, 159744, 0, 0, 0, 0, 159744, 0, 0, 0",
      /* 21085 */ "90633, 90633, 90633, 90633, 90633, 159744, 159744, 90633, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 90112",
      /* 21103 */ "2162688, 2428928, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 21114 */ "2162688, 2162688, 2162688, 2162688, 2162688, 266, 0, 163840, 163840, 163840, 163840, 163840, 163840",
      /* 21127 */ "163840, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 1100, 1035, 0, 0, 0, 0, 0, 0, 942, 984, 1100, 0, 0",
      /* 21153 */ "0, 0, 1304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1615, 0, 0, 0, 0, 0, 318, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 21183 */ "167936, 0, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936",
      /* 21196 */ "167936, 167936, 167936, 167936, 167936, 167936, 167936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 21218 */ "217088, 49152, 167936, 0, 0, 40960, 167936, 167936, 0, 0, 167936, 0, 167936, 0, 167936, 0, 0, 0, 0",
      /* 21237 */ "0, 962560, 1052672, 0, 2290, 0, 0, 0, 0, 0, 0, 0, 644, 0, 0, 647, 0, 0, 0, 0, 0, 0, 2, 3, 253, 5, 6",
      /* 21264 */ "0, 257, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2596864, 0, 0, 2760704, 0, 0, 0, 172032, 172032, 172032, 172032",
      /* 21286 */ "172032, 172032, 172032, 53496, 53496, 2, 2, 3, 0, 5, 6, 0, 0, 0, 0, 1333, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 21311 */ "0, 0, 1677, 0, 0, 0, 0, 566, 0, 0, 0, 0, 0, 0, 0, 2105344, 266, 267, 0, 0, 0, 0, 0, 0, 0, 1105920",
      /* 21337 */ "0, 0, 0, 0, 0, 0, 0, 0, 272, 271, 0, 271, 271, 272, 272, 0, 522, 522, 53496, 2, 6, 0, 0, 0, 0, 0, 0",
      /* 21364 */ "0, 0, 0, 0, 0, 993, 0, 0, 0, 0, 998, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 358, 500, 1958",
      /* 21393 */ "500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1158, 500, 522, 522, 522",
      /* 21412 */ "2161, 522, 522, 522, 522, 522, 522, 522, 500, 500, 500, 522, 522, 522, 0, 0, 0, 0, 0, 0, 0, 0, 2210",
      /* 21435 */ "0, 0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 402, 402, 1080, 402, 402, 500, 500, 2376, 500, 2377",
      /* 21456 */ "2378, 500, 500, 500, 500, 500, 500, 522, 522, 522, 522, 500, 500, 522, 53496, 53496, 2, 2, 3, 94212",
      /* 21476 */ "5, 6, 0, 2446, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 0, 0, 0, 0, 0, 0, 0, 500, 2493, 500",
      /* 21500 */ "500, 500, 500, 500, 500, 500, 500, 522, 2502, 522, 522, 522, 522, 522, 500, 500, 500, 522, 522, 522",
      /* 21520 */ "0, 2283, 0, 0, 0, 0, 0, 500, 500, 500, 500, 500, 500, 522, 522, 522, 522, 522, 522, 0, 0, 0, 1286",
      /* 21543 */ "0, 0, 0, 1292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 692224, 0, 0, 500, 500, 500, 500, 522, 522",
      /* 21569 */ "522, 522, 0, 0, 500, 500, 522, 522, 248, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1372, 0, 0, 0, 0, 0",
      /* 21597 */ "361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 180769, 180769, 180769, 180769, 0, 0, 180769",
      /* 21619 */ "53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 1364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1718, 0, 402",
      /* 21646 */ "402, 402, 184320, 500, 500, 500, 500, 500, 500, 500, 500, 0, 522, 522, 522, 522, 522, 522, 874",
      /* 21665 */ "188836, 188836, 188836, 188836, 188836, 188836, 188836, 188836, 0, 0, 188836, 188836, 188836",
      /* 21678 */ "188836, 188836, 188836, 0, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 233472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 21703 */ "0, 0, 0, 0, 402, 2158592, 2158592, 0, 192512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 649, 0, 0, 0, 0",
      /* 21729 */ "0, 265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 322, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 21760 */ "0, 0, 45056, 0, 0, 265, 0, 265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1009, 0, 0, 0, 0, 362, 362, 362",
      /* 21787 */ "362, 0, 0, 362, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 1383, 1384, 0, 0, 1387, 0, 0, 0, 0",
      /* 21812 */ "0, 0, 402, 402, 1060, 402, 402, 402, 402, 402, 402, 402, 402, 0, 2099, 0, 0, 0, 0, 0, 0, 662, 500",
      /* 21835 */ "500, 500, 500, 500, 500, 500, 500, 0, 522, 522, 522, 522, 522, 522, 500, 500, 522, 522, 0, 0, 0, 0",
      /* 21857 */ "0, 0, 0, 0, 0, 0, 0, 0, 1297, 0, 0, 0, 1026, 1372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 345, 0, 0",
      /* 21887 */ "522, 1282, 1599, 0, 0, 0, 0, 1288, 1601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 590, 500, 500",
      /* 21914 */ "500, 500, 1781, 1985, 0, 0, 0, 0, 1787, 1987, 0, 0, 0, 0, 0, 0, 1854, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 21940 */ "1338, 0, 1340, 0, 0, 1343, 0, 1985, 0, 1987, 0, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 21961 */ "522, 522, 909, 522, 0, 0, 0, 320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 329, 0, 0, 0, 270, 270",
      /* 21989 */ "270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 0, 0, 0, 49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0",
      /* 22017 */ "270, 0, 0, 0, 0, 0, 0, 1871, 402, 1940, 402, 402, 402, 402, 402, 0, 0, 0, 0, 377, 364, 364, 364",
      /* 22040 */ "364, 364, 364, 200704, 200704, 200973, 200704, 200704, 200704, 200973, 200704, 200974, 200704",
      /* 22053 */ "200704, 200973, 200704, 200704, 200704, 200704, 200974, 200704, 200704, 200704, 200704, 200704",
      /* 22065 */ "200704, 200704, 200704, 200704, 200704, 200704, 0, 0, 0, 0, 0, 0, 1894, 0, 0, 0, 1898, 0, 0, 0, 0",
      /* 22086 */ "0, 0, 1320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1322, 0, 0, 0, 0, 0, 0, 0, 0, 151552, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 22116 */ "0, 0, 0, 0, 0, 346, 0, 0, 0, 0, 0, 3067904, 0, 0, 0, 0, 0, 0, 0, 0, 2179693, 0, 0, 0, 0, 0, 1349, 0",
      /* 22144 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 1323, 0, 0, 1326, 1327, 0, 2158592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 22172 */ "2163485, 2163485, 2442013, 2450205, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485",
      /* 22183 */ "2163485, 2163485, 2622237, 2163485, 2163485, 2163485, 2163485, 2687773, 2163485, 2704157, 2163485",
      /* 22194 */ "2712349, 2163485, 2163485, 2757405, 2163485, 2777885, 2798365, 2163485, 2163485, 2163485, 2835229",
      /* 22205 */ "2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 3027741, 2163485",
      /* 22216 */ "2163485, 3076893, 2163485, 3097373, 2163485, 2884381, 2163485, 2163485, 2163485, 2163485, 2163485",
      /* 22227 */ "2163485, 2163485, 2163485, 2163485, 2163485, 3068701, 2163485, 2163485, 2163485, 2163485, 853, 0, 0",
      /* 22240 */ "856, 2163543, 2163543, 2442071, 2450263, 2163543, 2163543, 2163543, 2163543, 2163543, 3122007",
      /* 22251 */ "2163485, 2163485, 2163543, 2163543, 0, 2494464, 0, 0, 0, 2826240, 2163543, 2757463, 2163543",
      /* 22264 */ "2777943, 2798423, 2163543, 2163543, 2163543, 2835287, 2163543, 2163543, 2884439, 2163543, 2163543",
      /* 22275 */ "2163543, 2163543, 2597719, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2708311, 2163543",
      /* 22286 */ "2163543, 2163543, 2163543, 2650967, 2745175, 2827095, 2929495, 2163543, 2974551, 2163543, 2163543",
      /* 22297 */ "2163543, 3101527, 2163485, 2163543, 2614045, 2163485, 2163485, 2163485, 2659101, 2163485, 2163485",
      /* 22308 */ "2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2786077, 2802461, 2810653, 2163485, 2163485",
      /* 22319 */ "2163485, 3080989, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 0, 0, 0",
      /* 22332 */ "0, 0, 0, 2070, 0, 0, 0, 0, 0, 0, 0, 0, 0, 949, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1025, 0, 0, 0, 0",
      /* 22363 */ "2163543, 2429783, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543",
      /* 22374 */ "2163543, 2163543, 2163543, 2163543, 2163543, 0, 0, 2581335, 2163543, 2163543, 2163543, 2163543",
      /* 22386 */ "2614103, 2163543, 2163543, 2163543, 2659159, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543",
      /* 22397 */ "3068759, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 0, 0, 0, 0, 0, 0",
      /* 22412 */ "0, 0, 2163485, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 3158016, 2158592, 0, 0, 0, 0",
      /* 22427 */ "0, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485",
      /* 22438 */ "2163543, 2163543, 2163543, 2163485, 2474781, 2478877, 2163485, 2163485, 2163485, 2519837, 2163485",
      /* 22449 */ "2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2597661, 2163485, 2163485, 2163485, 2163485",
      /* 22460 */ "2163485, 2708253, 2163485, 2163485, 2163485, 2163485, 2163485, 2761501, 2163485, 2163485, 2163485",
      /* 22471 */ "2855709, 2876189, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485",
      /* 22482 */ "2994973, 3019549, 2163485, 2163485, 2163485, 3052317, 0, 0, 0, 2163543, 2163543, 2163543, 2163543",
      /* 22495 */ "2474839, 2478935, 2163543, 2163543, 2163543, 2519895, 2163543, 2163543, 2163543, 2465792, 0",
      /* 22506 */ "2531328, 2985984, 0, 0, 0, 0, 2163485, 2163485, 2605853, 2163485, 2831133, 2163543, 2761559",
      /* 22519 */ "2163543, 2163543, 2163543, 2855767, 2876247, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543",
      /* 22530 */ "2163543, 2163543, 2163543, 3081047, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543",
      /* 22541 */ "2995031, 3019607, 2163543, 2163543, 2163543, 3052375, 2163543, 2163543, 2163543, 2163543, 2163543",
      /* 22552 */ "2163543, 2163543, 2163543, 3158871, 2163543, 0, 0, 0, 0, 2514944, 0, 0, 2543616, 2592768, 0, 0, 0",
      /* 22569 */ "0, 0, 0, 0, 976, 0, 0, 0, 318, 318, 0, 0, 0, 0, 0, 2163485, 2437917, 2163485, 2163485, 2163485",
      /* 22589 */ "2491165, 2163485, 2163485, 2528029, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485",
      /* 22600 */ "2163485, 2163485, 2163485, 2163485, 2581277, 2163485, 2163485, 2163485, 2163485, 2163485, 2601757",
      /* 22611 */ "2626333, 2163485, 2163485, 2163485, 2695965, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485",
      /* 22622 */ "2163485, 2163485, 2888477, 2163485, 2163485, 3146525, 2163485, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 22641 */ "666, 0, 0, 0, 2626391, 2163543, 2163543, 2163543, 2696023, 2163543, 2163543, 2163543, 2163543",
      /* 22654 */ "2163543, 2163543, 2163543, 2163543, 2888535, 2163543, 2163543, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0",
      /* 22671 */ "2441216, 2449408, 0, 0, 0, 0, 0, 1085440, 0, 0, 1085440, 0, 0, 0, 0, 1085440, 0, 0, 1085440, 0, 0",
      /* 22692 */ "0, 0, 0, 0, 1085440, 0, 0, 0, 3146583, 2163543, 2163485, 2163485, 2163485, 2163485, 2163543",
      /* 22707 */ "2163543, 2163543, 2163543, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 680, 0, 0, 0, 2158592",
      /* 22730 */ "2813952, 2158592, 2158592, 2158592, 0, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485",
      /* 22741 */ "2163485, 2163485, 0, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163485, 2548509",
      /* 22752 */ "2163485, 2163485, 2163485, 2163485, 2634525, 2163485, 2163485, 2716445, 2736925, 2163485, 2163485",
      /* 22763 */ "2814749, 2818845, 2163485, 2163485, 2163485, 2163485, 2499357, 2540317, 2544413, 2163485, 2163485",
      /* 22774 */ "2593565, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 854, 2163543",
      /* 22785 */ "2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 3027799, 2163543, 2163543, 3076951, 2163543",
      /* 22796 */ "3097431, 2163543, 2163543, 2163543, 2163485, 2908957, 2163485, 2163485, 2954013, 2163485, 2962205",
      /* 22807 */ "2163485, 2163485, 3023645, 3048221, 2163485, 2163485, 2163485, 2163485, 3175197, 2163543, 2962263",
      /* 22818 */ "2163543, 2163543, 3023703, 3048279, 2163543, 2163543, 2163543, 2163543, 3175255, 2163485, 2163485",
      /* 22829 */ "2163485, 2163543, 2163543, 2786135, 2802519, 2810711, 2163543, 2163543, 2163543, 2163543, 2163543",
      /* 22840 */ "2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 0, 2502656, 0, 0, 0, 0, 2158592, 0, 0, 0, 0",
      /* 22857 */ "0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 0, 2163485, 2163485, 2163485, 2163485, 2163485",
      /* 22872 */ "2163485, 2163485, 2163485, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 0, 0",
      /* 22884 */ "2892573, 2163485, 2163485, 2958109, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163543",
      /* 22895 */ "2163543, 2163543, 2163543, 2163543, 2499415, 2540375, 2544471, 2163543, 2163543, 2593623, 2163543",
      /* 22906 */ "2163543, 2163543, 2163543, 2163543, 2163543, 2892631, 2163543, 2163543, 2958167, 2163543, 2163485",
      /* 22917 */ "2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163543, 2163543, 2163543, 2163543",
      /* 22928 */ "2163543, 2163543, 2163543, 2163485, 2163485, 2163485, 2163543, 2163543, 2163543, 2457600, 0, 0, 0",
      /* 22941 */ "0, 2163485, 2163485, 2683677, 2741021, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485",
      /* 22952 */ "2163485, 2163485, 2163485, 2163485, 3121949, 2421591, 0, 2445312, 2494464, 2158592, 2744320",
      /* 22963 */ "2973696, 2744320, 0, 2158592, 0, 2163485, 2446109, 2454301, 2495261, 2163485, 2163485, 2163485",
      /* 22975 */ "2163485, 2163485, 2163485, 2163485, 2163485, 3158813, 2163485, 0, 0, 0, 0, 2121728, 0, 2163485",
      /* 22989 */ "2163485, 2650909, 2745117, 2827037, 2929437, 2163485, 2974493, 2163485, 2163485, 2163485, 3101469",
      /* 23000 */ "2163543, 2446167, 2454359, 2495319, 2560000, 0, 2163485, 2552605, 2560797, 2163485, 2163485",
      /* 23011 */ "2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 3093277, 2163543, 2552663, 2560855, 2163543",
      /* 23022 */ "2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 3093335, 0, 0, 0, 0, 0, 2850816",
      /* 23036 */ "2163485, 2589469, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163543, 2163543",
      /* 23047 */ "2589527, 2163543, 2163543, 2163543, 2163543, 2437975, 2163543, 2163543, 2163543, 2491223, 2163543",
      /* 23058 */ "2163543, 2528087, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2601815, 2163485, 2163485",
      /* 23069 */ "2163485, 2986781, 2163543, 2163543, 2605911, 2163543, 2831191, 2163543, 2163543, 2163543, 2986839",
      /* 23080 */ "2523136, 0, 0, 0, 0, 0, 1094068, 1094068, 1094068, 1094068, 1094068, 1094068, 1094068, 1094068",
      /* 23094 */ "1094068, 1094068, 1094068, 1094068, 1094068, 1094068, 1094068, 1094068, 0, 0, 0, 0, 0, 0, 2163485",
      /* 23109 */ "2163485, 2163485, 2163485, 2163485, 2163485, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543",
      /* 23120 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2473984, 0, 0, 2425629, 2163485, 2163485, 2163485",
      /* 23141 */ "2163485, 2982685, 2425687, 2163543, 2163543, 2163543, 2163543, 2982743, 2535424, 0, 0, 0, 0, 1631",
      /* 23155 */ "0, 0, 0, 0, 0, 0, 1637, 0, 1638, 1639, 0, 0, 0, 0, 1644, 0, 0, 0, 1647, 0, 0, 0, 0, 0, 0, 0, 628",
      /* 23182 */ "629, 0, 0, 0, 0, 634, 0, 0, 0, 2912256, 2163485, 2655005, 2933533, 2163485, 2163543, 2655063",
      /* 23198 */ "2933591, 2163543, 2637824, 2699264, 2556701, 2163485, 2556759, 2163543, 2634583, 2163543, 2163543",
      /* 23209 */ "2716503, 2736983, 2163543, 2163543, 2814807, 2818903, 2163543, 2163543, 2909015, 2163543, 2163543",
      /* 23220 */ "2954071, 2163485, 2163543, 2163485, 2163543, 2163485, 2163543, 2945821, 2945879, 0, 0, 0, 0, 0, 0",
      /* 23235 */ "0, 0, 265, 266, 267, 0, 0, 0, 0, 0, 0, 318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 0, 0, 217088",
      /* 23262 */ "217088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 295, 296, 0, 0, 0, 0, 0, 49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0",
      /* 23290 */ "0, 217088, 0, 0, 0, 0, 0, 1426, 0, 0, 0, 0, 0, 651264, 0, 0, 0, 0, 0, 612, 0, 0, 0, 0, 0, 0, 619",
      /* 23317 */ "318, 318, 318, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088",
      /* 23330 */ "217088, 217088, 217088, 217088, 217088, 217088, 0, 0, 0, 0, 0, 57344, 0, 0, 0, 28672, 0, 0, 2658304",
      /* 23349 */ "0, 2785280, 0, 0, 0, 0, 0, 0, 276, 277, 278, 279, 280, 281, 282, 0, 0, 0, 2162688, 266, 0, 0, 0",
      /* 23372 */ "266, 0, 267, 0, 0, 0, 267, 0, 0, 0, 2473984, 267, 0, 0, 0, 2486272, 0, 0, 0, 0, 0, 0, 0, 0, 2600960",
      /* 23397 */ "0, 0, 0, 0, 0, 1110016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 2162688, 2162688",
      /* 23422 */ "3145728, 2162688, 853, 0, 0, 0, 853, 0, 856, 0, 0, 0, 856, 0, 0, 0, 0, 1712, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 23448 */ "402, 402, 402, 402, 402, 1944, 402, 0, 0, 853, 0, 856, 0, 2162688, 2162688, 2162688, 2162688",
      /* 23465 */ "2162688, 2162688, 2162688, 2162688, 2547712, 2162688, 2162688, 2162688, 2162688, 2633728, 2162688",
      /* 23476 */ "2162688, 2715648, 2736128, 2162688, 2162688, 2813952, 2818048, 2162688, 2162688, 2908160, 2162688",
      /* 23487 */ "2162688, 2953216, 221727, 221727, 221727, 221727, 221605, 221605, 221738, 0, 0, 2, 2, 3, 94212, 5",
      /* 23503 */ "6, 0, 0, 0, 0, 1865, 0, 1867, 0, 0, 1869, 0, 1871, 0, 0, 1874, 0, 0, 0, 0, 1892, 0, 0, 0, 0, 0, 0",
      /* 23530 */ "0, 0, 1900, 0, 0, 0, 0, 364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 2158592, 2158592, 0, 0, 237568, 0",
      /* 23555 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1355, 0, 0, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 23576 */ "2162688, 2162688, 2162688, 237568, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 23587 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 245760, 0, 0, 2, 3, 94212, 5, 6, 0",
      /* 23603 */ "0, 249856, 0, 0, 0, 0, 249856, 0, 0, 0, 0, 0, 2109440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266, 266, 266",
      /* 23629 */ "266, 266, 266, 250278, 250278, 250278, 250278, 250278, 250278, 250278, 250278, 249856, 249856",
      /* 23642 */ "250278, 250278, 250278, 250278, 250278, 250278, 2158592, 2158592, 114688, 0, 241664, 0, 262144, 0",
      /* 23656 */ "0, 0, 0, 0, 0, 0, 0, 0, 311, 312, 0, 0, 0, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 23677 */ "2162688, 2162688, 2162688, 241664, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 23688 */ "2162688, 2162688, 2162688, 2162688, 2457600, 0, 0, 0, 0, 0, 2, 3, 94212, 5, 6, 0, 0, 0, 258048, 0",
      /* 23708 */ "0, 0, 0, 258048, 0, 0, 0, 0, 2043, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 0, 0, 0, 0, 0, 0",
      /* 23736 */ "274432, 0, 0, 0, 0, 0, 0, 2105344, 266, 267, 196608, 0, 0, 0, 0, 0, 0, 2083, 0, 0, 0, 0, 0, 0, 402",
      /* 23761 */ "402, 402, 0, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 522, 522, 522, 522, 522",
      /* 23781 */ "522, 522, 0, 2, 3, 94212, 2195710, 6, 0, 0, 0, 0, 258, 0, 0, 0, 0, 258, 0, 318, 0, 0, 0, 0, 0, 0, 0",
      /* 23808 */ "0, 0, 0, 270336, 0, 0, 0, 0, 0, 1610, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 285, 326, 326, 356, 0, 0",
      /* 23834 */ "270336, 270336, 270336, 270336, 0, 0, 270336, 0, 0, 2, 2, 3, 94212, 2195710, 6, 0, 0, 0, 0, 2069, 0",
      /* 23855 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2191, 0, 0, 0, 0, 245760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 23886 */ "1013, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 245760, 2162688",
      /* 23898 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2580480",
      /* 23909 */ "2162688, 2162688, 2162688, 2162688, 278528, 278528, 278528, 278528, 0, 0, 278528, 0, 0, 2, 2, 3",
      /* 23925 */ "94212, 5, 6, 0, 0, 0, 0, 2139, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1228, 522",
      /* 23946 */ "522, 522, 522, 53496, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 362, 362, 362, 362, 362",
      /* 23971 */ "49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402, 402, 402, 714, 402, 402, 402, 1519, 522, 522",
      /* 23995 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1038, 0, 0, 1902, 0, 0, 0, 0, 0, 0",
      /* 24018 */ "0, 0, 0, 0, 0, 0, 0, 664, 0, 0, 0, 0, 0, 0, 0, 1372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1378, 0, 0, 0",
      /* 24049 */ "0, 2186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 270336, 0, 0, 0, 0, 0, 1667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 24079 */ "0, 0, 0, 0, 589, 0, 49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 392, 0, 402, 402, 402, 402, 402, 0",
      /* 24105 */ "0, 402, 0, 500, 500, 500, 500, 500, 500, 2412, 500, 500, 500, 500, 500, 522, 522, 0, 402, 0, 0, 0",
      /* 24127 */ "0, 0, 0, 0, 0, 0, 0, 500, 520, 520, 520, 500, 523, 520, 520, 520, 520, 520, 520, 520, 520, 520, 523",
      /* 24150 */ "523, 523, 523, 523, 520, 520, 523, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 53497, 2, 3, 94212, 5, 6",
      /* 24172 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402, 402, 402, 1059, 402, 402, 286720, 286720, 286720, 286720, 286720",
      /* 24193 */ "286720, 286720, 286720, 0, 0, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 0, 0, 2, 2, 3",
      /* 24210 */ "94212, 5, 6, 0, 303104, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 24223 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 2936832, 0, 0, 3084288",
      /* 24236 */ "3129344, 0, 2940928, 2416640, 229376, 0, 0, 0, 0, 0, 0, 2723840, 0, 250, 3, 94212, 5, 255, 0, 0, 0",
      /* 24257 */ "0, 0, 259, 0, 0, 0, 0, 0, 0, 2436, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1513, 500, 0",
      /* 24280 */ "1519, 91311, 0, 0, 261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 605, 0, 0, 318, 0, 0, 0, 0, 0, 0",
      /* 24309 */ "0, 0, 0, 0, 0, 0, 290816, 0, 0, 0, 290816, 290816, 290816, 0, 0, 250, 250, 3, 94212, 5, 4297269, 0",
      /* 24331 */ "49152, 290816, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1390, 0, 0, 0, 402, 290816, 290816",
      /* 24354 */ "290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816",
      /* 24366 */ "290816, 290816, 0, 0, 0, 0, 0, 0, 567, 0, 0, 0, 0, 0, 2105344, 266, 267, 0, 0, 0, 0, 0, 0, 613, 0",
      /* 24391 */ "0, 0, 0, 0, 0, 318, 318, 318, 2162688, 2162688, 0, 250, 4297269, 0, 0, 0, 0, 0, 0, 0, 2441216",
      /* 24412 */ "2449408, 0, 0, 0, 0, 0, 2109440, 1019, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266, 267, 0, 0, 0, 573, 0, 0, 251",
      /* 24438 */ "3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 544, 544, 544, 544, 544, 544, 0, 262, 0, 0, 0, 0, 0",
      /* 24465 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 651, 0, 544, 544, 544, 544, 0, 0, 544, 0, 0, 4264500, 251, 3, 94212, 5",
      /* 24490 */ "6, 0, 0, 0, 0, 2211, 0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 1925, 402, 402",
      /* 24513 */ "2162688, 2162688, 0, 930, 6, 0, 0, 299008, 0, 0, 0, 0, 2441216, 2449408, 0, 0, 0, 0, 0, 2715648, 0",
      /* 24534 */ "0, 0, 3039232, 0, 0, 3022848, 0, 0, 0, 0, 0, 1051, 0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 1414",
      /* 24557 */ "402, 402, 1417, 0, 0, 0, 0, 0, 0, 0, 2188, 0, 0, 2190, 0, 0, 0, 0, 0, 0, 271, 272, 0, 0, 0, 0, 0, 0",
      /* 24585 */ "0, 0, 0, 0, 0, 0, 0, 678, 0, 0, 0, 318, 0, 0, 0, 0, 0, 0, 0, 272, 0, 0, 0, 0, 0, 0, 0, 989, 0, 0, 0",
      /* 24616 */ "0, 994, 0, 996, 0, 49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 271, 0, 400, 403, 403, 403, 403, 403",
      /* 24640 */ "424, 424, 424, 424, 424, 446, 446, 446, 446, 446, 446, 446, 446, 462, 466, 446, 446, 446, 446, 446",
      /* 24660 */ "446, 462, 474, 446, 446, 466, 446, 466, 466, 466, 466, 466, 498, 501, 501, 501, 501, 524, 501, 501",
      /* 24680 */ "501, 501, 501, 501, 501, 501, 501, 524, 524, 524, 524, 524, 546, 546, 555, 53496, 53496, 2, 2, 3",
      /* 24700 */ "94212, 5, 6, 0, 575, 0, 0, 578, 579, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1391, 0, 0, 1394, 402, 0, 654",
      /* 24727 */ "0, 0, 0, 658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 573, 0, 0, 0, 0, 0, 0, 0, 0, 671, 0, 0, 0, 0, 575, 0, 0",
      /* 24758 */ "0, 0, 0, 0, 0, 0, 2105344, 570, 571, 0, 0, 0, 0, 0, 0, 402, 402, 701, 402, 402, 402, 402, 402, 402",
      /* 24782 */ "402, 402, 402, 402, 724, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1083, 0, 1132, 1134, 500, 500, 500, 500",
      /* 24805 */ "500, 2132, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 0, 1783, 0, 0, 1519, 0, 402, 402, 0, 0",
      /* 24827 */ "0, 0, 0, 0, 731, 0, 0, 0, 0, 0, 0, 597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402, 402, 2217, 402, 402, 402",
      /* 24854 */ "402, 625, 0, 0, 0, 0, 771, 0, 0, 0, 402, 402, 701, 402, 402, 779, 724, 402, 402, 402, 625, 0, 0, 0",
      /* 24878 */ "658, 625, 0, 0, 0, 0, 0, 0, 0, 0, 2105344, 21049, 267, 0, 0, 0, 0, 0, 0, 0, 761, 500, 500, 802, 500",
      /* 24903 */ "500, 500, 500, 500, 500, 827, 829, 500, 834, 500, 837, 500, 500, 849, 500, 500, 500, 0, 522, 522",
      /* 24923 */ "522, 861, 522, 522, 522, 522, 522, 1236, 522, 522, 522, 522, 522, 522, 522, 522, 1246, 522, 0, 500",
      /* 24943 */ "500, 802, 500, 918, 837, 500, 500, 0, 522, 522, 861, 522, 926, 896, 522, 522, 53496, 2, 6, 0, 0, 0",
      /* 24965 */ "0, 932, 936, 0, 0, 0, 0, 0, 0, 627, 0, 0, 630, 0, 0, 0, 0, 635, 0, 402, 402, 402, 402, 1079, 402",
      /* 24990 */ "402, 402, 402, 0, 0, 0, 0, 0, 0, 0, 1132, 500, 500, 500, 500, 402, 1125, 0, 1104, 0, 0, 1013, 0, 0",
      /* 25014 */ "0, 0, 0, 1132, 500, 500, 500, 500, 500, 1162, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 25035 */ "655860, 500, 1967, 500, 1969, 402, 402, 402, 402, 1400, 402, 402, 402, 402, 402, 402, 402, 402, 402",
      /* 25054 */ "402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 402, 1446, 402, 402, 0, 0, 0, 0, 0, 1452, 1453, 1132, 500, 500",
      /* 25078 */ "1455, 500, 500, 500, 500, 853, 91311, 1132, 856, 522, 522, 522, 522, 1207, 522, 522, 1216, 500, 500",
      /* 25097 */ "1506, 500, 500, 500, 500, 1510, 500, 500, 500, 500, 1516, 1519, 91311, 1521, 1519, 522, 522, 1525",
      /* 25115 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 1536, 522, 522, 248, 2, 6, 0, 0, 0, 0, 933, 937, 0, 0",
      /* 25138 */ "0, 0, 0, 0, 761, 625, 0, 0, 0, 765, 0, 0, 0, 0, 0, 1606, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 25168 */ "667, 0, 0, 1656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 650, 0, 0",
      /* 25198 */ "0, 0, 402, 402, 1685, 1686, 402, 402, 402, 402, 402, 402, 402, 402, 1693, 402, 0, 0, 0, 0, 0, 0, 0",
      /* 25221 */ "0, 0, 335872, 0, 1132, 500, 500, 500, 500, 500, 2123, 500, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 25241 */ "500, 500, 975348, 500, 500, 500, 522, 0, 0, 0, 1704, 0, 0, 0, 0, 1715, 0, 0, 0, 0, 402, 402, 1721",
      /* 25264 */ "500, 500, 1735, 500, 1737, 500, 500, 500, 1740, 500, 500, 500, 500, 500, 500, 500, 500, 2134, 500",
      /* 25283 */ "500, 500, 500, 500, 500, 500, 500, 1754, 500, 500, 500, 500, 500, 500, 500, 500, 1767, 500, 500",
      /* 25302 */ "500, 500, 500, 500, 500, 500, 2125, 500, 500, 500, 500, 500, 500, 500, 500, 2328, 500, 500, 500",
      /* 25321 */ "500, 500, 500, 522, 0, 0, 0, 522, 522, 522, 522, 522, 1797, 522, 1799, 522, 522, 522, 1802, 522, 0",
      /* 25342 */ "2173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1102200, 1102200, 1102200, 1102200, 1102200, 1102200",
      /* 25362 */ "500, 500, 1844, 500, 500, 500, 500, 522, 522, 1848, 522, 522, 522, 522, 1599, 0, 0, 0, 0, 2289, 0",
      /* 25383 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2087, 2088, 0, 2090, 402, 2092, 1601, 0, 0, 1852, 0, 0, 0, 0, 0, 0",
      /* 25409 */ "1858, 0, 0, 0, 0, 0, 0, 660, 0, 0, 0, 0, 0, 574, 660, 0, 668, 500, 1983, 500, 500, 0, 1985, 0, 0, 0",
      /* 25435 */ "0, 0, 1987, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2039, 0, 0, 0, 0, 0, 2044, 0",
      /* 25464 */ "0, 0, 0, 0, 0, 0, 0, 0, 402, 2216, 402, 402, 402, 2219, 402, 2065, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 25491 */ "0, 0, 0, 0, 1045, 2077, 2078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 402",
      /* 25516 */ "402, 0, 0, 0, 402, 402, 2108, 402, 402, 0, 500, 500, 500, 500, 500, 500, 500, 500, 2380, 500, 500",
      /* 25537 */ "500, 522, 522, 522, 522, 522, 522, 2261, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 25557 */ "522, 522, 1816, 522, 2273, 522, 522, 522, 522, 500, 500, 500, 522, 522, 522, 0, 0, 0, 0, 0, 2512",
      /* 25578 */ "2513, 0, 500, 500, 500, 500, 500, 0, 2432, 0, 0, 2435, 0, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 25599 */ "500, 500, 0, 0, 0, 0, 1519, 0, 2461, 2462, 0, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 522",
      /* 25621 */ "522, 522, 522, 522, 1254, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 49152, 0, 377, 0, 40960",
      /* 25641 */ "0, 0, 377, 0, 0, 0, 0, 0, 0, 402, 402, 1059, 402, 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0",
      /* 25666 */ "500, 500, 500, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 475",
      /* 25686 */ "364, 364, 364, 364, 364, 364, 364, 364, 364, 364, 500, 500, 500, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 25710 */ "0, 0, 633, 0, 0, 0, 0, 0, 1372, 0, 0, 0, 0, 0, 0, 0, 0, 1376, 0, 0, 0, 0, 0, 0, 135168, 0, 135168",
      /* 25737 */ "135168, 135168, 135168, 135168, 135168, 135168, 135168, 0, 0, 135168, 0, 0, 2, 2, 3, 94212, 5, 6, 0",
      /* 25756 */ "0, 0, 0, 402, 1919, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 1421, 0",
      /* 25779 */ "0, 500, 500, 500, 1948, 1949, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1781, 0, 0, 0, 1519",
      /* 25800 */ "1787, 0, 0, 0, 500, 500, 500, 500, 2468, 500, 2470, 500, 2472, 500, 522, 522, 522, 522, 522, 1557",
      /* 25820 */ "1558, 522, 1560, 1561, 522, 522, 522, 522, 522, 522, 500, 500, 522, 522, 0, 0, 2354, 0, 0, 0, 522",
      /* 25841 */ "2478, 522, 2480, 522, 2482, 522, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 2438, 500, 500, 500, 500, 500",
      /* 25863 */ "500, 500, 500, 2500, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2165, 522, 500, 500, 500, 522",
      /* 25882 */ "522, 49152, 0, 378, 379, 40960, 379, 386, 378, 379, 386, 276, 386, 0, 386, 404, 404, 404, 404, 404",
      /* 25902 */ "425, 425, 425, 440, 442, 447, 447, 460, 447, 447, 447, 447, 447, 447, 447, 447, 447, 447, 447, 447",
      /* 25922 */ "447, 447, 447, 447, 447, 476, 447, 447, 447, 447, 447, 447, 447, 447, 447, 447, 502, 502, 502, 502",
      /* 25942 */ "525, 502, 502, 502, 502, 502, 502, 502, 502, 502, 525, 525, 525, 525, 525, 548, 548, 557, 53496",
      /* 25961 */ "53496, 2, 2, 3, 94212, 5, 6, 0, 622, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1086, 0, 0, 655",
      /* 25989 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 753, 0, 0, 622, 0, 0, 0, 0, 0, 0, 0, 0, 402, 402, 402, 402",
      /* 26018 */ "402, 402, 402, 0, 0, 0, 500, 838, 500, 500, 500, 500, 500, 500, 0, 522, 522, 522, 522, 522, 522",
      /* 26039 */ "522, 522, 522, 2268, 2269, 522, 522, 522, 522, 522, 0, 500, 500, 500, 500, 500, 838, 500, 500, 0",
      /* 26059 */ "522, 522, 522, 522, 522, 897, 0, 0, 985, 948, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 677, 0, 0, 0, 402",
      /* 26086 */ "402, 402, 402, 1067, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 0, 1418, 1419, 0, 0, 0",
      /* 26107 */ "1054, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1087, 0, 0, 0, 0, 0, 2920448, 0, 0, 0, 2158592, 2158592",
      /* 26132 */ "2158592, 2543616, 2158592, 2158592, 2158592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 522, 1218",
      /* 26153 */ "522, 522, 522, 522, 522, 1224, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2427, 0, 2429, 0",
      /* 26173 */ "0, 0, 1519, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1538, 500, 500",
      /* 26193 */ "500, 500, 1974, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1517, 1519, 91311, 1522",
      /* 26212 */ "522, 522, 2017, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 807412",
      /* 26230 */ "807434, 0, 2066, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 947, 0, 402, 402, 402, 2095, 402, 402",
      /* 26255 */ "402, 402, 0, 0, 0, 2100, 0, 0, 0, 2104, 0, 2106, 0, 402, 402, 402, 2109, 402, 0, 500, 500, 500, 500",
      /* 26278 */ "500, 500, 500, 1150, 500, 500, 500, 1154, 500, 500, 500, 500, 2171, 0, 0, 0, 2175, 0, 0, 0, 0, 0, 0",
      /* 26301 */ "2179, 0, 0, 0, 0, 0, 0, 634880, 2400, 0, 0, 2403, 2404, 0, 0, 0, 0, 0, 0, 761856, 0, 0, 0, 0, 0, 0",
      /* 26327 */ "0, 0, 0, 1636, 0, 0, 0, 0, 0, 0, 402, 0, 0, 0, 2224, 0, 0, 0, 0, 0, 402, 402, 402, 402, 0, 500, 500",
      /* 26354 */ "500, 500, 500, 2411, 500, 2413, 500, 500, 500, 500, 522, 522, 522, 522, 522, 2349, 522, 522, 500",
      /* 26373 */ "500, 522, 522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2181, 0, 0, 0, 0, 0, 500, 500, 500, 2467, 500",
      /* 26399 */ "500, 500, 500, 500, 500, 522, 522, 522, 522, 522, 1808, 1809, 522, 522, 522, 522, 522, 522, 522",
      /* 26418 */ "522, 522, 522, 1996, 522, 522, 522, 522, 522, 2477, 522, 522, 522, 522, 522, 522, 0, 0, 0, 0, 0, 0",
      /* 26440 */ "0, 0, 500, 500, 500, 500, 500, 0, 0, 500, 500, 500, 2558, 522, 522, 522, 2560, 0, 0, 500, 500, 522",
      /* 26462 */ "522, 500, 500, 500, 500, 522, 522, 522, 522, 0, 0, 0, 0, 413696, 2038, 49152, 0, 328, 0, 40960, 0",
      /* 26483 */ "0, 328, 0, 0, 388, 0, 393, 401, 405, 405, 405, 405, 405, 426, 426, 426, 426, 443, 448, 448, 448",
      /* 26504 */ "448, 448, 448, 448, 448, 448, 467, 448, 448, 448, 448, 448, 448, 448, 405, 448, 448, 467, 448, 467",
      /* 26524 */ "467, 467, 467, 467, 467, 503, 503, 503, 503, 526, 503, 503, 503, 503, 503, 503, 503, 503, 503, 526",
      /* 26544 */ "526, 526, 526, 526, 503, 503, 526, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 738, 0, 0, 0, 0, 0",
      /* 26568 */ "0, 0, 0, 0, 0, 0, 0, 738, 0, 500, 500, 500, 819, 500, 500, 500, 500, 0, 522, 522, 522, 878, 522",
      /* 26591 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 958, 0, 960, 0, 0",
      /* 26616 */ "962, 963, 0, 0, 0, 0, 0, 0, 0, 1021, 0, 0, 0, 0, 0, 0, 0, 1030, 0, 0, 1000, 0, 1002, 0, 0, 0, 0, 0",
      /* 26644 */ "0, 0, 0, 0, 0, 0, 1859, 0, 0, 0, 0, 402, 402, 1066, 402, 402, 402, 402, 402, 402, 402, 402, 402",
      /* 26667 */ "402, 402, 1074, 402, 0, 0, 0, 0, 0, 0, 0, 1130, 315392, 0, 0, 1132, 500, 500, 500, 500, 500, 1476",
      /* 26689 */ "500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 0, 0, 0, 1786, 1519, 0, 402, 1076, 402, 402, 402",
      /* 26710 */ "402, 402, 402, 402, 1083, 0, 0, 0, 0, 0, 0, 0, 1037, 0, 0, 0, 0, 0, 0, 0, 0, 576, 674, 675, 676, 0",
      /* 26736 */ "0, 0, 0, 953, 1109, 0, 0, 1112, 402, 402, 402, 402, 1117, 402, 402, 402, 402, 1122, 402, 0, 0, 0, 0",
      /* 26759 */ "0, 0, 0, 2228, 0, 402, 402, 402, 402, 2232, 500, 500, 500, 500, 853, 91311, 1132, 856, 522, 1204",
      /* 26779 */ "522, 522, 522, 522, 522, 522, 522, 1810, 522, 522, 1813, 522, 522, 522, 522, 522, 1172, 500, 500",
      /* 26798 */ "500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1192, 1329, 0, 1331, 0, 0, 0, 0, 0, 0",
      /* 26820 */ "0, 0, 0, 0, 0, 0, 0, 953, 0, 0, 402, 402, 402, 1448, 0, 0, 0, 0, 1070387, 0, 0, 1132, 500, 500, 500",
      /* 26845 */ "500, 0, 0, 0, 1986, 0, 1517, 0, 0, 0, 1988, 0, 1522, 1598, 0, 1599, 0, 0, 0, 0, 0, 1601, 0, 0, 0, 0",
      /* 26871 */ "0, 1604, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 500, 1736, 500",
      /* 26897 */ "500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 0, 0, 91311, 0, 500, 500, 500, 500, 1776",
      /* 26917 */ "500, 1778, 500, 500, 500, 0, 0, 0, 0, 1519, 0, 0, 0, 0, 106496, 106496, 106496, 0, 0, 0, 0, 0, 0, 0",
      /* 26941 */ "0, 0, 155648, 155648, 0, 0, 0, 0, 0, 0, 0, 0, 522, 522, 522, 522, 522, 522, 1798, 522, 522, 522",
      /* 26963 */ "522, 522, 522, 500, 500, 522, 522, 0, 0, 0, 0, 2356, 0, 1915, 1916, 0, 1918, 402, 402, 402, 402",
      /* 26984 */ "402, 402, 402, 402, 402, 402, 402, 402, 1405, 402, 402, 402, 0, 0, 500, 500, 1947, 500, 500, 500",
      /* 27004 */ "500, 500, 500, 500, 500, 500, 500, 500, 500, 1518, 1519, 91311, 1523, 500, 1971, 500, 500, 500, 500",
      /* 27023 */ "500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1501, 500, 522, 522, 1990, 522, 522, 522, 522",
      /* 27042 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 911, 0, 0, 402, 2094, 402, 402, 402, 402, 402, 402, 0",
      /* 27063 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 2120, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 27087 */ "500, 500, 500, 1968, 500, 2129, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 27106 */ "500, 500, 500, 522, 1985, 0, 1987, 0, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2147, 522, 522",
      /* 27126 */ "500, 500, 500, 500, 522, 522, 522, 522, 0, 0, 0, 2037, 0, 0, 0, 0, 290, 291, 292, 0, 0, 0, 0, 0, 0",
      /* 27151 */ "0, 0, 0, 663, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 954",
      /* 27182 */ "0, 0, 2294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1012, 0, 522, 522, 2448, 522, 522, 522, 522",
      /* 27208 */ "522, 522, 522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1295, 0, 0, 0, 0, 0, 0, 0, 500, 500, 500, 500, 500",
      /* 27234 */ "2469, 500, 500, 500, 500, 522, 522, 522, 522, 522, 2020, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 27253 */ "522, 2026, 522, 522, 2479, 522, 522, 522, 522, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 500, 2517, 500",
      /* 27275 */ "286, 287, 288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 967, 0, 0, 288, 326, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 27304 */ "0, 0, 0, 0, 0, 0, 1028, 0, 49152, 0, 0, 0, 40960, 0, 0, 0, 288, 287, 0, 0, 394, 287, 406, 406, 406",
      /* 27329 */ "406, 406, 427, 437, 427, 427, 427, 449, 449, 449, 449, 449, 449, 449, 449, 463, 468, 449, 449, 449",
      /* 27349 */ "449, 449, 449, 463, 406, 449, 449, 468, 449, 468, 468, 494, 468, 494, 468, 504, 504, 504, 504, 527",
      /* 27369 */ "504, 504, 504, 504, 504, 504, 504, 504, 504, 527, 527, 527, 527, 527, 504, 504, 527, 53496, 53496",
      /* 27388 */ "2, 2, 3, 94212, 5, 6, 0, 0, 0, 609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318, 318, 318, 0, 638, 0, 640, 0",
      /* 27416 */ "0, 0, 0, 0, 0, 0, 648, 0, 0, 0, 652, 698, 402, 402, 402, 703, 402, 402, 711, 402, 717, 402, 720",
      /* 27439 */ "402, 723, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 734, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 734, 0, 0",
      /* 27468 */ "736, 0, 758, 0, 0, 0, 762, 0, 0, 0, 0, 744, 0, 0, 0, 0, 0, 1645, 0, 1646, 0, 0, 0, 1650, 0, 0, 0, 0",
      /* 27496 */ "0, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 27508 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 762, 0, 756, 0, 0, 762, 0, 0, 744, 402, 775",
      /* 27525 */ "402, 402, 402, 402, 780, 402, 402, 402, 762, 0, 0, 744, 758, 762, 0, 0, 789, 0, 0, 0, 789, 793, 0",
      /* 27548 */ "0, 500, 500, 500, 805, 500, 500, 816, 500, 825, 500, 830, 500, 500, 500, 500, 500, 2250, 500, 500",
      /* 27568 */ "500, 500, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 0, 0, 0, 0, 2489, 2490, 0, 500, 836, 839",
      /* 27590 */ "843, 500, 500, 500, 500, 500, 0, 522, 522, 522, 522, 864, 522, 522, 500, 500, 500, 2030, 522, 522",
      /* 27610 */ "522, 2033, 0, 0, 0, 0, 0, 0, 0, 1673, 0, 0, 0, 0, 0, 0, 0, 0, 1662, 0, 0, 0, 0, 0, 0, 0, 875, 522",
      /* 27638 */ "884, 522, 889, 522, 522, 895, 898, 902, 522, 522, 522, 522, 0, 0, 1284, 0, 0, 0, 1290, 0, 0, 0, 0",
      /* 27661 */ "0, 0, 0, 0, 948, 0, 0, 0, 0, 0, 0, 0, 0, 500, 915, 500, 500, 500, 919, 843, 500, 0, 522, 923, 522",
      /* 27686 */ "522, 522, 927, 902, 522, 53496, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1899, 0, 0, 0, 0, 0, 956, 0",
      /* 27713 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 968, 0, 0, 0, 0, 111011, 111011, 111011, 0, 0, 2, 2, 3, 94212, 5",
      /* 27739 */ "6, 0, 0, 0, 0, 986, 0, 988, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1308, 651264, 0, 0, 0, 0, 0, 0, 971, 972, 0",
      /* 27767 */ "0, 0, 975, 0, 0, 0, 0, 318, 318, 0, 0, 0, 0, 0, 1660, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 733, 0, 0, 0, 0",
      /* 27797 */ "733, 0, 999, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1044, 0, 500, 500, 1174, 500, 500, 500, 500",
      /* 27823 */ "500, 500, 500, 500, 500, 1187, 500, 500, 500, 500, 500, 1164, 500, 500, 500, 500, 500, 500, 500",
      /* 27842 */ "500, 500, 500, 1468, 500, 500, 500, 500, 500, 500, 1194, 500, 500, 853, 91311, 1132, 856, 522, 522",
      /* 27861 */ "522, 522, 522, 522, 522, 522, 522, 522, 2456, 0, 2457, 0, 0, 0, 522, 522, 1219, 522, 522, 522, 1223",
      /* 27882 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 907, 522, 522, 522, 0, 0, 522, 522, 1234, 522",
      /* 27902 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 1243, 522, 522, 500, 500, 2029, 500, 522, 522, 2032",
      /* 27921 */ "522, 2034, 2035, 0, 0, 0, 0, 0, 626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 217088, 217088, 217088",
      /* 27944 */ "217088, 217088, 0, 1315, 1316, 0, 0, 1319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 601, 602, 0, 0, 0, 0, 0",
      /* 27969 */ "1346, 0, 0, 0, 0, 0, 1351, 0, 1353, 0, 0, 0, 0, 0, 0, 0, 1311, 0, 0, 0, 0, 0, 0, 0, 0, 1674, 0",
      /* 27996 */ "1676, 0, 0, 0, 0, 0, 0, 0, 0, 1363, 0, 0, 0, 0, 0, 0, 0, 0, 1367, 0, 0, 1370, 0, 1381, 1382, 0, 0",
      /* 28023 */ "0, 0, 0, 0, 0, 0, 0, 0, 1393, 0, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 500, 500, 2440, 500",
      /* 28050 */ "2442, 2443, 2444, 500, 1395, 1396, 402, 402, 402, 402, 402, 1402, 402, 402, 1404, 402, 402, 402",
      /* 28068 */ "402, 1408, 402, 402, 402, 1410, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 1420, 0, 0, 0, 0, 122880",
      /* 28090 */ "122880, 0, 0, 0, 2, 2, 2183420, 94212, 5, 6, 0, 0, 0, 0, 1034, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 28116 */ "3158016, 0, 2158592, 2158592, 2158592, 0, 1423, 0, 0, 0, 0, 0, 0, 0, 0, 1296, 1423, 0, 0, 0, 0, 0",
      /* 28138 */ "0, 2158592, 2482176, 2158592, 2158592, 2740224, 2158592, 2158592, 2482176, 2740224, 0, 1431, 0, 0",
      /* 28152 */ "0, 1435, 872448, 0, 0, 1438, 402, 402, 1408, 402, 402, 402, 1444, 500, 1458, 500, 500, 500, 500",
      /* 28171 */ "500, 500, 500, 1467, 500, 500, 500, 500, 1471, 500, 500, 500, 500, 853, 91311, 1132, 856, 1202, 522",
      /* 28190 */ "1205, 522, 522, 522, 522, 1213, 500, 500, 1474, 500, 500, 500, 500, 500, 500, 1480, 1482, 500, 500",
      /* 28209 */ "500, 500, 500, 500, 852, 500, 0, 522, 522, 522, 522, 522, 870, 522, 1487, 1488, 500, 1490, 1491",
      /* 28228 */ "500, 500, 500, 500, 500, 500, 1498, 500, 1500, 500, 500, 500, 500, 500, 2325, 500, 500, 500, 500",
      /* 28247 */ "500, 500, 500, 500, 500, 522, 2522, 522, 522, 522, 522, 522, 522, 522, 0, 0, 0, 500, 500, 500, 500",
      /* 28268 */ "1507, 500, 500, 500, 500, 500, 500, 1514, 0, 1519, 91311, 0, 0, 0, 0, 155648, 155648, 155648, 0, 0",
      /* 28288 */ "2, 2, 0, 94212, 5, 6, 126976, 1519, 1524, 522, 522, 1526, 522, 1528, 522, 522, 522, 522, 522, 522",
      /* 28308 */ "522, 1537, 522, 500, 500, 500, 500, 500, 500, 500, 500, 522, 522, 522, 522, 522, 522, 522, 1599, 0",
      /* 28328 */ "1568, 522, 1570, 522, 522, 522, 522, 522, 522, 1577, 522, 522, 522, 522, 522, 522, 500, 909812, 522",
      /* 28347 */ "909834, 2353, 0, 0, 2355, 0, 0, 1584, 1585, 500, 500, 1482, 1491, 500, 1590, 500, 1592, 522, 522",
      /* 28366 */ "1552, 1561, 522, 1597, 0, 0, 0, 1608, 1609, 0, 0, 0, 1613, 0, 0, 0, 0, 0, 0, 0, 0, 2658304, 0",
      /* 28389 */ "2785280, 0, 0, 0, 0, 0, 0, 0, 0, 892928, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 966, 0, 0, 0, 1666, 0",
      /* 28417 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1678, 0, 1680, 0, 0, 0, 0, 167936, 167936, 167936, 0, 0, 2, 2, 3",
      /* 28442 */ "94212, 5, 6, 0, 0, 0, 0, 1318, 0, 0, 0, 0, 0, 0, 0, 1325, 0, 0, 0, 0, 0, 1632, 0, 0, 0, 0, 0, 0, 0",
      /* 28471 */ "0, 0, 0, 631, 0, 0, 0, 0, 0, 0, 1683, 402, 402, 402, 402, 402, 402, 1689, 402, 402, 402, 402, 402",
      /* 28494 */ "402, 402, 402, 2098, 0, 0, 0, 0, 0, 0, 0, 288, 0, 0, 0, 0, 0, 0, 0, 45056, 0, 0, 0, 1609, 0, 1713",
      /* 28520 */ "0, 1714, 0, 0, 0, 0, 0, 402, 402, 402, 402, 402, 1118, 402, 402, 402, 402, 402, 402, 402, 1724, 402",
      /* 28542 */ "402, 402, 402, 402, 0, 0, 0, 0, 0, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 522, 522, 522",
      /* 28564 */ "500, 500, 500, 1762, 1763, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1744, 500",
      /* 28583 */ "500, 500, 0, 0, 0, 522, 522, 522, 522, 522, 522, 522, 522, 1800, 522, 522, 522, 522, 522, 522, 522",
      /* 28604 */ "2425, 522, 522, 0, 0, 0, 0, 0, 0, 0, 2199, 0, 0, 0, 0, 2203, 2204, 0, 0, 522, 1805, 522, 1807, 522",
      /* 28628 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1242, 522, 522, 522, 500, 500, 500, 500",
      /* 28647 */ "1846, 500, 500, 522, 522, 522, 522, 1850, 522, 522, 1599, 0, 0, 0, 0, 167936, 167936, 167936",
      /* 28665 */ "167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 0, 0, 0, 0, 1862, 0, 0, 0",
      /* 28682 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1320, 1901, 0, 0, 0, 0, 0, 0, 0, 0, 1908, 0, 0, 0, 0, 0, 0, 0",
      /* 28712 */ "1321, 0, 0, 0, 0, 0, 0, 0, 0, 977, 0, 0, 318, 318, 0, 981, 0, 402, 1928, 402, 402, 402, 402, 0, 0",
      /* 28737 */ "0, 0, 0, 0, 0, 0, 1007616, 0, 0, 0, 0, 200704, 200973, 200704, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0",
      /* 28762 */ "0, 1425, 0, 1427, 0, 0, 0, 0, 0, 0, 1429, 0, 0, 0, 0, 0, 2846720, 0, 0, 0, 0, 0, 0, 2805760, 0",
      /* 28787 */ "3178496, 2560000, 0, 0, 0, 520192, 1887, 0, 1007616, 364946, 402, 402, 402, 402, 402, 1008018, 0, 0",
      /* 28805 */ "0, 0, 291, 290, 0, 0, 0, 0, 0, 0, 0, 290, 0, 45056, 0, 827392, 500, 500, 500, 500, 500, 500, 500",
      /* 28828 */ "500, 500, 500, 500, 1954, 500, 1956, 500, 500, 500, 1973, 500, 500, 500, 500, 1978, 500, 500, 500",
      /* 28847 */ "500, 500, 500, 1982, 1008116, 500, 500, 500, 0, 1985, 0, 0, 0, 0, 0, 1987, 0, 0, 0, 0, 0, 0",
      /* 28869 */ "2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485, 2163485",
      /* 28880 */ "2163485, 2163485, 2163485, 2163485, 2163485, 522, 2016, 522, 522, 522, 522, 2021, 522, 522, 522",
      /* 28895 */ "522, 522, 522, 2025, 1008138, 522, 500, 500, 500, 500, 500, 500, 500, 1591, 522, 522, 522, 522, 522",
      /* 28914 */ "522, 522, 522, 522, 655882, 522, 2010, 522, 2012, 522, 522, 522, 522, 365044, 500, 500, 500, 365066",
      /* 28932 */ "522, 522, 522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1294, 0, 1296, 0, 0, 0, 402, 402, 402, 402, 2096, 402",
      /* 28956 */ "402, 402, 0, 0, 0, 0, 2101, 0, 0, 0, 0, 0, 1853, 0, 0, 0, 0, 0, 0, 0, 0, 1861, 0, 2105, 0, 0, 402",
      /* 28983 */ "402, 402, 402, 402, 0, 500, 500, 500, 500, 500, 500, 2118, 1985, 0, 1987, 0, 522, 522, 522, 522",
      /* 29003 */ "522, 522, 2145, 522, 522, 522, 522, 522, 522, 522, 1994, 522, 522, 522, 522, 1998, 522, 2000, 522",
      /* 29022 */ "2159, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 500, 500, 500, 522, 522, 522, 0, 0, 2284, 0",
      /* 29043 */ "0, 0, 0, 0, 2185, 0, 0, 0, 0, 0, 0, 0, 0, 2192, 2193, 0, 2194, 0, 905216, 0, 0, 0, 2197, 2198, 0, 0",
      /* 29069 */ "0, 0, 667648, 0, 0, 0, 0, 0, 0, 2772992, 0, 0, 0, 0, 2113536, 0, 0, 0, 0, 0, 0, 1436, 0, 402, 402",
      /* 29094 */ "402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 0, 2103, 0, 2221, 2222, 0, 2223, 0, 0, 0, 2227, 0",
      /* 29117 */ "479232, 402, 402, 2230, 402, 0, 500, 500, 500, 500, 2410, 500, 500, 500, 500, 500, 500, 500, 522",
      /* 29136 */ "522, 500, 500, 2236, 500, 500, 500, 500, 500, 500, 500, 2241, 500, 500, 2244, 500, 500, 500, 500",
      /* 29155 */ "500, 967156, 1073652, 522, 522, 522, 522, 522, 967178, 1073674, 0, 1286, 500, 500, 500, 500, 2249",
      /* 29172 */ "2251, 500, 500, 2254, 2255, 522, 522, 522, 2259, 522, 522, 500, 2028, 500, 500, 522, 2031, 522, 522",
      /* 29191 */ "0, 0, 2036, 0, 0, 0, 0, 0, 1905, 1906, 0, 0, 0, 0, 0, 0, 0, 0, 0, 616, 617, 618, 0, 318, 318, 318",
      /* 29217 */ "2274, 522, 522, 2277, 2278, 500, 500, 2280, 522, 522, 2282, 0, 0, 0, 0, 2286, 0, 0, 2288, 0, 0, 0",
      /* 29239 */ "0, 0, 0, 0, 0, 0, 0, 0, 901120, 0, 0, 0, 0, 217088, 217088, 217088, 0, 0, 2, 2, 3, 94212, 5, 6, 0",
      /* 29264 */ "0, 0, 0, 1659, 0, 0, 0, 0, 0, 0, 1372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1379, 0, 0, 2302, 0, 0",
      /* 29293 */ "0, 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 1933, 0, 0, 0, 0, 0, 522, 2335, 522, 522, 522",
      /* 29316 */ "522, 522, 522, 522, 522, 522, 522, 2343, 522, 522, 522, 522, 522, 2264, 522, 522, 2267, 522, 522",
      /* 29335 */ "522, 522, 522, 522, 2272, 522, 522, 2420, 522, 522, 522, 522, 522, 522, 522, 0, 0, 0, 0, 0, 0, 2177",
      /* 29357 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 3088384, 0, 57344, 0, 0, 0, 0, 2431, 0, 0, 0, 0, 0, 500, 500, 500, 500",
      /* 29383 */ "500, 500, 500, 500, 500, 2445, 0, 0, 0, 500, 500, 2466, 500, 500, 500, 500, 500, 500, 500, 522, 522",
      /* 29404 */ "2476, 500, 500, 2494, 500, 2496, 500, 500, 500, 500, 2501, 522, 522, 2503, 522, 2505, 522, 500, 500",
      /* 29423 */ "500, 500, 1588, 500, 500, 500, 522, 522, 522, 522, 1595, 522, 522, 500, 500, 500, 500, 522, 522",
      /* 29442 */ "522, 522, 0, 0, 0, 0, 0, 0, 0, 0, 2515, 500, 500, 500, 500, 0, 0, 500, 2532, 500, 500, 500, 2536",
      /* 29465 */ "522, 2538, 522, 522, 522, 2542, 0, 0, 0, 0, 326, 0, 327, 0, 0, 0, 0, 0, 0, 285, 327, 288, 0, 318, 0",
      /* 29490 */ "0, 0, 0, 0, 0, 322, 0, 0, 0, 0, 0, 0, 0, 293, 0, 0, 0, 0, 0, 0, 0, 0, 688, 0, 0, 0, 0, 695, 696, 0",
      /* 29520 */ "0, 0, 331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 995, 0, 0, 49152, 0, 0, 380, 40960, 380, 380, 289",
      /* 29547 */ "380, 380, 0, 380, 0, 380, 407, 407, 407, 407, 407, 0, 0, 0, 322, 444, 380, 380, 380, 380, 380, 380",
      /* 29569 */ "380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 407, 380, 380, 486, 380, 486, 486, 495, 486",
      /* 29589 */ "495, 486, 505, 505, 505, 505, 528, 505, 505, 505, 505, 505, 505, 505, 505, 505, 528, 528, 528, 528",
      /* 29609 */ "528, 505, 505, 528, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 664, 0, 0, 0, 0, 0, 0, 0, 774, 402",
      /* 29633 */ "402, 402, 402, 402, 402, 0, 1930, 0, 0, 0, 0, 0, 0, 0, 0, 662, 362, 0, 0, 0, 0, 0, 0, 0, 664, 0",
      /* 29659 */ "500, 500, 500, 500, 500, 500, 500, 820, 500, 500, 500, 500, 500, 500, 1464, 500, 500, 500, 500, 500",
      /* 29679 */ "500, 500, 500, 500, 500, 2330, 500, 500, 500, 500, 522, 0, 914, 500, 500, 820, 500, 500, 500, 500",
      /* 29699 */ "0, 922, 522, 522, 879, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 0, 0, 0, 0",
      /* 29721 */ "2460, 0, 0, 0, 1049, 0, 0, 0, 0, 0, 0, 402, 402, 402, 402, 1061, 402, 0, 0, 0, 0, 0, 2226, 0, 0, 0",
      /* 29747 */ "402, 2229, 402, 402, 0, 500, 500, 500, 2409, 500, 500, 500, 500, 500, 500, 500, 500, 522, 522, 0, 0",
      /* 29768 */ "0, 949, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1106, 0, 500, 1267, 500, 500, 500, 500, 500, 500, 522",
      /* 29792 */ "1275, 522, 522, 522, 522, 522, 522, 522, 2007, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1824",
      /* 29811 */ "1825, 522, 522, 522, 522, 522, 0, 1432, 0, 0, 0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 402, 402",
      /* 29833 */ "402, 402, 402, 402, 402, 402, 402, 402, 522, 1569, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 29853 */ "522, 522, 522, 522, 500, 522, 1722, 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 500, 500, 500",
      /* 29875 */ "500, 500, 500, 500, 819, 500, 500, 500, 500, 500, 522, 522, 1819, 522, 522, 522, 522, 522, 522, 522",
      /* 29895 */ "522, 522, 522, 522, 522, 522, 1229, 522, 522, 1876, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 29920 */ "1328, 1927, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 1934, 0, 0, 0, 0, 0, 0, 2871296, 0, 0, 0, 0, 0",
      /* 29945 */ "0, 0, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 2287, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1359, 0, 0",
      /* 29975 */ "2531, 500, 500, 500, 500, 500, 2537, 522, 522, 522, 522, 522, 0, 0, 1285, 0, 0, 0, 1291, 0, 0, 0, 0",
      /* 29998 */ "0, 0, 0, 0, 1039, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2557, 500, 500, 500, 2559, 522, 522, 522, 0, 0, 500",
      /* 30023 */ "500, 522, 522, 522, 522, 1542, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1551, 522, 49152, 0, 0",
      /* 30043 */ "381, 40960, 381, 381, 0, 381, 381, 0, 381, 395, 381, 408, 408, 408, 408, 408, 428, 428, 428, 428",
      /* 30063 */ "428, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 408, 450",
      /* 30083 */ "450, 450, 450, 450, 450, 450, 450, 450, 450, 506, 506, 506, 506, 529, 506, 506, 506, 506, 506, 506",
      /* 30103 */ "506, 506, 506, 529, 529, 529, 529, 529, 506, 506, 529, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 0",
      /* 30125 */ "0, 672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1042, 0, 0, 0, 522, 522, 53496, 2, 6, 0, 0, 0, 0, 933",
      /* 30153 */ "937, 0, 0, 0, 0, 0, 0, 680, 0, 0, 402, 402, 402, 402, 402, 402, 402, 402, 402, 1691, 1692, 402, 402",
      /* 30176 */ "402, 1046, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 2220, 1380, 0, 0, 0, 0, 0, 0, 0",
      /* 30202 */ "0, 0, 0, 0, 0, 0, 0, 402, 402, 402, 402, 1723, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 500",
      /* 30226 */ "500, 500, 500, 500, 500, 500, 2471, 500, 2473, 522, 522, 522, 500, 500, 500, 1845, 500, 500, 500",
      /* 30245 */ "522, 522, 522, 1849, 522, 522, 522, 0, 0, 1286, 0, 0, 0, 0, 0, 1292, 0, 0, 0, 0, 0, 0, 0, 2071, 0",
      /* 30270 */ "0, 0, 0, 0, 0, 0, 0, 0, 3088384, 0, 0, 0, 0, 0, 0, 0, 0, 2067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 30300 */ "2076, 1011712, 0, 0, 0, 0, 2187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 680, 0, 0, 0, 0, 0, 0, 0, 0, 2196, 0",
      /* 30328 */ "0, 0, 0, 2200, 0, 0, 0, 0, 0, 0, 0, 322, 0, 0, 0, 0, 0, 357, 0, 0, 2207, 0, 0, 0, 0, 0, 2212, 0, 0",
      /* 30357 */ "402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 1694, 2300, 0, 0, 0, 2304, 0, 2306",
      /* 30378 */ "402, 402, 402, 402, 402, 402, 0, 0, 0, 1932, 0, 0, 0, 0, 0, 0, 500, 2323, 500, 500, 500, 500, 2326",
      /* 30401 */ "500, 500, 500, 500, 500, 500, 500, 500, 522, 500, 522, 500, 522, 500, 522, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 30424 */ "0, 0, 0, 0, 0, 0, 0, 372, 2334, 522, 522, 522, 522, 522, 522, 522, 2341, 522, 522, 522, 522, 2344",
      /* 30446 */ "522, 522, 522, 522, 1555, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1567, 2368, 402, 402",
      /* 30465 */ "2369, 402, 402, 0, 0, 402, 0, 500, 500, 500, 500, 500, 2373, 522, 2385, 522, 522, 522, 522, 522",
      /* 30485 */ "522, 2391, 522, 522, 522, 522, 522, 500, 522, 500, 522, 2567, 2568, 500, 522, 0, 0, 0, 0, 0, 0, 0",
      /* 30507 */ "0, 0, 0, 0, 0, 0, 0, 2182, 0, 0, 500, 500, 2548, 2549, 500, 500, 522, 522, 2552, 2553, 522, 522, 0",
      /* 30530 */ "0, 2174, 0, 0, 0, 0, 0, 0, 2178, 0, 0, 0, 0, 0, 0, 1004, 0, 1006, 0, 0, 0, 0, 1011, 0, 0, 0, 0, 0",
      /* 30558 */ "610, 611, 0, 0, 0, 615, 0, 0, 0, 0, 318, 318, 318, 402, 729, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 30586 */ "0, 1358, 0, 402, 402, 729, 0, 0, 0, 0, 0, 0, 0, 0, 680, 0, 0, 0, 680, 0, 0, 796, 500, 500, 803, 500",
      /* 30612 */ "500, 500, 500, 500, 500, 500, 500, 500, 500, 0, 1784, 0, 0, 1519, 0, 0, 500, 500, 803, 500, 500",
      /* 30633 */ "500, 500, 850, 0, 522, 522, 862, 522, 522, 522, 522, 522, 410100, 500, 500, 410122, 522, 522, 0, 0",
      /* 30653 */ "0, 0, 0, 0, 1101, 962, 0, 0, 0, 0, 0, 0, 0, 0, 402, 1439, 402, 651666, 402, 402, 402, 402, 522, 909",
      /* 30677 */ "53496, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2365, 0, 0, 0, 0, 1249, 522, 522, 522, 522, 522, 522",
      /* 30703 */ "522, 522, 522, 522, 522, 522, 522, 522, 0, 1283, 0, 0, 0, 1289, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1675, 0",
      /* 30728 */ "0, 0, 0, 0, 0, 0, 1330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1653, 0, 402, 402, 1447, 402, 0",
      /* 30756 */ "0, 0, 0, 0, 0, 0, 1132, 500, 500, 500, 500, 0, 1985, 0, 0, 0, 0, 0, 1987, 0, 0, 0, 0, 0, 0, 2361, 0",
      /* 30783 */ "2362, 0, 0, 0, 2366, 0, 0, 0, 1605, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1376, 0, 0, 802816",
      /* 30811 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1097, 1098, 0, 0, 2312, 0, 0, 2313, 402, 402, 0, 500, 500",
      /* 30837 */ "500, 500, 500, 500, 500, 500, 500, 500, 2416, 500, 522, 522, 0, 402, 402, 402, 402, 402, 0, 0, 402",
      /* 30858 */ "2370, 500, 500, 500, 500, 500, 500, 500, 2238, 500, 500, 500, 500, 500, 500, 500, 500, 0, 522, 522",
      /* 30878 */ "522, 522, 522, 871, 522, 49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 396, 0, 409, 409, 409, 409",
      /* 30901 */ "409, 429, 429, 429, 429, 429, 451, 451, 451, 451, 451, 451, 451, 451, 464, 451, 451, 451, 451, 451",
      /* 30921 */ "451, 451, 464, 477, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 507, 507, 507, 507, 530, 507",
      /* 30941 */ "507, 507, 507, 507, 507, 507, 507, 507, 530, 530, 530, 530, 530, 549, 549, 558, 53496, 53496, 2, 2",
      /* 30961 */ "3, 94212, 5, 6, 0, 0, 0, 0, 683, 0, 0, 0, 0, 689, 0, 0, 0, 693, 0, 0, 0, 0, 0, 1880, 0, 0, 0, 0, 0",
      /* 30990 */ "1885, 0, 0, 1887, 1888, 0, 402, 402, 402, 704, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402",
      /* 31010 */ "402, 0, 0, 0, 1086, 0, 0, 0, 402, 402, 0, 0, 0, 0, 0, 0, 0, 733, 0, 0, 0, 0, 0, 0, 0, 1374, 0, 0, 0",
      /* 31039 */ "0, 0, 0, 0, 0, 1022, 0, 0, 0, 0, 0, 0, 0, 0, 0, 768, 0, 0, 0, 772, 0, 0, 402, 402, 402, 402, 402",
      /* 31066 */ "402, 402, 402, 1690, 402, 402, 402, 402, 402, 781, 402, 784, 0, 764, 0, 0, 0, 0, 764, 0, 772, 0, 0",
      /* 31089 */ "0, 772, 0, 0, 0, 500, 500, 500, 806, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1965, 500",
      /* 31110 */ "500, 500, 500, 500, 928, 910, 53496, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 45056",
      /* 31135 */ "0, 0, 1016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1311, 0, 0, 0, 1088, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 31164 */ "1094, 0, 0, 0, 0, 0, 0, 686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1093, 0, 0, 0, 0, 0, 0, 500, 500, 1139, 500",
      /* 31192 */ "500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 2138, 500, 500, 500, 1160, 500",
      /* 31211 */ "500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 2245, 2246, 0, 0, 0, 1303, 0, 0, 0",
      /* 31233 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 1334, 0, 0, 0, 1314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1618",
      /* 31263 */ "1345, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1357, 0, 0, 0, 0, 353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290, 0",
      /* 31293 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 1362, 0, 0, 0, 0, 0, 1365, 0, 0, 0, 0, 0, 0, 0, 334, 358, 0, 0, 0, 0, 0",
      /* 31323 */ "0, 45056, 402, 402, 402, 402, 402, 1412, 402, 402, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 791, 0",
      /* 31347 */ "0, 0, 0, 0, 1434, 0, 0, 0, 0, 402, 402, 402, 402, 1441, 402, 402, 402, 0, 651, 0, 0, 0, 0, 0, 0, 0",
      /* 31373 */ "0, 0, 0, 0, 2202, 0, 0, 0, 0, 0, 0, 0, 1643, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1652, 0, 0, 0, 0, 363",
      /* 31402 */ "365, 272, 0, 0, 0, 0, 272, 0, 370, 0, 45056, 1734, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 31424 */ "500, 500, 500, 500, 500, 1171, 0, 0, 0, 522, 522, 522, 1796, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 31445 */ "522, 522, 1240, 522, 522, 522, 522, 522, 0, 0, 1878, 0, 0, 0, 0, 1881, 0, 0, 0, 0, 0, 0, 0, 0, 599",
      /* 31470 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1903, 0, 0, 0, 0, 0, 0, 1909, 1910, 0, 0, 1913, 0, 0, 0, 0, 221569, 0",
      /* 31498 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1324, 0, 0, 0, 0, 1945, 0, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 31523 */ "500, 500, 500, 500, 500, 500, 1502, 500, 0, 0, 0, 2052, 0, 0, 0, 0, 0, 0, 2059, 2060, 0, 0, 0, 0, 0",
      /* 31548 */ "0, 3133440, 0, 2727936, 0, 0, 0, 0, 0, 2891776, 0, 500, 500, 2130, 500, 500, 500, 500, 2133, 500",
      /* 31568 */ "500, 500, 500, 2136, 500, 500, 500, 500, 500, 1463, 500, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 31587 */ "500, 1497, 500, 500, 500, 500, 500, 522, 522, 2151, 522, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 31606 */ "522, 2157, 522, 522, 522, 522, 1573, 1574, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 31625 */ "2166, 500, 500, 2169, 522, 522, 522, 2160, 522, 522, 522, 522, 2163, 522, 522, 522, 500, 500, 500",
      /* 31644 */ "522, 522, 522, 522, 1821, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1829, 522, 522, 2172, 0, 0",
      /* 31664 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1664, 0, 0, 0, 2209, 0, 0, 0, 0, 0, 2214, 402, 402, 402, 402",
      /* 31691 */ "2218, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 735, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 766, 0, 500",
      /* 31719 */ "500, 2248, 500, 500, 500, 500, 500, 500, 500, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 2527",
      /* 31739 */ "0, 522, 522, 2262, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2271, 522, 522, 522, 522, 1833",
      /* 31759 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 500, 500, 2168, 522, 522, 0, 0, 0, 2303, 0",
      /* 31780 */ "0, 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 455, 455, 455, 455, 455, 455, 2357, 0, 0, 0, 0",
      /* 31804 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1629, 402, 2406, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 31828 */ "500, 500, 522, 522, 522, 522, 2019, 522, 522, 522, 522, 2023, 522, 522, 522, 522, 522, 522, 522",
      /* 31847 */ "1257, 522, 522, 522, 522, 522, 522, 522, 0, 2518, 500, 500, 500, 522, 522, 522, 2523, 522, 2524",
      /* 31866 */ "522, 522, 522, 0, 0, 0, 0, 1287, 0, 0, 0, 1293, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 31894 */ "135168, 0, 0, 45056, 2563, 2564, 500, 522, 500, 522, 500, 522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 31918 */ "0, 0, 1299, 0, 0, 0, 0, 0, 0, 1818, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 31941 */ "522, 522, 1583, 0, 0, 332, 334, 0, 0, 0, 334, 0, 0, 0, 0, 0, 0, 0, 0, 764, 0, 618, 0, 0, 0, 0, 0",
      /* 31968 */ "49152, 0, 0, 382, 40960, 382, 382, 0, 382, 382, 389, 382, 0, 382, 410, 410, 410, 410, 410, 430, 430",
      /* 31989 */ "430, 430, 430, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452",
      /* 32009 */ "410, 452, 452, 452, 488, 452, 452, 452, 452, 452, 452, 508, 508, 508, 508, 531, 508, 508, 508, 508",
      /* 32029 */ "508, 508, 508, 508, 508, 531, 531, 531, 531, 531, 508, 508, 531, 53496, 53496, 2, 2, 3, 94212, 5, 6",
      /* 32050 */ "0, 0, 666, 0, 672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1341, 0, 0, 0, 0, 402, 402, 402, 402, 705",
      /* 32077 */ "402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 0, 0, 1085, 0, 0, 0, 0, 588, 0, 0, 0, 0, 0, 0, 0",
      /* 32102 */ "0, 0, 0, 0, 0, 666, 588, 0, 0, 0, 0, 250278, 250278, 250278, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0",
      /* 32128 */ "1904, 0, 0, 1907, 0, 0, 0, 0, 0, 0, 0, 0, 294, 0, 0, 0, 0, 0, 0, 0, 402, 402, 402, 650, 0, 0, 0, 0",
      /* 32156 */ "0, 0, 0, 0, 0, 588, 0, 0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 402, 402, 1121, 402, 402, 0, 794",
      /* 32180 */ "0, 500, 500, 500, 500, 808, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1153, 500, 500, 500, 500",
      /* 32200 */ "500, 500, 0, 0, 0, 1001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1377, 0, 0, 0, 1075, 402, 402, 402",
      /* 32226 */ "402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 0, 0, 1132, 1454, 500, 500, 1456, 500, 500, 500, 1140, 1146",
      /* 32248 */ "500, 500, 500, 500, 500, 500, 500, 500, 1156, 500, 500, 500, 500, 853, 91311, 1132, 856, 522, 522",
      /* 32267 */ "522, 522, 522, 522, 522, 522, 522, 522, 2155, 522, 522, 522, 522, 522, 1193, 500, 500, 500, 853",
      /* 32286 */ "91311, 1132, 856, 522, 522, 522, 522, 522, 522, 1209, 1215, 0, 500, 500, 1140, 500, 500, 1181, 500",
      /* 32305 */ "500, 522, 522, 1209, 522, 522, 1250, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1262, 522, 522",
      /* 32324 */ "522, 0, 1360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1654, 402, 402, 1398, 402, 402, 402, 402",
      /* 32350 */ "402, 402, 402, 402, 402, 402, 402, 402, 402, 1406, 402, 402, 500, 500, 1460, 1461, 500, 500, 500",
      /* 32369 */ "1465, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1184, 500, 500, 500, 500, 1190, 500, 500, 500",
      /* 32388 */ "500, 1475, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 0, 1519, 91311, 0, 1519, 522",
      /* 32408 */ "522, 522, 522, 522, 522, 1530, 1531, 522, 522, 522, 1535, 522, 522, 522, 522, 547, 547, 556, 53496",
      /* 32427 */ "53496, 2, 2, 3, 94212, 5, 6, 0, 402, 402, 402, 402, 1698, 402, 402, 402, 402, 0, 0, 0, 0, 0, 0, 0",
      /* 32451 */ "0, 0, 0, 0, 0, 0, 0, 522, 522, 1831, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 32473 */ "522, 1244, 522, 522, 0, 0, 0, 402, 402, 402, 402, 1921, 402, 402, 402, 402, 402, 402, 402, 402, 0",
      /* 32494 */ "0, 0, 0, 0, 500, 500, 1733, 0, 0, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1953, 500, 500",
      /* 32516 */ "500, 500, 500, 1492, 1493, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1782, 0, 0, 0, 1519",
      /* 32536 */ "1788, 0, 2040, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2063, 0, 0, 0, 2079, 0, 0, 0, 0, 0, 2085",
      /* 32564 */ "0, 0, 0, 0, 402, 2091, 402, 0, 0, 0, 0, 1128, 1087, 0, 0, 0, 0, 0, 1132, 1133, 500, 1136, 522, 2348",
      /* 32588 */ "522, 522, 522, 522, 500, 500, 522, 522, 0, 0, 0, 0, 0, 0, 0, 1437, 402, 402, 402, 402, 402, 1442",
      /* 32610 */ "402, 402, 500, 500, 500, 2495, 500, 2497, 500, 500, 500, 522, 522, 522, 522, 2504, 522, 2506, 500",
      /* 32629 */ "500, 500, 500, 2521, 522, 522, 522, 522, 522, 522, 522, 522, 0, 0, 0, 0, 2488, 0, 0, 2491, 500, 0",
      /* 32651 */ "0, 500, 2547, 500, 500, 500, 500, 522, 2551, 522, 522, 522, 522, 0, 0, 0, 0, 402, 402, 402, 0, 500",
      /* 32673 */ "500, 500, 500, 2318, 2319, 2320, 500, 0, 318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 324, 49152, 0",
      /* 32698 */ "0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 397, 0, 411, 411, 411, 411, 411, 431, 431, 439, 431, 431, 453",
      /* 32721 */ "453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 478, 453, 453, 453",
      /* 32741 */ "453, 453, 453, 453, 453, 453, 453, 509, 509, 509, 509, 532, 509, 509, 509, 509, 509, 509, 509, 509",
      /* 32761 */ "509, 532, 532, 532, 532, 532, 509, 509, 532, 53496, 53811, 2, 2, 3, 94212, 5, 6, 0, 653, 0, 0, 0, 0",
      /* 32784 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1665, 0, 402, 402, 402, 402, 706, 402, 402, 402, 402, 402, 402",
      /* 32808 */ "402, 402, 402, 402, 0, 0, 1705, 0, 0, 0, 0, 589, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 589, 0, 0",
      /* 32836 */ "0, 0, 0, 402, 402, 402, 402, 402, 402, 402, 714, 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 500",
      /* 32858 */ "500, 500, 500, 809, 500, 500, 821, 500, 500, 500, 500, 500, 500, 1477, 500, 500, 500, 500, 500, 500",
      /* 32878 */ "500, 500, 1486, 0, 500, 500, 500, 821, 500, 500, 500, 500, 0, 522, 522, 522, 880, 522, 522, 522",
      /* 32898 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 0, 0, 2458, 0, 0, 0, 0, 1110, 0, 0, 402, 402, 402",
      /* 32921 */ "402, 402, 402, 402, 1120, 402, 402, 402, 402, 0, 0, 1450, 0, 0, 0, 0, 1132, 500, 500, 500, 500, 0",
      /* 32943 */ "0, 1785, 0, 0, 0, 0, 0, 1791, 0, 0, 0, 500, 500, 500, 1141, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 32966 */ "500, 500, 500, 500, 500, 2137, 500, 500, 522, 522, 1251, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 32985 */ "522, 522, 522, 522, 0, 1599, 0, 0, 0, 0, 0, 1601, 0, 0, 0, 0, 0, 0, 0, 0, 2105344, 266, 21052, 0, 0",
      /* 33010 */ "0, 0, 0, 0, 500, 500, 1141, 500, 500, 500, 1272, 500, 522, 522, 1210, 522, 522, 522, 1280, 1519",
      /* 33030 */ "522, 522, 522, 522, 522, 522, 522, 522, 1532, 522, 522, 522, 522, 522, 522, 522, 1576, 522, 522",
      /* 33049 */ "522, 522, 1580, 522, 522, 522, 522, 522, 1540, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 33068 */ "522, 522, 522, 1264, 522, 0, 522, 1554, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 33088 */ "522, 522, 1245, 522, 0, 0, 1657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1342, 0, 0, 1789, 0, 0, 522",
      /* 33115 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 0, 522, 522, 1806",
      /* 33135 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1549, 522, 522, 974848, 0, 0, 0",
      /* 33155 */ "402, 402, 975250, 0, 500, 500, 500, 500, 500, 500, 500, 500, 0, 522, 522, 522, 522, 522, 522, 522",
      /* 33175 */ "522, 522, 975370, 522, 522, 522, 500, 500, 522, 522, 0, 0, 0, 0, 0, 0, 0, 1612, 0, 0, 0, 0, 0, 0, 0",
      /* 33200 */ "0, 1856, 0, 0, 0, 0, 0, 0, 0, 0, 318, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1616, 1617, 0",
      /* 33228 */ "340, 0, 0, 0, 0, 0, 340, 0, 0, 0, 0, 340, 0, 0, 0, 45056, 49152, 0, 0, 0, 40960, 0, 0, 295, 0, 0",
      /* 33254 */ "390, 0, 0, 0, 412, 412, 412, 412, 412, 432, 438, 438, 438, 432, 438, 438, 438, 438, 438, 438, 461",
      /* 33275 */ "438, 438, 438, 438, 438, 438, 438, 438, 438, 473, 461, 438, 412, 438, 438, 487, 438, 487, 487, 487",
      /* 33295 */ "487, 487, 487, 510, 510, 510, 510, 533, 510, 510, 510, 510, 510, 510, 510, 510, 510, 533, 533, 533",
      /* 33315 */ "533, 533, 510, 510, 533, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 592, 593, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 33340 */ "0, 0, 0, 0, 0, 1873, 0, 0, 637, 0, 0, 0, 0, 0, 0, 0, 0, 646, 0, 0, 0, 0, 0, 0, 0, 1625, 0, 0, 0, 0",
      /* 33370 */ "1628, 0, 0, 0, 0, 0, 630, 0, 0, 0, 0, 0, 0, 0, 0, 692, 0, 0, 0, 0, 0, 307, 308, 309, 310, 0, 0, 0",
      /* 33398 */ "0, 0, 0, 0, 731, 0, 731, 0, 0, 0, 0, 754, 0, 0, 402, 699, 402, 402, 707, 402, 402, 715, 402, 402",
      /* 33422 */ "402, 721, 402, 402, 402, 402, 0, 581632, 0, 0, 0, 0, 0, 1132, 500, 500, 500, 500, 500, 500, 2498",
      /* 33443 */ "500, 500, 522, 522, 522, 522, 522, 522, 522, 522, 2164, 522, 522, 500, 500, 500, 522, 522, 728, 402",
      /* 33463 */ "0, 0, 0, 0, 0, 730, 0, 0, 0, 0, 739, 0, 0, 0, 0, 0, 1939, 0, 402, 402, 402, 402, 402, 402, 402, 0",
      /* 33489 */ "0, 1931, 0, 0, 0, 0, 0, 0, 0, 0, 0, 747, 0, 627, 0, 0, 0, 0, 0, 0, 0, 0, 730, 0, 0, 0, 0, 402, 402",
      /* 33518 */ "402, 0, 500, 500, 2317, 500, 500, 500, 500, 500, 500, 1181, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 33538 */ "500, 500, 1979, 500, 500, 500, 500, 500, 590, 0, 757, 0, 0, 630, 0, 0, 0, 747, 0, 0, 0, 730, 590",
      /* 33561 */ "767, 0, 730, 0, 769, 630, 0, 0, 747, 0, 699, 402, 402, 777, 402, 402, 402, 402, 402, 402, 2097, 402",
      /* 33583 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 500, 2439, 500, 500, 500, 500, 500, 500, 402, 728",
      /* 33607 */ "402, 0, 0, 0, 0, 0, 0, 0, 747, 0, 630, 769, 0, 0, 0, 0, 402, 402, 402, 0, 500, 2316, 500, 500, 500",
      /* 33632 */ "500, 500, 500, 500, 2124, 500, 500, 500, 500, 500, 500, 500, 500, 0, 522, 522, 859, 522, 522, 522",
      /* 33652 */ "522, 0, 795, 0, 500, 798, 500, 500, 810, 500, 500, 822, 500, 500, 500, 832, 500, 500, 500, 500, 853",
      /* 33673 */ "91311, 1132, 856, 1203, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2455, 0, 0, 0, 0, 0, 0, 500",
      /* 33694 */ "500, 500, 847, 500, 500, 500, 500, 0, 522, 522, 857, 522, 522, 869, 522, 500, 500, 1587, 500, 500",
      /* 33714 */ "1589, 500, 500, 522, 522, 1594, 522, 522, 1596, 522, 500, 1586, 500, 651764, 500, 500, 500, 500",
      /* 33732 */ "522, 1593, 522, 651786, 522, 522, 522, 522, 1222, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 33751 */ "522, 500, 2167, 500, 522, 2170, 522, 881, 522, 522, 522, 891, 522, 522, 522, 522, 906, 522, 522",
      /* 33770 */ "522, 0, 0, 0, 0, 402, 402, 402, 0, 2315, 500, 500, 500, 500, 500, 500, 2321, 0, 798, 500, 500, 917",
      /* 33792 */ "500, 500, 500, 500, 0, 857, 522, 522, 925, 522, 522, 522, 522, 2350, 522, 500, 500, 522, 522, 0, 0",
      /* 33813 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 2180, 0, 933888, 0, 0, 944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1041, 0, 0, 0, 0",
      /* 33842 */ "0, 321, 0, 304, 366, 368, 0, 0, 0, 321, 0, 45056, 0, 0, 1085, 0, 0, 0, 0, 0, 0, 1103, 0, 0, 0, 0, 0",
      /* 33869 */ "0, 0, 1634, 0, 0, 0, 0, 0, 0, 0, 1640, 0, 0, 0, 977, 0, 402, 402, 1115, 402, 402, 402, 1119, 402",
      /* 33893 */ "402, 402, 402, 0, 0, 0, 1451, 0, 0, 0, 1132, 500, 500, 500, 500, 500, 500, 2252, 500, 500, 500",
      /* 33914 */ "2256, 522, 522, 522, 522, 522, 522, 522, 2154, 522, 522, 522, 522, 522, 522, 522, 522, 522, 905",
      /* 33933 */ "522, 522, 522, 522, 0, 0, 500, 500, 500, 1176, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 33953 */ "500, 500, 500, 2332, 500, 522, 0, 500, 500, 1268, 500, 500, 1271, 500, 500, 522, 522, 1276, 522",
      /* 33972 */ "522, 1279, 522, 522, 522, 886, 888, 522, 893, 522, 896, 522, 522, 908, 522, 522, 0, 0, 0, 1600, 0",
      /* 33993 */ "933, 0, 0, 0, 1602, 0, 937, 0, 0, 0, 0, 0, 1623, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 979, 318, 318, 0, 0",
      /* 34021 */ "0, 402, 402, 402, 1399, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 0, 1084, 0, 0",
      /* 34042 */ "0, 0, 0, 0, 0, 0, 1424, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1886, 0, 0, 0, 1445, 402, 402, 402",
      /* 34069 */ "1449, 0, 0, 0, 0, 0, 0, 1132, 500, 500, 500, 500, 500, 500, 2379, 500, 500, 500, 500, 500, 522, 522",
      /* 34091 */ "522, 522, 522, 522, 522, 2484, 2485, 0, 0, 0, 0, 0, 0, 2492, 500, 1505, 500, 500, 500, 500, 500",
      /* 34112 */ "500, 500, 500, 500, 500, 0, 1519, 91311, 0, 0, 0, 0, 258471, 258471, 258471, 0, 0, 2, 2, 3, 94212",
      /* 34133 */ "0, 6, 0, 0, 0, 0, 2053, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627, 0, 0, 0, 0, 1519, 522, 522, 522, 522",
      /* 34161 */ "522, 522, 522, 522, 522, 522, 1534, 522, 522, 522, 522, 522, 522, 1237, 522, 522, 1239, 522, 1241",
      /* 34180 */ "522, 522, 522, 522, 500, 500, 522, 53496, 53811, 2, 2, 3, 94212, 5, 6, 0, 1641, 1642, 0, 0, 0, 0, 0",
      /* 34203 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 2075, 0, 1682, 0, 1684, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402",
      /* 34227 */ "402, 402, 402, 1070, 402, 402, 402, 402, 402, 402, 0, 1710, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402",
      /* 34251 */ "402, 402, 402, 402, 1063, 500, 500, 1761, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 34270 */ "500, 500, 1157, 500, 500, 500, 500, 500, 1775, 500, 500, 500, 500, 500, 500, 0, 0, 0, 0, 1519, 0, 0",
      /* 34292 */ "0, 0, 1089536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1883, 0, 0, 0, 0, 0, 0, 0, 0, 0, 522, 522, 1795",
      /* 34319 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2024, 522, 522, 522, 522, 0, 0, 1864, 0, 0",
      /* 34340 */ "1866, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1020, 1020, 0, 0, 0, 0, 0, 1877, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 34369 */ "0, 0, 0, 0, 2205, 0, 0, 1890, 0, 1891, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1911, 0, 0, 0, 0, 0",
      /* 34397 */ "1917, 402, 402, 402, 402, 402, 1922, 402, 402, 402, 1924, 402, 402, 1926, 1936, 0, 1938, 0, 0, 0, 0",
      /* 34418 */ "402, 402, 402, 402, 1943, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 736, 0, 741, 0, 744, 0, 0, 500, 500",
      /* 34443 */ "500, 500, 500, 500, 500, 1951, 500, 500, 500, 500, 1955, 500, 500, 500, 500, 1144, 500, 1149, 500",
      /* 34462 */ "500, 500, 500, 500, 1155, 500, 500, 500, 500, 500, 1163, 500, 500, 1166, 500, 500, 500, 500, 500",
      /* 34481 */ "500, 500, 1478, 500, 500, 500, 500, 500, 500, 500, 500, 1466, 500, 500, 500, 500, 500, 500, 500",
      /* 34500 */ "1957, 500, 500, 500, 500, 500, 500, 500, 500, 1964, 500, 500, 500, 500, 500, 500, 500, 2253, 500",
      /* 34519 */ "500, 522, 522, 2258, 522, 522, 522, 0, 0, 0, 2068, 0, 0, 0, 0, 0, 0, 0, 2073, 0, 0, 0, 0, 0, 336, 0",
      /* 34545 */ "0, 0, 340, 341, 343, 296, 0, 0, 0, 0, 0, 0, 2080, 2081, 0, 0, 2084, 0, 0, 0, 0, 0, 402, 402, 402",
      /* 34570 */ "1071, 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 2107, 402, 402, 402, 402, 0, 500, 500, 500, 500",
      /* 34591 */ "500, 500, 500, 1165, 500, 500, 500, 500, 500, 500, 500, 500, 0, 522, 522, 522, 522, 522, 872, 522",
      /* 34611 */ "500, 500, 500, 2121, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1169, 500, 500",
      /* 34630 */ "500, 0, 0, 2184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912, 0, 0, 2234, 500, 500, 500, 500, 500",
      /* 34656 */ "500, 500, 500, 500, 500, 2242, 2243, 500, 500, 500, 500, 500, 1738, 500, 500, 500, 500, 500, 1743",
      /* 34675 */ "500, 1745, 500, 500, 500, 2247, 500, 500, 500, 500, 500, 500, 500, 500, 522, 2257, 522, 522, 522",
      /* 34694 */ "522, 522, 522, 1543, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1546, 522, 522, 522, 522",
      /* 34713 */ "522, 0, 569344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106496, 0, 522, 522, 522, 2336, 2337",
      /* 34737 */ "2338, 522, 522, 522, 522, 522, 522, 522, 522, 2345, 522, 522, 522, 887, 890, 522, 522, 522, 899",
      /* 34756 */ "903, 522, 522, 522, 522, 0, 0, 0, 0, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2148, 522",
      /* 34777 */ "2374, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 522, 522, 522, 522, 2260, 522, 522",
      /* 34796 */ "522, 2386, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 500, 522, 2565, 2566, 500, 522",
      /* 34815 */ "500, 522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1298, 0, 522, 522, 522, 2449, 522, 522, 522, 522",
      /* 34840 */ "522, 522, 0, 0, 0, 0, 2459, 0, 0, 0, 0, 1094068, 1094068, 1094068, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0",
      /* 34864 */ "0, 0, 2158592, 2158592, 2158592, 0, 2420736, 2162688, 2162688, 2482176, 2162688, 2162688, 2162688",
      /* 34877 */ "2584576, 2162688, 2162688, 2682880, 2740224, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 34888 */ "2162688, 2162688, 2162688, 2162688, 3121152, 2420736, 0, 0, 500, 500, 2533, 2534, 500, 500, 522",
      /* 34903 */ "522, 2539, 2540, 522, 522, 0, 0, 0, 0, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 34924 */ "522, 49152, 0, 300, 299, 40960, 299, 299, 300, 387, 299, 298, 299, 0, 299, 413, 413, 413, 413, 413",
      /* 34944 */ "433, 433, 433, 441, 445, 454, 454, 454, 454, 454, 454, 454, 454, 454, 469, 454, 454, 454, 454, 454",
      /* 34964 */ "454, 454, 413, 454, 454, 469, 454, 469, 493, 469, 493, 469, 493, 511, 511, 511, 511, 534, 511, 511",
      /* 34984 */ "511, 511, 511, 511, 511, 511, 511, 534, 534, 534, 534, 534, 511, 511, 534, 53496, 53496, 2, 2, 3",
      /* 35004 */ "94212, 5, 6, 0, 0, 576, 0, 0, 0, 580, 581, 582, 583, 584, 0, 0, 0, 0, 0, 0, 0, 1868, 0, 0, 0, 0",
      /* 35030 */ "1872, 0, 0, 0, 0, 0, 0, 624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 636, 0, 0, 639, 0, 641, 0, 643, 0, 0",
      /* 35059 */ "0, 0, 0, 0, 0, 0, 0, 1055, 402, 402, 1058, 402, 1062, 402, 0, 682, 0, 0, 685, 745472, 0, 0, 0, 0, 0",
      /* 35084 */ "0, 0, 0, 0, 0, 1024, 0, 0, 0, 1029, 0, 0, 402, 402, 702, 402, 402, 710, 402, 402, 402, 719, 402",
      /* 35107 */ "402, 402, 402, 726, 402, 785, 0, 612, 676, 787, 0, 0, 612, 0, 619, 0, 0, 676, 792, 402, 402, 0, 0",
      /* 35130 */ "0, 0, 0, 0, 732, 0, 0, 0, 0, 0, 743, 0, 0, 0, 0, 2158592, 2158592, 2158592, 0, 2421533, 2163485",
      /* 35151 */ "2163485, 2482973, 2163485, 2163485, 2163485, 2585373, 0, 612, 0, 0, 0, 0, 749, 750, 0, 751, 0, 0, 0",
      /* 35170 */ "0, 755, 0, 0, 0, 0, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2548567",
      /* 35185 */ "2163543, 2163543, 2163543, 2483031, 2163543, 2163543, 2163543, 2585431, 2163543, 2163543, 2683735",
      /* 35196 */ "2741079, 2163543, 2163543, 2163543, 2163543, 2163543, 2622295, 2163543, 2163543, 2163543, 2163543",
      /* 35207 */ "2687831, 2163543, 2704215, 2163543, 2712407, 2163543, 0, 0, 0, 500, 500, 804, 807, 500, 814, 500",
      /* 35223 */ "500, 500, 828, 831, 500, 500, 500, 500, 853, 91311, 1132, 856, 522, 522, 522, 522, 522, 522, 1210",
      /* 35242 */ "522, 500, 840, 844, 500, 500, 500, 500, 500, 0, 522, 522, 522, 863, 866, 522, 873, 0, 500, 500, 916",
      /* 35263 */ "500, 500, 840, 844, 921, 0, 522, 522, 924, 522, 522, 899, 903, 929, 53496, 2, 6, 0, 0, 0, 0, 0, 0",
      /* 35286 */ "0, 0, 0, 0, 0, 2113536, 0, 0, 0, 0, 1014, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 969, 0, 0, 0, 0, 0, 596, 0",
      /* 35315 */ "598, 0, 0, 0, 0, 0, 0, 0, 0, 1038, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1048, 0, 0, 0, 0, 0, 0, 0, 402, 402",
      /* 35344 */ "402, 402, 402, 402, 402, 1040384, 0, 402, 1126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1132, 500, 500, 500",
      /* 35367 */ "500, 500, 1764, 500, 500, 500, 1768, 500, 500, 500, 500, 500, 500, 500, 2239, 500, 500, 500, 500",
      /* 35386 */ "500, 500, 500, 500, 500, 500, 2382, 500, 522, 522, 522, 522, 1159, 500, 500, 500, 500, 500, 500",
      /* 35405 */ "500, 500, 500, 500, 500, 500, 500, 500, 500, 1485, 500, 500, 1175, 500, 500, 500, 500, 500, 500",
      /* 35424 */ "500, 500, 500, 500, 500, 1191, 500, 500, 500, 500, 1145, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 35443 */ "500, 500, 500, 500, 1757, 500, 500, 500, 0, 1361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1368, 1369, 0, 0",
      /* 35468 */ "0, 0, 2486272, 0, 0, 0, 0, 0, 0, 0, 0, 2600960, 0, 0, 0, 0, 0, 172032, 172032, 172032, 172032",
      /* 35489 */ "172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 0",
      /* 35502 */ "0, 0, 0, 1371, 0, 0, 0, 1373, 0, 672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1092, 0, 0, 0, 0, 0, 0, 1553, 522",
      /* 35530 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1842, 0, 1619, 0, 0, 0, 0, 0",
      /* 35552 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 1101824, 374, 1630, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1681",
      /* 35580 */ "500, 500, 1749, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1758, 500, 500, 0",
      /* 35600 */ "0, 0, 1879, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2089, 402, 402, 402, 0, 2051, 0, 0, 0, 0, 0, 0, 0",
      /* 35628 */ "0, 0, 0, 0, 0, 0, 0, 2048, 0, 2050, 0, 0, 0, 402, 402, 402, 402, 2110, 2111, 2112, 500, 500, 500",
      /* 35651 */ "500, 500, 500, 500, 2327, 500, 500, 500, 500, 500, 500, 500, 522, 500, 500, 500, 2237, 500, 500",
      /* 35670 */ "500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1188, 500, 500, 500, 0, 2396, 0, 0, 2399, 0, 0, 0",
      /* 35692 */ "0, 0, 0, 0, 0, 0, 0, 0, 1104, 0, 0, 0, 0, 0, 522, 2419, 522, 522, 522, 522, 522, 522, 522, 522, 0",
      /* 35717 */ "0, 0, 0, 0, 0, 0, 1895, 0, 0, 0, 0, 0, 0, 0, 0, 367, 309, 0, 0, 0, 0, 0, 45056, 522, 2447, 522, 522",
      /* 35744 */ "522, 2451, 522, 522, 522, 522, 0, 0, 0, 0, 0, 0, 0, 2056, 0, 0, 0, 0, 2061, 0, 0, 0, 0, 2530, 500",
      /* 35769 */ "500, 500, 500, 500, 500, 522, 522, 522, 522, 522, 522, 0, 2544, 2545, 0, 500, 500, 500, 500, 500",
      /* 35789 */ "500, 522, 522, 522, 522, 522, 522, 0, 0, 0, 0, 522, 522, 522, 522, 522, 2144, 522, 2146, 522, 522",
      /* 35810 */ "522, 2149, 360, 0, 0, 0, 0, 0, 360, 0, 0, 0, 0, 360, 0, 0, 0, 45056, 49152, 0, 0, 0, 40960, 0, 0, 0",
      /* 35836 */ "0, 0, 0, 0, 398, 0, 402, 402, 402, 402, 402, 0, 0, 402, 0, 500, 500, 500, 500, 2372, 500, 455, 455",
      /* 35859 */ "455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 479, 455, 455, 455, 455, 455",
      /* 35879 */ "455, 455, 455, 455, 499, 512, 512, 512, 512, 535, 512, 512, 512, 512, 512, 512, 512, 512, 512, 535",
      /* 35899 */ "535, 535, 535, 535, 550, 550, 559, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 748, 0, 0, 0, 0, 0",
      /* 35923 */ "600, 0, 0, 0, 600, 0, 0, 0, 0, 0, 2082, 0, 0, 0, 2086, 0, 0, 0, 402, 402, 402, 402, 402, 0, 500",
      /* 35948 */ "500, 500, 500, 500, 500, 500, 500, 1495, 500, 500, 500, 500, 500, 500, 500, 500, 1511, 500, 500",
      /* 35967 */ "500, 0, 1519, 91311, 0, 402, 783, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2062, 0, 0, 500, 500",
      /* 35993 */ "500, 848, 500, 500, 500, 500, 0, 522, 522, 522, 522, 522, 522, 522, 522, 1811, 522, 522, 522, 522",
      /* 36013 */ "522, 522, 522, 522, 1823, 522, 522, 522, 522, 522, 522, 522, 522, 1545, 522, 522, 522, 522, 522",
      /* 36032 */ "522, 522, 522, 1225, 522, 522, 522, 522, 522, 522, 522, 522, 1226, 522, 522, 522, 522, 522, 522",
      /* 36051 */ "522, 522, 1258, 522, 522, 522, 522, 522, 522, 0, 0, 947, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1043, 0",
      /* 36076 */ "0, 0, 0, 522, 522, 522, 2142, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1227, 522, 522, 522, 522",
      /* 36097 */ "522, 522, 0, 1047, 0, 0, 0, 0, 0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 713, 402, 718, 402, 402",
      /* 36120 */ "402, 402, 725, 402, 402, 1065, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402",
      /* 36140 */ "1703, 1704, 0, 0, 1706, 0, 0, 500, 500, 500, 1142, 500, 500, 500, 500, 1152, 500, 500, 500, 500",
      /* 36160 */ "500, 500, 500, 1182, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1481, 500, 500, 500, 500, 500",
      /* 36179 */ "500, 500, 500, 500, 1177, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1189, 500, 500, 500, 500",
      /* 36198 */ "853, 91311, 1132, 856, 522, 522, 522, 522, 522, 522, 1211, 522, 0, 500, 500, 1142, 500, 500, 500",
      /* 36217 */ "500, 500, 522, 522, 1211, 522, 522, 522, 522, 522, 522, 1575, 522, 522, 522, 522, 522, 522, 522",
      /* 36236 */ "522, 522, 522, 1261, 522, 522, 522, 522, 0, 0, 0, 0, 1030, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2291",
      /* 36262 */ "2292, 0, 0, 500, 1748, 500, 500, 1751, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 36282 */ "1769, 500, 500, 500, 1790, 0, 0, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 36302 */ "1565, 522, 522, 0, 1863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2074, 0, 0, 2195, 0, 0, 0, 0, 0",
      /* 36330 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1875, 2395, 0, 2397, 0, 0, 0, 0, 0, 0, 2402, 0, 0, 0, 2405, 0, 0, 0",
      /* 36358 */ "0, 522, 522, 2141, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1838, 522, 1840, 522, 522, 522",
      /* 36378 */ "0, 0, 2433, 2434, 0, 851968, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 2135, 500, 500",
      /* 36398 */ "500, 500, 0, 0, 0, 673, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2297, 0, 0, 0, 0, 402, 402, 402, 402",
      /* 36425 */ "708, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 2102, 0, 0, 0, 0, 0, 734, 0",
      /* 36449 */ "0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 402, 1069, 402, 402, 402, 402, 402, 402, 402, 402, 0, 0",
      /* 36471 */ "0, 0, 0, 500, 1732, 500, 0, 0, 0, 500, 500, 500, 500, 811, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 36493 */ "500, 1496, 500, 500, 500, 500, 500, 500, 522, 522, 53496, 2, 6, 0, 0, 0, 0, 934, 938, 0, 0, 0, 0, 0",
      /* 36517 */ "0, 1036, 0, 0, 0, 1040, 0, 0, 0, 0, 0, 0, 659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 943, 0, 0, 0, 0, 0, 0, 0",
      /* 36547 */ "0, 0, 0, 0, 0, 0, 2322, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 522",
      /* 36569 */ "522, 522, 1221, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1230, 302, 0, 0, 0, 0, 0, 0",
      /* 36591 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 1914, 0, 318, 0, 0, 0, 0, 301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 36622 */ "0, 2064, 49152, 0, 302, 301, 40960, 301, 301, 302, 301, 301, 0, 301, 0, 301, 414, 414, 414, 414",
      /* 36642 */ "414, 0, 0, 0, 0, 302, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301",
      /* 36663 */ "301, 301, 414, 301, 301, 301, 301, 301, 301, 301, 301, 497, 301, 513, 513, 513, 513, 536, 513, 513",
      /* 36683 */ "513, 513, 513, 513, 513, 513, 513, 536, 536, 536, 536, 536, 513, 513, 536, 53496, 53496, 2, 2, 3",
      /* 36703 */ "94212, 5, 6, 0, 0, 0, 601, 0, 0, 0, 0, 0, 0, 0, 691, 0, 0, 0, 0, 0, 0, 1052, 1053, 0, 0, 402, 402",
      /* 36730 */ "402, 402, 402, 402, 1413, 402, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 734, 0, 0, 745, 746, 0, 0, 0",
      /* 36756 */ "0, 0, 0, 745, 0, 0, 0, 752, 0, 0, 0, 0, 0, 2295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 992, 0, 0, 0, 0, 0",
      /* 36786 */ "0, 677, 0, 0, 0, 760, 0, 0, 746, 0, 0, 0, 0, 0, 0, 0, 402, 402, 1941, 402, 402, 402, 402, 0, 0, 782",
      /* 36812 */ "402, 402, 0, 746, 0, 0, 0, 0, 746, 0, 0, 770, 0, 657, 0, 0, 0, 0, 2646016, 0, 2781184, 0, 0, 0, 0",
      /* 36837 */ "0, 0, 3125248, 0, 0, 0, 0, 0, 188836, 188836, 188836, 188836, 188836, 0, 0, 0, 0, 0, 188836, 188836",
      /* 36857 */ "188836, 0, 188836, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 342, 0, 0, 0, 347, 342, 0, 0, 0, 500, 799, 500",
      /* 36882 */ "500, 500, 500, 817, 500, 500, 500, 500, 833, 835, 500, 500, 845, 500, 500, 500, 500, 500, 0, 522",
      /* 36902 */ "522, 858, 522, 522, 522, 522, 522, 522, 1834, 522, 1836, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 36921 */ "2008, 522, 522, 522, 522, 522, 522, 522, 522, 2022, 522, 522, 522, 522, 522, 522, 522, 522, 897",
      /* 36940 */ "522, 522, 522, 522, 522, 0, 0, 876, 522, 522, 522, 522, 892, 894, 522, 522, 904, 522, 522, 522, 522",
      /* 36961 */ "0, 0, 0, 0, 522, 2140, 522, 522, 2143, 522, 522, 522, 522, 522, 522, 522, 522, 901, 522, 522, 522",
      /* 36982 */ "522, 522, 0, 0, 0, 799, 500, 500, 500, 835, 500, 845, 500, 0, 858, 522, 522, 522, 894, 522, 522",
      /* 37003 */ "522, 1252, 522, 522, 522, 1255, 522, 522, 522, 522, 522, 522, 522, 0, 1282, 0, 0, 0, 1288, 0, 0, 0",
      /* 37025 */ "0, 0, 0, 0, 0, 0, 284, 284, 0, 328, 0, 0, 0, 904, 522, 53496, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 37054 */ "1339, 0, 0, 0, 0, 0, 0, 0, 0, 1017, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200704, 269, 270, 0, 0, 0",
      /* 37082 */ "0, 1033, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364544, 0, 0, 0, 1124, 0, 0, 1017, 0, 0, 0, 1129, 0, 0",
      /* 37110 */ "0, 1131, 1132, 500, 1135, 500, 500, 500, 500, 1161, 500, 500, 500, 500, 500, 1167, 500, 500, 500",
      /* 37129 */ "500, 500, 500, 1752, 1753, 500, 1755, 500, 500, 500, 500, 500, 500, 500, 2499, 500, 522, 522, 522",
      /* 37148 */ "522, 522, 522, 522, 522, 2426, 522, 0, 0, 0, 2430, 0, 0, 500, 1173, 500, 500, 500, 500, 500, 500",
      /* 37169 */ "500, 500, 500, 500, 500, 500, 500, 500, 1759, 500, 0, 500, 500, 500, 500, 1270, 500, 500, 1273, 522",
      /* 37189 */ "522, 522, 522, 1278, 522, 522, 522, 522, 2388, 522, 2389, 2390, 522, 522, 522, 522, 522, 522, 500",
      /* 37208 */ "522, 500, 500, 500, 500, 500, 500, 500, 500, 500, 522, 522, 522, 522, 522, 500, 2279, 500, 522",
      /* 37227 */ "2281, 522, 0, 0, 0, 0, 0, 2176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 991, 0, 0, 0, 0, 0, 0, 1281, 0, 0, 0, 0",
      /* 37256 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2206, 0, 0, 0, 1332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1354, 0",
      /* 37286 */ "0, 0, 0, 0, 1457, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1503",
      /* 37307 */ "500, 1473, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1771, 500, 1519",
      /* 37326 */ "522, 522, 522, 522, 1527, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2156, 522, 522",
      /* 37345 */ "522, 522, 0, 0, 1620, 1621, 1622, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1389, 0, 0, 0, 0, 402, 1655, 0",
      /* 37371 */ "0, 0, 0, 0, 311296, 1661, 0, 0, 0, 0, 0, 0, 0, 0, 1337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1668, 0, 1670",
      /* 37398 */ "1671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1614, 0, 0, 0, 0, 0, 402, 1695, 1696, 402, 402, 402, 402, 402",
      /* 37423 */ "402, 0, 0, 0, 0, 0, 1707, 0, 0, 0, 0, 2887680, 0, 0, 2158592, 2158592, 2158592, 2158592, 2158592",
      /* 37442 */ "2158592, 2158592, 0, 0, 0, 0, 0, 0, 0, 2162688, 2162688, 2428928, 2162688, 2162688, 500, 1760, 500",
      /* 37459 */ "500, 500, 500, 500, 1766, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1741, 500, 500, 500, 500",
      /* 37478 */ "500, 500, 311796, 1843, 500, 500, 500, 500, 500, 311818, 1847, 522, 522, 522, 522, 522, 0, 0, 0, 0",
      /* 37498 */ "568, 0, 0, 0, 2105344, 266, 267, 0, 0, 0, 0, 0, 0, 619, 0, 643, 402, 402, 776, 402, 778, 402, 402",
      /* 37521 */ "1889, 0, 0, 0, 0, 1893, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1649, 0, 0, 0, 0, 0, 0, 1937, 0, 0, 0, 0, 0",
      /* 37550 */ "402, 402, 402, 1942, 402, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 737, 0, 742, 0, 0, 0, 763, 0, 0, 0",
      /* 37576 */ "0, 0, 574, 0, 0, 0, 0, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1952, 500, 500, 500, 500, 500",
      /* 37598 */ "850, 500, 500, 0, 522, 522, 522, 862, 522, 522, 522, 522, 2275, 522, 522, 522, 500, 500, 500, 522",
      /* 37618 */ "522, 522, 0, 0, 0, 0, 0, 0, 1091, 0, 0, 0, 0, 1095, 1096, 0, 0, 963, 0, 0, 0, 2398, 0, 0, 0, 0, 0",
      /* 37645 */ "0, 0, 0, 0, 0, 0, 0, 1870, 0, 0, 0, 0, 0, 402, 0, 2407, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 37669 */ "2415, 500, 500, 2417, 522, 522, 522, 1571, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 37688 */ "522, 910, 522, 0, 0, 0, 0, 2463, 500, 2465, 500, 500, 500, 500, 500, 500, 500, 500, 522, 2475, 522",
      /* 37709 */ "522, 522, 1572, 522, 522, 522, 522, 522, 522, 522, 1579, 522, 522, 1582, 522, 522, 522, 1541, 522",
      /* 37728 */ "522, 522, 1544, 522, 522, 522, 522, 522, 522, 1550, 1552, 0, 0, 500, 500, 500, 500, 2535, 500, 522",
      /* 37748 */ "522, 522, 522, 2541, 522, 2543, 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 281, 0, 0, 45056",
      /* 37774 */ "0, 2546, 500, 500, 500, 500, 500, 500, 522, 522, 522, 522, 522, 522, 0, 2555, 2556, 0, 500, 500",
      /* 37794 */ "500, 500, 522, 522, 522, 522, 0, 0, 500, 500, 522, 522, 522, 522, 2422, 522, 522, 522, 522, 522, 0",
      /* 37815 */ "2428, 0, 0, 868352, 0, 0, 303, 304, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1884, 0, 0, 0, 0, 0",
      /* 37842 */ "0, 318, 0, 0, 0, 0, 0, 321, 0, 0, 0, 0, 0, 0, 0, 0, 1352, 0, 0, 0, 0, 0, 0, 0, 325, 0, 0, 0, 0, 0",
      /* 37872 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2293, 304, 0, 0, 0, 321, 0, 338, 0, 303, 0, 0, 0, 0, 0, 348, 349, 0",
      /* 37900 */ "350, 0, 0, 0, 0, 350, 0, 0, 0, 355, 0, 0, 0, 321, 359, 49152, 0, 0, 383, 40960, 383, 383, 0, 383",
      /* 37924 */ "383, 368, 383, 0, 383, 415, 415, 415, 415, 415, 0, 0, 303, 0, 0, 456, 456, 456, 456, 456, 456, 456",
      /* 37946 */ "456, 465, 470, 456, 456, 456, 456, 456, 456, 465, 480, 465, 484, 470, 489, 470, 470, 470, 470, 470",
      /* 37966 */ "470, 514, 514, 514, 514, 537, 514, 514, 514, 514, 514, 514, 514, 514, 514, 537, 537, 537, 537, 537",
      /* 37986 */ "551, 551, 560, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 573, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 38013 */ "0, 2298, 2299, 0, 0, 402, 700, 402, 402, 402, 402, 402, 716, 402, 402, 402, 402, 402, 402, 402",
      /* 38033 */ "1415, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 740, 0, 0, 0, 0, 0, 740, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 38063 */ "753, 0, 740, 0, 753, 0, 0, 0, 0, 0, 0, 0, 700, 402, 402, 716, 402, 402, 402, 402, 402, 1068, 402",
      /* 38086 */ "402, 402, 402, 402, 402, 402, 402, 402, 402, 0, 0, 1728, 0, 0, 500, 500, 500, 0, 753, 0, 500, 800",
      /* 38108 */ "500, 500, 500, 500, 500, 823, 500, 500, 500, 500, 500, 500, 1765, 500, 500, 500, 500, 500, 500, 500",
      /* 38128 */ "500, 500, 500, 1756, 500, 500, 500, 500, 500, 0, 800, 500, 500, 823, 500, 500, 500, 500, 0, 859",
      /* 38148 */ "522, 522, 882, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 0, 2486, 2487, 0, 0",
      /* 38169 */ "0, 0, 500, 522, 522, 53496, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 939, 0, 0, 0, 267, 0, 0, 0, 0, 0, 0, 0",
      /* 38198 */ "0, 0, 0, 0, 0, 587, 588, 0, 0, 0, 941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 951, 0, 0, 0, 0, 0, 642, 0, 0",
      /* 38227 */ "645, 0, 0, 0, 0, 0, 0, 0, 354, 0, 0, 0, 0, 0, 0, 0, 0, 354, 0, 0, 45056, 1064, 402, 402, 402, 402",
      /* 38253 */ "402, 402, 402, 402, 402, 1071, 402, 402, 402, 402, 402, 0, 329, 0, 354, 354, 0, 0, 0, 0, 0, 0, 0",
      /* 38276 */ "151552, 2105344, 266, 267, 0, 208896, 0, 0, 0, 0, 0, 1089, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 38301 */ "163840, 163840, 163840, 0, 1099, 0, 1055, 1089, 0, 0, 0, 0, 0, 0, 0, 1099, 0, 1089, 1107, 500, 1138",
      /* 38322 */ "500, 500, 1147, 500, 500, 1151, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1780, 0, 0, 0, 0, 1519",
      /* 38343 */ "0, 522, 522, 1220, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1581, 522, 522",
      /* 38363 */ "0, 500, 500, 500, 1162, 500, 500, 500, 500, 522, 522, 522, 1231, 522, 522, 522, 522, 522, 522, 522",
      /* 38383 */ "522, 522, 522, 522, 522, 522, 522, 522, 2001, 0, 0, 1347, 0, 0, 0, 1350, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 38408 */ "1366, 0, 0, 0, 0, 0, 0, 0, 0, 1073152, 0, 0, 0, 1633, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1375, 0, 0, 0, 0",
      /* 38436 */ "0, 0, 402, 402, 402, 1697, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 0, 1708, 402, 402, 402, 967058",
      /* 38458 */ "1725, 402, 402, 1073554, 0, 0, 0, 0, 1730, 1731, 500, 500, 500, 500, 853, 91311, 1132, 856, 522",
      /* 38477 */ "522, 522, 522, 522, 1208, 522, 522, 522, 522, 1556, 522, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 38496 */ "1566, 522, 1772, 500, 1774, 500, 500, 500, 500, 500, 500, 500, 0, 0, 0, 0, 1519, 0, 0, 0, 271, 0",
      /* 38518 */ "272, 0, 271, 271, 272, 0, 0, 0, 0, 0, 0, 0, 1005, 0, 0, 0, 0, 0, 0, 0, 0, 990, 0, 0, 0, 0, 0, 0, 0",
      /* 38547 */ "0, 0, 0, 1793, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2011, 522, 522, 522, 500",
      /* 38568 */ "500, 1972, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1770, 500, 500, 2015",
      /* 38587 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2014, 500, 500, 500",
      /* 38606 */ "2131, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1469, 500, 500, 500, 0, 1785, 0",
      /* 38626 */ "1791, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2394, 522, 500, 522, 2150, 522",
      /* 38645 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2158, 522, 522, 522, 1820, 522, 522",
      /* 38664 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1564, 522, 522, 522, 402, 0, 409600, 0, 0, 0, 0",
      /* 38685 */ "0, 0, 0, 410002, 402, 402, 402, 0, 500, 2408, 500, 500, 500, 500, 500, 500, 2414, 500, 500, 500",
      /* 38705 */ "522, 2418, 0, 2301, 0, 0, 0, 0, 402, 402, 402, 402, 402, 402, 2310, 0, 0, 0, 0, 0, 2305, 402, 402",
      /* 38728 */ "2307, 2308, 402, 402, 402, 0, 0, 0, 0, 0, 0, 667, 0, 0, 0, 0, 0, 0, 0, 1855, 0, 1857, 0, 0, 1860, 0",
      /* 38754 */ "0, 0, 0, 0, 909312, 0, 402, 909714, 402, 2314, 500, 500, 500, 500, 500, 500, 500, 500, 500, 2381",
      /* 38774 */ "500, 500, 522, 522, 522, 522, 0, 402, 402, 402, 402, 402, 0, 806912, 807314, 0, 500, 500, 500, 500",
      /* 38794 */ "500, 500, 846, 500, 0, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2421, 522, 2423, 522, 522, 522",
      /* 38814 */ "522, 0, 0, 0, 0, 0, 0, 0, 2213, 0, 2215, 402, 402, 402, 402, 402, 402, 1080, 402, 1082, 0, 0, 0, 0",
      /* 38838 */ "0, 0, 0, 0, 2613248, 0, 0, 0, 0, 0, 0, 0, 0, 1882, 0, 0, 0, 0, 0, 0, 0, 0, 1896, 0, 0, 0, 0, 0, 0",
      /* 38867 */ "0, 0, 2045, 0, 0, 0, 2047, 0, 2049, 0, 0, 0, 0, 2464, 500, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 38890 */ "2474, 522, 522, 522, 522, 2450, 522, 2452, 2453, 2454, 522, 0, 0, 0, 0, 0, 0, 0, 1386, 0, 1388, 0",
      /* 38912 */ "0, 0, 0, 0, 402, 1114, 402, 402, 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 1087, 0, 2507",
      /* 38935 */ "522, 522, 0, 2510, 0, 0, 0, 0, 0, 0, 500, 2516, 500, 500, 500, 500, 500, 1961, 500, 500, 500, 500",
      /* 38957 */ "500, 500, 500, 500, 500, 500, 500, 1168, 500, 500, 1170, 500, 0, 351, 0, 0, 0, 0, 351, 0, 0, 0, 0",
      /* 38980 */ "0, 0, 0, 0, 0, 1648, 0, 0, 0, 0, 0, 0, 49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 309, 0, 0, 0, 416, 416",
      /* 39008 */ "416, 416, 416, 434, 434, 434, 434, 434, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457",
      /* 39028 */ "457, 457, 457, 457, 457, 481, 457, 485, 457, 490, 457, 457, 457, 457, 457, 457, 515, 515, 515, 515",
      /* 39048 */ "538, 515, 515, 515, 515, 515, 515, 515, 515, 515, 538, 538, 538, 538, 538, 552, 552, 561, 53496",
      /* 39067 */ "53496, 2, 2, 3, 94212, 5, 6, 0, 591, 0, 0, 594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 606, 607, 608, 0",
      /* 39094 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318, 318, 318, 669, 574, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 679, 0",
      /* 39123 */ "0, 0, 273, 274, 275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 585, 586, 0, 0, 0, 0, 763, 574, 0, 0, 0, 763, 0",
      /* 39151 */ "0, 0, 402, 402, 402, 402, 402, 402, 725, 402, 402, 402, 763, 0, 786, 0, 742, 788, 0, 0, 0, 0, 0",
      /* 39174 */ "786, 0, 0, 0, 284, 352, 0, 0, 0, 284, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592",
      /* 39196 */ "2809856, 2158592, 2158592, 2158592, 0, 574, 0, 500, 801, 500, 500, 500, 500, 818, 824, 826, 500",
      /* 39213 */ "500, 500, 500, 500, 851, 500, 500, 0, 522, 522, 522, 522, 865, 522, 522, 500, 841, 500, 500, 500",
      /* 39233 */ "500, 500, 500, 0, 522, 522, 860, 522, 522, 522, 522, 522, 522, 2153, 522, 522, 522, 522, 522, 522",
      /* 39253 */ "522, 522, 522, 522, 522, 2393, 522, 522, 500, 522, 877, 883, 885, 522, 522, 522, 522, 522, 900, 522",
      /* 39273 */ "522, 522, 522, 522, 0, 0, 0, 0, 595, 0, 0, 0, 0, 0, 0, 0, 603, 604, 0, 0, 0, 0, 290, 335, 337, 0, 0",
      /* 39300 */ "0, 0, 0, 0, 0, 0, 0, 663, 0, 665, 0, 0, 0, 0, 0, 801, 500, 500, 824, 500, 841, 500, 500, 0, 860",
      /* 39325 */ "522, 522, 883, 522, 900, 0, 0, 942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 172032, 172032",
      /* 39349 */ "955, 0, 0, 0, 0, 0, 0, 961, 0, 0, 964, 0, 0, 0, 0, 0, 0, 1306, 0, 0, 0, 0, 0, 1310, 0, 1312, 1313",
      /* 39376 */ "983, 984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225280, 0, 0, 402, 402, 1077, 1078, 402, 402",
      /* 39401 */ "402, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 589, 0, 0, 0, 0, 1090, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 39431 */ "0, 0, 1019904, 0, 0, 1108, 0, 983, 1111, 0, 1113, 402, 402, 1116, 402, 402, 402, 402, 402, 402",
      /* 39451 */ "1123, 402, 0, 765952, 0, 0, 0, 0, 0, 964, 0, 0, 0, 1132, 500, 500, 500, 500, 500, 1975, 500, 500",
      /* 39473 */ "500, 500, 500, 500, 500, 500, 500, 500, 500, 2126, 500, 500, 500, 500, 1137, 500, 500, 500, 500",
      /* 39492 */ "500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1746, 500, 500, 500, 1178, 1179, 500, 500",
      /* 39511 */ "500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1966, 500, 500, 500, 500, 500, 1195, 500, 853",
      /* 39530 */ "91311, 1132, 856, 522, 522, 522, 1206, 522, 522, 522, 522, 522, 522, 2162, 522, 522, 522, 522, 500",
      /* 39549 */ "500, 500, 522, 522, 1232, 522, 522, 1235, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1247",
      /* 39568 */ "1248, 0, 1266, 500, 500, 1269, 500, 500, 500, 500, 1274, 522, 522, 1277, 522, 522, 522, 522, 1253",
      /* 39587 */ "522, 522, 522, 522, 1259, 522, 522, 522, 522, 522, 0, 1300, 1301, 0, 0, 0, 0, 0, 1307, 0, 0, 0, 0",
      /* 39610 */ "0, 0, 0, 0, 1635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 724992, 1348, 0, 0, 0, 0, 0, 0, 0, 1356, 0, 0, 0, 0",
      /* 39639 */ "0, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496",
      /* 39652 */ "106496, 106496, 106496, 106496, 0, 0, 0, 0, 402, 1397, 402, 402, 402, 402, 402, 402, 1403, 402, 402",
      /* 39671 */ "402, 402, 402, 1407, 402, 0, 0, 0, 0, 2225, 0, 0, 0, 0, 402, 402, 402, 2231, 0, 2233, 1422, 0, 0, 0",
      /* 39695 */ "0, 0, 0, 0, 1428, 1428, 1418, 0, 0, 0, 1430, 0, 0, 0, 289, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1010",
      /* 39723 */ "0, 0, 0, 0, 0, 1433, 0, 0, 0, 0, 0, 402, 402, 1440, 402, 402, 402, 1443, 402, 0, 0, 0, 1127, 0, 0",
      /* 39748 */ "0, 0, 0, 0, 0, 1132, 500, 500, 500, 500, 500, 1180, 500, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 39769 */ "500, 500, 500, 2383, 522, 522, 522, 500, 1459, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 39788 */ "500, 500, 500, 1472, 1504, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 0, 1519, 91311, 0",
      /* 39808 */ "0, 0, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1651, 0, 0, 0, 1519, 522, 522, 522, 522, 522, 1529",
      /* 39834 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1562, 1563, 522, 522, 522, 522, 0, 0, 1607, 0, 0",
      /* 39855 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 0, 0, 0, 1658, 0, 0, 0, 0, 0, 0, 577536",
      /* 39880 */ "0, 0, 1663, 0, 0, 0, 0, 625, 0, 0, 0, 0, 0, 0, 632, 0, 0, 0, 0, 0, 0, 36864, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 39910 */ "0, 266, 267, 0, 0, 0, 0, 574, 0, 0, 402, 402, 402, 402, 1687, 402, 402, 402, 402, 402, 402, 402",
      /* 39932 */ "402, 402, 0, 1727, 0, 0, 0, 500, 500, 500, 402, 402, 402, 402, 402, 1699, 1700, 402, 402, 0, 0, 0",
      /* 39954 */ "0, 0, 0, 0, 0, 0, 0, 738, 0, 0, 0, 1709, 0, 1711, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1719, 402, 402, 402",
      /* 39981 */ "402, 402, 1401, 402, 402, 402, 402, 402, 402, 402, 402, 402, 402, 1072, 402, 1073, 402, 402, 402",
      /* 40000 */ "402, 402, 402, 402, 402, 1726, 402, 402, 0, 0, 0, 1729, 0, 500, 500, 500, 500, 500, 500, 920, 851",
      /* 40021 */ "0, 522, 522, 522, 522, 522, 522, 522, 1559, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1995, 522",
      /* 40041 */ "522, 522, 522, 522, 522, 500, 500, 500, 1750, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 40061 */ "500, 1484, 500, 500, 500, 500, 1773, 500, 500, 500, 1777, 500, 500, 500, 500, 0, 0, 1785, 0, 1519",
      /* 40081 */ "0, 0, 0, 322, 0, 0, 0, 0, 0, 0, 369, 0, 322, 0, 369, 45056, 0, 1791, 0, 522, 522, 522, 522, 522",
      /* 40105 */ "522, 522, 522, 522, 522, 1801, 522, 522, 522, 522, 2481, 522, 2483, 0, 0, 0, 0, 0, 0, 0, 0, 500",
      /* 40127 */ "2437, 500, 500, 500, 2441, 500, 500, 500, 500, 1804, 522, 522, 522, 522, 522, 522, 522, 522, 1812",
      /* 40146 */ "522, 522, 522, 522, 522, 522, 522, 1822, 522, 522, 522, 522, 522, 1828, 522, 522, 0, 0, 0, 402, 402",
      /* 40167 */ "1920, 402, 402, 402, 402, 1923, 402, 402, 402, 402, 402, 402, 1929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600",
      /* 40190 */ "0, 0, 0, 0, 0, 0, 0, 0, 1946, 500, 500, 500, 500, 500, 1950, 500, 500, 500, 500, 500, 500, 500",
      /* 40212 */ "1494, 500, 500, 500, 500, 500, 500, 500, 500, 0, 522, 522, 522, 522, 522, 867, 522, 500, 500, 500",
      /* 40232 */ "1959, 500, 500, 500, 1962, 1963, 500, 500, 500, 500, 500, 500, 500, 1739, 500, 500, 1742, 500, 500",
      /* 40251 */ "500, 500, 500, 1970, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 40270 */ "2128, 1989, 522, 522, 522, 522, 522, 1993, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1578",
      /* 40289 */ "522, 522, 522, 522, 522, 522, 2002, 522, 522, 522, 2005, 2006, 522, 522, 522, 522, 522, 522, 522",
      /* 40308 */ "2013, 522, 522, 522, 1832, 522, 522, 522, 1835, 522, 522, 522, 1839, 522, 522, 522, 522, 522, 522",
      /* 40327 */ "2265, 2266, 522, 522, 522, 522, 2270, 522, 522, 522, 0, 0, 2041, 2042, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 40351 */ "0, 0, 2072, 0, 0, 0, 0, 0, 2093, 402, 402, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1935",
      /* 40377 */ "0, 0, 1064960, 402, 402, 402, 402, 402, 0, 500, 500, 500, 500, 500, 2117, 500, 500, 500, 500, 1462",
      /* 40397 */ "500, 500, 500, 500, 500, 500, 500, 500, 1470, 500, 500, 500, 500, 853, 91311, 1132, 856, 522, 522",
      /* 40416 */ "522, 522, 522, 522, 522, 1214, 2119, 500, 500, 500, 2122, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 40435 */ "500, 500, 500, 500, 2127, 500, 500, 500, 500, 2235, 500, 500, 500, 500, 500, 500, 2240, 500, 500",
      /* 40454 */ "500, 500, 500, 500, 500, 1779, 500, 500, 0, 0, 0, 0, 1519, 0, 522, 522, 522, 2263, 522, 522, 522",
      /* 40475 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 1826, 522, 522, 522, 1830, 522, 522, 2276, 522, 522",
      /* 40494 */ "500, 500, 500, 522, 522, 522, 0, 0, 0, 2285, 0, 0, 0, 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1030",
      /* 40521 */ "0, 0, 0, 0, 0, 0, 471040, 402, 402, 402, 0, 500, 500, 500, 500, 500, 500, 500, 500, 522, 522, 522",
      /* 40543 */ "522, 522, 522, 522, 0, 0, 500, 500, 500, 500, 2324, 500, 500, 500, 500, 2329, 500, 500, 500, 500",
      /* 40563 */ "500, 522, 522, 522, 1991, 1992, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 500, 500",
      /* 40582 */ "500, 522, 522, 2347, 522, 522, 522, 522, 522, 500, 500, 522, 522, 0, 0, 0, 0, 0, 0, 0, 53496, 53496",
      /* 40604 */ "2, 2, 3, 94212, 5, 6, 0, 0, 0, 2358, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2367, 0, 0, 0, 402, 402, 402",
      /* 40632 */ "402, 402, 0, 500, 500, 500, 2115, 500, 500, 500, 500, 500, 1508, 500, 500, 500, 500, 500, 500, 0",
      /* 40652 */ "1519, 91311, 0, 2384, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2392, 522, 522, 522, 500, 522",
      /* 40671 */ "522, 522, 2004, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1548, 522, 522, 522",
      /* 40690 */ "522, 522, 2509, 0, 0, 0, 0, 2511, 0, 0, 2514, 500, 500, 500, 500, 500, 500, 1976, 500, 500, 500",
      /* 40711 */ "500, 1980, 500, 500, 500, 500, 500, 2519, 2520, 500, 522, 522, 522, 522, 522, 522, 2525, 2526, 522",
      /* 40730 */ "0, 0, 2528, 2529, 0, 500, 500, 500, 500, 500, 500, 522, 522, 522, 522, 522, 522, 0, 0, 0, 0, 657, 0",
      /* 40753 */ "0, 661, 0, 0, 0, 0, 0, 0, 0, 0, 1102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 500, 500, 522, 522, 522",
      /* 40780 */ "522, 0, 0, 500, 2561, 522, 2562, 49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 391, 0, 0, 0, 417, 417, 417",
      /* 40804 */ "417, 417, 435, 435, 435, 435, 435, 458, 458, 458, 435, 435, 435, 435, 435, 435, 435, 435, 458, 458",
      /* 40824 */ "435, 435, 472, 435, 435, 435, 458, 482, 435, 435, 458, 435, 491, 491, 491, 491, 491, 491, 516, 516",
      /* 40844 */ "516, 516, 539, 516, 516, 516, 516, 516, 516, 516, 516, 516, 539, 539, 539, 539, 539, 516, 516, 539",
      /* 40864 */ "53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 623, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2179692",
      /* 40890 */ "2179692, 2179692, 0, 0, 0, 500, 500, 500, 500, 500, 815, 500, 500, 500, 500, 500, 500, 500, 1977",
      /* 40909 */ "500, 500, 500, 500, 500, 500, 500, 500, 0, 522, 522, 522, 522, 522, 868, 522, 522, 522, 53496, 2, 6",
      /* 40930 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 940, 1031, 0, 1032, 0, 0, 0, 0, 0, 0, 1032, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 40960 */ "0, 0, 0, 0, 2179693, 151552, 2179693, 500, 500, 500, 1143, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 40979 */ "500, 500, 500, 500, 1499, 500, 500, 500, 500, 500, 500, 1196, 853, 91311, 1132, 856, 522, 522, 522",
      /* 40998 */ "522, 522, 522, 1212, 522, 522, 522, 2018, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 41017 */ "522, 1814, 1815, 522, 1817, 0, 500, 500, 1143, 500, 500, 500, 500, 500, 522, 522, 1212, 522, 522",
      /* 41036 */ "522, 522, 522, 522, 2339, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2342, 522, 522",
      /* 41055 */ "522, 522, 0, 0, 0, 1317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402",
      /* 41084 */ "402, 402, 402, 1411, 402, 402, 402, 402, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 790, 0, 0, 0, 522, 1539",
      /* 41108 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 1547, 522, 522, 522, 522, 522, 522, 2351, 500, 2352",
      /* 41127 */ "522, 0, 0, 0, 0, 0, 0, 0, 1336, 0, 0, 0, 0, 0, 0, 0, 1344, 0, 0, 0, 1669, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 41157 */ "0, 0, 0, 159744, 0, 0, 0, 0, 0, 0, 0, 402, 402, 402, 402, 402, 1688, 402, 402, 402, 402, 402, 402",
      /* 41180 */ "402, 402, 1416, 402, 0, 0, 0, 0, 0, 0, 0, 0, 1792, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 41203 */ "522, 522, 1803, 0, 0, 1851, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180585, 180769, 180769, 180769",
      /* 41226 */ "180769, 180769, 500, 2375, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 522, 522, 522, 522",
      /* 41244 */ "522, 522, 2424, 522, 522, 522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1603, 0, 0, 522, 522, 522, 2387",
      /* 41269 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 500, 522, 522, 522, 2152, 522, 522, 522, 522, 522",
      /* 41289 */ "522, 522, 522, 522, 522, 522, 522, 1827, 522, 522, 522, 522, 2508, 522, 0, 0, 0, 0, 0, 0, 0, 0, 500",
      /* 41312 */ "500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 0, 0, 500, 500, 500, 500, 2550",
      /* 41332 */ "500, 522, 522, 522, 522, 2554, 522, 0, 0, 0, 0, 684, 0, 0, 687, 0, 0, 0, 0, 0, 694, 0, 0, 0, 0, 0",
      /* 41358 */ "2818048, 0, 2879488, 0, 2961408, 0, 2977792, 0, 0, 0, 0, 0, 0, 1611, 0, 0, 0, 0, 0, 0, 0, 0, 0, 978",
      /* 41382 */ "0, 318, 318, 0, 0, 0, 0, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 517, 517, 517, 517, 540, 517, 517, 517",
      /* 41408 */ "517, 517, 517, 517, 517, 517, 540, 540, 540, 540, 540, 517, 517, 540, 53496, 53496, 2, 2, 3, 94212",
      /* 41428 */ "5, 6, 0, 0, 0, 0, 500, 500, 500, 500, 812, 500, 500, 500, 500, 500, 500, 500, 500, 1183, 500, 500",
      /* 41450 */ "500, 1186, 500, 500, 500, 0, 0, 957, 0, 0, 0, 0, 0, 0, 0, 0, 965, 0, 0, 0, 0, 0, 662, 1020, 0, 0, 0",
      /* 41477 */ "0, 0, 0, 1026, 0, 0, 1217, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 41498 */ "522, 2346, 0, 500, 500, 500, 1164, 500, 500, 500, 500, 522, 522, 522, 1233, 522, 522, 522, 522, 522",
      /* 41518 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1265, 0, 0, 0, 0, 2359, 2360, 0, 0, 0, 0, 0, 0, 0",
      /* 41542 */ "0, 0, 0, 0, 200704, 200704, 200704, 200704, 200704, 200704, 313, 0, 0, 0, 0, 0, 313, 0, 0, 314, 0",
      /* 41563 */ "313, 0, 0, 0, 45056, 49152, 0, 0, 384, 40960, 384, 384, 0, 384, 384, 314, 384, 0, 384, 418, 418",
      /* 41584 */ "418, 418, 418, 0, 0, 0, 0, 0, 459, 459, 459, 459, 459, 459, 459, 459, 459, 471, 459, 459, 459, 459",
      /* 41606 */ "459, 459, 459, 483, 459, 459, 471, 459, 492, 492, 492, 496, 492, 492, 518, 518, 518, 518, 541, 518",
      /* 41626 */ "518, 518, 518, 518, 518, 518, 518, 518, 541, 541, 541, 541, 541, 553, 553, 562, 53496, 53496, 2, 2",
      /* 41646 */ "3, 94212, 5, 6, 0, 500, 842, 500, 500, 500, 500, 500, 500, 0, 522, 522, 522, 522, 522, 522, 522",
      /* 41667 */ "1238, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1260, 522, 522, 522, 522, 522, 0, 0, 500, 500",
      /* 41687 */ "500, 500, 500, 842, 500, 500, 0, 522, 522, 522, 522, 522, 901, 500, 500, 500, 500, 1960, 500, 500",
      /* 41707 */ "500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 2331, 500, 500, 522, 522, 522, 2003, 522, 522",
      /* 41726 */ "522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1841, 522, 522, 0, 402, 0, 0, 0, 0, 0, 0, 0",
      /* 41749 */ "0, 0, 0, 519, 519, 519, 519, 542, 519, 519, 519, 519, 519, 519, 519, 519, 519, 542, 542, 542, 542",
      /* 41770 */ "542, 519, 519, 542, 53496, 53496, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 656, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 41796 */ "0, 0, 0, 221727, 221727, 221727, 221727, 221727, 221727, 0, 402, 402, 402, 402, 709, 402, 402, 402",
      /* 41814 */ "402, 402, 402, 402, 402, 402, 402, 1702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 735, 0, 0, 0, 0, 0, 402, 402",
      /* 41840 */ "402, 402, 402, 402, 402, 1701, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402, 402, 402, 402, 0, 500, 0, 0, 0",
      /* 41865 */ "500, 500, 500, 500, 813, 500, 500, 500, 500, 500, 500, 500, 500, 1479, 500, 500, 1483, 500, 500",
      /* 41884 */ "500, 500, 970, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318, 318, 0, 0, 0, 0, 0, 111011, 111011, 111011",
      /* 41907 */ "111011, 111011, 419, 419, 419, 419, 419, 111011, 0, 1015, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1027, 0",
      /* 41930 */ "0, 0, 0, 759, 0, 0, 0, 612, 0, 619, 755, 598, 0, 0, 0, 0, 0, 2054, 2055, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 41958 */ "1023, 0, 0, 0, 0, 0, 0, 0, 0, 577, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 270336, 270336, 270336",
      /* 41984 */ "270336, 270336, 270336, 500, 500, 846, 500, 500, 500, 500, 500, 0, 522, 522, 522, 522, 522, 522",
      /* 42002 */ "522, 1256, 522, 522, 522, 522, 1263, 522, 522, 0, 905, 522, 53496, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 42026 */ "0, 0, 286720, 286720, 286720, 286720, 286720, 286720, 0, 0, 1302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 42048 */ "0, 0, 290816, 290816, 290816, 290816, 290816, 290816, 402, 402, 1409, 402, 402, 402, 402, 402, 402",
      /* 42065 */ "402, 0, 0, 0, 0, 0, 0, 0, 614, 0, 0, 0, 0, 0, 318, 318, 318, 500, 500, 1489, 500, 500, 500, 500",
      /* 42089 */ "500, 500, 500, 500, 500, 500, 500, 500, 500, 1981, 500, 500, 1519, 522, 522, 522, 522, 522, 522",
      /* 42108 */ "522, 522, 522, 1533, 522, 522, 522, 522, 522, 522, 522, 2340, 522, 522, 522, 522, 522, 522, 522",
      /* 42127 */ "522, 522, 1837, 522, 522, 522, 522, 522, 522, 1747, 500, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 42146 */ "500, 500, 500, 500, 500, 500, 2333, 0, 0, 0, 522, 1794, 522, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 42167 */ "522, 522, 1997, 522, 1999, 522, 522, 500, 500, 500, 1984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 42190 */ "696320, 1015808, 0, 0, 0, 0, 522, 2027, 500, 500, 500, 500, 522, 522, 522, 522, 0, 0, 0, 0, 0, 0, 0",
      /* 42213 */ "155648, 0, 155648, 0, 0, 0, 0, 0, 155648, 0, 2208, 0, 0, 0, 0, 0, 0, 0, 402, 402, 402, 402, 402",
      /* 42236 */ "402, 402, 0, 770048, 49152, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 399, 0, 402, 402, 402, 402, 402, 0",
      /* 42260 */ "0, 402, 0, 2371, 500, 500, 500, 500, 500, 500, 1509, 500, 500, 1512, 500, 500, 0, 1519, 91311, 0",
      /* 42280 */ "1085440, 318, 0, 0, 1085440, 0, 0, 0, 0, 0, 1085440, 0, 0, 0, 0, 0, 1085440, 0, 1085440, 0, 0, 0",
      /* 42302 */ "1085440, 1085813, 1085813, 0, 0, 0, 1085813, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1085440, 0, 0, 0, 0, 0",
      /* 42325 */ "0, 0, 0, 1085440, 0, 1085440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1085440, 1085440, 0, 0, 0",
      /* 42350 */ "1085440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2441216, 2158592, 2158592, 2158592, 2158592, 0, 0",
      /* 42369 */ "0, 1085440, 1085440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1716, 1717, 0, 0, 311698, 1720, 402, 0",
      /* 42391 */ "1085440, 0, 0, 1085440, 1085440, 0, 0, 0, 2, 4263936, 3, 94212, 5, 6, 0, 0, 0, 402, 402, 402, 402",
      /* 42412 */ "402, 0, 500, 500, 2114, 500, 500, 500, 500, 500, 1148, 500, 500, 500, 500, 500, 500, 500, 500, 500",
      /* 42432 */ "500, 1185, 500, 500, 500, 500, 500, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 42446 */ "2163541, 0, 2162688, 2163544, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 42457 */ "2162688, 2162688, 3026944, 2162688, 2162688, 3076096, 2162688, 3096576, 2162688, 2162688, 2162688",
      /* 42468 */ "2162688, 2162688, 0, 4263936, 6, 0, 0, 0, 0, 0, 0, 0, 2441216, 2449408, 0, 0, 0, 0, 770, 0, 0, 0, 0",
      /* 42491 */ "402, 402, 402, 402, 402, 402, 402, 1081, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1132, 500, 500, 500",
      /* 42515 */ "2162688, 4263936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1897, 0, 0, 0, 0, 0, 0, 1093632, 0",
      /* 42540 */ "1093632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2058, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1097728, 0, 0, 0",
      /* 42568 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 2189, 0, 0, 0, 0, 0, 0, 0, 1101824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 42598 */ "0, 0, 2201, 0, 0, 0, 0, 0, 0, 374, 1102200, 0, 0, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2296, 0, 0",
      /* 42626 */ "0, 0, 0, 0, 1102200, 1102200, 1102200, 1102200, 1102200, 1102200, 1102200, 1102200, 1102200",
      /* 42639 */ "1102200, 1102200, 1102200, 1102200, 1102200, 1102200, 1102200, 0, 0, 0, 0, 0, 0, 1101824, 376",
      /* 42654 */ "1102200, 1102200, 1102200, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 402, 402, 402, 402, 402, 0, 500",
      /* 42675 */ "2113, 500, 500, 2116, 500, 500, 500, 500, 853, 0, 0, 856, 522, 522, 522, 522, 522, 522, 522, 522",
      /* 42695 */ "522, 522, 2009, 522, 522, 522, 522, 522, 0, 0, 0, 3067904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 42719 */ "2105344, 0, 0, 0, 0, 0, 0, 0"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 42727; ++i) {TRANSITION[i] = Integer.parseInt(s2[i]);}
  }

  private static final int[] EXPECTED = new int[5791];
  static
  {
    final String s1[] =
    {
      /*    0 */ "723, 726, 728, 726, 732, 736, 740, 744, 748, 1636, 1128, 768, 1055, 754, 1054, 759, 777, 781, 1128",
      /*   19 */ "2423, 1713, 785, 790, 1128, 796, 846, 821, 856, 800, 804, 1128, 2455, 810, 815, 1060, 819, 846, 863",
      /*   38 */ "856, 866, 825, 1128, 1129, 786, 792, 831, 846, 762, 856, 837, 805, 1128, 1010, 841, 845, 833, 856",
      /*   57 */ "851, 1128, 986, 2090, 846, 855, 765, 1128, 1575, 847, 872, 1128, 860, 870, 876, 883, 892, 898, 902",
      /*   76 */ "909, 906, 886, 888, 913, 917, 919, 923, 926, 930, 934, 938, 2321, 1128, 942, 1128, 963, 1863, 1128",
      /*   95 */ "1128, 1128, 948, 1128, 1128, 1128, 965, 1128, 1128, 1128, 1128, 1128, 1128, 1922, 1128, 1128, 1128",
      /*  112 */ "1941, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1697, 1128, 1128, 1128, 1128, 1128",
      /*  129 */ "1128, 1128, 1128, 2172, 1128, 1128, 1128, 1128, 1128, 1128, 1336, 1128, 1128, 1128, 1128, 1128, 1698",
      /*  146 */ "1128, 1128, 1128, 952, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1889, 957, 1128",
      /*  163 */ "1032, 806, 969, 973, 977, 981, 985, 1128, 2281, 990, 1000, 1004, 1008, 1014, 996, 1018, 1128, 1128",
      /*  181 */ "1025, 1102, 1219, 1029, 1114, 1128, 1166, 1128, 1036, 1128, 1128, 771, 1040, 2352, 1262, 1053, 1128",
      /*  198 */ "1059, 1128, 1064, 1463, 1128, 1068, 1074, 1021, 1078, 1128, 1083, 1128, 1089, 1128, 1283, 1096, 1108",
      /*  215 */ "1128, 1104, 1128, 1121, 1242, 1482, 2159, 2264, 1128, 1127, 2432, 1133, 1808, 1292, 1141, 1817, 1135",
      /*  232 */ "1145, 1149, 1155, 1137, 1175, 1159, 1163, 1172, 1128, 1128, 1179, 1845, 1185, 1189, 1193, 1197, 1200",
      /*  249 */ "2234, 1771, 1865, 2177, 1206, 1212, 1216, 1225, 1231, 1237, 1241, 2381, 2176, 1246, 2383, 1250, 1699",
      /*  266 */ "1254, 944, 1128, 1233, 1259, 1457, 1386, 1266, 1270, 1277, 1507, 1128, 2212, 1128, 1572, 1479, 1457",
      /*  283 */ "1867, 2156, 1289, 2305, 1128, 1587, 1128, 1629, 1298, 2237, 1305, 2259, 1309, 1424, 1315, 1598, 1320",
      /*  300 */ "1326, 1330, 1128, 1334, 1343, 1322, 1347, 1351, 1557, 1301, 1355, 2262, 1359, 1363, 2405, 1820, 1367",
      /*  317 */ "1371, 1375, 1379, 1383, 1128, 1151, 953, 1390, 1399, 1403, 1407, 1411, 1128, 1423, 1428, 1439, 2288",
      /*  334 */ "1852, 1447, 1451, 2231, 1455, 1461, 2252, 1619, 1442, 1468, 1472, 1476, 2378, 1128, 1490, 1581, 1339",
      /*  351 */ "1419, 1504, 1516, 1948, 1520, 1524, 1529, 1128, 1535, 2002, 1884, 1419, 1544, 1979, 2000, 1393, 1548",
      /*  368 */ "1128, 1554, 1128, 2250, 1561, 1443, 2201, 2446, 1128, 1906, 1128, 1565, 1569, 1579, 1585, 1550, 1776",
      /*  385 */ "1591, 1595, 2210, 1602, 1608, 2219, 1612, 2203, 1616, 1623, 1633, 1626, 1640, 1644, 1648, 1650, 1128",
      /*  402 */ "2095, 1654, 1660, 1664, 1668, 1672, 1676, 1128, 2228, 2188, 1753, 1680, 1686, 1690, 1694, 1703, 2315",
      /*  419 */ "2194, 811, 1707, 2324, 1604, 2363, 1900, 1424, 1711, 2368, 1717, 1128, 1722, 1726, 1766, 1730, 1111",
      /*  436 */ "1734, 1755, 1128, 1540, 1128, 1128, 1740, 1744, 2339, 1484, 1280, 1736, 1128, 1500, 1128, 827, 1750",
      /*  453 */ "2402, 1128, 1759, 1764, 1128, 1770, 2412, 1782, 1079, 1208, 1128, 1775, 1780, 1786, 1294, 1221, 1656",
      /*  470 */ "1792, 1417, 1798, 2341, 2308, 1682, 1802, 894, 960, 1814, 1128, 1128, 1128, 2027, 1824, 1828, 1832",
      /*  487 */ "1836, 1840, 1844, 2460, 2036, 1849, 1788, 1043, 2375, 1856, 1860, 1871, 1128, 1875, 1879, 1883, 1888",
      /*  504 */ "1047, 1893, 2444, 1794, 1128, 1897, 1904, 1395, 1910, 1914, 1920, 1926, 1935, 1128, 1939, 1128, 1945",
      /*  521 */ "1952, 2461, 1958, 1962, 1045, 1966, 1128, 1970, 1128, 1976, 1983, 1989, 1993, 1117, 1997, 1493, 1128",
      /*  538 */ "2247, 2006, 1512, 2010, 1929, 2014, 2020, 1510, 2024, 2034, 2040, 2044, 2048, 2052, 1273, 2056, 2060",
      /*  555 */ "2064, 2068, 2072, 2076, 2080, 2084, 2088, 1128, 2437, 2094, 2099, 2103, 2107, 2111, 2114, 1128, 2121",
      /*  572 */ "2130, 2134, 1916, 2138, 2145, 2149, 1954, 2153, 2221, 2030, 2165, 1338, 2169, 2181, 2185, 1255, 2192",
      /*  589 */ "1070, 2198, 1464, 2207, 2216, 2225, 2241, 2141, 1128, 1531, 2193, 1085, 2256, 1316, 2268, 2272, 773",
      /*  606 */ "2276, 2280, 1985, 1128, 1285, 2285, 1931, 2292, 1123, 2244, 1128, 2296, 1168, 2312, 2328, 2332, 2336",
      /*  623 */ "2016, 1486, 2126, 993, 1414, 2124, 2345, 2349, 1099, 2356, 2360, 1746, 2367, 1805, 1128, 1128, 1128",
      /*  640 */ "1128, 1128, 1128, 1128, 1092, 2372, 2387, 2391, 2395, 2399, 1128, 2161, 1128, 1972, 1538, 2174, 2299",
      /*  657 */ "2409, 2416, 2302, 1128, 1435, 1128, 878, 1128, 1128, 2420, 1128, 2116, 1128, 1496, 1499, 1434, 1128",
      /*  674 */ "1760, 1128, 1227, 2429, 1128, 2117, 1128, 1049, 1499, 1434, 1128, 879, 1810, 2436, 1128, 2441, 1128",
      /*  691 */ "2450, 1525, 1128, 1181, 1202, 1128, 750, 1128, 2425, 1431, 1765, 1311, 755, 1128, 2318, 2454, 1539",
      /*  708 */ "1128, 1128, 2459, 1635, 1128, 1718, 1128, 1718, 1128, 1128, 1128, 1128, 1128, 1128, 768, 2465, 2534",
      /*  725 */ "4731, 2482, 2482, 2482, 2482, 2472, 2482, 2476, 2482, 2480, 2490, 2487, 2483, 2494, 2497, 2501, 2505",
      /*  742 */ "2509, 2512, 2516, 2520, 2524, 2528, 3860, 2532, 3217, 3217, 2576, 3217, 2545, 3217, 3217, 3217, 2687",
      /*  759 */ "3027, 3217, 4249, 4251, 2599, 2621, 2563, 2555, 2658, 3217, 2538, 3812, 3217, 2579, 3217, 3217, 3217",
      /*  776 */ "4613, 4252, 2552, 2563, 2569, 2559, 2568, 2573, 2677, 3462, 3217, 3217, 3024, 3080, 3080, 3080, 3080",
      /*  793 */ "3028, 3217, 3077, 3077, 3080, 3028, 4433, 2563, 2655, 4250, 2654, 2587, 2678, 3217, 3217, 3217, 2795",
      /*  810 */ "2592, 3217, 3217, 3076, 4012, 3080, 3080, 3080, 3083, 3082, 4249, 4251, 4251, 2583, 2563, 2603, 2605",
      /*  827 */ "3217, 3217, 2640, 4115, 3080, 4248, 4251, 4251, 2598, 2618, 2563, 2563, 4435, 2623, 3081, 3217, 3076",
      /*  844 */ "3081, 4434, 4251, 4251, 4251, 4251, 2562, 2563, 2563, 3319, 3325, 2627, 2563, 2563, 2563, 2563, 2774",
      /*  861 */ "3026, 2775, 4251, 2647, 2622, 2563, 2563, 2596, 2654, 4251, 4435, 2563, 2563, 2554, 2657, 2564, 3325",
      /*  878 */ "3217, 3217, 2659, 3217, 3217, 2633, 2645, 4251, 2561, 2656, 4434, 2569, 3316, 3322, 2563, 2629, 3217",
      /*  895 */ "3217, 2686, 2685, 2645, 2560, 2563, 3325, 4432, 4251, 2563, 3325, 4251, 2654, 2657, 4249, 4436, 2655",
      /*  912 */ "4247, 2651, 3764, 2667, 4363, 2671, 2675, 2588, 2588, 2588, 2693, 2697, 2700, 2588, 2588, 2706, 2704",
      /*  929 */ "4366, 4369, 2710, 2714, 2718, 2722, 2726, 2730, 2734, 2737, 2744, 2748, 2752, 2986, 3956, 3217, 3217",
      /*  946 */ "2764, 3282, 3037, 4298, 2768, 3765, 3763, 3217, 3217, 3217, 3028, 2779, 3217, 4221, 3217, 2684, 2683",
      /*  963 */ "3217, 2763, 3217, 3217, 2773, 3217, 3450, 4429, 2807, 2811, 2814, 2818, 2823, 2822, 2827, 2830, 2832",
      /*  980 */ "2836, 2840, 3217, 2844, 2930, 2851, 3217, 3217, 3217, 3077, 4431, 2859, 2539, 4355, 4583, 3430, 3217",
      /*  997 */ "2769, 2908, 2914, 4004, 3217, 3104, 2985, 4205, 2864, 3217, 2868, 2878, 2883, 3217, 3217, 3078, 3080",
      /* 1014 */ "2889, 3217, 3217, 2901, 2663, 2931, 2852, 3217, 2781, 3217, 3484, 2780, 3075, 3217, 3084, 2929, 2935",
      /* 1031 */ "2781, 3217, 2785, 4218, 2789, 2965, 2971, 3217, 2978, 3476, 4356, 2990, 3217, 2803, 3217, 3217, 4315",
      /* 1048 */ "3217, 3217, 3300, 3462, 4811, 3011, 3217, 3217, 3217, 3079, 3080, 3017, 3217, 3217, 3217, 3080, 2971",
      /* 1065 */ "2971, 3217, 4278, 2578, 4265, 3217, 3217, 3217, 4636, 3021, 3217, 3217, 3036, 3041, 3217, 3217, 3217",
      /* 1082 */ "3141, 3485, 3042, 3217, 3217, 3217, 4656, 3048, 2896, 3056, 3217, 2885, 3815, 2681, 3101, 3217, 3043",
      /* 1099 */ "3217, 2918, 3217, 3217, 2922, 3217, 3217, 3090, 3217, 3600, 3217, 3089, 3217, 2925, 4862, 3217, 2942",
      /* 1116 */ "2950, 3217, 2802, 3000, 2539, 3457, 3094, 3217, 3217, 3217, 4688, 3119, 3217, 3217, 3217, 3217, 2609",
      /* 1133 */ "3113, 3483, 3109, 3217, 3217, 3127, 3433, 3217, 3421, 3217, 4519, 4046, 3217, 4355, 3133, 4826, 3217",
      /* 1150 */ "4825, 3217, 3217, 3262, 3217, 3120, 3217, 3225, 3433, 3623, 4247, 3217, 3511, 3139, 3510, 2960, 3217",
      /* 1167 */ "2955, 3217, 3217, 3217, 4612, 3225, 3226, 3225, 3226, 3127, 3510, 3509, 3146, 3151, 3217, 3217, 3336",
      /* 1184 */ "3217, 3157, 3103, 3217, 3167, 2895, 4045, 3030, 2874, 3174, 3177, 3181, 3182, 3186, 3188, 3192, 3194",
      /* 1201 */ "3196, 3217, 3217, 3338, 3217, 3216, 3222, 3217, 3217, 3348, 3217, 3232, 3618, 3242, 3246, 3697, 4738",
      /* 1218 */ "3355, 3217, 2984, 3217, 3217, 3123, 3217, 3398, 4032, 3217, 3217, 3364, 3217, 3631, 3217, 3217, 2958",
      /* 1235 */ "2958, 3217, 3096, 3217, 3217, 3249, 3201, 3217, 3217, 3217, 3235, 3260, 4161, 3266, 3270, 3499, 3396",
      /* 1252 */ "3578, 3695, 3276, 3217, 3217, 3217, 3247, 3134, 3147, 3103, 3217, 3005, 3217, 4310, 2897, 3256, 4257",
      /* 1269 */ "4771, 3293, 3217, 3612, 3217, 3007, 4470, 2801, 3299, 3969, 3410, 3217, 3028, 4104, 3217, 3073, 3217",
      /* 1286 */ "3217, 3217, 4673, 3410, 3966, 3970, 3217, 3118, 3217, 3217, 3237, 3217, 3352, 3217, 3217, 3576, 3217",
      /* 1303 */ "3472, 3799, 4161, 4259, 3363, 3337, 3368, 3373, 3217, 3217, 3410, 3217, 3369, 3217, 3217, 3217, 3300",
      /* 1320 */ "3217, 4844, 3217, 4464, 2636, 3217, 3218, 3473, 4258, 3428, 3340, 3384, 3703, 3393, 3402, 2546, 3217",
      /* 1337 */ "3217, 3430, 3217, 3217, 3217, 3889, 3408, 3416, 3420, 4844, 3426, 3410, 3438, 3704, 3448, 3217, 3326",
      /* 1354 */ "3454, 3482, 3734, 4227, 2546, 3468, 2897, 2639, 3481, 3162, 3490, 3247, 3489, 3490, 4456, 3795, 4848",
      /* 1371 */ "4847, 2546, 3797, 4850, 4849, 2910, 4242, 3517, 4576, 3510, 3062, 3510, 3062, 2961, 3434, 3217, 3169",
      /* 1388 */ "3217, 2640, 3085, 3768, 3521, 3217, 3169, 3217, 3217, 3745, 3217, 2992, 2759, 4175, 2892, 3531, 3535",
      /* 1405 */ "3538, 3542, 3543, 3547, 3551, 3555, 3557, 3557, 3559, 3217, 3234, 3234, 3217, 3238, 3217, 3217, 4300",
      /* 1422 */ "2847, 3563, 3217, 3217, 3217, 3326, 3571, 4587, 3332, 3217, 3247, 4706, 3217, 3247, 4810, 3217, 3217",
      /* 1439 */ "3582, 3217, 4298, 3589, 3217, 3973, 3217, 3725, 3604, 2879, 3610, 4272, 3278, 3342, 3975, 3616, 3675",
      /* 1456 */ "3891, 3217, 3217, 3577, 3217, 3217, 4752, 2853, 3217, 3217, 3217, 3114, 4563, 3629, 3217, 3491, 3629",
      /* 1473 */ "3217, 4569, 4324, 3217, 4571, 3635, 3217, 3250, 3331, 3217, 3100, 3217, 3103, 3217, 3217, 3217, 4724",
      /* 1490 */ "3134, 3660, 2903, 3217, 3294, 3938, 3217, 3301, 3217, 4811, 3217, 3217, 3217, 4111, 3834, 3217, 4172",
      /* 1507 */ "3217, 3305, 3309, 3103, 4398, 4517, 4360, 4373, 2917, 4298, 3664, 4572, 2896, 3827, 3673, 3217, 3673",
      /* 1524 */ "3153, 3217, 3217, 3217, 3327, 3679, 3683, 3217, 3217, 3685, 4652, 3134, 3689, 3012, 3217, 3333, 3217",
      /* 1541 */ "3217, 3217, 4096, 3834, 3217, 3388, 4136, 3716, 3160, 3217, 3217, 3786, 3217, 3134, 3717, 3012, 3217",
      /* 1558 */ "3338, 3467, 4349, 3721, 3834, 2991, 3389, 3737, 3217, 3752, 4590, 3759, 4706, 3972, 3217, 3339, 3339",
      /* 1575 */ "3217, 3079, 3028, 3059, 3775, 3775, 3217, 3217, 3949, 3949, 3835, 3780, 3217, 3217, 4007, 3404, 2981",
      /* 1592 */ "4590, 3217, 3337, 3974, 4092, 3790, 3217, 3378, 3135, 3419, 3665, 3827, 3217, 3217, 4036, 3271, 3767",
      /* 1609 */ "3809, 3217, 3971, 3805, 3217, 3217, 3826, 3044, 3217, 4680, 3217, 3386, 4349, 4135, 4679, 3217, 4350",
      /* 1626 */ "4574, 3335, 3334, 3217, 3410, 3340, 3248, 2659, 3217, 2661, 3217, 3217, 3217, 4458, 4575, 3217, 2662",
      /* 1643 */ "4573, 2661, 2660, 3217, 3845, 2659, 3337, 3849, 3850, 3863, 4574, 3854, 3217, 3217, 2612, 3440, 3217",
      /* 1660 */ "3076, 3217, 4045, 3869, 3873, 3933, 2539, 3879, 3883, 3865, 3895, 3898, 3902, 3907, 3903, 3910, 3913",
      /* 1677 */ "3915, 3915, 3916, 2660, 3857, 4135, 3217, 2686, 2684, 3930, 3217, 4832, 4607, 3944, 3953, 4838, 3963",
      /* 1694 */ "3979, 4125, 3986, 3217, 3432, 3217, 3217, 3217, 2938, 3997, 3217, 3217, 4001, 4016, 4020, 3217, 3573",
      /* 1711 */ "4059, 3012, 3217, 3217, 4106, 3422, 4067, 3217, 3217, 3217, 3333, 3920, 2853, 3217, 3768, 3289, 4073",
      /* 1728 */ "3217, 3084, 4204, 3217, 3217, 4077, 4862, 3926, 3217, 3217, 4110, 3103, 3829, 4500, 3217, 3768, 3289",
      /* 1745 */ "4100, 3217, 3217, 4118, 3217, 3076, 3463, 3442, 3217, 3475, 3217, 3217, 4083, 4087, 3770, 3217, 3217",
      /* 1762 */ "3217, 3334, 3357, 3217, 3217, 3217, 3335, 4124, 3358, 3217, 3217, 3217, 3374, 3359, 3217, 3217, 3217",
      /* 1779 */ "3473, 3933, 3217, 3761, 3217, 3300, 4134, 4027, 4297, 3217, 3217, 4209, 3129, 4133, 4298, 3217, 3217",
      /* 1796 */ "4282, 3217, 3122, 3217, 2897, 3728, 3429, 3217, 3734, 3733, 3217, 3735, 3217, 3566, 3217, 3217, 3217",
      /* 1813 */ "4854, 3227, 3217, 2686, 3217, 3567, 3217, 3483, 3497, 3503, 3508, 3001, 3217, 3000, 3734, 4144, 4148",
      /* 1830 */ "4152, 4178, 4443, 4156, 3982, 4166, 4169, 4182, 4183, 4187, 4191, 4194, 4196, 4196, 4198, 3217, 3217",
      /* 1847 */ "3217, 3574, 4202, 4341, 3585, 3217, 3597, 4089, 3731, 4215, 4291, 4225, 4231, 4240, 4380, 4246, 3217",
      /* 1864 */ "3649, 3217, 3217, 2780, 3217, 2641, 3818, 2614, 4256, 3444, 4266, 3217, 4402, 3217, 3624, 3000, 3771",
      /* 1881 */ "4339, 4343, 4263, 3217, 3217, 3217, 3766, 2791, 3217, 3217, 3217, 3793, 3247, 2801, 4270, 2800, 3217",
      /* 1898 */ "4286, 4290, 3217, 3655, 4044, 4050, 4856, 4856, 3217, 3217, 4414, 3271, 3625, 3217, 4295, 4304, 4375",
      /* 1915 */ "3236, 3217, 3217, 4475, 4690, 3217, 4308, 3217, 3217, 4501, 3217, 4314, 3217, 3217, 2540, 3226, 3217",
      /* 1932 */ "3217, 4677, 4845, 4319, 2540, 3217, 4348, 3936, 4328, 3217, 3217, 4502, 3217, 3217, 4333, 4290, 3217",
      /* 1949 */ "3669, 3217, 2904, 4055, 4055, 3217, 3217, 4605, 4480, 3625, 3217, 4337, 4341, 3592, 3217, 3217, 3207",
      /* 1966 */ "2799, 4023, 2740, 4347, 3937, 4329, 3217, 3217, 4628, 3217, 3294, 3938, 3332, 3217, 3701, 3217, 3708",
      /* 1983 */ "2739, 2800, 3217, 3217, 4672, 4659, 3744, 3217, 3000, 4720, 4342, 3593, 3217, 2688, 3782, 2800, 4354",
      /* 2000 */ "3217, 3712, 3217, 3217, 3693, 3693, 2799, 2801, 3217, 3746, 2687, 4379, 3228, 4389, 4384, 4388, 3217",
      /* 2017 */ "3217, 4713, 3217, 3217, 4394, 3940, 4390, 4406, 3217, 2689, 3217, 3743, 3747, 3217, 3575, 3217, 4709",
      /* 2034 */ "2798, 2541, 3217, 3217, 4716, 3217, 4410, 3217, 3217, 4418, 4422, 2740, 4426, 4718, 4440, 3217, 4447",
      /* 2051 */ "2998, 4453, 3217, 3013, 4462, 4622, 4740, 3606, 4474, 3007, 4479, 3006, 4484, 2967, 2575, 3511, 3051",
      /* 2068 */ "3049, 2966, 3875, 2855, 2854, 4489, 3461, 3051, 3050, 3459, 3049, 2972, 3052, 3461, 4488, 3051, 4509",
      /* 2085 */ "4510, 4509, 4510, 4493, 4495, 3080, 3217, 3078, 4250, 4499, 3217, 3217, 3217, 3828, 3574, 4091, 4506",
      /* 2102 */ "3527, 2547, 2468, 4514, 4523, 4527, 4530, 4534, 4537, 4541, 4545, 4548, 4550, 4552, 3217, 3217, 4814",
      /* 2119 */ "3217, 3217, 3300, 4556, 2853, 3217, 3748, 4751, 3217, 3068, 4728, 3577, 4707, 4758, 4585, 2548, 3217",
      /* 2136 */ "3170, 2860, 3217, 4561, 3217, 3341, 4466, 2780, 3287, 4567, 3638, 3341, 4580, 4594, 3217, 3217, 4598",
      /* 2153 */ "2951, 4611, 3217, 3217, 3755, 3346, 3217, 3108, 3217, 3217, 3217, 4809, 4760, 3959, 3947, 3170, 3217",
      /* 2170 */ "4617, 3012, 3217, 3762, 3217, 3217, 2974, 3217, 3217, 3205, 3211, 4621, 3217, 4626, 3513, 4211, 2871",
      /* 2187 */ "3217, 3217, 3769, 4014, 4018, 4632, 4600, 3217, 3217, 3217, 3921, 2945, 2780, 2780, 3217, 3776, 3217",
      /* 2204 */ "3217, 3833, 3839, 4236, 3217, 4846, 3217, 3804, 3217, 3217, 4008, 3313, 3524, 4104, 3032, 3217, 3822",
      /* 2221 */ "3217, 3217, 4069, 4557, 4640, 3762, 3217, 3217, 3920, 3925, 3217, 3412, 3622, 3217, 3248, 3200, 3217",
      /* 2238 */ "2973, 2679, 3886, 3217, 4691, 4690, 4646, 3512, 4695, 3217, 3935, 3939, 3217, 3736, 3217, 4299, 3477",
      /* 2255 */ "4589, 4664, 2780, 2780, 3217, 3969, 3411, 3217, 3163, 3217, 3217, 3565, 3217, 4668, 3217, 4846, 4707",
      /* 2272 */ "4758, 4052, 3212, 4642, 3233, 4648, 3513, 3285, 3113, 3217, 3217, 3217, 3989, 4660, 2973, 4464, 3217",
      /* 2289 */ "3973, 4079, 3599, 4708, 4759, 3031, 4684, 4699, 2946, 3217, 3217, 3992, 3656, 3217, 3993, 4823, 3217",
      /* 2306 */ "4006, 3403, 3217, 3121, 3217, 4140, 4700, 3012, 3217, 3217, 4022, 3295, 3217, 3461, 3217, 3217, 3474",
      /* 2323 */ "2756, 3217, 2660, 4027, 4135, 3069, 3574, 4355, 3800, 4704, 3432, 3217, 3272, 3234, 3421, 3217, 3217",
      /* 2340 */ "4027, 4203, 3217, 3217, 3122, 3217, 4745, 3217, 3765, 3217, 4735, 3431, 3217, 4030, 3217, 2996, 4744",
      /* 2357 */ "3217, 3217, 4749, 3217, 4756, 3217, 3217, 4040, 3652, 4449, 4117, 3217, 3217, 3217, 4063, 4204, 2682",
      /* 2374 */ "3067, 3217, 4089, 3841, 3217, 3642, 3646, 3217, 3254, 3217, 3217, 3380, 3217, 3065, 2680, 2681, 4764",
      /* 2391 */ "4768, 4775, 4778, 4781, 4783, 4787, 4791, 4795, 4801, 4797, 4805, 3217, 4122, 4135, 3217, 3504, 3798",
      /* 2408 */ "3495, 3992, 4819, 3217, 3217, 4129, 3217, 3142, 3301, 3217, 3217, 4813, 4830, 3300, 4054, 3217, 4159",
      /* 2425 */ "3217, 3217, 2577, 3217, 4836, 4842, 3217, 3217, 4265, 4355, 3102, 4601, 3217, 3217, 3217, 4234, 3217",
      /* 2442 */ "4815, 3217, 3217, 4276, 3217, 3217, 4413, 3741, 3217, 4812, 3029, 3958, 4860, 3217, 3217, 3217, 4322",
      /* 2459 */ "4162, 3217, 3217, 3217, 4401, 3217, 5627, 5025, 5032, 5298, 5554, 5301, 5223, 5085, 4894, 4895, 4882",
      /* 2476 */ "4903, 4901, 4898, 4883, 5001, 4902, 4903, 4903, 4903, 4903, 4914, 4897, 4903, 4900, 4903, 4881, 4903",
      /* 2493 */ "5049, 4916, 4918, 4920, 4924, 4926, 4926, 4927, 4921, 4923, 4924, 4922, 4926, 4932, 4924, 4924, 4929",
      /* 2510 */ "4931, 4934, 4926, 4926, 5008, 4936, 4939, 4937, 4941, 4937, 4942, 4944, 4945, 4947, 4945, 4945, 4949",
      /* 2527 */ "4951, 5627, 5442, 5015, 5297, 4959, 4869, 5301, 5301, 4866, 5155, 5003, 5301, 5301, 5301, 4868, 5153",
      /* 2544 */ "4990, 4988, 5350, 5301, 5301, 5301, 4873, 5156, 5365, 5005, 5010, 5010, 5006, 5007, 5010, 5022, 5007",
      /* 2561 */ "5007, 5007, 5010, 5010, 5010, 5010, 5007, 4990, 5010, 5010, 5010, 5301, 5010, 5627, 5042, 5301, 4905",
      /* 2578 */ "5301, 5301, 5301, 5737, 4970, 5007, 5007, 5030, 5789, 5011, 5566, 5566, 5566, 5566, 5360, 4983, 4984",
      /* 2595 */ "4906, 5006, 5007, 5007, 5007, 4961, 4961, 5035, 5366, 5566, 5566, 5566, 4869, 5301, 5301, 5360, 4906",
      /* 2612 */ "5301, 4867, 5301, 5301, 5308, 5658, 4961, 5357, 5357, 5357, 5358, 5010, 5010, 5010, 5566, 4961, 5357",
      /* 2629 */ "5010, 5010, 5010, 5788, 5074, 4988, 4988, 5301, 4867, 5301, 5446, 5301, 5301, 5301, 5453, 5301, 4979",
      /* 2646 */ "5007, 5007, 5007, 4961, 5356, 5788, 5788, 5788, 5788, 5010, 5010, 5010, 5359, 5301, 5301, 5301, 4907",
      /* 2663 */ "5301, 5301, 5301, 4908, 5222, 5301, 5560, 5298, 4871, 5045, 5048, 5369, 5051, 5566, 5566, 5566, 5301",
      /* 2680 */ "5301, 5301, 4891, 5301, 5301, 5301, 4904, 5301, 5301, 5301, 4905, 4908, 5301, 5071, 5569, 5367, 5566",
      /* 2697 */ "5058, 5061, 5063, 5046, 5065, 5369, 5370, 5570, 5368, 5566, 5566, 5569, 5567, 5088, 5566, 5090, 5228",
      /* 2714 */ "5227, 5117, 5092, 5566, 5565, 5094, 5096, 5097, 5099, 5108, 5108, 5101, 5103, 5105, 5102, 5112, 5107",
      /* 2731 */ "5111, 5110, 5102, 5114, 5110, 5109, 5108, 5108, 5301, 4868, 5153, 5301, 5301, 5038, 5116, 5569, 5119",
      /* 2748 */ "5068, 5121, 5123, 5125, 5124, 5124, 5111, 5127, 5301, 5624, 5085, 5301, 4868, 5229, 5016, 5130, 5301",
      /* 2765 */ "5301, 5301, 4972, 5557, 5301, 5301, 5301, 4980, 5055, 5301, 5301, 5301, 4988, 4979, 4994, 5301, 5301",
      /* 2782 */ "5301, 4996, 5042, 5260, 5301, 4911, 4906, 5077, 5484, 5301, 5301, 4905, 5515, 5078, 5215, 5077, 4974",
      /* 2799 */ "5301, 5301, 5661, 5301, 5301, 5301, 5640, 4974, 4905, 5479, 5301, 5478, 5301, 5485, 5233, 5161, 5161",
      /* 2816 */ "5162, 5163, 5164, 5167, 5166, 5169, 5173, 5170, 5170, 5170, 5171, 5176, 5170, 5174, 5178, 5179, 5181",
      /* 2833 */ "5181, 5181, 5181, 5181, 5183, 5184, 5184, 5186, 5184, 5188, 5190, 5310, 5319, 5454, 5301, 4873, 5263",
      /* 2850 */ "5472, 5435, 5334, 5298, 5301, 5301, 5301, 4997, 5032, 5479, 5301, 5301, 5301, 5016, 5579, 5301, 5209",
      /* 2867 */ "5732, 5301, 5644, 5278, 5301, 4877, 5153, 5301, 4890, 5453, 4889, 5275, 5301, 5301, 5301, 5059, 5209",
      /* 2884 */ "5731, 5301, 5301, 4910, 5753, 5290, 5301, 5422, 5301, 4952, 5742, 4952, 5042, 5301, 5301, 5301, 5154",
      /* 2901 */ "5301, 5421, 5027, 5301, 5301, 5301, 5493, 5429, 5033, 5301, 5301, 4963, 4991, 5301, 5430, 5027, 5301",
      /* 2918 */ "4970, 5301, 5301, 4970, 5443, 5264, 5732, 5301, 4970, 5301, 5438, 5206, 5301, 5301, 5301, 5077, 5435",
      /* 2935 */ "5301, 5301, 5645, 5301, 4971, 4973, 5392, 5351, 5208, 5148, 5363, 5150, 5630, 5301, 5301, 5416, 5630",
      /* 2952 */ "5301, 5301, 4953, 5362, 5265, 5200, 5301, 4975, 5301, 5301, 4990, 5301, 4990, 4981, 5042, 5301, 5301",
      /* 2969 */ "4993, 5301, 4996, 5042, 5301, 5301, 4996, 5301, 5301, 5301, 5435, 5344, 5301, 4979, 4869, 5263, 5212",
      /* 2986 */ "5301, 5301, 5301, 5052, 5494, 5301, 5301, 5301, 5080, 5074, 5301, 5732, 5301, 5301, 4974, 5301, 5301",
      /* 3003 */ "5301, 5622, 5737, 5301, 5301, 5301, 5081, 5489, 5594, 5630, 5301, 5301, 5301, 5083, 5440, 5012, 5025",
      /* 3020 */ "5200, 5443, 5647, 5212, 5301, 4988, 4988, 4988, 4979, 5301, 5301, 5301, 4874, 5301, 5301, 5154, 5579",
      /* 3037 */ "5301, 5301, 5301, 5140, 5483, 5580, 5301, 5301, 5301, 5153, 5153, 5737, 5301, 5301, 4996, 5742, 5042",
      /* 3054 */ "5301, 5042, 5301, 5435, 5298, 5301, 4988, 4988, 5624, 5301, 5301, 5446, 4995, 5453, 5301, 5301, 5301",
      /* 3071 */ "5760, 5080, 5301, 5301, 5620, 5301, 5301, 5301, 5074, 4988, 4988, 4988, 4988, 5301, 5301, 5301, 4869",
      /* 3088 */ "5434, 5301, 5382, 5025, 5138, 5301, 5301, 5435, 5301, 5301, 4976, 5301, 5301, 5646, 5646, 5153, 5301",
      /* 3105 */ "5301, 5301, 5202, 5440, 5025, 5153, 5301, 5301, 5574, 5301, 5301, 5301, 5224, 5301, 5434, 5623, 5301",
      /* 3122 */ "5301, 5301, 5214, 5301, 5301, 5301, 5623, 5301, 5301, 4977, 5301, 5646, 5301, 5301, 5301, 5231, 4960",
      /* 3139 */ "5301, 5472, 5301, 5301, 4979, 5301, 5301, 5231, 4960, 4963, 5730, 5436, 5436, 5153, 5301, 5301, 4982",
      /* 3156 */ "5301, 5351, 4952, 5337, 5739, 5630, 5301, 5301, 5302, 5441, 5384, 5301, 5351, 5456, 5301, 5301, 5301",
      /* 3173 */ "5305, 5239, 4888, 5241, 5243, 5243, 5244, 5246, 5248, 5250, 5250, 5250, 5250, 5251, 5250, 5250, 5250",
      /* 3190 */ "5252, 5254, 5254, 5254, 5256, 5256, 5256, 5256, 5258, 5259, 4962, 5626, 5348, 5542, 5301, 4912, 4891",
      /* 3207 */ "5301, 5301, 4985, 4891, 5457, 5154, 5301, 5301, 5304, 5269, 5301, 5301, 5301, 5301, 4867, 5628, 5457",
      /* 3224 */ "5281, 5301, 4990, 5301, 5301, 5301, 5237, 4974, 5272, 5630, 5301, 5301, 5360, 5301, 5301, 5301, 5213",
      /* 3241 */ "5301, 5447, 5277, 5301, 5280, 5282, 5301, 5301, 5301, 5302, 5232, 4962, 5626, 5301, 5336, 5301, 5301",
      /* 3258 */ "4992, 5301, 5457, 4867, 5301, 4991, 5204, 5301, 5263, 5301, 5457, 5019, 5436, 5138, 5301, 5301, 5301",
      /* 3275 */ "5304, 5152, 5630, 5301, 5301, 5056, 5301, 5054, 5393, 5138, 5301, 4996, 5744, 5301, 5301, 5153, 5321",
      /* 3292 */ "4906, 5542, 5301, 5301, 5301, 5308, 5301, 5159, 5301, 5301, 5301, 5310, 4906, 5301, 5302, 5326, 5372",
      /* 3309 */ "4969, 5149, 5296, 5151, 5054, 5348, 5152, 5301, 5007, 5007, 5010, 5007, 5007, 5010, 5301, 5007, 5010",
      /* 3326 */ "5301, 5301, 5301, 4910, 5301, 5348, 5437, 5301, 5301, 5301, 5319, 5301, 5301, 5301, 5320, 5301, 5301",
      /* 3343 */ "5301, 5317, 5433, 5331, 5437, 5301, 5301, 5074, 5464, 4962, 5626, 5338, 5301, 5017, 5301, 5301, 4989",
      /* 3360 */ "5214, 5301, 5301, 5333, 5301, 5301, 5301, 5323, 4910, 5372, 4969, 5295, 5431, 5431, 5301, 5301, 5301",
      /* 3377 */ "5336, 5301, 5320, 5301, 5320, 5020, 5301, 5354, 5320, 5301, 5301, 5080, 5304, 5301, 5301, 5154, 4969",
      /* 3394 */ "5295, 5197, 5301, 5018, 5301, 5301, 5028, 5301, 4910, 4968, 5361, 5296, 5151, 5301, 5301, 5320, 5301",
      /* 3411 */ "5321, 5301, 5301, 5301, 5313, 5301, 5302, 5753, 4963, 5730, 5301, 5301, 5301, 5360, 4984, 5628, 5302",
      /* 3428 */ "5627, 5301, 5301, 5301, 5434, 5301, 5301, 5301, 4990, 4990, 5354, 5321, 5301, 5301, 5080, 5434, 5301",
      /* 3445 */ "5301, 5131, 5133, 5296, 5350, 5301, 5301, 5146, 4974, 4968, 5295, 5197, 5301, 5042, 5301, 5042, 5301",
      /* 3462 */ "4906, 5301, 5301, 5301, 4906, 5321, 5301, 5302, 5143, 5452, 5154, 5301, 5446, 5301, 5301, 4868, 5301",
      /* 3479 */ "5301, 4874, 5628, 5202, 5301, 5301, 5301, 5440, 5354, 5483, 5441, 5343, 5301, 5301, 5301, 5463, 5628",
      /* 3496 */ "5440, 5203, 5350, 5301, 5301, 5158, 5448, 5301, 5310, 4963, 5301, 5301, 4991, 5301, 5301, 5624, 5301",
      /* 3513 */ "5301, 5301, 5266, 5301, 5301, 5301, 5624, 5350, 4868, 5390, 5435, 5437, 5443, 4905, 5263, 5301, 5301",
      /* 3530 */ "5685, 5301, 5480, 5480, 5481, 5396, 5480, 5395, 5398, 5398, 5399, 5400, 5402, 5405, 5405, 5405, 5405",
      /* 3547 */ "5404, 5405, 5405, 5405, 5404, 5405, 5409, 5408, 5407, 5407, 5411, 5411, 5411, 5411, 5413, 5414, 5755",
      /* 3564 */ "5298, 5301, 5301, 5220, 5499, 5301, 5301, 5074, 5301, 4868, 5301, 5301, 5301, 5561, 5301, 5301, 5301",
      /* 3581 */ "5283, 5080, 5304, 5452, 5301, 5042, 5301, 5345, 5301, 5453, 4867, 5301, 5042, 5360, 5301, 5301, 5301",
      /* 3598 */ "5424, 5420, 5301, 5301, 5301, 5468, 5426, 5428, 5301, 5301, 5260, 4868, 5301, 5310, 5301, 5301, 5272",
      /* 3615 */ "5301, 5314, 5316, 5301, 5301, 5274, 5158, 5315, 5301, 5301, 5301, 5472, 5301, 4974, 5217, 5212, 5301",
      /* 3632 */ "5301, 5287, 5289, 5043, 5301, 5301, 5307, 5301, 5317, 4885, 5301, 5302, 5474, 4989, 5076, 5355, 5026",
      /* 3649 */ "5301, 5074, 5137, 5630, 5301, 5439, 5629, 5301, 5301, 5301, 5563, 4978, 5023, 5217, 5014, 5747, 5301",
      /* 3666 */ "5301, 5301, 5497, 5301, 5459, 5024, 5739, 5301, 5616, 5301, 5301, 5300, 5301, 5302, 5496, 5460, 5024",
      /* 3683 */ "5749, 5138, 5301, 5301, 5302, 5318, 5450, 5075, 5025, 5750, 5301, 5301, 5617, 5301, 5301, 5017, 5301",
      /* 3700 */ "5282, 5491, 5042, 5301, 5301, 5302, 5376, 5294, 5301, 5310, 5024, 5739, 5301, 5310, 5221, 5153, 5231",
      /* 3717 */ "5497, 5024, 5483, 5739, 4868, 5301, 5390, 5472, 5301, 5501, 5739, 5301, 5080, 5016, 5301, 5128, 5301",
      /* 3734 */ "5301, 5237, 5301, 5301, 5301, 5446, 5301, 5335, 5138, 5301, 5301, 5302, 5590, 5079, 5301, 5301, 5301",
      /* 3751 */ "5621, 5074, 5301, 4869, 5263, 5301, 5302, 5293, 5301, 5301, 5618, 5301, 5016, 5301, 5301, 5301, 4991",
      /* 3768 */ "5301, 5301, 5074, 5301, 5301, 5554, 5301, 5301, 5504, 5153, 5301, 5301, 5498, 5335, 5153, 5301, 5309",
      /* 3785 */ "5301, 5310, 5497, 5483, 5739, 5301, 5560, 5153, 5301, 5143, 5301, 5310, 4963, 4991, 5301, 5301, 5263",
      /* 3802 */ "5301, 5350, 5301, 5449, 5758, 5153, 5301, 4868, 5263, 5541, 5301, 5144, 5301, 4891, 5301, 4891, 5301",
      /* 3819 */ "4867, 5301, 4992, 5301, 5739, 5301, 5739, 5497, 5739, 5301, 5301, 5301, 5508, 5023, 5301, 5541, 5301",
      /* 3836 */ "5301, 5301, 5496, 5320, 4904, 5301, 5301, 5302, 5642, 5491, 5301, 5301, 5319, 4904, 5301, 5319, 5301",
      /* 3853 */ "5320, 5023, 5738, 5298, 5301, 5153, 5544, 5301, 5154, 5301, 4904, 4907, 5301, 4907, 4907, 5519, 5301",
      /* 3870 */ "5513, 5618, 5267, 5510, 5235, 5042, 5301, 5787, 5301, 5443, 5301, 5301, 5218, 4869, 5646, 5298, 5301",
      /* 3887 */ "5154, 5301, 4991, 5298, 5301, 5301, 5299, 5301, 5518, 5522, 4966, 5524, 5524, 5525, 5527, 5529, 5533",
      /* 3904 */ "5533, 5533, 5531, 5533, 5533, 5532, 5533, 5533, 5535, 5537, 5537, 5539, 5539, 5539, 5539, 5540, 5301",
      /* 3921 */ "5304, 5509, 5502, 5222, 5222, 5301, 5301, 5301, 5554, 5546, 5346, 5635, 5301, 5154, 5301, 5301, 5308",
      /* 3938 */ "5666, 4998, 5000, 5261, 5301, 5301, 5553, 5301, 5553, 5301, 5156, 5301, 5301, 5477, 5301, 5301, 5546",
      /* 3955 */ "5135, 5301, 5157, 5301, 5301, 4873, 5301, 5301, 5301, 5301, 5635, 5301, 5158, 5301, 5237, 5673, 5301",
      /* 3972 */ "5301, 5320, 5041, 5301, 5301, 5301, 5312, 5559, 5301, 5572, 5301, 5194, 5191, 5193, 5301, 5301, 5578",
      /* 3989 */ "5301, 5196, 5147, 5301, 4876, 5301, 5301, 5301, 5301, 5582, 5548, 5635, 5308, 5547, 5549, 5301, 5199",
      /* 4006 */ "5301, 5301, 4910, 5327, 4968, 5361, 5301, 5301, 5574, 5320, 4905, 5618, 5301, 5442, 5016, 5236, 5301",
      /* 4023 */ "5301, 5309, 5301, 5301, 5301, 5310, 5452, 5301, 5211, 5301, 5301, 4971, 5288, 5301, 5302, 5445, 5346",
      /* 4040 */ "5301, 5302, 5754, 5346, 5134, 5301, 5301, 5301, 5574, 5301, 5301, 5437, 5554, 5301, 4874, 5301, 5301",
      /* 4057 */ "5564, 5153, 5445, 5377, 5379, 5469, 5302, 5584, 5455, 5378, 5347, 5138, 5301, 5301, 5310, 5226, 5080",
      /* 4074 */ "5263, 5234, 5516, 4986, 5153, 5301, 5301, 5310, 5418, 5301, 5301, 5588, 5377, 5465, 5153, 5301, 5301",
      /* 4091 */ "5311, 5301, 5301, 5301, 5739, 5304, 4967, 5378, 5469, 5080, 5646, 5016, 5236, 5301, 5350, 5301, 5301",
      /* 4108 */ "5322, 5321, 5301, 5304, 4989, 5465, 5153, 5023, 5298, 5301, 5301, 5354, 5301, 5301, 5301, 5301, 5586",
      /* 4125 */ "5301, 5301, 5301, 5576, 5301, 5301, 5624, 5520, 5301, 5452, 5301, 5301, 4952, 5301, 4867, 5301, 5301",
      /* 4142 */ "5618, 5434, 5301, 5301, 5623, 5350, 5080, 4952, 5304, 5592, 4884, 5301, 5301, 5630, 5301, 5360, 5472",
      /* 4159 */ "5301, 5215, 4993, 5301, 5301, 5301, 5303, 5192, 5191, 5475, 5596, 5596, 5597, 5618, 5301, 5487, 5301",
      /* 4176 */ "5074, 5342, 5301, 5042, 5301, 5341, 5733, 5602, 5602, 5602, 5602, 5600, 5602, 5602, 5602, 5604, 5606",
      /* 4193 */ "5601, 5608, 5610, 5612, 5612, 5612, 5612, 5614, 5615, 5554, 5301, 5351, 5301, 5301, 5301, 5579, 5301",
      /* 4210 */ "5303, 5301, 5301, 5373, 4974, 5649, 5301, 5651, 5301, 5215, 5260, 5215, 5031, 5436, 5344, 5301, 5636",
      /* 4227 */ "5301, 5301, 5381, 5391, 5643, 5301, 5309, 5301, 5224, 5371, 4964, 5619, 5298, 5653, 5655, 5301, 5301",
      /* 4244 */ "5388, 5301, 5678, 5301, 5301, 5301, 5624, 5007, 5007, 5007, 5007, 5008, 5679, 5301, 5301, 5301, 5628",
      /* 4261 */ "5302, 5293, 5301, 5298, 4970, 5301, 5301, 5301, 5132, 5308, 5663, 5301, 5301, 5428, 5301, 5653, 4980",
      /* 4278 */ "5301, 5301, 5434, 5349, 5665, 5677, 5261, 5437, 5301, 5308, 5676, 5659, 5668, 5301, 5301, 5301, 5642",
      /* 4295 */ "5301, 5350, 5301, 4952, 5301, 5301, 5301, 4979, 4868, 5304, 5320, 5561, 5630, 5301, 5514, 5301, 5301",
      /* 4312 */ "5441, 5354, 5301, 5302, 5013, 5301, 5301, 5301, 5301, 5672, 5301, 5225, 5301, 5301, 4870, 5471, 5000",
      /* 4329 */ "5261, 5437, 5301, 5301, 5665, 5083, 4999, 5013, 5301, 5350, 5351, 5301, 4911, 5638, 5629, 5301, 5301",
      /* 4346 */ "5042, 5301, 5624, 5452, 5301, 5301, 5301, 5437, 5625, 5301, 5301, 5301, 5646, 5263, 5301, 5554, 5351",
      /* 4363 */ "4911, 5566, 5037, 5566, 5067, 5566, 5566, 5070, 5568, 5073, 5638, 5630, 5301, 5468, 5301, 5598, 4908",
      /* 4380 */ "5301, 5301, 5301, 5657, 5675, 5083, 4999, 5013, 5262, 5301, 5301, 5301, 5661, 4868, 5301, 5304, 5666",
      /* 4397 */ "4998, 5301, 5301, 5681, 5301, 5231, 5085, 5080, 5301, 5638, 5630, 5301, 5620, 5683, 5075, 5261, 5301",
      /* 4414 */ "5231, 5497, 5748, 5335, 5301, 5304, 5083, 5053, 5262, 5301, 5301, 5661, 5301, 5310, 4993, 5301, 5260",
      /* 4431 */ "5270, 5301, 5301, 5301, 5007, 5007, 5007, 5788, 5010, 4952, 5321, 5468, 4970, 5301, 5472, 4970, 4905",
      /* 4448 */ "5319, 5301, 5301, 5444, 5374, 4868, 5153, 5661, 5624, 5343, 5301, 5301, 5215, 5216, 5031, 5042, 5301",
      /* 4465 */ "5301, 5456, 5301, 5301, 5415, 5032, 5301, 5301, 5661, 5039, 5301, 5301, 5301, 5715, 5032, 5301, 5301",
      /* 4482 */ "5301, 5726, 5489, 5032, 5301, 5566, 4997, 5032, 5301, 5301, 5042, 4905, 5301, 4997, 5301, 5074, 5074",
      /* 4499 */ "5593, 5297, 5301, 5301, 5301, 5618, 5016, 5598, 5301, 5339, 4905, 5301, 4996, 5742, 5301, 5687, 5598",
      /* 4516 */ "5350, 5301, 5260, 5301, 5301, 5443, 5511, 5301, 5631, 5631, 5633, 5632, 5689, 5631, 5691, 5691, 5692",
      /* 4533 */ "5694, 5696, 5698, 5699, 5700, 5700, 5700, 5700, 5698, 5700, 5703, 5704, 5699, 5701, 5706, 5708, 5708",
      /* 4550 */ "5710, 5710, 5710, 5710, 5712, 5713, 5226, 5451, 4965, 5619, 5298, 5141, 5720, 5301, 5301, 5459, 5023",
      /* 4567 */ "5717, 5630, 5301, 5301, 5467, 5301, 5301, 5301, 5491, 5301, 5301, 4907, 5446, 5719, 5306, 5722, 5301",
      /* 4584 */ "5263, 5554, 5301, 5301, 4874, 5628, 5623, 5437, 5301, 5301, 4878, 5724, 5301, 5634, 4953, 4955, 4957",
      /* 4601 */ "5301, 5301, 5301, 5753, 4954, 4956, 5630, 5301, 5215, 5439, 5727, 5301, 5301, 5301, 5752, 5461, 5301",
      /* 4618 */ "5301, 5729, 5461, 5134, 5077, 5301, 5301, 5042, 5301, 5736, 5301, 5301, 5488, 5360, 5318, 5293, 5353",
      /* 4635 */ "5364, 5301, 5735, 4908, 5352, 5301, 5304, 5630, 5301, 5434, 5301, 5301, 5360, 5461, 4974, 5301, 5456",
      /* 4652 */ "5328, 4989, 5085, 5355, 5301, 5735, 4908, 4987, 5085, 5355, 4957, 5301, 5040, 5217, 5150, 5630, 5746",
      /* 4669 */ "4964, 5619, 5298, 5301, 5302, 5752, 4908, 4987, 5224, 5482, 5301, 5301, 5506, 5301, 5301, 5305, 5301",
      /* 4686 */ "5301, 5016, 5304, 5757, 5086, 5301, 5301, 5301, 5741, 5301, 5301, 5744, 5153, 5752, 4986, 5084, 5217",
      /* 4703 */ "5150, 4873, 5301, 4911, 5301, 5301, 5301, 5541, 5646, 5301, 5304, 4986, 5354, 5623, 5301, 4974, 5301",
      /* 4720 */ "5301, 5350, 4952, 4911, 5301, 5301, 5588, 5621, 5080, 5301, 5301, 5561, 4880, 4887, 4895, 5646, 5263",
      /* 4737 */ "5350, 5301, 5285, 5301, 5301, 4985, 5301, 5301, 5360, 5354, 5623, 5301, 5301, 5621, 5340, 5301, 5301",
      /* 4754 */ "5301, 5755, 5301, 5301, 5646, 5301, 4906, 5628, 5554, 5301, 4909, 4891, 5301, 5762, 5765, 5301, 5763",
      /* 4771 */ "5301, 5292, 5627, 5150, 5301, 5303, 5319, 5453, 5453, 5081, 5082, 5767, 5767, 5767, 5768, 5767, 5769",
      /* 4788 */ "5767, 5768, 5767, 5774, 5767, 5773, 5770, 5771, 5770, 5776, 5776, 5776, 5776, 5776, 5777, 5778, 5776",
      /* 4805 */ "5777, 5780, 5782, 5784, 5302, 5752, 4874, 5301, 5301, 5301, 5786, 5301, 5301, 5301, 5301, 5562, 5301",
      /* 4822 */ "4892, 4875, 5301, 5301, 5301, 5510, 5080, 5301, 5301, 5324, 5301, 5301, 5551, 5329, 5301, 5753, 5301",
      /* 4839 */ "5301, 5556, 5302, 4872, 5301, 5301, 5301, 5560, 5301, 5301, 5301, 5386, 5350, 5301, 5301, 5301, 5322",
      /* 4856 */ "5301, 5301, 5564, 5670, 5302, 5301, 5301, 5301, 5573, 5301, 1073872896, 131072, 0, 16, 0, 20, 48, 0",
      /* 4874 */ "32, 0, 36, 0, 38, 161792, 262146, 262160, -2147221504, -2147221504, 262144, -2147483648, 6815744",
      /* 4887 */ "268566528, 131072, 257, 4740, 256, 0, 62, 262160, 537133056, -2147221504, 10560, 33816576, 537133056",
      /* 4900 */ "8768, 262144, 262160, 262144, 262144, 0, 64, 0, 128, 256, 1, 2, 0, 132, 278528, 278528, 278544",
      /* 4917 */ "537149440, 278530, 537149440, 278530, 772014080, 235143168, 235143168, 772014080, 772014080",
      /* 4926 */ "168034304, 168034304, 235143168, 168034304, 772030464, -1375469568, -1375469568, 772014080",
      /* 4934 */ "168034304, 772014080, 163872, 294944, 294944, 163840, 2392096, 537165856, -2147188704, 294944",
      /* 4944 */ "-2147188674, -2145091522, -2145091522, -2111537090, -2145091522, 772046880, 772046880, -1910210498",
      /* 4952 */ "4096, 0, 135, 323840, 3670016, 33554432, -2147483648, 2, 16, 32, 32, 128, 512, 1024, 4096, 128, 2048",
      /* 4969 */ "4096, 8192, 0, 323, 129024, 2097152, 0, 331, 0, 448, 16384, 0, 512, 2048, 8192, 64, 64, 128, 8192",
      /* 4988 */ "16384, 16384, 32768, 0, 1024, 524288, 0, 1280, 0, 2048, 16384, 65536, 131072, 262144, 262174, 12, 14",
      /* 5005 */ "2129952, 2129920, 32768, 32768, 32800, 2129920, 2129920, 65536, 262144, 2097152, 4194304, 8388608, 0",
      /* 5018 */ "265, 69632, 2097152, -2147483648, 12, 32768, 131072, 1048576, 4194304, -1207959552, 0, -436207616",
      /* 5030 */ "32, 2097152, 8388608, 16777216, -1207959552, 32, 2097184, 2, 1073774592, 16, 32768, 262144, 16777216",
      /* 5043 */ "0, 10240, 80, 272, 272, 65552, 262160, 268444864, 268435472, 16, 131072, 2097152, 12582912, 0, 10496",
      /* 5058 */ "17, 20, 1888485376, 24, 304, 48, 1048848, 1572880, 524304, 28, 21, 53, 28, 16, 131088, 28, 0, 16384",
      /* 5076 */ "131072, 524288, 2097152, 524288, 4194304, 0, 3072, 3072, 16384, 262144, 524288, -2147483648, 2, 304",
      /* 5090 */ "165675008, 272, 1048592, 272, 84, 20, 372, -165649452, -165649452, -165649451, -165649451",
      /* 5101 */ "-164559888, -164535312, -164535312, -164535308, -164273168, -164535308, -700906512, -701430800",
      /* 5109 */ "-701430800, -164535308, -164535308, -164273164, -164535308, -700906508, -164535308, 80, 16, 524560",
      /* 5119 */ "21, 112, 140511253, 140515349, 140539925, 140540573, 140540573, 140540605, -26141771, 0, 17408",
      /* 5130 */ "163577856, 0, 19504, 631242752, 0, 24576, -1610612736, 100663296, 536870912, -2147483648, 138412032",
      /* 5141 */ "0, 28672, 4, 128, 8256, 17303552, 2105344, 0, 114688, 2097152, 33554432, 201326592, 536870912, 0",
      /* 5155 */ "131072, 131072, 24, 0, 40, 44, 941162496, 941162496, 805371937, 805371937, 847314977, 2031683649",
      /* 5167 */ "957941825, 957941827, 957941825, 957941857, 957941857, 957941859, 960047171, 960038977, 957941857",
      /* 5176 */ "960047171, 957941857, 960038977, 960038977, 960174145, -1199718400, -1199718400, -1199717854",
      /* 5184 */ "-1199717846, -1199717846, -1199717782, -1199717846, -1182939039, -1182939039, -1182938517, 0, 262145",
      /* 5193 */ "262145, 524292, 262145, 526336, 16777216, 134217728, 1638400, 939524096, -2147483648, 1, 65536",
      /* 5204 */ "8388608, 1073741824, 1572864, 939524096, 196608, 0, 1640448, 65536, 805306368, 0, 393216, 0, 524288",
      /* 5217 */ "524288, 1048576, 65600, 49152, 1048576, 268435456, 1073741824, 4, 8, 8, 16, 272, 16, 514, 1, 4, 16",
      /* 5234 */ "1048576, 8388608, 50331648, 0, 262144, 536871168, 67109121, 525312, 67174657, -1507782399",
      /* 5244 */ "-1507782399, -2145386488, -1876951032, -2145386488, -2145386456, -2145381716, -1507782391",
      /* 5251 */ "-1507782391, -432729847, -1507782391, -432729847, -432729847, -1344145085, -1344145085, -1344145077",
      /* 5259 */ "-1344145077, 0, 2097152, 25165824, 0, 65536, 1572864, 6291456, 0, 65600, 525312, 0, 2629632, 8",
      /* 5273 */ "2097152, -1879048192, 0, 3737600, 2101760, 0, 3745792, 265, 2166784, -1509949440, 0, 3407872",
      /* 5285 */ "3477504, -436207616, 323, 14809088, -1358954496, 0, 3872768, 1, 256, 4096, 114688, 12582912",
      /* 5297 */ "16777216, 1073741824, 0, -126877696, 0, 0, 1, 0, 2, -2147483648, 6, 0, 3, 0, 4, 0, 5, 16832, 688128",
      /* 5316 */ "-1200619520, 0, 6, 128, 0, 8, 0, 12, 0, 14, 2, 64, 256, 8192, 655360, 65536, 33554432, 65536",
      /* 5334 */ "67108864, 134217728, 268435456, 4608, 16777216, 67108864, 1048576, 33554432, 1073741824, 8388608",
      /* 5344 */ "134217728, 1073741824, 8192, 524288, 16777216, 33554432, 134217728, 0, 4096, 57344, 262144, 1048576",
      /* 5356 */ "2097152, 2097184, 2097184, 2129920, 0, 8192, 114688, 262144, 1572864, 2097152, 2129920, 16, 48",
      /* 5369 */ "524304, 1048592, 16, 256, 2048, 24576, -2147483648, 2, 2048, 57344, 393216, 524288, 1, 49152, 262144",
      /* 5384 */ "12582912, 134217728, 32768, 8388608, 32768, 134217728, 32, 65536, 12582912, 50331648, 201326592",
      /* 5395 */ "17039368, 131328, 131328, 807043332, 807043332, 806912004, 806912004, 806928388, 806929412",
      /* 5404 */ "1889173780, 1880785156, 1880785156, 1880795910, 1880795396, 1880795396, 1880785156, -1199914555",
      /* 5412 */ "-1199914555, -126172731, -126172731, 0, 6291456, 939524096, 256, 688128, 806354944, 0, 8241152",
      /* 5423 */ "-1207959552, 4, 557056, 4, 688128, 1880096768, 0, 8243200, 16777216, 201326592, 11008, 0, 8388608",
      /* 5436 */ "33554432, 67108864, 0, 40960, 0, 49152, 65536, 1048576, 0, 160, 1024, 0, 172, 0, 192, 256, 512, 0",
      /* 5454 */ "256, 1024, 2048, 0, 257, 4, 256, 16384, 524288, 4, 32768, 393216, 16777216, 1879048192, 0, 16777216",
      /* 5470 */ "536870912, 1887436800, 0, 33554432, 4, 448, 262145, -134217728, 0, 41943040, 0, 131328, 1024",
      /* 5483 */ "4194304, 134217728, 134217728, 524288, 2, 512, 16384, 2097152, 8, 262144, 4, 1048576, 939524096, 4",
      /* 5497 */ "192, 16384, 4194304, 536870912, 4, 131072, 16777216, 4, 268435456, 192, 536870912, 2, 256, 32768",
      /* 5511 */ "1048576, 536870912, 8, 64, 384, 0, 50331648, 536871040, 128, 131072, 1073741824, 1075839492, 128",
      /* 5524 */ "-1610079071, -1610079071, -2146819039, -2146950111, -2146917343, -1073208287, -1073077215",
      /* 5531 */ "-1559731039, -1593285471, -1610062687, -1610062687, -1542953823, -1610062671, -1542953823",
      /* 5538 */ "-1408736095, -1592857437, -1592857437, 0, 67108864, 536870912, 516, 2097152, 1, 1184, 59392",
      /* 5549 */ "17694720, -1610612736, 1, 1056, -1073741824, 0, 134217728, 17301504, 0, 239075328, 50855936, 0",
      /* 5561 */ "268435456, 0, 46, 0, 48, 16, 16, 17, 16, 20, 304, 1, 24576, 0, 536870912, 67633152, 1200",
      /* 5578 */ "-1476395008, 0, 805306368, -2147483648, 3, 1184, 2, 160, 4, 512, 2, 128, 4, 262144, 268435464, 4096",
      /* 5594 */ "4194304, 939524096, 2359297, 2359297, 0, 1073741824, 572784657, 540278803, 539230225, 539230225",
      /* 5604 */ "572784657, 539230225, 572784657, -1608253423, 540278803, 540278803, 540311571, 540279315, 94850083",
      /* 5613 */ "94850083, 631721011, 631721011, 0, 1610612736, 0, 4194304, 16777216, 8192, 262144, 33554432, 0",
      /* 5625 */ "32768, 512, 4096, 65536, 0, -2147483648, 0, -2147483646, -2147483646, 0, -1610612736, 0, -1608515584",
      /* 5638 */ "8, 268435456, 1, 262144, 16, 538968064, 0, 2013265920, 0, 1048576, 134217728, 572522496, 0, 3",
      /* 5652 */ "540016640, 294912, 0, 528, 0, 3, 19488, 458752, 2097152, 16, 536870912, 3145728, 0, 3, 32, 3072",
      /* 5668 */ "25165824, 67108864, 603979776, 0, 3, 1048576, 1073741824, 2, 32, 19456, 458752, 94371840, 0, 4",
      /* 5682 */ "524288, 2, 3072, 65536, 134217728, 131104, 1048, 8389656, -2147483646, -2146938874, -2146938874",
      /* 5693 */ "2650112, 271085568, 2650112, 136867840, 136867840, -2146928634, -2146928634, -2144831482",
      /* 5701 */ "-2144831482, -2144765946, -2140637178, -2144831482, -2077722618, -2146928634, -2144700378",
      /* 5708 */ "-1593280506, -1593280506, -2109935225, -2109935225, -2109933177, -2109933177, 0, 6, 20480, 30720",
      /* 5718 */ "524288, 30720, 2621440, 0, 96256, 0, 17301504, -1610612736, 135, 325888, -2147483648, 6, 4096",
      /* 5731 */ "16777216, 939524096, 0, 524292, 1, 6, 2048, 16777216, 268435456, 536870912, 6, 16384, 8388608, 8192",
      /* 5745 */ "2097152, 8, 256, 131072, 4194304, 402653184, 536870912, 2, 4, 32, 1024, 8388608, 4, 16384, 268435456",
      /* 5760 */ "8, 1024, 4352, 17152, 0, 17152, 12288, 15396, 15396, 15652, 15406, 15406, 15422, 15406, 15652, 15652",
      /* 5776 */ "68, 68, 324, 68, 4164, 8260, 15716, 15716, 15460, 0, 4, 64, 32768, 2129920, 2097184"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 5791; ++i) {EXPECTED[i] = Integer.parseInt(s2[i]);}
  }

  private static final String[] TOKEN =
  {
    "(0)",
    "IntegerLiteral",
    "DecimalLiteral",
    "DoubleLiteral",
    "StringLiteral",
    "URIQualifiedName",
    "PredefinedEntityRef",
    "'\"\"'",
    "EscapeApos",
    "ElementContentChar",
    "QuotAttrContentChar",
    "AposAttrContentChar",
    "PITarget",
    "CharRef",
    "NCName",
    "QName",
    "StringConstructorChars",
    "S",
    "S",
    "CommentContents",
    "PragmaContents",
    "Wildcard",
    "DirCommentContents",
    "DirPIContents",
    "CDataSectionContents",
    "EOF",
    "'!'",
    "'!='",
    "'\"'",
    "'#'",
    "'#)'",
    "'$'",
    "'%'",
    "''''",
    "'('",
    "'(#'",
    "'(:'",
    "')'",
    "'*'",
    "'+'",
    "','",
    "'-'",
    "'-->'",
    "'.'",
    "'..'",
    "'/'",
    "'//'",
    "'/>'",
    "':'",
    "':)'",
    "'::'",
    "':='",
    "';'",
    "'<'",
    "'<!--'",
    "'<![CDATA['",
    "'</'",
    "'<<'",
    "'<='",
    "'<?'",
    "'='",
    "'=>'",
    "'>'",
    "'>='",
    "'>>'",
    "'?'",
    "'?>'",
    "'@'",
    "'NaN'",
    "'['",
    "']'",
    "']]>'",
    "']``'",
    "'``['",
    "'`{'",
    "'after'",
    "'all'",
    "'allowing'",
    "'ancestor'",
    "'ancestor-or-self'",
    "'and'",
    "'any'",
    "'array'",
    "'as'",
    "'ascending'",
    "'at'",
    "'attribute'",
    "'base-uri'",
    "'before'",
    "'boundary-space'",
    "'by'",
    "'case'",
    "'cast'",
    "'castable'",
    "'catch'",
    "'child'",
    "'collation'",
    "'comment'",
    "'construction'",
    "'contains'",
    "'content'",
    "'context'",
    "'copy'",
    "'copy-namespaces'",
    "'count'",
    "'decimal-format'",
    "'decimal-separator'",
    "'declare'",
    "'default'",
    "'delete'",
    "'descendant'",
    "'descendant-or-self'",
    "'descending'",
    "'diacritics'",
    "'different'",
    "'digit'",
    "'distance'",
    "'div'",
    "'document'",
    "'document-node'",
    "'element'",
    "'else'",
    "'empty'",
    "'empty-sequence'",
    "'encoding'",
    "'end'",
    "'entire'",
    "'eq'",
    "'every'",
    "'exactly'",
    "'except'",
    "'exponent-separator'",
    "'external'",
    "'first'",
    "'following'",
    "'following-sibling'",
    "'for'",
    "'from'",
    "'ft-option'",
    "'ftand'",
    "'ftnot'",
    "'ftor'",
    "'function'",
    "'ge'",
    "'greatest'",
    "'group'",
    "'grouping-separator'",
    "'gt'",
    "'idiv'",
    "'if'",
    "'import'",
    "'in'",
    "'infinity'",
    "'inherit'",
    "'insensitive'",
    "'insert'",
    "'instance'",
    "'intersect'",
    "'into'",
    "'invoke'",
    "'is'",
    "'item'",
    "'language'",
    "'last'",
    "'lax'",
    "'le'",
    "'least'",
    "'let'",
    "'levels'",
    "'lowercase'",
    "'lt'",
    "'map'",
    "'minus-sign'",
    "'mod'",
    "'modify'",
    "'module'",
    "'most'",
    "'namespace'",
    "'namespace-node'",
    "'ne'",
    "'next'",
    "'no'",
    "'no-inherit'",
    "'no-preserve'",
    "'node'",
    "'nodes'",
    "'not'",
    "'occurs'",
    "'of'",
    "'only'",
    "'option'",
    "'or'",
    "'order'",
    "'ordered'",
    "'ordering'",
    "'paragraph'",
    "'paragraphs'",
    "'parent'",
    "'pattern-separator'",
    "'per-mille'",
    "'percent'",
    "'phrase'",
    "'preceding'",
    "'preceding-sibling'",
    "'preserve'",
    "'previous'",
    "'processing-instruction'",
    "'relationship'",
    "'rename'",
    "'replace'",
    "'return'",
    "'revalidation'",
    "'same'",
    "'satisfies'",
    "'schema'",
    "'schema-attribute'",
    "'schema-element'",
    "'score'",
    "'self'",
    "'sensitive'",
    "'sentence'",
    "'sentences'",
    "'skip'",
    "'sliding'",
    "'some'",
    "'stable'",
    "'start'",
    "'stemming'",
    "'stop'",
    "'strict'",
    "'strip'",
    "'switch'",
    "'text'",
    "'then'",
    "'thesaurus'",
    "'times'",
    "'to'",
    "'transform'",
    "'treat'",
    "'try'",
    "'tumbling'",
    "'type'",
    "'typeswitch'",
    "'union'",
    "'unordered'",
    "'update'",
    "'updating'",
    "'uppercase'",
    "'using'",
    "'validate'",
    "'value'",
    "'variable'",
    "'version'",
    "'weight'",
    "'when'",
    "'where'",
    "'wildcards'",
    "'window'",
    "'with'",
    "'without'",
    "'word'",
    "'words'",
    "'xquery'",
    "'zero-digit'",
    "'{'",
    "'{{'",
    "'|'",
    "'||'",
    "'}'",
    "'}`'",
    "'}}'"
  };
}

// End
