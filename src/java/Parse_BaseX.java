// This file was generated on Mon Aug 15, 2022 11:42 (UTC+02) by REx v5.55 which is Copyright (c) 1979-2022 by Gunther Rademacher <grd@gmx.net>
// REx command line: file.ebnf -ll 2 -backtrack -tree -java -basex -name expkg-zone58.text.parse.Parse-BaseX

package expkg_zone58.text.parse;

import java.io.IOException;
import java.util.Arrays;

import org.basex.build.MemBuilder;
import org.basex.build.SingleParser;
import org.basex.core.MainOptions;
import org.basex.io.IOContent;
import org.basex.query.value.item.Str;
import org.basex.query.value.node.ANode;
import org.basex.query.value.node.DBNode;
import org.basex.util.Atts;
import org.basex.util.Token;

public class Parse_BaseX
{
  public static class ParseException extends RuntimeException
  {
    private static final long serialVersionUID = 1L;
    private int begin, end, offending, expected, state;

    public ParseException(int b, int e, int s, int o, int x)
    {
      begin = b;
      end = e;
      state = s;
      offending = o;
      expected = x;
    }

    @Override
    public String getMessage()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    }

    public void serialize(EventHandler eventHandler)
    {
    }

    public int getBegin() {return begin;}
    public int getEnd() {return end;}
    public int getState() {return state;}
    public int getOffending() {return offending;}
    public int getExpected() {return expected;}
    public boolean isAmbiguousInput() {return false;}
  }

  public interface EventHandler
  {
    public void reset(CharSequence string);
    public void startNonterminal(String name, int begin);
    public void endNonterminal(String name, int end);
    public void terminal(String name, int begin, int end);
    public void whitespace(int begin, int end);
  }

  public static class TopDownTreeBuilder implements EventHandler
  {
    private CharSequence input = null;
    private Nonterminal[] stack = new Nonterminal[64];
    private int top = -1;

    @Override
    public void reset(CharSequence input)
    {
      this.input = input;
      top = -1;
    }

    @Override
    public void startNonterminal(String name, int begin)
    {
      Nonterminal nonterminal = new Nonterminal(name, begin, begin, new Symbol[0]);
      if (top >= 0) addChild(nonterminal);
      if (++top >= stack.length) stack = Arrays.copyOf(stack, stack.length << 1);
      stack[top] = nonterminal;
    }

    @Override
    public void endNonterminal(String name, int end)
    {
      stack[top].end = end;
      if (top > 0) --top;
    }

    @Override
    public void terminal(String name, int begin, int end)
    {
      addChild(new Terminal(name, begin, end));
    }

    @Override
    public void whitespace(int begin, int end)
    {
    }

    private void addChild(Symbol s)
    {
      Nonterminal current = stack[top];
      current.children = Arrays.copyOf(current.children, current.children.length + 1);
      current.children[current.children.length - 1] = s;
    }

    public void serialize(EventHandler e)
    {
      e.reset(input);
      stack[0].send(e);
    }
  }

  public static abstract class Symbol
  {
    public String name;
    public int begin;
    public int end;

    protected Symbol(String name, int begin, int end)
    {
      this.name = name;
      this.begin = begin;
      this.end = end;
    }

    public abstract void send(EventHandler e);
  }

  public static class Terminal extends Symbol
  {
    public Terminal(String name, int begin, int end)
    {
      super(name, begin, end);
    }

    @Override
    public void send(EventHandler e)
    {
      e.terminal(name, begin, end);
    }
  }

  public static class Nonterminal extends Symbol
  {
    public Symbol[] children;

    public Nonterminal(String name, int begin, int end, Symbol[] children)
    {
      super(name, begin, end);
      this.children = children;
    }

    @Override
    public void send(EventHandler e)
    {
      e.startNonterminal(name, begin);
      int pos = begin;
      for (Symbol c : children)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
      if (pos < end) e.whitespace(pos, end);
      e.endNonterminal(name, end);
    }
  }

  public static ANode parseXQuery(Str str) throws IOException
  {
    BaseXFunction baseXFunction = new BaseXFunction()
    {
      @Override
      public void execute(Parse_BaseX p) {p.parse_XQuery();}
    };
    return baseXFunction.call(str);
  }

  public static abstract class BaseXFunction
  {
    protected abstract void execute(Parse_BaseX p);

    public ANode call(Str str) throws IOException
    {
      String input = str.toJava();
      SingleParser singleParser = new SingleParser(new IOContent(""), MainOptions.get())
      {
        @Override
        protected void parse() throws IOException {}
      };
      MemBuilder memBuilder = new MemBuilder(input, singleParser);
      memBuilder.init();
      BaseXTreeBuilder treeBuilder = new BaseXTreeBuilder(memBuilder);
      Parse_BaseX parser = new Parse_BaseX();
      parser.initialize(input, treeBuilder);
      try
      {
        execute(parser);
      }
      catch (ParseException pe)
      {
        memBuilder = new MemBuilder(input, singleParser);
        memBuilder.init();
        Atts atts = new Atts();
        atts.add(Token.token("b"), Token.token(pe.getBegin() + 1));
        atts.add(Token.token("e"), Token.token(pe.getEnd() + 1));
        if (pe.getOffending() < 0)
        {
          atts.add(Token.token("s"), Token.token(pe.getState()));
        }
        else
        {
          atts.add(Token.token("o"), Token.token(pe.getOffending()));
          atts.add(Token.token("x"), Token.token(pe.getExpected()));
        }
        memBuilder.openElem(Token.token("ERROR"), atts, new Atts());
        memBuilder.text(Token.token(parser.getErrorMessage(pe)));
        memBuilder.closeElem();
      }
      return new DBNode(memBuilder.data());
    }
  }

  public static class BaseXTreeBuilder implements EventHandler
  {
    private CharSequence input;
    private MemBuilder builder;
    private Atts nsp = new Atts();
    private Atts atts = new Atts();

    public BaseXTreeBuilder(MemBuilder b)
    {
      input = null;
      builder = b;
    }

    @Override
    public void reset(CharSequence string)
    {
      input = string;
    }

    @Override
    public void startNonterminal(String name, int begin)
    {
      try
      {
        builder.openElem(Token.token(name), atts, nsp);
      }
      catch (IOException e)
      {
        throw new RuntimeException(e);
      }
    }

    @Override
    public void endNonterminal(String name, int end)
    {
      try
      {
        builder.closeElem();
      }
      catch (IOException e)
      {
        throw new RuntimeException(e);
      }
    }

    @Override
    public void terminal(String name, int begin, int end)
    {
      if (name.charAt(0) == '\'')
      {
        name = "TOKEN";
      }
      startNonterminal(name, begin);
      characters(begin, end);
      endNonterminal(name, end);
    }

    @Override
    public void whitespace(int begin, int end)
    {
      characters(begin, end);
    }

    private void characters(int begin, int end)
    {
      if (begin < end)
      {
        try
        {
          builder.text(Token.token(input.subSequence(begin, end).toString()));
        }
        catch (IOException e)
        {
          throw new RuntimeException(e);
        }
      }
    }
  }

  public Parse_BaseX()
  {
  }

  public Parse_BaseX(CharSequence string, EventHandler t)
  {
    initialize(string, t);
  }

  public void initialize(CharSequence source, EventHandler parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = source;
    size = source.length();
    reset(0, 0, 0);
  }

  public CharSequence getInput()
  {
    return input;
  }

  public int getTokenOffset()
  {
    return b0;
  }

  public int getTokenEnd()
  {
    return e0;
  }

  public final void reset(int l, int b, int e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0; b2 = 0; e2 = 0;
    end = e;
    ex = -1;
    memo.clear();
    eventHandler.reset(input);
  }

  public void reset()
  {
    reset(0, 0, 0);
  }

  public static String getOffendingToken(ParseException e)
  {
    return e.getOffending() < 0 ? null : TOKEN[e.getOffending()];
  }

  public static String[] getExpectedTokenSet(ParseException e)
  {
    String[] expected;
    if (e.getExpected() >= 0)
    {
      expected = new String[]{TOKEN[e.getExpected()]};
    }
    else
    {
      expected = getTokenSet(- e.getState());
    }
    return expected;
  }

  public String getErrorMessage(ParseException e)
  {
    String message = e.getMessage();
    String[] tokenSet = getExpectedTokenSet(e);
    String found = getOffendingToken(e);
    int size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : java.util.Arrays.toString(tokenSet))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    String prefix = input.subSequence(0, e.getBegin()).toString();
    int line = prefix.replaceAll("[^\n]", "").length() + 1;
    int column = prefix.length() - prefix.lastIndexOf('\n');
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.subSequence(e.getBegin(), Math.min(input.length(), e.getBegin() + 64))
         + "...";
  }

  public void parse_XQuery()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Module();
    consume(25);                    // EOF
    eventHandler.endNonterminal("XQuery", e0);
  }

  private void parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 262:                       // 'xquery'
      lookahead2W(182);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'encoding' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'transform' | 'treat' | 'union' | 'update' | 'version' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 63750                 // 'xquery' 'encoding'
     || lk == 129286)               // 'xquery' 'version'
    {
      whitespace();
      parse_VersionDecl();
    }
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 175:                       // 'module'
      lookahead2W(181);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'or' | 'to' | 'transform' | 'treat' | 'union' | 'update' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 90799:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  private void parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    consume(262);                   // 'xquery'
    lookahead1W(110);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 124:                       // 'encoding'
      consume(124);                 // 'encoding'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      break;
    default:
      consume(252);                 // 'version'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      lookahead1W(102);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 124)                // 'encoding'
      {
        consume(124);               // 'encoding'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consume(4);                 // StringLiteral
      }
    }
    lookahead1W(31);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  private void parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_QueryBody();
    eventHandler.endNonterminal("MainModule", e0);
  }

  private void parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(132);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  private void parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    consume(175);                   // 'module'
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consume(177);                   // 'namespace'
    lookahead1W(174);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
    whitespace();
    parse_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(31);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  private void parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(185);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'base-uri' | 'boundary-space' | 'cast' | 'castable' | 'construction' |
                                    // 'contains' | 'context' | 'copy-namespaces' | 'decimal-format' | 'default' |
                                    // 'div' | 'eq' | 'except' | 'ft-option' | 'function' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'option' | 'or' | 'ordering' | 'revalidation' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'update' | 'updating' | 'variable' | '|' | '||'
        break;
      case 150:                     // 'import'
        lookahead2W(183);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'module' | 'ne' | 'or' |
                                    // 'schema' | 'to' | 'transform' | 'treat' | 'union' | 'update' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 44651               // 'declare' 'base-uri'
       && lk != 45675               // 'declare' 'boundary-space'
       && lk != 50283               // 'declare' 'construction'
       && lk != 52843               // 'declare' 'copy-namespaces'
       && lk != 53867               // 'declare' 'decimal-format'
       && lk != 55403               // 'declare' 'default'
       && lk != 70763               // 'declare' 'ft-option'
       && lk != 89750               // 'import' 'module'
       && lk != 90731               // 'declare' 'namespace'
       && lk != 99435               // 'declare' 'ordering'
       && lk != 108139              // 'declare' 'revalidation'
       && lk != 109718)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(167);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 55403)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 90731:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 150:                     // 'import'
        whitespace();
        parse_Import();
        break;
      case 70763:                   // 'declare' 'ft-option'
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(184);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'context' | 'div' | 'eq' | 'except' |
                                    // 'function' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'lt' | 'mod' | 'ne' | 'option' | 'or' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'updating' | 'variable' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 16491               // 'declare' '%'
       && lk != 51819               // 'declare' 'context'
       && lk != 72811               // 'declare' 'function'
       && lk != 97387               // 'declare' 'option'
       && lk != 126059              // 'declare' 'updating'
       && lk != 128619)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(161);           // S^WS | '%' | '(:' | 'context' | 'function' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 51819:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 97387:                   // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  private void parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    consume(52);                    // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  private void parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 107:                       // 'declare'
      lookahead2W(162);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 55403)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (ParseException p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (ParseException p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 45675:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 44651:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 50283:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 99435:                     // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 108139:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 52843:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  private void parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(36);                // S^WS | '(:' | 'boundary-space'
    consume(89);                    // 'boundary-space'
    lookahead1W(127);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 204:                       // 'preserve'
      consume(204);                 // 'preserve'
      break;
    default:
      consume(230);                 // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  private void parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(108);                   // 'default'
    lookahead1W(40);                // S^WS | '(:' | 'collation'
    consume(96);                    // 'collation'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  private void try_DefaultCollationDecl()
  {
    consumeT(107);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(108);                  // 'default'
    lookahead1W(40);                // S^WS | '(:' | 'collation'
    consumeT(96);                   // 'collation'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
  }

  private void parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(35);                // S^WS | '(:' | 'base-uri'
    consume(87);                    // 'base-uri'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  private void parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'construction'
    consume(98);                    // 'construction'
    lookahead1W(127);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 230:                       // 'strip'
      consume(230);                 // 'strip'
      break;
    default:
      consume(204);                 // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  private void parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(62);                // S^WS | '(:' | 'ordering'
    consume(194);                   // 'ordering'
    lookahead1W(125);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 193:                       // 'ordered'
      consume(193);                 // 'ordered'
      break;
    default:
      consume(244);                 // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  private void parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(108);                   // 'default'
    lookahead1W(61);                // S^WS | '(:' | 'order'
    consume(192);                   // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(122);                   // 'empty'
    lookahead1W(115);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 144:                       // 'greatest'
      consume(144);                 // 'greatest'
      break;
    default:
      consume(166);                 // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  private void try_EmptyOrderDecl()
  {
    consumeT(107);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(108);                  // 'default'
    lookahead1W(61);                // S^WS | '(:' | 'order'
    consumeT(192);                  // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(122);                  // 'empty'
    lookahead1W(115);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 144:                       // 'greatest'
      consumeT(144);                // 'greatest'
      break;
    default:
      consumeT(166);                // 'least'
    }
  }

  private void parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'copy-namespaces'
    consume(103);                   // 'copy-namespaces'
    lookahead1W(122);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(27);                // S^WS | '(:' | ','
    consume(40);                    // ','
    lookahead1W(117);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  private void parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 204:                       // 'preserve'
      consume(204);                 // 'preserve'
      break;
    default:
      consume(183);                 // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  private void parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 153:                       // 'inherit'
      consume(153);                 // 'inherit'
      break;
    default:
      consume(182);                 // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  private void parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(108);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 105:                       // 'decimal-format'
      consume(105);                 // 'decimal-format'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      consume(108);                 // 'default'
      lookahead1W(45);              // S^WS | '(:' | 'decimal-format'
      consume(105);                 // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(172);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'exponent-separator' | 'grouping-separator' | 'infinity' | 'minus-sign' |
                                    // 'pattern-separator' | 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 52)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  private void parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 106:                       // 'decimal-separator'
      consume(106);                 // 'decimal-separator'
      break;
    case 146:                       // 'grouping-separator'
      consume(146);                 // 'grouping-separator'
      break;
    case 152:                       // 'infinity'
      consume(152);                 // 'infinity'
      break;
    case 172:                       // 'minus-sign'
      consume(172);                 // 'minus-sign'
      break;
    case 68:                        // 'NaN'
      consume(68);                  // 'NaN'
      break;
    case 200:                       // 'percent'
      consume(200);                 // 'percent'
      break;
    case 199:                       // 'per-mille'
      consume(199);                 // 'per-mille'
      break;
    case 263:                       // 'zero-digit'
      consume(263);                 // 'zero-digit'
      break;
    case 115:                       // 'digit'
      consume(115);                 // 'digit'
      break;
    case 198:                       // 'pattern-separator'
      consume(198);                 // 'pattern-separator'
      break;
    default:
      consume(131);                 // 'exponent-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  private void parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 150:                       // 'import'
      lookahead2W(120);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 109718:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  private void parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    consume(150);                   // 'import'
    lookahead1W(65);                // S^WS | '(:' | 'schema'
    consume(214);                   // 'schema'
    lookahead1W(131);               // StringLiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 4)                    // StringLiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(101);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 85)                   // 'at'
    {
      consume(85);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(93);            // S^WS | '(:' | ',' | ';'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  private void parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 177:                       // 'namespace'
      consume(177);                 // 'namespace'
      lookahead1W(174);             // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
      whitespace();
      parse_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
      break;
    default:
      consume(108);                 // 'default'
      lookahead1W(47);              // S^WS | '(:' | 'element'
      consume(120);                 // 'element'
      lookahead1W(57);              // S^WS | '(:' | 'namespace'
      consume(177);                 // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  private void parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    consume(150);                   // 'import'
    lookahead1W(56);                // S^WS | '(:' | 'module'
    consume(175);                   // 'module'
    lookahead1W(82);                // StringLiteral | S^WS | '(:' | 'namespace'
    if (l1 == 177)                  // 'namespace'
    {
      consume(177);                 // 'namespace'
      lookahead1W(174);             // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
      whitespace();
      parse_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(101);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 85)                   // 'at'
    {
      consume(85);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(93);            // S^WS | '(:' | ',' | ';'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  private void parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consume(177);                   // 'namespace'
    lookahead1W(174);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
    whitespace();
    parse_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  private void parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(108);                   // 'default'
    lookahead1W(109);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 120:                       // 'element'
      consume(120);                 // 'element'
      break;
    default:
      consume(142);                 // 'function'
    }
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consume(177);                   // 'namespace'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  private void try_DefaultNamespaceDecl()
  {
    consumeT(107);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(108);                  // 'default'
    lookahead1W(109);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 120:                       // 'element'
      consumeT(120);                // 'element'
      break;
    default:
      consumeT(142);                // 'function'
    }
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consumeT(177);                  // 'namespace'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
  }

  private void parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(51);                // S^WS | '(:' | 'ft-option'
    consume(138);                   // 'ft-option'
    lookahead1W(74);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  private void parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    consume(107);                   // 'declare'
    for (;;)
    {
      lookahead1W(146);             // S^WS | '%' | '(:' | 'function' | 'updating' | 'variable'
      if (l1 != 32                  // '%'
       && l1 != 246)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 246:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 251:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    default:
      whitespace();
      parse_FunctionDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  private void parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    consume(246);                   // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  private void parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    consume(32);                    // '%'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(155);               // S^WS | '%' | '(' | '(:' | 'function' | 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      consume(34);                  // '('
      lookahead1W(144);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(144);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  private void try_Annotation()
  {
    consumeT(32);                   // '%'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_EQName();
    lookahead1W(155);               // S^WS | '%' | '(' | '(:' | 'function' | 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      consumeT(34);                 // '('
      lookahead1W(144);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(144);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      consumeT(37);                 // ')'
    }
  }

  private void parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    consume(251);                   // 'variable'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(138);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(100);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 51:                        // ':='
      consume(51);                  // ':='
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(132);                 // 'external'
      lookahead1W(98);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consume(51);                // ':='
        lookahead1W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  private void parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  private void parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  private void parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(43);                // S^WS | '(:' | 'context'
    consume(101);                   // 'context'
    lookahead1W(54);                // S^WS | '(:' | 'item'
    consume(161);                   // 'item'
    lookahead1W(138);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 83)                   // 'as'
    {
      consume(83);                  // 'as'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(100);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 51:                        // ':='
      consume(51);                  // ':='
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(132);                 // 'external'
      lookahead1W(98);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consume(51);                // ':='
        lookahead1W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  private void parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    consume(142);                   // 'function'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(85);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(139);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 83)                   // 'as'
    {
      consume(83);                  // 'as'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(113);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      whitespace();
      parse_FunctionBody();
      break;
    default:
      consume(132);                 // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  private void parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  private void try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  private void parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(136);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  private void try_Param()
  {
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_EQName();
    lookahead1W(136);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  private void parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  private void try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  private void parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    consume(264);                   // '{'
    lookahead1W(240);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  private void try_EnclosedExpr()
  {
    consumeT(264);                  // '{'
    lookahead1W(240);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      try_Expr();
    }
    consumeT(268);                  // '}'
  }

  private void parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(60);                // S^WS | '(:' | 'option'
    consume(190);                   // 'option'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  private void parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(163);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 210)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  private void try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(163);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 210)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  private void parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(134);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
      parse_ForClause();
      break;
    case 167:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  private void try_InitialClause()
  {
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(134);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
      try_ForClause();
      break;
    case 167:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  private void parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 136:                       // 'for'
    case 167:                       // 'let'
      parse_InitialClause();
      break;
    case 255:                       // 'where'
      parse_WhereClause();
      break;
    case 145:                       // 'group'
      parse_GroupByClause();
      break;
    case 104:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  private void try_IntermediateClause()
  {
    switch (l1)
    {
    case 136:                       // 'for'
    case 167:                       // 'let'
      try_InitialClause();
      break;
    case 255:                       // 'where'
      try_WhereClause();
      break;
    case 145:                       // 'group'
      try_GroupByClause();
      break;
    case 104:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  private void parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    consume(136);                   // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  private void try_ForClause()
  {
    consumeT(136);                  // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  private void parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(156);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(148);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 77)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(141);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 85)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(116);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 217)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  private void try_ForBinding()
  {
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(156);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(148);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 77)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(141);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 85)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(116);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 217)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    consume(77);                    // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(122);                   // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  private void try_AllowingEmpty()
  {
    consumeT(77);                   // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(122);                  // 'empty'
  }

  private void parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    consume(85);                    // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  private void try_PositionalVar()
  {
    consumeT(85);                   // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  private void parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    consume(217);                   // 'score'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  private void try_FTScoreVar()
  {
    consumeT(217);                  // 'score'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  private void parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    consume(167);                   // 'let'
    lookahead1W(87);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(87);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  private void try_LetClause()
  {
    consumeT(167);                  // 'let'
    lookahead1W(87);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(87);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  private void parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 31:                        // '$'
      consume(31);                  // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(99);              // S^WS | '(:' | ':=' | 'as'
      if (l1 == 83)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(30);                // S^WS | '(:' | ':='
    consume(51);                    // ':='
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  private void try_LetBinding()
  {
    switch (l1)
    {
    case 31:                        // '$'
      consumeT(31);                 // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_VarName();
      lookahead1W(99);              // S^WS | '(:' | ':=' | 'as'
      if (l1 == 83)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(30);                // S^WS | '(:' | ':='
    consumeT(51);                   // ':='
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    consume(136);                   // 'for'
    lookahead1W(129);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 240:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  private void try_WindowClause()
  {
    consumeT(136);                  // 'for'
    lookahead1W(129);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 240:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  private void parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    consume(240);                   // 'tumbling'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consume(257);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    whitespace();
    parse_WindowStartCondition();
    lookahead1W(168);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 125                   // 'end'
     || l1 == 189)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  private void try_TumblingWindowClause()
  {
    consumeT(240);                  // 'tumbling'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consumeT(257);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    try_WindowStartCondition();
    lookahead1W(168);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 125                   // 'end'
     || l1 == 189)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  private void parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    consume(223);                   // 'sliding'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consume(257);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    whitespace();
    parse_WindowStartCondition();
    lookahead1W(111);               // S^WS | '(:' | 'end' | 'only'
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  private void try_SlidingWindowClause()
  {
    consumeT(223);                  // 'sliding'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consumeT(257);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    try_WindowStartCondition();
    lookahead1W(111);               // S^WS | '(:' | 'end' | 'only'
    try_WindowEndCondition();
  }

  private void parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    consume(226);                   // 'start'
    lookahead1W(154);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consume(254);                   // 'when'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  private void try_WindowStartCondition()
  {
    consumeT(226);                  // 'start'
    lookahead1W(154);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consumeT(254);                  // 'when'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 189)                  // 'only'
    {
      consume(189);                 // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consume(125);                   // 'end'
    lookahead1W(154);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consume(254);                   // 'when'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  private void try_WindowEndCondition()
  {
    if (l1 == 189)                  // 'only'
    {
      consumeT(189);                // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consumeT(125);                  // 'end'
    lookahead1W(154);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consumeT(254);                  // 'when'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 85)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(143);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 205)                  // 'previous'
    {
      consume(205);                 // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(121);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 180)                  // 'next'
    {
      consume(180);                 // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  private void try_WindowVars()
  {
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_CurrentItem();
    }
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 85)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(143);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 205)                  // 'previous'
    {
      consumeT(205);                // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_PreviousItem();
    }
    lookahead1W(121);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 180)                  // 'next'
    {
      consumeT(180);                // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_NextItem();
    }
  }

  private void parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  private void try_CurrentItem()
  {
    try_EQName();
  }

  private void parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  private void try_PreviousItem()
  {
    try_EQName();
  }

  private void parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  private void try_NextItem()
  {
    try_EQName();
  }

  private void parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    consume(104);                   // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  private void try_CountClause()
  {
    consumeT(104);                  // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  private void parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    consume(255);                   // 'where'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  private void try_WhereClause()
  {
    consumeT(255);                  // 'where'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    consume(145);                   // 'group'
    lookahead1W(37);                // S^WS | '(:' | 'by'
    consume(90);                    // 'by'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  private void try_GroupByClause()
  {
    consumeT(145);                  // 'group'
    lookahead1W(37);                // S^WS | '(:' | 'by'
    consumeT(90);                   // 'by'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_GroupingSpecList();
  }

  private void parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  private void try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_GroupingSpec();
    }
  }

  private void parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 2591                  // '$' URIQualifiedName
     || lk == 7711                  // '$' QName^Token
     || lk == 39967                 // '$' 'ancestor'
     || lk == 40479                 // '$' 'ancestor-or-self'
     || lk == 40991                 // '$' 'and'
     || lk == 42527                 // '$' 'as'
     || lk == 43039                 // '$' 'ascending'
     || lk == 43551                 // '$' 'at'
     || lk == 44063                 // '$' 'attribute'
     || lk == 46623                 // '$' 'case'
     || lk == 47135                 // '$' 'cast'
     || lk == 47647                 // '$' 'castable'
     || lk == 48671                 // '$' 'child'
     || lk == 49183                 // '$' 'collation'
     || lk == 49695                 // '$' 'comment'
     || lk == 52255                 // '$' 'copy'
     || lk == 53279                 // '$' 'count'
     || lk == 54815                 // '$' 'declare'
     || lk == 55327                 // '$' 'default'
     || lk == 55839                 // '$' 'delete'
     || lk == 56351                 // '$' 'descendant'
     || lk == 56863                 // '$' 'descendant-or-self'
     || lk == 57375                 // '$' 'descending'
     || lk == 59935                 // '$' 'div'
     || lk == 60447                 // '$' 'document'
     || lk == 60959                 // '$' 'document-node'
     || lk == 61471                 // '$' 'element'
     || lk == 61983                 // '$' 'else'
     || lk == 62495                 // '$' 'empty'
     || lk == 63007                 // '$' 'empty-sequence'
     || lk == 64031                 // '$' 'end'
     || lk == 65055                 // '$' 'eq'
     || lk == 65567                 // '$' 'every'
     || lk == 66591                 // '$' 'except'
     || lk == 68639                 // '$' 'following'
     || lk == 69151                 // '$' 'following-sibling'
     || lk == 69663                 // '$' 'for'
     || lk == 72735                 // '$' 'function'
     || lk == 73247                 // '$' 'ge'
     || lk == 74271                 // '$' 'group'
     || lk == 75295                 // '$' 'gt'
     || lk == 75807                 // '$' 'idiv'
     || lk == 76319                 // '$' 'if'
     || lk == 76831                 // '$' 'import'
     || lk == 79391                 // '$' 'insert'
     || lk == 79903                 // '$' 'instance'
     || lk == 80415                 // '$' 'intersect'
     || lk == 81439                 // '$' 'invoke'
     || lk == 81951                 // '$' 'is'
     || lk == 82463                 // '$' 'item'
     || lk == 84511                 // '$' 'le'
     || lk == 85535                 // '$' 'let'
     || lk == 87071                 // '$' 'lt'
     || lk == 88607                 // '$' 'mod'
     || lk == 89119                 // '$' 'modify'
     || lk == 89631                 // '$' 'module'
     || lk == 90655                 // '$' 'namespace'
     || lk == 91167                 // '$' 'namespace-node'
     || lk == 91679                 // '$' 'ne'
     || lk == 94239                 // '$' 'node'
     || lk == 96799                 // '$' 'only'
     || lk == 97823                 // '$' 'or'
     || lk == 98335                 // '$' 'order'
     || lk == 98847                 // '$' 'ordered'
     || lk == 100895                // '$' 'parent'
     || lk == 103455                // '$' 'preceding'
     || lk == 103967                // '$' 'preceding-sibling'
     || lk == 105503                // '$' 'processing-instruction'
     || lk == 106527                // '$' 'rename'
     || lk == 107039                // '$' 'replace'
     || lk == 107551                // '$' 'return'
     || lk == 109087                // '$' 'satisfies'
     || lk == 110111                // '$' 'schema-attribute'
     || lk == 110623                // '$' 'schema-element'
     || lk == 111647                // '$' 'self'
     || lk == 114719                // '$' 'some'
     || lk == 115231                // '$' 'stable'
     || lk == 115743                // '$' 'start'
     || lk == 118303                // '$' 'switch'
     || lk == 118815                // '$' 'text'
     || lk == 120863                // '$' 'to'
     || lk == 121375                // '$' 'transform'
     || lk == 121887                // '$' 'treat'
     || lk == 122399                // '$' 'try'
     || lk == 123935                // '$' 'typeswitch'
     || lk == 124447                // '$' 'union'
     || lk == 124959                // '$' 'unordered'
     || lk == 125471                // '$' 'update'
     || lk == 127519                // '$' 'validate'
     || lk == 130591                // '$' 'where'
     || lk == 132127                // '$' 'with'
     || lk == 134175)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(171);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 51              // ':='
           || l1 == 83)             // 'as'
          {
            if (l1 == 83)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(30);        // S^WS | '(:' | ':='
            consumeT(51);           // ':='
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_ExprSingle();
          }
          lookahead1W(166);         // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
          if (l1 == 96)             // 'collation'
          {
            consumeT(96);           // 'collation'
            lookahead1W(19);        // StringLiteral | S^WS | '(:'
            try_URILiteral();
          }
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(2, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      parse_GroupingVariable();
      lookahead1W(171);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 51                  // ':='
       || l1 == 83)                 // 'as'
      {
        if (l1 == 83)               // 'as'
        {
          whitespace();
          parse_TypeDeclaration();
        }
        lookahead1W(30);            // S^WS | '(:' | ':='
        consume(51);                // ':='
        lookahead1W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
      lookahead1W(166);             // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
      if (l1 == 96)                 // 'collation'
      {
        consume(96);                // 'collation'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  private void try_GroupingSpec()
  {
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 2591                  // '$' URIQualifiedName
     || lk == 7711                  // '$' QName^Token
     || lk == 39967                 // '$' 'ancestor'
     || lk == 40479                 // '$' 'ancestor-or-self'
     || lk == 40991                 // '$' 'and'
     || lk == 42527                 // '$' 'as'
     || lk == 43039                 // '$' 'ascending'
     || lk == 43551                 // '$' 'at'
     || lk == 44063                 // '$' 'attribute'
     || lk == 46623                 // '$' 'case'
     || lk == 47135                 // '$' 'cast'
     || lk == 47647                 // '$' 'castable'
     || lk == 48671                 // '$' 'child'
     || lk == 49183                 // '$' 'collation'
     || lk == 49695                 // '$' 'comment'
     || lk == 52255                 // '$' 'copy'
     || lk == 53279                 // '$' 'count'
     || lk == 54815                 // '$' 'declare'
     || lk == 55327                 // '$' 'default'
     || lk == 55839                 // '$' 'delete'
     || lk == 56351                 // '$' 'descendant'
     || lk == 56863                 // '$' 'descendant-or-self'
     || lk == 57375                 // '$' 'descending'
     || lk == 59935                 // '$' 'div'
     || lk == 60447                 // '$' 'document'
     || lk == 60959                 // '$' 'document-node'
     || lk == 61471                 // '$' 'element'
     || lk == 61983                 // '$' 'else'
     || lk == 62495                 // '$' 'empty'
     || lk == 63007                 // '$' 'empty-sequence'
     || lk == 64031                 // '$' 'end'
     || lk == 65055                 // '$' 'eq'
     || lk == 65567                 // '$' 'every'
     || lk == 66591                 // '$' 'except'
     || lk == 68639                 // '$' 'following'
     || lk == 69151                 // '$' 'following-sibling'
     || lk == 69663                 // '$' 'for'
     || lk == 72735                 // '$' 'function'
     || lk == 73247                 // '$' 'ge'
     || lk == 74271                 // '$' 'group'
     || lk == 75295                 // '$' 'gt'
     || lk == 75807                 // '$' 'idiv'
     || lk == 76319                 // '$' 'if'
     || lk == 76831                 // '$' 'import'
     || lk == 79391                 // '$' 'insert'
     || lk == 79903                 // '$' 'instance'
     || lk == 80415                 // '$' 'intersect'
     || lk == 81439                 // '$' 'invoke'
     || lk == 81951                 // '$' 'is'
     || lk == 82463                 // '$' 'item'
     || lk == 84511                 // '$' 'le'
     || lk == 85535                 // '$' 'let'
     || lk == 87071                 // '$' 'lt'
     || lk == 88607                 // '$' 'mod'
     || lk == 89119                 // '$' 'modify'
     || lk == 89631                 // '$' 'module'
     || lk == 90655                 // '$' 'namespace'
     || lk == 91167                 // '$' 'namespace-node'
     || lk == 91679                 // '$' 'ne'
     || lk == 94239                 // '$' 'node'
     || lk == 96799                 // '$' 'only'
     || lk == 97823                 // '$' 'or'
     || lk == 98335                 // '$' 'order'
     || lk == 98847                 // '$' 'ordered'
     || lk == 100895                // '$' 'parent'
     || lk == 103455                // '$' 'preceding'
     || lk == 103967                // '$' 'preceding-sibling'
     || lk == 105503                // '$' 'processing-instruction'
     || lk == 106527                // '$' 'rename'
     || lk == 107039                // '$' 'replace'
     || lk == 107551                // '$' 'return'
     || lk == 109087                // '$' 'satisfies'
     || lk == 110111                // '$' 'schema-attribute'
     || lk == 110623                // '$' 'schema-element'
     || lk == 111647                // '$' 'self'
     || lk == 114719                // '$' 'some'
     || lk == 115231                // '$' 'stable'
     || lk == 115743                // '$' 'start'
     || lk == 118303                // '$' 'switch'
     || lk == 118815                // '$' 'text'
     || lk == 120863                // '$' 'to'
     || lk == 121375                // '$' 'transform'
     || lk == 121887                // '$' 'treat'
     || lk == 122399                // '$' 'try'
     || lk == 123935                // '$' 'typeswitch'
     || lk == 124447                // '$' 'union'
     || lk == 124959                // '$' 'unordered'
     || lk == 125471                // '$' 'update'
     || lk == 127519                // '$' 'validate'
     || lk == 130591                // '$' 'where'
     || lk == 132127                // '$' 'with'
     || lk == 134175)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(171);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 51              // ':='
           || l1 == 83)             // 'as'
          {
            if (l1 == 83)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(30);        // S^WS | '(:' | ':='
            consumeT(51);           // ':='
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_ExprSingle();
          }
          lookahead1W(166);         // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
          if (l1 == 96)             // 'collation'
          {
            consumeT(96);           // 'collation'
            lookahead1W(19);        // StringLiteral | S^WS | '(:'
            try_URILiteral();
          }
          memoize(2, e0A, -1);
          lk = -3;
        }
        catch (ParseException p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      try_GroupingVariable();
      lookahead1W(171);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 51                  // ':='
       || l1 == 83)                 // 'as'
      {
        if (l1 == 83)               // 'as'
        {
          try_TypeDeclaration();
        }
        lookahead1W(30);            // S^WS | '(:' | ':='
        consumeT(51);               // ':='
        lookahead1W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_ExprSingle();
      }
      lookahead1W(166);             // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
      if (l1 == 96)                 // 'collation'
      {
        consumeT(96);               // 'collation'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        try_URILiteral();
      }
      break;
    case -3:
      break;
    default:
      try_ExprSingle();
    }
  }

  private void parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  private void try_GroupingVariable()
  {
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  private void parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 192:                       // 'order'
      consume(192);                 // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consume(90);                  // 'by'
      break;
    default:
      consume(225);                 // 'stable'
      lookahead1W(61);              // S^WS | '(:' | 'order'
      consume(192);                 // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consume(90);                  // 'by'
    }
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  private void try_OrderByClause()
  {
    switch (l1)
    {
    case 192:                       // 'order'
      consumeT(192);                // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consumeT(90);                 // 'by'
      break;
    default:
      consumeT(225);                // 'stable'
      lookahead1W(61);              // S^WS | '(:' | 'order'
      consumeT(192);                // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consumeT(90);                 // 'by'
    }
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_OrderSpecList();
  }

  private void parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  private void try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_OrderSpec();
    }
  }

  private void parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    lookahead1W(173);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  private void try_OrderSpec()
  {
    try_ExprSingle();
    lookahead1W(173);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    try_OrderModifier();
  }

  private void parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 84                    // 'ascending'
     || l1 == 112)                  // 'descending'
    {
      switch (l1)
      {
      case 84:                      // 'ascending'
        consume(84);                // 'ascending'
        break;
      default:
        consume(112);               // 'descending'
      }
    }
    lookahead1W(169);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 122)                  // 'empty'
    {
      consume(122);                 // 'empty'
      lookahead1W(115);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 144:                     // 'greatest'
        consume(144);               // 'greatest'
        break;
      default:
        consume(166);               // 'least'
      }
    }
    lookahead1W(166);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 96)                   // 'collation'
    {
      consume(96);                  // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  private void try_OrderModifier()
  {
    if (l1 == 84                    // 'ascending'
     || l1 == 112)                  // 'descending'
    {
      switch (l1)
      {
      case 84:                      // 'ascending'
        consumeT(84);               // 'ascending'
        break;
      default:
        consumeT(112);              // 'descending'
      }
    }
    lookahead1W(169);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 122)                  // 'empty'
    {
      consumeT(122);                // 'empty'
      lookahead1W(115);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 144:                     // 'greatest'
        consumeT(144);              // 'greatest'
        break;
      default:
        consumeT(166);              // 'least'
      }
    }
    lookahead1W(166);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 96)                   // 'collation'
    {
      consumeT(96);                 // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
    }
  }

  private void parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    consume(210);                   // 'return'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  private void try_ReturnClause()
  {
    consumeT(210);                  // 'return'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 224:                       // 'some'
      consume(224);                 // 'some'
      break;
    default:
      consume(128);                 // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_QuantifiedVarDecl();
    for (;;)
    {
      lookahead1W(96);              // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_QuantifiedVarDecl();
    }
    consume(213);                   // 'satisfies'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  private void try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 224:                       // 'some'
      consumeT(224);                // 'some'
      break;
    default:
      consumeT(128);                // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_QuantifiedVarDecl();
    for (;;)
    {
      lookahead1W(96);              // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_QuantifiedVarDecl();
    }
    consumeT(213);                  // 'satisfies'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_QuantifiedVarDecl()
  {
    eventHandler.startNonterminal("QuantifiedVarDecl", e0);
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedVarDecl", e0);
  }

  private void try_QuantifiedVarDecl()
  {
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    consume(231);                   // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(108);                   // 'default'
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consume(210);                   // 'return'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  private void try_SwitchExpr()
  {
    consumeT(231);                  // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(108);                  // 'default'
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consumeT(210);                  // 'return'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      consume(91);                  // 'case'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SwitchCaseOperand();
      lookahead1W(107);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(210);                   // 'return'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  private void try_SwitchCaseClause()
  {
    for (;;)
    {
      consumeT(91);                 // 'case'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_SwitchCaseOperand();
      lookahead1W(107);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(210);                  // 'return'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  private void try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  private void parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    consume(242);                   // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(108);                   // 'default'
    lookahead1W(86);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consume(210);                   // 'return'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  private void try_TypeswitchExpr()
  {
    consumeT(242);                  // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_CaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(108);                  // 'default'
    lookahead1W(86);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_VarName();
    }
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consumeT(210);                  // 'return'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    consume(91);                    // 'case'
    lookahead1W(230);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
    }
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    consume(210);                   // 'return'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  private void try_CaseClause()
  {
    consumeT(91);                   // 'case'
    lookahead1W(230);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
    }
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SequenceTypeUnion();
    consumeT(210);                  // 'return'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(128);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consume(266);                 // '|'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  private void try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(128);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consumeT(266);                // '|'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  private void parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    consume(149);                   // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consume(233);                   // 'then'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consume(121);                   // 'else'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  private void try_IfExpr()
  {
    consumeT(149);                  // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consumeT(233);                  // 'then'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consumeT(121);                  // 'else'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_BasexIfExpr()
  {
    eventHandler.startNonterminal("BasexIfExpr", e0);
    consume(149);                   // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consume(233);                   // 'then'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("BasexIfExpr", e0);
  }

  private void try_BasexIfExpr()
  {
    consumeT(149);                  // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consumeT(233);                  // 'then'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(188);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'catch' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 94)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  private void try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(188);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'catch' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 94)                 // 'catch'
      {
        break;
      }
    }
  }

  private void parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    consume(239);                   // 'try'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedTryTargetExpr();
    eventHandler.endNonterminal("TryClause", e0);
  }

  private void try_TryClause()
  {
    consumeT(239);                  // 'try'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedTryTargetExpr();
  }

  private void parse_EnclosedTryTargetExpr()
  {
    eventHandler.startNonterminal("EnclosedTryTargetExpr", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("EnclosedTryTargetExpr", e0);
  }

  private void try_EnclosedTryTargetExpr()
  {
    try_EnclosedExpr();
  }

  private void parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    consume(94);                    // 'catch'
    lookahead1W(224);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_CatchErrorList();
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CatchClause", e0);
  }

  private void try_CatchClause()
  {
    consumeT(94);                   // 'catch'
    lookahead1W(224);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_CatchErrorList();
    try_EnclosedExpr();
  }

  private void parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(130);             // S^WS | '(:' | '{' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consume(266);                 // '|'
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  private void try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(130);             // S^WS | '(:' | '{' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consumeT(266);                // '|'
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_NameTest();
    }
  }

  private void parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      switch (l1)
      {
      case 191:                     // 'or'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(191);          // 'or'
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_AndExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      consume(191);                 // 'or'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  private void try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      switch (l1)
      {
      case 191:                     // 'or'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(191);          // 'or'
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_AndExpr();
            memoize(3, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(3, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      consumeT(191);                // 'or'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AndExpr();
    }
  }

  private void parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      switch (l1)
      {
      case 80:                      // 'and'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(80);           // 'and'
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_ComparisonExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(4, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      consume(80);                  // 'and'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  private void try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      switch (l1)
      {
      case 80:                      // 'and'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(80);           // 'and'
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_ComparisonExpr();
            memoize(4, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(4, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      consumeT(80);                 // 'and'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_ComparisonExpr();
    }
  }

  private void parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    switch (l1)
    {
    case 27:                        // '!='
    case 53:                        // '<'
    case 57:                        // '<<'
    case 58:                        // '<='
    case 60:                        // '='
    case 62:                        // '>'
    case 63:                        // '>='
    case 64:                        // '>>'
    case 127:                       // 'eq'
    case 143:                       // 'ge'
    case 147:                       // 'gt'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 170:                       // 'lt'
    case 179:                       // 'ne'
      lookahead2W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk != 25                    // EOF
     && lk != 37                    // ')'
     && lk != 38                    // '*'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 70                    // ']'
     && lk != 75                    // 'after'
     && lk != 80                    // 'and'
     && lk != 83                    // 'as'
     && lk != 84                    // 'ascending'
     && lk != 88                    // 'before'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 96                    // 'collation'
     && lk != 99                    // 'contains'
     && lk != 104                   // 'count'
     && lk != 108                   // 'default'
     && lk != 112                   // 'descending'
     && lk != 117                   // 'div'
     && lk != 121                   // 'else'
     && lk != 122                   // 'empty'
     && lk != 125                   // 'end'
     && lk != 130                   // 'except'
     && lk != 136                   // 'for'
     && lk != 145                   // 'group'
     && lk != 148                   // 'idiv'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'intersect'
     && lk != 158                   // 'into'
     && lk != 167                   // 'let'
     && lk != 173                   // 'mod'
     && lk != 174                   // 'modify'
     && lk != 189                   // 'only'
     && lk != 191                   // 'or'
     && lk != 192                   // 'order'
     && lk != 196                   // 'paragraphs'
     && lk != 210                   // 'return'
     && lk != 213                   // 'satisfies'
     && lk != 221                   // 'sentences'
     && lk != 225                   // 'stable'
     && lk != 226                   // 'start'
     && lk != 235                   // 'times'
     && lk != 236                   // 'to'
     && lk != 237                   // 'transform'
     && lk != 238                   // 'treat'
     && lk != 243                   // 'union'
     && lk != 255                   // 'where'
     && lk != 258                   // 'with'
     && lk != 261                   // 'words'
     && lk != 266                   // '|'
     && lk != 267                   // '||'
     && lk != 268                   // '}'
     && lk != 269)                  // '}`'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          switch (l1)
          {
          case 127:                 // 'eq'
          case 143:                 // 'ge'
          case 147:                 // 'gt'
          case 165:                 // 'le'
          case 170:                 // 'lt'
          case 179:                 // 'ne'
            try_ValueComp();
            break;
          case 57:                  // '<<'
          case 64:                  // '>>'
          case 160:                 // 'is'
            try_NodeComp();
            break;
          default:
            try_GeneralComp();
          }
          lookahead1W(235);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_FTContainsExpr();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0, lk);
      }
    }
    if (lk == -1)
    {
      switch (l1)
      {
      case 127:                     // 'eq'
      case 143:                     // 'ge'
      case 147:                     // 'gt'
      case 165:                     // 'le'
      case 170:                     // 'lt'
      case 179:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 57:                      // '<<'
      case 64:                      // '>>'
      case 160:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  private void try_ComparisonExpr()
  {
    try_FTContainsExpr();
    switch (l1)
    {
    case 27:                        // '!='
    case 53:                        // '<'
    case 57:                        // '<<'
    case 58:                        // '<='
    case 60:                        // '='
    case 62:                        // '>'
    case 63:                        // '>='
    case 64:                        // '>>'
    case 127:                       // 'eq'
    case 143:                       // 'ge'
    case 147:                       // 'gt'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 170:                       // 'lt'
    case 179:                       // 'ne'
      lookahead2W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk != 25                    // EOF
     && lk != 37                    // ')'
     && lk != 38                    // '*'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 70                    // ']'
     && lk != 75                    // 'after'
     && lk != 80                    // 'and'
     && lk != 83                    // 'as'
     && lk != 84                    // 'ascending'
     && lk != 88                    // 'before'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 96                    // 'collation'
     && lk != 99                    // 'contains'
     && lk != 104                   // 'count'
     && lk != 108                   // 'default'
     && lk != 112                   // 'descending'
     && lk != 117                   // 'div'
     && lk != 121                   // 'else'
     && lk != 122                   // 'empty'
     && lk != 125                   // 'end'
     && lk != 130                   // 'except'
     && lk != 136                   // 'for'
     && lk != 145                   // 'group'
     && lk != 148                   // 'idiv'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'intersect'
     && lk != 158                   // 'into'
     && lk != 167                   // 'let'
     && lk != 173                   // 'mod'
     && lk != 174                   // 'modify'
     && lk != 189                   // 'only'
     && lk != 191                   // 'or'
     && lk != 192                   // 'order'
     && lk != 196                   // 'paragraphs'
     && lk != 210                   // 'return'
     && lk != 213                   // 'satisfies'
     && lk != 221                   // 'sentences'
     && lk != 225                   // 'stable'
     && lk != 226                   // 'start'
     && lk != 235                   // 'times'
     && lk != 236                   // 'to'
     && lk != 237                   // 'transform'
     && lk != 238                   // 'treat'
     && lk != 243                   // 'union'
     && lk != 255                   // 'where'
     && lk != 258                   // 'with'
     && lk != 261                   // 'words'
     && lk != 266                   // '|'
     && lk != 267                   // '||'
     && lk != 268                   // '}'
     && lk != 269)                  // '}`'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          switch (l1)
          {
          case 127:                 // 'eq'
          case 143:                 // 'ge'
          case 147:                 // 'gt'
          case 165:                 // 'le'
          case 170:                 // 'lt'
          case 179:                 // 'ne'
            try_ValueComp();
            break;
          case 57:                  // '<<'
          case 64:                  // '>>'
          case 160:                 // 'is'
            try_NodeComp();
            break;
          default:
            try_GeneralComp();
          }
          lookahead1W(235);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_FTContainsExpr();
          memoize(5, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(5, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      switch (l1)
      {
      case 127:                     // 'eq'
      case 143:                     // 'ge'
      case 147:                     // 'gt'
      case 165:                     // 'le'
      case 170:                     // 'lt'
      case 179:                     // 'ne'
        try_ValueComp();
        break;
      case 57:                      // '<<'
      case 64:                      // '>>'
      case 160:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_FTContainsExpr();
    }
  }

  private void parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    switch (l1)
    {
    case 99:                        // 'contains'
      lookahead2W(69);              // S^WS | '(:' | 'text'
      break;
    default:
      lk = l1;
    }
    if (lk == 118883)               // 'contains' 'text'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(99);             // 'contains'
          lookahead1W(69);          // S^WS | '(:' | 'text'
          consumeT(232);            // 'text'
          lookahead1W(153);         // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
          try_FTSelection();
          if (l1 == 259)            // 'without'
          {
            try_FTIgnoreOption();
          }
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(6, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(99);                  // 'contains'
      lookahead1W(69);              // S^WS | '(:' | 'text'
      consume(232);                 // 'text'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 259)                // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  private void try_FTContainsExpr()
  {
    try_StringConcatExpr();
    switch (l1)
    {
    case 99:                        // 'contains'
      lookahead2W(69);              // S^WS | '(:' | 'text'
      break;
    default:
      lk = l1;
    }
    if (lk == 118883)               // 'contains' 'text'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(99);             // 'contains'
          lookahead1W(69);          // S^WS | '(:' | 'text'
          consumeT(232);            // 'text'
          lookahead1W(153);         // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
          try_FTSelection();
          if (l1 == 259)            // 'without'
          {
            try_FTIgnoreOption();
          }
          memoize(6, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(6, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(99);                 // 'contains'
      lookahead1W(69);              // S^WS | '(:' | 'text'
      consumeT(232);                // 'text'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 259)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  private void parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 267:                     // '||'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(7, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(267);          // '||'
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_RangeExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(7, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      consume(267);                 // '||'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  private void try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 267:                     // '||'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(7, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(267);          // '||'
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_RangeExpr();
            memoize(7, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(7, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      consumeT(267);                // '||'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_RangeExpr();
    }
  }

  private void parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    switch (l1)
    {
    case 236:                       // 'to'
      lookahead2W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk != 25                    // EOF
     && lk != 27                    // '!='
     && lk != 37                    // ')'
     && lk != 38                    // '*'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 53                    // '<'
     && lk != 57                    // '<<'
     && lk != 58                    // '<='
     && lk != 60                    // '='
     && lk != 62                    // '>'
     && lk != 63                    // '>='
     && lk != 64                    // '>>'
     && lk != 70                    // ']'
     && lk != 75                    // 'after'
     && lk != 80                    // 'and'
     && lk != 83                    // 'as'
     && lk != 84                    // 'ascending'
     && lk != 88                    // 'before'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 96                    // 'collation'
     && lk != 99                    // 'contains'
     && lk != 104                   // 'count'
     && lk != 108                   // 'default'
     && lk != 112                   // 'descending'
     && lk != 117                   // 'div'
     && lk != 121                   // 'else'
     && lk != 122                   // 'empty'
     && lk != 125                   // 'end'
     && lk != 127                   // 'eq'
     && lk != 130                   // 'except'
     && lk != 136                   // 'for'
     && lk != 143                   // 'ge'
     && lk != 145                   // 'group'
     && lk != 147                   // 'gt'
     && lk != 148                   // 'idiv'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'intersect'
     && lk != 158                   // 'into'
     && lk != 160                   // 'is'
     && lk != 165                   // 'le'
     && lk != 167                   // 'let'
     && lk != 170                   // 'lt'
     && lk != 173                   // 'mod'
     && lk != 174                   // 'modify'
     && lk != 179                   // 'ne'
     && lk != 189                   // 'only'
     && lk != 191                   // 'or'
     && lk != 192                   // 'order'
     && lk != 196                   // 'paragraphs'
     && lk != 210                   // 'return'
     && lk != 213                   // 'satisfies'
     && lk != 221                   // 'sentences'
     && lk != 225                   // 'stable'
     && lk != 226                   // 'start'
     && lk != 235                   // 'times'
     && lk != 237                   // 'transform'
     && lk != 238                   // 'treat'
     && lk != 243                   // 'union'
     && lk != 255                   // 'where'
     && lk != 258                   // 'with'
     && lk != 261                   // 'words'
     && lk != 266                   // '|'
     && lk != 267                   // '||'
     && lk != 268                   // '}'
     && lk != 269)                  // '}`'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(236);            // 'to'
          lookahead1W(235);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_AdditiveExpr();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(8, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(236);                 // 'to'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  private void try_RangeExpr()
  {
    try_AdditiveExpr();
    switch (l1)
    {
    case 236:                       // 'to'
      lookahead2W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk != 25                    // EOF
     && lk != 27                    // '!='
     && lk != 37                    // ')'
     && lk != 38                    // '*'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 53                    // '<'
     && lk != 57                    // '<<'
     && lk != 58                    // '<='
     && lk != 60                    // '='
     && lk != 62                    // '>'
     && lk != 63                    // '>='
     && lk != 64                    // '>>'
     && lk != 70                    // ']'
     && lk != 75                    // 'after'
     && lk != 80                    // 'and'
     && lk != 83                    // 'as'
     && lk != 84                    // 'ascending'
     && lk != 88                    // 'before'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 96                    // 'collation'
     && lk != 99                    // 'contains'
     && lk != 104                   // 'count'
     && lk != 108                   // 'default'
     && lk != 112                   // 'descending'
     && lk != 117                   // 'div'
     && lk != 121                   // 'else'
     && lk != 122                   // 'empty'
     && lk != 125                   // 'end'
     && lk != 127                   // 'eq'
     && lk != 130                   // 'except'
     && lk != 136                   // 'for'
     && lk != 143                   // 'ge'
     && lk != 145                   // 'group'
     && lk != 147                   // 'gt'
     && lk != 148                   // 'idiv'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'intersect'
     && lk != 158                   // 'into'
     && lk != 160                   // 'is'
     && lk != 165                   // 'le'
     && lk != 167                   // 'let'
     && lk != 170                   // 'lt'
     && lk != 173                   // 'mod'
     && lk != 174                   // 'modify'
     && lk != 179                   // 'ne'
     && lk != 189                   // 'only'
     && lk != 191                   // 'or'
     && lk != 192                   // 'order'
     && lk != 196                   // 'paragraphs'
     && lk != 210                   // 'return'
     && lk != 213                   // 'satisfies'
     && lk != 221                   // 'sentences'
     && lk != 225                   // 'stable'
     && lk != 226                   // 'start'
     && lk != 235                   // 'times'
     && lk != 237                   // 'transform'
     && lk != 238                   // 'treat'
     && lk != 243                   // 'union'
     && lk != 255                   // 'where'
     && lk != 258                   // 'with'
     && lk != 261                   // 'words'
     && lk != 266                   // '|'
     && lk != 267                   // '||'
     && lk != 268                   // '}'
     && lk != 269)                  // '}`'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(236);            // 'to'
          lookahead1W(235);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_AdditiveExpr();
          memoize(8, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(8, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(236);                // 'to'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AdditiveExpr();
    }
  }

  private void parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 39:                      // '+'
      case 41:                      // '-'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // ','
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(9, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 39:                // '+'
              consumeT(39);         // '+'
              break;
            default:
              consumeT(41);         // '-'
            }
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_MultiplicativeExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(9, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '+'
        consume(39);                // '+'
        break;
      default:
        consume(41);                // '-'
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  private void try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 39:                      // '+'
      case 41:                      // '-'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // ','
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(9, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 39:                // '+'
              consumeT(39);         // '+'
              break;
            default:
              consumeT(41);         // '-'
            }
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_MultiplicativeExpr();
            memoize(9, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(9, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '+'
        consumeT(39);               // '+'
        break;
      default:
        consumeT(41);               // '-'
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_MultiplicativeExpr();
    }
  }

  private void parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      switch (l1)
      {
      case 38:                      // '*'
      case 117:                     // 'div'
      case 148:                     // 'idiv'
      case 173:                     // 'mod'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(10, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 38:                // '*'
              consumeT(38);         // '*'
              break;
            case 117:               // 'div'
              consumeT(117);        // 'div'
              break;
            case 148:               // 'idiv'
              consumeT(148);        // 'idiv'
              break;
            default:
              consumeT(173);        // 'mod'
            }
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_UnionExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(10, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consume(38);                // '*'
        break;
      case 117:                     // 'div'
        consume(117);               // 'div'
        break;
      case 148:                     // 'idiv'
        consume(148);               // 'idiv'
        break;
      default:
        consume(173);               // 'mod'
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  private void try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      switch (l1)
      {
      case 38:                      // '*'
      case 117:                     // 'div'
      case 148:                     // 'idiv'
      case 173:                     // 'mod'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(10, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 38:                // '*'
              consumeT(38);         // '*'
              break;
            case 117:               // 'div'
              consumeT(117);        // 'div'
              break;
            case 148:               // 'idiv'
              consumeT(148);        // 'idiv'
              break;
            default:
              consumeT(173);        // 'mod'
            }
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_UnionExpr();
            memoize(10, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(10, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consumeT(38);               // '*'
        break;
      case 117:                     // 'div'
        consumeT(117);              // 'div'
        break;
      case 148:                     // 'idiv'
        consumeT(148);              // 'idiv'
        break;
      default:
        consumeT(173);              // 'mod'
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_UnionExpr();
    }
  }

  private void parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      switch (l1)
      {
      case 243:                     // 'union'
      case 266:                     // '|'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(11, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 243:               // 'union'
              consumeT(243);        // 'union'
              break;
            default:
              consumeT(266);        // '|'
            }
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_IntersectExceptExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(11, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 243:                     // 'union'
        consume(243);               // 'union'
        break;
      default:
        consume(266);               // '|'
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  private void try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      switch (l1)
      {
      case 243:                     // 'union'
      case 266:                     // '|'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(11, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 243:               // 'union'
              consumeT(243);        // 'union'
              break;
            default:
              consumeT(266);        // '|'
            }
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_IntersectExceptExpr();
            memoize(11, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(11, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 243:                     // 'union'
        consumeT(243);              // 'union'
        break;
      default:
        consumeT(266);              // '|'
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_IntersectExceptExpr();
    }
  }

  private void parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(186);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 130:                     // 'except'
      case 157:                     // 'intersect'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(12, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 157:               // 'intersect'
              consumeT(157);        // 'intersect'
              break;
            default:
              consumeT(130);        // 'except'
            }
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_InstanceofExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(12, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 157:                     // 'intersect'
        consume(157);               // 'intersect'
        break;
      default:
        consume(130);               // 'except'
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  private void try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(186);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 130:                     // 'except'
      case 157:                     // 'intersect'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(12, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 157:               // 'intersect'
              consumeT(157);        // 'intersect'
              break;
            default:
              consumeT(130);        // 'except'
            }
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_InstanceofExpr();
            memoize(12, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(12, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 157:                     // 'intersect'
        consumeT(157);              // 'intersect'
        break;
      default:
        consumeT(130);              // 'except'
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_InstanceofExpr();
    }
  }

  private void parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 156:                       // 'instance'
      lookahead2W(59);              // S^WS | '(:' | 'of'
      break;
    default:
      lk = l1;
    }
    if (lk == 96412)                // 'instance' 'of'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(156);            // 'instance'
          lookahead1W(59);          // S^WS | '(:' | 'of'
          consumeT(188);            // 'of'
          lookahead1W(229);         // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SequenceType();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(13, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(156);                 // 'instance'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consume(188);                 // 'of'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  private void try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 156:                       // 'instance'
      lookahead2W(59);              // S^WS | '(:' | 'of'
      break;
    default:
      lk = l1;
    }
    if (lk == 96412)                // 'instance' 'of'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(156);            // 'instance'
          lookahead1W(59);          // S^WS | '(:' | 'of'
          consumeT(188);            // 'of'
          lookahead1W(229);         // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SequenceType();
          memoize(13, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(13, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(156);                // 'instance'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consumeT(188);                // 'of'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  private void parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 238:                       // 'treat'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42734)                // 'treat' 'as'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(238);            // 'treat'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(229);         // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SequenceType();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(14, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(238);                 // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  private void try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 238:                       // 'treat'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42734)                // 'treat' 'as'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(238);            // 'treat'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(229);         // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SequenceType();
          memoize(14, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(14, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(238);                // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  private void parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 93:                        // 'castable'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42589)                // 'castable' 'as'
    {
      lk = memoized(15, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(93);             // 'castable'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(222);         // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_SingleType();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(15, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(93);                  // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  private void try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 93:                        // 'castable'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42589)                // 'castable' 'as'
    {
      lk = memoized(15, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(93);             // 'castable'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(222);         // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_SingleType();
          memoize(15, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(15, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(93);                 // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_SingleType();
    }
  }

  private void parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_TransformWithExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 92:                        // 'cast'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42588)                // 'cast' 'as'
    {
      lk = memoized(16, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(92);             // 'cast'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(222);         // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_SingleType();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(16, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(92);                  // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  private void try_CastExpr()
  {
    try_TransformWithExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 92:                        // 'cast'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42588)                // 'cast' 'as'
    {
      lk = memoized(16, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(92);             // 'cast'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(222);         // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_SingleType();
          memoize(16, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(16, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(92);                 // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_SingleType();
    }
  }

  private void parse_TransformWithExpr()
  {
    eventHandler.startNonterminal("TransformWithExpr", e0);
    parse_BasexUpdate1Expr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 237:                       // 'transform'
      lookahead2W(78);              // S^WS | '(:' | 'with'
      break;
    default:
      lk = l1;
    }
    if (lk == 132333)               // 'transform' 'with'
    {
      lk = memoized(17, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(237);            // 'transform'
          lookahead1W(78);          // S^WS | '(:' | 'with'
          consumeT(258);            // 'with'
          lookahead1W(80);          // S^WS | '(:' | '{'
          consumeT(264);            // '{'
          lookahead1W(240);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
          if (l1 != 268)            // '}'
          {
            try_Expr();
          }
          consumeT(268);            // '}'
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(17, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(237);                 // 'transform'
      lookahead1W(78);              // S^WS | '(:' | 'with'
      consume(258);                 // 'with'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consume(264);                 // '{'
      lookahead1W(240);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        whitespace();
        parse_Expr();
      }
      consume(268);                 // '}'
    }
    eventHandler.endNonterminal("TransformWithExpr", e0);
  }

  private void try_TransformWithExpr()
  {
    try_BasexUpdate1Expr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 237:                       // 'transform'
      lookahead2W(78);              // S^WS | '(:' | 'with'
      break;
    default:
      lk = l1;
    }
    if (lk == 132333)               // 'transform' 'with'
    {
      lk = memoized(17, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(237);            // 'transform'
          lookahead1W(78);          // S^WS | '(:' | 'with'
          consumeT(258);            // 'with'
          lookahead1W(80);          // S^WS | '(:' | '{'
          consumeT(264);            // '{'
          lookahead1W(240);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
          if (l1 != 268)            // '}'
          {
            try_Expr();
          }
          consumeT(268);            // '}'
          memoize(17, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(17, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(237);                // 'transform'
      lookahead1W(78);              // S^WS | '(:' | 'with'
      consumeT(258);                // 'with'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consumeT(264);                // '{'
      lookahead1W(240);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        try_Expr();
      }
      consumeT(268);                // '}'
    }
  }

  private void parse_BasexUpdate1Expr()
  {
    eventHandler.startNonterminal("BasexUpdate1Expr", e0);
    parse_BasexUpdateExpr();
    if (l1 == 245)                  // 'update'
    {
      consume(245);                 // 'update'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("BasexUpdate1Expr", e0);
  }

  private void try_BasexUpdate1Expr()
  {
    try_BasexUpdateExpr();
    if (l1 == 245)                  // 'update'
    {
      consumeT(245);                // 'update'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_ExprSingle();
    }
  }

  private void parse_BasexUpdateExpr()
  {
    eventHandler.startNonterminal("BasexUpdateExpr", e0);
    parse_ArrowExpr();
    for (;;)
    {
      lookahead1W(189);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 245:                     // 'update'
        lookahead2W(239);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
        break;
      default:
        lk = l1;
      }
      if (lk != 135413)             // 'update' '{'
      {
        break;
      }
      consume(245);                 // 'update'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consume(264);                 // '{'
      lookahead1W(240);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        whitespace();
        parse_Expr();
      }
      consume(268);                 // '}'
    }
    eventHandler.endNonterminal("BasexUpdateExpr", e0);
  }

  private void try_BasexUpdateExpr()
  {
    try_ArrowExpr();
    for (;;)
    {
      lookahead1W(189);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 245:                     // 'update'
        lookahead2W(239);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
        break;
      default:
        lk = l1;
      }
      if (lk != 135413)             // 'update' '{'
      {
        break;
      }
      consumeT(245);                // 'update'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consumeT(264);                // '{'
      lookahead1W(240);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        try_Expr();
      }
      consumeT(268);                // '}'
    }
  }

  private void parse_ArrowExpr()
  {
    eventHandler.startNonterminal("ArrowExpr", e0);
    parse_UnaryExpr();
    for (;;)
    {
      lookahead1W(190);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 61)                 // '=>'
      {
        break;
      }
      consume(61);                  // '=>'
      lookahead1W(227);             // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      whitespace();
      parse_ArgumentList();
    }
    eventHandler.endNonterminal("ArrowExpr", e0);
  }

  private void try_ArrowExpr()
  {
    try_UnaryExpr();
    for (;;)
    {
      lookahead1W(190);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 61)                 // '=>'
      {
        break;
      }
      consumeT(61);                 // '=>'
      lookahead1W(227);             // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      try_ArgumentList();
    }
  }

  private void parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      if (l1 != 39                  // '+'
       && l1 != 41)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '-'
        consume(41);                // '-'
        break;
      default:
        consume(39);                // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  private void try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      if (l1 != 39                  // '+'
       && l1 != 41)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '-'
        consumeT(41);               // '-'
        break;
      default:
        consumeT(39);               // '+'
      }
    }
    try_ValueExpr();
  }

  private void parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 249:                       // 'validate'
      lookahead2W(212);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'transform' | 'treat' | 'type' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 84217:                     // 'validate' 'lax'
    case 117497:                    // 'validate' 'strict'
    case 123641:                    // 'validate' 'type'
    case 135417:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 35:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  private void try_ValueExpr()
  {
    switch (l1)
    {
    case 249:                       // 'validate'
      lookahead2W(212);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'transform' | 'treat' | 'type' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 84217:                     // 'validate' 'lax'
    case 117497:                    // 'validate' 'strict'
    case 123641:                    // 'validate' 'type'
    case 135417:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 35:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  private void parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consume(26);                  // '!'
      lookahead1W(234);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  private void try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consumeT(26);                 // '!'
      lookahead1W(234);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_PathExpr();
    }
  }

  private void parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 60:                        // '='
      consume(60);                  // '='
      break;
    case 27:                        // '!='
      consume(27);                  // '!='
      break;
    case 53:                        // '<'
      consume(53);                  // '<'
      break;
    case 58:                        // '<='
      consume(58);                  // '<='
      break;
    case 62:                        // '>'
      consume(62);                  // '>'
      break;
    default:
      consume(63);                  // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  private void try_GeneralComp()
  {
    switch (l1)
    {
    case 60:                        // '='
      consumeT(60);                 // '='
      break;
    case 27:                        // '!='
      consumeT(27);                 // '!='
      break;
    case 53:                        // '<'
      consumeT(53);                 // '<'
      break;
    case 58:                        // '<='
      consumeT(58);                 // '<='
      break;
    case 62:                        // '>'
      consumeT(62);                 // '>'
      break;
    default:
      consumeT(63);                 // '>='
    }
  }

  private void parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 127:                       // 'eq'
      consume(127);                 // 'eq'
      break;
    case 179:                       // 'ne'
      consume(179);                 // 'ne'
      break;
    case 170:                       // 'lt'
      consume(170);                 // 'lt'
      break;
    case 165:                       // 'le'
      consume(165);                 // 'le'
      break;
    case 147:                       // 'gt'
      consume(147);                 // 'gt'
      break;
    default:
      consume(143);                 // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  private void try_ValueComp()
  {
    switch (l1)
    {
    case 127:                       // 'eq'
      consumeT(127);                // 'eq'
      break;
    case 179:                       // 'ne'
      consumeT(179);                // 'ne'
      break;
    case 170:                       // 'lt'
      consumeT(170);                // 'lt'
      break;
    case 165:                       // 'le'
      consumeT(165);                // 'le'
      break;
    case 147:                       // 'gt'
      consumeT(147);                // 'gt'
      break;
    default:
      consumeT(143);                // 'ge'
    }
  }

  private void parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 160:                       // 'is'
      consume(160);                 // 'is'
      break;
    case 57:                        // '<<'
      consume(57);                  // '<<'
      break;
    default:
      consume(64);                  // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  private void try_NodeComp()
  {
    switch (l1)
    {
    case 160:                       // 'is'
      consumeT(160);                // 'is'
      break;
    case 57:                        // '<<'
      consumeT(57);                 // '<<'
      break;
    default:
      consumeT(64);                 // '>>'
    }
  }

  private void parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    consume(249);                   // 'validate'
    lookahead1W(151);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 264)                  // '{'
    {
      switch (l1)
      {
      case 241:                     // 'type'
        consume(241);               // 'type'
        lookahead1W(222);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  private void try_ValidateExpr()
  {
    consumeT(249);                  // 'validate'
    lookahead1W(151);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 264)                  // '{'
    {
      switch (l1)
      {
      case 241:                     // 'type'
        consumeT(241);              // 'type'
        lookahead1W(222);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  private void parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 164:                       // 'lax'
      consume(164);                 // 'lax'
      break;
    default:
      consume(229);                 // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  private void try_ValidationMode()
  {
    switch (l1)
    {
    case 164:                       // 'lax'
      consumeT(164);                // 'lax'
      break;
    default:
      consumeT(229);                // 'strict'
    }
  }

  private void parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(264);                   // '{'
    lookahead1W(240);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  private void try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(264);                  // '{'
    lookahead1W(240);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      try_Expr();
    }
    consumeT(268);                  // '}'
  }

  private void parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    consume(35);                    // '(#'
    lookahead1(221);                // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
    }
    parse_EQName();
    lookahead1(12);                 // S | '#)'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
      lookahead1(2);                // PragmaContents
      consume(20);                  // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consume(30);                    // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  private void try_Pragma()
  {
    consumeT(35);                   // '(#'
    lookahead1(221);                // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
    }
    try_EQName();
    lookahead1(12);                 // S | '#)'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
      lookahead1(2);                // PragmaContents
      consumeT(20);                 // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consumeT(30);                   // '#)'
  }

  private void parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 45:                        // '/'
      consume(45);                  // '/'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'contains' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'sentences' | 'some' |
                                    // 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'words' | 'xquery' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 39:                      // '+'
      case 40:                      // ','
      case 41:                      // '-'
      case 48:                      // ':'
      case 52:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '=>'
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 75:                      // 'after'
      case 88:                      // 'before'
      case 99:                      // 'contains'
      case 158:                     // 'into'
      case 196:                     // 'paragraphs'
      case 221:                     // 'sentences'
      case 235:                     // 'times'
      case 261:                     // 'words'
      case 266:                     // '|'
      case 267:                     // '||'
      case 268:                     // '}'
      case 269:                     // '}`'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 46:                        // '//'
      consume(46);                  // '//'
      lookahead1W(233);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  private void try_PathExpr()
  {
    switch (l1)
    {
    case 45:                        // '/'
      consumeT(45);                 // '/'
      lookahead1W(244);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'contains' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'sentences' | 'some' |
                                    // 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'words' | 'xquery' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 39:                      // '+'
      case 40:                      // ','
      case 41:                      // '-'
      case 48:                      // ':'
      case 52:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '=>'
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 75:                      // 'after'
      case 88:                      // 'before'
      case 99:                      // 'contains'
      case 158:                     // 'into'
      case 196:                     // 'paragraphs'
      case 221:                     // 'sentences'
      case 235:                     // 'times'
      case 261:                     // 'words'
      case 266:                     // '|'
      case 267:                     // '||'
      case 268:                     // '}'
      case 269:                     // '}`'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 46:                        // '//'
      consumeT(46);                 // '//'
      lookahead1W(233);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  private void parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(234);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '=>'
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 245                 // 'update'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269                 // '}`'
       && lk != 23066               // '!' '/'
       && lk != 23578)              // '!' '//'
      {
        lk = memoized(18, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 45:                // '/'
              consumeT(45);         // '/'
              break;
            case 46:                // '//'
              consumeT(46);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(233);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
            try_StepExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(18, e0, lk);
        }
      }
      if (lk != -1
       && lk != 45                  // '/'
       && lk != 46)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 45:                      // '/'
        consume(45);                // '/'
        break;
      case 46:                      // '//'
        consume(46);                // '//'
        break;
      default:
        consume(26);                // '!'
      }
      lookahead1W(233);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  private void try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(234);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '=>'
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 245                 // 'update'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269                 // '}`'
       && lk != 23066               // '!' '/'
       && lk != 23578)              // '!' '//'
      {
        lk = memoized(18, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 45:                // '/'
              consumeT(45);         // '/'
              break;
            case 46:                // '//'
              consumeT(46);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(233);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
            try_StepExpr();
            memoize(18, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(18, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 45                  // '/'
       && lk != 46)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 45:                      // '/'
        consumeT(45);               // '/'
        break;
      case 46:                      // '//'
        consumeT(46);               // '//'
        break;
      default:
        consumeT(26);               // '!'
      }
      lookahead1W(233);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_StepExpr();
    }
  }

  private void parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(243);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'contains' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 120:                       // 'element'
      lookahead2W(242);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'contains' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 177:                       // 'namespace'
    case 206:                       // 'processing-instruction'
      lookahead2W(206);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 97:                        // 'comment'
    case 118:                       // 'document'
    case 193:                       // 'ordered'
    case 232:                       // 'text'
    case 244:                       // 'unordered'
      lookahead2W(204);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 123:                       // 'empty-sequence'
    case 149:                       // 'if'
    case 161:                       // 'item'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(192);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 218:                       // 'self'
      lookahead2W(201);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 109:                       // 'delete'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 119:                       // 'document-node'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 136:                       // 'for'
    case 142:                       // 'function'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 155:                       // 'insert'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 178:                       // 'namespace-node'
    case 179:                       // 'ne'
    case 184:                       // 'node'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(195);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 41046                 // 'attribute' 'and'
     || lk == 41080                 // 'element' 'and'
     || lk == 41137                 // 'namespace' 'and'
     || lk == 41166                 // 'processing-instruction' 'and'
     || lk == 42582                 // 'attribute' 'as'
     || lk == 42616                 // 'element' 'as'
     || lk == 42673                 // 'namespace' 'as'
     || lk == 42702                 // 'processing-instruction' 'as'
     || lk == 43094                 // 'attribute' 'ascending'
     || lk == 43128                 // 'element' 'ascending'
     || lk == 43185                 // 'namespace' 'ascending'
     || lk == 43214                 // 'processing-instruction' 'ascending'
     || lk == 46678                 // 'attribute' 'case'
     || lk == 46712                 // 'element' 'case'
     || lk == 46769                 // 'namespace' 'case'
     || lk == 46798                 // 'processing-instruction' 'case'
     || lk == 47190                 // 'attribute' 'cast'
     || lk == 47224                 // 'element' 'cast'
     || lk == 47281                 // 'namespace' 'cast'
     || lk == 47310                 // 'processing-instruction' 'cast'
     || lk == 47702                 // 'attribute' 'castable'
     || lk == 47736                 // 'element' 'castable'
     || lk == 47793                 // 'namespace' 'castable'
     || lk == 47822                 // 'processing-instruction' 'castable'
     || lk == 49238                 // 'attribute' 'collation'
     || lk == 49272                 // 'element' 'collation'
     || lk == 49329                 // 'namespace' 'collation'
     || lk == 49358                 // 'processing-instruction' 'collation'
     || lk == 53334                 // 'attribute' 'count'
     || lk == 53368                 // 'element' 'count'
     || lk == 53425                 // 'namespace' 'count'
     || lk == 53454                 // 'processing-instruction' 'count'
     || lk == 55382                 // 'attribute' 'default'
     || lk == 55416                 // 'element' 'default'
     || lk == 55473                 // 'namespace' 'default'
     || lk == 55502                 // 'processing-instruction' 'default'
     || lk == 57430                 // 'attribute' 'descending'
     || lk == 57464                 // 'element' 'descending'
     || lk == 57521                 // 'namespace' 'descending'
     || lk == 57550                 // 'processing-instruction' 'descending'
     || lk == 59990                 // 'attribute' 'div'
     || lk == 60024                 // 'element' 'div'
     || lk == 60081                 // 'namespace' 'div'
     || lk == 60110                 // 'processing-instruction' 'div'
     || lk == 62038                 // 'attribute' 'else'
     || lk == 62072                 // 'element' 'else'
     || lk == 62129                 // 'namespace' 'else'
     || lk == 62158                 // 'processing-instruction' 'else'
     || lk == 62550                 // 'attribute' 'empty'
     || lk == 62584                 // 'element' 'empty'
     || lk == 62641                 // 'namespace' 'empty'
     || lk == 62670                 // 'processing-instruction' 'empty'
     || lk == 64086                 // 'attribute' 'end'
     || lk == 64120                 // 'element' 'end'
     || lk == 64177                 // 'namespace' 'end'
     || lk == 64206                 // 'processing-instruction' 'end'
     || lk == 65110                 // 'attribute' 'eq'
     || lk == 65144                 // 'element' 'eq'
     || lk == 65201                 // 'namespace' 'eq'
     || lk == 65230                 // 'processing-instruction' 'eq'
     || lk == 66646                 // 'attribute' 'except'
     || lk == 66680                 // 'element' 'except'
     || lk == 66737                 // 'namespace' 'except'
     || lk == 66766                 // 'processing-instruction' 'except'
     || lk == 69718                 // 'attribute' 'for'
     || lk == 69752                 // 'element' 'for'
     || lk == 69809                 // 'namespace' 'for'
     || lk == 69838                 // 'processing-instruction' 'for'
     || lk == 73302                 // 'attribute' 'ge'
     || lk == 73336                 // 'element' 'ge'
     || lk == 73393                 // 'namespace' 'ge'
     || lk == 73422                 // 'processing-instruction' 'ge'
     || lk == 74326                 // 'attribute' 'group'
     || lk == 74360                 // 'element' 'group'
     || lk == 74417                 // 'namespace' 'group'
     || lk == 74446                 // 'processing-instruction' 'group'
     || lk == 75350                 // 'attribute' 'gt'
     || lk == 75384                 // 'element' 'gt'
     || lk == 75441                 // 'namespace' 'gt'
     || lk == 75470                 // 'processing-instruction' 'gt'
     || lk == 75862                 // 'attribute' 'idiv'
     || lk == 75896                 // 'element' 'idiv'
     || lk == 75953                 // 'namespace' 'idiv'
     || lk == 75982                 // 'processing-instruction' 'idiv'
     || lk == 79958                 // 'attribute' 'instance'
     || lk == 79992                 // 'element' 'instance'
     || lk == 80049                 // 'namespace' 'instance'
     || lk == 80078                 // 'processing-instruction' 'instance'
     || lk == 80470                 // 'attribute' 'intersect'
     || lk == 80504                 // 'element' 'intersect'
     || lk == 80561                 // 'namespace' 'intersect'
     || lk == 80590                 // 'processing-instruction' 'intersect'
     || lk == 82006                 // 'attribute' 'is'
     || lk == 82040                 // 'element' 'is'
     || lk == 82097                 // 'namespace' 'is'
     || lk == 82126                 // 'processing-instruction' 'is'
     || lk == 84566                 // 'attribute' 'le'
     || lk == 84600                 // 'element' 'le'
     || lk == 84657                 // 'namespace' 'le'
     || lk == 84686                 // 'processing-instruction' 'le'
     || lk == 85590                 // 'attribute' 'let'
     || lk == 85624                 // 'element' 'let'
     || lk == 85681                 // 'namespace' 'let'
     || lk == 85710                 // 'processing-instruction' 'let'
     || lk == 87126                 // 'attribute' 'lt'
     || lk == 87160                 // 'element' 'lt'
     || lk == 87217                 // 'namespace' 'lt'
     || lk == 87246                 // 'processing-instruction' 'lt'
     || lk == 88662                 // 'attribute' 'mod'
     || lk == 88696                 // 'element' 'mod'
     || lk == 88753                 // 'namespace' 'mod'
     || lk == 88782                 // 'processing-instruction' 'mod'
     || lk == 89174                 // 'attribute' 'modify'
     || lk == 89208                 // 'element' 'modify'
     || lk == 91734                 // 'attribute' 'ne'
     || lk == 91768                 // 'element' 'ne'
     || lk == 91825                 // 'namespace' 'ne'
     || lk == 91854                 // 'processing-instruction' 'ne'
     || lk == 96854                 // 'attribute' 'only'
     || lk == 96888                 // 'element' 'only'
     || lk == 96945                 // 'namespace' 'only'
     || lk == 96974                 // 'processing-instruction' 'only'
     || lk == 97878                 // 'attribute' 'or'
     || lk == 97912                 // 'element' 'or'
     || lk == 97969                 // 'namespace' 'or'
     || lk == 97998                 // 'processing-instruction' 'or'
     || lk == 98390                 // 'attribute' 'order'
     || lk == 98424                 // 'element' 'order'
     || lk == 98481                 // 'namespace' 'order'
     || lk == 98510                 // 'processing-instruction' 'order'
     || lk == 107606                // 'attribute' 'return'
     || lk == 107640                // 'element' 'return'
     || lk == 107697                // 'namespace' 'return'
     || lk == 107726                // 'processing-instruction' 'return'
     || lk == 109142                // 'attribute' 'satisfies'
     || lk == 109176                // 'element' 'satisfies'
     || lk == 109233                // 'namespace' 'satisfies'
     || lk == 109262                // 'processing-instruction' 'satisfies'
     || lk == 115286                // 'attribute' 'stable'
     || lk == 115320                // 'element' 'stable'
     || lk == 115377                // 'namespace' 'stable'
     || lk == 115406                // 'processing-instruction' 'stable'
     || lk == 115798                // 'attribute' 'start'
     || lk == 115832                // 'element' 'start'
     || lk == 115889                // 'namespace' 'start'
     || lk == 115918                // 'processing-instruction' 'start'
     || lk == 120918                // 'attribute' 'to'
     || lk == 120952                // 'element' 'to'
     || lk == 121009                // 'namespace' 'to'
     || lk == 121038                // 'processing-instruction' 'to'
     || lk == 121430                // 'attribute' 'transform'
     || lk == 121464                // 'element' 'transform'
     || lk == 121942                // 'attribute' 'treat'
     || lk == 121976                // 'element' 'treat'
     || lk == 122033                // 'namespace' 'treat'
     || lk == 122062                // 'processing-instruction' 'treat'
     || lk == 124502                // 'attribute' 'union'
     || lk == 124536                // 'element' 'union'
     || lk == 124593                // 'namespace' 'union'
     || lk == 124622                // 'processing-instruction' 'union'
     || lk == 125526                // 'attribute' 'update'
     || lk == 125560                // 'element' 'update'
     || lk == 130646                // 'attribute' 'where'
     || lk == 130680                // 'element' 'where'
     || lk == 130737                // 'namespace' 'where'
     || lk == 130766                // 'processing-instruction' 'where'
     || lk == 132182                // 'attribute' 'with'
     || lk == 132216)               // 'element' 'with'
    {
      lk = memoized(19, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(19, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 43:                        // '.'
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
    case 65:                        // '?'
    case 69:                        // '['
    case 73:                        // '``['
    case 82:                        // 'array'
    case 171:                       // 'map'
    case 2646:                      // 'attribute' URIQualifiedName
    case 2680:                      // 'element' URIQualifiedName
    case 7345:                      // 'namespace' NCName^Token
    case 7374:                      // 'processing-instruction' NCName^Token
    case 7766:                      // 'attribute' QName^Token
    case 7800:                      // 'element' QName^Token
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14957:                     // 'delete' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14967:                     // 'document-node' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14971:                     // 'empty-sequence' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14990:                     // 'function' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14997:                     // 'if' '#'
    case 14998:                     // 'import' '#'
    case 15003:                     // 'insert' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15009:                     // 'item' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15026:                     // 'namespace-node' '#'
    case 15027:                     // 'ne' '#'
    case 15032:                     // 'node' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15056:                     // 'rename' '#'
    case 15057:                     // 'replace' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15063:                     // 'schema-attribute' '#'
    case 15064:                     // 'schema-element' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15079:                     // 'switch' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15090:                     // 'typeswitch' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17517:                     // 'delete' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17550:                     // 'function' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17563:                     // 'insert' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17616:                     // 'rename' '('
    case 17617:                     // 'replace' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
    case 40022:                     // 'attribute' 'ancestor'
    case 40056:                     // 'element' 'ancestor'
    case 40534:                     // 'attribute' 'ancestor-or-self'
    case 40568:                     // 'element' 'ancestor-or-self'
    case 43606:                     // 'attribute' 'at'
    case 43640:                     // 'element' 'at'
    case 44118:                     // 'attribute' 'attribute'
    case 44152:                     // 'element' 'attribute'
    case 48726:                     // 'attribute' 'child'
    case 48760:                     // 'element' 'child'
    case 49750:                     // 'attribute' 'comment'
    case 49784:                     // 'element' 'comment'
    case 52310:                     // 'attribute' 'copy'
    case 52344:                     // 'element' 'copy'
    case 54870:                     // 'attribute' 'declare'
    case 54904:                     // 'element' 'declare'
    case 55894:                     // 'attribute' 'delete'
    case 55928:                     // 'element' 'delete'
    case 56406:                     // 'attribute' 'descendant'
    case 56440:                     // 'element' 'descendant'
    case 56918:                     // 'attribute' 'descendant-or-self'
    case 56952:                     // 'element' 'descendant-or-self'
    case 60502:                     // 'attribute' 'document'
    case 60536:                     // 'element' 'document'
    case 61014:                     // 'attribute' 'document-node'
    case 61048:                     // 'element' 'document-node'
    case 61526:                     // 'attribute' 'element'
    case 61560:                     // 'element' 'element'
    case 63062:                     // 'attribute' 'empty-sequence'
    case 63096:                     // 'element' 'empty-sequence'
    case 65622:                     // 'attribute' 'every'
    case 65656:                     // 'element' 'every'
    case 68694:                     // 'attribute' 'following'
    case 68728:                     // 'element' 'following'
    case 69206:                     // 'attribute' 'following-sibling'
    case 69240:                     // 'element' 'following-sibling'
    case 72790:                     // 'attribute' 'function'
    case 72824:                     // 'element' 'function'
    case 76374:                     // 'attribute' 'if'
    case 76408:                     // 'element' 'if'
    case 76886:                     // 'attribute' 'import'
    case 76920:                     // 'element' 'import'
    case 79446:                     // 'attribute' 'insert'
    case 79480:                     // 'element' 'insert'
    case 81494:                     // 'attribute' 'invoke'
    case 81528:                     // 'element' 'invoke'
    case 82518:                     // 'attribute' 'item'
    case 82552:                     // 'element' 'item'
    case 89686:                     // 'attribute' 'module'
    case 89720:                     // 'element' 'module'
    case 90710:                     // 'attribute' 'namespace'
    case 90744:                     // 'element' 'namespace'
    case 91222:                     // 'attribute' 'namespace-node'
    case 91256:                     // 'element' 'namespace-node'
    case 94294:                     // 'attribute' 'node'
    case 94328:                     // 'element' 'node'
    case 98902:                     // 'attribute' 'ordered'
    case 98936:                     // 'element' 'ordered'
    case 100950:                    // 'attribute' 'parent'
    case 100984:                    // 'element' 'parent'
    case 103510:                    // 'attribute' 'preceding'
    case 103544:                    // 'element' 'preceding'
    case 104022:                    // 'attribute' 'preceding-sibling'
    case 104056:                    // 'element' 'preceding-sibling'
    case 105558:                    // 'attribute' 'processing-instruction'
    case 105592:                    // 'element' 'processing-instruction'
    case 106582:                    // 'attribute' 'rename'
    case 106616:                    // 'element' 'rename'
    case 107094:                    // 'attribute' 'replace'
    case 107128:                    // 'element' 'replace'
    case 110166:                    // 'attribute' 'schema-attribute'
    case 110200:                    // 'element' 'schema-attribute'
    case 110678:                    // 'attribute' 'schema-element'
    case 110712:                    // 'element' 'schema-element'
    case 111702:                    // 'attribute' 'self'
    case 111736:                    // 'element' 'self'
    case 114774:                    // 'attribute' 'some'
    case 114808:                    // 'element' 'some'
    case 118358:                    // 'attribute' 'switch'
    case 118392:                    // 'element' 'switch'
    case 118870:                    // 'attribute' 'text'
    case 118904:                    // 'element' 'text'
    case 122454:                    // 'attribute' 'try'
    case 122488:                    // 'element' 'try'
    case 123990:                    // 'attribute' 'typeswitch'
    case 124024:                    // 'element' 'typeswitch'
    case 125014:                    // 'attribute' 'unordered'
    case 125048:                    // 'element' 'unordered'
    case 127574:                    // 'attribute' 'validate'
    case 127608:                    // 'element' 'validate'
    case 134230:                    // 'attribute' 'xquery'
    case 134264:                    // 'element' 'xquery'
    case 135254:                    // 'attribute' '{'
    case 135265:                    // 'comment' '{'
    case 135286:                    // 'document' '{'
    case 135288:                    // 'element' '{'
    case 135345:                    // 'namespace' '{'
    case 135361:                    // 'ordered' '{'
    case 135374:                    // 'processing-instruction' '{'
    case 135400:                    // 'text' '{'
    case 135412:                    // 'unordered' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  private void try_StepExpr()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(243);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'contains' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 120:                       // 'element'
      lookahead2W(242);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'contains' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 177:                       // 'namespace'
    case 206:                       // 'processing-instruction'
      lookahead2W(206);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 97:                        // 'comment'
    case 118:                       // 'document'
    case 193:                       // 'ordered'
    case 232:                       // 'text'
    case 244:                       // 'unordered'
      lookahead2W(204);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 123:                       // 'empty-sequence'
    case 149:                       // 'if'
    case 161:                       // 'item'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(192);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 218:                       // 'self'
      lookahead2W(201);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 109:                       // 'delete'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 119:                       // 'document-node'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 136:                       // 'for'
    case 142:                       // 'function'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 155:                       // 'insert'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 178:                       // 'namespace-node'
    case 179:                       // 'ne'
    case 184:                       // 'node'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(195);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 41046                 // 'attribute' 'and'
     || lk == 41080                 // 'element' 'and'
     || lk == 41137                 // 'namespace' 'and'
     || lk == 41166                 // 'processing-instruction' 'and'
     || lk == 42582                 // 'attribute' 'as'
     || lk == 42616                 // 'element' 'as'
     || lk == 42673                 // 'namespace' 'as'
     || lk == 42702                 // 'processing-instruction' 'as'
     || lk == 43094                 // 'attribute' 'ascending'
     || lk == 43128                 // 'element' 'ascending'
     || lk == 43185                 // 'namespace' 'ascending'
     || lk == 43214                 // 'processing-instruction' 'ascending'
     || lk == 46678                 // 'attribute' 'case'
     || lk == 46712                 // 'element' 'case'
     || lk == 46769                 // 'namespace' 'case'
     || lk == 46798                 // 'processing-instruction' 'case'
     || lk == 47190                 // 'attribute' 'cast'
     || lk == 47224                 // 'element' 'cast'
     || lk == 47281                 // 'namespace' 'cast'
     || lk == 47310                 // 'processing-instruction' 'cast'
     || lk == 47702                 // 'attribute' 'castable'
     || lk == 47736                 // 'element' 'castable'
     || lk == 47793                 // 'namespace' 'castable'
     || lk == 47822                 // 'processing-instruction' 'castable'
     || lk == 49238                 // 'attribute' 'collation'
     || lk == 49272                 // 'element' 'collation'
     || lk == 49329                 // 'namespace' 'collation'
     || lk == 49358                 // 'processing-instruction' 'collation'
     || lk == 53334                 // 'attribute' 'count'
     || lk == 53368                 // 'element' 'count'
     || lk == 53425                 // 'namespace' 'count'
     || lk == 53454                 // 'processing-instruction' 'count'
     || lk == 55382                 // 'attribute' 'default'
     || lk == 55416                 // 'element' 'default'
     || lk == 55473                 // 'namespace' 'default'
     || lk == 55502                 // 'processing-instruction' 'default'
     || lk == 57430                 // 'attribute' 'descending'
     || lk == 57464                 // 'element' 'descending'
     || lk == 57521                 // 'namespace' 'descending'
     || lk == 57550                 // 'processing-instruction' 'descending'
     || lk == 59990                 // 'attribute' 'div'
     || lk == 60024                 // 'element' 'div'
     || lk == 60081                 // 'namespace' 'div'
     || lk == 60110                 // 'processing-instruction' 'div'
     || lk == 62038                 // 'attribute' 'else'
     || lk == 62072                 // 'element' 'else'
     || lk == 62129                 // 'namespace' 'else'
     || lk == 62158                 // 'processing-instruction' 'else'
     || lk == 62550                 // 'attribute' 'empty'
     || lk == 62584                 // 'element' 'empty'
     || lk == 62641                 // 'namespace' 'empty'
     || lk == 62670                 // 'processing-instruction' 'empty'
     || lk == 64086                 // 'attribute' 'end'
     || lk == 64120                 // 'element' 'end'
     || lk == 64177                 // 'namespace' 'end'
     || lk == 64206                 // 'processing-instruction' 'end'
     || lk == 65110                 // 'attribute' 'eq'
     || lk == 65144                 // 'element' 'eq'
     || lk == 65201                 // 'namespace' 'eq'
     || lk == 65230                 // 'processing-instruction' 'eq'
     || lk == 66646                 // 'attribute' 'except'
     || lk == 66680                 // 'element' 'except'
     || lk == 66737                 // 'namespace' 'except'
     || lk == 66766                 // 'processing-instruction' 'except'
     || lk == 69718                 // 'attribute' 'for'
     || lk == 69752                 // 'element' 'for'
     || lk == 69809                 // 'namespace' 'for'
     || lk == 69838                 // 'processing-instruction' 'for'
     || lk == 73302                 // 'attribute' 'ge'
     || lk == 73336                 // 'element' 'ge'
     || lk == 73393                 // 'namespace' 'ge'
     || lk == 73422                 // 'processing-instruction' 'ge'
     || lk == 74326                 // 'attribute' 'group'
     || lk == 74360                 // 'element' 'group'
     || lk == 74417                 // 'namespace' 'group'
     || lk == 74446                 // 'processing-instruction' 'group'
     || lk == 75350                 // 'attribute' 'gt'
     || lk == 75384                 // 'element' 'gt'
     || lk == 75441                 // 'namespace' 'gt'
     || lk == 75470                 // 'processing-instruction' 'gt'
     || lk == 75862                 // 'attribute' 'idiv'
     || lk == 75896                 // 'element' 'idiv'
     || lk == 75953                 // 'namespace' 'idiv'
     || lk == 75982                 // 'processing-instruction' 'idiv'
     || lk == 79958                 // 'attribute' 'instance'
     || lk == 79992                 // 'element' 'instance'
     || lk == 80049                 // 'namespace' 'instance'
     || lk == 80078                 // 'processing-instruction' 'instance'
     || lk == 80470                 // 'attribute' 'intersect'
     || lk == 80504                 // 'element' 'intersect'
     || lk == 80561                 // 'namespace' 'intersect'
     || lk == 80590                 // 'processing-instruction' 'intersect'
     || lk == 82006                 // 'attribute' 'is'
     || lk == 82040                 // 'element' 'is'
     || lk == 82097                 // 'namespace' 'is'
     || lk == 82126                 // 'processing-instruction' 'is'
     || lk == 84566                 // 'attribute' 'le'
     || lk == 84600                 // 'element' 'le'
     || lk == 84657                 // 'namespace' 'le'
     || lk == 84686                 // 'processing-instruction' 'le'
     || lk == 85590                 // 'attribute' 'let'
     || lk == 85624                 // 'element' 'let'
     || lk == 85681                 // 'namespace' 'let'
     || lk == 85710                 // 'processing-instruction' 'let'
     || lk == 87126                 // 'attribute' 'lt'
     || lk == 87160                 // 'element' 'lt'
     || lk == 87217                 // 'namespace' 'lt'
     || lk == 87246                 // 'processing-instruction' 'lt'
     || lk == 88662                 // 'attribute' 'mod'
     || lk == 88696                 // 'element' 'mod'
     || lk == 88753                 // 'namespace' 'mod'
     || lk == 88782                 // 'processing-instruction' 'mod'
     || lk == 89174                 // 'attribute' 'modify'
     || lk == 89208                 // 'element' 'modify'
     || lk == 91734                 // 'attribute' 'ne'
     || lk == 91768                 // 'element' 'ne'
     || lk == 91825                 // 'namespace' 'ne'
     || lk == 91854                 // 'processing-instruction' 'ne'
     || lk == 96854                 // 'attribute' 'only'
     || lk == 96888                 // 'element' 'only'
     || lk == 96945                 // 'namespace' 'only'
     || lk == 96974                 // 'processing-instruction' 'only'
     || lk == 97878                 // 'attribute' 'or'
     || lk == 97912                 // 'element' 'or'
     || lk == 97969                 // 'namespace' 'or'
     || lk == 97998                 // 'processing-instruction' 'or'
     || lk == 98390                 // 'attribute' 'order'
     || lk == 98424                 // 'element' 'order'
     || lk == 98481                 // 'namespace' 'order'
     || lk == 98510                 // 'processing-instruction' 'order'
     || lk == 107606                // 'attribute' 'return'
     || lk == 107640                // 'element' 'return'
     || lk == 107697                // 'namespace' 'return'
     || lk == 107726                // 'processing-instruction' 'return'
     || lk == 109142                // 'attribute' 'satisfies'
     || lk == 109176                // 'element' 'satisfies'
     || lk == 109233                // 'namespace' 'satisfies'
     || lk == 109262                // 'processing-instruction' 'satisfies'
     || lk == 115286                // 'attribute' 'stable'
     || lk == 115320                // 'element' 'stable'
     || lk == 115377                // 'namespace' 'stable'
     || lk == 115406                // 'processing-instruction' 'stable'
     || lk == 115798                // 'attribute' 'start'
     || lk == 115832                // 'element' 'start'
     || lk == 115889                // 'namespace' 'start'
     || lk == 115918                // 'processing-instruction' 'start'
     || lk == 120918                // 'attribute' 'to'
     || lk == 120952                // 'element' 'to'
     || lk == 121009                // 'namespace' 'to'
     || lk == 121038                // 'processing-instruction' 'to'
     || lk == 121430                // 'attribute' 'transform'
     || lk == 121464                // 'element' 'transform'
     || lk == 121942                // 'attribute' 'treat'
     || lk == 121976                // 'element' 'treat'
     || lk == 122033                // 'namespace' 'treat'
     || lk == 122062                // 'processing-instruction' 'treat'
     || lk == 124502                // 'attribute' 'union'
     || lk == 124536                // 'element' 'union'
     || lk == 124593                // 'namespace' 'union'
     || lk == 124622                // 'processing-instruction' 'union'
     || lk == 125526                // 'attribute' 'update'
     || lk == 125560                // 'element' 'update'
     || lk == 130646                // 'attribute' 'where'
     || lk == 130680                // 'element' 'where'
     || lk == 130737                // 'namespace' 'where'
     || lk == 130766                // 'processing-instruction' 'where'
     || lk == 132182                // 'attribute' 'with'
     || lk == 132216)               // 'element' 'with'
    {
      lk = memoized(19, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(19, e0A, -1);
          lk = -3;
        }
        catch (ParseException p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(19, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 43:                        // '.'
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
    case 65:                        // '?'
    case 69:                        // '['
    case 73:                        // '``['
    case 82:                        // 'array'
    case 171:                       // 'map'
    case 2646:                      // 'attribute' URIQualifiedName
    case 2680:                      // 'element' URIQualifiedName
    case 7345:                      // 'namespace' NCName^Token
    case 7374:                      // 'processing-instruction' NCName^Token
    case 7766:                      // 'attribute' QName^Token
    case 7800:                      // 'element' QName^Token
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14957:                     // 'delete' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14967:                     // 'document-node' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14971:                     // 'empty-sequence' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14990:                     // 'function' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14997:                     // 'if' '#'
    case 14998:                     // 'import' '#'
    case 15003:                     // 'insert' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15009:                     // 'item' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15026:                     // 'namespace-node' '#'
    case 15027:                     // 'ne' '#'
    case 15032:                     // 'node' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15056:                     // 'rename' '#'
    case 15057:                     // 'replace' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15063:                     // 'schema-attribute' '#'
    case 15064:                     // 'schema-element' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15079:                     // 'switch' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15090:                     // 'typeswitch' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17517:                     // 'delete' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17550:                     // 'function' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17563:                     // 'insert' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17616:                     // 'rename' '('
    case 17617:                     // 'replace' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
    case 40022:                     // 'attribute' 'ancestor'
    case 40056:                     // 'element' 'ancestor'
    case 40534:                     // 'attribute' 'ancestor-or-self'
    case 40568:                     // 'element' 'ancestor-or-self'
    case 43606:                     // 'attribute' 'at'
    case 43640:                     // 'element' 'at'
    case 44118:                     // 'attribute' 'attribute'
    case 44152:                     // 'element' 'attribute'
    case 48726:                     // 'attribute' 'child'
    case 48760:                     // 'element' 'child'
    case 49750:                     // 'attribute' 'comment'
    case 49784:                     // 'element' 'comment'
    case 52310:                     // 'attribute' 'copy'
    case 52344:                     // 'element' 'copy'
    case 54870:                     // 'attribute' 'declare'
    case 54904:                     // 'element' 'declare'
    case 55894:                     // 'attribute' 'delete'
    case 55928:                     // 'element' 'delete'
    case 56406:                     // 'attribute' 'descendant'
    case 56440:                     // 'element' 'descendant'
    case 56918:                     // 'attribute' 'descendant-or-self'
    case 56952:                     // 'element' 'descendant-or-self'
    case 60502:                     // 'attribute' 'document'
    case 60536:                     // 'element' 'document'
    case 61014:                     // 'attribute' 'document-node'
    case 61048:                     // 'element' 'document-node'
    case 61526:                     // 'attribute' 'element'
    case 61560:                     // 'element' 'element'
    case 63062:                     // 'attribute' 'empty-sequence'
    case 63096:                     // 'element' 'empty-sequence'
    case 65622:                     // 'attribute' 'every'
    case 65656:                     // 'element' 'every'
    case 68694:                     // 'attribute' 'following'
    case 68728:                     // 'element' 'following'
    case 69206:                     // 'attribute' 'following-sibling'
    case 69240:                     // 'element' 'following-sibling'
    case 72790:                     // 'attribute' 'function'
    case 72824:                     // 'element' 'function'
    case 76374:                     // 'attribute' 'if'
    case 76408:                     // 'element' 'if'
    case 76886:                     // 'attribute' 'import'
    case 76920:                     // 'element' 'import'
    case 79446:                     // 'attribute' 'insert'
    case 79480:                     // 'element' 'insert'
    case 81494:                     // 'attribute' 'invoke'
    case 81528:                     // 'element' 'invoke'
    case 82518:                     // 'attribute' 'item'
    case 82552:                     // 'element' 'item'
    case 89686:                     // 'attribute' 'module'
    case 89720:                     // 'element' 'module'
    case 90710:                     // 'attribute' 'namespace'
    case 90744:                     // 'element' 'namespace'
    case 91222:                     // 'attribute' 'namespace-node'
    case 91256:                     // 'element' 'namespace-node'
    case 94294:                     // 'attribute' 'node'
    case 94328:                     // 'element' 'node'
    case 98902:                     // 'attribute' 'ordered'
    case 98936:                     // 'element' 'ordered'
    case 100950:                    // 'attribute' 'parent'
    case 100984:                    // 'element' 'parent'
    case 103510:                    // 'attribute' 'preceding'
    case 103544:                    // 'element' 'preceding'
    case 104022:                    // 'attribute' 'preceding-sibling'
    case 104056:                    // 'element' 'preceding-sibling'
    case 105558:                    // 'attribute' 'processing-instruction'
    case 105592:                    // 'element' 'processing-instruction'
    case 106582:                    // 'attribute' 'rename'
    case 106616:                    // 'element' 'rename'
    case 107094:                    // 'attribute' 'replace'
    case 107128:                    // 'element' 'replace'
    case 110166:                    // 'attribute' 'schema-attribute'
    case 110200:                    // 'element' 'schema-attribute'
    case 110678:                    // 'attribute' 'schema-element'
    case 110712:                    // 'element' 'schema-element'
    case 111702:                    // 'attribute' 'self'
    case 111736:                    // 'element' 'self'
    case 114774:                    // 'attribute' 'some'
    case 114808:                    // 'element' 'some'
    case 118358:                    // 'attribute' 'switch'
    case 118392:                    // 'element' 'switch'
    case 118870:                    // 'attribute' 'text'
    case 118904:                    // 'element' 'text'
    case 122454:                    // 'attribute' 'try'
    case 122488:                    // 'element' 'try'
    case 123990:                    // 'attribute' 'typeswitch'
    case 124024:                    // 'element' 'typeswitch'
    case 125014:                    // 'attribute' 'unordered'
    case 125048:                    // 'element' 'unordered'
    case 127574:                    // 'attribute' 'validate'
    case 127608:                    // 'element' 'validate'
    case 134230:                    // 'attribute' 'xquery'
    case 134264:                    // 'element' 'xquery'
    case 135254:                    // 'attribute' '{'
    case 135265:                    // 'comment' '{'
    case 135286:                    // 'document' '{'
    case 135288:                    // 'element' '{'
    case 135345:                    // 'namespace' '{'
    case 135361:                    // 'ordered' '{'
    case 135374:                    // 'processing-instruction' '{'
    case 135400:                    // 'text' '{'
    case 135412:                    // 'unordered' '{'
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  private void parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
      lookahead2W(194);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 44:                        // '..'
    case 25678:                     // 'ancestor' '::'
    case 25679:                     // 'ancestor-or-self' '::'
    case 25797:                     // 'parent' '::'
    case 25802:                     // 'preceding' '::'
    case 25803:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(191);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  private void try_AxisStep()
  {
    switch (l1)
    {
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
      lookahead2W(194);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 44:                        // '..'
    case 25678:                     // 'ancestor' '::'
    case 25679:                     // 'ancestor-or-self' '::'
    case 25797:                     // 'parent' '::'
    case 25802:                     // 'preceding' '::'
    case 25803:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(191);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    try_PredicateList();
  }

  private void parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(196);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 218:                       // 'self'
      lookahead2W(194);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 25686:                     // 'attribute' '::'
    case 25695:                     // 'child' '::'
    case 25710:                     // 'descendant' '::'
    case 25711:                     // 'descendant-or-self' '::'
    case 25734:                     // 'following' '::'
    case 25735:                     // 'following-sibling' '::'
    case 25818:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  private void try_ForwardStep()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(196);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 218:                       // 'self'
      lookahead2W(194);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 25686:                     // 'attribute' '::'
    case 25695:                     // 'child' '::'
    case 25710:                     // 'descendant' '::'
    case 25711:                     // 'descendant-or-self' '::'
    case 25734:                     // 'following' '::'
    case 25735:                     // 'following-sibling' '::'
    case 25818:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  private void parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 95:                        // 'child'
      consume(95);                  // 'child'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 110:                       // 'descendant'
      consume(110);                 // 'descendant'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 86:                        // 'attribute'
      consume(86);                  // 'attribute'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 218:                       // 'self'
      consume(218);                 // 'self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 111:                       // 'descendant-or-self'
      consume(111);                 // 'descendant-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 135:                       // 'following-sibling'
      consume(135);                 // 'following-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    default:
      consume(134);                 // 'following'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  private void try_ForwardAxis()
  {
    switch (l1)
    {
    case 95:                        // 'child'
      consumeT(95);                 // 'child'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 110:                       // 'descendant'
      consumeT(110);                // 'descendant'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 86:                        // 'attribute'
      consumeT(86);                 // 'attribute'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 218:                       // 'self'
      consumeT(218);                // 'self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 111:                       // 'descendant-or-self'
      consumeT(111);                // 'descendant-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 135:                       // 'following-sibling'
      consumeT(135);                // 'following-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    default:
      consumeT(134);                // 'following'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
    }
  }

  private void parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 67)                   // '@'
    {
      consume(67);                  // '@'
    }
    lookahead1W(224);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  private void try_AbbrevForwardStep()
  {
    if (l1 == 67)                   // '@'
    {
      consumeT(67);                 // '@'
    }
    lookahead1W(224);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_NodeTest();
  }

  private void parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 44:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  private void try_ReverseStep()
  {
    switch (l1)
    {
    case 44:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_NodeTest();
    }
  }

  private void parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 197:                       // 'parent'
      consume(197);                 // 'parent'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 203:                       // 'preceding-sibling'
      consume(203);                 // 'preceding-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 202:                       // 'preceding'
      consume(202);                 // 'preceding'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    default:
      consume(79);                  // 'ancestor-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  private void try_ReverseAxis()
  {
    switch (l1)
    {
    case 197:                       // 'parent'
      consumeT(197);                // 'parent'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 203:                       // 'preceding-sibling'
      consumeT(203);                // 'preceding-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 202:                       // 'preceding'
      consumeT(202);                // 'preceding'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    default:
      consumeT(79);                 // 'ancestor-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
    }
  }

  private void parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    consume(44);                    // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  private void try_AbbrevReverseStep()
  {
    consumeT(44);                   // '..'
  }

  private void parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(193);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  private void try_NodeTest()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(193);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  private void parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 21:                        // Wildcard
      consume(21);                  // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  private void try_NameTest()
  {
    switch (l1)
    {
    case 21:                        // Wildcard
      consumeT(21);                 // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  private void parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(197);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 34                  // '('
       && l1 != 65                  // '?'
       && l1 != 69)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        whitespace();
        parse_Predicate();
        break;
      case 34:                      // '('
        whitespace();
        parse_ArgumentList();
        break;
      default:
        whitespace();
        parse_Lookup();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  private void try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(197);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 34                  // '('
       && l1 != 65                  // '?'
       && l1 != 69)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        try_Predicate();
        break;
      case 34:                      // '('
        try_ArgumentList();
        break;
      default:
        try_Lookup();
      }
    }
  }

  private void parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    consume(34);                    // '('
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_Argument();
      }
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  private void try_ArgumentList()
  {
    consumeT(34);                   // '('
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_Argument();
      }
    }
    consumeT(37);                   // ')'
  }

  private void parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(191);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 69)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  private void try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(191);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 69)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  private void parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    consume(69);                    // '['
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(70);                    // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  private void try_Predicate()
  {
    consumeT(69);                   // '['
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(70);                   // ']'
  }

  private void parse_Lookup()
  {
    eventHandler.startNonterminal("Lookup", e0);
    consume(65);                    // '?'
    lookahead1W(178);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("Lookup", e0);
  }

  private void try_Lookup()
  {
    consumeT(65);                   // '?'
    lookahead1W(178);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
    try_KeySpecifier();
  }

  private void parse_UnaryLookup()
  {
    eventHandler.startNonterminal("UnaryLookup", e0);
    consume(65);                    // '?'
    lookahead1W(178);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("UnaryLookup", e0);
  }

  private void try_UnaryLookup()
  {
    consumeT(65);                   // '?'
    lookahead1W(178);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
    try_KeySpecifier();
  }

  private void parse_KeySpecifier()
  {
    eventHandler.startNonterminal("KeySpecifier", e0);
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consume(1);                   // IntegerLiteral
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_NCName();
    }
    eventHandler.endNonterminal("KeySpecifier", e0);
  }

  private void try_KeySpecifier()
  {
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consumeT(1);                  // IntegerLiteral
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_NCName();
    }
  }

  private void parse_ArrowFunctionSpecifier()
  {
    eventHandler.startNonterminal("ArrowFunctionSpecifier", e0);
    switch (l1)
    {
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("ArrowFunctionSpecifier", e0);
  }

  private void try_ArrowFunctionSpecifier()
  {
    switch (l1)
    {
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    default:
      try_EQName();
    }
  }

  private void parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 4:                         // StringLiteral
      consume(4);                   // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  private void try_Literal()
  {
    switch (l1)
    {
    case 4:                         // StringLiteral
      consumeT(4);                  // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  private void parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consume(1);                   // IntegerLiteral
      break;
    case 2:                         // DecimalLiteral
      consume(2);                   // DecimalLiteral
      break;
    default:
      consume(3);                   // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  private void try_NumericLiteral()
  {
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consumeT(1);                  // IntegerLiteral
      break;
    case 2:                         // DecimalLiteral
      consumeT(2);                  // DecimalLiteral
      break;
    default:
      consumeT(3);                  // DoubleLiteral
    }
  }

  private void parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  private void try_VarRef()
  {
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  private void parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  private void try_VarName()
  {
    try_EQName();
  }

  private void parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    consume(34);                    // '('
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  private void try_ParenthesizedExpr()
  {
    consumeT(34);                   // '('
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_Expr();
    }
    consumeT(37);                   // ')'
  }

  private void parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    consume(43);                    // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  private void try_ContextItemExpr()
  {
    consumeT(43);                   // '.'
  }

  private void parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    consume(193);                   // 'ordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  private void try_OrderedExpr()
  {
    consumeT(193);                  // 'ordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  private void parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    consume(244);                   // 'unordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  private void try_UnorderedExpr()
  {
    consumeT(244);                  // 'unordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  private void parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionEQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  private void try_FunctionCall()
  {
    try_FunctionEQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  private void parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 65:                        // '?'
      lookahead2W(180);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'and' |
                                    // 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19009:                     // '?' ')'
    case 20545:                     // '?' ','
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  private void try_Argument()
  {
    switch (l1)
    {
    case 65:                        // '?'
      lookahead2W(180);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'and' |
                                    // 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19009:                     // '?' ')'
    case 20545:                     // '?' ','
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  private void parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    consume(65);                    // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  private void try_ArgumentPlaceholder()
  {
    consumeT(65);                   // '?'
  }

  private void parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  private void try_Constructor()
  {
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  private void parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 53:                        // '<'
      parse_DirElemConstructor();
      break;
    case 54:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  private void try_DirectConstructor()
  {
    switch (l1)
    {
    case 53:                        // '<'
      try_DirElemConstructor();
      break;
    case 54:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  private void parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    consume(53);                    // '<'
    parse_QName();
    parse_DirAttributeList();
    switch (l1)
    {
    case 47:                        // '/>'
      consume(47);                  // '/>'
      break;
    default:
      consume(62);                  // '>'
      for (;;)
      {
        lookahead1(164);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      consume(56);                  // '</'
      parse_QName();
      lookahead1(14);               // S | '>'
      if (l1 == 17)                 // S
      {
        consume(17);                // S
      }
      lookahead1(9);                // '>'
      consume(62);                  // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  private void try_DirElemConstructor()
  {
    consumeT(53);                   // '<'
    try_QName();
    try_DirAttributeList();
    switch (l1)
    {
    case 47:                        // '/>'
      consumeT(47);                 // '/>'
      break;
    default:
      consumeT(62);                 // '>'
      for (;;)
      {
        lookahead1(164);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      consumeT(56);                 // '</'
      try_QName();
      lookahead1(14);               // S | '>'
      if (l1 == 17)                 // S
      {
        consumeT(17);               // S
      }
      lookahead1(9);                // '>'
      consumeT(62);                 // '>'
    }
  }

  private void parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 17)                 // S
      {
        break;
      }
      consume(17);                  // S
      lookahead1(223);              // QName^Token | S | '/>' | '>' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      if (l1 != 17                  // S
       && l1 != 47                  // '/>'
       && l1 != 62)                 // '>'
      {
        parse_QName();
        lookahead1(13);             // S | '='
        if (l1 == 17)               // S
        {
          consume(17);              // S
        }
        lookahead1(8);              // '='
        consume(60);                // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 17)               // S
        {
          consume(17);              // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  private void try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 17)                 // S
      {
        break;
      }
      consumeT(17);                 // S
      lookahead1(223);              // QName^Token | S | '/>' | '>' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      if (l1 != 17                  // S
       && l1 != 47                  // '/>'
       && l1 != 62)                 // '>'
      {
        try_QName();
        lookahead1(13);             // S | '='
        if (l1 == 17)               // S
        {
          consumeT(17);             // S
        }
        lookahead1(8);              // '='
        consumeT(60);               // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 17)               // S
        {
          consumeT(17);             // S
        }
        try_DirAttributeValue();
      }
    }
  }

  private void parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(16);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consume(28);                  // '"'
      for (;;)
      {
        lookahead1(158);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          consume(7);               // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      consume(28);                  // '"'
      break;
    default:
      consume(33);                  // "'"
      for (;;)
      {
        lookahead1(159);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          consume(8);               // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      consume(33);                  // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  private void try_DirAttributeValue()
  {
    lookahead1(16);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consumeT(28);                 // '"'
      for (;;)
      {
        lookahead1(158);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          consumeT(7);              // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      consumeT(28);                 // '"'
      break;
    default:
      consumeT(33);                 // "'"
      for (;;)
      {
        lookahead1(159);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          consumeT(8);              // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      consumeT(33);                 // "'"
    }
  }

  private void parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      consume(10);                  // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  private void try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      consumeT(10);                 // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  private void parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      consume(11);                  // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  private void try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      consumeT(11);                 // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  private void parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    case 55:                        // '<![CDATA['
      parse_CDataSection();
      break;
    case 9:                         // ElementContentChar
      consume(9);                   // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  private void try_DirElemContent()
  {
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    case 55:                        // '<![CDATA['
      try_CDataSection();
      break;
    case 9:                         // ElementContentChar
      consumeT(9);                  // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  private void parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    consume(54);                    // '<!--'
    lookahead1(3);                  // DirCommentContents
    consume(22);                    // DirCommentContents
    lookahead1(7);                  // '-->'
    consume(42);                    // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  private void try_DirCommentConstructor()
  {
    consumeT(54);                   // '<!--'
    lookahead1(3);                  // DirCommentContents
    consumeT(22);                   // DirCommentContents
    lookahead1(7);                  // '-->'
    consumeT(42);                   // '-->'
  }

  private void parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    consume(59);                    // '<?'
    lookahead1(0);                  // PITarget
    consume(12);                    // PITarget
    lookahead1(15);                 // S | '?>'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
      lookahead1(4);                // DirPIContents
      consume(23);                  // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consume(66);                    // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  private void try_DirPIConstructor()
  {
    consumeT(59);                   // '<?'
    lookahead1(0);                  // PITarget
    consumeT(12);                   // PITarget
    lookahead1(15);                 // S | '?>'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
      lookahead1(4);                // DirPIContents
      consumeT(23);                 // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consumeT(66);                   // '?>'
  }

  private void parse_CDataSection()
  {
    eventHandler.startNonterminal("CDataSection", e0);
    consume(55);                    // '<![CDATA['
    lookahead1(5);                  // CDataSectionContents
    consume(24);                    // CDataSectionContents
    lookahead1(11);                 // ']]>'
    consume(71);                    // ']]>'
    eventHandler.endNonterminal("CDataSection", e0);
  }

  private void try_CDataSection()
  {
    consumeT(55);                   // '<![CDATA['
    lookahead1(5);                  // CDataSectionContents
    consumeT(24);                   // CDataSectionContents
    lookahead1(11);                 // ']]>'
    consumeT(71);                   // ']]>'
  }

  private void parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 118:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 120:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 86:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 177:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 232:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  private void try_ComputedConstructor()
  {
    switch (l1)
    {
    case 118:                       // 'document'
      try_CompDocConstructor();
      break;
    case 120:                       // 'element'
      try_CompElemConstructor();
      break;
    case 86:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 177:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 232:                       // 'text'
      try_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  private void parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    consume(120);                   // 'element'
    lookahead1W(225);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedContentExpr();
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  private void try_CompElemConstructor()
  {
    consumeT(120);                  // 'element'
    lookahead1W(225);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedContentExpr();
  }

  private void parse_EnclosedContentExpr()
  {
    eventHandler.startNonterminal("EnclosedContentExpr", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("EnclosedContentExpr", e0);
  }

  private void try_EnclosedContentExpr()
  {
    try_EnclosedExpr();
  }

  private void parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    consume(177);                   // 'namespace'
    lookahead1W(175);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_PrefixExpr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_URIExpr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  private void try_CompNamespaceConstructor()
  {
    consumeT(177);                  // 'namespace'
    lookahead1W(175);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_PrefixExpr();
      consumeT(268);                // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_URIExpr();
    consumeT(268);                  // '}'
  }

  private void parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  private void try_Prefix()
  {
    try_NCName();
  }

  private void parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  private void try_PrefixExpr()
  {
    try_Expr();
  }

  private void parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  private void try_URIExpr()
  {
    try_Expr();
  }

  private void parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  private void try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  private void parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consume(29);                    // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consume(1);                     // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  private void try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consumeT(29);                   // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consumeT(1);                    // IntegerLiteral
  }

  private void parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(142);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(85);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(104);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 83)                   // 'as'
    {
      consume(83);                  // 'as'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  private void try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(142);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(85);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      try_ParamList();
    }
    consumeT(37);                   // ')'
    lookahead1W(104);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 83)                   // 'as'
    {
      consumeT(83);                 // 'as'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  private void parse_MapConstructor()
  {
    eventHandler.startNonterminal("MapConstructor", e0);
    consume(171);                   // 'map'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(240);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_MapConstructorEntry();
      for (;;)
      {
        lookahead1W(97);            // S^WS | '(:' | ',' | '}'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_MapConstructorEntry();
      }
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("MapConstructor", e0);
  }

  private void try_MapConstructor()
  {
    consumeT(171);                  // 'map'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(240);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      try_MapConstructorEntry();
      for (;;)
      {
        lookahead1W(97);            // S^WS | '(:' | ',' | '}'
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_MapConstructorEntry();
      }
    }
    consumeT(268);                  // '}'
  }

  private void parse_MapConstructorEntry()
  {
    eventHandler.startNonterminal("MapConstructorEntry", e0);
    parse_MapKeyExpr();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consume(48);                    // ':'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_MapValueExpr();
    eventHandler.endNonterminal("MapConstructorEntry", e0);
  }

  private void try_MapConstructorEntry()
  {
    try_MapKeyExpr();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consumeT(48);                   // ':'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_MapValueExpr();
  }

  private void parse_MapKeyExpr()
  {
    eventHandler.startNonterminal("MapKeyExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapKeyExpr", e0);
  }

  private void try_MapKeyExpr()
  {
    try_ExprSingle();
  }

  private void parse_MapValueExpr()
  {
    eventHandler.startNonterminal("MapValueExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapValueExpr", e0);
  }

  private void try_MapValueExpr()
  {
    try_ExprSingle();
  }

  private void parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    switch (l1)
    {
    case 69:                        // '['
      parse_SquareArrayConstructor();
      break;
    default:
      parse_CurlyArrayConstructor();
    }
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  private void try_ArrayConstructor()
  {
    switch (l1)
    {
    case 69:                        // '['
      try_SquareArrayConstructor();
      break;
    default:
      try_CurlyArrayConstructor();
    }
  }

  private void parse_SquareArrayConstructor()
  {
    eventHandler.startNonterminal("SquareArrayConstructor", e0);
    consume(69);                    // '['
    lookahead1W(238);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 70)                   // ']'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(94);            // S^WS | '(:' | ',' | ']'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(70);                    // ']'
    eventHandler.endNonterminal("SquareArrayConstructor", e0);
  }

  private void try_SquareArrayConstructor()
  {
    consumeT(69);                   // '['
    lookahead1W(238);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 70)                   // ']'
    {
      try_ExprSingle();
      for (;;)
      {
        lookahead1W(94);            // S^WS | '(:' | ',' | ']'
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_ExprSingle();
      }
    }
    consumeT(70);                   // ']'
  }

  private void parse_CurlyArrayConstructor()
  {
    eventHandler.startNonterminal("CurlyArrayConstructor", e0);
    consume(82);                    // 'array'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CurlyArrayConstructor", e0);
  }

  private void try_CurlyArrayConstructor()
  {
    consumeT(82);                   // 'array'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  private void parse_StringConstructor()
  {
    eventHandler.startNonterminal("StringConstructor", e0);
    consume(73);                    // '``['
    parse_StringConstructorContent();
    consume(72);                    // ']``'
    eventHandler.endNonterminal("StringConstructor", e0);
  }

  private void try_StringConstructor()
  {
    consumeT(73);                   // '``['
    try_StringConstructorContent();
    consumeT(72);                   // ']``'
  }

  private void parse_StringConstructorContent()
  {
    eventHandler.startNonterminal("StringConstructorContent", e0);
    lookahead1(1);                  // StringConstructorChars
    consume(16);                    // StringConstructorChars
    for (;;)
    {
      lookahead1(17);               // ']``' | '`{'
      if (l1 != 74)                 // '`{'
      {
        break;
      }
      parse_StringConstructorInterpolation();
      lookahead1(1);                // StringConstructorChars
      consume(16);                  // StringConstructorChars
    }
    eventHandler.endNonterminal("StringConstructorContent", e0);
  }

  private void try_StringConstructorContent()
  {
    lookahead1(1);                  // StringConstructorChars
    consumeT(16);                   // StringConstructorChars
    for (;;)
    {
      lookahead1(17);               // ']``' | '`{'
      if (l1 != 74)                 // '`{'
      {
        break;
      }
      try_StringConstructorInterpolation();
      lookahead1(1);                // StringConstructorChars
      consumeT(16);                 // StringConstructorChars
    }
  }

  private void parse_StringConstructorInterpolation()
  {
    eventHandler.startNonterminal("StringConstructorInterpolation", e0);
    consume(74);                    // '`{'
    lookahead1W(241);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}`'
    if (l1 != 269)                  // '}`'
    {
      whitespace();
      parse_Expr();
    }
    consume(269);                   // '}`'
    eventHandler.endNonterminal("StringConstructorInterpolation", e0);
  }

  private void try_StringConstructorInterpolation()
  {
    consumeT(74);                   // '`{'
    lookahead1W(241);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '}`'
    if (l1 != 269)                  // '}`'
    {
      try_Expr();
    }
    consumeT(269);                  // '}`'
  }

  private void parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(187);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 65)                   // '?'
    {
      consume(65);                  // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  private void try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(187);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 65)                   // '?'
    {
      consumeT(65);                 // '?'
    }
  }

  private void parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    consume(83);                    // 'as'
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  private void try_TypeDeclaration()
  {
    consumeT(83);                   // 'as'
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SequenceType();
  }

  private void parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 123:                       // 'empty-sequence'
      lookahead2W(205);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17531:                     // 'empty-sequence' '('
      consume(123);                 // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(198);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      switch (l1)
      {
      case 38:                      // '*'
      case 39:                      // '+'
      case 65:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  private void try_SequenceType()
  {
    switch (l1)
    {
    case 123:                       // 'empty-sequence'
      lookahead2W(205);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17531:                     // 'empty-sequence' '('
      consumeT(123);                // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(198);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      switch (l1)
      {
      case 38:                      // '*'
      case 39:                      // '+'
      case 65:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  private void parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 142:                       // 'function'
    case 161:                       // 'item'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(205);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      parse_KindTest();
      break;
    case 17569:                     // 'item' '('
      consume(161);                 // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      parse_FunctionTest();
      break;
    case 171:                       // 'map'
      parse_MapTest();
      break;
    case 82:                        // 'array'
      parse_ArrayTest();
      break;
    case 34:                        // '('
      parse_ParenthesizedItemType();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  private void try_ItemType()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 142:                       // 'function'
    case 161:                       // 'item'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(205);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      try_KindTest();
      break;
    case 17569:                     // 'item' '('
      consumeT(161);                // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      try_FunctionTest();
      break;
    case 171:                       // 'map'
      try_MapTest();
      break;
    case 82:                        // 'array'
      try_ArrayTest();
      break;
    case 34:                        // '('
      try_ParenthesizedItemType();
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  private void parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 65:                        // '?'
      consume(65);                  // '?'
      break;
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      consume(39);                  // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  private void try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 65:                        // '?'
      consumeT(65);                 // '?'
      break;
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      consumeT(39);                 // '+'
    }
  }

  private void parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  private void try_AtomicOrUnionType()
  {
    try_EQName();
  }

  private void parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 119:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 120:                       // 'element'
      parse_ElementTest();
      break;
    case 86:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 216:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 215:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 206:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 97:                        // 'comment'
      parse_CommentTest();
      break;
    case 232:                       // 'text'
      parse_TextTest();
      break;
    case 178:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  private void try_KindTest()
  {
    switch (l1)
    {
    case 119:                       // 'document-node'
      try_DocumentTest();
      break;
    case 120:                       // 'element'
      try_ElementTest();
      break;
    case 86:                        // 'attribute'
      try_AttributeTest();
      break;
    case 216:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 215:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 206:                       // 'processing-instruction'
      try_PITest();
      break;
    case 97:                        // 'comment'
      try_CommentTest();
      break;
    case 232:                       // 'text'
      try_TextTest();
      break;
    case 178:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  private void parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    consume(184);                   // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  private void try_AnyKindTest()
  {
    consumeT(184);                  // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    consume(119);                   // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(137);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 120:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  private void try_DocumentTest()
  {
    consumeT(119);                  // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(137);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 120:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    consume(232);                   // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  private void try_TextTest()
  {
    consumeT(232);                  // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    consume(97);                    // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  private void try_CommentTest()
  {
    consumeT(97);                   // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    consume(178);                   // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  private void try_NamespaceNodeTest()
  {
    consumeT(178);                  // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    consume(206);                   // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(176);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 4:                       // StringLiteral
        consume(4);                 // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  private void try_PITest()
  {
    consumeT(206);                  // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(176);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 4:                       // StringLiteral
        consumeT(4);                // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    consume(86);                    // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(228);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consume(40);                // ','
        lookahead1W(222);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  private void try_AttributeTest()
  {
    consumeT(86);                   // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(228);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consumeT(40);               // ','
        lookahead1W(222);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  private void try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  private void parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    consume(215);                   // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  private void try_SchemaAttributeTest()
  {
    consumeT(215);                  // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  private void try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  private void parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    consume(120);                   // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(228);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consume(40);                // ','
        lookahead1W(222);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(92);            // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          consume(65);              // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  private void try_ElementTest()
  {
    consumeT(120);                  // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(228);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consumeT(40);               // ','
        lookahead1W(222);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_TypeName();
        lookahead1W(92);            // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          consumeT(65);             // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  private void try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_ElementName();
    }
  }

  private void parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    consume(216);                   // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  private void try_SchemaElementTest()
  {
    consumeT(216);                  // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  private void try_ElementDeclaration()
  {
    try_ElementName();
  }

  private void parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  private void try_AttributeName()
  {
    try_EQName();
  }

  private void parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  private void try_ElementName()
  {
    try_EQName();
  }

  private void parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  private void try_SimpleTypeName()
  {
    try_TypeName();
  }

  private void parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  private void try_TypeName()
  {
    try_EQName();
  }

  private void parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(20, e0);
    if (lk == 0)
    {
      int b0A = b0; int e0A = e0; int l1A = l1;
      int b1A = b1; int e1A = e1; int l2A = l2;
      int b2A = b2; int e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (ParseException p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(20, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  private void try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(20, e0);
    if (lk == 0)
    {
      int b0A = b0; int e0A = e0; int l1A = l1;
      int b1A = b1; int e1A = e1; int l2A = l2;
      int b2A = b2; int e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(20, e0A, -1);
        lk = -3;
      }
      catch (ParseException p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(20, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  private void parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    consume(142);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  private void try_AnyFunctionTest()
  {
    consumeT(142);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    consume(142);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(229);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    consume(37);                    // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consume(83);                    // 'as'
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  private void try_TypedFunctionTest()
  {
    consumeT(142);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(229);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_SequenceType();
      }
    }
    consumeT(37);                   // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consumeT(83);                   // 'as'
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SequenceType();
  }

  private void parse_MapTest()
  {
    eventHandler.startNonterminal("MapTest", e0);
    switch (l1)
    {
    case 171:                       // 'map'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(21, e0);
    if (lk == 0)
    {
      int b0A = b0; int e0A = e0; int l1A = l1;
      int b1A = b1; int e1A = e1; int l2A = l2;
      int b2A = b2; int e2A = e2;
      try
      {
        try_AnyMapTest();
        lk = -1;
      }
      catch (ParseException p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(21, e0, lk);
    }
    switch (lk)
    {
    case -1:
      parse_AnyMapTest();
      break;
    default:
      parse_TypedMapTest();
    }
    eventHandler.endNonterminal("MapTest", e0);
  }

  private void try_MapTest()
  {
    switch (l1)
    {
    case 171:                       // 'map'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(21, e0);
    if (lk == 0)
    {
      int b0A = b0; int e0A = e0; int l1A = l1;
      int b1A = b1; int e1A = e1; int l2A = l2;
      int b2A = b2; int e2A = e2;
      try
      {
        try_AnyMapTest();
        memoize(21, e0A, -1);
        lk = -3;
      }
      catch (ParseException p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(21, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyMapTest();
      break;
    case -3:
      break;
    default:
      try_TypedMapTest();
    }
  }

  private void parse_AnyMapTest()
  {
    eventHandler.startNonterminal("AnyMapTest", e0);
    consume(171);                   // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyMapTest", e0);
  }

  private void try_AnyMapTest()
  {
    consumeT(171);                  // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_TypedMapTest()
  {
    eventHandler.startNonterminal("TypedMapTest", e0);
    consume(171);                   // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_AtomicOrUnionType();
    lookahead1W(27);                // S^WS | '(:' | ','
    consume(40);                    // ','
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TypedMapTest", e0);
  }

  private void try_TypedMapTest()
  {
    consumeT(171);                  // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_AtomicOrUnionType();
    lookahead1W(27);                // S^WS | '(:' | ','
    consumeT(40);                   // ','
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_ArrayTest()
  {
    eventHandler.startNonterminal("ArrayTest", e0);
    switch (l1)
    {
    case 82:                        // 'array'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(22, e0);
    if (lk == 0)
    {
      int b0A = b0; int e0A = e0; int l1A = l1;
      int b1A = b1; int e1A = e1; int l2A = l2;
      int b2A = b2; int e2A = e2;
      try
      {
        try_AnyArrayTest();
        lk = -1;
      }
      catch (ParseException p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(22, e0, lk);
    }
    switch (lk)
    {
    case -1:
      parse_AnyArrayTest();
      break;
    default:
      parse_TypedArrayTest();
    }
    eventHandler.endNonterminal("ArrayTest", e0);
  }

  private void try_ArrayTest()
  {
    switch (l1)
    {
    case 82:                        // 'array'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(22, e0);
    if (lk == 0)
    {
      int b0A = b0; int e0A = e0; int l1A = l1;
      int b1A = b1; int e1A = e1; int l2A = l2;
      int b2A = b2; int e2A = e2;
      try
      {
        try_AnyArrayTest();
        memoize(22, e0A, -1);
        lk = -3;
      }
      catch (ParseException p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(22, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyArrayTest();
      break;
    case -3:
      break;
    default:
      try_TypedArrayTest();
    }
  }

  private void parse_AnyArrayTest()
  {
    eventHandler.startNonterminal("AnyArrayTest", e0);
    consume(82);                    // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyArrayTest", e0);
  }

  private void try_AnyArrayTest()
  {
    consumeT(82);                   // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_TypedArrayTest()
  {
    eventHandler.startNonterminal("TypedArrayTest", e0);
    consume(82);                    // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TypedArrayTest", e0);
  }

  private void try_TypedArrayTest()
  {
    consumeT(82);                   // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    consume(34);                    // '('
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  private void try_ParenthesizedItemType()
  {
    consumeT(34);                   // '('
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_URILiteral()
  {
    eventHandler.startNonterminal("URILiteral", e0);
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("URILiteral", e0);
  }

  private void try_URILiteral()
  {
    consumeT(4);                    // StringLiteral
  }

  private void parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(220);                // URIQualifiedName | QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consume(5);                   // URIQualifiedName
      break;
    default:
      parse_QName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  private void try_EQName()
  {
    lookahead1(220);                // URIQualifiedName | QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consumeT(5);                  // URIQualifiedName
      break;
    default:
      try_QName();
    }
  }

  private void parse_FunctionEQName()
  {
    eventHandler.startNonterminal("FunctionEQName", e0);
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consume(5);                   // URIQualifiedName
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("FunctionEQName", e0);
  }

  private void try_FunctionEQName()
  {
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consumeT(5);                  // URIQualifiedName
      break;
    default:
      try_FunctionName();
    }
  }

  private void parse_QName()
  {
    eventHandler.startNonterminal("QName", e0);
    lookahead1(218);                // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 86:                        // 'attribute'
      consume(86);                  // 'attribute'
      break;
    case 97:                        // 'comment'
      consume(97);                  // 'comment'
      break;
    case 119:                       // 'document-node'
      consume(119);                 // 'document-node'
      break;
    case 120:                       // 'element'
      consume(120);                 // 'element'
      break;
    case 123:                       // 'empty-sequence'
      consume(123);                 // 'empty-sequence'
      break;
    case 142:                       // 'function'
      consume(142);                 // 'function'
      break;
    case 149:                       // 'if'
      consume(149);                 // 'if'
      break;
    case 161:                       // 'item'
      consume(161);                 // 'item'
      break;
    case 178:                       // 'namespace-node'
      consume(178);                 // 'namespace-node'
      break;
    case 184:                       // 'node'
      consume(184);                 // 'node'
      break;
    case 206:                       // 'processing-instruction'
      consume(206);                 // 'processing-instruction'
      break;
    case 215:                       // 'schema-attribute'
      consume(215);                 // 'schema-attribute'
      break;
    case 216:                       // 'schema-element'
      consume(216);                 // 'schema-element'
      break;
    case 231:                       // 'switch'
      consume(231);                 // 'switch'
      break;
    case 232:                       // 'text'
      consume(232);                 // 'text'
      break;
    case 242:                       // 'typeswitch'
      consume(242);                 // 'typeswitch'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("QName", e0);
  }

  private void try_QName()
  {
    lookahead1(218);                // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 86:                        // 'attribute'
      consumeT(86);                 // 'attribute'
      break;
    case 97:                        // 'comment'
      consumeT(97);                 // 'comment'
      break;
    case 119:                       // 'document-node'
      consumeT(119);                // 'document-node'
      break;
    case 120:                       // 'element'
      consumeT(120);                // 'element'
      break;
    case 123:                       // 'empty-sequence'
      consumeT(123);                // 'empty-sequence'
      break;
    case 142:                       // 'function'
      consumeT(142);                // 'function'
      break;
    case 149:                       // 'if'
      consumeT(149);                // 'if'
      break;
    case 161:                       // 'item'
      consumeT(161);                // 'item'
      break;
    case 178:                       // 'namespace-node'
      consumeT(178);                // 'namespace-node'
      break;
    case 184:                       // 'node'
      consumeT(184);                // 'node'
      break;
    case 206:                       // 'processing-instruction'
      consumeT(206);                // 'processing-instruction'
      break;
    case 215:                       // 'schema-attribute'
      consumeT(215);                // 'schema-attribute'
      break;
    case 216:                       // 'schema-element'
      consumeT(216);                // 'schema-element'
      break;
    case 231:                       // 'switch'
      consumeT(231);                // 'switch'
      break;
    case 232:                       // 'text'
      consumeT(232);                // 'text'
      break;
    case 242:                       // 'typeswitch'
      consumeT(242);                // 'typeswitch'
      break;
    default:
      try_FunctionName();
    }
  }

  private void parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 15:                        // QName^Token
      consume(15);                  // QName^Token
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consume(79);                  // 'ancestor-or-self'
      break;
    case 80:                        // 'and'
      consume(80);                  // 'and'
      break;
    case 83:                        // 'as'
      consume(83);                  // 'as'
      break;
    case 84:                        // 'ascending'
      consume(84);                  // 'ascending'
      break;
    case 85:                        // 'at'
      consume(85);                  // 'at'
      break;
    case 91:                        // 'case'
      consume(91);                  // 'case'
      break;
    case 92:                        // 'cast'
      consume(92);                  // 'cast'
      break;
    case 93:                        // 'castable'
      consume(93);                  // 'castable'
      break;
    case 95:                        // 'child'
      consume(95);                  // 'child'
      break;
    case 96:                        // 'collation'
      consume(96);                  // 'collation'
      break;
    case 102:                       // 'copy'
      consume(102);                 // 'copy'
      break;
    case 104:                       // 'count'
      consume(104);                 // 'count'
      break;
    case 107:                       // 'declare'
      consume(107);                 // 'declare'
      break;
    case 108:                       // 'default'
      consume(108);                 // 'default'
      break;
    case 109:                       // 'delete'
      consume(109);                 // 'delete'
      break;
    case 110:                       // 'descendant'
      consume(110);                 // 'descendant'
      break;
    case 111:                       // 'descendant-or-self'
      consume(111);                 // 'descendant-or-self'
      break;
    case 112:                       // 'descending'
      consume(112);                 // 'descending'
      break;
    case 117:                       // 'div'
      consume(117);                 // 'div'
      break;
    case 118:                       // 'document'
      consume(118);                 // 'document'
      break;
    case 121:                       // 'else'
      consume(121);                 // 'else'
      break;
    case 122:                       // 'empty'
      consume(122);                 // 'empty'
      break;
    case 125:                       // 'end'
      consume(125);                 // 'end'
      break;
    case 127:                       // 'eq'
      consume(127);                 // 'eq'
      break;
    case 128:                       // 'every'
      consume(128);                 // 'every'
      break;
    case 130:                       // 'except'
      consume(130);                 // 'except'
      break;
    case 134:                       // 'following'
      consume(134);                 // 'following'
      break;
    case 135:                       // 'following-sibling'
      consume(135);                 // 'following-sibling'
      break;
    case 136:                       // 'for'
      consume(136);                 // 'for'
      break;
    case 143:                       // 'ge'
      consume(143);                 // 'ge'
      break;
    case 145:                       // 'group'
      consume(145);                 // 'group'
      break;
    case 147:                       // 'gt'
      consume(147);                 // 'gt'
      break;
    case 148:                       // 'idiv'
      consume(148);                 // 'idiv'
      break;
    case 150:                       // 'import'
      consume(150);                 // 'import'
      break;
    case 155:                       // 'insert'
      consume(155);                 // 'insert'
      break;
    case 156:                       // 'instance'
      consume(156);                 // 'instance'
      break;
    case 157:                       // 'intersect'
      consume(157);                 // 'intersect'
      break;
    case 159:                       // 'invoke'
      consume(159);                 // 'invoke'
      break;
    case 160:                       // 'is'
      consume(160);                 // 'is'
      break;
    case 165:                       // 'le'
      consume(165);                 // 'le'
      break;
    case 167:                       // 'let'
      consume(167);                 // 'let'
      break;
    case 170:                       // 'lt'
      consume(170);                 // 'lt'
      break;
    case 173:                       // 'mod'
      consume(173);                 // 'mod'
      break;
    case 175:                       // 'module'
      consume(175);                 // 'module'
      break;
    case 174:                       // 'modify'
      consume(174);                 // 'modify'
      break;
    case 177:                       // 'namespace'
      consume(177);                 // 'namespace'
      break;
    case 179:                       // 'ne'
      consume(179);                 // 'ne'
      break;
    case 189:                       // 'only'
      consume(189);                 // 'only'
      break;
    case 191:                       // 'or'
      consume(191);                 // 'or'
      break;
    case 192:                       // 'order'
      consume(192);                 // 'order'
      break;
    case 193:                       // 'ordered'
      consume(193);                 // 'ordered'
      break;
    case 197:                       // 'parent'
      consume(197);                 // 'parent'
      break;
    case 202:                       // 'preceding'
      consume(202);                 // 'preceding'
      break;
    case 203:                       // 'preceding-sibling'
      consume(203);                 // 'preceding-sibling'
      break;
    case 208:                       // 'rename'
      consume(208);                 // 'rename'
      break;
    case 209:                       // 'replace'
      consume(209);                 // 'replace'
      break;
    case 210:                       // 'return'
      consume(210);                 // 'return'
      break;
    case 213:                       // 'satisfies'
      consume(213);                 // 'satisfies'
      break;
    case 218:                       // 'self'
      consume(218);                 // 'self'
      break;
    case 224:                       // 'some'
      consume(224);                 // 'some'
      break;
    case 225:                       // 'stable'
      consume(225);                 // 'stable'
      break;
    case 226:                       // 'start'
      consume(226);                 // 'start'
      break;
    case 236:                       // 'to'
      consume(236);                 // 'to'
      break;
    case 237:                       // 'transform'
      consume(237);                 // 'transform'
      break;
    case 238:                       // 'treat'
      consume(238);                 // 'treat'
      break;
    case 239:                       // 'try'
      consume(239);                 // 'try'
      break;
    case 243:                       // 'union'
      consume(243);                 // 'union'
      break;
    case 244:                       // 'unordered'
      consume(244);                 // 'unordered'
      break;
    case 245:                       // 'update'
      consume(245);                 // 'update'
      break;
    case 249:                       // 'validate'
      consume(249);                 // 'validate'
      break;
    case 255:                       // 'where'
      consume(255);                 // 'where'
      break;
    case 258:                       // 'with'
      consume(258);                 // 'with'
      break;
    default:
      consume(262);                 // 'xquery'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  private void try_FunctionName()
  {
    switch (l1)
    {
    case 15:                        // QName^Token
      consumeT(15);                 // QName^Token
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consumeT(79);                 // 'ancestor-or-self'
      break;
    case 80:                        // 'and'
      consumeT(80);                 // 'and'
      break;
    case 83:                        // 'as'
      consumeT(83);                 // 'as'
      break;
    case 84:                        // 'ascending'
      consumeT(84);                 // 'ascending'
      break;
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      break;
    case 91:                        // 'case'
      consumeT(91);                 // 'case'
      break;
    case 92:                        // 'cast'
      consumeT(92);                 // 'cast'
      break;
    case 93:                        // 'castable'
      consumeT(93);                 // 'castable'
      break;
    case 95:                        // 'child'
      consumeT(95);                 // 'child'
      break;
    case 96:                        // 'collation'
      consumeT(96);                 // 'collation'
      break;
    case 102:                       // 'copy'
      consumeT(102);                // 'copy'
      break;
    case 104:                       // 'count'
      consumeT(104);                // 'count'
      break;
    case 107:                       // 'declare'
      consumeT(107);                // 'declare'
      break;
    case 108:                       // 'default'
      consumeT(108);                // 'default'
      break;
    case 109:                       // 'delete'
      consumeT(109);                // 'delete'
      break;
    case 110:                       // 'descendant'
      consumeT(110);                // 'descendant'
      break;
    case 111:                       // 'descendant-or-self'
      consumeT(111);                // 'descendant-or-self'
      break;
    case 112:                       // 'descending'
      consumeT(112);                // 'descending'
      break;
    case 117:                       // 'div'
      consumeT(117);                // 'div'
      break;
    case 118:                       // 'document'
      consumeT(118);                // 'document'
      break;
    case 121:                       // 'else'
      consumeT(121);                // 'else'
      break;
    case 122:                       // 'empty'
      consumeT(122);                // 'empty'
      break;
    case 125:                       // 'end'
      consumeT(125);                // 'end'
      break;
    case 127:                       // 'eq'
      consumeT(127);                // 'eq'
      break;
    case 128:                       // 'every'
      consumeT(128);                // 'every'
      break;
    case 130:                       // 'except'
      consumeT(130);                // 'except'
      break;
    case 134:                       // 'following'
      consumeT(134);                // 'following'
      break;
    case 135:                       // 'following-sibling'
      consumeT(135);                // 'following-sibling'
      break;
    case 136:                       // 'for'
      consumeT(136);                // 'for'
      break;
    case 143:                       // 'ge'
      consumeT(143);                // 'ge'
      break;
    case 145:                       // 'group'
      consumeT(145);                // 'group'
      break;
    case 147:                       // 'gt'
      consumeT(147);                // 'gt'
      break;
    case 148:                       // 'idiv'
      consumeT(148);                // 'idiv'
      break;
    case 150:                       // 'import'
      consumeT(150);                // 'import'
      break;
    case 155:                       // 'insert'
      consumeT(155);                // 'insert'
      break;
    case 156:                       // 'instance'
      consumeT(156);                // 'instance'
      break;
    case 157:                       // 'intersect'
      consumeT(157);                // 'intersect'
      break;
    case 159:                       // 'invoke'
      consumeT(159);                // 'invoke'
      break;
    case 160:                       // 'is'
      consumeT(160);                // 'is'
      break;
    case 165:                       // 'le'
      consumeT(165);                // 'le'
      break;
    case 167:                       // 'let'
      consumeT(167);                // 'let'
      break;
    case 170:                       // 'lt'
      consumeT(170);                // 'lt'
      break;
    case 173:                       // 'mod'
      consumeT(173);                // 'mod'
      break;
    case 175:                       // 'module'
      consumeT(175);                // 'module'
      break;
    case 174:                       // 'modify'
      consumeT(174);                // 'modify'
      break;
    case 177:                       // 'namespace'
      consumeT(177);                // 'namespace'
      break;
    case 179:                       // 'ne'
      consumeT(179);                // 'ne'
      break;
    case 189:                       // 'only'
      consumeT(189);                // 'only'
      break;
    case 191:                       // 'or'
      consumeT(191);                // 'or'
      break;
    case 192:                       // 'order'
      consumeT(192);                // 'order'
      break;
    case 193:                       // 'ordered'
      consumeT(193);                // 'ordered'
      break;
    case 197:                       // 'parent'
      consumeT(197);                // 'parent'
      break;
    case 202:                       // 'preceding'
      consumeT(202);                // 'preceding'
      break;
    case 203:                       // 'preceding-sibling'
      consumeT(203);                // 'preceding-sibling'
      break;
    case 208:                       // 'rename'
      consumeT(208);                // 'rename'
      break;
    case 209:                       // 'replace'
      consumeT(209);                // 'replace'
      break;
    case 210:                       // 'return'
      consumeT(210);                // 'return'
      break;
    case 213:                       // 'satisfies'
      consumeT(213);                // 'satisfies'
      break;
    case 218:                       // 'self'
      consumeT(218);                // 'self'
      break;
    case 224:                       // 'some'
      consumeT(224);                // 'some'
      break;
    case 225:                       // 'stable'
      consumeT(225);                // 'stable'
      break;
    case 226:                       // 'start'
      consumeT(226);                // 'start'
      break;
    case 236:                       // 'to'
      consumeT(236);                // 'to'
      break;
    case 237:                       // 'transform'
      consumeT(237);                // 'transform'
      break;
    case 238:                       // 'treat'
      consumeT(238);                // 'treat'
      break;
    case 239:                       // 'try'
      consumeT(239);                // 'try'
      break;
    case 243:                       // 'union'
      consumeT(243);                // 'union'
      break;
    case 244:                       // 'unordered'
      consumeT(244);                // 'unordered'
      break;
    case 245:                       // 'update'
      consumeT(245);                // 'update'
      break;
    case 249:                       // 'validate'
      consumeT(249);                // 'validate'
      break;
    case 255:                       // 'where'
      consumeT(255);                // 'where'
      break;
    case 258:                       // 'with'
      consumeT(258);                // 'with'
      break;
    default:
      consumeT(262);                // 'xquery'
    }
  }

  private void parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(64);                // S^WS | '(:' | 'revalidation'
    consume(211);                   // 'revalidation'
    lookahead1W(142);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 229:                       // 'strict'
      consume(229);                 // 'strict'
      break;
    case 164:                       // 'lax'
      consume(164);                 // 'lax'
      break;
    default:
      consume(222);                 // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  private void parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 75:                        // 'after'
      consume(75);                  // 'after'
      break;
    case 88:                        // 'before'
      consume(88);                  // 'before'
      break;
    default:
      if (l1 == 83)                 // 'as'
      {
        consume(83);                // 'as'
        lookahead1W(114);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 133:                   // 'first'
          consume(133);             // 'first'
          break;
        default:
          consume(163);             // 'last'
        }
      }
      lookahead1W(53);              // S^WS | '(:' | 'into'
      consume(158);                 // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  private void try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 75:                        // 'after'
      consumeT(75);                 // 'after'
      break;
    case 88:                        // 'before'
      consumeT(88);                 // 'before'
      break;
    default:
      if (l1 == 83)                 // 'as'
      {
        consumeT(83);               // 'as'
        lookahead1W(114);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 133:                   // 'first'
          consumeT(133);            // 'first'
          break;
        default:
          consumeT(163);            // 'last'
        }
      }
      lookahead1W(53);              // S^WS | '(:' | 'into'
      consumeT(158);                // 'into'
    }
  }

  private void parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    consume(155);                   // 'insert'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consume(184);                 // 'node'
      break;
    default:
      consume(185);                 // 'nodes'
    }
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SourceExpr();
    lookahead1W(147);               // S^WS | '(:' | 'after' | 'as' | 'before' | 'into'
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  private void try_InsertExpr()
  {
    consumeT(155);                  // 'insert'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consumeT(184);                // 'node'
      break;
    default:
      consumeT(185);                // 'nodes'
    }
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_SourceExpr();
    lookahead1W(147);               // S^WS | '(:' | 'after' | 'as' | 'before' | 'into'
    try_InsertExprTargetChoice();
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_TargetExpr();
  }

  private void parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    consume(109);                   // 'delete'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consume(184);                 // 'node'
      break;
    default:
      consume(185);                 // 'nodes'
    }
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  private void try_DeleteExpr()
  {
    consumeT(109);                  // 'delete'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consumeT(184);                // 'node'
      break;
    default:
      consumeT(185);                // 'nodes'
    }
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_TargetExpr();
  }

  private void parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    consume(209);                   // 'replace'
    lookahead1W(124);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 250)                  // 'value'
    {
      consume(250);                 // 'value'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consume(188);                 // 'of'
    }
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consume(184);                   // 'node'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(78);                // S^WS | '(:' | 'with'
    consume(258);                   // 'with'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  private void try_ReplaceExpr()
  {
    consumeT(209);                  // 'replace'
    lookahead1W(124);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 250)                  // 'value'
    {
      consumeT(250);                // 'value'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consumeT(188);                // 'of'
    }
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consumeT(184);                  // 'node'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_TargetExpr();
    lookahead1W(78);                // S^WS | '(:' | 'with'
    consumeT(258);                  // 'with'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    consume(208);                   // 'rename'
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consume(184);                   // 'node'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consume(83);                    // 'as'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  private void try_RenameExpr()
  {
    consumeT(208);                  // 'rename'
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consumeT(184);                  // 'node'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_TargetExpr();
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consumeT(83);                   // 'as'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_NewNameExpr();
  }

  private void parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  private void try_SourceExpr()
  {
    try_ExprSingle();
  }

  private void parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  private void try_TargetExpr()
  {
    try_ExprSingle();
  }

  private void parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  private void try_NewNameExpr()
  {
    try_ExprSingle();
  }

  private void parse_UpdatingFunctionCall()
  {
    eventHandler.startNonterminal("UpdatingFunctionCall", e0);
    consume(159);                   // 'invoke'
    lookahead1W(73);                // S^WS | '(:' | 'updating'
    consume(246);                   // 'updating'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_PrimaryExpr();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("UpdatingFunctionCall", e0);
  }

  private void try_UpdatingFunctionCall()
  {
    consumeT(159);                  // 'invoke'
    lookahead1W(73);                // S^WS | '(:' | 'updating'
    consumeT(246);                  // 'updating'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_PrimaryExpr();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(237);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ExprSingle();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_ExprSingle();
      }
    }
    consumeT(37);                   // ')'
  }

  private void parse_CopyModifyExpr()
  {
    eventHandler.startNonterminal("CopyModifyExpr", e0);
    consume(102);                   // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_CopyModifySpec();
    for (;;)
    {
      lookahead1W(95);              // S^WS | '(:' | ',' | 'modify'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_CopyModifySpec();
    }
    consume(174);                   // 'modify'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consume(210);                   // 'return'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CopyModifyExpr", e0);
  }

  private void try_CopyModifyExpr()
  {
    consumeT(102);                  // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_CopyModifySpec();
    for (;;)
    {
      lookahead1W(95);              // S^WS | '(:' | ',' | 'modify'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_CopyModifySpec();
    }
    consumeT(174);                  // 'modify'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consumeT(210);                  // 'return'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_CopyModifySpec()
  {
    eventHandler.startNonterminal("CopyModifySpec", e0);
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consume(51);                    // ':='
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CopyModifySpec", e0);
  }

  private void try_CopyModifySpec()
  {
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consumeT(51);                   // ':='
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(199);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'ordered' | 'paragraphs' | 'return' |
                                    // 'same' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 85                  // 'at'
       && l1 != 114                 // 'different'
       && l1 != 116                 // 'distance'
       && l1 != 126                 // 'entire'
       && l1 != 193                 // 'ordered'
       && l1 != 212                 // 'same'
       && l1 != 257)                // 'window'
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  private void try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(199);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'ordered' | 'paragraphs' | 'return' |
                                    // 'same' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 85                  // 'at'
       && l1 != 114                 // 'different'
       && l1 != 116                 // 'distance'
       && l1 != 126                 // 'entire'
       && l1 != 193                 // 'ordered'
       && l1 != 212                 // 'same'
       && l1 != 257)                // 'window'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  private void parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    consume(253);                   // 'weight'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  private void try_FTWeight()
  {
    consumeT(253);                  // 'weight'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  private void parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 141)                // 'ftor'
      {
        break;
      }
      consume(141);                 // 'ftor'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  private void try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 141)                // 'ftor'
      {
        break;
      }
      consumeT(141);                // 'ftor'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  private void parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 139)                // 'ftand'
      {
        break;
      }
      consume(139);                 // 'ftand'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  private void try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 139)                // 'ftand'
      {
        break;
      }
      consumeT(139);                // 'ftand'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  private void parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' |
                                    // 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 186)                // 'not'
      {
        break;
      }
      consume(186);                 // 'not'
      lookahead1W(52);              // S^WS | '(:' | 'in'
      consume(151);                 // 'in'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  private void try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' |
                                    // 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 186)                // 'not'
      {
        break;
      }
      consumeT(186);                // 'not'
      lookahead1W(52);              // S^WS | '(:' | 'in'
      consumeT(151);                // 'in'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  private void parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 140)                  // 'ftnot'
    {
      consume(140);                 // 'ftnot'
    }
    lookahead1W(145);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  private void try_FTUnaryNot()
  {
    if (l1 == 140)                  // 'ftnot'
    {
      consumeT(140);                // 'ftnot'
    }
    lookahead1W(145);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  private void parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(213);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    if (l1 == 248)                  // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 253)                  // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  private void try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(213);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    if (l1 == 248)                  // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 253)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  private void parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 34:                        // '('
      consume(34);                  // '('
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      consume(37);                  // ')'
      break;
    case 35:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 == 187)                // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  private void try_FTPrimary()
  {
    switch (l1)
    {
    case 34:                        // '('
      consumeT(34);                 // '('
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      consumeT(37);                 // ')'
      break;
    case 35:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 == 187)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  private void parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(219);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'different' | 'distance' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'paragraphs' | 'phrase' | 'return' |
                                    // 'same' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'using' | 'weight' | 'where' | 'window' |
                                    // 'with' | 'without' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 76                    // 'all'
     || l1 == 81                    // 'any'
     || l1 == 201)                  // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  private void try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(219);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'different' | 'distance' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'paragraphs' | 'phrase' | 'return' |
                                    // 'same' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'using' | 'weight' | 'where' | 'window' |
                                    // 'with' | 'without' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 76                    // 'all'
     || l1 == 81                    // 'any'
     || l1 == 201)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  private void parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 4:                         // StringLiteral
      consume(4);                   // StringLiteral
      break;
    default:
      consume(264);                 // '{'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  private void try_FTWordsValue()
  {
    switch (l1)
    {
    case 4:                         // StringLiteral
      consumeT(4);                  // StringLiteral
      break;
    default:
      consumeT(264);                // '{'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
    }
  }

  private void parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(264);                   // '{'
    lookahead1W(157);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  private void try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(264);                  // '{'
    lookahead1W(157);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 268)                  // '}'
    {
      try_FTSelection();
    }
    consumeT(268);                  // '}'
  }

  private void parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 81:                        // 'any'
      consume(81);                  // 'any'
      lookahead1W(216);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'word' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 == 260)                // 'word'
      {
        consume(260);               // 'word'
      }
      break;
    case 76:                        // 'all'
      consume(76);                  // 'all'
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 261:                     // 'words'
        lookahead2W(214);           // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
        break;
      default:
        lk = l1;
      }
      if (lk == 13061               // 'words' EOF
       || lk == 14085               // 'words' '!='
       || lk == 19205               // 'words' ')'
       || lk == 19717               // 'words' '*'
       || lk == 20229               // 'words' '+'
       || lk == 20741               // 'words' ','
       || lk == 21253               // 'words' '-'
       || lk == 24837               // 'words' ':'
       || lk == 26885               // 'words' ';'
       || lk == 27397               // 'words' '<'
       || lk == 29445               // 'words' '<<'
       || lk == 29957               // 'words' '<='
       || lk == 30981               // 'words' '='
       || lk == 32005               // 'words' '>'
       || lk == 32517               // 'words' '>='
       || lk == 33029               // 'words' '>>'
       || lk == 36101               // 'words' ']'
       || lk == 38661               // 'words' 'after'
       || lk == 41221               // 'words' 'and'
       || lk == 42757               // 'words' 'as'
       || lk == 43269               // 'words' 'ascending'
       || lk == 43781               // 'words' 'at'
       || lk == 45317               // 'words' 'before'
       || lk == 46853               // 'words' 'case'
       || lk == 47365               // 'words' 'cast'
       || lk == 47877               // 'words' 'castable'
       || lk == 49413               // 'words' 'collation'
       || lk == 50949               // 'words' 'contains'
       || lk == 53509               // 'words' 'count'
       || lk == 55557               // 'words' 'default'
       || lk == 57605               // 'words' 'descending'
       || lk == 58629               // 'words' 'different'
       || lk == 59653               // 'words' 'distance'
       || lk == 60165               // 'words' 'div'
       || lk == 62213               // 'words' 'else'
       || lk == 62725               // 'words' 'empty'
       || lk == 64261               // 'words' 'end'
       || lk == 64773               // 'words' 'entire'
       || lk == 65285               // 'words' 'eq'
       || lk == 66821               // 'words' 'except'
       || lk == 69893               // 'words' 'for'
       || lk == 73477               // 'words' 'ge'
       || lk == 74501               // 'words' 'group'
       || lk == 75525               // 'words' 'gt'
       || lk == 76037               // 'words' 'idiv'
       || lk == 80133               // 'words' 'instance'
       || lk == 80645               // 'words' 'intersect'
       || lk == 81157               // 'words' 'into'
       || lk == 82181               // 'words' 'is'
       || lk == 84741               // 'words' 'le'
       || lk == 85765               // 'words' 'let'
       || lk == 87301               // 'words' 'lt'
       || lk == 88837               // 'words' 'mod'
       || lk == 89349               // 'words' 'modify'
       || lk == 91909               // 'words' 'ne'
       || lk == 97029               // 'words' 'only'
       || lk == 98053               // 'words' 'or'
       || lk == 98565               // 'words' 'order'
       || lk == 99077               // 'words' 'ordered'
       || lk == 100613              // 'words' 'paragraphs'
       || lk == 107781              // 'words' 'return'
       || lk == 108805              // 'words' 'same'
       || lk == 109317              // 'words' 'satisfies'
       || lk == 113413              // 'words' 'sentences'
       || lk == 115461              // 'words' 'stable'
       || lk == 115973              // 'words' 'start'
       || lk == 120581              // 'words' 'times'
       || lk == 121093              // 'words' 'to'
       || lk == 121605              // 'words' 'transform'
       || lk == 122117              // 'words' 'treat'
       || lk == 124677              // 'words' 'union'
       || lk == 130821              // 'words' 'where'
       || lk == 131845              // 'words' 'window'
       || lk == 132357              // 'words' 'with'
       || lk == 132869              // 'words' 'without'
       || lk == 133893              // 'words' 'words'
       || lk == 136453              // 'words' '|'
       || lk == 136965              // 'words' '||'
       || lk == 137477              // 'words' '}'
       || lk == 137989)             // 'words' '}`'
      {
        lk = memoized(23, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(261);          // 'words'
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(23, e0, lk);
        }
      }
      if (lk == -1
       || lk == 71429               // 'words' 'ftand'
       || lk == 72453               // 'words' 'ftor'
       || lk == 95493               // 'words' 'not'
       || lk == 96005               // 'words' 'occurs'
       || lk == 127237              // 'words' 'using'
       || lk == 129797)             // 'words' 'weight'
      {
        consume(261);               // 'words'
      }
      break;
    default:
      consume(201);                 // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  private void try_FTAnyallOption()
  {
    switch (l1)
    {
    case 81:                        // 'any'
      consumeT(81);                 // 'any'
      lookahead1W(216);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'word' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 == 260)                // 'word'
      {
        consumeT(260);              // 'word'
      }
      break;
    case 76:                        // 'all'
      consumeT(76);                 // 'all'
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 261:                     // 'words'
        lookahead2W(214);           // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
        break;
      default:
        lk = l1;
      }
      if (lk == 13061               // 'words' EOF
       || lk == 14085               // 'words' '!='
       || lk == 19205               // 'words' ')'
       || lk == 19717               // 'words' '*'
       || lk == 20229               // 'words' '+'
       || lk == 20741               // 'words' ','
       || lk == 21253               // 'words' '-'
       || lk == 24837               // 'words' ':'
       || lk == 26885               // 'words' ';'
       || lk == 27397               // 'words' '<'
       || lk == 29445               // 'words' '<<'
       || lk == 29957               // 'words' '<='
       || lk == 30981               // 'words' '='
       || lk == 32005               // 'words' '>'
       || lk == 32517               // 'words' '>='
       || lk == 33029               // 'words' '>>'
       || lk == 36101               // 'words' ']'
       || lk == 38661               // 'words' 'after'
       || lk == 41221               // 'words' 'and'
       || lk == 42757               // 'words' 'as'
       || lk == 43269               // 'words' 'ascending'
       || lk == 43781               // 'words' 'at'
       || lk == 45317               // 'words' 'before'
       || lk == 46853               // 'words' 'case'
       || lk == 47365               // 'words' 'cast'
       || lk == 47877               // 'words' 'castable'
       || lk == 49413               // 'words' 'collation'
       || lk == 50949               // 'words' 'contains'
       || lk == 53509               // 'words' 'count'
       || lk == 55557               // 'words' 'default'
       || lk == 57605               // 'words' 'descending'
       || lk == 58629               // 'words' 'different'
       || lk == 59653               // 'words' 'distance'
       || lk == 60165               // 'words' 'div'
       || lk == 62213               // 'words' 'else'
       || lk == 62725               // 'words' 'empty'
       || lk == 64261               // 'words' 'end'
       || lk == 64773               // 'words' 'entire'
       || lk == 65285               // 'words' 'eq'
       || lk == 66821               // 'words' 'except'
       || lk == 69893               // 'words' 'for'
       || lk == 73477               // 'words' 'ge'
       || lk == 74501               // 'words' 'group'
       || lk == 75525               // 'words' 'gt'
       || lk == 76037               // 'words' 'idiv'
       || lk == 80133               // 'words' 'instance'
       || lk == 80645               // 'words' 'intersect'
       || lk == 81157               // 'words' 'into'
       || lk == 82181               // 'words' 'is'
       || lk == 84741               // 'words' 'le'
       || lk == 85765               // 'words' 'let'
       || lk == 87301               // 'words' 'lt'
       || lk == 88837               // 'words' 'mod'
       || lk == 89349               // 'words' 'modify'
       || lk == 91909               // 'words' 'ne'
       || lk == 97029               // 'words' 'only'
       || lk == 98053               // 'words' 'or'
       || lk == 98565               // 'words' 'order'
       || lk == 99077               // 'words' 'ordered'
       || lk == 100613              // 'words' 'paragraphs'
       || lk == 107781              // 'words' 'return'
       || lk == 108805              // 'words' 'same'
       || lk == 109317              // 'words' 'satisfies'
       || lk == 113413              // 'words' 'sentences'
       || lk == 115461              // 'words' 'stable'
       || lk == 115973              // 'words' 'start'
       || lk == 120581              // 'words' 'times'
       || lk == 121093              // 'words' 'to'
       || lk == 121605              // 'words' 'transform'
       || lk == 122117              // 'words' 'treat'
       || lk == 124677              // 'words' 'union'
       || lk == 130821              // 'words' 'where'
       || lk == 131845              // 'words' 'window'
       || lk == 132357              // 'words' 'with'
       || lk == 132869              // 'words' 'without'
       || lk == 133893              // 'words' 'words'
       || lk == 136453              // 'words' '|'
       || lk == 136965              // 'words' '||'
       || lk == 137477              // 'words' '}'
       || lk == 137989)             // 'words' '}`'
      {
        lk = memoized(23, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(261);          // 'words'
            memoize(23, e0A, -1);
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(23, e0A, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1
       || lk == 71429               // 'words' 'ftand'
       || lk == 72453               // 'words' 'ftor'
       || lk == 95493               // 'words' 'not'
       || lk == 96005               // 'words' 'occurs'
       || lk == 127237              // 'words' 'using'
       || lk == 129797)             // 'words' 'weight'
      {
        consumeT(261);              // 'words'
      }
      break;
    default:
      consumeT(201);                // 'phrase'
    }
  }

  private void parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    consume(187);                   // 'occurs'
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    consume(235);                   // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  private void try_FTTimes()
  {
    consumeT(187);                  // 'occurs'
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    consumeT(235);                  // 'times'
  }

  private void parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 129:                       // 'exactly'
      consume(129);                 // 'exactly'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
      break;
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consume(166);               // 'least'
        lookahead1W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        consume(176);               // 'most'
        lookahead1W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      consume(137);                 // 'from'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
      consume(236);                 // 'to'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  private void try_FTRange()
  {
    switch (l1)
    {
    case 129:                       // 'exactly'
      consumeT(129);                // 'exactly'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AdditiveExpr();
      break;
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consumeT(166);              // 'least'
        lookahead1W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_AdditiveExpr();
        break;
      default:
        consumeT(176);              // 'most'
        lookahead1W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_AdditiveExpr();
      }
      break;
    default:
      consumeT(137);                // 'from'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AdditiveExpr();
      consumeT(236);                // 'to'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AdditiveExpr();
    }
  }

  private void parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 193:                       // 'ordered'
      parse_FTOrder();
      break;
    case 257:                       // 'window'
      parse_FTWindow();
      break;
    case 116:                       // 'distance'
      parse_FTDistance();
      break;
    case 114:                       // 'different'
    case 212:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  private void try_FTPosFilter()
  {
    switch (l1)
    {
    case 193:                       // 'ordered'
      try_FTOrder();
      break;
    case 257:                       // 'window'
      try_FTWindow();
      break;
    case 116:                       // 'distance'
      try_FTDistance();
      break;
    case 114:                       // 'different'
    case 212:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  private void parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    consume(193);                   // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  private void try_FTOrder()
  {
    consumeT(193);                  // 'ordered'
  }

  private void parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    consume(257);                   // 'window'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  private void try_FTWindow()
  {
    consumeT(257);                  // 'window'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_AdditiveExpr();
    try_FTUnit();
  }

  private void parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    consume(116);                   // 'distance'
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  private void try_FTDistance()
  {
    consumeT(116);                  // 'distance'
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  private void parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 261:                       // 'words'
      consume(261);                 // 'words'
      break;
    case 221:                       // 'sentences'
      consume(221);                 // 'sentences'
      break;
    default:
      consume(196);                 // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  private void try_FTUnit()
  {
    switch (l1)
    {
    case 261:                       // 'words'
      consumeT(261);                // 'words'
      break;
    case 221:                       // 'sentences'
      consumeT(221);                // 'sentences'
      break;
    default:
      consumeT(196);                // 'paragraphs'
    }
  }

  private void parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 212:                       // 'same'
      consume(212);                 // 'same'
      break;
    default:
      consume(114);                 // 'different'
    }
    lookahead1W(126);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  private void try_FTScope()
  {
    switch (l1)
    {
    case 212:                       // 'same'
      consumeT(212);                // 'same'
      break;
    default:
      consumeT(114);                // 'different'
    }
    lookahead1W(126);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  private void parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 220:                       // 'sentence'
      consume(220);                 // 'sentence'
      break;
    default:
      consume(195);                 // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  private void try_FTBigUnit()
  {
    switch (l1)
    {
    case 220:                       // 'sentence'
      consumeT(220);                // 'sentence'
      break;
    default:
      consumeT(195);                // 'paragraph'
    }
  }

  private void parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(112);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 226:                     // 'start'
        consume(226);               // 'start'
        break;
      default:
        consume(125);               // 'end'
      }
      break;
    default:
      consume(126);                 // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consume(100);                 // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  private void try_FTContent()
  {
    switch (l1)
    {
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(112);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 226:                     // 'start'
        consumeT(226);              // 'start'
        break;
      default:
        consumeT(125);              // 'end'
      }
      break;
    default:
      consumeT(126);                // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consumeT(100);                // 'content'
    }
  }

  private void parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      consume(248);                 // 'using'
      lookahead1W(170);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      whitespace();
      parse_FTMatchOption();
      lookahead1W(213);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 248)                // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  private void try_FTMatchOptions()
  {
    for (;;)
    {
      consumeT(248);                // 'using'
      lookahead1W(170);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      try_FTMatchOption();
      lookahead1W(213);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 248)                // 'using'
      {
        break;
      }
    }
  }

  private void parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    switch (l1)
    {
    case 181:                       // 'no'
      lookahead2W(152);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 162:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 256:                       // 'wildcards'
    case 131253:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 234:                       // 'thesaurus'
    case 119989:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 227:                       // 'stemming'
    case 116405:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 113:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 228:                       // 'stop'
    case 116917:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 190:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  private void try_FTMatchOption()
  {
    switch (l1)
    {
    case 181:                       // 'no'
      lookahead2W(152);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 162:                       // 'language'
      try_FTLanguageOption();
      break;
    case 256:                       // 'wildcards'
    case 131253:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 234:                       // 'thesaurus'
    case 119989:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 227:                       // 'stemming'
    case 116405:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 113:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 228:                       // 'stop'
    case 116917:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 190:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  private void parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 91:                        // 'case'
      consume(91);                  // 'case'
      lookahead1W(118);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 154:                     // 'insensitive'
        consume(154);               // 'insensitive'
        break;
      default:
        consume(219);               // 'sensitive'
      }
      break;
    case 169:                       // 'lowercase'
      consume(169);                 // 'lowercase'
      break;
    default:
      consume(247);                 // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  private void try_FTCaseOption()
  {
    switch (l1)
    {
    case 91:                        // 'case'
      consumeT(91);                 // 'case'
      lookahead1W(118);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 154:                     // 'insensitive'
        consumeT(154);              // 'insensitive'
        break;
      default:
        consumeT(219);              // 'sensitive'
      }
      break;
    case 169:                       // 'lowercase'
      consumeT(169);                // 'lowercase'
      break;
    default:
      consumeT(247);                // 'uppercase'
    }
  }

  private void parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    consume(113);                   // 'diacritics'
    lookahead1W(118);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 154:                       // 'insensitive'
      consume(154);                 // 'insensitive'
      break;
    default:
      consume(219);                 // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  private void try_FTDiacriticsOption()
  {
    consumeT(113);                  // 'diacritics'
    lookahead1W(118);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 154:                       // 'insensitive'
      consumeT(154);                // 'insensitive'
      break;
    default:
      consumeT(219);                // 'sensitive'
    }
  }

  private void parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 227:                       // 'stemming'
      consume(227);                 // 'stemming'
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(67);              // S^WS | '(:' | 'stemming'
      consume(227);                 // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  private void try_FTStemOption()
  {
    switch (l1)
    {
    case 227:                       // 'stemming'
      consumeT(227);                // 'stemming'
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(67);              // S^WS | '(:' | 'stemming'
      consumeT(227);                // 'stemming'
    }
  }

  private void parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 234:                       // 'thesaurus'
      consume(234);                 // 'thesaurus'
      lookahead1W(135);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 85:                      // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 108:                     // 'default'
        consume(108);               // 'default'
        break;
      default:
        consume(34);                // '('
        lookahead1W(105);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 85:                    // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          consume(108);             // 'default'
        }
        for (;;)
        {
          lookahead1W(91);          // S^WS | '(:' | ')' | ','
          if (l1 != 40)             // ','
          {
            break;
          }
          consume(40);              // ','
          lookahead1W(34);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        consume(37);                // ')'
      }
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(71);              // S^WS | '(:' | 'thesaurus'
      consume(234);                 // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  private void try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 234:                       // 'thesaurus'
      consumeT(234);                // 'thesaurus'
      lookahead1W(135);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 85:                      // 'at'
        try_FTThesaurusID();
        break;
      case 108:                     // 'default'
        consumeT(108);              // 'default'
        break;
      default:
        consumeT(34);               // '('
        lookahead1W(105);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 85:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          consumeT(108);            // 'default'
        }
        for (;;)
        {
          lookahead1W(91);          // S^WS | '(:' | ')' | ','
          if (l1 != 40)             // ','
          {
            break;
          }
          consumeT(40);             // ','
          lookahead1W(34);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        consumeT(37);               // ')'
      }
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(71);              // S^WS | '(:' | 'thesaurus'
      consumeT(234);                // 'thesaurus'
    }
  }

  private void parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    consume(85);                    // 'at'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(217);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'except' | 'for' | 'from' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'relationship' | 'return' | 'same' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' |
                                    // 'without' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 207)                  // 'relationship'
    {
      consume(207);                 // 'relationship'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
    }
    lookahead1W(215);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'except' | 'for' | 'from' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 85:                        // 'at'
      lookahead2W(150);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 129                   // 'exactly'
     || lk == 137                   // 'from'
     || lk == 85077                 // 'at' 'least'
     || lk == 90197)                // 'at' 'most'
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(55);              // S^WS | '(:' | 'levels'
      consume(168);                 // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  private void try_FTThesaurusID()
  {
    consumeT(85);                   // 'at'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
    lookahead1W(217);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'except' | 'for' | 'from' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'relationship' | 'return' | 'same' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' |
                                    // 'without' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 207)                  // 'relationship'
    {
      consumeT(207);                // 'relationship'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consumeT(4);                  // StringLiteral
    }
    lookahead1W(215);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'except' | 'for' | 'from' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 85:                        // 'at'
      lookahead2W(150);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 129                   // 'exactly'
     || lk == 137                   // 'from'
     || lk == 85077                 // 'at' 'least'
     || lk == 90197)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(55);              // S^WS | '(:' | 'levels'
      consumeT(168);                // 'levels'
    }
  }

  private void parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 129:                       // 'exactly'
      consume(129);                 // 'exactly'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(1);                   // IntegerLiteral
      break;
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consume(166);               // 'least'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consume(1);                 // IntegerLiteral
        break;
      default:
        consume(176);               // 'most'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consume(1);                 // IntegerLiteral
      }
      break;
    default:
      consume(137);                 // 'from'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(1);                   // IntegerLiteral
      lookahead1W(72);              // S^WS | '(:' | 'to'
      consume(236);                 // 'to'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(1);                   // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  private void try_FTLiteralRange()
  {
    switch (l1)
    {
    case 129:                       // 'exactly'
      consumeT(129);                // 'exactly'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(1);                  // IntegerLiteral
      break;
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consumeT(166);              // 'least'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consumeT(1);                // IntegerLiteral
        break;
      default:
        consumeT(176);              // 'most'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consumeT(1);                // IntegerLiteral
      }
      break;
    default:
      consumeT(137);                // 'from'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(1);                  // IntegerLiteral
      lookahead1W(72);              // S^WS | '(:' | 'to'
      consumeT(236);                // 'to'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(1);                  // IntegerLiteral
    }
  }

  private void parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 228:                       // 'stop'
      consume(228);                 // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consume(261);                 // 'words'
      lookahead1W(135);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 108:                     // 'default'
        consume(108);               // 'default'
        for (;;)
        {
          lookahead1W(213);         // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
          switch (l1)
          {
          case 130:                 // 'except'
          case 243:                 // 'union'
            lookahead2W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            break;
          default:
            lk = l1;
          }
          if (lk == 17538           // 'except' '('
           || lk == 17651           // 'union' '('
           || lk == 43650           // 'except' 'at'
           || lk == 43763)          // 'union' 'at'
          {
            lk = memoized(25, e0);
            if (lk == 0)
            {
              int b0A = b0; int e0A = e0; int l1A = l1;
              int b1A = b1; int e1A = e1; int l2A = l2;
              int b2A = b2; int e2A = e2;
              try
              {
                try_FTStopWordsInclExcl();
                lk = -1;
              }
              catch (ParseException p1A)
              {
                lk = -2;
              }
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              memoize(25, e0, lk);
            }
          }
          if (lk != -1)
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(213);         // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
          switch (l1)
          {
          case 130:                 // 'except'
          case 243:                 // 'union'
            lookahead2W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            break;
          default:
            lk = l1;
          }
          if (lk == 17538           // 'except' '('
           || lk == 17651           // 'union' '('
           || lk == 43650           // 'except' 'at'
           || lk == 43763)          // 'union' 'at'
          {
            lk = memoized(24, e0);
            if (lk == 0)
            {
              int b0A = b0; int e0A = e0; int l1A = l1;
              int b1A = b1; int e1A = e1; int l2A = l2;
              int b2A = b2; int e2A = e2;
              try
              {
                try_FTStopWordsInclExcl();
                lk = -1;
              }
              catch (ParseException p1A)
              {
                lk = -2;
              }
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              memoize(24, e0, lk);
            }
          }
          if (lk != -1)
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(68);              // S^WS | '(:' | 'stop'
      consume(228);                 // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consume(261);                 // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  private void try_FTStopWordOption()
  {
    switch (l1)
    {
    case 228:                       // 'stop'
      consumeT(228);                // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consumeT(261);                // 'words'
      lookahead1W(135);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 108:                     // 'default'
        consumeT(108);              // 'default'
        for (;;)
        {
          lookahead1W(213);         // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
          switch (l1)
          {
          case 130:                 // 'except'
          case 243:                 // 'union'
            lookahead2W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            break;
          default:
            lk = l1;
          }
          if (lk == 17538           // 'except' '('
           || lk == 17651           // 'union' '('
           || lk == 43650           // 'except' 'at'
           || lk == 43763)          // 'union' 'at'
          {
            lk = memoized(25, e0);
            if (lk == 0)
            {
              int b0A = b0; int e0A = e0; int l1A = l1;
              int b1A = b1; int e1A = e1; int l2A = l2;
              int b2A = b2; int e2A = e2;
              try
              {
                try_FTStopWordsInclExcl();
                memoize(25, e0A, -1);
                continue;
              }
              catch (ParseException p1A)
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(25, e0A, -2);
                break;
              }
            }
          }
          if (lk != -1)
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(213);         // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
          switch (l1)
          {
          case 130:                 // 'except'
          case 243:                 // 'union'
            lookahead2W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            break;
          default:
            lk = l1;
          }
          if (lk == 17538           // 'except' '('
           || lk == 17651           // 'union' '('
           || lk == 43650           // 'except' 'at'
           || lk == 43763)          // 'union' 'at'
          {
            lk = memoized(24, e0);
            if (lk == 0)
            {
              int b0A = b0; int e0A = e0; int l1A = l1;
              int b1A = b1; int e1A = e1; int l2A = l2;
              int b2A = b2; int e2A = e2;
              try
              {
                try_FTStopWordsInclExcl();
                memoize(24, e0A, -1);
                continue;
              }
              catch (ParseException p1A)
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(24, e0A, -2);
                break;
              }
            }
          }
          if (lk != -1)
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(68);              // S^WS | '(:' | 'stop'
      consumeT(228);                // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consumeT(261);                // 'words'
    }
  }

  private void parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      break;
    default:
      consume(34);                  // '('
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consume(4);                 // StringLiteral
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  private void try_FTStopWords()
  {
    switch (l1)
    {
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
      break;
    default:
      consumeT(34);                 // '('
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consumeT(4);                  // StringLiteral
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consumeT(4);                // StringLiteral
      }
      consumeT(37);                 // ')'
    }
  }

  private void parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 243:                       // 'union'
      consume(243);                 // 'union'
      break;
    default:
      consume(130);                 // 'except'
    }
    lookahead1W(89);                // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  private void try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 243:                       // 'union'
      consumeT(243);                // 'union'
      break;
    default:
      consumeT(130);                // 'except'
    }
    lookahead1W(89);                // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  private void parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    consume(162);                   // 'language'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  private void try_FTLanguageOption()
  {
    consumeT(162);                  // 'language'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consumeT(4);                    // StringLiteral
  }

  private void parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 256:                       // 'wildcards'
      consume(256);                 // 'wildcards'
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'wildcards'
      consume(256);                 // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  private void try_FTWildCardOption()
  {
    switch (l1)
    {
    case 256:                       // 'wildcards'
      consumeT(256);                // 'wildcards'
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'wildcards'
      consumeT(256);                // 'wildcards'
    }
  }

  private void parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    consume(190);                   // 'option'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  private void try_FTExtensionOption()
  {
    consumeT(190);                  // 'option'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consumeT(4);                    // StringLiteral
  }

  private void parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    consume(259);                   // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consume(100);                   // 'content'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  private void try_FTIgnoreOption()
  {
    consumeT(259);                  // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consumeT(100);                  // 'content'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_UnionExpr();
  }

  private void try_Comment()
  {
    consumeT(36);                   // '(:'
    for (;;)
    {
      lookahead1(81);               // CommentContents | '(:' | ':)'
      if (l1 == 49)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 19:                      // CommentContents
        consumeT(19);               // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    consumeT(49);                   // ':)'
  }

  private void try_Whitespace()
  {
    switch (l1)
    {
    case 18:                        // S^WS
      consumeT(18);                 // S^WS
      break;
    default:
      try_Comment();
    }
  }

  private void parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 14:                        // NCName^Token
      consume(14);                  // NCName^Token
      break;
    case 80:                        // 'and'
      consume(80);                  // 'and'
      break;
    case 83:                        // 'as'
      consume(83);                  // 'as'
      break;
    case 84:                        // 'ascending'
      consume(84);                  // 'ascending'
      break;
    case 91:                        // 'case'
      consume(91);                  // 'case'
      break;
    case 92:                        // 'cast'
      consume(92);                  // 'cast'
      break;
    case 93:                        // 'castable'
      consume(93);                  // 'castable'
      break;
    case 96:                        // 'collation'
      consume(96);                  // 'collation'
      break;
    case 104:                       // 'count'
      consume(104);                 // 'count'
      break;
    case 108:                       // 'default'
      consume(108);                 // 'default'
      break;
    case 112:                       // 'descending'
      consume(112);                 // 'descending'
      break;
    case 117:                       // 'div'
      consume(117);                 // 'div'
      break;
    case 121:                       // 'else'
      consume(121);                 // 'else'
      break;
    case 122:                       // 'empty'
      consume(122);                 // 'empty'
      break;
    case 125:                       // 'end'
      consume(125);                 // 'end'
      break;
    case 127:                       // 'eq'
      consume(127);                 // 'eq'
      break;
    case 130:                       // 'except'
      consume(130);                 // 'except'
      break;
    case 136:                       // 'for'
      consume(136);                 // 'for'
      break;
    case 143:                       // 'ge'
      consume(143);                 // 'ge'
      break;
    case 145:                       // 'group'
      consume(145);                 // 'group'
      break;
    case 147:                       // 'gt'
      consume(147);                 // 'gt'
      break;
    case 148:                       // 'idiv'
      consume(148);                 // 'idiv'
      break;
    case 156:                       // 'instance'
      consume(156);                 // 'instance'
      break;
    case 157:                       // 'intersect'
      consume(157);                 // 'intersect'
      break;
    case 160:                       // 'is'
      consume(160);                 // 'is'
      break;
    case 165:                       // 'le'
      consume(165);                 // 'le'
      break;
    case 167:                       // 'let'
      consume(167);                 // 'let'
      break;
    case 170:                       // 'lt'
      consume(170);                 // 'lt'
      break;
    case 173:                       // 'mod'
      consume(173);                 // 'mod'
      break;
    case 179:                       // 'ne'
      consume(179);                 // 'ne'
      break;
    case 189:                       // 'only'
      consume(189);                 // 'only'
      break;
    case 191:                       // 'or'
      consume(191);                 // 'or'
      break;
    case 192:                       // 'order'
      consume(192);                 // 'order'
      break;
    case 210:                       // 'return'
      consume(210);                 // 'return'
      break;
    case 213:                       // 'satisfies'
      consume(213);                 // 'satisfies'
      break;
    case 225:                       // 'stable'
      consume(225);                 // 'stable'
      break;
    case 226:                       // 'start'
      consume(226);                 // 'start'
      break;
    case 236:                       // 'to'
      consume(236);                 // 'to'
      break;
    case 238:                       // 'treat'
      consume(238);                 // 'treat'
      break;
    case 243:                       // 'union'
      consume(243);                 // 'union'
      break;
    default:
      consume(255);                 // 'where'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  private void try_NCName()
  {
    switch (l1)
    {
    case 14:                        // NCName^Token
      consumeT(14);                 // NCName^Token
      break;
    case 80:                        // 'and'
      consumeT(80);                 // 'and'
      break;
    case 83:                        // 'as'
      consumeT(83);                 // 'as'
      break;
    case 84:                        // 'ascending'
      consumeT(84);                 // 'ascending'
      break;
    case 91:                        // 'case'
      consumeT(91);                 // 'case'
      break;
    case 92:                        // 'cast'
      consumeT(92);                 // 'cast'
      break;
    case 93:                        // 'castable'
      consumeT(93);                 // 'castable'
      break;
    case 96:                        // 'collation'
      consumeT(96);                 // 'collation'
      break;
    case 104:                       // 'count'
      consumeT(104);                // 'count'
      break;
    case 108:                       // 'default'
      consumeT(108);                // 'default'
      break;
    case 112:                       // 'descending'
      consumeT(112);                // 'descending'
      break;
    case 117:                       // 'div'
      consumeT(117);                // 'div'
      break;
    case 121:                       // 'else'
      consumeT(121);                // 'else'
      break;
    case 122:                       // 'empty'
      consumeT(122);                // 'empty'
      break;
    case 125:                       // 'end'
      consumeT(125);                // 'end'
      break;
    case 127:                       // 'eq'
      consumeT(127);                // 'eq'
      break;
    case 130:                       // 'except'
      consumeT(130);                // 'except'
      break;
    case 136:                       // 'for'
      consumeT(136);                // 'for'
      break;
    case 143:                       // 'ge'
      consumeT(143);                // 'ge'
      break;
    case 145:                       // 'group'
      consumeT(145);                // 'group'
      break;
    case 147:                       // 'gt'
      consumeT(147);                // 'gt'
      break;
    case 148:                       // 'idiv'
      consumeT(148);                // 'idiv'
      break;
    case 156:                       // 'instance'
      consumeT(156);                // 'instance'
      break;
    case 157:                       // 'intersect'
      consumeT(157);                // 'intersect'
      break;
    case 160:                       // 'is'
      consumeT(160);                // 'is'
      break;
    case 165:                       // 'le'
      consumeT(165);                // 'le'
      break;
    case 167:                       // 'let'
      consumeT(167);                // 'let'
      break;
    case 170:                       // 'lt'
      consumeT(170);                // 'lt'
      break;
    case 173:                       // 'mod'
      consumeT(173);                // 'mod'
      break;
    case 179:                       // 'ne'
      consumeT(179);                // 'ne'
      break;
    case 189:                       // 'only'
      consumeT(189);                // 'only'
      break;
    case 191:                       // 'or'
      consumeT(191);                // 'or'
      break;
    case 192:                       // 'order'
      consumeT(192);                // 'order'
      break;
    case 210:                       // 'return'
      consumeT(210);                // 'return'
      break;
    case 213:                       // 'satisfies'
      consumeT(213);                // 'satisfies'
      break;
    case 225:                       // 'stable'
      consumeT(225);                // 'stable'
      break;
    case 226:                       // 'start'
      consumeT(226);                // 'start'
      break;
    case 236:                       // 'to'
      consumeT(236);                // 'to'
      break;
    case 238:                       // 'treat'
      consumeT(238);                // 'treat'
      break;
    case 243:                       // 'union'
      consumeT(243);                // 'union'
      break;
    default:
      consumeT(255);                // 'where'
    }
  }

  private void parse_QueryBody()
  {
    eventHandler.startNonterminal("QueryBody", e0);
    parse_Expr();
    eventHandler.endNonterminal("QueryBody", e0);
  }

  private void parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(160);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '}' | '}`'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  private void try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(160);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '}' | '}`'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_ExprSingle();
    }
  }

  private void parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(210);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'sliding' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'tumbling' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 159:                       // 'invoke'
      lookahead2W(203);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'updating' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 167:                       // 'let'
      lookahead2W(207);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 208:                       // 'rename'
      lookahead2W(202);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 209:                       // 'replace'
      lookahead2W(209);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'value' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 239:                       // 'try'
      lookahead2W(204);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 109:                       // 'delete'
    case 155:                       // 'insert'
      lookahead2W(208);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 102:                       // 'copy'
    case 128:                       // 'every'
    case 224:                       // 'some'
      lookahead2W(200);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 149:                       // 'if'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(195);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 17557)                // 'if' '('
    {
      lk = memoized(26, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_IfExpr();
          lk = -5;
        }
        catch (ParseException p5A)
        {
          lk = -6;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(26, e0, lk);
      }
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
    case 16039:                     // 'let' '$'
    case 111271:                    // 'let' 'score'
    case 114312:                    // 'for' 'sliding'
    case 123016:                    // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 16000:                     // 'every' '$'
    case 16096:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 17639:                     // 'switch' '('
      parse_SwitchExpr();
      break;
    case 17650:                     // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    case -5:
      parse_IfExpr();
      break;
    case -6:
      parse_BasexIfExpr();
      break;
    case 135407:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 94363:                     // 'insert' 'node'
    case 94875:                     // 'insert' 'nodes'
      parse_InsertExpr();
      break;
    case 94317:                     // 'delete' 'node'
    case 94829:                     // 'delete' 'nodes'
      parse_DeleteExpr();
      break;
    case 94416:                     // 'rename' 'node'
      parse_RenameExpr();
      break;
    case 94417:                     // 'replace' 'node'
    case 128209:                    // 'replace' 'value'
      parse_ReplaceExpr();
      break;
    case 126111:                    // 'invoke' 'updating'
      parse_UpdatingFunctionCall();
      break;
    case 15974:                     // 'copy' '$'
      parse_CopyModifyExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  private void try_ExprSingle()
  {
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(210);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'sliding' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'tumbling' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 159:                       // 'invoke'
      lookahead2W(203);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'updating' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 167:                       // 'let'
      lookahead2W(207);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 208:                       // 'rename'
      lookahead2W(202);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 209:                       // 'replace'
      lookahead2W(209);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'value' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 239:                       // 'try'
      lookahead2W(204);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 109:                       // 'delete'
    case 155:                       // 'insert'
      lookahead2W(208);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 102:                       // 'copy'
    case 128:                       // 'every'
    case 224:                       // 'some'
      lookahead2W(200);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 149:                       // 'if'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(195);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 17557)                // 'if' '('
    {
      lk = memoized(26, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_IfExpr();
          memoize(26, e0A, -5);
          lk = -15;
        }
        catch (ParseException p5A)
        {
          lk = -6;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(26, e0A, -6);
        }
      }
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
    case 16039:                     // 'let' '$'
    case 111271:                    // 'let' 'score'
    case 114312:                    // 'for' 'sliding'
    case 123016:                    // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 16000:                     // 'every' '$'
    case 16096:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case 17639:                     // 'switch' '('
      try_SwitchExpr();
      break;
    case 17650:                     // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    case -5:
      try_IfExpr();
      break;
    case -6:
      try_BasexIfExpr();
      break;
    case 135407:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 94363:                     // 'insert' 'node'
    case 94875:                     // 'insert' 'nodes'
      try_InsertExpr();
      break;
    case 94317:                     // 'delete' 'node'
    case 94829:                     // 'delete' 'nodes'
      try_DeleteExpr();
      break;
    case 94416:                     // 'rename' 'node'
      try_RenameExpr();
      break;
    case 94417:                     // 'replace' 'node'
    case 128209:                    // 'replace' 'value'
      try_ReplaceExpr();
      break;
    case 126111:                    // 'invoke' 'updating'
      try_UpdatingFunctionCall();
      break;
    case 15974:                     // 'copy' '$'
      try_CopyModifyExpr();
      break;
    case -15:
      break;
    default:
      try_OrExpr();
    }
  }

  private void parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      consume(6);                   // PredefinedEntityRef
      break;
    case 13:                        // CharRef
      consume(13);                  // CharRef
      break;
    case 265:                       // '{{'
      consume(265);                 // '{{'
      break;
    case 270:                       // '}}'
      consume(270);                 // '}}'
      break;
    default:
      parse_EnclosedExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  private void try_CommonContent()
  {
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      consumeT(6);                  // PredefinedEntityRef
      break;
    case 13:                        // CharRef
      consumeT(13);                 // CharRef
      break;
    case 265:                       // '{{'
      consumeT(265);                // '{{'
      break;
    case 270:                       // '}}'
      consumeT(270);                // '}}'
      break;
    default:
      try_EnclosedExpr();
    }
  }

  private void parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    consume(118);                   // 'document'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  private void try_CompDocConstructor()
  {
    consumeT(118);                  // 'document'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  private void parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    consume(86);                    // 'attribute'
    lookahead1W(225);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  private void try_CompAttrConstructor()
  {
    consumeT(86);                   // 'attribute'
    lookahead1W(225);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  private void parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    consume(206);                   // 'processing-instruction'
    lookahead1W(175);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  private void try_CompPIConstructor()
  {
    consumeT(206);                  // 'processing-instruction'
    lookahead1W(175);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  private void parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    consume(97);                    // 'comment'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  private void try_CompCommentConstructor()
  {
    consumeT(97);                   // 'comment'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  private void parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    consume(232);                   // 'text'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  private void try_CompTextConstructor()
  {
    consumeT(232);                  // 'text'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  private void parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 177:                       // 'namespace'
      lookahead2W(179);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'treat' | 'union' | 'where' | '{'
      break;
    case 206:                       // 'processing-instruction'
      lookahead2W(177);             // NCName^Token | S^WS | '#' | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
      break;
    case 86:                        // 'attribute'
    case 120:                       // 'element'
      lookahead2W(226);             // URIQualifiedName | QName^Token | S^WS | '#' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
      break;
    case 97:                        // 'comment'
    case 232:                       // 'text'
      lookahead2W(84);              // S^WS | '#' | '(:' | '{'
      break;
    case 118:                       // 'document'
    case 193:                       // 'ordered'
    case 244:                       // 'unordered'
      lookahead2W(133);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 95:                        // 'child'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 109:                       // 'delete'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 136:                       // 'for'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 155:                       // 'insert'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 179:                       // 'ne'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 218:                       // 'self'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
      parse_Literal();
      break;
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 43:                        // '.'
      parse_ContextItemExpr();
      break;
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17517:                     // 'delete' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17563:                     // 'insert' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17616:                     // 'rename' '('
    case 17617:                     // 'replace' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
      parse_FunctionCall();
      break;
    case 135361:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 135412:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 119:                       // 'document-node'
    case 123:                       // 'empty-sequence'
    case 142:                       // 'function'
    case 149:                       // 'if'
    case 161:                       // 'item'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14957:                     // 'delete' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14998:                     // 'import' '#'
    case 15003:                     // 'insert' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15027:                     // 'ne' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15056:                     // 'rename' '#'
    case 15057:                     // 'replace' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case 171:                       // 'map'
      parse_MapConstructor();
      break;
    case 69:                        // '['
    case 82:                        // 'array'
      parse_ArrayConstructor();
      break;
    case 73:                        // '``['
      parse_StringConstructor();
      break;
    case 65:                        // '?'
      parse_UnaryLookup();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  private void try_PrimaryExpr()
  {
    switch (l1)
    {
    case 177:                       // 'namespace'
      lookahead2W(179);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'treat' | 'union' | 'where' | '{'
      break;
    case 206:                       // 'processing-instruction'
      lookahead2W(177);             // NCName^Token | S^WS | '#' | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
      break;
    case 86:                        // 'attribute'
    case 120:                       // 'element'
      lookahead2W(226);             // URIQualifiedName | QName^Token | S^WS | '#' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
      break;
    case 97:                        // 'comment'
    case 232:                       // 'text'
      lookahead2W(84);              // S^WS | '#' | '(:' | '{'
      break;
    case 118:                       // 'document'
    case 193:                       // 'ordered'
    case 244:                       // 'unordered'
      lookahead2W(133);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 95:                        // 'child'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 109:                       // 'delete'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 136:                       // 'for'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 155:                       // 'insert'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 179:                       // 'ne'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 218:                       // 'self'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
      try_Literal();
      break;
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 43:                        // '.'
      try_ContextItemExpr();
      break;
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17517:                     // 'delete' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17563:                     // 'insert' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17616:                     // 'rename' '('
    case 17617:                     // 'replace' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
      try_FunctionCall();
      break;
    case 135361:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 135412:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 119:                       // 'document-node'
    case 123:                       // 'empty-sequence'
    case 142:                       // 'function'
    case 149:                       // 'if'
    case 161:                       // 'item'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14957:                     // 'delete' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14998:                     // 'import' '#'
    case 15003:                     // 'insert' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15027:                     // 'ne' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15056:                     // 'rename' '#'
    case 15057:                     // 'replace' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case 171:                       // 'map'
      try_MapConstructor();
      break;
    case 69:                        // '['
    case 82:                        // 'array'
      try_ArrayConstructor();
      break;
    case 73:                        // '``['
      try_StringConstructor();
      break;
    case 65:                        // '?'
      try_UnaryLookup();
      break;
    default:
      try_Constructor();
    }
  }

  private void consume(int t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  private void consumeT(int t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  private void skip(int code)
  {
    int b0W = b0; int e0W = e0; int l1W = l1;
    int b1W = b1; int e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  private void whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  private int matchW(int tokenSetId)
  {
    int code;
    for (;;)
    {
      code = match(tokenSetId);
      if (code != 18)               // S^WS
      {
        if (code != 36)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  private void lookahead1W(int tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = matchW(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  private void lookahead2W(int tokenSetId)
  {
    if (l2 == 0)
    {
      l2 = matchW(tokenSetId);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  private void lookahead1(int tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = match(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  private int error(int b, int e, int s, int l, int t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new ParseException(bx, ex, sx, lx, tx);
  }

  private void memoize(int i, int e, int v)
  {
    memo.put((e << 5) + i, v);
  }

  private int memoized(int i, int e)
  {
    Integer v = memo.get((e << 5) + i);
    return v == null ? 0 : v;
  }

  private int lk, b0, e0;
  private int l1, b1, e1;
  private int l2, b2, e2;
  private int bx, ex, sx, lx, tx;
  private EventHandler eventHandler = null;
  private java.util.Map<Integer, Integer> memo = new java.util.HashMap<Integer, Integer>();
  private CharSequence input = null;
  private int size = 0;
  private int begin = 0;
  private int end = 0;

  private int match(int tokenSetId)
  {
    boolean nonbmp = false;
    begin = end;
    int current = end;
    int result = INITIAL[tokenSetId];
    int state = 0;

    for (int code = result & 4095; code != 0; )
    {
      int charclass;
      int c0 = current < size ? input.charAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        int c1 = c0 >> 4;
        charclass = MAP1[(c0 & 15) + MAP1[(c1 & 31) + MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          int c1 = current < size ? input.charAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            nonbmp = true;
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
          }
        }

        int lo = 0, hi = 5;
        for (int m = 3; ; m = (hi + lo) >> 1)
        {
          if (MAP2[m] > c0) {hi = m - 1;}
          else if (MAP2[6 + m] < c0) {lo = m + 1;}
          else {charclass = MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      int i0 = (charclass << 12) + code - 1;
      code = TRANSITION[(i0 & 15) + TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      int c1 = end < size ? input.charAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000)
      {
        --end;
      }
      return error(begin, end, state, -1, -1);
    }
    else if (nonbmp)
    {
      for (int i = result >> 9; i > 0; --i)
      {
        --end;
        int c1 = end < size ? input.charAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000)
        {
          --end;
        }
      }
    }
    else
    {
      end -= result >> 9;
    }

    if (end > size) end = size;
    return (result & 511) - 1;
  }

  private static String[] getTokenSet(int tokenSetId)
  {
    java.util.ArrayList<String> expected = new java.util.ArrayList<>();
    int s = tokenSetId < 0 ? - tokenSetId : INITIAL[tokenSetId] & 4095;
    for (int i = 0; i < 271; i += 32)
    {
      int j = i;
      int i0 = (i >> 5) * 2570 + s - 1;
      int i1 = i0 >> 2;
      int i2 = i1 >> 2;
      int f = EXPECTED[(i0 & 3) + EXPECTED[(i1 & 3) + EXPECTED[(i2 & 15) + EXPECTED[i2 >> 4]]]];
      for ( ; f != 0; f >>>= 1, ++j)
      {
        if ((f & 1) != 0)
        {
          expected.add(TOKEN[j]);
        }
      }
    }
    return expected.toArray(new String[]{});
  }

  private static final int[] MAP0 = new int[128];
  static
  {
    final String s1[] =
    {
      /*   0 */ "70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2",
      /*  34 */ "3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20",
      /*  61 */ "21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30",
      /*  86 */ "30, 30, 36, 30, 30, 37, 38, 39, 38, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 30, 50, 51, 52, 53",
      /* 111 */ "54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 38, 38"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 128; ++i) {MAP0[i] = Integer.parseInt(s2[i]);}
  }

  private static final int[] MAP1 = new int[456];
  static
  {
    final String s1[] =
    {
      /*   0 */ "108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181",
      /*  20 */ "181, 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214",
      /*  40 */ "214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214",
      /*  60 */ "214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214",
      /*  80 */ "214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214",
      /* 100 */ "214, 214, 214, 214, 214, 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415",
      /* 120 */ "339, 331, 339, 331, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339",
      /* 140 */ "440, 440, 440, 440, 440, 440, 440, 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424",
      /* 160 */ "422, 423, 423, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339",
      /* 180 */ "339, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423",
      /* 200 */ "423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 338, 339, 339, 339, 339, 339, 339",
      /* 220 */ "339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339",
      /* 240 */ "339, 339, 339, 339, 339, 339, 423, 70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 269 */ "0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17",
      /* 299 */ "17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33",
      /* 324 */ "30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30",
      /* 349 */ "30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30, 40, 41, 42",
      /* 374 */ "43, 44, 45, 46, 47, 48, 49, 30, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66",
      /* 399 */ "67, 68, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 69, 38",
      /* 424 */ "38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69",
      /* 449 */ "69, 69, 69, 69, 69, 69, 69"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 456; ++i) {MAP1[i] = Integer.parseInt(s2[i]);}
  }

  private static final int[] MAP2 = new int[18];
  static
  {
    final String s1[] =
    {
      /*  0 */ "57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30",
      /* 16 */ "30, 38"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 18; ++i) {MAP2[i] = Integer.parseInt(s2[i]);}
  }

  private static final int[] INITIAL = new int[245];
  static
  {
    final String s1[] =
    {
      /*   0 */ "1, 2, 3, 94212, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27",
      /*  27 */ "28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52",
      /*  52 */ "53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77",
      /*  77 */ "78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102",
      /* 102 */ "103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122",
      /* 122 */ "123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142",
      /* 142 */ "143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162",
      /* 162 */ "163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182",
      /* 182 */ "183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202",
      /* 202 */ "203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222",
      /* 222 */ "223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242",
      /* 242 */ "243, 244, 245"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 245; ++i) {INITIAL[i] = Integer.parseInt(s2[i]);}
  }

  private static final int[] TRANSITION = new int[42626];
  static
  {
    final String s1[] =
    {
      /*     0 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*    14 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*    28 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*    42 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*    56 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*    70 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*    84 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*    98 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   112 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   126 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   140 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   154 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   168 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   182 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   196 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   210 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   224 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   238 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   252 */ "19826, 19826, 19826, 19826, 18176, 18192, 18216, 18216, 18216, 18214, 18216, 18216, 18216, 18218",
      /*   266 */ "18234, 18216, 18216, 18198, 18216, 18245, 18261, 19826, 19826, 19807, 19826, 19826, 31277, 19826",
      /*   280 */ "42553, 18563, 19826, 19826, 19826, 18557, 25371, 18521, 19548, 24485, 19554, 23922, 18295, 18314",
      /*   294 */ "26681, 19826, 19826, 42581, 19826, 39582, 18339, 18355, 18371, 18407, 18434, 18458, 20376, 18500",
      /*   308 */ "23624, 18626, 20380, 18504, 23628, 18520, 18663, 29470, 19826, 19826, 19826, 34747, 22005, 42465",
      /*   322 */ "18537, 18579, 18595, 23380, 18611, 18686, 18706, 18521, 18655, 18682, 18702, 18722, 42520, 18741",
      /*   336 */ "18663, 18760, 21120, 18824, 21114, 35088, 19826, 18855, 18871, 42370, 18442, 18923, 18945, 18967",
      /*   350 */ "18989, 18917, 18939, 18961, 18983, 18521, 19786, 20801, 19892, 19005, 19026, 41470, 19064, 23303",
      /*   364 */ "19080, 19098, 18637, 19116, 19082, 19100, 18639, 19136, 32989, 19161, 19048, 42553, 19182, 42137",
      /*   378 */ "19251, 19219, 19240, 19256, 19224, 19145, 31661, 19272, 30536, 18551, 19295, 19316, 19300, 19321",
      /*   392 */ "21100, 19337, 19371, 19387, 19424, 19417, 18484, 19446, 19462, 19478, 19476, 19401, 19494, 19498",
      /*   406 */ "19514, 19430, 19517, 42527, 19534, 19570, 19586, 19518, 19602, 19618, 19632, 19826, 19826, 19826",
      /*   420 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   434 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   448 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   462 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   476 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   490 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   504 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19668, 19826, 19826, 19826, 19826, 25369",
      /*   518 */ "19826, 19826, 19826, 41231, 19690, 31431, 19711, 19725, 19826, 19773, 36165, 19826, 19826, 19807",
      /*   532 */ "19826, 19826, 31277, 26234, 42553, 18563, 19826, 19826, 19826, 18557, 25371, 18521, 19548, 18744",
      /*   546 */ "42147, 23922, 18295, 18314, 26681, 19826, 19826, 42581, 19826, 39582, 18339, 18355, 18371, 18407",
      /*   560 */ "18434, 18458, 20376, 18500, 23624, 18626, 20380, 18504, 23628, 18520, 18663, 29470, 19826, 19826",
      /*   574 */ "19826, 34747, 22005, 42465, 18537, 18579, 18595, 23380, 18611, 18686, 18706, 18521, 18655, 18682",
      /*   588 */ "18702, 18722, 42520, 18741, 18663, 18760, 21120, 18824, 21114, 35088, 19826, 18855, 18871, 42370",
      /*   602 */ "18442, 18923, 18945, 18967, 18989, 18917, 18939, 18961, 18983, 18521, 19786, 20801, 19892, 19005",
      /*   616 */ "19026, 41470, 19064, 23303, 19080, 19098, 18637, 19116, 19082, 19100, 18639, 19136, 32989, 19161",
      /*   630 */ "19048, 42553, 19182, 42137, 19251, 19219, 19240, 19256, 19224, 19145, 31661, 19272, 30536, 18551",
      /*   644 */ "19295, 19316, 19300, 19321, 21100, 19337, 19371, 19387, 19424, 19417, 18484, 19446, 19462, 19478",
      /*   658 */ "19476, 19401, 19494, 19498, 19514, 19430, 19517, 42527, 19534, 19570, 19586, 19518, 19602, 19618",
      /*   672 */ "19632, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   686 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   700 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   714 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   728 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   742 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   756 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19668, 19802",
      /*   770 */ "19826, 19826, 19826, 19823, 19826, 19826, 19843, 19863, 19690, 19825, 19826, 19826, 28289, 19879",
      /*   784 */ "42027, 19826, 19826, 19807, 19826, 19826, 31277, 19908, 42553, 18563, 19826, 19826, 19826, 18557",
      /*   798 */ "25371, 18521, 19548, 24485, 19554, 19925, 18295, 18314, 26681, 19826, 19826, 42581, 19826, 39582",
      /*   812 */ "18339, 18355, 18371, 18407, 18434, 18458, 20376, 18500, 23624, 18626, 20380, 18504, 23628, 18520",
      /*   826 */ "18663, 29470, 19826, 19826, 19826, 34747, 22005, 42465, 18537, 18579, 18595, 23380, 18611, 18686",
      /*   840 */ "18706, 18521, 18655, 18682, 18702, 18722, 42520, 18741, 18663, 18760, 21120, 18824, 21114, 35088",
      /*   854 */ "19826, 18855, 18871, 42370, 18442, 18923, 18945, 18967, 18989, 18917, 18939, 18961, 18983, 18521",
      /*   868 */ "19786, 20801, 19892, 19005, 19026, 41470, 19064, 23303, 19080, 19098, 18637, 19116, 19082, 19100",
      /*   882 */ "18639, 19136, 32989, 19161, 19048, 42553, 19182, 42137, 19251, 19219, 19240, 19256, 19224, 19145",
      /*   896 */ "31661, 19272, 30536, 18551, 19295, 19316, 19300, 19321, 21100, 19337, 19371, 19387, 19424, 19417",
      /*   910 */ "18484, 19446, 19462, 19478, 19476, 19401, 19494, 19498, 19514, 19430, 19517, 42527, 19534, 19570",
      /*   924 */ "19586, 19518, 19602, 19618, 19632, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   938 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   952 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   966 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   980 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*   994 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1008 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1022 */ "19826, 19826, 19941, 20490, 19826, 19826, 19826, 19979, 19826, 19826, 20491, 41231, 19690, 20000",
      /*  1036 */ "20035, 20049, 20070, 20089, 36165, 19826, 19826, 19807, 20118, 19826, 31277, 20135, 42553, 18563",
      /*  1050 */ "19826, 19826, 19826, 18557, 25371, 18521, 19548, 24485, 19554, 20153, 18295, 18314, 26681, 19826",
      /*  1064 */ "19826, 42581, 19826, 39582, 18339, 18355, 18371, 18407, 18434, 18458, 20376, 18500, 23624, 18626",
      /*  1078 */ "20380, 18504, 23628, 18520, 18663, 29470, 19826, 19826, 19826, 34747, 22005, 42465, 18537, 18579",
      /*  1092 */ "18595, 23380, 18611, 18686, 18706, 18521, 20169, 18682, 18702, 18722, 42520, 18741, 18663, 18760",
      /*  1106 */ "21120, 18824, 21114, 35088, 19826, 18855, 18871, 42370, 18442, 18923, 18945, 18967, 18989, 18917",
      /*  1120 */ "18939, 18961, 18983, 18521, 19786, 20801, 19892, 19005, 19026, 41470, 19064, 23303, 19080, 19098",
      /*  1134 */ "18637, 19116, 19082, 19100, 18639, 19136, 32989, 19161, 19048, 42553, 19182, 42137, 19251, 19219",
      /*  1148 */ "19240, 19256, 19224, 19145, 31661, 19272, 30536, 18551, 19295, 19316, 19300, 19321, 21100, 19337",
      /*  1162 */ "19371, 19387, 19424, 19417, 18484, 19446, 19462, 19478, 19476, 19401, 19494, 19498, 19514, 19430",
      /*  1176 */ "19517, 42527, 19534, 19570, 19586, 19518, 19602, 19618, 19632, 19826, 19826, 19826, 19826, 19826",
      /*  1190 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1204 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1218 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1232 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1246 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1260 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1274 */ "19826, 19826, 19826, 19826, 19826, 19826, 19668, 20812, 19826, 19826, 19826, 20185, 19826, 19826",
      /*  1288 */ "20813, 42493, 19690, 19826, 24696, 20209, 20228, 20242, 36165, 19826, 19826, 19807, 19826, 19826",
      /*  1302 */ "31277, 19826, 42553, 18563, 19826, 19826, 19826, 18557, 25371, 18521, 19548, 24485, 19554, 23922",
      /*  1316 */ "18295, 18314, 26681, 19826, 19826, 42581, 19826, 39582, 18339, 18355, 18371, 18407, 18434, 18458",
      /*  1330 */ "20376, 18500, 23624, 18626, 20380, 18504, 23628, 18520, 18663, 29470, 19826, 19826, 19826, 34747",
      /*  1344 */ "22005, 42465, 18537, 18579, 18595, 23380, 18611, 18686, 18706, 18521, 18655, 18682, 18702, 18722",
      /*  1358 */ "42520, 18741, 18663, 18760, 21120, 18824, 21114, 35088, 19826, 18855, 18871, 42370, 18442, 18923",
      /*  1372 */ "18945, 18967, 18989, 18917, 18939, 18961, 18983, 18521, 19786, 20801, 19892, 19005, 19026, 41470",
      /*  1386 */ "19064, 23303, 19080, 19098, 18637, 19116, 19082, 19100, 18639, 19136, 32989, 19161, 19048, 42553",
      /*  1400 */ "19182, 42137, 19251, 19219, 19240, 19256, 19224, 19145, 31661, 19272, 30536, 18551, 19295, 19316",
      /*  1414 */ "19300, 19321, 21100, 19337, 19371, 19387, 19424, 19417, 18484, 19446, 19462, 19478, 19476, 19401",
      /*  1428 */ "19494, 19498, 19514, 19430, 19517, 42527, 19534, 19570, 19586, 19518, 19602, 19618, 19632, 19826",
      /*  1442 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1456 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1470 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1484 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1498 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1512 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1526 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19668, 19826, 19826, 19826",
      /*  1540 */ "19826, 20284, 19826, 19826, 19826, 20290, 20306, 24825, 19826, 19826, 32128, 20327, 36165, 19826",
      /*  1554 */ "19826, 19807, 19826, 19826, 31277, 19826, 42553, 18563, 19826, 19826, 19826, 18557, 25371, 18521",
      /*  1568 */ "19548, 24485, 19554, 23922, 18295, 18314, 26681, 19826, 19826, 42581, 19826, 39582, 18339, 18355",
      /*  1582 */ "18371, 18407, 18434, 18458, 20376, 18500, 23624, 18626, 20380, 18504, 23628, 18520, 18663, 29470",
      /*  1596 */ "19826, 19826, 19826, 34747, 22005, 42465, 18537, 18579, 18595, 23380, 18611, 18686, 18706, 18521",
      /*  1610 */ "18655, 18682, 18702, 18722, 42520, 18741, 18663, 18760, 21120, 18824, 21114, 35088, 19826, 18855",
      /*  1624 */ "18871, 42370, 18442, 18923, 18945, 18967, 18989, 18917, 18939, 18961, 18983, 18521, 19786, 20801",
      /*  1638 */ "19892, 19005, 19026, 41470, 19064, 23303, 19080, 19098, 18637, 19116, 19082, 19100, 18639, 19136",
      /*  1652 */ "32989, 19161, 19048, 42553, 19182, 42137, 19251, 19219, 19240, 19256, 19224, 19145, 31661, 19272",
      /*  1666 */ "30536, 18551, 19295, 19316, 19300, 19321, 21100, 19337, 19371, 19387, 19424, 19417, 18484, 19446",
      /*  1680 */ "19462, 19478, 19476, 19401, 19494, 19498, 19514, 19430, 19517, 42527, 19534, 19570, 19586, 19518",
      /*  1694 */ "19602, 19618, 19632, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1708 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1722 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1736 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1750 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1764 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1778 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1792 */ "19668, 19826, 19826, 19826, 19826, 25369, 19826, 19826, 19826, 21871, 30821, 19826, 19826, 19826",
      /*  1806 */ "19826, 38269, 41888, 19826, 19826, 19807, 19826, 19826, 31277, 19826, 42553, 18563, 19826, 19826",
      /*  1820 */ "19826, 18557, 25371, 18521, 19548, 24485, 19554, 23922, 18295, 18314, 26681, 19826, 19826, 42581",
      /*  1834 */ "19826, 39582, 18339, 18355, 18371, 18407, 18434, 18458, 20376, 18500, 23624, 20365, 20380, 18504",
      /*  1848 */ "23628, 18520, 18663, 29470, 19826, 19826, 19826, 34747, 22005, 42465, 18537, 18579, 18595, 23380",
      /*  1862 */ "18611, 18686, 18706, 18521, 18655, 18682, 18702, 18722, 42520, 18741, 18663, 18760, 21120, 18824",
      /*  1876 */ "21114, 35088, 19826, 18855, 18871, 42370, 18442, 18923, 18945, 18967, 18989, 18917, 18939, 18961",
      /*  1890 */ "18983, 18521, 19786, 20801, 19892, 19005, 19026, 41470, 19064, 23303, 19080, 19098, 18637, 19116",
      /*  1904 */ "19082, 19100, 18639, 19136, 32989, 19161, 19048, 42553, 19182, 42137, 19251, 19219, 19240, 19256",
      /*  1918 */ "19224, 19145, 31661, 19272, 30536, 18551, 19295, 19316, 19300, 19321, 21100, 19337, 19371, 19387",
      /*  1932 */ "19424, 19417, 18484, 19446, 19462, 19478, 19476, 19401, 19494, 19498, 19514, 19430, 19517, 42527",
      /*  1946 */ "19534, 19570, 19586, 19518, 19602, 19618, 19632, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1960 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1974 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  1988 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2002 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2016 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2030 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2044 */ "19826, 19826, 19826, 19826, 19668, 20396, 19826, 19826, 19826, 20417, 19826, 19826, 23546, 20436",
      /*  2058 */ "19690, 20419, 19826, 19826, 33845, 20452, 40206, 19826, 19826, 19807, 19826, 19826, 31277, 20507",
      /*  2072 */ "42553, 18563, 19826, 19826, 19826, 18557, 25371, 18521, 19548, 24485, 19554, 24134, 18295, 18314",
      /*  2086 */ "26681, 19826, 19826, 42581, 19826, 39582, 18339, 18355, 18371, 18407, 18434, 18458, 20376, 18500",
      /*  2100 */ "23624, 18626, 20380, 18504, 23628, 18520, 18663, 29470, 19826, 19826, 19826, 34747, 22005, 42465",
      /*  2114 */ "18537, 18579, 18595, 23380, 18611, 18686, 18706, 18521, 18655, 18682, 18702, 18722, 42520, 18741",
      /*  2128 */ "18663, 18760, 21120, 18824, 21114, 35088, 19826, 18855, 18871, 42370, 18442, 18923, 18945, 18967",
      /*  2142 */ "18989, 18917, 18939, 18961, 18983, 18521, 19786, 20801, 19892, 19005, 19026, 41470, 19064, 23303",
      /*  2156 */ "19080, 19098, 18637, 19116, 19082, 19100, 18639, 19136, 32989, 19161, 19048, 42553, 19182, 42137",
      /*  2170 */ "19251, 19219, 19240, 19256, 19224, 19145, 31661, 19272, 30536, 18551, 19295, 19316, 19300, 19321",
      /*  2184 */ "21100, 19337, 19371, 19387, 19424, 19417, 18484, 19446, 19462, 19478, 19476, 19401, 19494, 19498",
      /*  2198 */ "19514, 19430, 19517, 42527, 19534, 19570, 19586, 19518, 19602, 19618, 19632, 19826, 19826, 19826",
      /*  2212 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2226 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2240 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2254 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2268 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2282 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2296 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19668, 20528, 20572, 20572, 20572, 20555",
      /*  2310 */ "20572, 20572, 20539, 20588, 20567, 20610, 20604, 20626, 20666, 20680, 36165, 19826, 19826, 39227",
      /*  2324 */ "19826, 19826, 31277, 19826, 42553, 18563, 19826, 19826, 19826, 18557, 25371, 18521, 19548, 24485",
      /*  2338 */ "19554, 23922, 18295, 18314, 26847, 19826, 19826, 42581, 19826, 39582, 18339, 18355, 18371, 18407",
      /*  2352 */ "18434, 18458, 20376, 18500, 23624, 18626, 20380, 18504, 23628, 18520, 18663, 29470, 19826, 19826",
      /*  2366 */ "19826, 34747, 22005, 42465, 18537, 18579, 18595, 23380, 18611, 18686, 18706, 18521, 18655, 18682",
      /*  2380 */ "18702, 18722, 42520, 18741, 18663, 18760, 21120, 18824, 21114, 35088, 19826, 18855, 18871, 42370",
      /*  2394 */ "18442, 18923, 18945, 18967, 18989, 18917, 18939, 18961, 18983, 18521, 19786, 20801, 19892, 19005",
      /*  2408 */ "19026, 41470, 19064, 23303, 19080, 19098, 18637, 19116, 19082, 19100, 18639, 19136, 32989, 19161",
      /*  2422 */ "19048, 42553, 19182, 42137, 19251, 19219, 19240, 19256, 19224, 19145, 31661, 19272, 30536, 18551",
      /*  2436 */ "19295, 19316, 19300, 19321, 21100, 19337, 19371, 19387, 19424, 19417, 18484, 19446, 19462, 19478",
      /*  2450 */ "19476, 19401, 19494, 19498, 19514, 19430, 19517, 42527, 19534, 19570, 19586, 19518, 19602, 19618",
      /*  2464 */ "19632, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2478 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2492 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2506 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2520 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2534 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2548 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19668, 21199",
      /*  2562 */ "19826, 19826, 19826, 20709, 19826, 19826, 21011, 41231, 20721, 20755, 20765, 20771, 20742, 20787",
      /*  2576 */ "36165, 19826, 19826, 20311, 19826, 19826, 31277, 19826, 42553, 18563, 19826, 19826, 19826, 18557",
      /*  2590 */ "25371, 18521, 19548, 24485, 19554, 23922, 18295, 18314, 25357, 19826, 19826, 42581, 19826, 39582",
      /*  2604 */ "18339, 18355, 18371, 18407, 18434, 18458, 20376, 18500, 23624, 18626, 20380, 18504, 23628, 18520",
      /*  2618 */ "18663, 29470, 19826, 19826, 19826, 34747, 22005, 42465, 18537, 18579, 18595, 23380, 18611, 18686",
      /*  2632 */ "18706, 18521, 18655, 18682, 18702, 18722, 42520, 18741, 18663, 18760, 21120, 18824, 21114, 35088",
      /*  2646 */ "19826, 18855, 18871, 42370, 18442, 18923, 18945, 18967, 18989, 18917, 18939, 18961, 18983, 18521",
      /*  2660 */ "19786, 20801, 19892, 19005, 19026, 41470, 19064, 23303, 19080, 19098, 18637, 19116, 19082, 19100",
      /*  2674 */ "18639, 19136, 32989, 19161, 19048, 42553, 19182, 42137, 19251, 19219, 19240, 19256, 19224, 19145",
      /*  2688 */ "31661, 19272, 30536, 18551, 19295, 19316, 19300, 19321, 21100, 19337, 19371, 19387, 19424, 19417",
      /*  2702 */ "18484, 19446, 19462, 19478, 19476, 19401, 19494, 19498, 19514, 19430, 19517, 42527, 19534, 19570",
      /*  2716 */ "19586, 19518, 19602, 19618, 19632, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2730 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2744 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2758 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2772 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2786 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2800 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2814 */ "19826, 19826, 19668, 42610, 19826, 19826, 19826, 25369, 19826, 19826, 19826, 41231, 19690, 20829",
      /*  2828 */ "20833, 20849, 20895, 20909, 36165, 19826, 19826, 19807, 19826, 19826, 31277, 19826, 42553, 18563",
      /*  2842 */ "19826, 19826, 19826, 18557, 25371, 18521, 19548, 24485, 19554, 23922, 18295, 18314, 26681, 19826",
      /*  2856 */ "19826, 42581, 19826, 39582, 18339, 18355, 18371, 18407, 18434, 18458, 20376, 18500, 23624, 23613",
      /*  2870 */ "20380, 18504, 23628, 18520, 18663, 29470, 19826, 19826, 19826, 34747, 22005, 42465, 18537, 18579",
      /*  2884 */ "18595, 23380, 18611, 18686, 18706, 18521, 18655, 20938, 18702, 18722, 42520, 18741, 18663, 18760",
      /*  2898 */ "21120, 18824, 21114, 35088, 19826, 18855, 18871, 42370, 18442, 18923, 18945, 18967, 18989, 18917",
      /*  2912 */ "18939, 18961, 18983, 18521, 19786, 20801, 19892, 19005, 19026, 41470, 19064, 23303, 19080, 19098",
      /*  2926 */ "18637, 19116, 19082, 19100, 18639, 19136, 32989, 19161, 19048, 42553, 19182, 42137, 19251, 19219",
      /*  2940 */ "19240, 19256, 19224, 19145, 31661, 19272, 30536, 18551, 19295, 19316, 19300, 19321, 21100, 19337",
      /*  2954 */ "19371, 19387, 19424, 19417, 18484, 19446, 19462, 19478, 19476, 19401, 19494, 19498, 19514, 19430",
      /*  2968 */ "19517, 42527, 19534, 19570, 19586, 19518, 19602, 19618, 19632, 19826, 19826, 19826, 19826, 19826",
      /*  2982 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  2996 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3010 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3024 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3038 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3052 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3066 */ "19826, 19826, 19826, 19826, 19826, 19826, 19668, 19826, 19826, 19826, 19826, 25369, 19826, 19826",
      /*  3080 */ "19826, 41231, 19690, 33486, 33491, 20954, 39401, 20989, 36165, 19826, 19826, 19807, 19826, 19826",
      /*  3094 */ "31277, 19826, 42553, 18563, 19826, 19826, 19826, 18557, 25371, 18521, 19548, 24485, 19554, 23922",
      /*  3108 */ "18295, 18314, 26681, 19826, 19826, 19195, 19826, 39582, 18339, 18355, 18371, 18407, 18434, 18458",
      /*  3122 */ "20376, 18500, 23624, 18626, 20380, 18504, 23628, 18520, 18663, 29470, 19826, 19826, 19826, 34747",
      /*  3136 */ "22005, 42465, 18537, 18579, 18595, 23380, 18611, 18686, 18706, 18521, 18655, 18682, 18702, 18722",
      /*  3150 */ "42520, 18741, 18663, 18760, 21120, 18824, 21114, 35088, 19826, 18855, 18871, 42370, 18442, 18923",
      /*  3164 */ "18945, 18967, 18989, 18917, 18939, 18961, 18983, 18521, 19786, 20801, 19892, 19005, 19026, 41470",
      /*  3178 */ "19064, 23303, 19080, 19098, 18637, 19116, 19082, 19100, 18639, 19136, 32989, 19161, 19048, 42553",
      /*  3192 */ "19182, 42137, 19251, 19219, 19240, 19256, 19224, 19145, 31661, 19272, 30536, 18551, 19295, 19316",
      /*  3206 */ "19300, 19321, 21100, 19337, 19371, 19387, 19424, 19417, 18484, 19446, 19462, 19478, 19476, 19401",
      /*  3220 */ "19494, 19498, 19514, 19430, 19517, 42527, 19534, 19570, 19586, 19518, 19602, 19618, 19632, 19826",
      /*  3234 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3248 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3262 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3276 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3290 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3304 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3318 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19668, 40272, 19826, 19826",
      /*  3332 */ "19826, 21027, 21068, 19826, 40275, 41231, 21086, 21136, 21140, 21040, 19826, 21156, 36165, 19826",
      /*  3346 */ "19826, 19807, 19826, 19826, 31277, 19826, 42553, 18563, 19826, 19826, 19826, 18557, 25371, 18521",
      /*  3360 */ "19548, 24485, 19554, 23922, 18295, 18314, 26681, 19826, 19826, 42581, 19826, 39582, 18339, 18355",
      /*  3374 */ "18371, 18407, 18434, 18458, 20376, 18500, 23624, 18626, 20380, 18504, 23628, 18520, 18663, 29470",
      /*  3388 */ "19826, 19826, 19826, 34747, 22005, 42465, 18537, 18579, 18595, 23380, 18611, 18686, 18706, 18521",
      /*  3402 */ "18655, 18682, 18702, 18722, 42520, 18741, 18663, 18760, 21120, 18824, 21114, 35088, 19826, 18855",
      /*  3416 */ "18871, 42370, 18442, 18923, 18945, 18967, 18989, 18917, 18939, 18961, 18983, 18521, 19786, 20801",
      /*  3430 */ "19892, 19005, 19026, 41470, 19064, 23303, 19080, 19098, 18637, 19116, 19082, 19100, 18639, 19136",
      /*  3444 */ "32989, 19161, 19048, 42553, 19182, 42137, 19251, 19219, 19240, 19256, 19224, 19145, 31661, 19272",
      /*  3458 */ "30536, 18551, 19295, 19316, 19300, 19321, 21100, 19337, 19371, 19387, 19424, 19417, 18484, 19446",
      /*  3472 */ "19462, 19478, 19476, 19401, 19494, 19498, 19514, 19430, 19517, 42527, 19534, 19570, 19586, 19518",
      /*  3486 */ "19602, 19618, 19632, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3500 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3514 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3528 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3542 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3556 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3570 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3584 */ "21191, 19826, 19826, 19826, 19826, 25369, 19826, 19826, 19826, 41231, 19690, 33775, 33780, 21215",
      /*  3598 */ "40902, 21243, 36165, 19826, 19826, 19807, 19826, 19826, 31277, 19826, 22270, 21395, 19826, 19826",
      /*  3612 */ "19826, 26254, 23838, 29622, 21626, 26275, 21300, 28004, 19826, 21337, 18666, 22901, 21354, 19195",
      /*  3626 */ "25825, 30576, 21395, 29999, 19826, 19826, 26253, 40006, 29622, 29622, 29622, 29289, 22052, 22052",
      /*  3640 */ "27453, 21373, 34343, 19826, 19826, 19826, 19826, 39118, 41508, 29003, 21394, 29998, 19826, 30578",
      /*  3654 */ "27490, 29622, 29622, 29622, 26744, 22051, 22052, 22052, 22053, 34641, 21657, 33181, 19826, 19826",
      /*  3668 */ "19826, 19826, 19826, 21391, 29999, 22270, 33011, 29622, 29622, 29622, 38316, 28094, 22052, 22052",
      /*  3682 */ "22052, 21412, 19826, 19826, 19826, 19826, 38460, 26255, 32290, 30579, 29619, 21431, 29622, 25491",
      /*  3696 */ "33297, 22052, 22052, 28686, 19826, 19826, 40233, 22270, 30000, 21457, 29622, 41791, 28092, 22052",
      /*  3710 */ "28783, 25411, 19826, 19826, 21451, 29088, 29621, 21435, 22052, 38559, 19826, 39599, 21473, 39640",
      /*  3724 */ "21498, 21516, 40865, 19826, 25146, 21541, 40801, 32457, 21613, 21648, 21580, 21673, 40013, 21676",
      /*  3738 */ "31252, 26925, 21415, 25703, 25703, 36697, 32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3752 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3766 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3780 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3794 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3808 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3822 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  3836 */ "19826, 19826, 19826, 19826, 19668, 19826, 19826, 19826, 19826, 25369, 19826, 19826, 19826, 21692",
      /*  3850 */ "19690, 19826, 19826, 19826, 25879, 21708, 36165, 19826, 19826, 19807, 19826, 19826, 42306, 19826",
      /*  3864 */ "22270, 21395, 19826, 19826, 19826, 26254, 23838, 29622, 21626, 26275, 21767, 28004, 19826, 19826",
      /*  3878 */ "18666, 19826, 19826, 42581, 19826, 30576, 21395, 29999, 19826, 19826, 26253, 40006, 29622, 29622",
      /*  3892 */ "29622, 29289, 22052, 22052, 26274, 21373, 34343, 19826, 19826, 19826, 19826, 39118, 19826, 19826",
      /*  3906 */ "21394, 29998, 19826, 30578, 27490, 29622, 29622, 29622, 26744, 22051, 22052, 22052, 22053, 34641",
      /*  3920 */ "34343, 19826, 19826, 19826, 19826, 19826, 19826, 26256, 29999, 22270, 33011, 29622, 29622, 29622",
      /*  3934 */ "38316, 28094, 22052, 22052, 22052, 21412, 19826, 19826, 19826, 19826, 19826, 26255, 32290, 30579",
      /*  3948 */ "29619, 29622, 29622, 25491, 22051, 22052, 22052, 28686, 19826, 19826, 19826, 22270, 30000, 21457",
      /*  3962 */ "29622, 29622, 28092, 22052, 26763, 34343, 19826, 19826, 30577, 29088, 29621, 21435, 22052, 28789",
      /*  3976 */ "19826, 19826, 30580, 26144, 29622, 35765, 40865, 19826, 25146, 21433, 22052, 32457, 25154, 30906",
      /*  3990 */ "40010, 41814, 40013, 21676, 26047, 26925, 21415, 25703, 25703, 36697, 32449, 19826, 19826, 19826",
      /*  4004 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4018 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4032 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4046 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4060 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4074 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4088 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19668, 21818, 19826, 19826, 19826, 25369",
      /*  4102 */ "19826, 19826, 19826, 41231, 19690, 34846, 21794, 21808, 22972, 21840, 36165, 19826, 19826, 19807",
      /*  4116 */ "19826, 19826, 31277, 41603, 42553, 18563, 21869, 19826, 19826, 18557, 25371, 18521, 19548, 24485",
      /*  4130 */ "19554, 23922, 18295, 18314, 26681, 19826, 19826, 42581, 19826, 39582, 18339, 18355, 18371, 18407",
      /*  4144 */ "18434, 18458, 20376, 18500, 23624, 18626, 20380, 18504, 23628, 18520, 18663, 29470, 19826, 19826",
      /*  4158 */ "19826, 34747, 22005, 42465, 18537, 18579, 18595, 23380, 18611, 18686, 18706, 18521, 18655, 18682",
      /*  4172 */ "18702, 18722, 42520, 18741, 18663, 18760, 21120, 18824, 21114, 35088, 19826, 18855, 18871, 42370",
      /*  4186 */ "18442, 18923, 18945, 18967, 18989, 18917, 18939, 18961, 18983, 18521, 19786, 20801, 19892, 19005",
      /*  4200 */ "19026, 41470, 19064, 23303, 19080, 19098, 18637, 19116, 19082, 19100, 18639, 19136, 32989, 19161",
      /*  4214 */ "19048, 42553, 19182, 42137, 19251, 19219, 19240, 19256, 19224, 19145, 31661, 19272, 30536, 18551",
      /*  4228 */ "19295, 19316, 19300, 19321, 21100, 19337, 19371, 19387, 19424, 19417, 18484, 19446, 19462, 19478",
      /*  4242 */ "19476, 19401, 19494, 19498, 19514, 19430, 19517, 42527, 19534, 19570, 19586, 19518, 19602, 19618",
      /*  4256 */ "19632, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4270 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4284 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4298 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4312 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4326 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4340 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19668, 21887",
      /*  4354 */ "19826, 19826, 19826, 25369, 19826, 19826, 19826, 21175, 19690, 21906, 19826, 19826, 23346, 21927",
      /*  4368 */ "24512, 19826, 19826, 19807, 19826, 19826, 21169, 19826, 22270, 21395, 19826, 19826, 19826, 26254",
      /*  4382 */ "23838, 29622, 21626, 26275, 21986, 28004, 19826, 19826, 18666, 19826, 19826, 29688, 19826, 30576",
      /*  4396 */ "21395, 29999, 19826, 19826, 26253, 40006, 29622, 29622, 29622, 29289, 22052, 22052, 26274, 21373",
      /*  4410 */ "29326, 19826, 19826, 19826, 19826, 24026, 22021, 19826, 21394, 29998, 19826, 30578, 27490, 29622",
      /*  4424 */ "29622, 29622, 26744, 22051, 22052, 22052, 22053, 34641, 34736, 19826, 19826, 19826, 19826, 27605",
      /*  4438 */ "19826, 26256, 29999, 22270, 33011, 29622, 29622, 29622, 37465, 22048, 22052, 22052, 22052, 21412",
      /*  4452 */ "22069, 19826, 19826, 19826, 19826, 26255, 32290, 30579, 29619, 29622, 29622, 32321, 22051, 22052",
      /*  4466 */ "22052, 28686, 19826, 19826, 19826, 22270, 30000, 21457, 29622, 29622, 22088, 22052, 26763, 34343",
      /*  4480 */ "19826, 19826, 30577, 29088, 29621, 21435, 22052, 28789, 19826, 19826, 30580, 26144, 29622, 35765",
      /*  4494 */ "40865, 19826, 25146, 21433, 22052, 32457, 25154, 30906, 40010, 41814, 40013, 21676, 26047, 26925",
      /*  4508 */ "21415, 25703, 25703, 36697, 32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4522 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4536 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4550 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4564 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4578 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4592 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4606 */ "19826, 19826, 19668, 38442, 19826, 19826, 19826, 22109, 22127, 19826, 42471, 41231, 22148, 31284",
      /*  4620 */ "22185, 22199, 19826, 22234, 32978, 19826, 19826, 41860, 22269, 19826, 31277, 19826, 42553, 18563",
      /*  4634 */ "19826, 19826, 19826, 18557, 20137, 23024, 22885, 22936, 22287, 22424, 18295, 18314, 23796, 19826",
      /*  4648 */ "19826, 42581, 19826, 39582, 18339, 18355, 18371, 18407, 18434, 22314, 22754, 22356, 23073, 22329",
      /*  4662 */ "22594, 22386, 23245, 22412, 22898, 29470, 19826, 19826, 19826, 34747, 22005, 42465, 18537, 18579",
      /*  4676 */ "18595, 23380, 22440, 23029, 22471, 23024, 23292, 22502, 22542, 22932, 22396, 22518, 22898, 18760",
      /*  4690 */ "21120, 18824, 21114, 35088, 19826, 18855, 18871, 42370, 23312, 22567, 23002, 22610, 22370, 22626",
      /*  4704 */ "22530, 22822, 22655, 22720, 19786, 20801, 19892, 19005, 19026, 41470, 19064, 23303, 22743, 22770",
      /*  4718 */ "23082, 22786, 22298, 22807, 22551, 22847, 32989, 19161, 19048, 42553, 19182, 42342, 22486, 22872",
      /*  4732 */ "22917, 22639, 23060, 22856, 31661, 19272, 30536, 18551, 42352, 22582, 22670, 22952, 21100, 19337",
      /*  4746 */ "19371, 22988, 23018, 23045, 22831, 19446, 23098, 22455, 23114, 23130, 23166, 22685, 23182, 22727",
      /*  4760 */ "23185, 22892, 23201, 22340, 23217, 23233, 23261, 23277, 23328, 19826, 19826, 19826, 19826, 19826",
      /*  4774 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4788 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4802 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4816 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4830 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4844 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  4858 */ "19826, 19826, 19826, 19826, 19826, 19826, 19668, 39780, 19826, 19826, 19826, 23362, 23373, 19826",
      /*  4872 */ "19826, 41231, 23396, 42588, 23437, 23443, 19826, 23459, 36165, 19826, 19826, 19807, 19826, 19826",
      /*  4886 */ "31277, 19826, 42553, 18563, 19826, 19826, 19826, 18557, 25371, 18521, 19548, 24485, 19554, 23922",
      /*  4900 */ "18295, 18314, 26681, 19826, 19826, 42581, 19826, 39582, 18339, 18355, 18371, 18407, 18434, 18458",
      /*  4914 */ "20376, 18500, 23624, 18626, 20380, 18504, 23628, 18520, 18663, 29470, 19826, 19826, 19826, 34747",
      /*  4928 */ "23494, 42465, 18537, 18579, 18595, 23380, 18611, 18686, 18706, 18521, 18655, 18682, 18702, 18722",
      /*  4942 */ "42520, 18741, 23536, 18760, 21120, 18824, 21114, 42193, 19826, 18855, 18871, 42370, 18442, 18923",
      /*  4956 */ "18945, 18967, 18989, 18917, 18939, 18961, 18983, 18521, 23566, 20801, 19892, 19005, 19026, 41470",
      /*  4970 */ "19064, 23303, 19080, 19098, 18637, 23582, 19082, 19100, 18639, 19136, 32989, 19161, 19048, 42553",
      /*  4984 */ "19182, 42137, 19251, 19219, 23598, 19256, 19224, 19145, 31661, 19272, 30536, 18551, 19295, 19316",
      /*  4998 */ "19300, 19321, 21100, 19337, 19371, 19387, 19424, 19417, 18484, 19446, 19462, 19478, 19476, 19401",
      /*  5012 */ "19494, 19498, 19514, 19430, 19517, 42527, 19534, 19570, 19586, 19518, 19602, 19618, 19632, 19826",
      /*  5026 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5040 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5054 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5068 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5082 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5096 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5110 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19668, 19826, 19826, 19826",
      /*  5124 */ "19826, 25369, 19826, 19826, 19826, 19826, 23644, 35874, 35879, 23665, 26344, 23700, 36165, 19826",
      /*  5138 */ "19826, 19807, 19826, 19826, 31277, 19826, 42553, 18563, 23735, 19826, 19826, 18557, 25371, 18521",
      /*  5152 */ "19548, 24485, 23754, 23922, 18295, 18314, 26681, 19826, 19826, 42581, 19826, 39582, 18339, 18355",
      /*  5166 */ "18371, 18407, 18434, 18458, 20376, 18500, 23624, 18626, 20380, 18504, 23628, 18520, 18663, 29470",
      /*  5180 */ "19826, 19826, 19826, 34747, 22005, 42465, 18537, 18579, 18595, 23380, 18611, 18686, 18706, 18521",
      /*  5194 */ "18655, 18682, 18702, 18722, 42520, 18741, 18663, 18760, 21120, 18824, 21114, 35088, 19826, 18855",
      /*  5208 */ "18871, 42370, 18442, 18923, 18945, 18967, 18989, 18917, 18939, 18961, 18983, 18521, 19786, 20801",
      /*  5222 */ "19892, 19005, 19026, 41470, 19064, 23303, 19080, 19098, 18637, 19116, 19082, 19100, 18639, 19136",
      /*  5236 */ "32989, 19161, 19048, 42553, 19182, 42137, 19251, 19219, 19240, 19256, 19224, 19145, 31661, 19272",
      /*  5250 */ "30536, 18551, 19295, 19316, 19300, 19321, 21100, 19337, 19371, 19387, 19424, 19417, 18484, 19446",
      /*  5264 */ "19462, 19478, 19476, 19401, 19494, 19498, 19514, 19430, 19517, 42527, 19534, 19570, 19586, 19518",
      /*  5278 */ "19602, 19618, 19632, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5292 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5306 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5320 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5334 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5348 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5362 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5376 */ "23782, 19826, 23837, 19826, 19826, 25369, 19826, 19826, 19826, 41231, 19690, 35512, 23812, 23826",
      /*  5390 */ "19826, 23854, 37493, 19826, 19826, 19807, 19826, 19826, 31277, 19826, 42553, 18563, 23889, 19826",
      /*  5404 */ "19826, 18557, 25371, 18521, 19548, 24485, 23910, 23922, 18295, 18314, 26681, 19826, 19826, 42581",
      /*  5418 */ "19826, 39582, 18339, 18355, 18371, 18407, 18434, 18458, 20376, 18500, 23624, 18626, 20380, 18504",
      /*  5432 */ "23628, 18520, 18663, 29470, 19826, 19826, 19826, 34747, 22005, 42465, 18537, 18579, 18595, 23380",
      /*  5446 */ "18611, 18686, 18706, 18521, 18655, 18682, 18702, 18722, 42520, 18741, 18663, 18760, 21120, 18824",
      /*  5460 */ "21114, 35088, 19826, 18855, 18871, 42370, 18442, 18923, 18945, 18967, 18989, 18917, 18939, 18961",
      /*  5474 */ "18983, 18521, 19786, 20801, 19892, 19005, 19026, 41470, 19064, 23303, 19080, 19098, 18637, 19116",
      /*  5488 */ "19082, 19100, 18639, 19136, 32989, 19161, 19048, 42553, 19182, 42137, 19251, 19219, 19240, 19256",
      /*  5502 */ "19224, 19145, 31661, 19272, 30536, 18551, 19295, 19316, 19300, 19321, 21100, 19337, 19371, 19387",
      /*  5516 */ "19424, 19417, 18484, 19446, 19462, 19478, 19476, 19401, 19494, 19498, 19514, 19430, 19517, 42527",
      /*  5530 */ "19534, 19570, 19586, 19518, 19602, 19618, 19632, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5544 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5558 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5572 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5586 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5600 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5614 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5628 */ "19826, 19826, 19826, 19826, 23938, 36558, 19826, 19826, 19826, 25369, 19826, 19826, 19826, 41231",
      /*  5642 */ "19690, 37848, 37853, 23989, 19826, 24005, 36774, 19826, 19826, 19807, 19826, 19826, 31277, 19826",
      /*  5656 */ "42553, 18563, 24021, 19826, 19826, 18557, 25371, 18521, 19548, 24485, 19554, 23766, 18295, 18314",
      /*  5670 */ "26681, 19826, 19826, 42581, 19826, 39582, 18339, 18355, 18371, 18407, 18434, 18458, 20376, 18500",
      /*  5684 */ "23624, 18626, 20380, 18504, 23628, 18520, 18663, 29470, 19826, 19826, 19826, 34747, 22005, 42465",
      /*  5698 */ "18537, 18579, 18595, 23380, 18611, 18686, 18706, 18521, 18655, 18682, 18702, 18722, 42520, 18741",
      /*  5712 */ "18663, 18760, 21120, 18824, 21114, 35088, 19826, 18855, 18871, 42370, 18442, 18923, 18945, 18967",
      /*  5726 */ "18989, 18917, 18939, 18961, 18983, 18521, 19786, 20801, 19892, 19005, 19026, 41470, 19064, 23303",
      /*  5740 */ "19080, 19098, 18637, 19116, 19082, 19100, 18639, 19136, 32989, 19161, 19048, 42553, 19182, 42137",
      /*  5754 */ "19251, 19219, 19240, 19256, 19224, 19145, 31661, 19272, 30536, 18551, 19295, 19316, 19300, 19321",
      /*  5768 */ "21100, 19337, 19371, 19387, 19424, 19417, 18484, 19446, 19462, 19478, 19476, 19401, 19494, 19498",
      /*  5782 */ "19514, 19430, 19517, 42527, 19534, 19570, 19586, 19518, 19602, 19618, 19632, 19826, 19826, 19826",
      /*  5796 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5810 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5824 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5838 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5852 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5866 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  5880 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 24042, 19826, 19826, 19826, 19826, 24058",
      /*  5894 */ "19826, 19826, 19826, 41231, 19690, 41491, 38836, 19826, 18391, 24093, 36165, 19826, 19826, 19807",
      /*  5908 */ "19826, 19826, 31277, 41839, 42553, 18563, 19826, 19826, 19826, 18557, 25371, 18521, 19548, 42218",
      /*  5922 */ "24122, 23922, 18295, 18314, 26681, 19826, 19826, 42581, 19826, 39582, 18339, 18355, 18371, 18407",
      /*  5936 */ "18434, 18458, 20376, 18500, 23624, 18626, 20380, 18504, 23628, 18520, 18663, 29470, 19826, 19826",
      /*  5950 */ "19826, 34747, 22005, 42465, 18537, 18579, 18595, 23380, 18611, 18686, 18706, 18521, 18655, 18682",
      /*  5964 */ "18702, 18722, 42520, 18741, 18663, 18760, 21120, 18824, 21114, 35088, 19826, 18855, 18871, 42370",
      /*  5978 */ "18442, 18923, 18945, 18967, 18989, 18917, 18939, 18961, 18983, 18521, 19786, 20801, 19892, 19005",
      /*  5992 */ "19026, 41470, 19064, 23303, 19080, 19098, 18637, 19116, 19082, 19100, 18639, 19136, 32989, 19161",
      /*  6006 */ "19048, 42553, 19182, 42137, 19251, 19219, 19240, 19256, 19224, 19145, 31661, 19272, 30536, 18551",
      /*  6020 */ "19295, 19316, 19300, 19321, 21100, 19337, 19371, 19387, 19424, 19417, 18484, 19446, 19462, 19478",
      /*  6034 */ "19476, 19401, 19494, 19498, 19514, 19430, 19517, 42527, 19534, 19570, 19586, 19518, 19602, 19618",
      /*  6048 */ "19632, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6062 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6076 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6090 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6104 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6118 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6132 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19668, 19826",
      /*  6146 */ "19826, 19826, 19826, 25369, 19826, 19826, 19826, 41231, 19690, 19826, 19826, 19826, 33189, 24150",
      /*  6160 */ "36165, 19826, 19826, 19807, 19826, 19826, 31277, 19826, 42553, 18563, 19826, 19826, 19826, 18557",
      /*  6174 */ "25371, 18521, 19548, 24485, 19554, 23922, 18295, 18314, 26681, 19826, 19826, 42581, 19826, 39582",
      /*  6188 */ "18339, 18355, 18371, 18407, 18434, 18458, 20376, 18500, 23624, 18626, 20380, 18504, 23628, 18520",
      /*  6202 */ "18663, 29470, 19826, 19826, 19826, 34747, 22005, 42465, 18537, 18579, 18595, 23380, 18611, 18686",
      /*  6216 */ "18706, 18521, 18655, 18682, 18702, 18722, 42520, 18741, 18663, 18760, 21120, 18824, 21114, 35088",
      /*  6230 */ "19826, 18855, 18871, 42370, 18442, 18923, 18945, 18967, 18989, 18917, 18939, 18961, 18983, 18521",
      /*  6244 */ "19786, 20801, 19892, 19005, 19026, 41470, 19064, 23303, 19080, 19098, 18637, 19116, 19082, 19100",
      /*  6258 */ "18639, 19136, 32989, 19161, 19048, 42553, 19182, 42137, 19251, 19219, 19240, 19256, 19224, 19145",
      /*  6272 */ "31661, 19272, 30536, 18551, 19295, 19316, 19300, 19321, 21100, 19337, 19371, 19387, 19424, 19417",
      /*  6286 */ "18484, 19446, 19462, 19478, 19476, 19401, 19494, 19498, 19514, 19430, 19517, 42527, 19534, 19570",
      /*  6300 */ "19586, 19518, 19602, 19618, 19632, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6314 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6328 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6342 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6356 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6370 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6384 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6398 */ "19826, 19826, 24185, 19826, 19826, 19826, 19826, 25369, 19826, 19826, 19826, 41231, 24207, 32293",
      /*  6412 */ "22271, 40632, 21375, 36985, 21571, 19826, 19826, 19807, 19826, 19826, 19826, 19826, 22270, 21395",
      /*  6426 */ "19826, 19826, 19826, 26254, 23838, 29622, 21626, 26275, 21300, 28004, 19826, 19826, 18666, 19826",
      /*  6440 */ "19826, 19826, 19826, 30576, 21395, 29999, 19826, 19826, 26253, 41974, 29622, 29622, 29622, 29590",
      /*  6454 */ "22052, 22052, 26274, 21373, 34343, 19826, 19826, 19826, 19826, 19826, 25656, 19826, 21394, 29998",
      /*  6468 */ "19826, 30578, 27490, 29622, 29622, 29622, 27416, 27372, 22052, 22052, 22053, 34641, 30525, 19826",
      /*  6482 */ "19826, 19826, 19826, 27605, 19826, 26256, 29999, 22270, 33011, 29622, 29622, 29622, 38316, 28094",
      /*  6496 */ "22052, 22052, 22052, 21412, 22069, 19826, 19826, 19826, 24228, 26255, 32290, 30579, 29619, 29622",
      /*  6510 */ "29622, 25199, 22051, 22052, 22052, 28686, 19826, 19826, 19826, 22270, 30000, 21457, 29622, 29622",
      /*  6524 */ "22088, 22052, 26763, 34343, 19826, 23150, 30577, 29088, 29621, 21435, 22052, 28789, 19826, 19826",
      /*  6538 */ "30580, 26144, 29622, 35765, 40865, 19826, 25146, 21433, 22052, 32457, 25154, 30906, 40010, 41814",
      /*  6552 */ "40013, 21676, 26047, 26925, 21415, 25703, 25703, 36697, 32449, 19826, 19826, 19826, 19826, 19826",
      /*  6566 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6580 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6594 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6608 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6622 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6636 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6650 */ "19826, 19826, 19826, 19826, 19826, 19826, 24185, 19826, 19826, 19826, 19826, 25369, 19826, 19826",
      /*  6664 */ "19826, 41231, 24207, 32293, 22271, 40632, 21375, 36985, 21571, 19826, 19826, 19807, 19826, 19826",
      /*  6678 */ "19826, 19826, 22270, 21395, 19826, 19826, 19826, 26254, 23838, 29622, 21626, 26275, 21300, 28004",
      /*  6692 */ "19826, 19826, 18666, 19826, 19826, 19826, 19826, 30576, 21395, 29999, 19826, 19826, 26253, 41974",
      /*  6706 */ "29622, 29622, 29622, 29590, 22052, 22052, 26274, 21373, 34343, 19826, 19826, 19826, 19826, 19826",
      /*  6720 */ "25656, 19826, 21394, 29998, 19826, 30578, 27490, 29622, 29622, 29622, 27416, 27372, 22052, 22052",
      /*  6734 */ "22053, 34641, 30525, 19826, 19826, 19826, 19826, 27605, 19826, 26256, 29999, 22270, 33011, 29622",
      /*  6748 */ "29622, 29622, 38316, 28094, 22052, 22052, 22052, 21412, 22069, 19826, 19826, 19826, 19826, 26255",
      /*  6762 */ "32290, 30579, 29619, 29622, 29622, 25199, 22051, 22052, 22052, 28686, 19826, 19826, 19826, 22270",
      /*  6776 */ "30000, 21457, 29622, 29622, 22088, 22052, 26763, 34343, 19826, 19826, 30577, 29088, 29621, 21435",
      /*  6790 */ "22052, 28789, 19826, 19826, 30580, 26144, 29622, 35765, 40865, 19826, 25146, 21433, 22052, 32457",
      /*  6804 */ "25154, 30906, 40010, 41814, 40013, 21676, 26047, 26925, 21415, 25703, 25703, 36697, 32449, 19826",
      /*  6818 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6832 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6846 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6860 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6874 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6888 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  6902 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 24185, 19826, 19826, 19826",
      /*  6916 */ "19826, 25369, 19826, 19826, 19826, 41231, 24207, 32293, 22271, 40632, 21375, 36985, 21571, 19826",
      /*  6930 */ "19826, 19807, 19826, 19826, 19826, 19826, 22270, 21395, 19826, 19826, 19826, 26254, 23838, 29622",
      /*  6944 */ "21626, 26275, 21300, 28004, 19826, 19826, 18666, 19826, 19826, 19826, 19826, 30576, 21395, 29999",
      /*  6958 */ "19826, 19826, 26253, 41974, 29622, 29622, 29622, 29590, 22052, 22052, 26274, 21373, 34343, 19826",
      /*  6972 */ "19826, 19826, 19826, 19826, 25656, 24249, 21394, 29998, 19826, 30578, 27490, 29622, 29622, 29622",
      /*  6986 */ "27416, 27372, 22052, 22052, 22053, 34641, 30525, 19826, 19826, 19826, 19826, 27605, 19826, 26256",
      /*  7000 */ "29999, 22270, 33011, 29622, 29622, 29622, 38316, 28094, 22052, 22052, 22052, 21412, 22069, 19826",
      /*  7014 */ "19826, 19826, 19826, 26255, 32290, 30579, 29619, 29622, 29622, 25199, 22051, 22052, 22052, 28686",
      /*  7028 */ "19826, 19826, 19826, 22270, 30000, 21457, 29622, 29622, 22088, 22052, 26763, 34343, 19826, 19826",
      /*  7042 */ "30577, 29088, 29621, 21435, 22052, 28789, 19826, 19826, 30580, 26144, 29622, 35765, 40865, 19826",
      /*  7056 */ "25146, 21433, 22052, 32457, 25154, 30906, 40010, 41814, 40013, 21676, 26047, 26925, 21415, 25703",
      /*  7070 */ "25703, 36697, 32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7084 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7098 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7112 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7126 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7140 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7154 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7168 */ "24185, 19826, 19826, 19826, 19826, 25369, 19826, 19826, 19826, 41231, 24207, 32293, 22271, 40632",
      /*  7182 */ "21375, 36985, 21571, 19826, 19826, 19807, 19826, 19826, 19826, 19826, 22270, 21395, 19826, 19826",
      /*  7196 */ "19826, 26254, 23838, 29622, 21626, 26275, 21300, 28004, 19826, 19826, 18666, 19826, 19826, 19826",
      /*  7210 */ "19826, 30576, 21395, 29999, 19826, 19826, 26253, 41974, 29622, 29622, 29622, 29590, 22052, 22052",
      /*  7224 */ "26274, 21373, 34343, 19826, 19826, 19826, 19826, 19826, 25656, 19826, 21394, 29998, 19826, 30578",
      /*  7238 */ "27490, 29622, 29622, 29622, 27416, 27372, 22052, 22052, 22053, 34641, 30525, 19826, 19826, 19826",
      /*  7252 */ "19826, 27605, 24266, 26256, 29999, 22270, 33011, 29622, 29622, 29622, 38316, 28094, 22052, 22052",
      /*  7266 */ "22052, 21412, 22069, 19826, 19826, 19826, 19826, 26255, 32290, 30579, 29619, 29622, 29622, 25199",
      /*  7280 */ "22051, 22052, 22052, 28686, 19826, 19826, 19826, 22270, 30000, 21457, 29622, 29622, 22088, 22052",
      /*  7294 */ "26763, 34343, 19826, 19826, 30577, 29088, 29621, 21435, 22052, 28789, 19826, 19826, 30580, 26144",
      /*  7308 */ "29622, 35765, 40865, 19826, 25146, 21433, 22052, 32457, 25154, 30906, 40010, 41814, 40013, 21676",
      /*  7322 */ "26047, 26925, 21415, 25703, 25703, 36697, 32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7336 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7350 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7364 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7378 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7392 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7406 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7420 */ "19826, 19826, 19826, 19826, 24185, 19826, 19826, 19826, 19826, 25369, 19826, 19826, 19826, 41231",
      /*  7434 */ "24207, 32293, 22271, 40632, 21375, 36985, 21571, 19826, 19826, 19807, 19826, 19826, 29463, 19826",
      /*  7448 */ "22270, 21395, 19826, 19826, 19826, 26254, 23838, 29622, 21626, 26275, 21300, 28004, 19826, 19826",
      /*  7462 */ "18666, 19826, 19826, 29463, 19826, 30576, 21395, 29999, 19826, 19826, 26253, 41974, 29622, 29622",
      /*  7476 */ "29622, 29590, 22052, 22052, 26274, 21373, 34343, 19826, 19826, 19826, 19826, 19826, 25656, 19826",
      /*  7490 */ "21394, 29998, 19826, 30578, 27490, 29622, 29622, 29622, 27416, 27372, 22052, 22052, 22053, 34641",
      /*  7504 */ "30525, 19826, 19826, 19826, 19826, 27605, 19826, 26256, 29999, 22270, 33011, 29622, 29622, 29622",
      /*  7518 */ "38316, 28094, 22052, 22052, 22052, 21412, 22069, 19826, 19826, 19826, 19826, 26255, 32290, 30579",
      /*  7532 */ "29619, 29622, 29622, 25199, 22051, 22052, 22052, 28686, 19826, 19826, 19826, 22270, 30000, 21457",
      /*  7546 */ "29622, 29622, 22088, 22052, 26763, 34343, 19826, 19826, 30577, 29088, 29621, 21435, 22052, 28789",
      /*  7560 */ "19826, 19826, 30580, 26144, 29622, 35765, 40865, 19826, 25146, 21433, 22052, 32457, 25154, 30906",
      /*  7574 */ "40010, 41814, 40013, 21676, 26047, 26925, 21415, 25703, 25703, 36697, 32449, 19826, 19826, 19826",
      /*  7588 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7602 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7616 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7630 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7644 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7658 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7672 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 24185, 19826, 19826, 19826, 19826, 25369",
      /*  7686 */ "19826, 19826, 19826, 41231, 24207, 32293, 22271, 40632, 21375, 36985, 21571, 19826, 19826, 19807",
      /*  7700 */ "19826, 19826, 19826, 19826, 22270, 21395, 19826, 19826, 19826, 26254, 23838, 29622, 21626, 26275",
      /*  7714 */ "21300, 28004, 19826, 19826, 18666, 19826, 19826, 19826, 19826, 30576, 21395, 29999, 19826, 19826",
      /*  7728 */ "26253, 41974, 29622, 29622, 29622, 29590, 22052, 22052, 26274, 21373, 34343, 19826, 19826, 19826",
      /*  7742 */ "19826, 19826, 19826, 19826, 21394, 29998, 19826, 30578, 27490, 29622, 29622, 29622, 27416, 27372",
      /*  7756 */ "22052, 22052, 22053, 34641, 34343, 19826, 19826, 19826, 19826, 19826, 19826, 26256, 29999, 22270",
      /*  7770 */ "33011, 29622, 29622, 29622, 38316, 28094, 22052, 22052, 22052, 21412, 19826, 19826, 19826, 19826",
      /*  7784 */ "19826, 26255, 32290, 30579, 29619, 29622, 29622, 25491, 22051, 22052, 22052, 28686, 19826, 19826",
      /*  7798 */ "19826, 22270, 30000, 21457, 29622, 29622, 28092, 22052, 26763, 34343, 19826, 19826, 30577, 29088",
      /*  7812 */ "29621, 21435, 22052, 28789, 19826, 19826, 30580, 26144, 29622, 35765, 40865, 19826, 25146, 21433",
      /*  7826 */ "22052, 32457, 25154, 30906, 40010, 41814, 40013, 21676, 26047, 26925, 21415, 25703, 25703, 36697",
      /*  7840 */ "32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7854 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7868 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7882 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7896 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7910 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  7924 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 24185, 19826",
      /*  7938 */ "19826, 19826, 19826, 25369, 19826, 19826, 19826, 41231, 24207, 32293, 22271, 40632, 21375, 36985",
      /*  7952 */ "21571, 19826, 19826, 19807, 19826, 19826, 19826, 19826, 22270, 21395, 19826, 19826, 19826, 26254",
      /*  7966 */ "23838, 29622, 21626, 26275, 21300, 21998, 19826, 19826, 18666, 19826, 19826, 19826, 19826, 30576",
      /*  7980 */ "21395, 29999, 19826, 19826, 26253, 41974, 29622, 29622, 29622, 29590, 22052, 22052, 26274, 21373",
      /*  7994 */ "34343, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 21394, 29998, 19826, 30578, 27490, 29622",
      /*  8008 */ "29622, 29622, 27416, 27372, 22052, 22052, 22053, 34641, 34343, 19826, 19826, 19826, 19826, 19826",
      /*  8022 */ "19826, 26256, 29999, 22270, 33011, 29622, 29622, 29622, 38316, 28094, 22052, 22052, 22052, 21412",
      /*  8036 */ "19826, 19826, 19826, 19826, 19826, 26255, 32290, 30579, 29619, 29622, 29622, 25491, 22051, 22052",
      /*  8050 */ "22052, 28686, 19826, 19826, 19826, 22270, 30000, 21457, 29622, 29622, 28092, 22052, 26763, 34343",
      /*  8064 */ "19826, 19826, 30577, 29088, 29621, 21435, 22052, 28789, 19826, 19826, 30580, 26144, 29622, 35765",
      /*  8078 */ "40865, 19826, 25146, 21433, 22052, 32457, 25154, 30906, 40010, 41814, 40013, 21676, 26047, 26925",
      /*  8092 */ "21415, 25703, 25703, 36697, 32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8106 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8120 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8134 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8148 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8162 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8176 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8190 */ "19826, 19826, 24185, 19826, 19826, 19826, 19826, 25369, 19826, 19826, 19826, 41231, 24207, 32293",
      /*  8204 */ "22271, 40632, 21375, 28124, 21571, 19826, 19826, 19807, 19826, 19826, 19826, 19826, 22270, 21395",
      /*  8218 */ "19826, 19826, 19826, 26254, 23838, 29622, 21626, 26275, 21300, 28004, 19826, 19826, 18666, 19826",
      /*  8232 */ "19826, 19826, 19826, 30576, 21395, 29999, 19826, 19826, 26253, 41974, 29622, 29622, 29622, 29590",
      /*  8246 */ "22052, 22052, 26274, 21373, 34343, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 21394, 29998",
      /*  8260 */ "19826, 30578, 27490, 29622, 29622, 29622, 27416, 27372, 22052, 22052, 22053, 34641, 34343, 19826",
      /*  8274 */ "19826, 19826, 19826, 19826, 19826, 26256, 29999, 22270, 33011, 29622, 29622, 29622, 38316, 28094",
      /*  8288 */ "22052, 22052, 22052, 21412, 19826, 19826, 19826, 19826, 19826, 26255, 32290, 30579, 29619, 29622",
      /*  8302 */ "29622, 25491, 22051, 22052, 22052, 28686, 19826, 19826, 19826, 22270, 30000, 21457, 29622, 29622",
      /*  8316 */ "28092, 22052, 26763, 34343, 19826, 19826, 30577, 29088, 29621, 21435, 22052, 28789, 19826, 19826",
      /*  8330 */ "30580, 26144, 29622, 35765, 40865, 19826, 25146, 21433, 22052, 32457, 25154, 30906, 40010, 41814",
      /*  8344 */ "40013, 21676, 26047, 26925, 21415, 25703, 25703, 36697, 32449, 19826, 19826, 19826, 19826, 19826",
      /*  8358 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8372 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8386 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8400 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8414 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8428 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8442 */ "19826, 19826, 19826, 19826, 19826, 19826, 24185, 19826, 19826, 19826, 19826, 25369, 19826, 19826",
      /*  8456 */ "19826, 41231, 24286, 32293, 22271, 40632, 21375, 36985, 21571, 19826, 19826, 19807, 19826, 19826",
      /*  8470 */ "19826, 19826, 22270, 21395, 19826, 19826, 19826, 26254, 23838, 29622, 21626, 26275, 21300, 28004",
      /*  8484 */ "19826, 19826, 18666, 19826, 19826, 19826, 19826, 24321, 21395, 29999, 19826, 19826, 26253, 41974",
      /*  8498 */ "29622, 29622, 29622, 29590, 22052, 22052, 26274, 21373, 34343, 19826, 19826, 19826, 19826, 19826",
      /*  8512 */ "19826, 19826, 21394, 29998, 19826, 30578, 27490, 29622, 29622, 29622, 27416, 27372, 22052, 22052",
      /*  8526 */ "22053, 34641, 34343, 19826, 19826, 19826, 19826, 19826, 19826, 26256, 29999, 22270, 33011, 29622",
      /*  8540 */ "29622, 29622, 38316, 28094, 22052, 22052, 22052, 21412, 19826, 19826, 19826, 19826, 19826, 26255",
      /*  8554 */ "32290, 30579, 29619, 29622, 29622, 25491, 22051, 22052, 22052, 28686, 19826, 19826, 19826, 22270",
      /*  8568 */ "30000, 21457, 29622, 29622, 28092, 22052, 26763, 34343, 19826, 19826, 30577, 29088, 29621, 21435",
      /*  8582 */ "22052, 28789, 19826, 19826, 30580, 26144, 29622, 35765, 40865, 19826, 25146, 21433, 22052, 32457",
      /*  8596 */ "25154, 30906, 40010, 41814, 40013, 21676, 26047, 26925, 21415, 25703, 25703, 36697, 32449, 19826",
      /*  8610 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8624 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8638 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8652 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8666 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8680 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8694 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 24185, 19826, 19826, 19826",
      /*  8708 */ "19826, 25369, 19826, 19826, 19826, 41231, 24207, 32293, 22271, 36564, 24342, 24356, 21571, 19826",
      /*  8722 */ "19826, 19807, 19826, 19826, 19826, 19826, 22270, 21395, 19826, 19826, 19826, 26254, 23838, 29622",
      /*  8736 */ "21626, 26275, 21300, 28004, 19826, 19826, 18666, 19826, 19826, 19826, 19826, 30576, 21395, 29999",
      /*  8750 */ "19826, 19826, 26253, 41974, 29622, 29622, 29622, 29590, 22052, 22052, 26274, 21373, 34343, 19826",
      /*  8764 */ "19826, 19826, 19826, 19826, 19826, 19826, 21394, 29998, 19826, 30578, 27490, 29622, 29622, 29622",
      /*  8778 */ "27416, 27372, 22052, 22052, 22053, 34641, 34343, 19826, 19826, 19826, 19826, 19826, 19826, 26256",
      /*  8792 */ "29999, 22270, 33011, 29622, 29622, 29622, 38316, 28094, 22052, 22052, 22052, 21412, 19826, 19826",
      /*  8806 */ "19826, 19826, 19826, 26255, 32290, 30579, 29619, 29622, 29622, 25491, 22051, 22052, 22052, 28686",
      /*  8820 */ "19826, 19826, 19826, 22270, 30000, 21457, 29622, 29622, 28092, 22052, 26763, 34343, 19826, 19826",
      /*  8834 */ "30577, 29088, 29621, 21435, 22052, 28789, 19826, 19826, 30580, 26144, 29622, 35765, 40865, 19826",
      /*  8848 */ "25146, 21433, 22052, 32457, 25154, 30906, 40010, 41814, 40013, 21676, 26047, 26925, 21415, 25703",
      /*  8862 */ "25703, 36697, 32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8876 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8890 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8904 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8918 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8932 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8946 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  8960 */ "24185, 19826, 19826, 19826, 19826, 25369, 19826, 19826, 19826, 41231, 24207, 32293, 22271, 40632",
      /*  8974 */ "21375, 36985, 21571, 19826, 19826, 19807, 19826, 19826, 19826, 19826, 22270, 21395, 19826, 19826",
      /*  8988 */ "19826, 26254, 23838, 29622, 21626, 26275, 21300, 28004, 19826, 19826, 18666, 19826, 19826, 19826",
      /*  9002 */ "19826, 30576, 21395, 29999, 19826, 19826, 26253, 41974, 29622, 29622, 29622, 29590, 22052, 22052",
      /*  9016 */ "26274, 21373, 34343, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 21394, 29998, 19826, 30578",
      /*  9030 */ "27490, 29622, 29622, 29622, 27416, 27372, 22052, 22052, 22053, 34641, 34343, 19826, 19826, 19826",
      /*  9044 */ "19826, 19826, 19826, 26256, 29999, 22270, 33011, 29622, 29622, 29622, 38316, 28094, 22052, 22052",
      /*  9058 */ "22052, 21412, 19826, 19826, 19826, 19826, 19826, 26255, 32290, 30579, 29619, 29622, 29622, 25491",
      /*  9072 */ "22051, 22052, 22052, 28686, 19826, 19826, 37995, 22270, 30000, 21457, 29622, 29622, 28092, 22052",
      /*  9086 */ "26763, 34343, 19826, 19826, 30577, 29088, 29621, 21435, 22052, 28789, 19826, 19826, 30580, 26144",
      /*  9100 */ "29622, 35765, 40865, 19826, 25146, 21433, 22052, 32457, 25154, 30906, 40010, 41814, 40013, 21676",
      /*  9114 */ "26047, 26925, 21415, 25703, 25703, 36697, 32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9128 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9142 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9156 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9170 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9184 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9198 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9212 */ "19826, 19826, 19826, 19826, 24391, 19826, 19826, 19826, 19826, 25369, 19826, 19826, 19826, 41231",
      /*  9226 */ "24207, 32293, 22271, 40632, 21375, 36985, 21571, 19826, 19826, 19807, 19826, 19826, 19826, 19826",
      /*  9240 */ "22270, 21395, 19826, 19826, 19826, 26254, 23838, 29622, 21626, 26275, 21300, 28004, 19826, 19826",
      /*  9254 */ "18666, 19826, 19826, 19826, 19826, 30576, 21395, 29999, 19826, 19826, 26253, 41974, 29622, 29622",
      /*  9268 */ "29622, 29590, 22052, 22052, 26274, 21373, 34343, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9282 */ "21394, 29998, 19826, 30578, 27490, 29622, 29622, 29622, 27416, 27372, 22052, 22052, 22053, 34641",
      /*  9296 */ "34343, 19826, 19826, 19826, 19826, 19826, 19826, 26256, 29999, 22270, 33011, 29622, 29622, 29622",
      /*  9310 */ "38316, 28094, 22052, 22052, 22052, 21412, 19826, 19826, 19826, 19826, 19826, 26255, 32290, 30579",
      /*  9324 */ "29619, 29622, 29622, 25491, 22051, 22052, 22052, 28686, 19826, 19826, 19826, 22270, 30000, 21457",
      /*  9338 */ "29622, 29622, 28092, 22052, 26763, 34343, 19826, 19826, 30577, 29088, 29621, 21435, 22052, 28789",
      /*  9352 */ "19826, 19826, 30580, 26144, 29622, 35765, 40865, 19826, 25146, 21433, 22052, 32457, 25154, 30906",
      /*  9366 */ "40010, 41814, 40013, 21676, 26047, 26925, 21415, 25703, 25703, 36697, 32449, 19826, 19826, 19826",
      /*  9380 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9394 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9408 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9422 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9436 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9450 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9464 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19668, 19826, 19826, 19826, 19826, 25369",
      /*  9478 */ "19826, 19826, 19826, 41231, 19690, 39098, 24413, 24427, 29792, 24448, 36165, 19826, 19826, 19807",
      /*  9492 */ "19826, 19826, 31277, 19826, 42553, 18563, 19826, 19826, 19826, 18557, 25371, 18521, 19548, 24485",
      /*  9506 */ "19554, 23922, 18295, 18314, 26681, 19826, 19826, 42581, 23719, 39582, 18339, 18355, 18371, 18407",
      /*  9520 */ "18434, 18458, 20376, 18500, 23624, 18626, 20380, 18504, 23628, 24483, 18663, 29470, 19826, 19826",
      /*  9534 */ "19826, 34747, 22005, 42465, 18537, 18579, 18595, 23380, 18611, 18686, 18706, 18521, 18655, 18682",
      /*  9548 */ "18702, 18722, 42520, 18741, 18663, 18760, 21120, 18824, 21114, 35088, 19826, 18855, 18871, 42370",
      /*  9562 */ "18442, 18923, 18945, 18967, 18989, 18917, 18939, 18961, 18983, 18521, 19786, 20801, 19892, 19005",
      /*  9576 */ "19026, 41470, 19064, 23303, 19080, 19098, 18637, 19116, 19082, 19100, 18639, 19136, 32989, 19161",
      /*  9590 */ "19048, 42553, 19182, 42137, 19251, 19219, 19240, 19256, 19224, 19145, 31661, 19272, 30536, 18551",
      /*  9604 */ "19295, 19316, 19300, 19321, 21100, 24501, 19371, 19387, 19424, 19417, 18484, 19446, 19462, 19478",
      /*  9618 */ "19476, 19401, 19494, 19498, 19514, 19430, 19517, 42527, 19534, 19570, 19586, 19518, 19602, 19618",
      /*  9632 */ "19632, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9646 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9660 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9674 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9688 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9702 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9716 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19668, 19826",
      /*  9730 */ "19826, 19826, 19826, 25369, 19826, 19826, 19826, 41231, 19690, 19826, 19826, 19826, 19826, 38269",
      /*  9744 */ "36165, 19826, 19826, 19807, 19826, 19826, 31277, 19826, 42553, 18563, 19826, 19826, 19826, 18557",
      /*  9758 */ "25371, 18521, 19548, 24485, 19554, 23922, 18295, 18314, 26681, 19826, 19826, 42581, 19826, 39582",
      /*  9772 */ "18339, 18355, 18371, 18407, 18434, 18458, 20376, 18500, 23624, 18626, 20380, 18504, 23628, 18520",
      /*  9786 */ "18663, 29470, 19826, 19826, 19826, 34747, 22005, 42465, 18537, 18579, 18595, 23380, 18611, 18686",
      /*  9800 */ "18706, 18521, 18655, 18682, 18702, 18722, 42520, 18741, 18663, 18760, 21120, 18824, 21114, 35088",
      /*  9814 */ "19826, 18855, 18871, 42370, 18442, 18923, 18945, 18967, 18989, 18917, 18939, 18961, 18983, 18521",
      /*  9828 */ "19786, 20801, 19892, 19005, 19026, 41470, 19064, 23303, 19080, 19098, 18637, 19116, 19082, 19100",
      /*  9842 */ "18639, 19136, 32989, 19161, 19048, 42553, 19182, 42137, 19251, 19219, 19240, 19256, 19224, 19145",
      /*  9856 */ "31661, 19272, 30536, 18551, 19295, 19316, 19300, 19321, 21100, 19337, 19371, 19387, 19424, 19417",
      /*  9870 */ "18484, 19446, 19462, 19478, 19476, 19401, 19494, 19498, 19514, 19430, 19517, 42527, 19534, 19570",
      /*  9884 */ "19586, 19518, 19602, 19618, 19632, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9898 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9912 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9926 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9940 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9954 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9968 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /*  9982 */ "19826, 19826, 24537, 24572, 19826, 19826, 19826, 24590, 19826, 19826, 19826, 41231, 24604, 19279",
      /*  9996 */ "24625, 24631, 42083, 24647, 24687, 19826, 19826, 19807, 19826, 19826, 31277, 19826, 42553, 18563",
      /* 10010 */ "19826, 19826, 19826, 18557, 25371, 18521, 19548, 24485, 19554, 24712, 18295, 18314, 26681, 19826",
      /* 10024 */ "19826, 42581, 19826, 39582, 18339, 18355, 18371, 18407, 18434, 18458, 20376, 18500, 23624, 18626",
      /* 10038 */ "20380, 18504, 23628, 18520, 18663, 29470, 19826, 19826, 19826, 34747, 22005, 42465, 18537, 18579",
      /* 10052 */ "18595, 23380, 18611, 18686, 18706, 18521, 18655, 18682, 18702, 18722, 42520, 18741, 18663, 18760",
      /* 10066 */ "21120, 18824, 21114, 35088, 19826, 18855, 18871, 42370, 18442, 18923, 18945, 18967, 18989, 18917",
      /* 10080 */ "18939, 18961, 18983, 18521, 19786, 20801, 19892, 19005, 19026, 41470, 19064, 23303, 19080, 19098",
      /* 10094 */ "18637, 19116, 19082, 19100, 18639, 19136, 32989, 19161, 19048, 42553, 19182, 42137, 19251, 19219",
      /* 10108 */ "19240, 19256, 19224, 19145, 31661, 19272, 30536, 18551, 19295, 19316, 19300, 19321, 21100, 19337",
      /* 10122 */ "19371, 19387, 19424, 19417, 18484, 19446, 19462, 19478, 19476, 19401, 19494, 19498, 19514, 19430",
      /* 10136 */ "19517, 42527, 19534, 19570, 19586, 19518, 19602, 19618, 19632, 19826, 19826, 19826, 19826, 19826",
      /* 10150 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10164 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10178 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10192 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10206 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10220 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10234 */ "19826, 19826, 19826, 19826, 19826, 19826, 24728, 24750, 19826, 19826, 19826, 25369, 19826, 19826",
      /* 10248 */ "19826, 41231, 19690, 19826, 19826, 19826, 32029, 24768, 24816, 19826, 19826, 19807, 19826, 19826",
      /* 10262 */ "31277, 41330, 42553, 18563, 19826, 19826, 19826, 18557, 25371, 18521, 19548, 18725, 19554, 24841",
      /* 10276 */ "18295, 18314, 26681, 19826, 19826, 42581, 19826, 39582, 18339, 18355, 18371, 18407, 18434, 18458",
      /* 10290 */ "20376, 18500, 23624, 18626, 20380, 18504, 23628, 18520, 18663, 29470, 19826, 19826, 19826, 34747",
      /* 10304 */ "22005, 42465, 18537, 18579, 18595, 23380, 18611, 18686, 18706, 18521, 18655, 18682, 18702, 18722",
      /* 10318 */ "42520, 18741, 18663, 18760, 21120, 18824, 21114, 35088, 19826, 18855, 18871, 42370, 18442, 18923",
      /* 10332 */ "18945, 18967, 18989, 18917, 18939, 18961, 18983, 18521, 19786, 20801, 19892, 19005, 19026, 41470",
      /* 10346 */ "19064, 23303, 19080, 19098, 18637, 19116, 19082, 19100, 18639, 19136, 32989, 19161, 19048, 42553",
      /* 10360 */ "19182, 42137, 19251, 19219, 19240, 19256, 19224, 19145, 31661, 19272, 30536, 18551, 19295, 19316",
      /* 10374 */ "19300, 19321, 21100, 19337, 19371, 19387, 19424, 19417, 18484, 19446, 19462, 19478, 19476, 19401",
      /* 10388 */ "19494, 19498, 19514, 19430, 19517, 42527, 19534, 19570, 19586, 19518, 19602, 19618, 19632, 19826",
      /* 10402 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10416 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10430 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10444 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10458 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10472 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10486 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 24185, 19826, 24857, 19826",
      /* 10500 */ "19826, 24876, 24910, 19826, 28472, 24944, 24960, 24974, 24984, 25000, 25016, 25030, 34397, 25068",
      /* 10514 */ "35124, 19807, 21952, 21002, 25087, 25111, 25134, 25174, 35115, 21853, 21940, 25215, 25257, 25280",
      /* 10528 */ "25316, 25343, 25387, 25427, 19826, 27321, 18666, 23649, 19826, 25462, 37260, 30576, 21395, 41966",
      /* 10542 */ "24432, 24860, 41926, 25479, 29622, 29622, 36845, 29590, 22052, 22052, 25511, 21373, 34343, 23677",
      /* 10556 */ "37505, 33508, 25898, 19826, 25656, 19826, 30630, 39176, 32238, 25550, 25566, 21597, 29622, 38622",
      /* 10570 */ "25595, 38347, 22052, 29297, 21284, 25611, 30525, 25627, 30172, 19826, 19826, 25647, 19826, 24792",
      /* 10584 */ "25677, 38373, 25693, 25727, 32539, 26810, 38316, 37978, 35589, 28573, 22052, 25778, 25806, 30428",
      /* 10598 */ "19826, 41387, 29651, 26255, 32290, 30579, 29619, 29622, 37192, 25841, 22051, 22052, 41364, 28686",
      /* 10612 */ "25870, 32820, 25895, 25914, 30000, 25934, 29622, 25960, 22088, 36956, 32671, 25978, 19826, 19826",
      /* 10626 */ "30577, 29088, 31013, 39847, 39732, 25994, 19826, 19826, 30580, 26144, 29622, 35765, 40865, 19826",
      /* 10640 */ "25146, 21433, 22052, 32457, 25154, 38406, 26020, 25711, 26043, 30909, 26063, 41821, 21415, 25703",
      /* 10654 */ "25703, 36697, 32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10668 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10682 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10696 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10710 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10724 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10738 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10752 */ "24185, 19826, 26098, 19826, 19826, 25369, 19826, 19826, 19826, 26120, 26136, 28507, 26160, 26175",
      /* 10766 */ "21375, 26203, 21571, 19826, 19826, 19807, 19826, 19826, 19826, 19826, 22270, 21395, 19826, 19826",
      /* 10780 */ "19826, 26254, 23838, 29622, 21626, 26275, 21300, 28004, 19826, 19826, 18666, 19826, 19826, 19826",
      /* 10794 */ "19826, 30576, 21395, 29999, 19826, 19826, 26253, 41974, 29622, 29622, 29622, 29590, 22052, 22052",
      /* 10808 */ "26274, 21373, 34343, 19826, 19826, 19826, 19826, 26232, 25052, 19826, 21394, 37877, 19826, 26250",
      /* 10822 */ "27490, 29622, 29622, 30928, 27416, 27372, 22052, 22052, 26272, 34641, 30525, 19826, 19826, 19826",
      /* 10836 */ "19826, 27605, 19826, 26256, 29999, 22270, 33011, 29622, 29622, 29622, 38316, 28094, 22052, 22052",
      /* 10850 */ "22052, 21412, 22069, 19826, 19826, 30967, 19826, 27058, 40224, 30579, 26291, 29622, 29622, 25199",
      /* 10864 */ "26314, 22052, 22052, 28686, 19826, 19826, 19826, 22270, 30000, 21457, 29622, 29622, 22088, 22052",
      /* 10878 */ "26763, 34343, 19826, 19826, 30577, 29088, 29621, 21435, 22052, 28789, 19826, 19826, 30580, 26144",
      /* 10892 */ "29622, 35765, 40865, 19826, 25146, 21433, 22052, 32457, 25154, 30906, 40010, 41814, 19652, 26335",
      /* 10906 */ "26047, 26925, 21415, 25703, 25703, 36697, 32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10920 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10934 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10948 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10962 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10976 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 10990 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11004 */ "19826, 19826, 19826, 19826, 24185, 19826, 27173, 19826, 19826, 25369, 19674, 19826, 19826, 41231",
      /* 11018 */ "26360, 26374, 26387, 26403, 26419, 26433, 21571, 19826, 24270, 20054, 19826, 26552, 19826, 19826",
      /* 11032 */ "22270, 21395, 19826, 19826, 24574, 26254, 22253, 27530, 21626, 30871, 26462, 26490, 23478, 19826",
      /* 11046 */ "18666, 27952, 23738, 19826, 19826, 26513, 39169, 29999, 26551, 26568, 26589, 27210, 26607, 29622",
      /* 11060 */ "29622, 34322, 26644, 22052, 26274, 21373, 28695, 19826, 19826, 24549, 19826, 24369, 25656, 26667",
      /* 11074 */ "26697, 29998, 19826, 30578, 27490, 38080, 38310, 38944, 27416, 34086, 34494, 40829, 22053, 34641",
      /* 11088 */ "30525, 19826, 19826, 26721, 19826, 25043, 19826, 26256, 29999, 22270, 33011, 29622, 29622, 36935",
      /* 11102 */ "38316, 28094, 22052, 22052, 28568, 21412, 22069, 19826, 19826, 19826, 18382, 26255, 32290, 30579",
      /* 11116 */ "29619, 29622, 26739, 25199, 22051, 22052, 26760, 28686, 19826, 19826, 26779, 22270, 38024, 26799",
      /* 11130 */ "36035, 29622, 22088, 18799, 30153, 26833, 19826, 19826, 30577, 26863, 29621, 26886, 32593, 28789",
      /* 11144 */ "19826, 29039, 30580, 26144, 39865, 35765, 32226, 19826, 25146, 21433, 22052, 32457, 25154, 30906",
      /* 11158 */ "40010, 35740, 20340, 26921, 26047, 26925, 21415, 25703, 25703, 33733, 32449, 19826, 19826, 19826",
      /* 11172 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11186 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11200 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11214 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11228 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11242 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11256 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 24185, 19826, 18298, 19826, 19826, 25369",
      /* 11270 */ "25118, 19826, 26941, 41231, 26965, 26979, 26989, 27005, 27021, 27035, 21571, 19826, 19826, 19807",
      /* 11284 */ "19826, 19826, 19826, 19826, 22270, 38051, 27084, 19826, 27081, 20019, 23838, 34698, 25579, 26275",
      /* 11298 */ "27100, 28004, 27277, 23409, 21052, 27116, 37742, 19826, 19826, 41213, 39467, 27134, 39142, 27162",
      /* 11312 */ "27189, 27226, 21589, 37200, 31871, 35160, 30902, 40379, 31512, 21373, 34343, 19826, 19826, 27255",
      /* 11326 */ "19826, 27276, 25656, 19826, 21394, 29998, 19826, 30578, 28419, 29622, 29622, 29622, 27416, 27372",
      /* 11340 */ "22052, 22052, 22053, 40328, 27293, 27320, 19826, 39945, 34455, 27605, 19826, 26256, 29999, 22270",
      /* 11354 */ "34217, 27337, 29622, 29622, 27357, 18789, 22052, 22052, 29598, 21412, 22069, 19826, 19826, 19826",
      /* 11368 */ "19826, 27389, 32290, 30579, 27411, 29622, 27432, 25199, 27450, 34414, 22052, 28686, 35552, 19826",
      /* 11382 */ "27469, 38663, 27486, 21457, 27506, 27527, 27546, 40112, 26763, 34343, 27562, 19826, 30577, 29088",
      /* 11396 */ "29621, 21435, 22052, 28789, 19826, 27582, 30580, 26144, 33797, 35765, 31782, 19826, 25146, 21433",
      /* 11410 */ "22052, 32457, 25154, 30906, 25264, 30755, 40973, 34337, 26047, 26925, 21415, 25703, 25703, 36697",
      /* 11424 */ "32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11438 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11452 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11466 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11480 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11494 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11508 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 24185, 19826",
      /* 11522 */ "19827, 27602, 19826, 25369, 29521, 27621, 23684, 27304, 27639, 27653, 27663, 27679, 27695, 27709",
      /* 11536 */ "21571, 32617, 27749, 27784, 20922, 27821, 32261, 20512, 32792, 27858, 28913, 27894, 27937, 27908",
      /* 11550 */ "27974, 28027, 32700, 28080, 28110, 28159, 28206, 28182, 23520, 34180, 28202, 23507, 34252, 30576",
      /* 11564 */ "21395, 30033, 24609, 19826, 18279, 41974, 34688, 35412, 26298, 29590, 28222, 28244, 31331, 21373",
      /* 11578 */ "33898, 39365, 28281, 35914, 28305, 37727, 28356, 28377, 28393, 28500, 28448, 28488, 28523, 28539",
      /* 11592 */ "28589, 28605, 28634, 28672, 28711, 35484, 28755, 28805, 28821, 24660, 19826, 40605, 31944, 27605",
      /* 11606 */ "28848, 28884, 41118, 24781, 36687, 34114, 29622, 28929, 36305, 35238, 28950, 34660, 38537, 28970",
      /* 11620 */ "22069, 29000, 40487, 29019, 29055, 26255, 29083, 29108, 32177, 41408, 29124, 29140, 22093, 35169",
      /* 11634 */ "29169, 33889, 19826, 36608, 29196, 22270, 25241, 29219, 29246, 39814, 29313, 18808, 29351, 34343",
      /* 11648 */ "29153, 29373, 34036, 29403, 30302, 27733, 30254, 29439, 29486, 29507, 29537, 20650, 36855, 29562",
      /* 11662 */ "40865, 29335, 25146, 41178, 28954, 28064, 39974, 25402, 29614, 29639, 20465, 29677, 29704, 29742",
      /* 11676 */ "21415, 34985, 25703, 36697, 32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11690 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11704 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11718 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11732 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11746 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11760 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11774 */ "19826, 19826, 24185, 19826, 19826, 29763, 19826, 29783, 20073, 29808, 19847, 29827, 29843, 29857",
      /* 11788 */ "29867, 29883, 29899, 29913, 21571, 19826, 28906, 19807, 19826, 19826, 24928, 19826, 22270, 21395",
      /* 11802 */ "19826, 26572, 26573, 19749, 23838, 32361, 29962, 26275, 29978, 28004, 22026, 19826, 18666, 22032",
      /* 11816 */ "19826, 34892, 19826, 24071, 29994, 29999, 19826, 22031, 30016, 41974, 30049, 29622, 29622, 27989",
      /* 11830 */ "22052, 22052, 26274, 30068, 34343, 19826, 19826, 19826, 19826, 19826, 25656, 19826, 21394, 29998",
      /* 11844 */ "19826, 38590, 27490, 29622, 29622, 38985, 27416, 27372, 22052, 32005, 22053, 34641, 30525, 19826",
      /* 11858 */ "19826, 33837, 19826, 27605, 19826, 26256, 29999, 22270, 30124, 29622, 38100, 29622, 38316, 28094",
      /* 11872 */ "22052, 30150, 22052, 21412, 22069, 19826, 30169, 19826, 19826, 26255, 30188, 40130, 29619, 29622",
      /* 11886 */ "29230, 25199, 22051, 22052, 36127, 28686, 19826, 19826, 19826, 22270, 30000, 21457, 29622, 29622",
      /* 11900 */ "22088, 22052, 26763, 34343, 19826, 19826, 30577, 29088, 29621, 21435, 22052, 28789, 30224, 19826",
      /* 11914 */ "30580, 26144, 29622, 35765, 40865, 19826, 25146, 21433, 22052, 32457, 25154, 30906, 40010, 41814",
      /* 11928 */ "40013, 21676, 26047, 26925, 21415, 30243, 25703, 30289, 32449, 19826, 19826, 19826, 19826, 19826",
      /* 11942 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11956 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11970 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11984 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 11998 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12012 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12026 */ "19826, 19826, 19826, 19826, 19826, 19826, 24185, 19826, 19826, 19826, 19826, 25369, 19826, 30318",
      /* 12040 */ "19826, 41231, 30338, 30352, 30362, 30378, 30394, 30408, 21571, 19826, 19826, 19807, 19826, 19826",
      /* 12054 */ "19826, 35451, 22270, 21395, 19826, 19826, 19826, 26254, 23838, 29622, 21626, 26275, 21300, 28726",
      /* 12068 */ "19826, 19826, 18666, 19826, 19826, 19826, 19826, 30444, 21395, 29999, 19826, 19826, 26253, 41974",
      /* 12082 */ "29622, 29622, 29622, 29590, 22052, 22052, 26274, 21373, 34343, 19826, 19826, 19826, 19826, 19826",
      /* 12096 */ "19826, 30467, 21394, 29998, 19826, 30578, 29546, 29622, 29622, 29622, 27511, 27372, 22052, 22052",
      /* 12110 */ "22053, 34641, 34343, 19826, 41656, 19826, 34158, 19826, 19826, 26256, 29999, 37057, 30486, 29622",
      /* 12124 */ "29622, 29622, 38316, 28094, 22052, 22052, 22052, 30512, 19826, 19826, 19826, 19826, 19826, 26255",
      /* 12138 */ "32290, 30579, 29619, 29622, 29622, 25491, 22051, 22052, 22052, 28686, 19826, 19826, 30552, 30573",
      /* 12152 */ "30000, 21457, 29622, 29622, 28092, 22052, 26763, 30764, 30596, 29452, 30620, 29088, 29621, 21435",
      /* 12166 */ "22052, 28789, 19826, 19826, 30653, 36633, 30678, 30703, 40865, 19826, 30719, 30743, 30780, 32457",
      /* 12180 */ "25154, 30906, 40010, 41814, 40013, 21676, 26047, 26925, 21415, 25703, 34922, 36697, 32449, 19826",
      /* 12194 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12208 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12222 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12236 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12250 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12264 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12278 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 24185, 19826, 19826, 19826",
      /* 12292 */ "19826, 25369, 19826, 19826, 19826, 41231, 24207, 32293, 22271, 40632, 21375, 36985, 21571, 19826",
      /* 12306 */ "19826, 30807, 19826, 19826, 19826, 21890, 22270, 21396, 19826, 19826, 37749, 18901, 28166, 30842",
      /* 12320 */ "30860, 39438, 30887, 29719, 19826, 27118, 18666, 30322, 27470, 19826, 19826, 30576, 21395, 29999",
      /* 12334 */ "19826, 19826, 26253, 41974, 29622, 29622, 30925, 29590, 22052, 33241, 26274, 21373, 34343, 19826",
      /* 12348 */ "19826, 30944, 19826, 19826, 19826, 19826, 21394, 29998, 19826, 36587, 35057, 29622, 29622, 29622",
      /* 12362 */ "34577, 27372, 22052, 22052, 38518, 34641, 34343, 30964, 19826, 19826, 19826, 19826, 19826, 26256",
      /* 12376 */ "29999, 22270, 35975, 29622, 29622, 29622, 38316, 28094, 22052, 22052, 22052, 21412, 19826, 19826",
      /* 12390 */ "42256, 19826, 19826, 26255, 32290, 30579, 29619, 29622, 37331, 25491, 22051, 22052, 40389, 28686",
      /* 12404 */ "19826, 19826, 19826, 22270, 30000, 21457, 29622, 29622, 28092, 22052, 26763, 34343, 19826, 19826",
      /* 12418 */ "30577, 29088, 29621, 21435, 22052, 28789, 19826, 30983, 30580, 31004, 29622, 35765, 21321, 19826",
      /* 12432 */ "31174, 41157, 35627, 32457, 25154, 30906, 40010, 41814, 40013, 21676, 26047, 26925, 21415, 25703",
      /* 12446 */ "25703, 36697, 32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12460 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12474 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12488 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12502 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12516 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12530 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12544 */ "24185, 19826, 19826, 27798, 19826, 25369, 30208, 27835, 30202, 31029, 31045, 31059, 31085, 31069",
      /* 12558 */ "31101, 31115, 21571, 19826, 19826, 42172, 34870, 19826, 19826, 19826, 31162, 31202, 23338, 29203",
      /* 12572 */ "36784, 31222, 31238, 31300, 31319, 32419, 31347, 31375, 19826, 19826, 36794, 19826, 23894, 31398",
      /* 12586 */ "19826, 30576, 34016, 27065, 31418, 19826, 26253, 25187, 31447, 31464, 34372, 28770, 36097, 22052",
      /* 12600 */ "31481, 21373, 34343, 24163, 31528, 31634, 31547, 35356, 19826, 32250, 21394, 21742, 33067, 23421",
      /* 12614 */ "27490, 29622, 30844, 33034, 39983, 27372, 22052, 31563, 25300, 34641, 34343, 19826, 19826, 30988",
      /* 12628 */ "41585, 27761, 19826, 26256, 29999, 22270, 33011, 31607, 29622, 29622, 38316, 39431, 22052, 22052",
      /* 12642 */ "22052, 21412, 19826, 28317, 31624, 29067, 25854, 31677, 19757, 28329, 31697, 32857, 29622, 25491",
      /* 12656 */ "22051, 39327, 22052, 33155, 31899, 26216, 19826, 36244, 31716, 22704, 39250, 31756, 33114, 39296",
      /* 12670 */ "35301, 41209, 19826, 36264, 31798, 29088, 33341, 31814, 40093, 28789, 40650, 19826, 29926, 26144",
      /* 12684 */ "29622, 35765, 39562, 31848, 25146, 21433, 22052, 32457, 31867, 30906, 29747, 31887, 40013, 21676",
      /* 12698 */ "26047, 26925, 31922, 25703, 25703, 36697, 31960, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12712 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12726 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12740 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12754 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12768 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12782 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12796 */ "19826, 19826, 19826, 19826, 24185, 19826, 19826, 19826, 19826, 25369, 19826, 19826, 19826, 41231",
      /* 12810 */ "24207, 32293, 22271, 40632, 21375, 36985, 21571, 19826, 19826, 19807, 19826, 19826, 31984, 19826",
      /* 12824 */ "22270, 21395, 19826, 19826, 19826, 26254, 23838, 29622, 21626, 26275, 21300, 28004, 19826, 19826",
      /* 12838 */ "18666, 19826, 19826, 19826, 19826, 30576, 21395, 29999, 19826, 19826, 26253, 41974, 29622, 29622",
      /* 12852 */ "29622, 29590, 22052, 22052, 26274, 21373, 34343, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12866 */ "21394, 29998, 19826, 30578, 27490, 29622, 29622, 29622, 27416, 27372, 22052, 22052, 22053, 34641",
      /* 12880 */ "34343, 19826, 19826, 19826, 19826, 19826, 19826, 26256, 29999, 22270, 33011, 29622, 37618, 29622",
      /* 12894 */ "38316, 28094, 22052, 32004, 22052, 21412, 19826, 19826, 19826, 19826, 19826, 26255, 32290, 30579",
      /* 12908 */ "29619, 29622, 29622, 25491, 22051, 22052, 22052, 28686, 19826, 19826, 19826, 22270, 30000, 21457",
      /* 12922 */ "29622, 29622, 28092, 22052, 26763, 34343, 19826, 19826, 30577, 29088, 29621, 21435, 22052, 28789",
      /* 12936 */ "19826, 19826, 30580, 26144, 29622, 35765, 40865, 19826, 25146, 21433, 22052, 32457, 25154, 30906",
      /* 12950 */ "40010, 41814, 40013, 21676, 26047, 26925, 21415, 25703, 25703, 36697, 32449, 19826, 19826, 19826",
      /* 12964 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12978 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 12992 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13006 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13020 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13034 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13048 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 24185, 19826, 19826, 38209, 19826, 25369",
      /* 13062 */ "19826, 32021, 32459, 28832, 32045, 32059, 32069, 32085, 32101, 32115, 21571, 24397, 19826, 19807",
      /* 13076 */ "19826, 30826, 24375, 35451, 22270, 29418, 19826, 24250, 20401, 32144, 32165, 32193, 32213, 26275",
      /* 13090 */ "21300, 25790, 22247, 19826, 27842, 24886, 23472, 25661, 21911, 23550, 21395, 32287, 19826, 22247",
      /* 13104 */ "41012, 37297, 32309, 27341, 32337, 32384, 41761, 33223, 26905, 32435, 32475, 32494, 19826, 19826",
      /* 13118 */ "19826, 32511, 19826, 19826, 35795, 29998, 19826, 30578, 27490, 32531, 32555, 25754, 27511, 32575",
      /* 13132 */ "26074, 31832, 22053, 34641, 34343, 33915, 32609, 19826, 19826, 32633, 32650, 26256, 27870, 22270",
      /* 13146 */ "33011, 29622, 31700, 38499, 38316, 28094, 22052, 36093, 32668, 21412, 30470, 19826, 19826, 42278",
      /* 13160 */ "19826, 28656, 32290, 30579, 32687, 29622, 29622, 25491, 21632, 22052, 22052, 28686, 32716, 19826",
      /* 13174 */ "35609, 32736, 32781, 26870, 29622, 29622, 25524, 22052, 26763, 34343, 34245, 19826, 34948, 29088",
      /* 13188 */ "29621, 21435, 22052, 28789, 19826, 34605, 30580, 26144, 41096, 35765, 32808, 19826, 25146, 21433",
      /* 13202 */ "22052, 32457, 25154, 30906, 40010, 41814, 40013, 21676, 33746, 32843, 40040, 25703, 21272, 36697",
      /* 13216 */ "32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13230 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13244 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13258 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13272 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13286 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13300 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 24185, 19826",
      /* 13314 */ "19826, 30604, 19826, 32879, 19826, 38260, 19826, 24671, 32895, 32909, 32919, 32935, 32951, 32965",
      /* 13328 */ "21571, 22790, 19826, 19807, 19826, 24752, 19826, 19826, 22270, 33565, 19826, 25463, 22790, 33005",
      /* 13342 */ "22791, 33027, 28618, 26275, 33050, 28004, 19826, 20966, 18666, 19826, 30948, 19826, 33066, 30576",
      /* 13356 */ "21395, 29999, 19826, 36323, 24106, 41974, 33083, 26817, 36728, 28042, 22052, 35250, 33101, 33141",
      /* 13370 */ "33171, 32271, 20973, 19826, 19826, 35907, 19826, 19826, 21394, 29998, 19826, 30578, 27490, 38694",
      /* 13384 */ "32559, 29622, 27416, 33205, 33239, 33257, 22053, 34641, 34343, 36174, 36183, 19826, 19826, 33274",
      /* 13398 */ "42036, 26256, 29999, 22270, 33011, 36365, 29622, 32351, 32863, 33294, 33313, 39539, 22052, 21412",
      /* 13412 */ "19826, 19826, 19826, 19826, 19826, 26255, 32290, 30579, 29619, 29622, 29622, 25491, 22051, 22052",
      /* 13426 */ "22052, 28686, 19826, 19826, 19826, 22270, 30000, 21457, 29622, 29622, 28092, 22052, 26763, 21562",
      /* 13440 */ "19826, 19826, 30577, 29088, 29621, 21435, 22052, 28789, 19826, 19826, 30580, 33332, 38479, 35765",
      /* 13454 */ "29184, 19826, 25146, 21433, 22052, 31968, 30727, 30273, 40010, 41814, 40013, 21676, 26047, 26925",
      /* 13468 */ "21415, 25703, 25703, 36697, 32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13482 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13496 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13510 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13524 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13538 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13552 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13566 */ "19826, 19826, 24185, 19826, 19826, 32827, 19826, 33357, 19826, 20255, 33377, 33387, 33403, 33417",
      /* 13580 */ "33427, 33443, 33459, 33473, 21571, 34346, 33507, 19807, 18886, 19347, 19826, 19826, 33524, 33550",
      /* 13594 */ "21721, 33586, 33602, 33618, 36657, 33655, 33671, 29276, 33687, 28004, 20861, 19826, 24467, 33703",
      /* 13608 */ "27768, 35453, 33719, 22697, 21395, 29423, 32495, 33762, 21227, 41974, 25158, 29622, 33796, 29590",
      /* 13622 */ "33214, 39923, 26274, 33813, 33861, 19826, 32515, 33914, 19826, 19826, 22218, 19826, 24299, 29998",
      /* 13636 */ "24461, 30578, 33931, 34570, 29622, 29622, 33960, 39691, 22052, 22052, 40858, 34641, 34343, 19826",
      /* 13650 */ "19826, 19826, 33991, 19826, 37004, 34011, 38058, 34032, 24305, 29622, 29622, 34052, 34071, 23967",
      /* 13664 */ "22052, 31503, 35208, 21412, 40153, 34130, 34154, 34174, 19826, 34196, 34233, 34268, 34307, 34362",
      /* 13678 */ "38708, 25491, 21778, 30265, 39919, 34936, 42392, 34388, 26446, 27048, 33639, 27722, 37459, 29622",
      /* 13692 */ "28092, 34413, 41427, 34430, 34450, 19826, 19203, 26535, 34471, 34510, 25534, 29357, 34540, 19826",
      /* 13706 */ "18418, 40251, 34560, 26897, 34593, 31851, 25146, 34628, 40769, 32457, 40299, 26474, 34676, 21553",
      /* 13720 */ "34721, 28256, 26047, 26925, 21415, 33875, 25703, 36697, 28056, 19826, 19826, 19826, 19826, 19826",
      /* 13734 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13748 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13762 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13776 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13790 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13804 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 13818 */ "19826, 19826, 19826, 19826, 19826, 19826, 24185, 19826, 19826, 19010, 19826, 25369, 20420, 20212",
      /* 13832 */ "19826, 41231, 34763, 34777, 34787, 34803, 34819, 34833, 20870, 34862, 34886, 34908, 34971, 35001",
      /* 13846 */ "19826, 20879, 35022, 35043, 37031, 21258, 35104, 18839, 35145, 35185, 33944, 35224, 35272, 35349",
      /* 13860 */ "19826, 19826, 35384, 19826, 24920, 35372, 22211, 28649, 30637, 29999, 19826, 19826, 26253, 35400",
      /* 13874 */ "25962, 31448, 36204, 29590, 39888, 35256, 25327, 21373, 34343, 27260, 19826, 23873, 19826, 35428",
      /* 13888 */ "35444, 18323, 21394, 36345, 29946, 35027, 27490, 29622, 39822, 29622, 39207, 27372, 39737, 22052",
      /* 13902 */ "37236, 35469, 37411, 19826, 35528, 35548, 19826, 19826, 19826, 26256, 29999, 38184, 33011, 29622",
      /* 13916 */ "35568, 29622, 38316, 28094, 40820, 22052, 22052, 21412, 19826, 19826, 25819, 35532, 19826, 26255",
      /* 13930 */ "32290, 30579, 29619, 29622, 29622, 26187, 35587, 22052, 22052, 28686, 19826, 35605, 19826, 22270",
      /* 13944 */ "27395, 35953, 41735, 36419, 32412, 41684, 36137, 38360, 19826, 19826, 25918, 29088, 32759, 21435",
      /* 13958 */ "35625, 28789, 19826, 19826, 30580, 26144, 29622, 35765, 40865, 35643, 38385, 40696, 22052, 35660",
      /* 13972 */ "35683, 35707, 38217, 20478, 40013, 21676, 26047, 26925, 21415, 35732, 35756, 36697, 33827, 19826",
      /* 13986 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14000 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14014 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14028 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14042 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14056 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14070 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 24185, 19826, 19826, 19826",
      /* 14084 */ "19826, 25369, 19826, 21824, 21338, 20268, 35782, 37111, 35816, 35831, 35847, 35861, 21571, 19826",
      /* 14098 */ "30090, 18775, 19826, 19826, 19826, 19826, 20641, 21395, 19826, 35895, 19826, 24077, 23838, 29623",
      /* 14112 */ "21626, 40398, 21300, 28004, 27805, 19826, 18666, 19826, 27623, 31402, 35930, 35946, 35969, 29999",
      /* 14126 */ "19826, 35991, 26253, 41974, 36009, 36032, 36051, 28554, 36078, 36224, 39702, 36113, 31934, 19826",
      /* 14140 */ "28011, 19826, 31726, 31652, 23713, 19826, 21394, 29998, 19826, 30578, 27490, 29622, 29622, 29622",
      /* 14154 */ "27416, 27372, 22052, 22052, 22053, 34641, 31265, 29811, 19826, 19826, 37429, 19826, 36153, 41137",
      /* 14168 */ "35800, 22270, 33011, 29622, 36199, 29622, 38714, 36220, 40339, 22052, 22052, 21412, 19826, 36240",
      /* 14182 */ "19826, 19826, 19826, 26255, 32290, 30579, 29619, 37385, 29622, 31186, 22051, 40774, 22052, 28686",
      /* 14196 */ "19826, 19826, 19826, 22270, 30000, 21457, 29622, 29622, 28092, 22052, 26763, 34343, 19826, 36260",
      /* 14210 */ "30577, 21751, 29621, 21435, 22052, 21525, 19826, 19826, 30580, 26144, 29622, 35765, 40865, 19826",
      /* 14224 */ "25146, 21433, 22052, 36280, 25154, 30906, 36296, 41814, 40013, 21676, 26047, 26925, 21415, 25703",
      /* 14238 */ "25703, 36697, 32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14252 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14266 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14280 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14294 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14308 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14322 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14336 */ "24185, 19826, 19826, 19826, 19826, 25369, 19826, 19826, 19826, 41231, 24207, 32293, 22271, 40632",
      /* 14350 */ "21375, 36985, 21571, 19826, 19826, 19807, 19826, 19826, 19826, 36321, 22270, 33633, 30098, 30104",
      /* 14364 */ "30107, 36339, 30108, 36361, 36381, 28228, 21300, 35499, 19826, 19826, 18666, 19826, 19826, 19826",
      /* 14378 */ "19826, 30576, 21395, 29999, 19826, 19826, 26253, 41974, 29622, 29622, 29622, 29590, 22052, 22052",
      /* 14392 */ "26274, 21373, 34343, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 21394, 29998, 19826, 30578",
      /* 14406 */ "27490, 29622, 29622, 29622, 28934, 27372, 22052, 22052, 22053, 34641, 34343, 19826, 19826, 19826",
      /* 14420 */ "19826, 19826, 19826, 26256, 29999, 22270, 33011, 29622, 29622, 29622, 38316, 28094, 22052, 22052",
      /* 14434 */ "22052, 21412, 19826, 19826, 19826, 19826, 19826, 26255, 32290, 30579, 29619, 29622, 29622, 25491",
      /* 14448 */ "22051, 22052, 22052, 28686, 19826, 19826, 19826, 22270, 30000, 21457, 29622, 29622, 28092, 22052",
      /* 14462 */ "26763, 34343, 19826, 19826, 30577, 29088, 29621, 21435, 22052, 28789, 19826, 19826, 30580, 26144",
      /* 14476 */ "36416, 40461, 40865, 19826, 25146, 21433, 22052, 32457, 25154, 30906, 40010, 41814, 40013, 21676",
      /* 14490 */ "26047, 26925, 21415, 25703, 25703, 36697, 32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14504 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14518 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14532 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14546 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14560 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14574 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14588 */ "19826, 19826, 19826, 19826, 24185, 19826, 19826, 19909, 36435, 36452, 19166, 19826, 36458, 41231",
      /* 14602 */ "36475, 36489, 36499, 36515, 36531, 36545, 21571, 19826, 19355, 19807, 26104, 36580, 36603, 40611",
      /* 14616 */ "36624, 27921, 26723, 19737, 36649, 36673, 36713, 37167, 27239, 29577, 36749, 36810, 19826, 19826",
      /* 14630 */ "29767, 22160, 37089, 28463, 23867, 37663, 30025, 29999, 19826, 35129, 24326, 36833, 36733, 27434",
      /* 14644 */ "29622, 34486, 34652, 38166, 33316, 36879, 36895, 19826, 18270, 28137, 33278, 19826, 37367, 19826",
      /* 14658 */ "21394, 41532, 19826, 18276, 30662, 36915, 36933, 31303, 39501, 36951, 31826, 22052, 36972, 34641",
      /* 14672 */ "34343, 19826, 40429, 38737, 37020, 37047, 37081, 26256, 37105, 37127, 37143, 29622, 26618, 37183",
      /* 14686 */ "37916, 28094, 26319, 40350, 33258, 37216, 41897, 19826, 38235, 37252, 36436, 26255, 32290, 37276",
      /* 14700 */ "37313, 29622, 29622, 25491, 21311, 22052, 22052, 31577, 36459, 37347, 37365, 22270, 30000, 21457",
      /* 14714 */ "29622, 31608, 28092, 22052, 26082, 34343, 28868, 19826, 30577, 34291, 37383, 35691, 22052, 37401",
      /* 14728 */ "19826, 37427, 30580, 26144, 29622, 35765, 40865, 19826, 25146, 21433, 22052, 37535, 37445, 37481",
      /* 14742 */ "40010, 41814, 37521, 37557, 26047, 26925, 21415, 30496, 37573, 37598, 32449, 19826, 19826, 19826",
      /* 14756 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14770 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14784 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14798 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14812 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14826 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 14840 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 24185, 19826, 19826, 19826, 37634, 37655",
      /* 14854 */ "37679, 37696, 37712, 29387, 37765, 37779, 37789, 37805, 37821, 37835, 22169, 19826, 19826, 20693",
      /* 14868 */ "19826, 19826, 24894, 19826, 22072, 37869, 24169, 27586, 37893, 21732, 34138, 37909, 37932, 39331",
      /* 14882 */ "37948, 28004, 37964, 19826, 18666, 31382, 37994, 19826, 19826, 24233, 38011, 33570, 28863, 33975",
      /* 14896 */ "38040, 27878, 38074, 38096, 29622, 29261, 38116, 22052, 26274, 38132, 34343, 38182, 25071, 29491",
      /* 14910 */ "38200, 19826, 19826, 19826, 21394, 29998, 31988, 30578, 27490, 29622, 29622, 29622, 27416, 27372",
      /* 14924 */ "22052, 22052, 22053, 34641, 34343, 19826, 38233, 38251, 31643, 32652, 30227, 26256, 37289, 38285",
      /* 14938 */ "38913, 29622, 36917, 25762, 38332, 38401, 22052, 34524, 37227, 38422, 38438, 38458, 35006, 19826",
      /* 14952 */ "19826, 26591, 24800, 30579, 38476, 41554, 38495, 25491, 22051, 40811, 38515, 28686, 19826, 41713",
      /* 14966 */ "19826, 40242, 30000, 21457, 39805, 37612, 25294, 38534, 38553, 34343, 19826, 24521, 30577, 25228",
      /* 14980 */ "29621, 21435, 22052, 30791, 19037, 40920, 38575, 38612, 38629, 35765, 38645, 25095, 32748, 21433",
      /* 14994 */ "22052, 38661, 38298, 36762, 40010, 41814, 28739, 21676, 25944, 38679, 20349, 25703, 25703, 36697",
      /* 15008 */ "32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15022 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15036 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15050 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15064 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15078 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15092 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 24185, 19826",
      /* 15106 */ "19826, 19826, 19954, 25369, 19826, 19826, 38730, 19963, 38753, 38767, 38777, 38793, 38809, 38823",
      /* 15120 */ "28265, 22111, 38852, 19807, 19826, 27958, 38868, 27566, 22270, 28406, 29726, 24734, 38884, 38900",
      /* 15134 */ "38929, 38966, 39001, 39017, 39046, 39062, 23145, 39085, 22132, 39114, 19826, 31906, 39134, 21962",
      /* 15148 */ "31206, 26527, 29034, 29661, 39158, 39192, 29622, 39243, 39266, 31771, 35766, 39282, 23973, 39312",
      /* 15162 */ "26004, 39347, 28361, 37349, 40739, 19826, 19826, 33361, 41955, 39381, 39417, 39454, 39488, 39517",
      /* 15176 */ "32368, 33085, 27416, 39533, 35287, 22052, 39555, 40949, 39578, 39396, 40436, 27146, 39598, 39615",
      /* 15190 */ "39069, 21970, 28895, 39631, 28340, 30687, 39656, 34055, 39676, 39718, 39753, 22052, 38147, 21412",
      /* 15204 */ "39357, 39779, 34544, 41906, 19826, 33534, 26705, 30579, 39796, 39838, 39863, 25491, 39881, 39904",
      /* 15218 */ "22052, 28686, 39939, 42414, 19826, 39961, 39999, 40029, 40056, 29622, 40079, 40109, 36400, 34343",
      /* 15232 */ "20193, 19826, 40128, 29088, 37156, 40063, 35327, 40726, 40146, 19826, 29092, 40169, 36062, 37582",
      /* 15246 */ "40194, 40267, 40291, 40315, 40366, 32457, 25154, 30906, 40010, 41814, 40013, 26651, 26027, 34101",
      /* 15260 */ "40414, 40452, 25703, 30134, 40477, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15274 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15288 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15302 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15316 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15330 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15344 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15358 */ "19826, 19826, 24185, 19826, 19826, 19826, 26497, 25369, 19826, 21357, 19826, 40503, 40519, 40533",
      /* 15372 */ "40546, 40562, 40578, 40592, 21571, 19826, 19826, 19984, 19826, 25631, 19826, 19826, 22270, 21395",
      /* 15386 */ "19826, 41336, 19826, 26254, 40627, 38980, 28432, 26275, 21300, 28004, 40648, 19826, 18666, 19826",
      /* 15400 */ "19826, 19826, 40666, 25495, 21395, 29999, 19826, 40672, 37065, 41974, 40694, 29622, 29622, 40712",
      /* 15414 */ "22052, 22052, 41639, 40755, 35716, 32634, 36998, 19826, 28143, 19826, 30557, 35667, 32149, 27201",
      /* 15428 */ "34612, 30578, 21482, 32197, 26628, 36863, 27416, 27372, 40790, 40845, 22053, 34641, 34343, 36817",
      /* 15442 */ "19826, 19826, 19826, 19826, 25440, 34955, 29999, 22270, 33011, 36016, 29622, 29622, 38950, 40881",
      /* 15456 */ "22052, 22052, 22052, 21412, 40897, 34434, 19826, 19826, 19826, 26255, 32290, 40215, 29619, 29622",
      /* 15470 */ "29622, 25491, 22051, 22052, 22052, 28984, 19826, 19826, 37639, 22270, 30000, 30451, 29622, 29622",
      /* 15484 */ "31494, 22052, 26763, 34343, 40918, 19826, 30577, 29088, 29621, 21435, 22052, 28789, 19826, 19826",
      /* 15498 */ "30580, 26144, 29622, 35765, 40865, 19826, 25146, 40936, 36394, 32457, 25154, 30906, 40010, 41814",
      /* 15512 */ "40013, 21676, 40178, 40965, 21415, 25703, 31591, 36697, 32449, 19826, 19826, 19826, 19826, 19826",
      /* 15526 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15540 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15554 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15568 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15582 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15596 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15610 */ "19826, 19826, 19826, 19826, 19826, 19826, 24185, 19826, 19826, 19826, 19826, 25369, 21070, 19120",
      /* 15624 */ "19826, 40989, 41005, 29936, 22271, 41028, 41044, 41058, 21571, 19826, 19826, 19807, 19826, 19826",
      /* 15638 */ "19826, 19826, 22270, 21395, 19826, 19826, 19826, 26254, 23838, 41092, 35070, 26275, 21300, 28004",
      /* 15652 */ "19826, 23953, 18666, 19826, 19826, 19826, 19826, 30576, 41112, 39472, 19826, 19826, 41134, 41974",
      /* 15666 */ "41153, 41173, 29622, 39030, 27373, 22052, 26274, 41194, 34343, 19826, 19826, 19826, 19826, 37541",
      /* 15680 */ "19826, 19826, 31681, 29998, 41229, 30578, 27490, 29622, 25745, 29622, 27416, 27372, 41690, 22052",
      /* 15694 */ "22053, 34641, 34343, 19826, 19826, 19826, 19826, 19826, 19826, 26256, 29999, 22270, 33011, 29622",
      /* 15708 */ "29622, 29622, 38316, 28094, 22052, 22052, 22052, 21412, 19826, 19826, 19826, 19826, 19826, 26255",
      /* 15722 */ "32290, 30579, 29619, 29622, 29622, 25491, 22051, 22052, 22052, 28686, 19826, 37680, 19826, 22270",
      /* 15736 */ "30000, 21457, 29622, 29622, 28092, 22052, 26763, 34343, 31531, 19826, 30577, 29088, 29621, 21435",
      /* 15750 */ "22052, 28789, 19826, 19826, 30580, 26144, 29622, 35765, 40865, 30421, 25146, 21433, 22052, 32457",
      /* 15764 */ "25154, 30906, 40010, 41814, 40013, 21676, 26047, 26925, 21415, 25703, 25703, 36697, 32449, 19826",
      /* 15778 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15792 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15806 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15820 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15834 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15848 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 15862 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 24185, 19826, 19826, 19826",
      /* 15876 */ "19695, 25369, 19826, 24556, 20119, 20102, 41247, 41261, 41271, 41287, 41303, 41317, 21571, 19826",
      /* 15890 */ "19826, 19807, 19826, 19826, 19826, 19826, 22270, 21395, 19826, 19826, 19826, 26254, 23838, 30052",
      /* 15904 */ "21626, 33125, 41352, 41380, 19826, 19826, 18666, 19826, 19826, 19826, 35993, 30576, 21395, 29999",
      /* 15918 */ "19826, 19826, 26253, 41974, 29622, 29622, 29622, 29590, 22052, 22052, 26274, 21373, 34343, 19826",
      /* 15932 */ "19826, 19826, 19826, 19826, 19826, 19826, 21394, 29998, 19826, 30578, 27490, 29622, 29622, 29622",
      /* 15946 */ "27416, 27372, 22052, 22052, 22053, 34641, 34343, 19826, 19826, 19826, 19826, 40678, 19826, 26256",
      /* 15960 */ "29999, 22270, 33011, 29622, 29622, 29622, 38316, 28094, 22052, 22052, 22052, 21412, 19826, 35644",
      /* 15974 */ "19826, 19826, 19826, 26255, 32290, 30579, 29619, 41403, 35571, 25491, 22051, 41424, 35333, 28686",
      /* 15988 */ "19826, 19826, 19826, 22270, 30000, 21457, 29622, 29622, 28092, 22052, 26763, 34343, 19826, 19826",
      /* 16002 */ "30577, 29088, 29621, 21435, 22052, 28789, 19826, 19826, 30580, 26144, 29622, 35765, 40865, 19826",
      /* 16016 */ "25146, 21433, 22052, 32457, 25154, 30906, 40010, 41814, 40013, 21676, 26047, 26925, 21415, 25703",
      /* 16030 */ "25703, 36697, 32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16044 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16058 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16072 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16086 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16100 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16114 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16128 */ "24391, 19826, 19826, 19826, 19826, 25369, 19826, 19826, 19826, 41231, 24207, 32293, 22271, 24191",
      /* 16142 */ "41443, 41457, 21571, 19826, 19826, 19807, 41486, 19826, 41507, 19826, 20010, 34211, 31734, 31740",
      /* 16156 */ "28186, 41524, 20726, 41548, 35314, 26275, 21300, 28004, 19826, 19826, 41570, 19826, 41601, 41619",
      /* 16170 */ "19826, 30576, 21395, 29999, 19826, 19826, 26253, 41974, 29622, 29622, 25736, 29590, 22052, 22052",
      /* 16184 */ "32399, 21373, 30081, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 21394, 29998, 19826, 30578",
      /* 16198 */ "27490, 29622, 29622, 29622, 27416, 27372, 22052, 22052, 22053, 34641, 34343, 19826, 19826, 19826",
      /* 16212 */ "19826, 19826, 19826, 26256, 29999, 22270, 33011, 29622, 29622, 29622, 32765, 41635, 22052, 22052",
      /* 16226 */ "22052, 21412, 25446, 19826, 19826, 19826, 19826, 26255, 32290, 30579, 29619, 29622, 29622, 25491",
      /* 16240 */ "22051, 22052, 22052, 28686, 19826, 19826, 19826, 22270, 30000, 21457, 29622, 29622, 28092, 22052",
      /* 16254 */ "26763, 34343, 19826, 19826, 30577, 29088, 29621, 21435, 22052, 28789, 19826, 19826, 30580, 26144",
      /* 16268 */ "29622, 35765, 40865, 19826, 25146, 21433, 22052, 32457, 25154, 30906, 40010, 41814, 40013, 21676",
      /* 16282 */ "26047, 26925, 21415, 25703, 25703, 36697, 32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16296 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16310 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16324 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16338 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16352 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16366 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16380 */ "19826, 19826, 19826, 19826, 24185, 19826, 19826, 19826, 19826, 25369, 19826, 19826, 19826, 41231",
      /* 16394 */ "24207, 32293, 22271, 40632, 21375, 36985, 21571, 41655, 19826, 19807, 19826, 19826, 26783, 19826",
      /* 16408 */ "22270, 21395, 19826, 19826, 19826, 26254, 19642, 21500, 21626, 39763, 41672, 41706, 19826, 19826",
      /* 16422 */ "18666, 19826, 19826, 19826, 19826, 30576, 21395, 29999, 19826, 19826, 26253, 41974, 29622, 29622",
      /* 16436 */ "34705, 35200, 22052, 22052, 31359, 21373, 34343, 39222, 19826, 32720, 19826, 19826, 19826, 19826",
      /* 16450 */ "21394, 34282, 19826, 30578, 27490, 37325, 29622, 41729, 27416, 41751, 22052, 32587, 22053, 34641",
      /* 16464 */ "34343, 33995, 19826, 19826, 19826, 19826, 19826, 38596, 29999, 22270, 33011, 31465, 41785, 29622",
      /* 16478 */ "38316, 28094, 38159, 22052, 22052, 41807, 19826, 19826, 41837, 19826, 19826, 26255, 32290, 24212",
      /* 16492 */ "29619, 39660, 29622, 41855, 22051, 41769, 22052, 41876, 19826, 19826, 26949, 22270, 30000, 21457",
      /* 16506 */ "29622, 29622, 28092, 22052, 26763, 35083, 19826, 19826, 41922, 29088, 29621, 21435, 22052, 28789",
      /* 16520 */ "19826, 19826, 30580, 26144, 29622, 35765, 40865, 19826, 25146, 21433, 22052, 32457, 25154, 30906",
      /* 16534 */ "40010, 41814, 40013, 21676, 26047, 26925, 21415, 25703, 25703, 36697, 32449, 19826, 19826, 19826",
      /* 16548 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16562 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16576 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16590 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16604 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16618 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16632 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 24185, 19826, 19826, 19826, 19826, 25369",
      /* 16646 */ "19826, 19826, 19826, 41231, 41942, 32293, 22271, 40632, 21375, 36985, 21571, 19826, 19826, 19807",
      /* 16660 */ "19826, 19826, 19826, 19826, 22270, 21395, 19826, 19826, 19826, 26254, 23838, 29622, 21626, 26275",
      /* 16674 */ "21300, 28004, 19826, 19826, 18666, 19826, 19826, 19826, 19826, 30576, 21395, 29999, 19826, 19826",
      /* 16688 */ "26253, 41974, 29622, 29622, 29622, 29590, 22052, 22052, 26274, 21373, 34343, 19826, 19826, 19826",
      /* 16702 */ "19826, 19826, 19826, 19826, 21394, 29998, 19826, 30578, 27490, 29622, 29622, 29622, 27416, 27372",
      /* 16716 */ "22052, 22052, 22053, 34641, 34343, 19826, 19826, 19826, 19826, 19826, 19826, 26256, 29999, 22270",
      /* 16730 */ "33011, 29622, 29622, 29622, 38316, 28094, 22052, 22052, 22052, 21412, 19826, 19826, 19826, 19826",
      /* 16744 */ "19826, 26255, 32290, 30579, 29619, 29622, 29622, 25491, 22051, 22052, 22052, 28686, 19826, 19826",
      /* 16758 */ "19826, 22270, 30000, 21457, 29622, 29622, 28092, 22052, 26763, 34343, 19826, 19826, 30577, 29088",
      /* 16772 */ "29621, 21435, 22052, 28789, 19826, 19826, 30580, 26144, 29622, 35765, 40865, 19826, 25146, 21433",
      /* 16786 */ "22052, 32457, 25154, 30906, 40010, 41814, 40013, 21676, 26047, 26925, 21415, 25703, 25703, 36697",
      /* 16800 */ "32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16814 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16828 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16842 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16856 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16870 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 16884 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19668, 19826",
      /* 16898 */ "19826, 19826, 19826, 41990, 42059, 42081, 42015, 41999, 42052, 42079, 42108, 42063, 42099, 42124",
      /* 16912 */ "42163, 19826, 19826, 19807, 19826, 19826, 31277, 42188, 42553, 18563, 19826, 19826, 19826, 18557",
      /* 16926 */ "25371, 18521, 42209, 24485, 19554, 42234, 18295, 18314, 26681, 19826, 19826, 42581, 19826, 39582",
      /* 16940 */ "18339, 18355, 18371, 18407, 18434, 18458, 20376, 18500, 23624, 18473, 20380, 18504, 23628, 18520",
      /* 16954 */ "42250, 29470, 19826, 19826, 19826, 34747, 22005, 42465, 18537, 18579, 18595, 23380, 18611, 18686",
      /* 16968 */ "18706, 18521, 18655, 18682, 18702, 18722, 42520, 18741, 18663, 18760, 21120, 18824, 21114, 35088",
      /* 16982 */ "19826, 18855, 18871, 42370, 18442, 18923, 18945, 18967, 18989, 18917, 18939, 18961, 18983, 18521",
      /* 16996 */ "19786, 20801, 19892, 19005, 19026, 41470, 19064, 23303, 19080, 19098, 18637, 19116, 19082, 19100",
      /* 17010 */ "18639, 19136, 32989, 19161, 19048, 42553, 19182, 42137, 19251, 19219, 19240, 19256, 19224, 19145",
      /* 17024 */ "31661, 19272, 30536, 18551, 19295, 19316, 19300, 19321, 21100, 19337, 19371, 19387, 19424, 19417",
      /* 17038 */ "18484, 19446, 19462, 19478, 19476, 19401, 19494, 19498, 19514, 19430, 19517, 42527, 19534, 19570",
      /* 17052 */ "19586, 19518, 19602, 19618, 19632, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17066 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17080 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17094 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17108 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17122 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17136 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17150 */ "19826, 19826, 19668, 19826, 19826, 19826, 19826, 25369, 19826, 19826, 42272, 41231, 19690, 41071",
      /* 17164 */ "41076, 42294, 19826, 42329, 36165, 19826, 19826, 19807, 19826, 19826, 31277, 19826, 42553, 18563",
      /* 17178 */ "19826, 42368, 19826, 18557, 25371, 18521, 19548, 24485, 19554, 23922, 18295, 18314, 26681, 19826",
      /* 17192 */ "19826, 42581, 19826, 39582, 18339, 18355, 18371, 18407, 18434, 18458, 20376, 18500, 23624, 18626",
      /* 17206 */ "20380, 18504, 23628, 18520, 18663, 29470, 19826, 19826, 19826, 34747, 22005, 42465, 18537, 18579",
      /* 17220 */ "18595, 23380, 18611, 18686, 18706, 18521, 18655, 18682, 18702, 18722, 42520, 18741, 18663, 18760",
      /* 17234 */ "21120, 18824, 21114, 35088, 19826, 18855, 18871, 42370, 18442, 18923, 18945, 18967, 18989, 18917",
      /* 17248 */ "18939, 18961, 18983, 18521, 19786, 20801, 19892, 19005, 19026, 41470, 19064, 23303, 19080, 19098",
      /* 17262 */ "18637, 19116, 19082, 19100, 18639, 19136, 32989, 19161, 19048, 42553, 19182, 42137, 19251, 19219",
      /* 17276 */ "19240, 19256, 19224, 19145, 31661, 19272, 30536, 18551, 19295, 19316, 19300, 19321, 21100, 19337",
      /* 17290 */ "19371, 19387, 19424, 19417, 18484, 19446, 19462, 19478, 19476, 19401, 19494, 19498, 19514, 19430",
      /* 17304 */ "19517, 42527, 19534, 19570, 19586, 19518, 19602, 19618, 19632, 19826, 19826, 19826, 19826, 19826",
      /* 17318 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17332 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17346 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17360 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17374 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17388 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17402 */ "19826, 19826, 19826, 19826, 19826, 19826, 19668, 19826, 19826, 19826, 19826, 25369, 42386, 19826",
      /* 17416 */ "19826, 32478, 42408, 42313, 42430, 42436, 19826, 42452, 36165, 19826, 19826, 19807, 19826, 19826",
      /* 17430 */ "31277, 42487, 42553, 18563, 19826, 19826, 19826, 18557, 25371, 18521, 19548, 24485, 19554, 23922",
      /* 17444 */ "18295, 18314, 26681, 19826, 19826, 42581, 19826, 39582, 18339, 18355, 18371, 18407, 18434, 18458",
      /* 17458 */ "20376, 18500, 23624, 42509, 20380, 18504, 23628, 18520, 18663, 29470, 19826, 19826, 19826, 34747",
      /* 17472 */ "22005, 42465, 18537, 18579, 18595, 23380, 18611, 18686, 18706, 18521, 18655, 18682, 18702, 18722",
      /* 17486 */ "42520, 18741, 18663, 18760, 21120, 18824, 21114, 35088, 19826, 18855, 18871, 42370, 18442, 18923",
      /* 17500 */ "18945, 18967, 18989, 18917, 18939, 18961, 18983, 18521, 19786, 20801, 19892, 19005, 19026, 41470",
      /* 17514 */ "19064, 23303, 19080, 19098, 18637, 19116, 19082, 19100, 18639, 19136, 32989, 19161, 19048, 42553",
      /* 17528 */ "19182, 42137, 19251, 19219, 19240, 19256, 19224, 19145, 31661, 19272, 30536, 18551, 19295, 19316",
      /* 17542 */ "19300, 19321, 21100, 19337, 19371, 19387, 19424, 19417, 18484, 19446, 19462, 19478, 19476, 19401",
      /* 17556 */ "19494, 19498, 19514, 19430, 19517, 42527, 19534, 19570, 19586, 19518, 19602, 19618, 19632, 19826",
      /* 17570 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17584 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17598 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17612 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17626 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17640 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17654 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19668, 19826, 19826, 19826",
      /* 17668 */ "19826, 25369, 19826, 19826, 19826, 41231, 19690, 19826, 19826, 19826, 19826, 31128, 21571, 19826",
      /* 17682 */ "19826, 19807, 19826, 19826, 19826, 19826, 22270, 21395, 19826, 19826, 19826, 26254, 23838, 29622",
      /* 17696 */ "21626, 26275, 21300, 28004, 19826, 19826, 18666, 19826, 19826, 19826, 19826, 30576, 21395, 29999",
      /* 17710 */ "19826, 19826, 26253, 40006, 29622, 29622, 29622, 29289, 22052, 22052, 26274, 21373, 34343, 19826",
      /* 17724 */ "19826, 19826, 19826, 19826, 19826, 19826, 21394, 29998, 19826, 30578, 27490, 29622, 29622, 29622",
      /* 17738 */ "26744, 22051, 22052, 22052, 22053, 34641, 34343, 19826, 19826, 19826, 19826, 19826, 19826, 26256",
      /* 17752 */ "29999, 22270, 33011, 29622, 29622, 29622, 38316, 28094, 22052, 22052, 22052, 21412, 19826, 19826",
      /* 17766 */ "19826, 19826, 19826, 26255, 32290, 30579, 29619, 29622, 29622, 25491, 22051, 22052, 22052, 28686",
      /* 17780 */ "19826, 19826, 19826, 22270, 30000, 21457, 29622, 29622, 28092, 22052, 26763, 34343, 19826, 19826",
      /* 17794 */ "30577, 29088, 29621, 21435, 22052, 28789, 19826, 19826, 30580, 26144, 29622, 35765, 40865, 19826",
      /* 17808 */ "25146, 21433, 22052, 32457, 25154, 30906, 40010, 41814, 40013, 21676, 26047, 26925, 21415, 25703",
      /* 17822 */ "25703, 36697, 32449, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17836 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17850 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17864 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17878 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17892 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17906 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 17920 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 42548, 19826, 42552, 31141, 31146, 42569",
      /* 17934 */ "36899, 42604, 31277, 19826, 19826, 19826, 19826, 19826, 31277, 19826, 42553, 18563, 19826, 19826",
      /* 17948 */ "19826, 18557, 25371, 18521, 19548, 24485, 19554, 42532, 18295, 18314, 22966, 19826, 19826, 42581",
      /* 17962 */ "19826, 39582, 18339, 18355, 18371, 18407, 18434, 18458, 20376, 18500, 23624, 18473, 20380, 18504",
      /* 17976 */ "23628, 18520, 18663, 29470, 19826, 19826, 19826, 34747, 22005, 42465, 18537, 18579, 18595, 23380",
      /* 17990 */ "18611, 18686, 18706, 18521, 18655, 18682, 18702, 18722, 42520, 18741, 18663, 18760, 21120, 18824",
      /* 18004 */ "21114, 35088, 19826, 18855, 18871, 42370, 18442, 18923, 18945, 18967, 18989, 18917, 18939, 18961",
      /* 18018 */ "18983, 18521, 19786, 20801, 19892, 19005, 19026, 41470, 19064, 23303, 19080, 19098, 18637, 19116",
      /* 18032 */ "19082, 19100, 18639, 19136, 32989, 19161, 19048, 42553, 19182, 42137, 19251, 19219, 19240, 19256",
      /* 18046 */ "19224, 19145, 31661, 19272, 30536, 18551, 19295, 19316, 19300, 19321, 21100, 19337, 19371, 19387",
      /* 18060 */ "19424, 19417, 18484, 19446, 19462, 19478, 19476, 19401, 19494, 19498, 19514, 19430, 19517, 42527",
      /* 18074 */ "19534, 19570, 19586, 19518, 19602, 19618, 19632, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 18088 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 18102 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 18116 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 18130 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 18144 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 18158 */ "19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826, 19826",
      /* 18172 */ "19826, 19826, 19826, 19826, 0, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 73986, 73986, 73986, 73986, 0",
      /* 18193 */ "0, 78085, 78085, 73986, 73986, 78085, 78085, 78085, 78085, 78085, 78085, 78085, 78085, 78085, 78085",
      /* 18208 */ "0, 78085, 0, 73986, 78085, 73986, 78085, 316, 78085, 78085, 78085, 78085, 78085, 78085, 78085",
      /* 18223 */ "78085, 78085, 78085, 78085, 78085, 78085, 78085, 78085, 78085, 45056, 49152, 78085, 78085, 78085",
      /* 18237 */ "78085, 40960, 78085, 78085, 78085, 78085, 78085, 78085, 78085, 78085, 78085, 78085, 78085, 0, 0, 2",
      /* 18253 */ "2, 3, 94212, 5, 6, 0, 0, 0, 0, 73986, 0, 0, 78085, 0, 2105344, 264, 265, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 18278 */ "1322, 0, 0, 0, 0, 0, 0, 0, 400, 400, 400, 400, 400, 400, 400, 400, 1082, 0, 0, 2469888, 0, 0, 0, 0",
      /* 18302 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 281, 282, 0, 0, 2719744, 0, 0, 0, 0, 0, 0, 2871296, 0, 0, 0, 0, 0, 0, 0",
      /* 18330 */ "0, 1387, 0, 0, 0, 0, 0, 1394, 0, 2158592, 2158592, 2158592, 2158592, 2158592, 2621440, 2158592",
      /* 18346 */ "2158592, 2686976, 2158592, 2703360, 2158592, 2158592, 2756608, 2777088, 2797568, 2158592, 2834432",
      /* 18357 */ "2158592, 2883584, 2158592, 2158592, 2158592, 3067904, 2158592, 2158592, 2158592, 0, 0, 0, 0",
      /* 18370 */ "2621440, 0, 2686976, 2703360, 0, 0, 2756608, 2777088, 2797568, 0, 2834432, 2883584, 0, 0, 0, 0, 0",
      /* 18387 */ "0, 0, 1907, 1908, 0, 0, 0, 0, 0, 0, 0, 0, 270336, 270336, 270336, 270336, 270336, 270336, 270336",
      /* 18406 */ "270336, 0, 0, 2883584, 2441216, 0, 0, 0, 0, 2777088, 0, 2883584, 0, 0, 0, 0, 0, 0, 0, 2307, 400",
      /* 18427 */ "400, 2309, 2310, 400, 400, 400, 0, 0, 2719744, 0, 0, 2883584, 0, 0, 2158592, 2158592, 2158592",
      /* 18444 */ "2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 3158016, 2158592, 0, 0, 0, 0, 2162688",
      /* 18457 */ "2162688, 2158592, 2158592, 2158592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2162688, 2441216, 2449408, 2162688",
      /* 18474 */ "0, 0, 0, 0, 0, 0, 0, 2162688, 2441216, 2449408, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 18489 */ "2162688, 2162688, 3121152, 2162688, 2162688, 2162688, 2162688, 0, 2494464, 0, 0, 2162688, 2711552",
      /* 18502 */ "2162688, 2162688, 2756608, 2162688, 2777088, 2797568, 2162688, 2162688, 2834432, 2162688, 2162688",
      /* 18513 */ "2883584, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2162688, 2162688, 2162688",
      /* 18524 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 18535 */ "2162688, 2162688, 0, 2428928, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2580480",
      /* 18546 */ "2158592, 2158592, 2613248, 2158592, 2658304, 2158592, 2158592, 2158592, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 18563 */ "2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592",
      /* 18574 */ "2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2785280, 2809856, 2158592, 2158592",
      /* 18585 */ "2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2428928, 0, 0, 2580480, 0, 0, 0, 0, 2809856",
      /* 18600 */ "0, 0, 0, 0, 2809856, 0, 0, 0, 0, 0, 2809856, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592",
      /* 18617 */ "0, 0, 0, 0, 0, 0, 2162688, 2162688, 2428928, 2162688, 0, 0, 0, 853, 0, 0, 856, 2162688, 2441216",
      /* 18636 */ "2449408, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3026944",
      /* 18647 */ "2162688, 2162688, 3076096, 2162688, 3096576, 2162688, 2162688, 2162688, 2162688, 2162688, 3080192",
      /* 18658 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 18675 */ "0, 0, 0, 0, 316, 316, 0, 0, 2162688, 2428928, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 18691 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2580480, 2162688, 2162688, 2162688, 2162688",
      /* 18702 */ "2162688, 2162688, 2162688, 2162688, 2613248, 2162688, 2162688, 2162688, 2658304, 2162688, 2162688",
      /* 18713 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2785280, 2809856, 2162688, 2162688, 2785280",
      /* 18724 */ "2809856, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 18735 */ "2162688, 2162688, 2162688, 2162688, 0, 913, 2801664, 2162688, 2801664, 2162688, 2162688, 2162688",
      /* 18747 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 18758 */ "912, 0, 0, 2473984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2596864, 0, 0, 2760704, 0, 0, 0, 0, 615, 0, 0, 0, 0",
      /* 18784 */ "0, 0, 316, 316, 316, 0, 0, 0, 0, 520, 520, 520, 520, 520, 1798, 520, 520, 520, 520, 520, 520, 520",
      /* 18806 */ "520, 2155, 520, 520, 520, 520, 520, 520, 520, 520, 520, 2156, 520, 520, 520, 520, 520, 520, 3141632",
      /* 18825 */ "0, 0, 3158016, 0, 0, 0, 0, 0, 0, 0, 0, 2875392, 0, 2768896, 0, 0, 0, 0, 621, 600, 400, 400, 778",
      /* 18848 */ "400, 780, 400, 400, 728, 400, 787, 0, 0, 0, 0, 2158592, 2473984, 2478080, 2158592, 2158592, 2158592",
      /* 18865 */ "2158592, 2596864, 2158592, 2158592, 2158592, 2707456, 2158592, 2158592, 2875392, 2158592, 2158592",
      /* 18876 */ "2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2478080, 0, 0, 2707456, 0, 0, 0, 0, 629, 0, 0",
      /* 18893 */ "632, 0, 0, 0, 0, 637, 0, 639, 0, 0, 0, 0, 682, 0, 400, 400, 400, 400, 400, 400, 400, 400, 400, 731",
      /* 18917 */ "0, 0, 0, 0, 2162688, 2162688, 2162688, 2473984, 2478080, 2162688, 2162688, 2162688, 2519040",
      /* 18930 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2596864, 2162688, 2162688, 2162688",
      /* 18941 */ "2162688, 2162688, 2596864, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2707456, 2162688",
      /* 18952 */ "2162688, 2162688, 2162688, 2162688, 2760704, 2162688, 2162688, 2162688, 2854912, 2162688, 2760704",
      /* 18963 */ "2162688, 2162688, 2162688, 2854912, 2875392, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 18974 */ "2162688, 2162688, 2162688, 2994176, 3018752, 2162688, 2162688, 2162688, 3051520, 2994176, 3018752",
      /* 18985 */ "2162688, 2162688, 2162688, 3051520, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 18996 */ "2162688, 3158016, 2162688, 0, 0, 0, 0, 0, 2121728, 0, 0, 0, 0, 3043328, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 19019 */ "0, 0, 295, 296, 297, 298, 0, 2527232, 2695168, 0, 3145728, 0, 0, 0, 0, 0, 0, 2572288, 0, 0, 0, 0, 0",
      /* 19042 */ "0, 0, 962560, 1052672, 0, 2292, 0, 0, 0, 0, 0, 0, 0, 2715648, 0, 0, 3039232, 0, 0, 0, 3022848, 0",
      /* 19064 */ "2887680, 2158592, 2158592, 2158592, 3026944, 3076096, 3096576, 3145728, 0, 0, 0, 0, 0, 0, 3076096",
      /* 19079 */ "3096576, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2490368, 2162688, 2162688, 2527232, 2162688",
      /* 19092 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2600960, 2162688, 2600960, 2625536, 2162688, 2162688",
      /* 19103 */ "2162688, 2695168, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2887680",
      /* 19114 */ "2162688, 2162688, 2162688, 2162688, 3145728, 2162688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 342, 0, 0",
      /* 19135 */ "0, 3145728, 2162688, 2437120, 2437120, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 19146 */ "2162688, 2162688, 0, 0, 0, 0, 2514944, 0, 0, 2543616, 2592768, 0, 0, 0, 0, 0, 0, 3153920, 0",
      /* 19165 */ "2813952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 299, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592",
      /* 19186 */ "2633728, 2158592, 2158592, 2961408, 2158592, 3022848, 0, 0, 2633728, 0, 0, 0, 0, 0, 0, 2109440",
      /* 19202 */ "1020, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2215, 0, 2217, 400, 400, 400, 400, 2818048, 2162688, 2162688",
      /* 19222 */ "2908160, 2162688, 2162688, 2953216, 2162688, 2961408, 2162688, 2162688, 3022848, 3047424, 2162688",
      /* 19233 */ "2162688, 2162688, 2162688, 3174400, 2162688, 2162688, 2162688, 2162688, 3174400, 0, 0, 0, 0",
      /* 19246 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2547712, 2162688, 2162688",
      /* 19257 */ "2162688, 2162688, 2633728, 2162688, 2162688, 2715648, 2736128, 2162688, 2162688, 2813952, 2818048",
      /* 19268 */ "2162688, 2162688, 2908160, 2162688, 2891776, 0, 0, 0, 3014656, 0, 2539520, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 19287 */ "0, 0, 290816, 290816, 290816, 290816, 290816, 290816, 0, 2162688, 2162688, 2162688, 2162688",
      /* 19300 */ "2162688, 2498560, 2539520, 2543616, 2162688, 2162688, 2592768, 2162688, 2162688, 2162688, 2162688",
      /* 19311 */ "2162688, 2162688, 2891776, 2162688, 2162688, 2162688, 2162688, 2891776, 2162688, 2162688, 2957312",
      /* 19322 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 19333 */ "2162688, 2457600, 0, 0, 0, 0, 2936832, 0, 0, 3084288, 0, 2940928, 3129344, 2416640, 0, 0, 0, 0, 0",
      /* 19352 */ "0, 0, 648, 0, 0, 0, 0, 0, 0, 0, 0, 603, 604, 0, 0, 0, 0, 0, 0, 0, 2723840, 0, 0, 0, 0, 0, 0",
      /* 19379 */ "2158592, 2482176, 2158592, 2158592, 2740224, 2158592, 2158592, 2482176, 2740224, 0, 0, 0, 0, 0",
      /* 19393 */ "2158592, 2158592, 2158592, 0, 2420736, 2162688, 2162688, 2482176, 2162688, 2162688, 0, 0, 0, 0, 0",
      /* 19408 */ "2846720, 0, 0, 0, 0, 0, 0, 2805760, 0, 3121152, 2420736, 2162688, 2162688, 2482176, 2162688",
      /* 19423 */ "2162688, 2162688, 2584576, 2162688, 2162688, 2682880, 2740224, 2162688, 2162688, 2162688, 2162688",
      /* 19434 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2502656, 0, 0, 0",
      /* 19447 */ "2826240, 0, 2973696, 0, 0, 0, 3100672, 0, 0, 0, 0, 0, 0, 0, 2916352, 0, 2445312, 0, 2445312",
      /* 19466 */ "2494464, 2158592, 2744320, 2973696, 2744320, 0, 2158592, 0, 2162688, 2445312, 2453504, 2494464",
      /* 19478 */ "2162688, 2162688, 2162688, 2162688, 2650112, 2744320, 2826240, 2928640, 2162688, 2973696, 2162688",
      /* 19489 */ "2162688, 2162688, 3100672, 2162688, 2445312, 3178496, 2560000, 2560000, 0, 2162688, 2551808",
      /* 19500 */ "2560000, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3092480, 0, 0, 0",
      /* 19513 */ "0, 0, 2850816, 0, 0, 0, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 19529 */ "2162688, 2162688, 2162688, 2162688, 2162688, 0, 2162688, 2162688, 2588672, 2162688, 2162688",
      /* 19540 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2588672, 2162688, 2162688, 2162688",
      /* 19551 */ "0, 0, 2162688, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 19564 */ "2162688, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 19575 */ "2465792, 0, 2531328, 2985984, 0, 0, 0, 0, 2162688, 2162688, 2605056, 2162688, 2830336, 2162688",
      /* 19589 */ "2162688, 2162688, 2985984, 2162688, 2162688, 2605056, 2162688, 2830336, 2162688, 2162688, 2162688",
      /* 19600 */ "2985984, 2523136, 0, 0, 0, 0, 2424832, 2162688, 2162688, 2162688, 2162688, 2981888, 2424832",
      /* 19613 */ "2162688, 2162688, 2162688, 2162688, 2981888, 2535424, 0, 0, 2912256, 2162688, 2654208, 2932736",
      /* 19625 */ "2162688, 2162688, 2654208, 2932736, 2162688, 2637824, 2699264, 2555904, 2162688, 2162688, 2162688",
      /* 19636 */ "2162688, 2162688, 2162688, 2162688, 2945024, 2945024, 0, 0, 0, 0, 0, 0, 0, 669, 0, 0, 0, 0, 0, 0, 0",
      /* 19657 */ "496, 496, 496, 496, 2470, 496, 2472, 496, 2474, 496, 520, 0, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0",
      /* 19681 */ "0, 0, 0, 274, 274, 0, 0, 0, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 311, 312, 313",
      /* 19709 */ "314, 315, 111009, 111009, 111009, 111009, 111009, 111009, 417, 417, 111009, 111009, 111009, 111009",
      /* 19723 */ "111009, 417, 111009, 111009, 111009, 417, 111009, 417, 417, 417, 417, 417, 0, 417, 0, 0, 0, 0, 0, 0",
      /* 19743 */ "747, 0, 0, 0, 0, 755, 0, 0, 0, 0, 0, 0, 776, 400, 400, 400, 400, 400, 400, 400, 400, 400, 0, 1932",
      /* 19767 */ "0, 0, 0, 0, 0, 0, 0, 0, 111009, 111009, 111009, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0",
      /* 19792 */ "2486272, 0, 0, 0, 0, 0, 0, 0, 0, 2600960, 118784, 0, 0, 264, 118784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 19817 */ "0, 316, 316, 316, 0, 0, 0, 316, 264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 283, 0, 0, 0",
      /* 19846 */ "264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 354, 0, 0, 0, 264, 264, 0, 0, 0, 0, 0, 0, 0, 264, 0, 0, 0",
      /* 19876 */ "264, 119153, 49152, 264, 264, 0, 0, 264, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 2646016, 0",
      /* 19900 */ "2781184, 0, 0, 0, 0, 0, 0, 3125248, 32768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 299",
      /* 19925 */ "2162688, 2162688, 2162688, 2162688, 0, 2, 6, 0, 0, 0, 264, 0, 0, 0, 2441216, 2449408, 0, 2, 2183418",
      /* 19944 */ "94212, 5, 6, 254, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 305, 306, 307, 308, 0, 0, 0, 0, 0, 0, 0, 365",
      /* 19971 */ "307, 0, 0, 0, 0, 0, 45056, 49152, 0, 316, 0, 122880, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 316",
      /* 19996 */ "316, 316, 0, 625, 0, 122880, 0, 122880, 0, 122880, 122880, 122880, 122880, 122880, 0, 0, 0, 0, 0, 0",
      /* 20016 */ "0, 692, 0, 0, 0, 0, 0, 0, 0, 400, 400, 400, 716, 400, 400, 400, 400, 400, 400, 122880, 0, 0, 122880",
      /* 20039 */ "0, 0, 0, 0, 122880, 122880, 122880, 122880, 122880, 0, 122880, 122880, 122880, 0, 122880, 0, 0, 0",
      /* 20057 */ "0, 0, 0, 0, 0, 0, 0, 0, 316, 316, 316, 624, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 20086 */ "320, 0, 0, 0, 0, 122880, 122880, 0, 0, 0, 2, 2, 2183418, 94212, 5, 6, 0, 0, 0, 0, 0, 311, 0, 0, 312",
      /* 20111 */ "0, 311, 0, 0, 0, 45056, 49152, 147456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 311, 0, 672, 0",
      /* 20138 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2163484, 2162688, 2162688, 2162688, 2162688, 0, 2, 6, 0",
      /* 20161 */ "0, 0, 0, 933, 937, 0, 2441216, 2449408, 2162688, 2162688, 3080192, 2162688, 2162688, 2162688",
      /* 20175 */ "2162688, 2162688, 2162688, 2162688, 2162688, 0, 1516, 0, 0, 1521, 0, 316, 0, 0, 0, 131072, 131072",
      /* 20192 */ "131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2190, 0, 0, 2192, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 20220 */ "0, 0, 0, 0, 0, 343, 0, 0, 0, 0, 0, 131072, 0, 0, 131072, 0, 131072, 131072, 131072, 131072, 131072",
      /* 20241 */ "131072, 131072, 131072, 0, 0, 131072, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 334, 0, 0, 0, 338",
      /* 20265 */ "339, 341, 294, 0, 0, 0, 0, 0, 357, 0, 0, 0, 0, 357, 0, 0, 0, 45056, 49152, 0, 316, 0, 0, 0, 0, 0, 0",
      /* 20292 */ "135168, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 45056, 49152, 0, 135168, 0, 0, 40960, 0, 0, 0, 0, 0",
      /* 20316 */ "0, 0, 0, 0, 0, 0, 316, 316, 204800, 0, 0, 135168, 135168, 0, 0, 135168, 0, 0, 2, 2, 3, 94212, 5, 6",
      /* 20340 */ "0, 0, 0, 0, 0, 496, 496, 496, 2469, 496, 496, 496, 496, 496, 496, 520, 2524, 520, 520, 520, 520",
      /* 20361 */ "520, 520, 520, 0, 2162688, 0, 0, 0, 1197, 0, 0, 1200, 2162688, 2441216, 2449408, 2162688, 2162688",
      /* 20378 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2621440, 2162688, 2162688, 2162688, 2162688",
      /* 20389 */ "2686976, 2162688, 2703360, 2162688, 2711552, 2162688, 2162688, 139264, 0, 0, 265, 139264, 0, 0, 0",
      /* 20404 */ "0, 0, 0, 0, 0, 0, 0, 0, 668, 590, 0, 0, 0, 0, 316, 265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 20435 */ "328, 265, 265, 0, 0, 0, 0, 0, 0, 0, 265, 0, 0, 0, 265, 45056, 139637, 265, 265, 0, 0, 265, 0, 0, 2",
      /* 20460 */ "2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 496, 496, 2468, 496, 496, 496, 496, 496, 496, 496, 520, 2449, 520",
      /* 20483 */ "520, 520, 2453, 520, 520, 520, 520, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 20510 */ "0, 36864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 680, 0, 0, 0, 0, 0, 0, 262, 262, 0, 0, 262, 262, 143622",
      /* 20537 */ "262, 262, 262, 262, 262, 262, 262, 143622, 262, 143622, 262, 262, 262, 262, 262, 262, 262, 262, 262",
      /* 20556 */ "317, 262, 143622, 262, 262, 262, 262, 262, 143622, 321, 262, 262, 262, 262, 262, 40960, 262, 262",
      /* 20574 */ "262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 143681, 262, 262, 262",
      /* 20593 */ "262, 262, 262, 262, 143681, 262, 143622, 262, 143681, 45056, 49152, 262, 143622, 262, 143622",
      /* 20608 */ "143622, 143622, 262, 262, 143622, 143622, 143622, 143622, 143622, 143622, 143622, 143622, 262, 262",
      /* 20622 */ "262, 262, 262, 262, 143622, 143622, 143622, 262, 143622, 262, 262, 262, 262, 262, 0, 262, 0, 0, 262",
      /* 20641 */ "0, 0, 0, 0, 688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 400, 400, 0, 496, 496, 2319, 496, 496, 496, 262",
      /* 20667 */ "262, 262, 143622, 262, 143622, 143622, 143622, 143622, 143622, 143622, 143681, 143681, 143681",
      /* 20680 */ "143681, 143681, 143622, 143622, 143622, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 616, 0, 0, 0, 0",
      /* 20703 */ "0, 316, 316, 316, 0, 0, 0, 316, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 155648, 155648, 0, 0, 0, 40960, 0",
      /* 20727 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 793, 0, 0, 0, 496, 0, 0, 0, 0, 155648, 0, 0, 155648, 0, 0, 0, 0, 0",
      /* 20755 */ "155648, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 155648, 155648, 155648, 155648, 155648, 155648, 155648",
      /* 20772 */ "155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 0, 155648, 0, 0, 0, 0, 0, 0",
      /* 20789 */ "155648, 155648, 155648, 0, 0, 2, 2, 0, 94212, 5, 6, 126976, 0, 0, 0, 0, 0, 2887680, 0, 0, 0, 0",
      /* 20811 */ "3026944, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 0, 159744, 159744",
      /* 20835 */ "159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744",
      /* 20847 */ "159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 0",
      /* 20860 */ "159744, 0, 0, 0, 0, 0, 0, 946, 947, 948, 0, 0, 0, 0, 0, 0, 0, 264, 265, 0, 0, 0, 0, 0, 0, 578, 676",
      /* 20887 */ "677, 678, 0, 0, 0, 0, 0, 684, 90631, 0, 0, 0, 159744, 0, 0, 0, 0, 90631, 90631, 90631, 90631, 90631",
      /* 20909 */ "90631, 90631, 159744, 159744, 90631, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 630, 631, 0, 0, 0",
      /* 20932 */ "0, 636, 0, 0, 0, 640, 90112, 2162688, 2428928, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 20947 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2580480, 163840, 163840, 163840, 163840",
      /* 20958 */ "163840, 163840, 163840, 163840, 163840, 163840, 0, 163840, 0, 0, 0, 0, 0, 0, 961, 0, 0, 0, 0, 0, 0",
      /* 20979 */ "0, 0, 0, 1323, 0, 0, 0, 0, 0, 0, 163840, 163840, 163840, 163840, 163840, 0, 0, 2, 2, 3, 94212, 5, 6",
      /* 21002 */ "0, 0, 0, 0, 0, 646, 0, 0, 649, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 155648, 0, 0, 0, 0, 0, 0, 0, 316, 0",
      /* 21030 */ "0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936",
      /* 21048 */ "167936, 167936, 0, 167936, 0, 0, 0, 0, 0, 0, 975, 0, 0, 0, 0, 0, 0, 316, 316, 0, 167936, 167936, 0",
      /* 21071 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327, 0, 167936, 0, 0, 0, 40960, 167936, 167936, 0, 0, 167936",
      /* 21096 */ "0, 167936, 0, 167936, 0, 0, 0, 0, 0, 2895872, 0, 0, 0, 2682880, 0, 2641920, 2609152, 2691072, 0, 0",
      /* 21116 */ "0, 0, 0, 2838528, 0, 0, 2854912, 0, 0, 0, 0, 0, 0, 0, 0, 3051520, 3055616, 0, 0, 0, 0, 0, 0, 0",
      /* 21140 */ "167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936",
      /* 21152 */ "167936, 167936, 167936, 167936, 0, 0, 167936, 167936, 167936, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0",
      /* 21172 */ "0, 0, 663, 359, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 0, 2, 3, 251, 5, 6, 0, 255, 0",
      /* 21200 */ "0, 0, 0, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 172032, 172032, 172032, 172032, 172032, 172032",
      /* 21221 */ "172032, 172032, 172032, 172032, 0, 172032, 0, 0, 0, 0, 0, 0, 979, 400, 400, 1117, 400, 400, 400",
      /* 21240 */ "1121, 400, 400, 172032, 172032, 172032, 172032, 172032, 53494, 53494, 2, 2, 3, 0, 5, 6, 0, 568, 0",
      /* 21259 */ "0, 0, 0, 751, 752, 0, 0, 754, 0, 0, 0, 0, 758, 0, 0, 0, 0, 496, 2549, 496, 496, 496, 496, 520, 2553",
      /* 21284 */ "520, 520, 520, 520, 520, 1576, 520, 520, 520, 520, 1580, 520, 520, 520, 520, 1585, 0, 520, 520, 496",
      /* 21304 */ "496, 496, 496, 496, 496, 496, 496, 0, 520, 520, 520, 520, 520, 520, 520, 520, 1997, 520, 520, 520",
      /* 21324 */ "520, 520, 520, 520, 520, 2353, 496, 2354, 520, 0, 0, 0, 0, 956, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 21350 */ "0, 0, 0, 357, 0, 0, 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 344, 0, 0, 0, 520, 520, 496, 496",
      /* 21378 */ "496, 496, 496, 496, 496, 496, 520, 520, 520, 520, 520, 520, 520, 0, 1683, 0, 0, 400, 400, 400, 400",
      /* 21399 */ "400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 731, 496, 520, 496, 496, 496, 496, 496",
      /* 21419 */ "496, 496, 520, 520, 520, 520, 520, 520, 520, 520, 520, 0, 496, 1960, 496, 496, 496, 496, 496, 496",
      /* 21439 */ "496, 496, 496, 496, 496, 496, 496, 496, 520, 520, 520, 520, 2207, 0, 0, 0, 0, 2212, 0, 0, 0, 0, 0",
      /* 21462 */ "400, 400, 400, 400, 400, 0, 496, 496, 496, 496, 496, 2301, 0, 0, 0, 0, 0, 0, 0, 400, 400, 400, 400",
      /* 21485 */ "400, 400, 400, 0, 0, 0, 1453, 0, 0, 1133, 496, 496, 496, 496, 2323, 496, 496, 496, 496, 496, 496",
      /* 21506 */ "496, 496, 496, 496, 496, 496, 496, 496, 843, 496, 496, 2335, 520, 520, 520, 520, 520, 520, 2341",
      /* 21525 */ "520, 520, 520, 520, 520, 520, 520, 496, 2281, 496, 520, 2283, 520, 0, 0, 0, 496, 496, 496, 496",
      /* 21545 */ "2378, 496, 2379, 2380, 496, 496, 496, 496, 496, 496, 520, 520, 520, 2451, 520, 520, 520, 520, 520",
      /* 21564 */ "520, 0, 0, 0, 0, 0, 2178, 0, 0, 0, 0, 0, 0, 0, 264, 265, 0, 0, 0, 0, 0, 0, 0, 0, 2438, 496, 496",
      /* 21591 */ "496, 496, 496, 496, 496, 1153, 496, 496, 496, 496, 496, 496, 496, 496, 1466, 496, 496, 496, 496",
      /* 21610 */ "496, 496, 496, 0, 0, 400, 0, 496, 2410, 496, 496, 496, 496, 496, 496, 2416, 496, 496, 496, 0, 0",
      /* 21631 */ "496, 0, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1998, 520, 520, 520, 520, 520, 520, 2420, 520",
      /* 21651 */ "520, 520, 520, 520, 520, 2426, 520, 520, 520, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1605, 496, 496",
      /* 21675 */ "2448, 520, 520, 520, 520, 520, 520, 520, 520, 520, 0, 0, 0, 0, 0, 0, 0, 358, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 21701 */ "0, 0, 0, 0, 0, 45056, 49152, 180769, 180769, 0, 0, 180769, 53494, 53494, 2, 2, 3, 94212, 5, 6, 0, 0",
      /* 21723 */ "0, 0, 0, 732, 0, 0, 0, 0, 741, 0, 0, 0, 0, 0, 0, 702, 400, 400, 718, 400, 400, 400, 400, 400, 400",
      /* 21748 */ "400, 1414, 400, 400, 400, 400, 0, 0, 0, 0, 0, 2228, 0, 0, 0, 400, 2231, 400, 400, 184320, 520, 520",
      /* 21770 */ "496, 496, 496, 496, 496, 496, 496, 496, 0, 520, 520, 520, 520, 520, 520, 1996, 520, 520, 520, 520",
      /* 21790 */ "2000, 520, 2002, 520, 188834, 188834, 188834, 188834, 188834, 188834, 0, 0, 188834, 188834, 188834",
      /* 21805 */ "188834, 188834, 0, 188834, 188834, 188834, 0, 188834, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266, 0, 0, 0, 0",
      /* 21828 */ "0, 0, 0, 0, 0, 0, 340, 0, 0, 0, 345, 340, 188834, 188834, 188834, 188834, 0, 0, 0, 2, 2, 3, 94212",
      /* 21851 */ "5, 6, 0, 0, 0, 0, 0, 733, 0, 0, 733, 0, 0, 0, 0, 757, 0, 0, 0, 192512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 21881 */ "0, 0, 0, 0, 370, 370, 0, 0, 263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 682, 0, 0, 0, 0, 263, 0",
      /* 21910 */ "263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 945, 0, 0, 0, 0, 359, 359, 0, 0, 359, 53494, 53494, 2, 2, 3",
      /* 21937 */ "94212, 5, 6, 0, 0, 0, 0, 0, 764, 627, 0, 0, 0, 768, 0, 0, 0, 627, 0, 0, 0, 0, 0, 0, 634, 0, 0, 0, 0",
      /* 21966 */ "0, 0, 0, 1053, 0, 0, 0, 0, 400, 400, 400, 400, 1689, 400, 400, 400, 400, 400, 400, 400, 663, 520",
      /* 21988 */ "520, 496, 496, 496, 496, 496, 496, 496, 496, 0, 520, 520, 520, 520, 246, 2, 6, 0, 0, 0, 0, 0, 0, 0",
      /* 22012 */ "0, 0, 0, 2658304, 0, 2785280, 0, 0, 0, 0, 0, 0, 1028, 1374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 951, 0",
      /* 22039 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 1788, 0, 0, 0, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520",
      /* 22063 */ "520, 520, 520, 520, 520, 496, 1601, 0, 1603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 699, 0, 400",
      /* 22088 */ "496, 496, 1987, 0, 1989, 0, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1999, 520, 2001, 520",
      /* 22108 */ "520, 0, 318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 593, 0, 0, 0, 268, 268, 268, 0, 0, 0, 0, 0",
      /* 22137 */ "0, 0, 0, 0, 0, 0, 980, 0, 316, 316, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 268, 0, 0, 0, 0, 0, 0",
      /* 22166 */ "988, 0, 990, 0, 0, 0, 0, 0, 0, 0, 264, 265, 0, 0, 0, 575, 0, 0, 0, 200704, 200704, 200971, 200704",
      /* 22189 */ "200971, 200704, 200972, 200704, 200704, 200971, 200704, 200704, 200704, 200972, 200704, 200704",
      /* 22201 */ "200704, 200704, 200704, 200704, 200704, 200704, 200704, 200704, 0, 200704, 0, 0, 0, 0, 0, 0, 1036",
      /* 22218 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 1376, 0, 0, 0, 0, 0, 0, 0, 0, 200704, 200971, 200704, 0, 0, 2, 2, 3",
      /* 22244 */ "94212, 5, 6, 0, 0, 0, 0, 0, 945, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 792, 0, 0, 0, 0, 496, 151552, 0, 0",
      /* 22272 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 0, 0, 2163543, 2163543, 2163484, 2163484, 2163484",
      /* 22293 */ "2163484, 2163484, 2163484, 2163484, 2163484, 0, 2163543, 2163543, 2163543, 2163543, 2491223",
      /* 22304 */ "2163543, 2163543, 2528087, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2601815, 2158592",
      /* 22315 */ "2158592, 2158592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2163484, 2442012, 2450204, 2163484, 0, 0, 0, 853, 0, 0",
      /* 22336 */ "856, 2163543, 2442071, 2450263, 2163543, 2163543, 2163543, 2163543, 2163543, 2465792, 0, 2531328",
      /* 22348 */ "2985984, 0, 0, 0, 0, 2163484, 2163484, 2605852, 2163484, 2712348, 2163484, 2163484, 2757404",
      /* 22361 */ "2163484, 2777884, 2798364, 2163484, 2163484, 2835228, 2163484, 2163484, 2884380, 2163484, 2163484",
      /* 22372 */ "2163484, 2163484, 2163484, 2163484, 2163484, 2163484, 3158812, 2163484, 0, 0, 0, 0, 0, 2121728",
      /* 22386 */ "2757463, 2163543, 2777943, 2798423, 2163543, 2163543, 2835287, 2163543, 2163543, 2884439, 2163543",
      /* 22397 */ "2163543, 2163543, 2163543, 2163543, 2163543, 3081047, 2163543, 2163543, 2163543, 2163543, 2163543",
      /* 22408 */ "2163543, 2163543, 2163543, 2163484, 0, 2163543, 2163543, 2163484, 2163484, 2163484, 2163484",
      /* 22419 */ "2163484, 2163484, 2163484, 2163484, 2163543, 2163543, 2163543, 2163543, 2163543, 0, 2, 6, 0, 0, 0",
      /* 22434 */ "0, 0, 0, 0, 2441216, 2449408, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 0, 0, 0, 0, 0",
      /* 22451 */ "0, 2162688, 2163484, 2429724, 2163484, 2163484, 2163484, 2163484, 2650908, 2745116, 2827036",
      /* 22462 */ "2929436, 2163484, 2974492, 2163484, 2163484, 2163484, 3101468, 2163543, 2446167, 2614044, 2163484",
      /* 22473 */ "2163484, 2163484, 2659100, 2163484, 2163484, 2163484, 2163484, 2163484, 2163484, 2163484, 2163484",
      /* 22484 */ "2786076, 2810652, 2163484, 2163484, 2163484, 2548508, 2163484, 2163484, 2163484, 2163484, 2634524",
      /* 22495 */ "2163484, 2163484, 2716444, 2736924, 2163484, 2163484, 2814748, 0, 2163543, 2429783, 2163543",
      /* 22506 */ "2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543",
      /* 22517 */ "2581335, 2802460, 2163543, 2802519, 2163484, 2163484, 2163484, 2163484, 2163484, 2163484, 2163484",
      /* 22528 */ "2163484, 2163543, 2163543, 2163543, 2163543, 2163543, 2597719, 2163543, 2163543, 2163543, 2163543",
      /* 22539 */ "2163543, 2163543, 2708311, 2163543, 2163543, 2163543, 2163543, 2614103, 2163543, 2163543, 2163543",
      /* 22550 */ "2659159, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 3027799, 2163543, 2163543",
      /* 22561 */ "3076951, 2163543, 3097431, 2163543, 2163543, 2163543, 2163484, 2474780, 2478876, 2163484, 2163484",
      /* 22572 */ "2163484, 2519836, 2163484, 2163484, 2163484, 2163484, 2163484, 2163484, 2163484, 2597660, 2163484",
      /* 22583 */ "2163484, 2892572, 2163484, 2163484, 2958108, 2163484, 2163484, 2163484, 2163484, 2163484, 2163484",
      /* 22594 */ "2163543, 2163543, 2163543, 2163543, 2622295, 2163543, 2163543, 2163543, 2163543, 2687831, 2163543",
      /* 22605 */ "2704215, 2163543, 2712407, 2163543, 2163543, 2876188, 2163484, 2163484, 2163484, 2163484, 2163484",
      /* 22616 */ "2163484, 2163484, 2163484, 2163484, 2994972, 3019548, 2163484, 2163484, 2163484, 3052316, 0, 0, 0",
      /* 22629 */ "0, 2163543, 2163543, 2163543, 2474839, 2478935, 2163543, 2163543, 2163543, 2519895, 2163543",
      /* 22640 */ "2163543, 2163543, 2634583, 2163543, 2163543, 2716503, 2736983, 2163543, 2163543, 2814807, 2818903",
      /* 22651 */ "2163543, 2163543, 2909015, 2163543, 2995031, 3019607, 2163543, 2163543, 2163543, 3052375, 2163543",
      /* 22662 */ "2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 3158871, 2163543, 2499415, 2540375",
      /* 22673 */ "2544471, 2163543, 2163543, 2593623, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2892631",
      /* 22684 */ "2163543, 2163543, 2552663, 2560855, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543",
      /* 22695 */ "2163543, 3093335, 0, 0, 0, 0, 0, 0, 1052, 0, 0, 0, 0, 0, 400, 400, 400, 400, 400, 0, 496, 2115, 496",
      /* 22718 */ "496, 2118, 2163484, 2163543, 2163484, 2163484, 2163484, 2163484, 2163484, 2163484, 2163484, 2163543",
      /* 22730 */ "2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 0, 2502656, 0, 0",
      /* 22743 */ "0, 0, 0, 2163484, 2163484, 2163484, 2163484, 2491164, 2163484, 2163484, 2528028, 2163484, 2163484",
      /* 22756 */ "2163484, 2163484, 2163484, 2163484, 2163484, 2163484, 2622236, 2163484, 2163484, 2163484, 2163484",
      /* 22767 */ "2687772, 2163484, 2704156, 2163484, 2601756, 2626332, 2163484, 2163484, 2163484, 2695964, 2163484",
      /* 22778 */ "2163484, 2163484, 2163484, 2163484, 2163484, 2163484, 2163484, 2888476, 2163484, 2163484, 3146524",
      /* 22789 */ "2163484, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 591, 0, 0, 0, 496, 2626391, 2163543, 2163543, 2163543",
      /* 22811 */ "2696023, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2888535, 2163543",
      /* 22822 */ "2163543, 2761559, 2163543, 2163543, 2163543, 2855767, 2876247, 2163543, 2163543, 2163543, 2163543",
      /* 22833 */ "2163543, 2163543, 2163543, 2163543, 2163543, 3122007, 2163484, 2163484, 2163543, 2163543, 0",
      /* 22844 */ "2494464, 0, 0, 3146583, 2163543, 2437916, 2437975, 2163484, 2163484, 2163484, 2163484, 2163543",
      /* 22856 */ "2163543, 2163543, 2163543, 0, 0, 0, 0, 2514944, 0, 0, 2543616, 2592768, 0, 0, 0, 0, 2818844",
      /* 22873 */ "2163484, 2163484, 2908956, 2163484, 2163484, 2954012, 2163484, 2962204, 2163484, 2163484, 3023644",
      /* 22884 */ "3048220, 2163484, 2163484, 2163484, 0, 0, 2163484, 854, 2163543, 2163543, 2163543, 2163543, 2163543",
      /* 22897 */ "2163543, 2163543, 2163543, 2163543, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 995, 0, 0, 2163484",
      /* 22918 */ "3175196, 0, 0, 0, 0, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543",
      /* 22931 */ "2548567, 2163543, 2786135, 2810711, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543",
      /* 22942 */ "2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163484, 2163484, 0, 0, 2958167, 2163543",
      /* 22954 */ "2163543, 2163543, 2163543, 2163543, 2163543, 2163484, 2163484, 2163484, 2163543, 2163543, 2163543",
      /* 22965 */ "2457600, 0, 0, 0, 0, 0, 3067904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188834, 188834, 188834, 188834",
      /* 22986 */ "188834, 188834, 2740224, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 0, 2421532, 2163484, 2163484",
      /* 23001 */ "2482972, 2163484, 2163484, 2163484, 2163484, 2163484, 2708252, 2163484, 2163484, 2163484, 2163484",
      /* 23012 */ "2163484, 2761500, 2163484, 2163484, 2163484, 2855708, 2163484, 2585372, 2163484, 2163484, 2683676",
      /* 23023 */ "2741020, 2163484, 2163484, 2163484, 2163484, 2163484, 2163484, 2163484, 2163484, 2163484, 2163484",
      /* 23034 */ "2163484, 2163484, 2163484, 2163484, 2163484, 2163484, 2581276, 2163484, 2163484, 2163484, 2163484",
      /* 23045 */ "3121948, 2421591, 2163543, 2163543, 2483031, 2163543, 2163543, 2163543, 2585431, 2163543, 2163543",
      /* 23056 */ "2683735, 2741079, 2163543, 2163543, 2163543, 2954071, 2163543, 2962263, 2163543, 2163543, 3023703",
      /* 23067 */ "3048279, 2163543, 2163543, 2163543, 2163543, 3175255, 2163484, 2163484, 2163484, 2163484, 2163484",
      /* 23078 */ "2163484, 2163484, 2163484, 3068700, 2163484, 2163484, 2163484, 2163484, 2163484, 2163484, 2163484",
      /* 23089 */ "2163484, 2163484, 3027740, 2163484, 2163484, 3076892, 2163484, 3097372, 2163484, 0, 2445312, 0",
      /* 23101 */ "2445312, 2494464, 2158592, 2744320, 2973696, 2744320, 0, 2158592, 0, 2163484, 2446108, 2454300",
      /* 23113 */ "2495260, 2454359, 2495319, 2163543, 2163543, 2163543, 2163543, 2650967, 2745175, 2827095, 2929495",
      /* 23124 */ "2163543, 2974551, 2163543, 2163543, 2163543, 3101527, 2163484, 2163543, 0, 0, 0, 0, 0, 2846720, 0",
      /* 23139 */ "0, 0, 0, 0, 0, 2805760, 0, 0, 0, 0, 944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2203, 0, 0, 0, 0, 3178496",
      /* 23167 */ "2560000, 2560000, 0, 2163484, 2552604, 2560796, 2163484, 2163484, 2163484, 2163484, 2163484",
      /* 23178 */ "2163484, 2163484, 2163484, 3093276, 0, 2850816, 0, 0, 0, 0, 0, 0, 2163484, 2163484, 2163484",
      /* 23193 */ "2163484, 2163484, 2163484, 2163484, 2163484, 2163484, 2163484, 2163543, 0, 2163484, 2163484",
      /* 23204 */ "2589468, 2163484, 2163484, 2163484, 2163484, 2163484, 2163484, 2163484, 2163543, 2163543, 2589527",
      /* 23215 */ "2163543, 2163543, 2163484, 2831132, 2163484, 2163484, 2163484, 2986780, 2163543, 2163543, 2605911",
      /* 23226 */ "2163543, 2831191, 2163543, 2163543, 2163543, 2986839, 2523136, 0, 0, 0, 0, 2163484, 2163484",
      /* 23239 */ "2163484, 2163484, 2163484, 2163484, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 3068759",
      /* 23250 */ "2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163543, 2163484, 2163484, 0, 0, 0",
      /* 23263 */ "0, 0, 2425628, 2163484, 2163484, 2163484, 2163484, 2982684, 2425687, 2163543, 2163543, 2163543",
      /* 23275 */ "2163543, 2982743, 2535424, 0, 0, 2912256, 2163484, 2655004, 2933532, 2163484, 2163543, 2655063",
      /* 23287 */ "2933591, 2163543, 2637824, 2699264, 2556700, 2163484, 2163484, 3080988, 2163484, 2163484, 2163484",
      /* 23298 */ "2163484, 2163484, 2163484, 2163484, 2163484, 0, 0, 0, 0, 0, 0, 0, 2887680, 0, 2158592, 2158592",
      /* 23314 */ "2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 3158016, 2158592, 0, 0, 0, 0, 2163484",
      /* 23327 */ "2163484, 2556759, 2163543, 2163484, 2163543, 2163484, 2163543, 2163484, 2163543, 2945820, 2945879",
      /* 23338 */ "0, 0, 0, 0, 0, 0, 0, 735, 0, 0, 0, 0, 0, 0, 0, 0, 359, 359, 359, 359, 359, 359, 359, 359, 0, 316, 0",
      /* 23365 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 0, 0, 217088, 217088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2158592",
      /* 23391 */ "2158592, 2158592, 2158592, 2809856, 2158592, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 217088, 0, 0",
      /* 23411 */ "0, 0, 0, 960, 0, 962, 0, 0, 964, 965, 0, 0, 0, 0, 0, 0, 1437, 0, 0, 0, 400, 400, 400, 400, 1443",
      /* 23436 */ "400, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088",
      /* 23449 */ "217088, 217088, 217088, 217088, 0, 217088, 0, 0, 0, 0, 0, 0, 217088, 217088, 217088, 0, 0, 2, 2, 3",
      /* 23469 */ "94212, 5, 6, 0, 0, 0, 0, 0, 1003, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 950, 0, 0, 0, 0, 0, 0, 0, 0, 57344",
      /* 23498 */ "0, 0, 0, 28672, 0, 0, 2658304, 0, 2785280, 0, 0, 0, 0, 0, 1019, 664, 0, 0, 0, 0, 0, 0, 970, 0, 0",
      /* 23523 */ "973, 974, 0, 0, 0, 977, 0, 0, 0, 0, 316, 316, 0, 2162688, 2162688, 2162688, 264, 0, 0, 0, 264, 0",
      /* 23545 */ "265, 0, 0, 0, 265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 400, 400, 1061, 264, 0, 265, 0, 0, 0",
      /* 23572 */ "2486272, 0, 0, 0, 0, 0, 0, 0, 0, 2600960, 2162688, 2162688, 3145728, 2162688, 0, 853, 0, 0, 0, 853",
      /* 23592 */ "0, 856, 0, 0, 0, 856, 2162688, 3174400, 853, 0, 856, 0, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 23609 */ "2162688, 2162688, 2162688, 2547712, 2162688, 0, 0, 0, 853, 0, 90112, 856, 2162688, 2441216, 2449408",
      /* 23624 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3067904, 2162688, 2162688",
      /* 23635 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0, 0, 221567, 0, 0",
      /* 23651 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 993, 0, 0, 0, 0, 221603, 221603, 221603, 221603, 221603, 221603, 221603",
      /* 23672 */ "221603, 221603, 221603, 0, 221603, 0, 0, 0, 0, 0, 0, 1306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 283, 324, 324",
      /* 23696 */ "353, 0, 0, 0, 221727, 221727, 221603, 221603, 221740, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0",
      /* 23718 */ "1032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1041, 0, 0, 0, 0, 0, 0, 0, 237568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 23748 */ "0, 0, 0, 1011, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 23763 */ "2162688, 2162688, 237568, 2162688, 2162688, 2162688, 2162688, 0, 2, 0, 176128, 294912, 0, 0, 0, 0",
      /* 23779 */ "0, 2441216, 2449408, 0, 2, 3, 94212, 5, 6, 0, 0, 249856, 0, 0, 0, 0, 249856, 0, 0, 0, 0, 0, 3067904",
      /* 23802 */ "0, 0, 0, 0, 0, 0, 0, 0, 2179695, 0, 250276, 250276, 250276, 250276, 250276, 250276, 249856, 249856",
      /* 23820 */ "250276, 250276, 250276, 250276, 250276, 249856, 250276, 250276, 250276, 249856, 250276, 249856",
      /* 23832 */ "249856, 249856, 249856, 249856, 0, 249856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 496, 0, 0",
      /* 23856 */ "250276, 250276, 250276, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 1035, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 23882 */ "0, 1339, 0, 0, 0, 0, 0, 114688, 0, 241664, 0, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1009, 0, 0",
      /* 23908 */ "0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 23921 */ "241664, 2162688, 2162688, 2162688, 2162688, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 2441216, 2449408, 0, 2, 3",
      /* 23941 */ "94212, 5, 6, 0, 0, 0, 258048, 0, 0, 0, 0, 258048, 0, 0, 0, 0, 959, 0, 0, 0, 0, 0, 0, 0, 0, 967, 0",
      /* 23968 */ "0, 0, 0, 520, 1795, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1262, 520, 496, 496, 0",
      /* 23989 */ "258469, 258469, 258469, 258469, 258469, 258469, 258469, 258469, 258469, 258469, 0, 258469, 0, 0, 0",
      /* 24004 */ "258048, 0, 0, 258469, 258469, 258469, 0, 0, 2, 2, 3, 94212, 0, 6, 0, 0, 274432, 0, 0, 0, 253952",
      /* 24025 */ "266240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1021, 1021, 0, 0, 0, 0, 2, 3, 94212, 2195708, 6, 0, 0, 0",
      /* 24051 */ "0, 256, 0, 0, 0, 0, 256, 0, 316, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 270336, 0, 0, 0, 0, 0, 1051, 0, 0, 0",
      /* 24080 */ "0, 0, 0, 400, 400, 400, 400, 400, 400, 400, 400, 785, 400, 270336, 270336, 0, 0, 270336, 0, 0, 2, 2",
      /* 24102 */ "3, 94212, 2195708, 6, 0, 0, 0, 0, 0, 1113, 0, 400, 400, 400, 400, 400, 400, 400, 1122, 400, 0",
      /* 24123 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 245760",
      /* 24134 */ "2162688, 2162688, 2162688, 2162688, 0, 2, 6, 0, 0, 0, 0, 0, 0, 265, 2441216, 2449408, 278528",
      /* 24151 */ "278528, 0, 0, 278528, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 1305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 24179 */ "742, 0, 0, 0, 0, 0, 53494, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 515, 0, 515, 515, 515",
      /* 24206 */ "515, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 400, 1943, 400, 400, 400, 400, 0, 0, 0, 0",
      /* 24232 */ "1904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1057, 400, 400, 1060, 400, 1380, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 24259 */ "0, 0, 0, 0, 0, 0, 590, 0, 0, 0, 1669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 607, 0, 0, 0, 0, 0, 0, 0",
      /* 24290 */ "40960, 0, 0, 0, 0, 0, 0, 0, 390, 0, 400, 400, 400, 400, 1401, 400, 400, 400, 400, 400, 400, 400",
      /* 24312 */ "400, 400, 400, 0, 0, 0, 0, 496, 1733, 1046, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 400, 400, 400",
      /* 24337 */ "400, 1120, 400, 400, 400, 521, 518, 518, 518, 518, 518, 518, 518, 518, 521, 521, 521, 521, 521, 521",
      /* 24357 */ "521, 518, 518, 521, 53494, 53494, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 1365, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 24383 */ "0, 0, 668, 0, 0, 0, 0, 668, 53495, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 589, 590, 0, 0",
      /* 24411 */ "0, 0, 286720, 286720, 286720, 286720, 286720, 286720, 0, 0, 286720, 286720, 286720, 286720, 286720",
      /* 24426 */ "0, 286720, 286720, 286720, 0, 286720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1094, 0, 0, 0, 0, 286720",
      /* 24449 */ "286720, 286720, 286720, 286720, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 1426, 0, 0, 0, 0, 0, 0",
      /* 24473 */ "0, 0, 0, 0, 979, 0, 0, 316, 316, 0, 303104, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 24490 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0",
      /* 24503 */ "2936832, 0, 0, 3084288, 0, 2940928, 3129344, 2416640, 229376, 0, 0, 0, 0, 0, 0, 263, 264, 265, 0, 0",
      /* 24523 */ "0, 0, 0, 0, 0, 0, 2200, 0, 0, 0, 0, 0, 2205, 2206, 0, 248, 3, 94212, 5, 253, 0, 0, 0, 0, 0, 257, 0",
      /* 24550 */ "0, 0, 0, 0, 0, 1335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 311, 0, 0, 0, 0, 0, 0, 0, 259, 0, 0, 0, 0, 0, 0, 0",
      /* 24581 */ "0, 0, 0, 0, 0, 0, 0, 624, 0, 0, 316, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290816, 0, 0, 0, 40960, 0",
      /* 24610 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1095, 0, 0, 0, 0, 290816, 290816, 290816, 290816, 290816, 290816",
      /* 24631 */ "290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 0, 290816, 0, 0, 0",
      /* 24646 */ "0, 0, 0, 290816, 290816, 290816, 0, 0, 248, 248, 3, 94212, 5, 4297271, 0, 0, 0, 0, 0, 1610, 1611, 0",
      /* 24668 */ "0, 0, 1615, 0, 0, 0, 0, 0, 0, 337, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 569, 0, 0, 0, 0, 0, 2105344",
      /* 24694 */ "264, 265, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 131072, 2162688, 2162688, 2162688",
      /* 24715 */ "2162688, 0, 248, 4297271, 0, 0, 0, 0, 0, 0, 0, 2441216, 2449408, 0, 249, 3, 94212, 5, 6, 0, 0, 0, 0",
      /* 24738 */ "0, 0, 0, 0, 0, 0, 593, 0, 0, 0, 0, 0, 0, 260, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 655, 0, 544",
      /* 24769 */ "544, 0, 0, 544, 0, 0, 4264502, 249, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 1611, 0, 0, 1716, 0, 1717, 0, 0",
      /* 24794 */ "0, 0, 400, 400, 1687, 1688, 400, 400, 400, 400, 400, 400, 400, 400, 0, 0, 0, 0, 1935, 0, 0, 0, 0, 0",
      /* 24818 */ "570, 0, 0, 0, 2105344, 264, 265, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 135168, 0, 0, 0, 0, 0, 0, 2162688",
      /* 24842 */ "2162688, 2162688, 2162688, 0, 932, 6, 0, 0, 299008, 0, 0, 0, 0, 2441216, 2449408, 0, 269, 270, 0, 0",
      /* 24862 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1107, 0, 0, 0, 316, 0, 0, 0, 0, 0, 0, 0, 270, 0, 0, 0, 0, 0, 0, 0",
      /* 24893 */ "989, 0, 0, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 0, 0, 0, 575, 0, 0, 0, 269, 0, 270, 0, 269, 269, 270, 0",
      /* 24921 */ "0, 0, 0, 0, 0, 0, 1005, 0, 0, 0, 0, 0, 0, 0, 0, 666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 361, 363, 270, 0",
      /* 24951 */ "0, 0, 0, 270, 0, 368, 0, 45056, 49152, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 269, 0, 398, 401, 401",
      /* 24976 */ "401, 401, 401, 422, 422, 422, 422, 422, 445, 445, 445, 445, 445, 445, 460, 464, 445, 445, 445, 445",
      /* 24996 */ "445, 460, 471, 445, 445, 445, 445, 464, 445, 464, 464, 464, 464, 464, 497, 516, 497, 497, 497, 497",
      /* 25016 */ "522, 497, 497, 497, 497, 541, 541, 541, 541, 546, 546, 546, 546, 546, 546, 546, 548, 548, 557",
      /* 25035 */ "53494, 53494, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 1660, 0, 0, 0, 0, 0, 0, 0, 1374, 0, 0, 0, 0, 0",
      /* 25062 */ "0, 0, 0, 1378, 0, 0, 0, 580, 581, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1326, 0, 0, 0, 0, 659, 0",
      /* 25091 */ "0, 0, 0, 665, 0, 0, 0, 0, 0, 0, 0, 0, 0, 466944, 0, 2365, 2366, 0, 0, 0, 0, 673, 0, 0, 0, 0, 577, 0",
      /* 25119 */ "0, 0, 0, 0, 0, 0, 0, 0, 282, 282, 0, 326, 0, 0, 0, 0, 0, 686, 0, 0, 689, 0, 0, 0, 0, 0, 696, 0, 0",
      /* 25148 */ "0, 400, 400, 400, 400, 400, 0, 0, 400, 0, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 25169 */ "496, 1158, 496, 496, 496, 400, 703, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 726, 400, 400",
      /* 25189 */ "400, 0, 0, 0, 1129, 0, 0, 0, 0, 1133, 496, 496, 496, 496, 0, 0, 1987, 0, 0, 0, 0, 0, 1989, 0, 0, 0",
      /* 25215 */ "0, 0, 0, 774, 0, 0, 400, 400, 703, 400, 400, 781, 726, 400, 400, 400, 0, 409600, 0, 0, 0, 0, 0, 0",
      /* 25239 */ "0, 410000, 400, 400, 400, 400, 400, 400, 2098, 400, 400, 400, 0, 0, 0, 0, 2103, 0, 0, 627, 0, 0, 0",
      /* 25262 */ "659, 627, 0, 0, 0, 0, 0, 0, 0, 0, 496, 496, 2440, 496, 496, 496, 496, 496, 496, 800, 496, 496, 496",
      /* 25285 */ "496, 496, 496, 496, 826, 496, 831, 496, 834, 496, 496, 0, 1786, 0, 1792, 520, 520, 520, 520, 520",
      /* 25305 */ "520, 520, 520, 520, 520, 520, 1581, 520, 520, 520, 496, 846, 496, 496, 0, 764, 496, 0, 520, 520",
      /* 25325 */ "520, 860, 520, 520, 520, 520, 520, 520, 520, 1258, 520, 520, 520, 520, 520, 496, 496, 0, 520, 520",
      /* 25345 */ "886, 520, 891, 520, 894, 520, 520, 906, 520, 520, 496, 911, 0, 0, 0, 0, 0, 3067904, 0, 0, 0, 0, 0",
      /* 25368 */ "0, 0, 316, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2162688, 0, 520, 915, 496, 496, 800, 496",
      /* 25394 */ "920, 834, 496, 496, 0, 520, 520, 860, 520, 520, 520, 520, 2422, 520, 520, 520, 520, 520, 520, 520",
      /* 25414 */ "0, 0, 0, 0, 0, 0, 2179, 0, 0, 0, 0, 0, 0, 928, 894, 520, 520, 53494, 2, 6, 0, 0, 0, 0, 934, 938, 0",
      /* 25441 */ "0, 0, 0, 0, 1671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1858, 0, 0, 0, 0, 0, 1014, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 25471 */ "0, 0, 0, 0, 0, 0, 0, 591, 400, 400, 400, 1127, 0, 1107, 0, 0, 1014, 0, 0, 1133, 496, 496, 496, 496",
      /* 25495 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 400, 400, 1062, 520, 1250, 520, 520, 520, 1253, 520, 520",
      /* 25519 */ "520, 520, 520, 520, 520, 496, 496, 0, 0, 0, 0, 520, 520, 520, 2144, 520, 520, 520, 520, 520, 520",
      /* 25540 */ "520, 520, 2267, 2268, 520, 520, 520, 520, 2272, 520, 1432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 400, 400",
      /* 25563 */ "400, 400, 1444, 400, 400, 400, 1448, 400, 400, 0, 0, 0, 0, 0, 1454, 1133, 496, 496, 496, 0, 0, 496",
      /* 25585 */ "0, 520, 520, 520, 520, 520, 520, 520, 520, 877, 496, 1506, 496, 496, 496, 496, 1510, 496, 496, 496",
      /* 25605 */ "496, 1515, 1517, 1520, 91311, 1522, 496, 1586, 520, 496, 496, 496, 496, 1590, 496, 496, 496, 520",
      /* 25623 */ "520, 520, 520, 1597, 0, 0, 0, 1608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 653, 0, 0, 0, 0, 1656, 0, 0",
      /* 25651 */ "0, 0, 0, 1662, 0, 0, 0, 0, 0, 1374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1025, 0, 0, 0, 0, 1695, 400",
      /* 25679 */ "400, 400, 400, 400, 400, 400, 400, 400, 400, 1705, 1706, 0, 0, 1708, 400, 1723, 400, 400, 400, 400",
      /* 25699 */ "400, 400, 400, 400, 0, 0, 0, 0, 496, 496, 496, 496, 496, 496, 520, 520, 520, 520, 520, 520, 520",
      /* 25720 */ "520, 520, 520, 0, 0, 0, 2460, 496, 496, 1735, 496, 1737, 496, 496, 496, 1740, 496, 496, 496, 496",
      /* 25740 */ "496, 496, 496, 1184, 496, 496, 496, 496, 496, 496, 496, 496, 1478, 496, 496, 496, 496, 496, 496",
      /* 25759 */ "496, 496, 1495, 496, 496, 496, 496, 496, 496, 496, 496, 1767, 496, 496, 496, 496, 496, 496, 496",
      /* 25778 */ "496, 520, 496, 496, 1846, 496, 496, 496, 496, 520, 520, 1850, 520, 520, 520, 520, 246, 2, 6, 0, 0",
      /* 25799 */ "0, 0, 935, 939, 0, 0, 0, 1601, 0, 1603, 0, 0, 1854, 0, 0, 0, 0, 0, 0, 1860, 0, 0, 0, 0, 0, 1881, 0",
      /* 25826 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 1040, 0, 0, 0, 0, 0, 496, 1985, 496, 496, 0, 0, 1987, 0, 0, 0, 0, 0",
      /* 25853 */ "1989, 0, 0, 0, 0, 0, 1905, 0, 0, 0, 0, 0, 0, 1911, 1912, 0, 0, 0, 0, 2041, 0, 0, 0, 0, 0, 2046, 0",
      /* 25880 */ "0, 0, 0, 0, 0, 0, 0, 180582, 180769, 180769, 180769, 180769, 180769, 180769, 180769, 0, 0, 2067, 0",
      /* 25899 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1357, 0, 0, 0, 0, 2079, 2080, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 25929 */ "400, 400, 2219, 400, 400, 2105, 0, 0, 0, 0, 400, 400, 2110, 400, 400, 0, 496, 496, 496, 496, 496",
      /* 25950 */ "496, 496, 2500, 496, 496, 520, 520, 520, 520, 520, 496, 2130, 496, 496, 496, 496, 496, 496, 496",
      /* 25969 */ "496, 496, 496, 496, 496, 496, 496, 1159, 496, 520, 2172, 520, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 25993 */ "2183, 520, 520, 2275, 520, 520, 520, 520, 496, 496, 496, 520, 520, 520, 0, 0, 0, 1288, 0, 0, 0",
      /* 26014 */ "1294, 0, 0, 0, 0, 0, 0, 0, 0, 2434, 0, 0, 2437, 0, 496, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 26037 */ "2502, 520, 520, 520, 520, 520, 0, 0, 2463, 2464, 0, 496, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 26057 */ "496, 520, 520, 520, 520, 520, 2493, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 520, 520, 520",
      /* 26077 */ "520, 520, 520, 520, 1545, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 2166, 520, 520, 496",
      /* 26096 */ "496, 496, 0, 0, 0, 271, 272, 273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 635, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0",
      /* 26125 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 0, 0, 375, 0, 40960, 0, 0, 375, 0, 0, 0, 0, 0, 0, 400, 400",
      /* 26152 */ "400, 0, 496, 496, 496, 496, 496, 496, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362",
      /* 26172 */ "362, 362, 472, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 496, 362, 496, 496, 496, 496, 0, 0",
      /* 26193 */ "0, 0, 1988, 0, 1518, 0, 0, 0, 1990, 0, 520, 520, 549, 549, 558, 53494, 53494, 2, 2, 3, 94212, 5, 6",
      /* 26216 */ "0, 0, 0, 0, 0, 2054, 0, 0, 0, 0, 0, 0, 2061, 2062, 0, 0, 0, 1361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 26245 */ "0, 0, 0, 683, 0, 0, 0, 1378, 0, 0, 0, 0, 0, 0, 0, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400",
      /* 26270 */ "400, 400, 520, 1571, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 496, 496, 0",
      /* 26290 */ "0, 0, 0, 0, 496, 496, 1950, 1951, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1186, 496, 496, 496",
      /* 26311 */ "496, 1193, 496, 0, 520, 520, 1993, 1994, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520",
      /* 26331 */ "1814, 1815, 520, 1817, 520, 520, 520, 2480, 520, 2482, 520, 2484, 520, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 26352 */ "221727, 221727, 221727, 221727, 221727, 221727, 221727, 221727, 0, 279, 376, 377, 40960, 377, 384",
      /* 26367 */ "376, 377, 384, 274, 384, 0, 384, 402, 402, 402, 402, 402, 423, 423, 423, 438, 441, 446, 446, 459",
      /* 26387 */ "446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 473, 446, 446, 446, 446, 446",
      /* 26407 */ "446, 446, 446, 446, 446, 446, 498, 446, 498, 498, 498, 498, 523, 498, 498, 498, 498, 498, 498, 498",
      /* 26427 */ "498, 523, 523, 523, 523, 523, 523, 523, 550, 550, 559, 53494, 53494, 2, 2, 3, 94212, 5, 6, 0, 0, 0",
      /* 26449 */ "0, 0, 2070, 0, 0, 0, 0, 0, 0, 0, 2075, 0, 0, 0, 520, 520, 496, 496, 496, 496, 496, 835, 496, 496, 0",
      /* 26474 */ "520, 520, 520, 520, 520, 520, 2424, 520, 520, 520, 520, 520, 0, 2430, 0, 0, 520, 895, 520, 520",
      /* 26494 */ "53494, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 309, 310, 0, 0, 0, 0, 0, 0, 1047, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 26523 */ "1056, 0, 400, 1059, 400, 400, 400, 400, 1079, 1080, 400, 400, 400, 400, 400, 0, 0, 0, 0, 0, 0, 0",
      /* 26545 */ "2230, 0, 400, 400, 400, 400, 1089, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 656, 0, 0, 0, 1056",
      /* 26572 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 666, 0, 0, 0, 666, 1089, 0, 0, 0, 0, 0, 0, 400, 400, 400, 400",
      /* 26600 */ "400, 400, 400, 400, 400, 400, 1927, 496, 496, 1144, 496, 1149, 496, 496, 496, 496, 496, 1155, 496",
      /* 26619 */ "496, 496, 496, 496, 496, 1752, 1753, 496, 1755, 496, 496, 496, 496, 496, 496, 1477, 496, 496, 496",
      /* 26638 */ "496, 496, 496, 496, 1486, 496, 1217, 520, 520, 520, 520, 520, 1223, 520, 520, 520, 520, 520, 520",
      /* 26657 */ "520, 520, 520, 0, 0, 2488, 2489, 0, 0, 0, 0, 1381, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1393, 0, 0, 0",
      /* 26684 */ "0, 0, 3067904, 0, 0, 0, 0, 0, 0, 0, 316, 316, 0, 1396, 400, 400, 400, 400, 400, 400, 1403, 400, 400",
      /* 26707 */ "400, 400, 400, 400, 400, 400, 0, 0, 1933, 0, 0, 0, 0, 0, 0, 1631, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 26734 */ "0, 0, 0, 747, 748, 496, 496, 496, 496, 1976, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 26755 */ "0, 0, 0, 91311, 0, 520, 520, 2019, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520",
      /* 26776 */ "496, 496, 496, 0, 0, 0, 2068, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 669, 0, 0, 0, 0, 2106, 0, 2108, 0",
      /* 26804 */ "400, 400, 400, 2111, 400, 0, 496, 496, 496, 496, 496, 496, 1765, 496, 496, 496, 496, 496, 496, 496",
      /* 26824 */ "496, 496, 1168, 496, 496, 496, 496, 496, 496, 520, 520, 2173, 0, 0, 0, 2177, 0, 0, 0, 0, 0, 0, 2181",
      /* 26847 */ "0, 0, 0, 0, 0, 3067904, 0, 0, 0, 0, 0, 0, 0, 2179694, 2179694, 0, 400, 2222, 400, 0, 0, 0, 2226, 0",
      /* 26871 */ "0, 0, 0, 0, 400, 400, 400, 400, 400, 0, 496, 496, 496, 2117, 496, 2247, 2248, 496, 496, 496, 496",
      /* 26892 */ "496, 496, 496, 496, 496, 496, 520, 520, 520, 520, 2338, 2339, 2340, 520, 520, 520, 520, 520, 520",
      /* 26911 */ "520, 520, 520, 1260, 520, 520, 520, 496, 496, 0, 520, 520, 2479, 520, 520, 520, 520, 520, 520, 0, 0",
      /* 26932 */ "0, 0, 0, 0, 0, 0, 496, 496, 496, 0, 0, 0, 282, 350, 0, 0, 282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 532480, 0",
      /* 26960 */ "0, 0, 0, 0, 0, 0, 0, 326, 0, 40960, 0, 0, 326, 0, 0, 386, 0, 391, 399, 403, 403, 403, 403, 403, 424",
      /* 26985 */ "424, 424, 424, 442, 447, 447, 447, 447, 447, 447, 447, 465, 447, 447, 447, 447, 447, 447, 403, 447",
      /* 27005 */ "447, 447, 447, 465, 447, 465, 465, 465, 465, 465, 499, 465, 499, 499, 499, 499, 524, 499, 499, 499",
      /* 27025 */ "499, 499, 499, 499, 499, 524, 524, 524, 524, 524, 524, 524, 499, 499, 524, 53494, 53494, 2, 2, 3",
      /* 27045 */ "94212, 5, 6, 0, 0, 0, 0, 0, 2082, 2083, 0, 0, 2086, 0, 0, 0, 0, 0, 400, 1921, 400, 400, 400, 400",
      /* 27069 */ "400, 400, 400, 400, 400, 1083, 400, 0, 0, 0, 0, 0, 0, 740, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 740, 0",
      /* 27096 */ "0, 0, 0, 0, 0, 520, 520, 496, 496, 496, 817, 496, 496, 496, 496, 0, 520, 520, 520, 877, 0, 984, 0",
      /* 27119 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 968, 0, 1076, 400, 400, 1078, 400, 400, 400, 400, 400, 400",
      /* 27144 */ "400, 1085, 0, 0, 0, 0, 0, 0, 1633, 0, 0, 0, 0, 0, 0, 1639, 0, 1640, 1100, 0, 965, 0, 0, 0, 0, 0, 0",
      /* 27171 */ "1104, 964, 0, 0, 0, 0, 0, 0, 274, 275, 276, 277, 278, 279, 280, 0, 0, 0, 0, 0, 0, 955, 1112, 0, 0",
      /* 27196 */ "400, 400, 400, 400, 1119, 400, 400, 400, 400, 400, 400, 1413, 400, 400, 400, 400, 400, 0, 0, 0, 0",
      /* 27217 */ "1130, 1089, 0, 0, 1133, 1134, 1136, 496, 496, 1124, 400, 400, 0, 0, 0, 0, 0, 0, 0, 0, 1133, 1135",
      /* 27239 */ "496, 496, 496, 0, 0, 496, 0, 520, 520, 520, 520, 520, 520, 520, 875, 520, 0, 1330, 1331, 0, 1333, 0",
      /* 27261 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1310, 651264, 0, 0, 0, 1360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 27291 */ "0, 955, 520, 520, 1600, 0, 1601, 0, 0, 0, 0, 0, 1603, 0, 0, 0, 0, 0, 0, 286, 0, 0, 0, 0, 0, 0, 0",
      /* 27318 */ "45056, 49152, 1606, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 969, 496, 496, 496, 1736, 496, 496",
      /* 27343 */ "496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1170, 496, 496, 496, 496, 496, 496, 496, 1776",
      /* 27362 */ "496, 1778, 496, 496, 496, 0, 0, 0, 0, 0, 1520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520",
      /* 27383 */ "520, 520, 520, 520, 520, 1232, 0, 0, 1917, 1918, 0, 1920, 400, 400, 400, 400, 400, 400, 400, 400",
      /* 27403 */ "400, 400, 0, 0, 0, 0, 0, 2104, 0, 0, 0, 496, 1949, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 27426 */ "496, 0, 0, 1520, 91311, 0, 496, 1973, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 27446 */ "496, 496, 1172, 496, 0, 520, 1992, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520",
      /* 27466 */ "496, 496, 1040, 2065, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1013, 400, 400, 400, 2096, 400",
      /* 27491 */ "400, 400, 400, 400, 400, 0, 0, 0, 0, 0, 0, 1133, 496, 496, 496, 496, 496, 496, 496, 2122, 496, 496",
      /* 27513 */ "496, 496, 496, 496, 496, 496, 496, 496, 496, 0, 1518, 1520, 91311, 1523, 496, 496, 2131, 496, 496",
      /* 27532 */ "496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 835, 496, 496, 496, 496, 1987, 0, 1989, 0",
      /* 27552 */ "520, 520, 520, 520, 520, 520, 520, 520, 520, 2149, 0, 0, 0, 2185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 27577 */ "0, 681, 0, 0, 0, 0, 0, 0, 2296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 756, 0, 0, 0, 284, 285, 286, 0",
      /* 27606 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1374, 0, 0, 286, 324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 27637 */ "1012, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 286, 285, 0, 0, 392, 285, 404, 404, 404, 404, 404, 425, 435",
      /* 27660 */ "425, 425, 425, 448, 448, 448, 448, 448, 448, 461, 466, 448, 448, 448, 448, 448, 461, 404, 448, 448",
      /* 27680 */ "448, 448, 466, 448, 466, 466, 492, 466, 492, 500, 466, 500, 500, 500, 500, 525, 500, 500, 500, 500",
      /* 27700 */ "500, 500, 500, 500, 525, 525, 525, 525, 525, 525, 525, 500, 500, 525, 53494, 53494, 2, 2, 3, 94212",
      /* 27720 */ "5, 6, 0, 0, 0, 0, 0, 2109, 400, 400, 400, 400, 0, 496, 496, 496, 496, 496, 496, 2251, 2253, 496",
      /* 27742 */ "496, 2256, 2257, 520, 520, 520, 2261, 0, 0, 597, 0, 0, 0, 0, 0, 0, 0, 605, 606, 0, 0, 0, 0, 0, 0",
      /* 27767 */ "1661, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1007, 0, 0, 0, 0, 0, 0, 611, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 316",
      /* 27796 */ "316, 316, 0, 0, 0, 0, 288, 289, 290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 949, 0, 0, 0, 0, 954, 0, 0, 642, 0",
      /* 27824 */ "0, 0, 0, 0, 0, 0, 650, 0, 0, 0, 654, 0, 0, 0, 0, 288, 333, 335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 978, 0",
      /* 27853 */ "0, 0, 316, 316, 0, 400, 400, 705, 400, 400, 713, 400, 719, 400, 722, 400, 725, 400, 400, 400, 400",
      /* 27874 */ "400, 400, 1700, 400, 400, 400, 400, 0, 0, 0, 0, 0, 0, 0, 0, 1133, 496, 496, 496, 1138, 0, 0, 0, 746",
      /* 27898 */ "0, 0, 0, 0, 0, 630, 0, 0, 0, 0, 759, 0, 0, 765, 0, 746, 400, 777, 400, 400, 400, 400, 782, 400, 400",
      /* 27923 */ "400, 400, 400, 714, 400, 400, 400, 400, 724, 400, 400, 729, 400, 400, 738, 0, 761, 0, 0, 0, 765, 0",
      /* 27945 */ "0, 0, 0, 0, 0, 0, 765, 0, 0, 0, 0, 987, 950, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 651, 0, 0, 0, 0, 0, 746",
      /* 27975 */ "765, 0, 0, 746, 761, 765, 0, 0, 791, 0, 0, 0, 791, 795, 496, 0, 0, 0, 853, 91311, 1133, 856, 520",
      /* 27998 */ "520, 520, 520, 520, 520, 1213, 520, 520, 520, 520, 53494, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 28021 */ "937984, 0, 0, 0, 0, 0, 496, 496, 803, 496, 496, 814, 496, 823, 496, 827, 496, 496, 833, 836, 840",
      /* 28042 */ "496, 0, 0, 0, 853, 91311, 1133, 856, 520, 520, 520, 520, 520, 1209, 520, 520, 496, 520, 496, 520",
      /* 28062 */ "2569, 2570, 496, 520, 0, 0, 0, 0, 0, 0, 634880, 2402, 0, 0, 2405, 2406, 0, 0, 883, 520, 887, 520",
      /* 28084 */ "520, 893, 896, 900, 520, 520, 520, 520, 496, 496, 0, 0, 0, 0, 520, 520, 520, 520, 520, 520, 520",
      /* 28105 */ "520, 520, 520, 520, 520, 0, 520, 520, 496, 917, 496, 496, 496, 921, 840, 496, 0, 520, 925, 520, 520",
      /* 28126 */ "496, 496, 520, 53494, 53813, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 1334, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 28152 */ "0, 1354, 0, 0, 0, 0, 0, 520, 929, 900, 520, 53494, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 682, 0, 0, 0",
      /* 28179 */ "682, 0, 496, 0, 0, 0, 958, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 769, 0, 0, 0, 0, 0, 0, 1001, 0, 0, 0",
      /* 28209 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 952, 0, 0, 0, 520, 1218, 520, 520, 520, 1222, 520, 520, 520, 520, 520",
      /* 28233 */ "520, 520, 520, 520, 520, 520, 909, 496, 496, 0, 0, 520, 1233, 520, 520, 520, 520, 520, 520, 520",
      /* 28253 */ "520, 520, 1241, 520, 520, 520, 520, 520, 520, 2483, 520, 2485, 0, 0, 0, 0, 0, 0, 0, 264, 265, 0, 0",
      /* 28276 */ "0, 0, 576, 0, 0, 1314, 1315, 0, 1317, 1318, 0, 0, 1321, 0, 0, 0, 0, 0, 0, 0, 0, 264, 264, 264, 264",
      /* 28301 */ "264, 264, 264, 264, 0, 1346, 0, 1348, 0, 0, 0, 0, 0, 1353, 0, 1355, 0, 0, 0, 0, 0, 0, 1867, 0, 1869",
      /* 28326 */ "0, 0, 1871, 0, 1873, 0, 0, 0, 0, 0, 0, 0, 400, 1942, 400, 400, 400, 400, 400, 400, 400, 1728, 400",
      /* 28349 */ "400, 0, 0, 0, 1731, 496, 496, 0, 1372, 0, 0, 1374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1324, 0, 0, 0",
      /* 28376 */ "0, 0, 0, 0, 1383, 1384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1395, 0, 400, 1397, 1398, 400, 400, 400, 400",
      /* 28401 */ "400, 1404, 400, 400, 1406, 400, 400, 400, 400, 400, 715, 400, 720, 400, 400, 400, 400, 727, 400",
      /* 28420 */ "400, 400, 400, 400, 1450, 0, 0, 0, 0, 1070389, 0, 1133, 496, 496, 496, 0, 0, 496, 0, 520, 520, 520",
      /* 28442 */ "520, 520, 520, 873, 520, 520, 1422, 0, 0, 1425, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1298, 1425, 0, 0, 0, 0",
      /* 28467 */ "1018, 0, 0, 0, 1022, 0, 0, 0, 0, 0, 0, 0, 270, 269, 0, 269, 269, 270, 270, 0, 0, 0, 0, 0, 1434, 0",
      /* 28493 */ "0, 0, 1438, 872448, 0, 1440, 400, 400, 1410, 400, 400, 400, 1412, 400, 400, 400, 400, 400, 400, 0",
      /* 28513 */ "0, 0, 0, 375, 362, 362, 362, 362, 362, 362, 400, 1446, 400, 400, 400, 400, 0, 0, 0, 0, 0, 0, 1133",
      /* 28536 */ "1455, 496, 1456, 496, 1458, 496, 496, 496, 496, 496, 496, 496, 1467, 496, 496, 496, 496, 1471, 496",
      /* 28555 */ "0, 0, 0, 853, 91311, 1133, 856, 520, 520, 520, 520, 520, 1210, 520, 520, 520, 520, 1833, 520, 520",
      /* 28575 */ "520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1827, 520, 520, 520, 496, 496, 1474, 496, 496",
      /* 28594 */ "496, 496, 496, 496, 1480, 1482, 496, 496, 496, 496, 1487, 1488, 496, 1490, 1491, 496, 496, 496, 496",
      /* 28613 */ "496, 496, 1498, 496, 1500, 496, 496, 496, 0, 0, 496, 0, 520, 520, 520, 520, 520, 867, 520, 520, 879",
      /* 28634 */ "496, 496, 496, 1507, 496, 496, 496, 496, 496, 496, 1514, 0, 0, 1520, 91311, 0, 0, 0, 0, 1050, 0, 0",
      /* 28656 */ "0, 0, 0, 0, 0, 400, 400, 400, 400, 1923, 400, 400, 400, 400, 400, 400, 1520, 1525, 520, 1526, 520",
      /* 28677 */ "1528, 520, 520, 520, 520, 520, 520, 520, 1537, 520, 520, 496, 520, 496, 496, 496, 496, 520, 520",
      /* 28696 */ "520, 520, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1299, 520, 520, 1541, 520, 520, 520, 1544, 520, 520",
      /* 28720 */ "520, 520, 520, 520, 1550, 1552, 520, 520, 520, 520, 53494, 2, 6, 0, 0, 0, 0, 935, 939, 0, 0, 0, 0",
      /* 28743 */ "0, 2466, 496, 496, 496, 496, 496, 496, 496, 496, 496, 2476, 1570, 520, 520, 520, 520, 520, 520",
      /* 28762 */ "1577, 520, 520, 520, 520, 520, 520, 1584, 496, 0, 0, 0, 853, 91311, 1133, 856, 520, 520, 520, 520",
      /* 28782 */ "1207, 520, 520, 520, 520, 520, 2163, 520, 520, 520, 520, 520, 520, 520, 496, 496, 496, 520, 520",
      /* 28801 */ "520, 0, 0, 0, 496, 520, 520, 1587, 496, 496, 1482, 1491, 496, 1592, 496, 1594, 520, 520, 1552, 1561",
      /* 28821 */ "520, 1599, 520, 0, 1601, 0, 0, 0, 0, 0, 1603, 0, 0, 0, 0, 0, 0, 332, 355, 0, 0, 0, 0, 0, 0, 45056",
      /* 28847 */ "49152, 0, 0, 1668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1680, 0, 0, 0, 0, 1091, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 28876 */ "0, 0, 0, 2191, 0, 0, 0, 0, 1682, 0, 0, 1685, 400, 400, 400, 400, 400, 400, 1691, 400, 400, 400, 400",
      /* 28899 */ "400, 400, 400, 1701, 1702, 400, 400, 0, 0, 0, 0, 0, 0, 601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738, 0, 743",
      /* 28925 */ "0, 746, 0, 0, 496, 496, 496, 1762, 1763, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 0",
      /* 28946 */ "1519, 1520, 91311, 1524, 520, 1805, 520, 1807, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520",
      /* 28964 */ "520, 520, 520, 2395, 520, 520, 496, 520, 496, 496, 496, 496, 1848, 496, 496, 520, 520, 520, 520",
      /* 28983 */ "1852, 520, 520, 496, 520, 496, 496, 496, 496, 520, 520, 520, 520, 0, 0, 0, 2039, 0, 0, 1864, 0, 0",
      /* 29005 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1392, 0, 0, 1889, 1890, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364544",
      /* 29034 */ "0, 0, 0, 0, 1092, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2298, 0, 0, 0, 0, 0, 0, 1903, 0, 0, 0, 0, 0, 0",
      /* 29064 */ "0, 0, 1910, 0, 0, 0, 0, 0, 0, 1894, 0, 0, 0, 0, 0, 0, 0, 0, 1902, 400, 400, 400, 1930, 400, 400",
      /* 29089 */ "400, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 400, 400, 400, 400, 2311, 400, 0, 1007616, 1007616, 0, 0",
      /* 29112 */ "0, 0, 520192, 1889, 0, 364944, 400, 400, 400, 400, 400, 1008016, 496, 496, 496, 1975, 496, 496, 496",
      /* 29131 */ "496, 1980, 496, 496, 496, 496, 496, 496, 1984, 1008112, 496, 496, 496, 827392, 0, 1987, 0, 0, 0, 0",
      /* 29151 */ "0, 1989, 0, 0, 0, 0, 0, 2187, 0, 0, 0, 0, 0, 0, 0, 0, 2194, 2195, 520, 2018, 520, 520, 520, 520",
      /* 29175 */ "2023, 520, 520, 520, 520, 520, 520, 2027, 1008136, 520, 520, 520, 520, 975368, 520, 520, 520, 496",
      /* 29193 */ "496, 520, 520, 0, 0, 0, 0, 0, 0, 2071, 0, 0, 0, 0, 0, 0, 0, 0, 0, 735, 0, 0, 0, 0, 735, 0, 0, 0",
      /* 29221 */ "2107, 0, 0, 400, 400, 400, 400, 400, 0, 496, 496, 496, 496, 496, 496, 1978, 496, 496, 496, 496",
      /* 29241 */ "1982, 496, 496, 496, 496, 496, 2120, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 29260 */ "2129, 496, 0, 0, 0, 853, 91311, 1133, 856, 520, 520, 520, 1206, 520, 520, 1215, 520, 520, 520, 889",
      /* 29280 */ "520, 520, 520, 520, 904, 520, 520, 520, 797, 496, 0, 0, 0, 853, 0, 0, 856, 520, 520, 520, 520, 520",
      /* 29302 */ "520, 520, 520, 520, 520, 1564, 520, 520, 520, 520, 520, 496, 496, 1987, 0, 1989, 0, 520, 520, 520",
      /* 29322 */ "520, 520, 520, 2147, 520, 520, 520, 0, 1284, 0, 0, 0, 1290, 0, 0, 0, 0, 0, 0, 0, 0, 2363, 0, 2364",
      /* 29346 */ "0, 0, 0, 2368, 0, 520, 520, 2161, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 496, 496, 496",
      /* 29367 */ "520, 520, 520, 0, 0, 2286, 0, 2196, 0, 905216, 0, 0, 0, 2199, 0, 2201, 0, 0, 0, 667648, 0, 0, 0, 0",
      /* 29391 */ "319, 0, 302, 364, 366, 0, 0, 0, 319, 0, 45056, 49152, 2221, 400, 2223, 2224, 0, 2225, 0, 0, 0, 2229",
      /* 29413 */ "0, 479232, 400, 400, 2232, 400, 400, 400, 707, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400",
      /* 29432 */ "400, 400, 0, 0, 1087, 0, 0, 520, 2274, 2276, 520, 520, 2279, 2280, 496, 496, 2282, 520, 520, 2284",
      /* 29452 */ "0, 0, 0, 0, 0, 2198, 0, 0, 0, 0, 2202, 0, 0, 0, 0, 0, 0, 664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2613248",
      /* 29481 */ "0, 0, 0, 0, 0, 0, 2288, 0, 0, 2290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1340, 0, 1342, 0, 0, 901120, 0",
      /* 29509 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 696320, 1015808, 0, 0, 0, 0, 324, 0, 325, 0, 0, 0, 0, 0, 0, 283, 325",
      /* 29536 */ "286, 0, 0, 0, 0, 2304, 0, 0, 0, 400, 400, 400, 400, 400, 400, 400, 0, 0, 1452, 0, 0, 0, 1133, 496",
      /* 29560 */ "496, 496, 496, 520, 520, 2337, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 2345, 520, 520",
      /* 29579 */ "520, 890, 892, 520, 520, 902, 520, 520, 520, 520, 910, 496, 0, 0, 0, 853, 91311, 1133, 856, 520",
      /* 29599 */ "520, 520, 520, 520, 520, 520, 520, 520, 520, 1838, 520, 1840, 520, 520, 520, 0, 0, 2433, 0, 0, 0, 0",
      /* 29621 */ "0, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 845, 496, 2447",
      /* 29641 */ "520, 520, 520, 520, 520, 520, 520, 520, 520, 2457, 0, 0, 0, 0, 0, 0, 1906, 0, 0, 1909, 0, 0, 0, 0",
      /* 29665 */ "0, 0, 0, 1103, 1037, 0, 0, 0, 0, 0, 0, 944, 520, 2478, 520, 520, 520, 520, 520, 520, 520, 2486",
      /* 29687 */ "2487, 0, 0, 0, 0, 0, 0, 663, 1021, 0, 0, 0, 0, 0, 0, 0, 1028, 0, 2494, 496, 496, 2496, 496, 2498",
      /* 29711 */ "496, 496, 496, 496, 2503, 520, 520, 2505, 520, 520, 520, 907, 53494, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 29734 */ "0, 739, 0, 744, 0, 0, 0, 0, 2507, 520, 520, 520, 520, 0, 0, 0, 0, 0, 0, 0, 0, 496, 496, 496, 496",
      /* 29759 */ "2442, 496, 2444, 2445, 0, 0, 0, 287, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 981, 316, 316, 0, 0, 316",
      /* 29785 */ "0, 0, 0, 0, 0, 0, 320, 0, 0, 0, 0, 0, 0, 0, 0, 286720, 286720, 286720, 286720, 286720, 286720",
      /* 29806 */ "286720, 286720, 0, 0, 329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1617, 0, 0, 0, 0, 320, 0, 0, 0, 0",
      /* 29834 */ "0, 0, 367, 0, 320, 0, 367, 45056, 49152, 0, 320, 0, 378, 40960, 378, 378, 287, 378, 378, 0, 378, 0",
      /* 29856 */ "378, 405, 405, 405, 405, 405, 0, 0, 0, 320, 443, 378, 378, 378, 378, 378, 378, 378, 378, 378, 378",
      /* 29877 */ "378, 378, 378, 378, 405, 378, 378, 378, 378, 484, 378, 484, 484, 493, 484, 493, 501, 484, 501, 501",
      /* 29897 */ "501, 501, 526, 501, 501, 501, 501, 501, 501, 501, 501, 526, 526, 526, 526, 526, 526, 526, 501, 501",
      /* 29917 */ "526, 53494, 53494, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 2305, 0, 0, 400, 400, 400, 400, 400, 400",
      /* 29940 */ "400, 0, 327, 0, 360, 360, 0, 0, 0, 0, 0, 0, 0, 1428, 0, 0, 0, 0, 0, 0, 651264, 0, 496, 496, 496",
      /* 29965 */ "666, 0, 496, 0, 520, 520, 520, 520, 520, 520, 520, 520, 878, 0, 520, 520, 916, 496, 496, 818, 496",
      /* 29986 */ "496, 496, 496, 0, 924, 520, 520, 878, 1063, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400",
      /* 30006 */ "400, 400, 400, 400, 0, 0, 0, 0, 0, 0, 0, 0, 1109, 0, 0, 0, 0, 400, 1116, 400, 400, 400, 400, 400",
      /* 30030 */ "400, 400, 1070, 400, 400, 400, 400, 400, 400, 400, 400, 1082, 400, 1084, 0, 0, 0, 0, 0, 496, 496",
      /* 30051 */ "1145, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 839, 496, 496, 0, 520, 520",
      /* 30071 */ "496, 1269, 496, 496, 496, 496, 496, 496, 520, 1277, 520, 520, 520, 0, 1285, 0, 0, 0, 1291, 0, 0, 0",
      /* 30093 */ "0, 0, 0, 0, 602, 0, 0, 0, 0, 0, 0, 0, 0, 736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 736, 0, 0, 0, 496",
      /* 30124 */ "400, 400, 1724, 400, 400, 400, 400, 400, 400, 400, 0, 0, 0, 0, 496, 496, 496, 496, 520, 520, 520",
      /* 30145 */ "520, 0, 0, 496, 2563, 520, 520, 1819, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520",
      /* 30165 */ "520, 496, 496, 2170, 0, 0, 1878, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1629, 0, 0, 400, 400, 1929",
      /* 30191 */ "400, 400, 400, 400, 400, 0, 0, 0, 0, 0, 1936, 0, 0, 0, 0, 351, 0, 0, 0, 0, 0, 0, 0, 0, 288, 0, 0, 0",
      /* 30219 */ "0, 0, 0, 0, 0, 0, 0, 2289, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1679, 0, 0, 0, 0, 0, 0, 2533, 496",
      /* 30249 */ "496, 496, 496, 496, 2539, 520, 520, 520, 520, 520, 520, 520, 2266, 520, 520, 2269, 520, 520, 520",
      /* 30268 */ "520, 520, 520, 520, 2009, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 2428, 520, 0, 0, 0",
      /* 30288 */ "2432, 0, 0, 0, 0, 2559, 496, 496, 496, 2561, 520, 520, 520, 0, 0, 496, 496, 496, 2238, 496, 496",
      /* 30309 */ "496, 496, 496, 496, 496, 2243, 496, 496, 2246, 0, 0, 0, 331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 30334 */ "994, 0, 0, 0, 0, 0, 0, 379, 40960, 379, 379, 0, 379, 379, 0, 379, 393, 379, 406, 406, 406, 406, 406",
      /* 30357 */ "426, 426, 426, 426, 426, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 406",
      /* 30377 */ "449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 502, 449, 502, 502, 502, 502, 527, 502, 502",
      /* 30397 */ "502, 502, 502, 502, 502, 502, 527, 527, 527, 527, 527, 527, 527, 502, 502, 527, 53494, 53494, 2, 2",
      /* 30417 */ "3, 94212, 5, 6, 0, 0, 0, 0, 0, 2361, 2362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1870, 0, 0, 0, 0, 1874, 0, 0",
      /* 30445 */ "0, 1048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 400, 400, 400, 400, 0, 496, 496, 2116, 496, 496, 0, 0",
      /* 30469 */ "1382, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1861, 0, 0, 400, 400, 400, 1725, 400, 400, 400, 400",
      /* 30494 */ "400, 400, 0, 0, 0, 0, 496, 496, 496, 496, 2537, 496, 520, 520, 520, 520, 2543, 520, 496, 520, 496",
      /* 30515 */ "496, 496, 1847, 496, 496, 496, 520, 520, 520, 1851, 520, 520, 520, 0, 1601, 0, 0, 0, 0, 0, 1603, 0",
      /* 30537 */ "0, 0, 0, 0, 0, 0, 2920448, 0, 0, 0, 2158592, 2158592, 2158592, 2543616, 2158592, 0, 0, 0, 0, 2069",
      /* 30557 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1377, 0, 0, 0, 0, 0, 2078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 30588 */ "400, 400, 400, 400, 400, 400, 400, 0, 933888, 0, 1011712, 0, 0, 0, 0, 2189, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 30612 */ "292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2209, 0, 0, 0, 0, 0, 2214, 0, 0, 400, 400, 400, 400, 400, 1402, 400",
      /* 30638 */ "400, 400, 400, 400, 400, 400, 400, 400, 1071, 400, 400, 400, 400, 400, 400, 0, 0, 2302, 0, 0, 0",
      /* 30659 */ "2306, 0, 2308, 400, 400, 400, 400, 400, 400, 0, 581632, 0, 0, 0, 0, 1133, 496, 496, 496, 496, 496",
      /* 30680 */ "496, 2325, 496, 496, 496, 496, 2328, 496, 496, 496, 496, 496, 496, 496, 1739, 496, 496, 1742, 496",
      /* 30699 */ "496, 496, 496, 496, 496, 520, 2336, 520, 520, 520, 520, 520, 520, 520, 2343, 520, 520, 520, 520",
      /* 30718 */ "2346, 0, 0, 2370, 400, 400, 2371, 400, 400, 0, 0, 400, 0, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 30739 */ "496, 496, 2418, 496, 496, 2375, 496, 496, 496, 496, 496, 496, 2381, 496, 496, 496, 496, 496, 520",
      /* 30758 */ "520, 2450, 520, 520, 520, 520, 520, 520, 520, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2182, 0, 520, 520",
      /* 30782 */ "520, 2387, 520, 520, 520, 520, 520, 520, 2393, 520, 520, 520, 520, 520, 520, 520, 410096, 496, 496",
      /* 30801 */ "410120, 520, 520, 0, 0, 0, 0, 612, 613, 0, 0, 0, 617, 0, 0, 0, 0, 316, 316, 316, 0, 0, 0, 0, 370, 0",
      /* 30827 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 652, 0, 0, 0, 0, 496, 801, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 30852 */ "496, 496, 496, 496, 496, 496, 1485, 496, 496, 847, 496, 0, 852, 496, 0, 520, 520, 520, 861, 520",
      /* 30872 */ "520, 520, 520, 520, 520, 895, 520, 520, 520, 520, 520, 496, 496, 0, 0, 0, 520, 520, 496, 496, 801",
      /* 30893 */ "496, 496, 496, 496, 847, 0, 520, 520, 861, 520, 520, 520, 1221, 520, 520, 520, 520, 520, 520, 520",
      /* 30913 */ "520, 520, 520, 520, 520, 0, 0, 0, 0, 2490, 0, 0, 496, 496, 1179, 496, 496, 496, 496, 496, 496, 496",
      /* 30935 */ "496, 496, 496, 496, 496, 496, 1501, 496, 496, 0, 0, 0, 1332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 30960 */ "1010, 0, 0, 0, 0, 0, 1607, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1901, 0, 0, 0, 0, 0, 0, 802816, 0",
      /* 30989 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1638, 0, 0, 0, 0, 0, 0, 0, 2314, 0, 0, 2315, 400, 400, 0, 496, 496",
      /* 31016 */ "496, 496, 496, 496, 496, 496, 2240, 496, 496, 496, 496, 496, 496, 0, 0, 0, 289, 288, 0, 0, 0, 0, 0",
      /* 31039 */ "0, 0, 288, 0, 45056, 49152, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 394, 0, 407, 407, 407, 407, 407",
      /* 31064 */ "427, 427, 427, 427, 427, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 503, 450, 503, 503, 503",
      /* 31084 */ "503, 450, 450, 450, 450, 450, 450, 462, 450, 450, 450, 450, 450, 450, 462, 474, 450, 528, 503, 503",
      /* 31104 */ "503, 503, 503, 503, 503, 503, 528, 528, 528, 528, 528, 528, 528, 551, 551, 560, 53494, 53494, 2, 2",
      /* 31124 */ "3, 94212, 5, 6, 0, 0, 0, 0, 0, 53494, 53494, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 106496, 106496",
      /* 31148 */ "106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496",
      /* 31160 */ "106496, 106496, 0, 685, 0, 0, 0, 0, 691, 0, 0, 0, 695, 0, 0, 0, 0, 400, 400, 400, 400, 400, 0, 0",
      /* 31184 */ "400, 2372, 496, 496, 496, 496, 0, 0, 0, 1786, 0, 0, 0, 0, 0, 1792, 0, 0, 400, 400, 706, 400, 400",
      /* 31207 */ "400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 1074, 400, 1075, 400, 771, 0, 0, 0, 775, 0",
      /* 31228 */ "400, 400, 400, 400, 400, 400, 400, 783, 400, 786, 0, 0, 767, 0, 0, 0, 0, 767, 0, 775, 0, 0, 0, 775",
      /* 31252 */ "0, 496, 2495, 496, 496, 496, 496, 496, 496, 496, 496, 520, 2504, 520, 520, 520, 0, 0, 1288, 0, 0, 0",
      /* 31274 */ "0, 0, 1294, 0, 0, 0, 0, 0, 0, 2105344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200704, 200704, 200704, 200704",
      /* 31298 */ "200704, 200704, 496, 496, 804, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 31316 */ "1502, 496, 496, 496, 848, 496, 0, 0, 496, 0, 520, 520, 520, 520, 864, 520, 520, 520, 520, 520, 1254",
      /* 31337 */ "520, 520, 520, 520, 1261, 520, 520, 496, 496, 0, 0, 520, 520, 496, 496, 496, 496, 496, 496, 922",
      /* 31357 */ "848, 0, 520, 520, 520, 520, 520, 1255, 520, 520, 520, 520, 520, 520, 520, 496, 496, 0, 520, 520",
      /* 31377 */ "930, 908, 53494, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 991, 0, 0, 0, 0, 996, 0, 0, 0, 0, 1017, 0, 0, 0",
      /* 31405 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 1026, 0, 0, 0, 0, 0, 0, 1090, 0, 0, 0, 0, 0, 0, 0, 0, 1096, 0, 0, 0, 0",
      /* 31435 */ "0, 111009, 111009, 111009, 111009, 111009, 417, 417, 417, 417, 417, 111009, 1139, 496, 496, 496",
      /* 31451 */ "496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1174, 1160, 496, 496, 496, 496, 496",
      /* 31470 */ "496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1746, 520, 520, 1251, 520, 520, 520, 520, 1257",
      /* 31489 */ "520, 520, 520, 520, 520, 496, 496, 0, 0, 0, 0, 520, 520, 2143, 520, 520, 520, 520, 520, 520, 520",
      /* 31510 */ "520, 1823, 520, 520, 520, 520, 520, 520, 520, 520, 1259, 520, 520, 520, 520, 496, 496, 0, 0, 0",
      /* 31530 */ "1316, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2193, 0, 0, 0, 0, 1347, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 31560 */ "0, 0, 1359, 520, 520, 1555, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1567, 520, 520, 496",
      /* 31580 */ "520, 496, 496, 2031, 496, 520, 520, 2034, 520, 2036, 2037, 0, 0, 0, 0, 496, 496, 496, 496, 2552",
      /* 31600 */ "496, 520, 520, 520, 520, 2556, 520, 1734, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 31619 */ "496, 496, 496, 496, 2139, 1876, 0, 0, 0, 1880, 0, 0, 0, 0, 1883, 0, 0, 0, 0, 0, 0, 0, 1336, 1337, 0",
      /* 31644 */ "0, 0, 0, 0, 0, 0, 0, 761856, 0, 0, 0, 0, 0, 0, 0, 0, 913408, 0, 0, 0, 0, 0, 0, 0, 0, 3133440, 0",
      /* 31671 */ "2727936, 0, 0, 0, 0, 0, 1915, 0, 0, 0, 0, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400",
      /* 31693 */ "400, 400, 400, 1408, 0, 0, 1947, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 31713 */ "1758, 496, 496, 400, 2094, 400, 400, 400, 400, 400, 400, 2099, 400, 0, 0, 0, 0, 0, 0, 0, 1351, 0, 0",
      /* 31736 */ "0, 0, 0, 0, 0, 0, 737, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 737, 496, 496, 496, 496, 2132, 496, 496",
      /* 31763 */ "496, 496, 2135, 496, 496, 496, 496, 2138, 496, 0, 0, 0, 853, 91311, 1133, 856, 520, 520, 1205, 520",
      /* 31783 */ "520, 520, 520, 520, 520, 2352, 520, 496, 496, 520, 520, 0, 0, 0, 0, 0, 0, 0, 0, 2211, 0, 0, 0, 0, 0",
      /* 31808 */ "2216, 400, 400, 400, 400, 2220, 496, 496, 496, 496, 2250, 496, 496, 496, 496, 496, 496, 496, 520",
      /* 31827 */ "520, 520, 520, 520, 1543, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1565, 520, 520",
      /* 31846 */ "520, 520, 0, 0, 2359, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2367, 0, 0, 0, 0, 400, 2408, 496, 496",
      /* 31873 */ "496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1191, 496, 496, 496, 2446, 496, 520, 520, 520",
      /* 31892 */ "520, 2452, 520, 2454, 2455, 2456, 520, 0, 0, 0, 0, 0, 0, 2045, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1023, 0",
      /* 31917 */ "0, 0, 0, 0, 0, 2519, 496, 2520, 496, 496, 496, 520, 520, 520, 2525, 520, 2526, 520, 520, 520, 0, 0",
      /* 31939 */ "1287, 0, 0, 0, 1293, 0, 0, 0, 0, 0, 0, 0, 1647, 0, 1648, 0, 0, 0, 1652, 0, 0, 520, 520, 2565, 2566",
      /* 31964 */ "496, 520, 496, 520, 496, 520, 0, 0, 0, 0, 0, 0, 0, 0, 2403, 0, 0, 0, 0, 0, 0, 0, 0, 660, 0, 0, 0, 0",
      /* 31992 */ "0, 0, 0, 0, 0, 0, 0, 0, 1301, 0, 0, 0, 1818, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520",
      /* 32016 */ "520, 520, 520, 520, 1569, 0, 0, 330, 332, 0, 0, 0, 332, 0, 0, 0, 0, 0, 0, 0, 0, 544, 544, 544, 544",
      /* 32041 */ "544, 544, 544, 544, 0, 0, 0, 380, 40960, 380, 380, 0, 380, 380, 387, 380, 0, 380, 408, 408, 408",
      /* 32062 */ "408, 408, 428, 428, 428, 428, 428, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451, 451",
      /* 32082 */ "451, 408, 451, 451, 451, 451, 451, 486, 451, 451, 451, 451, 451, 504, 451, 504, 504, 504, 504, 529",
      /* 32102 */ "504, 504, 504, 504, 504, 504, 504, 504, 529, 529, 529, 529, 529, 529, 529, 504, 504, 529, 53494",
      /* 32121 */ "53494, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 135168, 135168, 135168, 135168, 135168, 135168, 135168",
      /* 32140 */ "135168, 135168, 135168, 135168, 0, 590, 0, 0, 0, 0, 400, 400, 400, 400, 400, 400, 400, 400, 400",
      /* 32159 */ "400, 400, 400, 400, 1407, 400, 0, 652, 0, 0, 0, 0, 0, 0, 0, 0, 0, 590, 0, 0, 0, 496, 496, 496, 496",
      /* 32184 */ "496, 496, 496, 496, 496, 496, 1956, 496, 1958, 496, 496, 496, 806, 496, 496, 496, 496, 496, 496",
      /* 32203 */ "496, 496, 496, 496, 496, 496, 1469, 496, 496, 496, 496, 496, 496, 850, 0, 496, 0, 520, 520, 520",
      /* 32223 */ "520, 520, 866, 520, 520, 520, 520, 520, 2351, 520, 520, 496, 496, 520, 520, 0, 0, 0, 0, 0, 0, 1427",
      /* 32245 */ "0, 1429, 0, 0, 1431, 0, 0, 0, 0, 0, 0, 1385, 1386, 0, 0, 1389, 0, 0, 0, 0, 0, 0, 664, 0, 0, 667, 0",
      /* 32272 */ "0, 0, 0, 0, 0, 0, 1307, 0, 0, 0, 0, 0, 1311, 0, 0, 400, 400, 1077, 400, 400, 400, 400, 400, 400",
      /* 32296 */ "400, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 496, 1140, 1146, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 32320 */ "1156, 496, 496, 496, 496, 0, 1782, 1987, 0, 0, 0, 0, 1788, 1989, 0, 0, 0, 496, 496, 496, 1180, 496",
      /* 32342 */ "496, 496, 496, 496, 496, 496, 496, 496, 1192, 496, 496, 496, 496, 496, 1764, 496, 496, 496, 1768",
      /* 32361 */ "496, 496, 496, 496, 496, 496, 818, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1481, 496, 496, 496",
      /* 32381 */ "496, 496, 496, 496, 315392, 0, 0, 853, 91311, 1133, 856, 520, 520, 520, 520, 520, 1208, 1214, 520",
      /* 32400 */ "520, 520, 1252, 520, 520, 520, 520, 520, 520, 520, 520, 520, 496, 496, 0, 0, 0, 0, 2141, 520, 520",
      /* 32421 */ "520, 520, 520, 520, 520, 520, 520, 520, 908, 520, 496, 496, 0, 0, 0, 520, 520, 496, 496, 1140, 496",
      /* 32442 */ "496, 1180, 496, 496, 520, 520, 1208, 520, 520, 496, 520, 496, 520, 496, 520, 496, 520, 0, 0, 0, 0",
      /* 32463 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 355, 0, 1248, 520, 520, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 32491 */ "1101824, 372, 372, 1300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1099, 0, 0, 1362, 0, 0, 0, 0",
      /* 32518 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 1325, 0, 0, 1328, 496, 496, 1460, 1461, 496, 496, 496, 1465, 496, 496",
      /* 32541 */ "496, 496, 496, 496, 496, 496, 1754, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1475, 496",
      /* 32560 */ "496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1484, 496, 496, 496, 1520, 520, 520, 520",
      /* 32579 */ "520, 520, 1530, 1531, 520, 520, 520, 1535, 520, 520, 520, 520, 520, 1559, 520, 520, 520, 520, 520",
      /* 32598 */ "520, 520, 520, 520, 520, 520, 2270, 2271, 520, 520, 520, 1619, 0, 0, 0, 0, 0, 0, 1625, 0, 0, 0, 0",
      /* 32621 */ "0, 0, 0, 0, 587, 588, 0, 0, 0, 0, 0, 0, 1655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1313, 0",
      /* 32651 */ "1667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1032, 0, 520, 520, 1831, 520, 520, 520, 520, 520",
      /* 32676 */ "520, 520, 520, 520, 520, 520, 520, 520, 496, 2169, 496, 0, 0, 0, 496, 496, 496, 496, 496, 496, 496",
      /* 32697 */ "496, 496, 1955, 496, 496, 496, 0, 0, 496, 0, 520, 520, 520, 520, 863, 520, 520, 874, 520, 0, 0, 0",
      /* 32719 */ "2042, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1341, 0, 0, 0, 0, 0, 0, 0, 2081, 0, 0, 0, 0, 0, 2087, 0",
      /* 32748 */ "0, 0, 0, 400, 400, 400, 400, 400, 0, 806912, 807312, 0, 496, 496, 496, 496, 2239, 496, 496, 496",
      /* 32768 */ "496, 496, 496, 496, 496, 496, 496, 0, 1783, 0, 0, 0, 1520, 2093, 400, 400, 400, 400, 400, 400, 400",
      /* 32789 */ "400, 400, 2100, 0, 0, 0, 0, 0, 0, 690, 0, 0, 0, 0, 697, 698, 0, 700, 400, 520, 520, 520, 2350, 520",
      /* 32813 */ "520, 520, 520, 496, 496, 520, 520, 0, 0, 0, 0, 0, 0, 2055, 0, 0, 0, 0, 0, 0, 0, 0, 0, 293, 294, 0",
      /* 32839 */ "0, 0, 0, 0, 520, 2508, 520, 520, 520, 0, 0, 0, 0, 0, 0, 0, 0, 2517, 496, 496, 496, 496, 496, 1963",
      /* 32863 */ "496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 0, 0, 1784, 0, 0, 1520, 0, 316, 0, 0, 0, 0, 0, 0",
      /* 32887 */ "0, 0, 0, 0, 0, 0, 0, 322, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 395, 0, 409, 409, 409, 409, 409",
      /* 32914 */ "429, 429, 437, 429, 429, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 475",
      /* 32934 */ "452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 505, 452, 505, 505, 505, 505, 530, 505, 505",
      /* 32954 */ "505, 505, 542, 542, 542, 542, 547, 547, 547, 547, 547, 547, 547, 505, 505, 547, 53494, 53813, 2, 2",
      /* 32974 */ "3, 94212, 5, 6, 0, 0, 0, 0, 0, 151552, 2105344, 264, 265, 0, 208896, 0, 0, 0, 0, 0, 0, 0, 2818048",
      /* 32997 */ "0, 2879488, 0, 2961408, 0, 2977792, 0, 0, 0, 591, 0, 0, 0, 0, 400, 400, 400, 400, 400, 400, 400",
      /* 33018 */ "400, 400, 400, 0, 0, 0, 0, 496, 496, 496, 496, 496, 807, 496, 496, 819, 496, 496, 496, 496, 496",
      /* 33039 */ "496, 496, 496, 496, 1497, 496, 496, 496, 496, 496, 496, 0, 520, 520, 496, 496, 496, 819, 496, 496",
      /* 33059 */ "496, 496, 0, 520, 520, 520, 879, 1030, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1336, 496, 1141",
      /* 33085 */ "496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1503, 1504, 1249, 520, 520",
      /* 33104 */ "520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 496, 496, 0, 0, 0, 0, 520, 2142, 520, 520, 2145",
      /* 33125 */ "520, 520, 520, 520, 520, 520, 899, 520, 520, 520, 520, 520, 496, 496, 0, 0, 0, 520, 520, 496, 496",
      /* 33146 */ "1141, 496, 496, 496, 1274, 496, 520, 520, 1209, 520, 520, 496, 520, 496, 2030, 496, 496, 520, 2033",
      /* 33165 */ "520, 520, 0, 0, 2038, 0, 520, 1282, 520, 0, 0, 1286, 0, 0, 0, 1292, 0, 0, 0, 0, 0, 0, 0, 1612, 0, 0",
      /* 33191 */ "0, 0, 0, 0, 0, 0, 0, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 1520, 520, 520, 520",
      /* 33209 */ "520, 520, 520, 520, 1532, 520, 520, 520, 520, 520, 520, 520, 520, 1226, 520, 520, 520, 520, 520",
      /* 33228 */ "520, 520, 520, 1238, 520, 520, 520, 520, 520, 520, 1248, 520, 1540, 520, 520, 520, 520, 520, 520",
      /* 33247 */ "520, 520, 520, 520, 520, 520, 520, 520, 1247, 520, 1554, 520, 520, 520, 520, 520, 520, 520, 520",
      /* 33266 */ "520, 520, 520, 520, 520, 520, 520, 1842, 0, 0, 0, 1658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1356, 0",
      /* 33292 */ "0, 0, 0, 1790, 0, 0, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 2003",
      /* 33313 */ "520, 520, 1806, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1264, 496, 0, 0, 0",
      /* 33334 */ "974848, 0, 0, 0, 400, 400, 975248, 0, 496, 496, 496, 496, 496, 496, 496, 496, 2241, 496, 496, 496",
      /* 33354 */ "496, 496, 496, 0, 316, 293, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1391, 0, 0, 0, 0, 0, 0, 293, 0",
      /* 33382 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 338, 0, 0, 0, 0, 338, 0, 0, 0, 45056, 49152, 0, 0, 0, 0, 40960, 0, 0",
      /* 33410 */ "293, 0, 0, 388, 0, 0, 0, 410, 410, 410, 410, 410, 430, 436, 436, 436, 430, 436, 436, 436, 436, 436",
      /* 33432 */ "436, 436, 436, 436, 436, 470, 436, 436, 436, 410, 436, 481, 470, 436, 485, 436, 485, 485, 485, 485",
      /* 33452 */ "485, 506, 485, 506, 506, 506, 506, 531, 506, 506, 506, 506, 506, 506, 506, 506, 531, 531, 531, 531",
      /* 33472 */ "531, 531, 531, 506, 506, 531, 53494, 53494, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 163840, 163840",
      /* 33493 */ "163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840",
      /* 33505 */ "163840, 163840, 595, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1344, 632, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 33533 */ "694, 0, 0, 0, 0, 0, 400, 400, 1922, 400, 400, 400, 400, 1925, 400, 400, 400, 701, 400, 400, 709",
      /* 33554 */ "400, 400, 717, 400, 400, 400, 723, 400, 400, 400, 730, 400, 400, 400, 708, 400, 400, 400, 400, 400",
      /* 33574 */ "400, 400, 400, 400, 400, 400, 400, 0, 1086, 0, 0, 0, 749, 0, 629, 0, 0, 0, 0, 749, 0, 0, 0, 0, 732",
      /* 33599 */ "0, 0, 592, 0, 760, 0, 0, 632, 0, 0, 0, 749, 0, 0, 732, 592, 770, 0, 732, 0, 772, 632, 0, 0, 0, 701",
      /* 33625 */ "400, 400, 779, 400, 400, 400, 400, 730, 400, 400, 400, 710, 400, 400, 400, 400, 400, 400, 400, 400",
      /* 33645 */ "400, 400, 400, 400, 0, 2101, 0, 0, 0, 0, 797, 496, 496, 808, 496, 496, 820, 496, 496, 496, 829, 496",
      /* 33667 */ "496, 496, 496, 844, 496, 496, 496, 851, 0, 496, 0, 520, 520, 857, 520, 520, 868, 520, 520, 880, 0",
      /* 33688 */ "857, 520, 797, 496, 496, 919, 496, 496, 496, 496, 0, 857, 520, 520, 927, 983, 0, 0, 0, 0, 0, 0, 0",
      /* 33711 */ "0, 0, 0, 0, 0, 0, 0, 997, 0, 0, 0, 946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1043, 0, 0, 0, 0, 496, 496, 496",
      /* 33740 */ "2560, 520, 520, 520, 2562, 0, 0, 496, 496, 496, 496, 2497, 496, 2499, 496, 496, 496, 520, 520, 520",
      /* 33760 */ "520, 2506, 0, 1101, 0, 0, 0, 1087, 0, 0, 0, 0, 0, 0, 1106, 0, 0, 0, 0, 0, 172032, 172032, 172032",
      /* 33783 */ "172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032",
      /* 33795 */ "172032, 1175, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 2334, 0",
      /* 33814 */ "520, 520, 496, 496, 1270, 496, 496, 1273, 496, 496, 520, 520, 1278, 520, 520, 496, 520, 2567, 2568",
      /* 33833 */ "496, 520, 496, 520, 0, 0, 0, 0, 0, 0, 0, 1634, 0, 0, 0, 0, 0, 0, 0, 0, 265, 265, 265, 265, 265, 265",
      /* 33859 */ "265, 265, 1281, 520, 520, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1297, 0, 0, 0, 0, 496, 496, 2535, 2536, 496",
      /* 33884 */ "496, 520, 520, 2541, 2542, 520, 520, 496, 520, 365040, 496, 496, 496, 365064, 520, 520, 520, 0, 0",
      /* 33903 */ "0, 0, 0, 0, 0, 0, 0, 1296, 0, 1298, 0, 1329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1618, 400",
      /* 33932 */ "400, 1447, 400, 400, 400, 1451, 0, 0, 0, 0, 0, 1133, 496, 496, 496, 0, 0, 496, 0, 520, 520, 520",
      /* 33954 */ "862, 865, 520, 872, 520, 520, 1505, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 0, 0, 1520",
      /* 33974 */ "91311, 0, 0, 0, 0, 1102, 0, 1057, 1091, 0, 0, 0, 0, 0, 0, 0, 1102, 0, 0, 1643, 1644, 0, 0, 0, 0, 0",
      /* 34000 */ "0, 0, 0, 0, 0, 0, 0, 1616, 0, 0, 0, 0, 0, 1684, 0, 1686, 400, 400, 400, 400, 400, 400, 400, 400",
      /* 34024 */ "400, 400, 400, 1072, 400, 400, 400, 400, 0, 0, 0, 1712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 2218",
      /* 34049 */ "400, 400, 400, 496, 496, 1761, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 34068 */ "1770, 496, 496, 496, 496, 496, 1775, 496, 496, 496, 496, 496, 496, 0, 0, 0, 0, 0, 1520, 520, 520",
      /* 34089 */ "520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1538, 520, 520, 520, 520, 2511, 0, 0, 0, 0",
      /* 34110 */ "2513, 0, 0, 2516, 496, 496, 496, 496, 496, 1738, 496, 496, 496, 496, 496, 1743, 496, 1745, 496, 496",
      /* 34130 */ "0, 0, 0, 0, 1866, 0, 0, 1868, 0, 0, 0, 0, 0, 0, 0, 0, 616, 0, 0, 0, 0, 0, 0, 496, 0, 0, 0, 1879, 0",
      /* 34159 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1651, 0, 0, 0, 0, 0, 0, 1892, 0, 1893, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 34189 */ "0, 992, 0, 0, 0, 0, 0, 0, 1916, 0, 0, 1919, 400, 400, 400, 400, 400, 1924, 400, 400, 400, 1926, 400",
      /* 34212 */ "400, 400, 711, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 573440, 0, 0, 0, 496",
      /* 34232 */ "496, 400, 1928, 400, 400, 400, 400, 400, 400, 0, 0, 0, 1934, 0, 0, 0, 0, 0, 0, 2188, 0, 0, 0, 0, 0",
      /* 34257 */ "0, 0, 0, 0, 1039, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1938, 0, 1940, 0, 0, 0, 400, 400, 400, 400, 1945, 400",
      /* 34283 */ "400, 400, 400, 1411, 400, 400, 400, 400, 400, 400, 400, 0, 0, 0, 0, 2227, 0, 0, 0, 0, 400, 400, 400",
      /* 34306 */ "2233, 0, 0, 0, 496, 496, 496, 496, 496, 496, 1953, 496, 496, 496, 496, 1957, 496, 0, 0, 0, 853",
      /* 34327 */ "91311, 1133, 856, 1202, 1204, 520, 520, 520, 520, 1212, 520, 520, 520, 520, 2481, 520, 520, 520",
      /* 34345 */ "520, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 592, 0, 594, 1959, 496, 496, 496, 496, 496, 496, 496",
      /* 34370 */ "496, 1966, 496, 496, 496, 496, 496, 496, 1183, 496, 496, 496, 496, 1189, 496, 496, 496, 496, 2051",
      /* 34389 */ "0, 0, 0, 0, 0, 0, 2056, 2057, 0, 0, 0, 0, 0, 0, 0, 264, 265, 0, 0, 0, 0, 0, 577, 0, 2150, 520, 520",
      /* 34416 */ "520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 2016, 2171, 520, 520, 0, 0, 0, 0",
      /* 34437 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 1872, 0, 0, 0, 0, 0, 0, 0, 2186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1650",
      /* 34467 */ "0, 0, 0, 0, 2234, 496, 2236, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 2244, 2245, 496, 0",
      /* 34488 */ "0, 1196, 853, 91311, 1133, 856, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1546, 520, 520, 520",
      /* 34507 */ "520, 520, 520, 496, 496, 496, 2249, 496, 496, 496, 496, 496, 496, 496, 496, 520, 2259, 520, 520",
      /* 34526 */ "520, 520, 1821, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1829, 520, 0, 0, 0, 569344, 0, 0, 0, 0",
      /* 34548 */ "0, 0, 0, 0, 0, 0, 0, 0, 1886, 0, 0, 0, 2322, 496, 496, 496, 496, 496, 496, 496, 496, 2329, 496, 496",
      /* 34572 */ "496, 496, 496, 496, 1464, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1513, 496, 0, 0, 1520, 91311",
      /* 34592 */ "0, 2347, 520, 520, 520, 520, 520, 520, 520, 496, 496, 520, 520, 0, 0, 0, 0, 0, 0, 2297, 0, 0, 0, 0",
      /* 34616 */ "0, 0, 0, 0, 0, 1313, 0, 0, 0, 0, 0, 0, 496, 496, 2376, 496, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 34640 */ "496, 496, 520, 520, 496, 496, 496, 496, 496, 496, 496, 496, 520, 520, 520, 520, 520, 520, 520, 1225",
      /* 34660 */ "520, 520, 520, 520, 520, 520, 520, 520, 520, 1824, 1825, 520, 520, 520, 520, 520, 868352, 0, 0, 0",
      /* 34680 */ "0, 0, 0, 0, 496, 496, 496, 2441, 496, 496, 496, 496, 496, 1150, 496, 496, 496, 1154, 496, 496, 496",
      /* 34701 */ "496, 496, 496, 817, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1187, 496, 496, 496, 496, 496, 496",
      /* 34721 */ "2461, 0, 0, 0, 0, 496, 496, 496, 496, 496, 496, 496, 2473, 496, 2475, 520, 520, 520, 1284, 1601, 0",
      /* 34742 */ "0, 0, 0, 1290, 1603, 0, 0, 0, 0, 0, 0, 0, 2772992, 0, 0, 0, 0, 2113536, 0, 0, 0, 0, 296, 298, 297",
      /* 34767 */ "40960, 297, 297, 298, 385, 297, 296, 297, 0, 297, 411, 411, 411, 411, 411, 431, 431, 431, 439, 444",
      /* 34787 */ "453, 453, 453, 453, 453, 453, 453, 467, 453, 453, 453, 453, 453, 453, 411, 453, 453, 453, 453, 467",
      /* 34807 */ "453, 467, 491, 467, 491, 467, 507, 491, 507, 507, 507, 507, 532, 507, 507, 507, 507, 507, 507, 507",
      /* 34827 */ "507, 532, 532, 532, 532, 532, 532, 532, 507, 507, 532, 53494, 53494, 2, 2, 3, 94212, 5, 6, 0, 0, 0",
      /* 34849 */ "0, 0, 188834, 188834, 188834, 188834, 188834, 0, 0, 0, 0, 0, 188834, 0, 0, 0, 582, 583, 584, 585",
      /* 34869 */ "586, 0, 0, 0, 0, 0, 0, 0, 0, 633, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 598, 0, 600, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 34900 */ "0, 0, 1024, 0, 0, 0, 0, 0, 0, 0, 0, 614, 0, 0, 0, 0, 0, 0, 621, 316, 316, 316, 0, 0, 0, 0, 496, 496",
      /* 34928 */ "2550, 2551, 496, 496, 520, 520, 2554, 2555, 520, 520, 496, 520, 496, 496, 496, 2032, 520, 520, 520",
      /* 34947 */ "2035, 0, 0, 0, 0, 0, 0, 2213, 0, 0, 0, 0, 400, 400, 400, 400, 400, 1690, 400, 400, 400, 400, 400",
      /* 34970 */ "400, 0, 626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 638, 0, 0, 0, 0, 496, 2534, 496, 496, 496, 2538, 520",
      /* 34996 */ "2540, 520, 520, 520, 2544, 641, 0, 643, 0, 645, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1885, 0, 0, 0, 0",
      /* 35022 */ "0, 0, 687, 745472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 1441, 400, 651664, 400, 400, 400, 704, 400",
      /* 35046 */ "400, 712, 400, 400, 400, 721, 400, 400, 400, 400, 728, 400, 400, 400, 400, 1449, 400, 0, 0, 0, 0, 0",
      /* 35068 */ "0, 1133, 496, 496, 496, 0, 0, 496, 0, 520, 520, 520, 520, 520, 870, 520, 520, 520, 0, 2175, 0, 0, 0",
      /* 35091 */ "0, 0, 0, 0, 0, 0, 0, 0, 3088384, 0, 0, 0, 0, 0, 0, 0, 762, 0, 0, 0, 614, 0, 621, 758, 0, 0, 0, 0, 0",
      /* 35120 */ "0, 733, 0, 0, 0, 0, 0, 0, 599, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 0, 0, 0, 645, 0, 614, 678",
      /* 35149 */ "789, 0, 0, 614, 0, 621, 0, 0, 678, 794, 0, 496, 0, 1085, 0, 853, 91311, 1133, 856, 1203, 520, 520",
      /* 35171 */ "520, 520, 520, 520, 520, 520, 520, 655880, 520, 2012, 520, 2014, 520, 520, 496, 802, 805, 496, 812",
      /* 35190 */ "496, 496, 496, 825, 828, 496, 496, 496, 837, 841, 496, 0, 335872, 0, 853, 91311, 1133, 856, 520",
      /* 35209 */ "520, 520, 520, 520, 520, 520, 520, 520, 1837, 520, 520, 520, 520, 520, 520, 520, 885, 888, 520, 520",
      /* 35229 */ "520, 897, 901, 520, 520, 520, 520, 496, 825, 0, 0, 0, 0, 520, 520, 520, 520, 520, 520, 520, 1800",
      /* 35250 */ "520, 520, 520, 520, 520, 1236, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1242, 520",
      /* 35269 */ "520, 520, 520, 0, 520, 885, 496, 496, 918, 496, 496, 837, 841, 923, 0, 520, 520, 926, 520, 520, 520",
      /* 35290 */ "1542, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1551, 520, 520, 520, 520, 2162, 520, 520, 520",
      /* 35309 */ "520, 2165, 520, 520, 520, 496, 496, 496, 0, 0, 496, 0, 520, 520, 520, 520, 520, 871, 520, 520, 520",
      /* 35330 */ "520, 520, 2265, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 2026, 520, 520, 520, 520",
      /* 35349 */ "520, 897, 901, 931, 53494, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1366, 0, 0, 0, 1368, 0, 0, 0, 1015, 0",
      /* 35375 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 316, 316, 982, 400, 400, 400",
      /* 35403 */ "1128, 0, 0, 0, 0, 0, 0, 0, 1133, 496, 496, 496, 496, 496, 1165, 496, 496, 496, 496, 496, 496, 496",
      /* 35425 */ "496, 496, 1173, 0, 0, 0, 1363, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1370, 1371, 0, 1373, 0, 0, 0, 1375",
      /* 35451 */ "0, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1027, 0, 496, 520, 520, 496, 1588, 496, 651760",
      /* 35476 */ "496, 496, 496, 496, 520, 1595, 520, 651784, 520, 520, 520, 1557, 1558, 520, 1560, 1561, 520, 520",
      /* 35494 */ "520, 520, 520, 520, 1568, 520, 520, 520, 520, 53494, 2, 6, 0, 0, 0, 0, 936, 940, 0, 0, 0, 0, 0",
      /* 35517 */ "250276, 250276, 250276, 250276, 250276, 249856, 249856, 249856, 249856, 250276, 250276, 0, 0, 0",
      /* 35531 */ "1621, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1900, 0, 0, 0, 0, 0, 1632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 35561 */ "0, 0, 0, 2048, 0, 0, 0, 496, 496, 1749, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 35583 */ "496, 1983, 496, 496, 1523, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520",
      /* 35602 */ "520, 1816, 520, 0, 0, 0, 2053, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2074, 0, 0, 0, 2262, 520, 520",
      /* 35628 */ "520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 2396, 520, 2358, 0, 0, 0, 0, 0, 0",
      /* 35650 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 1875, 496, 520, 0, 2398, 0, 0, 2401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1388, 0",
      /* 35678 */ "1390, 0, 0, 0, 0, 0, 0, 400, 0, 496, 496, 496, 2411, 496, 496, 496, 496, 496, 496, 496, 496, 2254",
      /* 35700 */ "496, 496, 496, 2258, 520, 520, 520, 520, 520, 520, 2421, 520, 520, 520, 520, 520, 520, 520, 520, 0",
      /* 35720 */ "0, 0, 0, 1289, 0, 0, 0, 1295, 0, 0, 0, 0, 2529, 0, 0, 2532, 496, 496, 496, 496, 496, 496, 520, 520",
      /* 35744 */ "520, 520, 520, 520, 520, 520, 520, 520, 2458, 0, 2459, 0, 0, 2546, 2547, 0, 496, 496, 496, 496, 496",
      /* 35765 */ "496, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1231, 0, 0, 0, 0",
      /* 35786 */ "40960, 0, 0, 0, 0, 0, 0, 0, 396, 0, 400, 400, 400, 1400, 400, 400, 400, 400, 400, 400, 400, 400",
      /* 35808 */ "400, 400, 400, 0, 0, 1707, 0, 0, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454",
      /* 35829 */ "454, 476, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 508, 517, 508, 508, 508, 508, 533, 508",
      /* 35849 */ "508, 508, 508, 508, 508, 508, 508, 533, 533, 533, 533, 533, 533, 533, 552, 552, 561, 53494, 53494",
      /* 35868 */ "2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 221603, 221603, 221603, 221603, 221603, 221603, 221603, 221603",
      /* 35887 */ "221603, 221603, 221603, 221603, 221603, 221603, 221603, 221603, 750, 0, 0, 0, 0, 0, 602, 753, 0, 0",
      /* 35905 */ "0, 602, 0, 0, 0, 0, 0, 0, 565248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1338, 0, 0, 0, 0, 0, 0, 1031, 0, 0",
      /* 35933 */ "949, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1045, 0, 0, 0, 1049, 0, 0, 0, 0, 0, 0, 0, 0, 400, 400, 400",
      /* 35961 */ "400, 2112, 2113, 2114, 496, 496, 496, 496, 400, 400, 400, 1067, 400, 400, 400, 400, 400, 400, 400",
      /* 35980 */ "400, 400, 400, 400, 400, 0, 1729, 0, 0, 496, 496, 0, 949, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 36007 */ "1044, 0, 496, 1142, 496, 496, 496, 496, 1152, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1741",
      /* 36026 */ "496, 496, 496, 496, 496, 496, 496, 496, 1161, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 36046 */ "496, 496, 2128, 496, 496, 1176, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1188, 496, 496, 496",
      /* 36065 */ "496, 496, 496, 2326, 496, 496, 496, 496, 2331, 496, 496, 496, 496, 520, 520, 1220, 520, 520, 520",
      /* 36084 */ "520, 520, 520, 520, 520, 520, 520, 520, 1229, 520, 520, 520, 1820, 520, 520, 520, 520, 520, 520",
      /* 36103 */ "520, 520, 520, 520, 520, 520, 1228, 520, 520, 520, 0, 520, 1267, 496, 496, 1142, 496, 496, 496, 496",
      /* 36123 */ "496, 520, 520, 1210, 520, 520, 520, 520, 2021, 520, 520, 520, 520, 2025, 520, 520, 520, 520, 520",
      /* 36142 */ "520, 520, 520, 2164, 520, 520, 520, 520, 496, 496, 496, 1666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1677, 0",
      /* 36166 */ "0, 0, 0, 0, 0, 2105344, 264, 265, 0, 0, 0, 0, 0, 0, 0, 0, 1613, 0, 0, 0, 0, 0, 0, 0, 0, 1626, 0",
      /* 36193 */ "1628, 0, 0, 0, 0, 0, 496, 1748, 496, 496, 1751, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 36214 */ "496, 1190, 496, 496, 496, 496, 0, 1791, 0, 0, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520",
      /* 36235 */ "520, 1244, 520, 520, 520, 0, 0, 0, 1865, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2089, 2090, 0, 2092, 0",
      /* 36261 */ "0, 2197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2204, 0, 0, 0, 496, 520, 2397, 0, 2399, 0, 0, 0, 0",
      /* 36289 */ "0, 0, 2404, 0, 0, 0, 2407, 0, 0, 0, 0, 2435, 2436, 0, 851968, 496, 496, 496, 496, 496, 496, 496",
      /* 36311 */ "496, 1779, 496, 496, 0, 0, 0, 0, 0, 1520, 0, 675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1108, 0",
      /* 36339 */ "0, 736, 0, 0, 0, 0, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 1418, 400, 0, 0, 0, 0, 496",
      /* 36362 */ "496, 496, 809, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1744, 496, 496, 496, 496",
      /* 36382 */ "496, 849, 0, 0, 496, 0, 520, 520, 520, 520, 520, 869, 520, 520, 520, 520, 520, 2389, 520, 520, 520",
      /* 36403 */ "520, 520, 520, 520, 520, 520, 520, 520, 2167, 520, 496, 496, 496, 496, 496, 2324, 496, 496, 496",
      /* 36422 */ "496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 2137, 496, 496, 300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 36446 */ "0, 0, 0, 0, 0, 1914, 0, 316, 0, 0, 0, 0, 299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2050, 0",
      /* 36476 */ "0, 300, 299, 40960, 299, 299, 300, 299, 299, 0, 299, 0, 299, 412, 412, 412, 412, 412, 0, 0, 0, 0",
      /* 36498 */ "300, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 412, 299, 299, 299, 299",
      /* 36518 */ "299, 299, 299, 299, 299, 299, 495, 509, 299, 509, 509, 509, 509, 534, 509, 509, 509, 509, 509, 509",
      /* 36538 */ "509, 509, 534, 534, 534, 534, 534, 534, 534, 509, 509, 534, 53494, 53494, 2, 2, 3, 94212, 5, 6, 0",
      /* 36559 */ "0, 0, 0, 0, 258048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 496, 0, 518, 518, 518, 496, 0, 0, 0, 644, 0, 0",
      /* 36586 */ "647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1439, 400, 400, 400, 400, 400, 400, 0, 658, 0, 0, 662, 0, 0, 0, 0",
      /* 36612 */ "0, 0, 0, 0, 0, 0, 0, 2060, 0, 0, 0, 0, 603, 0, 0, 0, 0, 0, 0, 0, 693, 0, 0, 0, 0, 0, 0, 400, 400",
      /* 36641 */ "400, 0, 496, 2318, 496, 496, 496, 496, 679, 0, 0, 0, 763, 0, 0, 748, 0, 0, 0, 0, 0, 0, 0, 0, 749, 0",
      /* 36667 */ "632, 772, 0, 0, 0, 496, 0, 0, 773, 0, 0, 0, 400, 400, 400, 400, 400, 400, 400, 784, 400, 400, 400",
      /* 36690 */ "400, 1726, 400, 400, 400, 400, 400, 0, 0, 0, 0, 496, 496, 496, 496, 520, 520, 520, 520, 0, 0, 496",
      /* 36712 */ "496, 0, 0, 748, 0, 0, 0, 0, 748, 0, 0, 773, 0, 658, 0, 0, 496, 496, 496, 496, 1181, 496, 496, 496",
      /* 36736 */ "496, 496, 496, 496, 496, 496, 496, 496, 1157, 496, 496, 496, 496, 0, 914, 520, 496, 496, 496, 496",
      /* 36756 */ "832, 496, 842, 496, 0, 914, 520, 520, 520, 520, 520, 2423, 520, 2425, 520, 520, 520, 520, 0, 0, 0",
      /* 36777 */ "0, 0, 0, 2105344, 264, 265, 196608, 0, 0, 0, 0, 0, 0, 0, 767, 0, 620, 0, 0, 0, 0, 0, 0, 0, 976, 0",
      /* 36803 */ "0, 0, 0, 0, 316, 316, 0, 892, 520, 902, 520, 53494, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1614, 0, 0, 0",
      /* 36830 */ "0, 0, 0, 400, 400, 1126, 0, 0, 1018, 0, 0, 0, 1131, 0, 1133, 496, 496, 496, 496, 496, 1182, 496",
      /* 36852 */ "496, 496, 1185, 496, 496, 496, 496, 496, 496, 496, 2327, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 36871 */ "1496, 496, 496, 496, 496, 496, 496, 496, 0, 1266, 520, 496, 496, 496, 496, 1272, 496, 496, 1275",
      /* 36890 */ "520, 520, 520, 520, 1280, 520, 520, 1283, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106496, 0, 0, 0",
      /* 36915 */ "1457, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1759, 496, 496",
      /* 36934 */ "1473, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1771, 496, 1520, 520",
      /* 36953 */ "520, 520, 1527, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 2157, 520, 520, 520",
      /* 36972 */ "520, 1572, 520, 520, 520, 520, 520, 520, 520, 1579, 520, 520, 1582, 520, 520, 496, 496, 520, 53494",
      /* 36991 */ "53494, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 1319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1676, 0, 1678, 0, 0",
      /* 37019 */ "0, 0, 1642, 0, 0, 0, 0, 1646, 0, 0, 0, 1649, 0, 0, 0, 0, 0, 0, 734, 0, 0, 0, 0, 0, 745, 0, 0, 614",
      /* 37047 */ "0, 0, 1657, 0, 0, 0, 0, 0, 311296, 1663, 0, 0, 0, 0, 0, 0, 0, 1715, 0, 0, 0, 0, 0, 0, 0, 400, 400",
      /* 37074 */ "1062, 400, 400, 400, 400, 400, 400, 0, 0, 0, 0, 1670, 0, 1672, 1673, 0, 0, 0, 0, 0, 0, 0, 0, 1006",
      /* 37098 */ "0, 1008, 0, 0, 0, 0, 0, 400, 1696, 400, 1697, 1698, 400, 400, 400, 400, 400, 400, 0, 0, 0, 0, 0",
      /* 37121 */ "454, 454, 454, 454, 454, 454, 1709, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1719, 1720, 0, 311696, 1722",
      /* 37144 */ "400, 400, 400, 400, 400, 400, 400, 400, 400, 0, 0, 1730, 0, 496, 496, 2237, 496, 496, 496, 496, 496",
      /* 37165 */ "496, 2242, 496, 496, 496, 496, 496, 815, 496, 496, 496, 496, 830, 832, 496, 496, 842, 496, 496",
      /* 37184 */ "1760, 496, 496, 496, 496, 496, 1766, 496, 496, 496, 496, 496, 496, 496, 496, 1979, 496, 496, 496",
      /* 37203 */ "496, 496, 496, 496, 496, 1167, 496, 496, 1169, 496, 1171, 496, 496, 496, 520, 311792, 1845, 496",
      /* 37221 */ "496, 496, 496, 496, 311816, 1849, 520, 520, 520, 520, 520, 520, 1834, 520, 1836, 520, 520, 520, 520",
      /* 37240 */ "520, 520, 520, 520, 1578, 520, 520, 520, 520, 520, 520, 496, 0, 0, 1891, 0, 0, 0, 0, 1895, 0, 0, 0",
      /* 37263 */ "0, 0, 0, 0, 0, 1038, 0, 0, 0, 1042, 0, 0, 0, 0, 0, 1937, 0, 1939, 0, 0, 0, 0, 400, 400, 400, 1944",
      /* 37289 */ "400, 400, 400, 400, 400, 1699, 400, 400, 400, 400, 400, 0, 0, 0, 0, 0, 0, 0, 1132, 1133, 496, 496",
      /* 37311 */ "496, 496, 0, 0, 0, 496, 496, 496, 496, 496, 496, 496, 496, 1954, 496, 496, 496, 496, 496, 1463, 496",
      /* 37332 */ "496, 496, 496, 496, 496, 496, 496, 496, 496, 1981, 496, 496, 496, 496, 496, 0, 2052, 0, 0, 0, 0, 0",
      /* 37354 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 1343, 0, 0, 2066, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1379, 0, 0",
      /* 37384 */ "2235, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1970, 496, 520, 520",
      /* 37403 */ "520, 2277, 520, 520, 520, 496, 496, 496, 520, 520, 520, 0, 0, 0, 1602, 0, 935, 0, 0, 0, 1604, 0",
      /* 37425 */ "939, 0, 0, 2295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1653, 0, 0, 0, 400, 0, 2409, 496, 496",
      /* 37452 */ "496, 496, 496, 496, 496, 496, 2417, 496, 496, 496, 496, 496, 2123, 496, 496, 496, 496, 496, 496",
      /* 37471 */ "496, 496, 496, 496, 0, 1782, 0, 0, 0, 1520, 2419, 520, 520, 520, 520, 520, 520, 520, 520, 2427, 520",
      /* 37492 */ "520, 0, 0, 0, 0, 0, 0, 2105344, 264, 265, 0, 0, 212992, 0, 0, 0, 0, 0, 0, 1320, 0, 0, 0, 0, 0, 0, 0",
      /* 37519 */ "1327, 0, 0, 2462, 0, 0, 2465, 496, 2467, 496, 496, 496, 496, 496, 496, 496, 496, 520, 0, 0, 0, 2400",
      /* 37541 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1367, 0, 0, 0, 0, 0, 2477, 520, 520, 520, 520, 520, 520, 520, 520, 0",
      /* 37567 */ "0, 0, 0, 0, 2491, 2492, 2545, 0, 0, 2548, 496, 496, 496, 496, 496, 496, 520, 520, 520, 520, 520",
      /* 37588 */ "520, 520, 520, 520, 520, 520, 520, 2344, 520, 520, 0, 2557, 2558, 0, 496, 496, 496, 496, 520, 520",
      /* 37608 */ "520, 520, 0, 0, 496, 496, 496, 496, 496, 2133, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 37628 */ "1756, 496, 496, 496, 496, 496, 0, 301, 302, 303, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2073, 0, 0",
      /* 37653 */ "0, 0, 0, 316, 0, 0, 0, 0, 0, 319, 0, 0, 0, 0, 0, 0, 0, 0, 1054, 1055, 0, 0, 400, 400, 400, 400, 323",
      /* 37680 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2064, 302, 0, 0, 0, 319, 0, 336, 0, 301, 0, 0, 0, 0, 0",
      /* 37710 */ "346, 347, 0, 348, 0, 0, 0, 0, 348, 0, 0, 352, 0, 0, 0, 319, 356, 0, 0, 0, 0, 1364, 0, 0, 0, 0, 0, 0",
      /* 37738 */ "0, 0, 0, 1369, 0, 0, 0, 0, 1002, 0, 1004, 0, 0, 0, 0, 0, 0, 0, 0, 0, 682, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 37768 */ "381, 40960, 381, 381, 0, 381, 381, 366, 381, 0, 381, 413, 413, 413, 413, 413, 0, 0, 301, 0, 0, 455",
      /* 37790 */ "455, 455, 455, 455, 455, 463, 468, 455, 455, 455, 455, 455, 463, 477, 463, 455, 455, 482, 468, 487",
      /* 37810 */ "468, 468, 468, 468, 468, 510, 468, 510, 510, 510, 510, 535, 510, 510, 510, 510, 510, 510, 510, 510",
      /* 37830 */ "535, 535, 535, 535, 535, 535, 535, 553, 553, 562, 53494, 53494, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0",
      /* 37853 */ "258469, 258469, 258469, 258469, 258469, 258469, 258469, 258469, 258469, 258469, 258469, 258469",
      /* 37865 */ "258469, 258469, 258469, 258469, 702, 400, 400, 400, 400, 400, 718, 400, 400, 400, 400, 400, 400",
      /* 37882 */ "400, 400, 400, 1415, 400, 400, 400, 0, 0, 0, 0, 0, 742, 0, 0, 0, 0, 0, 0, 0, 0, 0, 756, 0, 742, 0",
      /* 37908 */ "756, 798, 496, 496, 496, 496, 496, 821, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1780, 0, 0, 0",
      /* 37929 */ "0, 0, 1520, 496, 496, 496, 756, 0, 496, 0, 520, 520, 858, 520, 520, 520, 520, 520, 881, 0, 858, 520",
      /* 37951 */ "798, 496, 496, 821, 496, 496, 496, 496, 0, 858, 520, 520, 881, 941, 0, 0, 943, 0, 0, 0, 0, 0, 0, 0",
      /* 37975 */ "0, 0, 953, 0, 0, 0, 0, 520, 520, 520, 520, 1797, 520, 1799, 520, 520, 520, 1802, 520, 998, 0, 0, 0",
      /* 37998 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2076, 1064, 400, 1066, 400, 400, 400, 400, 400, 400, 400, 400",
      /* 38022 */ "400, 1073, 400, 400, 400, 400, 400, 2097, 400, 400, 400, 400, 0, 0, 0, 2102, 0, 0, 0, 1091, 1110, 0",
      /* 38044 */ "0, 0, 0, 400, 400, 400, 1073, 400, 400, 400, 400, 400, 400, 716, 400, 400, 400, 400, 400, 400, 400",
      /* 38065 */ "400, 400, 1703, 400, 0, 0, 0, 0, 0, 496, 496, 1147, 496, 496, 1151, 496, 496, 496, 496, 496, 496",
      /* 38086 */ "496, 496, 496, 496, 1468, 496, 496, 496, 496, 496, 496, 496, 496, 1162, 496, 496, 496, 496, 496",
      /* 38105 */ "496, 496, 496, 496, 496, 496, 496, 1757, 496, 496, 496, 520, 1219, 520, 520, 520, 520, 520, 520",
      /* 38124 */ "520, 520, 520, 520, 520, 520, 520, 1230, 0, 520, 520, 496, 496, 496, 1162, 496, 496, 496, 496, 520",
      /* 38144 */ "520, 520, 1230, 520, 520, 520, 1832, 520, 520, 520, 1835, 520, 520, 520, 1839, 520, 520, 520, 520",
      /* 38163 */ "520, 1808, 1809, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1240, 520, 520, 520, 520, 520, 0",
      /* 38183 */ "1301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1721, 400, 1345, 0, 0, 0, 1349, 0, 0, 0, 1352, 0, 0",
      /* 38211 */ "0, 0, 0, 0, 0, 291, 0, 0, 0, 0, 0, 0, 0, 0, 496, 2439, 496, 496, 496, 2443, 496, 496, 0, 1620, 0, 0",
      /* 38237 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1888, 0, 0, 0, 0, 0, 1073152, 0, 0, 0, 1635, 0, 0, 0, 0, 0, 0",
      /* 38266 */ "0, 337, 292, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 1710, 0, 0, 0, 0, 0, 0, 0",
      /* 38294 */ "966656, 0, 0, 0, 0, 0, 400, 0, 496, 496, 496, 496, 496, 2413, 496, 2415, 496, 496, 496, 496, 496",
      /* 38315 */ "1476, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 0, 0, 0, 0, 0, 1520, 1772, 496, 1774, 496",
      /* 38336 */ "496, 496, 496, 496, 496, 496, 1781, 0, 0, 0, 0, 1520, 520, 520, 520, 520, 520, 520, 520, 520, 520",
      /* 38357 */ "520, 520, 1536, 520, 520, 520, 0, 0, 2176, 0, 0, 0, 0, 0, 0, 2180, 0, 0, 0, 0, 0, 1706, 0, 0, 0, 0",
      /* 38383 */ "0, 1718, 0, 0, 0, 400, 400, 400, 400, 400, 0, 0, 400, 0, 2373, 496, 496, 496, 0, 0, 0, 0, 1794, 520",
      /* 38407 */ "520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 2429, 0, 2431, 0, 496, 520, 496, 496, 496",
      /* 38427 */ "496, 496, 967152, 1073648, 520, 520, 520, 520, 520, 967176, 1073672, 0, 1288, 0, 1294, 0, 0, 0, 0",
      /* 38446 */ "0, 0, 0, 0, 0, 0, 0, 0, 200704, 267, 268, 0, 0, 692224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 38474 */ "1913, 0, 0, 770048, 0, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 975344, 496",
      /* 38494 */ "496, 496, 496, 1974, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1769, 496",
      /* 38513 */ "496, 496, 2017, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1583",
      /* 38532 */ "520, 496, 520, 520, 2152, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1841",
      /* 38551 */ "520, 520, 2160, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 496, 496, 496, 520, 520",
      /* 38571 */ "520, 0, 2285, 0, 0, 0, 0, 2303, 0, 0, 0, 0, 400, 400, 400, 400, 400, 400, 2312, 0, 0, 0, 0, 1435, 0",
      /* 38596 */ "0, 0, 0, 0, 400, 400, 400, 400, 400, 400, 400, 400, 1692, 400, 400, 400, 0, 0, 0, 0, 909312, 0, 400",
      /* 38619 */ "909712, 400, 2316, 496, 496, 496, 496, 496, 496, 1494, 496, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 38638 */ "496, 2330, 496, 496, 496, 496, 496, 520, 2348, 520, 520, 520, 520, 520, 520, 496, 909808, 520",
      /* 38656 */ "909832, 2355, 0, 0, 2357, 807408, 807432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2091, 400, 520",
      /* 38680 */ "520, 2509, 520, 520, 0, 2512, 0, 0, 0, 0, 0, 0, 496, 2518, 496, 496, 496, 496, 1462, 496, 496, 496",
      /* 38702 */ "496, 496, 496, 496, 496, 1470, 496, 496, 496, 496, 496, 1977, 496, 496, 496, 496, 496, 496, 496",
      /* 38721 */ "496, 496, 496, 0, 0, 1785, 0, 0, 1520, 0, 349, 0, 0, 0, 0, 349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1636, 0",
      /* 38748 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 307, 0, 0, 0, 414, 414, 414, 414, 414, 432, 432",
      /* 38774 */ "432, 432, 432, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 478, 456, 456",
      /* 38794 */ "456, 483, 456, 488, 456, 456, 456, 456, 456, 511, 456, 511, 511, 511, 511, 536, 511, 511, 511, 511",
      /* 38814 */ "511, 511, 511, 511, 536, 536, 536, 536, 536, 536, 536, 554, 554, 563, 53494, 53494, 2, 2, 3, 94212",
      /* 38834 */ "5, 6, 0, 0, 0, 0, 0, 270336, 270336, 0, 0, 0, 0, 0, 0, 270336, 0, 0, 0, 596, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 38862 */ "0, 0, 0, 608, 609, 610, 0, 0, 0, 661, 0, 0, 0, 0, 0, 0, 576, 661, 0, 670, 671, 576, 739, 0, 744, 0",
      /* 38888 */ "0, 0, 766, 0, 0, 0, 0, 576, 0, 0, 766, 576, 0, 0, 0, 766, 0, 0, 400, 400, 400, 400, 400, 400, 727",
      /* 38913 */ "400, 400, 400, 400, 400, 967056, 1727, 400, 400, 1073552, 0, 0, 0, 0, 1732, 496, 0, 766, 0, 788, 0",
      /* 38934 */ "744, 790, 0, 0, 0, 0, 0, 788, 0, 0, 496, 496, 496, 496, 1492, 1493, 496, 496, 496, 496, 496, 496",
      /* 38956 */ "496, 496, 496, 496, 0, 0, 0, 0, 1787, 1520, 799, 496, 496, 496, 496, 816, 822, 824, 496, 496, 496",
      /* 38977 */ "496, 496, 838, 496, 496, 496, 496, 813, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1499",
      /* 38997 */ "496, 496, 496, 496, 496, 496, 496, 576, 0, 496, 0, 520, 520, 859, 520, 520, 520, 520, 876, 882, 884",
      /* 39018 */ "520, 520, 520, 520, 520, 898, 520, 520, 520, 520, 520, 799, 496, 0, 0, 0, 853, 91311, 1133, 856",
      /* 39038 */ "520, 520, 520, 520, 520, 520, 520, 1216, 0, 859, 520, 799, 496, 496, 822, 496, 838, 496, 496, 0",
      /* 39058 */ "859, 520, 520, 882, 520, 898, 520, 520, 53494, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1675, 0, 0, 0, 0, 0",
      /* 39084 */ "0, 0, 0, 957, 0, 0, 0, 0, 0, 0, 963, 0, 0, 966, 0, 0, 0, 0, 0, 286720, 286720, 286720, 286720",
      /* 39107 */ "286720, 0, 0, 0, 0, 0, 286720, 0, 0, 985, 986, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2113536, 0, 0, 0",
      /* 39134 */ "0, 1032, 0, 0, 0, 0, 0, 1037, 0, 0, 0, 0, 0, 0, 0, 0, 1093, 0, 0, 0, 0, 1097, 1098, 0, 986, 1103, 0",
      /* 39161 */ "1111, 0, 985, 1114, 1115, 400, 400, 1118, 400, 400, 400, 400, 400, 400, 1069, 400, 400, 400, 400",
      /* 39180 */ "400, 400, 400, 400, 400, 1417, 400, 400, 0, 0, 0, 0, 400, 1125, 400, 0, 765952, 0, 0, 0, 0, 0, 966",
      /* 39203 */ "1133, 496, 496, 1137, 496, 496, 496, 496, 1508, 496, 496, 496, 496, 496, 496, 0, 0, 1520, 91311, 0",
      /* 39223 */ "0, 0, 0, 1304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2179694, 2179694, 2179694, 0, 0, 496, 496, 496",
      /* 39246 */ "1163, 496, 496, 1166, 496, 496, 496, 496, 496, 496, 496, 496, 496, 2126, 496, 496, 496, 496, 496",
      /* 39265 */ "496, 1177, 1178, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1194, 520, 520",
      /* 39284 */ "1234, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1245, 1246, 520, 520, 520, 520, 2153, 520, 520",
      /* 39303 */ "520, 520, 520, 520, 520, 520, 520, 520, 2159, 0, 520, 520, 1268, 496, 496, 1271, 496, 496, 496, 496",
      /* 39323 */ "1276, 520, 520, 1279, 520, 520, 520, 2006, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520",
      /* 39342 */ "520, 798, 496, 0, 0, 0, 0, 1302, 1303, 0, 0, 0, 0, 0, 1309, 0, 0, 0, 0, 0, 0, 0, 1855, 0, 0, 0, 0",
      /* 39369 */ "0, 0, 0, 0, 1308, 0, 0, 0, 0, 0, 1312, 0, 1409, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400",
      /* 39392 */ "400, 0, 1420, 1421, 0, 0, 0, 0, 1609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163840, 163840, 163840",
      /* 39415 */ "163840, 163840, 0, 0, 1424, 0, 0, 0, 0, 0, 0, 0, 1430, 0, 1430, 1420, 0, 0, 0, 0, 520, 520, 1796",
      /* 39438 */ "520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 907, 520, 496, 496, 0, 0, 0, 1433, 0, 0, 0, 1436",
      /* 39460 */ "0, 0, 0, 0, 400, 400, 1442, 400, 400, 400, 400, 1068, 400, 400, 400, 400, 400, 400, 400, 400, 400",
      /* 39481 */ "400, 400, 0, 0, 0, 1088, 0, 1445, 400, 400, 400, 400, 400, 0, 0, 0, 0, 0, 0, 1133, 496, 496, 496",
      /* 39504 */ "496, 496, 1509, 496, 496, 1512, 496, 496, 0, 0, 1520, 91311, 0, 496, 1459, 496, 496, 496, 496, 496",
      /* 39524 */ "496, 496, 496, 496, 496, 496, 496, 496, 1472, 1520, 520, 520, 520, 520, 1529, 520, 520, 520, 520",
      /* 39543 */ "520, 520, 520, 520, 520, 520, 520, 1826, 520, 520, 520, 1830, 520, 520, 1573, 1574, 520, 520, 520",
      /* 39562 */ "520, 520, 520, 520, 520, 520, 520, 520, 496, 496, 520, 520, 0, 0, 2356, 0, 1598, 520, 520, 0, 0, 0",
      /* 39584 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2441216, 2158592, 2158592, 1641, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 39608 */ "0, 0, 0, 0, 0, 0, 2300, 0, 0, 0, 0, 1659, 0, 0, 0, 0, 0, 0, 0, 577536, 0, 0, 1665, 0, 0, 1711, 0",
      /* 39635 */ "1713, 0, 1714, 0, 0, 0, 0, 0, 0, 0, 0, 400, 400, 400, 0, 2317, 496, 496, 496, 496, 496, 496, 496",
      /* 39658 */ "496, 1750, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1968, 496, 496, 496, 496",
      /* 39677 */ "1773, 496, 496, 496, 1777, 496, 496, 496, 496, 0, 0, 0, 1786, 0, 1520, 520, 520, 520, 520, 520, 520",
      /* 39698 */ "520, 520, 520, 1534, 520, 520, 520, 520, 520, 520, 1256, 520, 520, 520, 520, 520, 520, 496, 1265, 0",
      /* 39718 */ "0, 0, 1792, 0, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1801, 520, 520, 520, 520, 2263, 520",
      /* 39738 */ "520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1549, 520, 520, 1553, 1804, 520, 520, 520",
      /* 39757 */ "520, 520, 520, 520, 520, 1812, 520, 520, 520, 520, 520, 520, 520, 903, 520, 520, 520, 520, 496, 496",
      /* 39777 */ "0, 0, 1863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 1040384, 0, 0, 1948, 496, 496, 496",
      /* 39803 */ "496, 1952, 496, 496, 496, 496, 496, 496, 496, 2125, 496, 496, 496, 496, 496, 496, 496, 496, 2134",
      /* 39822 */ "496, 496, 496, 496, 496, 496, 496, 496, 1479, 496, 496, 1483, 496, 496, 496, 496, 496, 496, 496",
      /* 39841 */ "1961, 496, 496, 496, 1964, 1965, 496, 496, 496, 496, 496, 496, 496, 2252, 496, 496, 496, 496, 520",
      /* 39860 */ "520, 520, 520, 1972, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 39879 */ "2333, 496, 0, 1991, 520, 520, 520, 520, 1995, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520",
      /* 39898 */ "1227, 520, 520, 520, 520, 520, 520, 2004, 520, 520, 520, 2007, 2008, 520, 520, 520, 520, 520, 520",
      /* 39917 */ "520, 2015, 520, 520, 520, 2020, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1243",
      /* 39936 */ "520, 520, 520, 413696, 2040, 0, 0, 2043, 2044, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1637, 0, 0, 0, 0, 0",
      /* 39961 */ "2077, 0, 0, 0, 0, 0, 0, 2084, 0, 0, 0, 2088, 0, 0, 0, 400, 0, 496, 496, 496, 496, 2412, 496, 496",
      /* 39985 */ "496, 496, 496, 496, 496, 1511, 496, 496, 496, 0, 0, 1520, 91311, 0, 400, 400, 2095, 400, 400, 400",
      /* 40005 */ "400, 400, 400, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 40028 */ "520, 0, 0, 0, 0, 1064960, 400, 400, 400, 400, 400, 0, 496, 496, 496, 496, 496, 496, 2523, 520, 520",
      /* 40049 */ "520, 520, 520, 520, 520, 520, 0, 2119, 496, 2121, 496, 496, 496, 2124, 496, 496, 496, 496, 496, 496",
      /* 40069 */ "496, 496, 496, 2255, 496, 496, 520, 520, 2260, 520, 2140, 496, 0, 0, 0, 0, 520, 520, 520, 520, 520",
      /* 40090 */ "2146, 520, 2148, 520, 520, 520, 520, 2264, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 2273",
      /* 40109 */ "520, 2151, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 2158, 520, 520, 0",
      /* 40129 */ "2208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 400, 400, 400, 400, 1946, 400, 2287, 0, 0, 0, 0, 0, 2291, 0",
      /* 40154 */ "0, 0, 0, 0, 0, 0, 0, 0, 1857, 0, 1859, 0, 0, 1862, 0, 0, 2313, 0, 0, 0, 471040, 400, 400, 400, 0",
      /* 40179 */ "496, 496, 496, 496, 496, 496, 496, 496, 2501, 496, 520, 520, 520, 520, 520, 520, 520, 2349, 520",
      /* 40198 */ "520, 520, 520, 520, 496, 496, 520, 520, 0, 0, 0, 0, 0, 0, 2105344, 264, 21054, 0, 0, 0, 0, 0, 0, 0",
      /* 40222 */ "0, 1941, 400, 400, 400, 400, 400, 400, 400, 400, 1931, 0, 0, 0, 0, 0, 0, 0, 0, 2072, 0, 0, 0, 0, 0",
      /* 40247 */ "0, 0, 0, 2085, 0, 0, 0, 0, 0, 0, 400, 400, 400, 0, 496, 496, 496, 496, 2320, 2321, 0, 0, 0, 0, 2360",
      /* 40272 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 0, 0, 0, 0, 0, 0, 2369, 0, 0, 400, 400, 400, 400, 400",
      /* 40299 */ "0, 0, 400, 0, 496, 496, 496, 496, 496, 496, 2414, 496, 496, 496, 496, 496, 2374, 496, 496, 496, 496",
      /* 40320 */ "496, 496, 496, 496, 496, 2382, 496, 496, 496, 520, 520, 496, 496, 496, 496, 496, 496, 496, 1593",
      /* 40339 */ "520, 520, 520, 520, 520, 520, 520, 1810, 520, 520, 1813, 520, 520, 520, 520, 520, 520, 520, 1822",
      /* 40358 */ "520, 520, 520, 520, 520, 1828, 520, 520, 520, 520, 2386, 520, 520, 520, 520, 520, 520, 520, 520",
      /* 40377 */ "520, 2394, 520, 520, 520, 520, 1235, 520, 520, 1237, 520, 1239, 520, 520, 520, 520, 520, 520, 520",
      /* 40396 */ "520, 2024, 520, 520, 520, 520, 520, 520, 520, 520, 905, 520, 520, 520, 496, 496, 0, 0, 496, 496",
      /* 40416 */ "496, 2521, 2522, 496, 520, 520, 520, 520, 520, 520, 2527, 2528, 520, 0, 0, 0, 0, 1622, 1623, 1624",
      /* 40436 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 1627, 0, 0, 0, 0, 1630, 0, 0, 2530, 2531, 0, 496, 496, 496, 496, 496",
      /* 40461 */ "496, 520, 520, 520, 520, 520, 520, 520, 520, 2342, 520, 520, 520, 520, 520, 520, 520, 2564, 496",
      /* 40480 */ "520, 496, 520, 496, 520, 496, 520, 0, 0, 0, 0, 0, 0, 0, 1882, 0, 0, 0, 0, 0, 1887, 0, 0, 0, 0, 309",
      /* 40506 */ "0, 0, 0, 0, 0, 0, 0, 0, 309, 0, 0, 45056, 49152, 0, 309, 0, 0, 40960, 0, 0, 0, 0, 0, 389, 0, 0, 0",
      /* 40533 */ "415, 415, 415, 415, 415, 433, 433, 433, 440, 440, 457, 457, 457, 433, 433, 433, 433, 433, 433, 457",
      /* 40553 */ "457, 433, 433, 433, 440, 433, 457, 479, 433, 433, 433, 433, 457, 433, 489, 489, 489, 489, 489, 512",
      /* 40573 */ "489, 512, 512, 512, 512, 537, 512, 512, 512, 512, 512, 512, 512, 512, 537, 537, 537, 537, 537, 537",
      /* 40593 */ "537, 512, 512, 537, 53494, 53494, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 892928, 0, 0, 0, 0, 0, 0, 0",
      /* 40618 */ "0, 0, 0, 679, 0, 0, 0, 0, 0, 0, 0, 653, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 496, 0, 496, 496, 496",
      /* 40647 */ "496, 0, 942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2293, 2294, 0, 0, 1033, 0, 1034, 0, 0, 0, 0",
      /* 40675 */ "0, 0, 1034, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1664, 0, 0, 0, 0, 0, 496, 1143, 496, 496, 496, 496, 496",
      /* 40701 */ "496, 496, 496, 496, 496, 496, 496, 496, 496, 2385, 520, 1195, 0, 0, 0, 853, 91311, 1133, 856, 520",
      /* 40721 */ "520, 520, 520, 520, 1211, 520, 520, 520, 520, 2278, 520, 520, 496, 496, 496, 520, 520, 520, 0, 0, 0",
      /* 40742 */ "0, 0, 724992, 1350, 0, 0, 0, 0, 0, 0, 0, 1358, 0, 0, 520, 520, 496, 496, 1143, 496, 496, 496, 496",
      /* 40765 */ "496, 520, 520, 1211, 520, 520, 520, 520, 2388, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520",
      /* 40784 */ "520, 520, 2013, 520, 520, 520, 1539, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1547, 520, 520",
      /* 40803 */ "520, 520, 520, 520, 2390, 520, 2391, 2392, 520, 520, 520, 520, 520, 520, 520, 520, 2010, 520, 520",
      /* 40822 */ "520, 520, 520, 520, 520, 520, 1811, 520, 520, 520, 520, 520, 520, 520, 520, 1562, 1563, 520, 520",
      /* 40841 */ "520, 520, 520, 520, 520, 520, 1556, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1566, 520, 520",
      /* 40860 */ "520, 520, 1575, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 496, 496, 520, 520, 0, 0, 0, 0, 0",
      /* 40882 */ "0, 0, 1793, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 1803, 0, 0, 0, 0, 1853, 0, 0, 0",
      /* 40905 */ "0, 0, 0, 0, 0, 0, 0, 0, 172032, 172032, 172032, 172032, 172032, 0, 2184, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 40929 */ "0, 0, 0, 0, 0, 2299, 0, 496, 496, 496, 2377, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 520",
      /* 40951 */ "520, 496, 496, 1589, 496, 496, 1591, 496, 496, 520, 520, 1596, 520, 520, 520, 520, 520, 2510, 520",
      /* 40970 */ "0, 0, 0, 0, 0, 0, 0, 0, 496, 496, 496, 496, 496, 2471, 496, 496, 496, 496, 520, 0, 0, 360, 0, 0, 0",
      /* 40995 */ "0, 0, 0, 0, 0, 360, 0, 0, 45056, 49152, 0, 360, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 400",
      /* 41021 */ "1061, 400, 400, 400, 400, 400, 400, 0, 342, 0, 0, 0, 0, 0, 0, 0, 0, 513, 0, 513, 513, 513, 513, 538",
      /* 41045 */ "513, 513, 513, 513, 513, 513, 513, 513, 538, 538, 538, 538, 538, 538, 538, 513, 513, 538, 53494",
      /* 41064 */ "53494, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 1094066, 1094066, 1094066, 1094066, 1094066, 1094066",
      /* 41082 */ "1094066, 1094066, 1094066, 1094066, 1094066, 1094066, 1094066, 1094066, 1094066, 1094066, 496, 496",
      /* 41094 */ "496, 810, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 2332, 496, 496, 496, 400",
      /* 41113 */ "1065, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 1704, 0, 0, 0, 0, 0, 0",
      /* 41135 */ "0, 1088, 0, 0, 0, 0, 400, 400, 400, 400, 400, 400, 400, 400, 400, 1693, 1694, 400, 496, 496, 496",
      /* 41156 */ "1148, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 2384, 496, 520, 520, 496, 496",
      /* 41175 */ "496, 1164, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 2383, 496, 496, 520, 520, 0",
      /* 41195 */ "520, 520, 496, 496, 496, 1164, 496, 496, 496, 496, 520, 520, 520, 1232, 520, 520, 520, 2174, 0, 0",
      /* 41215 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1058, 400, 400, 400, 0, 1423, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 41244 */ "0, 45056, 49152, 0, 0, 0, 382, 40960, 382, 382, 0, 382, 382, 312, 382, 0, 382, 416, 416, 416, 416",
      /* 41265 */ "416, 0, 0, 0, 0, 0, 458, 458, 458, 458, 458, 458, 458, 469, 458, 458, 458, 458, 458, 458, 480, 458",
      /* 41287 */ "458, 458, 458, 469, 458, 490, 490, 490, 494, 490, 514, 490, 514, 514, 514, 514, 539, 514, 514, 514",
      /* 41307 */ "514, 514, 514, 514, 514, 539, 539, 539, 539, 539, 539, 539, 555, 555, 564, 53494, 53494, 2, 2, 3",
      /* 41327 */ "94212, 5, 6, 0, 0, 0, 0, 0, 1105920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 625, 0, 0, 0, 0, 0, 0, 520, 520",
      /* 41355 */ "496, 496, 496, 496, 496, 839, 496, 496, 0, 520, 520, 520, 520, 520, 2022, 520, 520, 520, 520, 520",
      /* 41375 */ "520, 520, 520, 520, 2028, 520, 899, 520, 520, 53494, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1897, 0, 0, 0",
      /* 41400 */ "0, 0, 0, 496, 496, 496, 496, 1962, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 655856",
      /* 41420 */ "496, 1969, 496, 1971, 520, 520, 2005, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520",
      /* 41439 */ "520, 2168, 496, 496, 540, 515, 515, 515, 515, 515, 515, 515, 515, 540, 540, 540, 540, 540, 540, 540",
      /* 41459 */ "515, 515, 540, 53494, 53494, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592",
      /* 41478 */ "2527232, 2158592, 2158592, 2600960, 2158592, 2695168, 2158592, 2158592, 0, 0, 0, 628, 0, 0, 0, 0, 0",
      /* 41495 */ "0, 0, 0, 0, 0, 0, 0, 270336, 0, 0, 0, 0, 657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225280",
      /* 41524 */ "0, 737, 0, 0, 0, 0, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 1416, 400, 400, 1419, 0, 0, 0",
      /* 41547 */ "0, 496, 496, 496, 811, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 1967, 496, 496",
      /* 41567 */ "496, 496, 496, 0, 0, 972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 316, 316, 0, 0, 0, 0, 1645, 0, 0, 0, 0, 0",
      /* 41595 */ "0, 0, 0, 0, 0, 1654, 0, 999, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 233472, 0, 0, 0, 1016, 0, 0",
      /* 41624 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1029, 1789, 0, 0, 0, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520",
      /* 41649 */ "520, 520, 1263, 496, 496, 0, 579, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1019904, 0, 520, 520",
      /* 41675 */ "496, 496, 496, 496, 496, 496, 843, 496, 0, 520, 520, 520, 520, 520, 2154, 520, 520, 520, 520, 520",
      /* 41695 */ "520, 520, 520, 520, 520, 520, 1548, 520, 520, 520, 520, 520, 520, 903, 520, 53494, 2, 6, 0, 0, 0, 0",
      /* 41717 */ "0, 0, 0, 0, 0, 2058, 0, 0, 0, 0, 2063, 0, 496, 1489, 496, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 41740 */ "496, 496, 496, 496, 496, 2127, 496, 496, 496, 496, 496, 1520, 520, 520, 520, 520, 520, 520, 520",
      /* 41759 */ "520, 1533, 520, 520, 520, 520, 520, 520, 520, 1224, 520, 520, 520, 520, 520, 520, 520, 520, 520",
      /* 41778 */ "520, 2011, 520, 520, 520, 520, 520, 1747, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496",
      /* 41797 */ "496, 496, 496, 496, 2136, 496, 496, 496, 496, 496, 1843, 1844, 496, 496, 496, 496, 496, 496, 496",
      /* 41816 */ "520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 0, 0, 0, 0, 0, 2514, 2515, 0, 496, 496, 496, 0",
      /* 41838 */ "1877, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245760, 0, 496, 496, 496, 1986, 0, 0, 0, 0, 0, 0, 0",
      /* 41866 */ "0, 0, 0, 0, 0, 2179695, 151552, 2179695, 0, 0, 520, 2029, 496, 520, 496, 496, 496, 496, 520, 520",
      /* 41886 */ "520, 520, 0, 0, 0, 0, 0, 0, 2105344, 572, 573, 0, 0, 0, 0, 0, 0, 0, 0, 1856, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 41914 */ "1896, 0, 0, 1899, 0, 0, 0, 0, 0, 0, 0, 2210, 0, 0, 0, 0, 0, 0, 0, 400, 400, 400, 400, 400, 400, 400",
      /* 41940 */ "400, 1123, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 397, 0, 400, 400, 1399, 400, 400, 400, 400, 400",
      /* 41964 */ "400, 1405, 400, 400, 400, 400, 400, 400, 1081, 400, 400, 400, 400, 0, 0, 0, 0, 0, 0, 0, 0, 1133",
      /* 41986 */ "496, 496, 496, 496, 1085440, 316, 0, 0, 1085440, 0, 0, 0, 0, 0, 1085440, 0, 0, 0, 0, 0, 1085440, 0",
      /* 42008 */ "1085440, 0, 0, 0, 1085440, 1085811, 1085811, 0, 0, 1085440, 0, 0, 1085440, 0, 0, 0, 0, 0, 1085440",
      /* 42027 */ "0, 0, 0, 0, 0, 0, 2105344, 21051, 265, 0, 0, 0, 0, 0, 0, 0, 0, 1674, 0, 0, 0, 0, 0, 0, 1681, 0, 0",
      /* 42054 */ "0, 0, 1085811, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1085440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1085440",
      /* 42081 */ "0, 1085440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290816, 0, 0, 1085440, 1085440, 0, 0, 0, 0, 0",
      /* 42107 */ "0, 0, 0, 0, 0, 0, 0, 1085440, 0, 0, 0, 0, 0, 1085440, 1085440, 1085440, 0, 0, 0, 1085440, 1085440",
      /* 42128 */ "0, 0, 0, 2, 4263936, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 2158592, 2813952, 2158592, 2158592, 2158592, 0",
      /* 42148 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 912",
      /* 42159 */ "2162688, 2162688, 2162688, 2162688, 0, 0, 0, 307200, 0, 0, 2105344, 264, 265, 0, 0, 0, 0, 0, 0, 0",
      /* 42179 */ "618, 619, 620, 0, 316, 316, 316, 0, 0, 0, 0, 1089536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 42204 */ "3088384, 0, 57344, 0, 0, 2162688, 2162688, 2162688, 0, 0, 2163541, 0, 2162688, 2163544, 2162688",
      /* 42219 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 42230 */ "2162688, 2162688, 245760, 0, 2162688, 2162688, 2162688, 2162688, 0, 4263936, 6, 0, 0, 0, 0, 0, 0, 0",
      /* 42248 */ "2441216, 2449408, 2162688, 2162688, 2162688, 4263936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1884, 0",
      /* 42268 */ "0, 0, 0, 0, 1093632, 0, 1093632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1898, 0, 0, 0, 0, 0",
      /* 42294 */ "1094066, 1094066, 1094066, 1094066, 1094066, 1094066, 1094066, 1094066, 1094066, 1094066, 0",
      /* 42305 */ "1094066, 0, 0, 0, 0, 0, 0, 2106007, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1102198, 1102198, 1102198",
      /* 42326 */ "1102198, 1102198, 1102198, 0, 0, 1094066, 1094066, 1094066, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0",
      /* 42346 */ "0, 2158592, 2813952, 2158592, 2158592, 2158592, 0, 2163484, 2163484, 2163484, 2163484, 2163484",
      /* 42358 */ "2499356, 2540316, 2544412, 2163484, 2163484, 2593564, 2163484, 2163484, 2163484, 2163484, 0",
      /* 42369 */ "1097728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3158016, 2158592, 0, 1101824, 0, 0, 0, 0, 0, 0",
      /* 42394 */ "0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 2049, 0, 1102198, 0, 0, 0, 372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 42423 */ "0, 2059, 0, 0, 0, 0, 0, 1102198, 1102198, 1102198, 1102198, 1102198, 1102198, 1102198, 1102198",
      /* 42438 */ "1102198, 1102198, 1102198, 1102198, 1102198, 1102198, 1102198, 1102198, 0, 1102198, 0, 0, 0, 0",
      /* 42452 */ "1101824, 374, 1102198, 1102198, 1102198, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 2379776, 0, 0",
      /* 42473 */ "0, 0, 0, 0, 0, 0, 0, 0, 268, 0, 0, 0, 0, 0, 0, 0, 0, 1110016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 42503 */ "131072, 0, 0, 0, 45056, 49152, 2162688, 0, 0, 0, 1198, 0, 0, 1201, 2162688, 2441216, 2449408",
      /* 42520 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3080192, 2162688, 2162688, 2162688, 2162688",
      /* 42531 */ "2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2441216, 2449408, 0, 0",
      /* 42550 */ "0, 0, 106496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 106496, 106496, 106496, 106496",
      /* 42573 */ "106496, 106496, 106496, 106496, 106496, 106496, 0, 106496, 0, 0, 0, 0, 0, 0, 2109440, 0, 0, 0, 0, 0",
      /* 42593 */ "0, 0, 0, 0, 0, 217088, 217088, 217088, 217088, 217088, 217088, 0, 0, 106496, 106496, 106496, 0, 0",
      /* 42611 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 0, 0, 0, 0, 0"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 42626; ++i) {TRANSITION[i] = Integer.parseInt(s2[i]);}
  }

  private static final int[] EXPECTED = new int[5787];
  static
  {
    final String s1[] =
    {
      /*    0 */ "91, 107, 123, 181, 197, 213, 229, 245, 431, 261, 277, 293, 461, 148, 310, 158, 1328, 1320, 137, 312",
      /*   20 */ "740, 328, 372, 388, 343, 417, 447, 504, 489, 534, 473, 550, 566, 582, 928, 1390, 1375, 1209, 598",
      /*   39 */ "614, 629, 645, 661, 677, 693, 1179, 865, 709, 725, 756, 772, 788, 804, 835, 851, 881, 897, 913, 959",
      /*   59 */ "1022, 1252, 975, 991, 819, 1007, 1164, 1038, 1133, 943, 1054, 1070, 1086, 1102, 1118, 1149, 1404",
      /*   76 */ "1282, 1195, 1225, 1241, 165, 1268, 1298, 1344, 518, 401, 356, 1360, 1420, 1310, 304, 1436, 1440",
      /*   93 */ "1442, 1442, 1442, 1446, 1442, 1442, 1450, 1454, 1458, 1462, 1466, 1470, 1474, 1478, 1482, 2078, 2078",
      /*  110 */ "2814, 2078, 2078, 1653, 1489, 1835, 3545, 1496, 2078, 2078, 3526, 2530, 1633, 1501, 1553, 1511, 1560",
      /*  127 */ "2078, 2078, 2734, 2078, 2078, 1519, 1529, 3641, 3545, 1534, 2078, 2078, 1569, 2078, 2078, 2078, 2078",
      /*  144 */ "2078, 2078, 2078, 2830, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2879, 2078, 2078, 2078",
      /*  161 */ "2078, 2078, 2078, 1567, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2837, 3556, 3568, 3575",
      /*  178 */ "3580, 3592, 3596, 1969, 1544, 1633, 1633, 1633, 1551, 1574, 1574, 1593, 1557, 1564, 2078, 2078, 2078",
      /*  195 */ "2078, 2616, 1522, 2078, 3544, 3546, 2078, 3525, 1606, 1633, 1633, 1633, 2213, 1573, 1574, 1574, 1575",
      /*  212 */ "1579, 1586, 2078, 2078, 2078, 2078, 1497, 2078, 1538, 1534, 1835, 1540, 1633, 1633, 1633, 1646, 1616",
      /*  229 */ "1574, 1574, 1574, 1590, 1566, 2078, 2078, 2078, 2078, 3543, 3547, 3542, 1546, 1633, 1633, 1613, 1573",
      /*  246 */ "1574, 1574, 1597, 2078, 2078, 2078, 1835, 1605, 1610, 1633, 1633, 1621, 1574, 1617, 1627, 1642, 1547",
      /*  263 */ "1574, 1661, 1644, 1623, 2211, 1650, 2373, 1514, 2374, 1515, 2399, 2398, 2398, 2387, 1659, 1667, 1671",
      /*  280 */ "1683, 1683, 1674, 1678, 1682, 1684, 1688, 1692, 1696, 1700, 1704, 1708, 1712, 3519, 3235, 2078, 2078",
      /*  297 */ "1716, 2078, 2078, 2078, 1791, 2078, 1836, 2078, 2078, 2078, 2078, 2078, 1491, 2078, 3224, 2078, 2078",
      /*  314 */ "2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 1758, 1767, 1773",
      /*  331 */ "2078, 2078, 2078, 2078, 2432, 1780, 3623, 1789, 2996, 1763, 1795, 1799, 2078, 1872, 3623, 1857, 2078",
      /*  348 */ "1864, 1869, 2078, 3659, 2078, 2078, 2078, 3658, 2078, 2078, 2078, 2284, 2078, 2078, 2078, 2027, 1785",
      /*  365 */ "2078, 2079, 2078, 2078, 2078, 2421, 2078, 2240, 1803, 2078, 1807, 1816, 3212, 2078, 2078, 2078, 2078",
      /*  382 */ "1915, 2078, 1820, 1826, 2042, 2431, 3703, 1831, 2078, 2260, 2078, 2078, 2257, 3393, 2078, 2078, 1840",
      /*  399 */ "1834, 1852, 2078, 2078, 2078, 2036, 3237, 3239, 2078, 2078, 2518, 2078, 2078, 2078, 3675, 2078, 3333",
      /*  416 */ "2520, 1879, 1834, 1883, 2078, 2078, 2078, 2140, 2078, 1822, 1525, 2078, 1833, 1889, 2078, 2078, 2078",
      /*  433 */ "1968, 1536, 1632, 1634, 1574, 1582, 2078, 2078, 3642, 1638, 1633, 1592, 1504, 2078, 2788, 2078, 2078",
      /*  450 */ "2078, 1485, 2230, 2078, 2078, 2078, 1895, 3583, 2293, 2525, 2303, 2078, 2078, 2242, 1783, 2917, 2078",
      /*  467 */ "2078, 2078, 2078, 2078, 2078, 3706, 2078, 2078, 2078, 2078, 1810, 2555, 2078, 2078, 3205, 2078, 1984",
      /*  484 */ "3021, 1991, 1995, 1998, 2002, 2017, 2078, 2832, 1943, 2409, 1933, 2078, 1942, 2078, 1947, 1827, 2850",
      /*  501 */ "2410, 1952, 1933, 2078, 1900, 2078, 2078, 2511, 1914, 2078, 2078, 2139, 1919, 2808, 1928, 2078, 2411",
      /*  518 */ "2078, 2078, 2518, 2078, 2078, 2078, 1948, 2078, 2078, 2078, 3428, 3663, 2078, 2078, 2078, 2037, 2019",
      /*  535 */ "3562, 1961, 1966, 2098, 1974, 1975, 1973, 1938, 1979, 3375, 1980, 3376, 1937, 2593, 2593, 2005, 2009",
      /*  552 */ "2078, 2014, 2078, 2078, 2026, 2872, 2078, 2504, 2965, 2035, 2994, 2032, 2267, 1761, 2066, 2041, 2380",
      /*  569 */ "2078, 2085, 2078, 2046, 2078, 2078, 2026, 2872, 2078, 2050, 2178, 2059, 1910, 2010, 2064, 2070, 1662",
      /*  586 */ "2076, 2078, 2078, 1663, 2077, 2078, 2078, 2083, 2918, 1812, 2078, 3354, 3073, 2234, 2201, 2246, 2250",
      /*  603 */ "2727, 2254, 2079, 2265, 3696, 2271, 2764, 1903, 2278, 1496, 2282, 2314, 3082, 2288, 2313, 2292, 2297",
      /*  620 */ "2301, 2307, 2311, 2318, 2322, 2327, 2323, 2328, 3501, 2332, 3089, 2078, 2078, 2078, 2497, 2078, 2078",
      /*  637 */ "2336, 2220, 3158, 2340, 2348, 2352, 2356, 2360, 2364, 2366, 2078, 2078, 2370, 2078, 2185, 2378, 2384",
      /*  654 */ "1860, 1909, 2391, 2078, 2395, 2403, 3559, 2415, 2426, 2078, 3683, 2770, 2762, 2078, 2115, 2078, 3617",
      /*  671 */ "2378, 2384, 1906, 2444, 2491, 2430, 2861, 3240, 1769, 2436, 2450, 2455, 2078, 2078, 3106, 2456, 2078",
      /*  688 */ "3394, 2153, 2078, 2053, 1853, 2460, 3116, 1859, 2468, 2474, 3202, 3588, 2479, 2485, 2078, 3101, 2490",
      /*  705 */ "2078, 2078, 3100, 2489, 2560, 2078, 2078, 3671, 2739, 2078, 2197, 2100, 2565, 2569, 2599, 3517, 2078",
      /*  722 */ "2574, 2078, 2470, 2598, 2078, 2550, 2580, 2570, 2582, 2078, 2962, 2078, 2586, 2481, 2591, 2445, 2991",
      /*  739 */ "2576, 2078, 2274, 1724, 2827, 2078, 2078, 2797, 1730, 2078, 3064, 1734, 1738, 1742, 1746, 1750, 1754",
      /*  756 */ "2597, 2716, 2603, 3149, 3163, 2078, 3071, 1956, 1628, 2022, 1775, 2607, 1776, 2608, 2612, 2620, 2418",
      /*  773 */ "2439, 2442, 2078, 2078, 2078, 1848, 2078, 2723, 2624, 2629, 2543, 2633, 3290, 2637, 2640, 2644, 2648",
      /*  790 */ "2651, 2078, 2078, 2658, 2078, 2667, 2671, 2677, 1953, 1922, 3011, 2695, 2748, 2683, 2689, 2699, 3039",
      /*  807 */ "2078, 2703, 2707, 2715, 2078, 2720, 2078, 2667, 2671, 2677, 1957, 2731, 3636, 2983, 2475, 2095, 2988",
      /*  824 */ "2786, 2078, 3339, 2901, 2078, 2078, 3340, 2078, 3000, 2078, 3636, 2738, 2745, 2752, 1492, 2759, 2078",
      /*  841 */ "1600, 2078, 2078, 2078, 1601, 2078, 2768, 2078, 2802, 2774, 1875, 2780, 3623, 1948, 3189, 2078, 2792",
      /*  858 */ "2107, 2801, 2692, 2078, 1962, 2807, 2078, 2078, 2078, 2918, 2534, 2078, 2078, 2078, 2549, 2663, 2462",
      /*  875 */ "2542, 2446, 2547, 2554, 2078, 2919, 2806, 2078, 2812, 2078, 2078, 2818, 1875, 2824, 2078, 3170, 2078",
      /*  892 */ "3148, 2078, 1987, 2078, 2984, 2836, 2078, 2078, 2078, 2841, 2078, 2078, 2078, 2848, 2854, 2078, 3188",
      /*  909 */ "2733, 2078, 1874, 2694, 3676, 2796, 2078, 2078, 2422, 2078, 2078, 3195, 2188, 2831, 2865, 2078, 1986",
      /*  926 */ "2078, 2870, 2078, 2769, 3080, 2089, 2104, 2131, 2055, 2119, 2078, 2126, 2078, 2078, 2078, 2125, 2130",
      /*  943 */ "2078, 2146, 3142, 2679, 3120, 3153, 1720, 3132, 1896, 3162, 2072, 3167, 3174, 3178, 3183, 3193, 2422",
      /*  960 */ "2078, 2060, 2878, 2343, 2866, 2078, 2078, 2877, 2740, 2078, 2209, 2857, 2732, 2078, 2776, 2935, 2939",
      /*  977 */ "2941, 2945, 2078, 2078, 2950, 1891, 3382, 3053, 1873, 3026, 3586, 2237, 2078, 3478, 2955, 3411, 2959",
      /*  994 */ "2783, 2969, 2974, 2979, 2078, 2078, 3215, 1885, 3382, 3053, 2139, 2078, 3255, 3004, 3009, 3015, 2514",
      /* 1011 */ "2078, 3360, 2078, 3025, 2975, 3031, 3374, 2078, 3058, 3044, 3037, 2078, 2796, 2883, 2078, 2794, 2741",
      /* 1028 */ "3257, 2887, 2888, 2892, 3155, 3005, 2899, 2888, 2900, 2895, 3094, 3062, 2859, 2078, 2078, 3068, 2078",
      /* 1045 */ "3145, 2078, 3468, 3480, 3077, 3179, 1865, 2946, 3086, 3199, 3112, 3209, 3263, 3222, 3114, 3228, 3232",
      /* 1062 */ "3244, 3245, 3249, 3261, 3267, 3272, 3268, 3273, 3252, 1843, 1843, 3277, 3281, 2078, 2078, 2078, 2155",
      /* 1079 */ "2819, 2078, 3287, 3294, 3298, 3302, 3306, 3310, 3314, 3318, 3320, 2078, 2078, 2078, 3324, 3353, 3433",
      /* 1096 */ "3328, 3332, 3371, 2078, 3337, 3344, 2587, 3693, 3348, 3352, 3358, 3531, 2261, 3018, 2078, 2078, 2844",
      /* 1113 */ "3353, 3433, 3364, 3368, 1569, 2078, 3536, 3393, 3380, 3386, 2406, 2078, 2078, 3685, 3392, 2078, 2078",
      /* 1130 */ "3686, 2536, 2873, 2078, 2970, 3093, 3099, 2078, 3095, 3105, 3110, 3475, 3120, 3124, 1719, 3130, 3186",
      /* 1147 */ "1929, 3136, 2172, 3398, 2202, 3404, 3669, 3408, 2078, 2561, 3415, 3419, 2538, 2078, 2078, 2078, 2711",
      /* 1164 */ "2078, 3043, 2078, 3048, 2078, 2078, 2951, 3009, 3052, 3057, 1655, 3636, 2983, 3033, 1935, 2078, 2820",
      /* 1181 */ "2479, 2078, 2916, 1853, 2460, 3126, 1924, 2495, 2501, 2508, 2078, 2524, 3400, 2529, 3492, 2078, 3552",
      /* 1198 */ "3498, 2078, 2078, 3628, 3505, 2078, 3510, 3655, 3514, 2802, 2110, 2078, 2078, 3422, 2078, 2078, 2192",
      /* 1215 */ "2196, 2201, 2207, 2249, 2217, 2224, 2228, 2078, 3388, 1496, 3523, 2078, 2556, 3530, 3571, 3666, 1569",
      /* 1232 */ "1827, 2138, 2463, 3530, 2673, 2203, 3283, 3535, 3564, 2078, 3540, 2464, 2625, 2078, 2078, 3551, 2661",
      /* 1249 */ "2078, 3156, 3157, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 3466, 2078, 2905, 2894, 2909, 2913, 2923",
      /* 1266 */ "2927, 2931, 3600, 3603, 3607, 3611, 3615, 2078, 2078, 2078, 2685, 2078, 2078, 2078, 3621, 2020, 2078",
      /* 1283 */ "2078, 3450, 2078, 2078, 2078, 3454, 3458, 3464, 2078, 3472, 3484, 3488, 2078, 3494, 2113, 3627, 1726",
      /* 1300 */ "3632, 3648, 2078, 3640, 2028, 3708, 3635, 2078, 2078, 2516, 2078, 2078, 2078, 2078, 2078, 2614, 2078",
      /* 1317 */ "2078, 2078, 2614, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 1568, 2078, 2078, 2078, 2078, 2078, 2078",
      /* 1334 */ "2078, 2078, 1530, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 1954, 2078, 2078, 2078, 2078, 3646, 3652",
      /* 1351 */ "2078, 2078, 2469, 1524, 2078, 2078, 2344, 3237, 3239, 2653, 2078, 2078, 2078, 1846, 2078, 2078, 2078",
      /* 1368 */ "3680, 2078, 3690, 2078, 2020, 2078, 2654, 2078, 3138, 2171, 2078, 2078, 2121, 3218, 2078, 2273, 3460",
      /* 1385 */ "2176, 2092, 2163, 2182, 1507, 2078, 2162, 2078, 2135, 2078, 3354, 2871, 2451, 2144, 2150, 2725, 2159",
      /* 1402 */ "2078, 2167, 2078, 2078, 2710, 3506, 2873, 2078, 2469, 3426, 3432, 3437, 3441, 2078, 3576, 2755, 2537",
      /* 1419 */ "3445, 2078, 3680, 2078, 3446, 2078, 3700, 2078, 2021, 2078, 2078, 2078, 2078, 2078, 3027, 2078, 1955",
      /* 1436 */ "5282, 3712, 4529, 3719, 3726, 3730, 3760, 3760, 3760, 3760, 3736, 3732, 3760, 3760, 3761, 3740, 3760",
      /* 1453 */ "3760, 3749, 3760, 4435, 3755, 3759, 3765, 3760, 3767, 3771, 3775, 3789, 3791, 3781, 3795, 3787, 3784",
      /* 1470 */ "3777, 3790, 3797, 3801, 3805, 3809, 3813, 3819, 3815, 3823, 5283, 3713, 4527, 4438, 5703, 4529, 3751",
      /* 1487 */ "4529, 5663, 3842, 4621, 4529, 4529, 3844, 4529, 5210, 4725, 4529, 4529, 4529, 3896, 4333, 3849, 3857",
      /* 1504 */ "3852, 3852, 3891, 4529, 3827, 4646, 4650, 3862, 4332, 4333, 3852, 3852, 3928, 4529, 4331, 4529, 5049",
      /* 1521 */ "4529, 4150, 5125, 5556, 4529, 4529, 4529, 5713, 5126, 4529, 4529, 4529, 3954, 5697, 5697, 5698, 4529",
      /* 1538 */ "4529, 5697, 5697, 5697, 5699, 4330, 5698, 4529, 4669, 4332, 4332, 4332, 3891, 4672, 3876, 3852, 3852",
      /* 1555 */ "3852, 4334, 3887, 4332, 3890, 3852, 3867, 4678, 3952, 3909, 3950, 3950, 4529, 4529, 4529, 3955, 4529",
      /* 1572 */ "4529, 3882, 3852, 3852, 3852, 3852, 3883, 3892, 4332, 3890, 3852, 3883, 3891, 3928, 3853, 3950, 3950",
      /* 1589 */ "3951, 3902, 4332, 3908, 3852, 3852, 3852, 3903, 3863, 4332, 3852, 4529, 3827, 5216, 5202, 4529, 5697",
      /* 1606 */ "5697, 5699, 4529, 4332, 4529, 5696, 5622, 4332, 3913, 3915, 3879, 3852, 3852, 3852, 3889, 3919, 3881",
      /* 1623 */ "3852, 3852, 3852, 4529, 3858, 4529, 4529, 4529, 4013, 4331, 4332, 4332, 4332, 4332, 3852, 4529, 5695",
      /* 1640 */ "5623, 4332, 4224, 5697, 4225, 4332, 4332, 4332, 3904, 3914, 3891, 3852, 3852, 4529, 3832, 4529, 4529",
      /* 1657 */ "3837, 4621, 3863, 3925, 3927, 4529, 4529, 4529, 4085, 4541, 4705, 5549, 4359, 4050, 3973, 3935, 3945",
      /* 1674 */ "3950, 3950, 4441, 3939, 4006, 4425, 3992, 3943, 3949, 3950, 3950, 3950, 3950, 3972, 3967, 3971, 3985",
      /* 1691 */ "3984, 3985, 3977, 3981, 3989, 3995, 3999, 4003, 4017, 4020, 4030, 4024, 4034, 4042, 4038, 4037, 4027",
      /* 1708 */ "4030, 4216, 4048, 4054, 4057, 4061, 4065, 4044, 4529, 5132, 3745, 4529, 3838, 4529, 4529, 5172, 4626",
      /* 1725 */ "5064, 4529, 4529, 3963, 4529, 4116, 4825, 4127, 5602, 4518, 5342, 4136, 5172, 4149, 3898, 5347, 4991",
      /* 1742 */ "4158, 4160, 4164, 4167, 4171, 4180, 4174, 4180, 4178, 4181, 4185, 4187, 4191, 4191, 4194, 4198, 4200",
      /* 1759 */ "4204, 4208, 4529, 4078, 4529, 4529, 4239, 4234, 4626, 5071, 4529, 4529, 4009, 4529, 4553, 4276, 4529",
      /* 1776 */ "4529, 4011, 4529, 4364, 3872, 4529, 5348, 4529, 4096, 4529, 4529, 3960, 3957, 4879, 4222, 4529, 4529",
      /* 1793 */ "4076, 4529, 4246, 4529, 4529, 4072, 5212, 4529, 4588, 4223, 4529, 5160, 4529, 4255, 4260, 4265, 4270",
      /* 1810 */ "4529, 4098, 4102, 4106, 4617, 4529, 4269, 4529, 4529, 5642, 4529, 5703, 4529, 4878, 4934, 4529, 4280",
      /* 1827 */ "4529, 4529, 4529, 4152, 4071, 4529, 5175, 4668, 4529, 4529, 4529, 4224, 4082, 5253, 4305, 4668, 5175",
      /* 1844 */ "5429, 5293, 5553, 4529, 4529, 4529, 5782, 5194, 4312, 4529, 4529, 4529, 4225, 4877, 5590, 4529, 4529",
      /* 1861 */ "4122, 4529, 4529, 4233, 4529, 4529, 4529, 4250, 4317, 4529, 4529, 5662, 4153, 4529, 4529, 4529, 4226",
      /* 1878 */ "5719, 5251, 4338, 4668, 5175, 4132, 4313, 4529, 4529, 4143, 5172, 5023, 4662, 4529, 4529, 4144, 5172",
      /* 1895 */ "5337, 4529, 4529, 4529, 4285, 4529, 5024, 4083, 4529, 4119, 4733, 4529, 4122, 4529, 5459, 4529, 4529",
      /* 1912 */ "4673, 4468, 5020, 4529, 4529, 4529, 4307, 4350, 4617, 4529, 5719, 5130, 4529, 4091, 4528, 4529, 4893",
      /* 1929 */ "4529, 4529, 4529, 4319, 4529, 5024, 4617, 4529, 4671, 4529, 4670, 4529, 4529, 4371, 4529, 4529, 4529",
      /* 1946 */ "4350, 5019, 4529, 4529, 4529, 4363, 4894, 4529, 4529, 4529, 4364, 4529, 4529, 4364, 4626, 4346, 4529",
      /* 1963 */ "4529, 4529, 4461, 4344, 5187, 4529, 4529, 4224, 5697, 5697, 5021, 4529, 4529, 4672, 4529, 4529, 5021",
      /* 1980 */ "4529, 4671, 4529, 4669, 4378, 4984, 4529, 4529, 4227, 4529, 5390, 4382, 4388, 3722, 4392, 4393, 4397",
      /* 1997 */ "4405, 4405, 4403, 4405, 4405, 4401, 4409, 4413, 4415, 4415, 4415, 4415, 4419, 4529, 4529, 4529, 4474",
      /* 2014 */ "4099, 4103, 4591, 4529, 4132, 5021, 4529, 4529, 4529, 4365, 4529, 4363, 5006, 4529, 4529, 4529, 4485",
      /* 2031 */ "4529, 4472, 5447, 4077, 4459, 4529, 4529, 4529, 4486, 4529, 4492, 4529, 4529, 4529, 4497, 5704, 4101",
      /* 2048 */ "4105, 5398, 4429, 4529, 4503, 4607, 3714, 4529, 4529, 4585, 4529, 4592, 4529, 4529, 4529, 4525, 4077",
      /* 2065 */ "4524, 4529, 4529, 4283, 4085, 4535, 4077, 4529, 4529, 4286, 5412, 4541, 4545, 4529, 4529, 4529, 4529",
      /* 2082 */ "3827, 4092, 4529, 4092, 4529, 4529, 4496, 4529, 5574, 4529, 4498, 4242, 4654, 4529, 4138, 4617, 4529",
      /* 2099 */ "4144, 4529, 4529, 4224, 5701, 4241, 4557, 5398, 4529, 4151, 5255, 4529, 4152, 4529, 4150, 5667, 4529",
      /* 2116 */ "4529, 5614, 4529, 4481, 3714, 4674, 4529, 4675, 4529, 4529, 5234, 4646, 4596, 4560, 4560, 4529, 4529",
      /* 2133 */ "4529, 4572, 4099, 4103, 4107, 4529, 4152, 4529, 4529, 4529, 4308, 4526, 5572, 4529, 4529, 4320, 5407",
      /* 2150 */ "4119, 4242, 4632, 4529, 4218, 4529, 4529, 4576, 4580, 5557, 4529, 4639, 4673, 4529, 4673, 4529, 4529",
      /* 2167 */ "3827, 4645, 4649, 4600, 4598, 4529, 4529, 4529, 4574, 4525, 4607, 4997, 4529, 4119, 4515, 4481, 3714",
      /* 2184 */ "4676, 4529, 4224, 4677, 4529, 4225, 4529, 5186, 4673, 4673, 4529, 4100, 4104, 4529, 4529, 4529, 4608",
      /* 2201 */ "4529, 5551, 4529, 4529, 4529, 4609, 4529, 5178, 4529, 4526, 4529, 4529, 4332, 4332, 4333, 3921, 3825",
      /* 2218 */ "4529, 4675, 4529, 4226, 4750, 4759, 4693, 4529, 4529, 5438, 4648, 4724, 4529, 4529, 4357, 4529, 5704",
      /* 2235 */ "4701, 4709, 4529, 4248, 5174, 4529, 4256, 4529, 4529, 4089, 4529, 4529, 5178, 4526, 4608, 4529, 4529",
      /* 2252 */ "3826, 3825, 5704, 5440, 4723, 4529, 4294, 4529, 4290, 4084, 4529, 4529, 4367, 5441, 4724, 4529, 4529",
      /* 2269 */ "4478, 4635, 4606, 4529, 5550, 4529, 4529, 4529, 4602, 5251, 4529, 4529, 5675, 5704, 5676, 4529, 4529",
      /* 2286 */ "4487, 4529, 4731, 4529, 4529, 5674, 4738, 4529, 4529, 4529, 4617, 4603, 4529, 4609, 4497, 4753, 4739",
      /* 2303 */ "4529, 5022, 4372, 4529, 4739, 4529, 4626, 4605, 4609, 4669, 4740, 4529, 4529, 5704, 4604, 4938, 4529",
      /* 2320 */ "4626, 4703, 4529, 4939, 4529, 4937, 4725, 4725, 4529, 4703, 4529, 4746, 4669, 4529, 4671, 4608, 4227",
      /* 2337 */ "4529, 4529, 3953, 4678, 4769, 4297, 3956, 4529, 4529, 4626, 5556, 4123, 5262, 4776, 4778, 4782, 4786",
      /* 2354 */ "4788, 4792, 4796, 4798, 4798, 4803, 4798, 4804, 4799, 4808, 4810, 4814, 4814, 4814, 4816, 4820, 4529",
      /* 2371 */ "5612, 3714, 4529, 4331, 4332, 3890, 3852, 4904, 4909, 4529, 4529, 4491, 4529, 4529, 5185, 4915, 4529",
      /* 2388 */ "4332, 3852, 4330, 4697, 4529, 4626, 4830, 4843, 4529, 4627, 4529, 4332, 3891, 3852, 3858, 4327, 4626",
      /* 2405 */ "4850, 4529, 4341, 4154, 4617, 5718, 4529, 4529, 5023, 4894, 4864, 4529, 4881, 4529, 4365, 4012, 4363",
      /* 2422 */ "4529, 4529, 4529, 5774, 4726, 4876, 4228, 4886, 5242, 4234, 4529, 4529, 4529, 4213, 5766, 4529, 4209",
      /* 2439 */ "4529, 4365, 4012, 4364, 4013, 4529, 4529, 4673, 4697, 4529, 4529, 4898, 4529, 4529, 4529, 4620, 5522",
      /* 2456 */ "5241, 4839, 4529, 4529, 5702, 4903, 4908, 4529, 4529, 4529, 4711, 5689, 5458, 4529, 4529, 4529, 4626",
      /* 2473 */ "5511, 4696, 4529, 4529, 4529, 4627, 4529, 5042, 4529, 4529, 4607, 4529, 4529, 5043, 4529, 4765, 4919",
      /* 2490 */ "4927, 4529, 4529, 4529, 4656, 4011, 4668, 4529, 4529, 4607, 5615, 4529, 4931, 4616, 4529, 4429, 4529",
      /* 2507 */ "4445, 4529, 4943, 4617, 4529, 4432, 4668, 4668, 4641, 4529, 4529, 5142, 3960, 4529, 4529, 5145, 4529",
      /* 2524 */ "5176, 4529, 4529, 4529, 4667, 4975, 4529, 4529, 4529, 4669, 4948, 4973, 4084, 4529, 4529, 5175, 5290",
      /* 2541 */ "5719, 4952, 4529, 4527, 4529, 4529, 4529, 4960, 4529, 4529, 4610, 4529, 5011, 4852, 4617, 4529, 4529",
      /* 2558 */ "4529, 4463, 4974, 4529, 4529, 4529, 4727, 4979, 5250, 4529, 5184, 4360, 4529, 4529, 4695, 4529, 5510",
      /* 2575 */ "4988, 4529, 4529, 4611, 4615, 4979, 5250, 4529, 4529, 4616, 5003, 4614, 4529, 4529, 4529, 4868, 5010",
      /* 2592 */ "4499, 4529, 4529, 4672, 4670, 4612, 4616, 4529, 4529, 4529, 4854, 4673, 5254, 4529, 5719, 4364, 4529",
      /* 2609 */ "4362, 4529, 4529, 4011, 4529, 4365, 4529, 4529, 4529, 4673, 4676, 4364, 4529, 4012, 4363, 4226, 4529",
      /* 2626 */ "4529, 4529, 4879, 5720, 5015, 5029, 5033, 5047, 4877, 5053, 4880, 5082, 5083, 5087, 5095, 5095, 5095",
      /* 2643 */ "5094, 5091, 5099, 5103, 5107, 5109, 5110, 5115, 5115, 5111, 4529, 4529, 4676, 4529, 4529, 4998, 5783",
      /* 2660 */ "5195, 4529, 4483, 4529, 4529, 5700, 4511, 4224, 4529, 5119, 4719, 5589, 4923, 4529, 4529, 4712, 5021",
      /* 2677 */ "4529, 5703, 4529, 4529, 4771, 4529, 5704, 5153, 4529, 5704, 5144, 4529, 4529, 5155, 5704, 5211, 4529",
      /* 2694 */ "5389, 4529, 4529, 4529, 5149, 4833, 4846, 4529, 5159, 5164, 5169, 4529, 4455, 4529, 5183, 4625, 4529",
      /* 2711 */ "4520, 5619, 5627, 5631, 4624, 4529, 4529, 4529, 4910, 4529, 5781, 5193, 4529, 4528, 4529, 4529, 4674",
      /* 2728 */ "4529, 4716, 4529, 4606, 4529, 4091, 4529, 4529, 4529, 4995, 5199, 4083, 4529, 4529, 4529, 4822, 4529",
      /* 2745 */ "4529, 5704, 5206, 4084, 4129, 3871, 3870, 4131, 4084, 5431, 4084, 4150, 5596, 4764, 4529, 5360, 5391",
      /* 2762 */ "4529, 4530, 4529, 4529, 4527, 4610, 5178, 5178, 4529, 4529, 4529, 4531, 5783, 3714, 4529, 4529, 4823",
      /* 2779 */ "4529, 4718, 5588, 4922, 4529, 4537, 5353, 4529, 4548, 4529, 4529, 5025, 4664, 4529, 5231, 4529, 4529",
      /* 2796 */ "4824, 4529, 4529, 4529, 5173, 5210, 4529, 4529, 4529, 4998, 4461, 5218, 4529, 4529, 4529, 5022, 5176",
      /* 2813 */ "5178, 4529, 4529, 4825, 4996, 5782, 3713, 4529, 4529, 4529, 5042, 4718, 4348, 4923, 4529, 4552, 4275",
      /* 2830 */ "4529, 3956, 4529, 4529, 4529, 4151, 5219, 4529, 4529, 4529, 5143, 4998, 5246, 4617, 4529, 4575, 4579",
      /* 2847 */ "5580, 4618, 5269, 4529, 4529, 4878, 4353, 4224, 4529, 5554, 5259, 4529, 4529, 5189, 4529, 4529, 4890",
      /* 2864 */ "4234, 4626, 4606, 4122, 4529, 4529, 5773, 4529, 4529, 4529, 5175, 4529, 4529, 4821, 4529, 4529, 4529",
      /* 2881 */ "5186, 4529, 4525, 5185, 3956, 4121, 4091, 4529, 4529, 5254, 4529, 4132, 4529, 4529, 5251, 4529, 4529",
      /* 2898 */ "5254, 4529, 5252, 4529, 4529, 4529, 5188, 4506, 4529, 4529, 5174, 4981, 5273, 5279, 3743, 3844, 4667",
      /* 2915 */ "5287, 4529, 4609, 4529, 4529, 4529, 4098, 4970, 4509, 4151, 5021, 4563, 4568, 4566, 5525, 5527, 5300",
      /* 2932 */ "5306, 5312, 5312, 5314, 5312, 5318, 5308, 5322, 5325, 5329, 5329, 5329, 5331, 5335, 4529, 4529, 4529",
      /* 2949 */ "5225, 4529, 5584, 5187, 4529, 4529, 4140, 4529, 5039, 5576, 5036, 4623, 4548, 4529, 4613, 4617, 4529",
      /* 2966 */ "4454, 4529, 4734, 5346, 4529, 4529, 4622, 5405, 5352, 4529, 4529, 4529, 5227, 4235, 5358, 4529, 5357",
      /* 2983 */ "4251, 4529, 4529, 4529, 5239, 5367, 4529, 5227, 4529, 4616, 4616, 4529, 4467, 4529, 4529, 4232, 4529",
      /* 3000 */ "3929, 5382, 3929, 5382, 5585, 4529, 4529, 4529, 5254, 4145, 5174, 4529, 4529, 5136, 5170, 4725, 5263",
      /* 3017 */ "4955, 4084, 4366, 5570, 4529, 4617, 4529, 3957, 4249, 4529, 4529, 4529, 5341, 4529, 4622, 4880, 4677",
      /* 3034 */ "4617, 4624, 4677, 4529, 5188, 4529, 4529, 5165, 5170, 5400, 5406, 5395, 4529, 4529, 3929, 4617, 3929",
      /* 3051 */ "4617, 4741, 5264, 4956, 5336, 5759, 4151, 4529, 4529, 4529, 5400, 5407, 5378, 4529, 4529, 5171, 4994",
      /* 3068 */ "4622, 5405, 4448, 5250, 4013, 4529, 4529, 4673, 4674, 3845, 4667, 4153, 4529, 4618, 4529, 4525, 4610",
      /* 3085 */ "4529, 4622, 4529, 5227, 4670, 4670, 4529, 4966, 4448, 4529, 4529, 4529, 5401, 5407, 4606, 4529, 4529",
      /* 3102 */ "4529, 5508, 4919, 4450, 4529, 4529, 4529, 5522, 5225, 5225, 4529, 4529, 5179, 5425, 4529, 4529, 5184",
      /* 3119 */ "4914, 5173, 4529, 4982, 4954, 4084, 4710, 4529, 4529, 5185, 4361, 5251, 5174, 4529, 5227, 5226, 4672",
      /* 3136 */ "5406, 4449, 4529, 4529, 5235, 4647, 4450, 4529, 5225, 5226, 4529, 5227, 4529, 4617, 4529, 4529, 5535",
      /* 3153 */ "4665, 4153, 4529, 4529, 5253, 4529, 4529, 4529, 5187, 5411, 4529, 4529, 4529, 5533, 4529, 5418, 4617",
      /* 3170 */ "4529, 4626, 4606, 4121, 4772, 5172, 4529, 4983, 5122, 4529, 4529, 5553, 5642, 4365, 4529, 5172, 4677",
      /* 3187 */ "4964, 4529, 4529, 5223, 4529, 4090, 5419, 4671, 4529, 4529, 5268, 4529, 4529, 5424, 4668, 4529, 4658",
      /* 3204 */ "4616, 4529, 4376, 5275, 4962, 4529, 5416, 4529, 4551, 4274, 3714, 4529, 4098, 5586, 4529, 4099, 4103",
      /* 3221 */ "5249, 5171, 4679, 4529, 4529, 5302, 4529, 4529, 5423, 5296, 3952, 4826, 4666, 5553, 4669, 4069, 4529",
      /* 3238 */ "4529, 3958, 4529, 4529, 4529, 5765, 4529, 5175, 5295, 4529, 5139, 5369, 4529, 5292, 5296, 5175, 5295",
      /* 3255 */ "5553, 5388, 4529, 4529, 5017, 4529, 4529, 5294, 4529, 4668, 3837, 4529, 5556, 5175, 5295, 4529, 5293",
      /* 3272 */ "5293, 4668, 4668, 5556, 5292, 5292, 5292, 4224, 5696, 5697, 5699, 4529, 4529, 5363, 5390, 4529, 5435",
      /* 3289 */ "4529, 5759, 5059, 5068, 5075, 4836, 4117, 4529, 4120, 4529, 5445, 4301, 5451, 4300, 5383, 5465, 5466",
      /* 3306 */ "5463, 5470, 5471, 5475, 5487, 5479, 5479, 5488, 5484, 5480, 5492, 5495, 5499, 5501, 5501, 5501, 5505",
      /* 3323 */ "4529, 4626, 4577, 4581, 3714, 4118, 4529, 3959, 5391, 5515, 4529, 4529, 4529, 5537, 4860, 4870, 4529",
      /* 3340 */ "4529, 5373, 5377, 4529, 4529, 5519, 4529, 5531, 4866, 5542, 5548, 5561, 3715, 4529, 4529, 4529, 5552",
      /* 3357 */ "4529, 4366, 5566, 4529, 4529, 5387, 4529, 4118, 4529, 3958, 5390, 4422, 4529, 4529, 4999, 4529, 3954",
      /* 3374 */ "4529, 4669, 4529, 4529, 4145, 4529, 5600, 4762, 4529, 4529, 5389, 4121, 4726, 5178, 4529, 4529, 5439",
      /* 3391 */ "4649, 5606, 4084, 4529, 4529, 4529, 4218, 4578, 5580, 4529, 4529, 5509, 4660, 5362, 4117, 4529, 3957",
      /* 3408 */ "4998, 4084, 3954, 4529, 4677, 4142, 3835, 4870, 4529, 4150, 5596, 4763, 4529, 5610, 4529, 4683, 4648",
      /* 3425 */ "4687, 5636, 5580, 4529, 4529, 5538, 4529, 5551, 4529, 4529, 5359, 4879, 4879, 4118, 3957, 5391, 4527",
      /* 3442 */ "4998, 4084, 3955, 5720, 4529, 4529, 4529, 5556, 5142, 5619, 5628, 5632, 4529, 5704, 5640, 5683, 5630",
      /* 3459 */ "4529, 4529, 5177, 4529, 4619, 4529, 5178, 4529, 4529, 5583, 5587, 4529, 5172, 5650, 4529, 5549, 4529",
      /* 3476 */ "4689, 5587, 4529, 4626, 4529, 4529, 4983, 4954, 4529, 5361, 5554, 4120, 5655, 4529, 5660, 3954, 4529",
      /* 3493 */ "5671, 4529, 4529, 5645, 4870, 5682, 5629, 4084, 4529, 4745, 4529, 5061, 5684, 5631, 4529, 4529, 5175",
      /* 3510 */ "4529, 5651, 4529, 5550, 5656, 4361, 3955, 4529, 4854, 4529, 4529, 4610, 4677, 4462, 5688, 4529, 4529",
      /* 3527 */ "5695, 5697, 5697, 5689, 4529, 4529, 4529, 5565, 4132, 4529, 4529, 4529, 5594, 4150, 5688, 4529, 4529",
      /* 3544 */ "5696, 5697, 5697, 5697, 5697, 4529, 4529, 4481, 4529, 4529, 4529, 5644, 4621, 4621, 4619, 4529, 4858",
      /* 3561 */ "4628, 4529, 4350, 4529, 4529, 4153, 4151, 4090, 4529, 4621, 4529, 4872, 5187, 5550, 4620, 4529, 4529",
      /* 3578 */ "4529, 5646, 5063, 4620, 4618, 4529, 4877, 4352, 4529, 4112, 4529, 4529, 4944, 4529, 4620, 4618, 5693",
      /* 3595 */ "5709, 5717, 5712, 5705, 5457, 4384, 5724, 5726, 5728, 5736, 5728, 5733, 5729, 5738, 5742, 5749, 5746",
      /* 3612 */ "5749, 5749, 5750, 5754, 5758, 4529, 4529, 5700, 4529, 4261, 4152, 4529, 4529, 5702, 4529, 5177, 4529",
      /* 3629 */ "4529, 4529, 5680, 4529, 5764, 4529, 3961, 4529, 4529, 4529, 5704, 4486, 4529, 4529, 4529, 5697, 5698",
      /* 3646 */ "4529, 5055, 4529, 4529, 5763, 5770, 5778, 4529, 3931, 4529, 4877, 4497, 4529, 4755, 4324, 4529, 4529",
      /* 3663 */ "4529, 5145, 3930, 4529, 4877, 4497, 5389, 4525, 4529, 4529, 5509, 4972, 4364, 4529, 4529, 4529, 5772",
      /* 3680 */ "5555, 4529, 4529, 4529, 4885, 4529, 4529, 4520, 5078, 5606, 3828, 4529, 4529, 4529, 4898, 5544, 4529",
      /* 3697 */ "4675, 4676, 5454, 5704, 4529, 4529, 4529, 4899, 4223, 4529, 4111, 4529, 4529, 3962, 4529, 8388608",
      /* 3713 */ "16777216, 1073741824, 0, 0, 0, -1610612736, 1073872896, 131072, 131072, 131072, 257, 525312",
      /* 3725 */ "67174657, 268435456, 0, 262146, 262160, 268566528, 131072, 537133056, -2147221504, -2147221504",
      /* 3735 */ "-2147221504, 262144, 524288, 262160, 537133056, 33816576, 537133056, -2147221504, 262144",
      /* 3744 */ "-2147483648, 0, 0, 24, 0, 262174, 262160, 262144, 262144, 2048, 16777216, 262144, 262160, 268444864",
      /* 3758 */ "10560, 33816576, 262144, 262144, 262144, 262144, 262160, 8768, 262144, 262144, 262144, 278528",
      /* 3770 */ "278528, 278544, 537149440, 278530, 537149440, 278530, 772014080, 772014080, 772014080, -1375469568",
      /* 3780 */ "168034304, 772014080, 235143168, 235143168, 772014080, 168034304, 772030464, -1375469568, 772014080",
      /* 3789 */ "772014080, 772014080, 168034304, 168034304, 168034304, 235143168, 235143168, 235143168, 168034304",
      /* 3798 */ "168034304, 32768, 168034304, 32800, 163872, 294944, 163840, 2392096, 294944, 537165856, -2147188704",
      /* 3809 */ "294944, 294944, -2147188704, 294944, -2147188674, -2145091522, -2145091522, -2145091522, 772046880",
      /* 3818 */ "772046880, -2111537090, -2145091522, -2145091522, -2145091522, -1910210498, 4096, 4096, 65536, 0, 0",
      /* 3829 */ "1, 2, 0, 0, 12, 14, 0, -1608515584, 0, 0, 64, 128, 256, 128, 8256, 0, 0, -2147483648, 0, 0, 0, 32800",
      /* 3851 */ "2097152, 2129920, 2129920, 2129920, 2129920, 16, 2129952, 2129920, 2129920, 2129920, 0, 12, 2129920",
      /* 3864 */ "2129920, 32768, 2129920, 4096, 65536, 16777216, 0, -1073741824, 0, 0, 0, 2629632, 32, 2097152",
      /* 3878 */ "2129920, 2097184, 2097184, 2097184, 2097184, 2129920, 2129920, 2129920, 32768, 0, 2129920, 2129920",
      /* 3890 */ "32768, 32768, 32768, 2129920, 2129920, 32768, 0, 8192, 64, 0, 41943040, 0, 32768, 2129920, 32768",
      /* 3905 */ "32768, 0, 32, 32768, 2129920, 2129920, 2129920, 65536, 0, 32, 32, 32, 32, 2097184, 32768, 32768, 32",
      /* 3922 */ "32, 2097152, 2097184, 32768, 2129920, 32768, 2129920, 0, 0, 0, 48, 0, 0, 80, 272, 65552, 262160, 16",
      /* 3940 */ "20, 16, 48, 1572880, 524304, 524304, 1048592, 268435472, 16, 1048592, 16, 16, 16, 16, 0, 0, 8388608",
      /* 3957 */ "0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 16, 20, 304, 48, 524304, 16, 16, 16, 20, 48, 16, 21, 16, 28, 0, 2",
      /* 3983 */ "304, 17, 16, 16, 16, 28, 16, 16, 165675008, 272, 272, 272, 272, 16, 16, 272, 16, 524560, 1048592",
      /* 4002 */ "272, 16, 16, 48, 16, 16, 17, 20, 1887436800, 0, 0, 8, 262144, 0, 0, 84, 20, 372, -165649452",
      /* 4021 */ "-165649452, -165649451, -165649451, -164559888, -164535312, -164535312, -164535308, -701430800",
      /* 4029 */ "-164535308, -701430800, -701430800, -701430800, -701430800, -164273168, -164535308, -164273164",
      /* 4037 */ "-164535308, -164535308, -164535308, -164535308, -700906508, -700906512, -701430800, -164535308",
      /* 4045 */ "-164273164, -26141771, 0, 16, 1073774592, 16, 16, 2, 1073774592, 16, 20, 112, 21, 53, 140511253",
      /* 4060 */ "140515349, 140539925, 140540573, 140540573, 140540605, 140540573, 140540573, 140540573, 140540573",
      /* 4069 */ "262144, 524288, 0, 0, 0, 2013265920, 3745792, 163577856, 0, 0, 0, 265, 0, 100663296, 536870912",
      /* 4084 */ "-2147483648, 0, 0, 0, 323, 138412032, 0, 4096, 0, 0, 0, 331, 0, 239075328, 0, 0, 1, 4, 16, 32, 128",
      /* 4105 */ "512, 4096, 16777216, 33554432, 67108864, 0, 12582912, 0, 0, 0, 448, 2, 0, 64, 0, 65536, 0, 0, 0",
      /* 4124 */ "4096, 0, 16384, 0, 2097152, 0, 524288, 40960, 0, 0, 0, 8388608, 2105344, 2097152, 0, 0, 1, 16",
      /* 4142 */ "538968064, 0, 0, 0, 33554432, 0, 0, 2629632, 0, 0, 0, 8192, 0, 0, 0, 38, 16, 1048576, 941162496",
      /* 4161 */ "941162496, 941162496, 941162496, 941162496, 805371937, 805371937, 805371937, 847314977, 957941825",
      /* 4170 */ "957941827, 2031683649, 957941825, 957941825, 957941857, 957941859, 960047171, 960038977, 957941857",
      /* 4179 */ "960047171, 957941857, 957941857, 957941857, 957941857, 960038977, 957941857, 960038977, 960038977",
      /* 4188 */ "960038977, -1199980544, 960174145, -1199980544, -1199980544, -1199980544, -1199980544, -1199718400",
      /* 4196 */ "-1199718400, -1199718400, -1199717854, -1199717846, -1199717846, -1199717846, -1199717782",
      /* 4203 */ "-1199717846, -1199717846, -1199717846, -1183201183, -1183201183, -1182938517, 0, 0, 0, 10240, 526336",
      /* 4214 */ "16777216, 2105344, 0, -701430800, 0, 0, -134217728, 0, 1638400, 939524096, 0, 0, 0, 16384, 0, 0, 0",
      /* 4231 */ "5, 1, 65536, 805306368, 0, 0, 0, 19504, 0, 805306368, 0, 0, 1, 256, 4096, 1640448, 939524096, 0, 0",
      /* 4250 */ "1, 262144, 2097152, 0, 0, 0, 7979008, -1207959552, 0, 0, 8241152, 0, 0, 512, 16384, 0, 8241152, 0",
      /* 4268 */ "7981056, 8243200, 16777216, -1207959552, 0, 0, 8388608, 33554432, 67108864, 134217728, 1073741824, 0",
      /* 4280 */ "65536, 1572864, 939524096, 0, -436207616, 0, 0, 2, 3072, 16384, 114688, 1572864, 6291456, 939524096",
      /* 4294 */ "0, 4096, 196608, 0, 0, 16384, 1073741824, 138412032, 0, 0, 1073741824, 512, 262144, 0, 2048",
      /* 4309 */ "16777216, 8192, 0, 8388608, 33554432, 134217728, 1073741824, 0, 0, 939524096, 0, 0, 2, 32, 3072",
      /* 4324 */ "4194304, 939524096, -2147483648, 0, 0, 17408, 0, 0, 32768, 32768, 32768, 32768, 0, 0, 0, 262144, 0",
      /* 4341 */ "2048, 24576, 2097152, 0, 0, 32768, 1048576, 4194304, 0, 0, 1048576, 0, 1048576, 536870912, 0, 0",
      /* 4357 */ "8388608, 33554432, 1073741824, 0, 2, 0, 0, 0, 128, 0, 0, 0, 135, 325888, 49152, 1048576, 4194304",
      /* 4374 */ "536870912, -2147483648, 268435456, 0, 0, 4096, 2048, 0, 4740, 256, 0, 256, 0, 256, 257, 4740",
      /* 4390 */ "536871168, 67109121, -1507782399, -1507782399, -1507782399, -1507782399, -2145386488, -1876951032",
      /* 4398 */ "-2145386488, -2145386456, -2145381716, -1507782391, -432729847, -1507782391, -432729847, -1507782391",
      /* 4406 */ "-1507782391, -1507782391, -1507782391, -432729847, -432729847, -432729847, -432729847, -1344145085",
      /* 4414 */ "-432729847, -1344145085, -1344145085, -1344145085, -1344145085, -1344145077, -1344145077",
      /* 4421 */ "-1344145077, 0, 0, 131072, 24, 304, 48, 1048848, 0, 132, 256, 0, 0, 262144, 262144, 262160",
      /* 4437 */ "-2147221504, 262144, 0, 2, 16, 16, 16, 131088, 0, 257, 0, 131072, 262144, 2097152, 25165824, 0, 0",
      /* 4454 */ "525312, 0, 0, 0, 59392, 2166784, -1509949440, 0, 0, 2, 128, 8192, 262144, 8, 2097152, -2147483648, 0",
      /* 4471 */ "0, -1879048192, 0, 0, 40, 0, 172, 265, 0, -1509949440, 0, 0, 262144, 1048576, 0, 0, 4, 64, 0, 0, 323",
      /* 4492 */ "14809088, -1358954496, 0, 0, 331, 0, 0, 0, 65536, 0, 67108864, 0, 257, 131072, 0, 0, 262144",
      /* 4509 */ "33554432, 8192, 0, 0, 32, 65536, 0, 257, 69632, 2097152, 2097152, 0, 0, 1, 6, 69632, 0, 0, 0, 131072",
      /* 4529 */ "0, 0, 0, 0, -126877696, 0, 3407872, 1610612736, 0, 0, 3, 19488, 129024, 2097152, 12582912, 50331648",
      /* 4545 */ "201326592, 536870912, -2147483648, 0, 0, 294912, 0, 0, 524288, 2097152, 8388608, 33554432, 4096",
      /* 4558 */ "65536, 2097152, 33554432, 201326592, 536870912, 0, 0, 524292, 262145, 262145, 0, 262145, 262145",
      /* 4571 */ "524292, 8, 2097152, 0, 0, 4, 8, 16, 256, 512, 1024, 4096, 4194304, 16777216, 40, 0, 44, 0, 0",
      /* 4590 */ "1640448, 16777216, 33554432, 67108864, 536870912, -2147483648, 114688, 2097152, 12582912, 16777216",
      /* 4600 */ "33554432, 201326592, 0, 0, 4, 128, 512, 0, 0, 0, 1024, 0, 0, 0, 192, 16384, 268435456, 536870912, 0",
      /* 4619 */ "0, 0, 256, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 65536, 33554432, 67108864, 0, 0, 3477504, -436207616",
      /* 4639 */ "262144, 1048576, 1073741824, 0, 8192, 0, 64, 256, 2048, 4096, 8192, 114688, 12582912, 16777216",
      /* 4653 */ "201326592, 65536, 67108864, 0, 0, 4, 256, 131072, 1048576, 4194304, 134217728, 805306368",
      /* 4665 */ "-2147483648, 0, 0, 16777216, 0, 0, 0, 32768, 0, 0, 0, 8, 0, 0, 0, 16, 16, 32768, 1, 2, 256, 2048",
      /* 4687 */ "16777216, 201326592, 0, 0, 4, 262144, 262144, 1048576, 0, 8, 262144, 16777216, 0, 0, 4, 32, 128, 512",
      /* 4705 */ "0, 1024, 268435456, 1073741824, 4096, 16777216, 0, 0, 8192, 262144, 1048576, 262144, 1048576, 8, 0",
      /* 4720 */ "64, 0, 4194304, 12582912, 16777216, 134217728, 0, 0, 0, 6, 16384, 65536, 0, 1, 65536, 0, 0, 257",
      /* 4738 */ "49152, 65536, 8388608, 134217728, 0, 0, 4096, 0, 32768, 134217728, 0, 0, 0, 16, 32, 65536, 0, 0",
      /* 4756 */ "49152, 65536, 1048576, 8388608, 33554432, 67108864, 0, 0, 6291456, 0, 0, 2048, 8192, 514, 8388608, 0",
      /* 4772 */ "0, 4, 524288, 0, 0, 16384, 0, 131328, 131328, 1024, 131328, 131328, 0, 131328, 17039368, 131328",
      /* 4788 */ "807043332, 807043332, 807043332, 807043332, 807043332, 806912004, 806912004, 806912004, 806928388",
      /* 4797 */ "806929412, 1880785156, 1880785156, 1880785156, 1880785156, 1880795396, 1880785156, 1880785156",
      /* 4805 */ "1889173780, 1880785156, 1880785156, 1880785156, 1880795396, 1880795396, 1880795910, -1199914555",
      /* 4813 */ "1880795396, -1199914555, -1199914555, -1199914555, -1199914555, -126172731, -126172731, -126172731",
      /* 4821 */ "0, 0, 0, 393216, 0, 0, 0, 524288, 0, 256, 688128, 806354944, 0, 0, 50855936, 0, 0, 67108864, 1048576",
      /* 4840 */ "2097152, 4194304, -1207959552, 4, 557056, 806354944, 0, 0, 67633152, 1200, 688128, 1880096768, 0, 0",
      /* 4854 */ "4, 268435456, 536870912, 0, 20, 1888485376, 0, 0, 6, 20480, 0, 1880096768, 0, 0, 6, 30720, 524288",
      /* 4871 */ "-2147483648, 0, 0, 8, 1024, 11008, 0, 0, 0, 1048576, 0, 0, 0, 10496, 5, 16832, 688128, -1200619520",
      /* 4889 */ "0, 4, 32768, 524288, 1048576, 4194304, 536870912, 0, 0, 6, 0, 0, 0, 1572864, 0, 32, 0, 65536, 0, 0",
      /* 4909 */ "33554432, 0, 67108864, 0, 0, 0, 2, 512, 0, 0, 256, 16384, 131072, 1048576, 8388608, 0, 50331648, 0",
      /* 4927 */ "4194304, 402653184, 536870912, -2147483648, 0, 4, 131072, 1048576, 134217728, 805306368, 0, 0, 32768",
      /* 4940 */ "8388608, 134217728, 0, 0, 4, 1048576, 268435456, 536870912, 192, 16384, 131072, 1048576, 4194304, 0",
      /* 4954 */ "2, 0, 8, 268435456, 0, -2147483648, 4, 131072, 268435456, 536870912, 536870912, 0, 32768, 0, 32768",
      /* 4969 */ "0, 192, 16384, 131072, 4194304, 134217728, 268435456, 536870912, -2147483648, 0, 0, 65536, 33554432",
      /* 4982 */ "0, 134217728, 0, 4096, 0, 16777216, 134217728, 268435456, 536870912, 0, 0, 134217728, 524288, 0",
      /* 4996 */ "524288, 524288, 0, 0, 0, 2, -2147483648, 0, 268435456, 536870912, 0, 0, 268435456, 4608, 0, 16384, 0",
      /* 5013 */ "16, 0, 8, 64, 0, 4194304, 0, 8388608, 33554432, 0, 0, 0, 49152, 1048576, 4194304, 134217728, 0",
      /* 5030 */ "65600, 32768, 1048576, 8388608, 50331648, 16777216, 0, 0, 538968064, 0, 0, 572522496, 0, 0",
      /* 5044 */ "1610612736, 0, 0, 16, 1048576, 0, 0, 12, 8, 65600, 16, 0, 0, 14, 0, 0, 128, 0, 128, 1024, 0, 1280, 0",
      /* 5067 */ "0, 128, 131072, 536871040, 128, 0, 256, 1024, 1075839492, 128, 4096, 128, 256, 4096, 57344",
      /* 5082 */ "-1610079071, -1610079071, -1610079071, -1610079071, -2146819039, -2146950111, -2146917343",
      /* 5089 */ "-1073208287, -1073077215, -1610062687, -1610062687, -1559731039, -1593285471, -1610062687",
      /* 5096 */ "-1610062687, -1610062687, -1610062687, -1610062687, -1542953823, -1610062671, -1542953823",
      /* 5103 */ "-1408736095, -1542953823, -1408736095, -1542953823, -1592859485, -1408736095, -1592859485",
      /* 5110 */ "-1592859485, -1592859485, -1592859485, -1592857437, 0, -1592857437, -1592857437, -1592857437",
      /* 5118 */ "-1592857437, 0, 536870912, 0, 8, 0, 16777216, 8192, 64, 64, 64, 0, 516, 2097152, 0, 0, 16, 131072, 1",
      /* 5137 */ "1184, 8192, 524288, 0, 16777216, 0, 1, 2, 4, 32, 0, 0, 1, 1056, 8192, 655360, 1184, 24576",
      /* 5155 */ "-1610612736, 0, 0, 17301504, -1476395008, 0, 0, 0, 3872768, 0, 3, 1184, 57344, 17694720, 17694720",
      /* 5170 */ "-1610612736, 0, 0, 0, 2097152, 0, 0, 0, 2048, 0, 0, 0, 3072, 59392, 0, 0, 0, 4194304, 0, 0, 0, 512",
      /* 5192 */ "0, 131072, 16777216, 268435456, 1073741824, 0, 0, 160, 1024, 8192, 524288, 16777216, 536870912",
      /* 5205 */ "-2147483648, 32, 1024, 8192, 524288, 0, 24576, 0, 0, 0, 3737600, 160, 1024, 57344, 393216, 16777216",
      /* 5221 */ "536870912, 0, 4, 512, 0, 0, 16, 536870912, 0, 0, 128, 8192, 536870912, 0, 1, 2, 64, 256, 0, 2, 16384",
      /* 5242 */ "32768, 131072, 524288, 1048576, 16384, 32768, 393216, 16777216, 67108864, 0, 0, 0, 262144, 0, 0, 0",
      /* 5258 */ "40960, 4194304, 0, 0, 8388608, 4096, 0, 0, 2, 0, 0, 32768, 131072, 1073741824, 0, 4194304, 0, 4096",
      /* 5276 */ "0, 4608, 16777216, 0, 2, 268435464, 4096, 65536, 1048576, 4194304, 8388608, 0, 33554432, 1073741824",
      /* 5290 */ "8192, 2097152, 0, 0, 2048, 16384, 8388608, 16777216, 0, 0, 2359297, 0, 0, 4194304, 8388608, 0, 0",
      /* 5307 */ "524292, 539230225, 539230225, -1608253423, 540278803, 539230225, 539230225, 539230225, 539230225",
      /* 5316 */ "572784657, 540278803, 539230225, 572784657, 539230225, 572784657, 539230225, 540278803, 540278803",
      /* 5325 */ "540278803, 540311571, 94850083, 540279315, 94850083, 94850083, 94850083, 94850083, 631721011",
      /* 5334 */ "631721011, 631721011, 0, 0, 0, 16777216, 8192, 1, 0, 0, 0, 17303552, 528, 0, 0, 0, 41943040, 0",
      /* 5352 */ "19488, 458752, 94371840, 0, 0, 19504, 631242752, 0, 0, 0, 67108864, 0, 1048576, 0, 65536, 3, 3145728",
      /* 5369 */ "0, 0, 64, 32768, 0, 3, 32, 19456, 458752, 2097152, 25165824, 67108864, 0, 603979776, 0, 0, 0",
      /* 5386 */ "138412032, 64, 384, 0, 0, 0, 134217728, 0, 0, 262144, 2097152, 25165824, 67108864, 536870912, 0, 0",
      /* 5402 */ "3, 32, 3072, 32, 3072, 16384, 65536, 131072, 262144, 16384, 131072, 2097152, 25165824, 0, 16",
      /* 5417 */ "536870912, 16, 536870912, 0, 16, 536870912, 0, 3072, 16384, 2097152, 8388608, 16777216, 16384",
      /* 5430 */ "8388608, 0, 0, 160, 24576, 268435456, 0, 4, 0, 1, 2, 2048, 4096, 114688, 12582912, 32, 1073741824, 0",
      /* 5448 */ "0, 172, 2101760, 4, 131104, 1048, 0, 1, 4, 128, 0, 0, 256, 131072, 0, 8389656, -2147483646, 0",
      /* 5466 */ "-2147483646, 0, -2147483646, -2147483646, -2146938874, -2146938874, -2146938874, -2146938874",
      /* 5474 */ "2650112, 271085568, 2650112, 141062144, 141062144, -2144831482, -2144831482, -2144831482",
      /* 5482 */ "-2144831482, -2077722618, -2144831482, -2140637178, -2144831482, -2146928634, -2146928634",
      /* 5489 */ "-2146928634, -2144831482, -2144831482, -2144765946, -2146928634, -2144700378, -1593280506",
      /* 5496 */ "-1593280506, -1593280506, -1593280506, -2109935225, -1593280506, -2109935225, -2109935225",
      /* 5503 */ "-2109935225, -2109935225, -2109933177, -2109933177, -2109933177, 0, 1, 4, 192, 16384, 4194304",
      /* 5514 */ "134217728, 0, 32, 131072, 24, 0, 28672, 2621440, 0, 1, 4, 448, 262145, 2359297, 2359297, 2359297",
      /* 5530 */ "2359297, 0, 6815744, 0, 0, 192, 536870912, 0, 0, 12, 0, 0, 2621440, -2147483648, 0, 6, -2147483648",
      /* 5547 */ "0, 96256, 0, 0, 0, 268435456, 0, 0, 0, 64, 0, 0, 0, 40, 38, 161792, 17301504, -1610612736, 135",
      /* 5566 */ "323840, 3670016, 33554432, -2147483648, 325888, -2147483648, 0, 0, 1024, 524288, 0, 0, 3, 540016640",
      /* 5580 */ "4194304, 16777216, 1073741824, 0, 1, 4, 262144, 524288, 4194304, 0, 0, 65536, 1048576, 939524096, 6",
      /* 5595 */ "4096, 16384, 524288, 2097152, 0, 0, 24576, 524288, 2097152, 134217728, 134217728, 262144, 1572864",
      /* 5608 */ "2097152, 33554432, 6, 2048, 0, 0, 1024, 8388608, 1073741824, 0, 0, 128, 256, 8192, 16384, 16384, 0",
      /* 5625 */ "32768, 32768, 32768, 262144, 524288, 1048576, 2097152, 33554432, -2147483648, 0, 0, 8, 256, 512",
      /* 5639 */ "1024, 2, 4, 128, 256, 0, 0, 2, 4, 16384, 524288, 4, 8, 1024, 4194304, 0, 0, 32, 0, 134217728, 0, 2",
      /* 5661 */ "-2147483648, 0, 0, 2048, 16777216, 0, 16384, 524288, 2097152, 6291456, 8192, 2097152, 536870912, 0",
      /* 5675 */ "1, 49152, 65536, 12582912, 134217728, 2, 4, 128, 8192, 16384, 262144, 524288, 1048576, 262144",
      /* 5689 */ "1048576, 33554432, 0, 0, 1, 256, 0, 0, 16384, 16384, 16384, 16384, 0, 0, 16, 0, 0, 0, 1, 0, 0, 4352",
      /* 5711 */ "17152, 17152, 0, 0, 0, 805306368, 12288, 0, 0, 0, 536870912, 0, 0, 0, 3072, 3072, 3072, 15396, 15396",
      /* 5730 */ "15396, 15396, 15406, 15652, 15652, 15652, 15396, 15396, 15652, 15406, 15406, 15406, 15422, 15406, 68",
      /* 5745 */ "15406, 68, 324, 324, 68, 68, 68, 68, 324, 4164, 8260, 15716, 15716, 15460, 0, 0, 0, 1073741824, 0",
      /* 5764 */ "46, 0, 0, 0, 1879048192, 0, 0, 62, 0, 0, 16384, 32768, 393216, 0, 0, 4, 32, 0, 2, 256, 32768, 131072",
      /* 5786 */ "16777216"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 5787; ++i) {EXPECTED[i] = Integer.parseInt(s2[i]);}
  }

  private static final String[] TOKEN =
  {
    "(0)",
    "IntegerLiteral",
    "DecimalLiteral",
    "DoubleLiteral",
    "StringLiteral",
    "URIQualifiedName",
    "PredefinedEntityRef",
    "'\"\"'",
    "EscapeApos",
    "ElementContentChar",
    "QuotAttrContentChar",
    "AposAttrContentChar",
    "PITarget",
    "CharRef",
    "NCName",
    "QName",
    "StringConstructorChars",
    "S",
    "S",
    "CommentContents",
    "PragmaContents",
    "Wildcard",
    "DirCommentContents",
    "DirPIContents",
    "CDataSectionContents",
    "EOF",
    "'!'",
    "'!='",
    "'\"'",
    "'#'",
    "'#)'",
    "'$'",
    "'%'",
    "''''",
    "'('",
    "'(#'",
    "'(:'",
    "')'",
    "'*'",
    "'+'",
    "','",
    "'-'",
    "'-->'",
    "'.'",
    "'..'",
    "'/'",
    "'//'",
    "'/>'",
    "':'",
    "':)'",
    "'::'",
    "':='",
    "';'",
    "'<'",
    "'<!--'",
    "'<![CDATA['",
    "'</'",
    "'<<'",
    "'<='",
    "'<?'",
    "'='",
    "'=>'",
    "'>'",
    "'>='",
    "'>>'",
    "'?'",
    "'?>'",
    "'@'",
    "'NaN'",
    "'['",
    "']'",
    "']]>'",
    "']``'",
    "'``['",
    "'`{'",
    "'after'",
    "'all'",
    "'allowing'",
    "'ancestor'",
    "'ancestor-or-self'",
    "'and'",
    "'any'",
    "'array'",
    "'as'",
    "'ascending'",
    "'at'",
    "'attribute'",
    "'base-uri'",
    "'before'",
    "'boundary-space'",
    "'by'",
    "'case'",
    "'cast'",
    "'castable'",
    "'catch'",
    "'child'",
    "'collation'",
    "'comment'",
    "'construction'",
    "'contains'",
    "'content'",
    "'context'",
    "'copy'",
    "'copy-namespaces'",
    "'count'",
    "'decimal-format'",
    "'decimal-separator'",
    "'declare'",
    "'default'",
    "'delete'",
    "'descendant'",
    "'descendant-or-self'",
    "'descending'",
    "'diacritics'",
    "'different'",
    "'digit'",
    "'distance'",
    "'div'",
    "'document'",
    "'document-node'",
    "'element'",
    "'else'",
    "'empty'",
    "'empty-sequence'",
    "'encoding'",
    "'end'",
    "'entire'",
    "'eq'",
    "'every'",
    "'exactly'",
    "'except'",
    "'exponent-separator'",
    "'external'",
    "'first'",
    "'following'",
    "'following-sibling'",
    "'for'",
    "'from'",
    "'ft-option'",
    "'ftand'",
    "'ftnot'",
    "'ftor'",
    "'function'",
    "'ge'",
    "'greatest'",
    "'group'",
    "'grouping-separator'",
    "'gt'",
    "'idiv'",
    "'if'",
    "'import'",
    "'in'",
    "'infinity'",
    "'inherit'",
    "'insensitive'",
    "'insert'",
    "'instance'",
    "'intersect'",
    "'into'",
    "'invoke'",
    "'is'",
    "'item'",
    "'language'",
    "'last'",
    "'lax'",
    "'le'",
    "'least'",
    "'let'",
    "'levels'",
    "'lowercase'",
    "'lt'",
    "'map'",
    "'minus-sign'",
    "'mod'",
    "'modify'",
    "'module'",
    "'most'",
    "'namespace'",
    "'namespace-node'",
    "'ne'",
    "'next'",
    "'no'",
    "'no-inherit'",
    "'no-preserve'",
    "'node'",
    "'nodes'",
    "'not'",
    "'occurs'",
    "'of'",
    "'only'",
    "'option'",
    "'or'",
    "'order'",
    "'ordered'",
    "'ordering'",
    "'paragraph'",
    "'paragraphs'",
    "'parent'",
    "'pattern-separator'",
    "'per-mille'",
    "'percent'",
    "'phrase'",
    "'preceding'",
    "'preceding-sibling'",
    "'preserve'",
    "'previous'",
    "'processing-instruction'",
    "'relationship'",
    "'rename'",
    "'replace'",
    "'return'",
    "'revalidation'",
    "'same'",
    "'satisfies'",
    "'schema'",
    "'schema-attribute'",
    "'schema-element'",
    "'score'",
    "'self'",
    "'sensitive'",
    "'sentence'",
    "'sentences'",
    "'skip'",
    "'sliding'",
    "'some'",
    "'stable'",
    "'start'",
    "'stemming'",
    "'stop'",
    "'strict'",
    "'strip'",
    "'switch'",
    "'text'",
    "'then'",
    "'thesaurus'",
    "'times'",
    "'to'",
    "'transform'",
    "'treat'",
    "'try'",
    "'tumbling'",
    "'type'",
    "'typeswitch'",
    "'union'",
    "'unordered'",
    "'update'",
    "'updating'",
    "'uppercase'",
    "'using'",
    "'validate'",
    "'value'",
    "'variable'",
    "'version'",
    "'weight'",
    "'when'",
    "'where'",
    "'wildcards'",
    "'window'",
    "'with'",
    "'without'",
    "'word'",
    "'words'",
    "'xquery'",
    "'zero-digit'",
    "'{'",
    "'{{'",
    "'|'",
    "'||'",
    "'}'",
    "'}`'",
    "'}}'"
  };
}

// End
