// This file was generated on Thu Oct 6, 2022 22:10 (UTC+02) by REx v5.55 which is Copyright (c) 1979-2022 by Gunther Rademacher <grd@gmx.net>
// REx command line: file.ebnf -ll 2 -backtrack -tree -java -basex -name expkg-zone58.text.parse.Parse-BaseX

package expkg_zone58.text.parse;

import java.io.IOException;
import java.util.Arrays;

import org.basex.build.MemBuilder;
import org.basex.build.SingleParser;
import org.basex.core.MainOptions;
import org.basex.io.IOContent;
import org.basex.query.value.item.Str;
import org.basex.query.value.node.ANode;
import org.basex.query.value.node.DBNode;
import org.basex.util.Atts;
import org.basex.util.Token;

public class Parse_BaseX
{
  public static class ParseException extends RuntimeException
  {
    private static final long serialVersionUID = 1L;
    private int begin, end, offending, expected, state;

    public ParseException(int b, int e, int s, int o, int x)
    {
      begin = b;
      end = e;
      state = s;
      offending = o;
      expected = x;
    }

    @Override
    public String getMessage()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    }

    public void serialize(EventHandler eventHandler)
    {
    }

    public int getBegin() {return begin;}
    public int getEnd() {return end;}
    public int getState() {return state;}
    public int getOffending() {return offending;}
    public int getExpected() {return expected;}
    public boolean isAmbiguousInput() {return false;}
  }

  public interface EventHandler
  {
    public void reset(CharSequence string);
    public void startNonterminal(String name, int begin);
    public void endNonterminal(String name, int end);
    public void terminal(String name, int begin, int end);
    public void whitespace(int begin, int end);
  }

  public static class TopDownTreeBuilder implements EventHandler
  {
    private CharSequence input = null;
    private Nonterminal[] stack = new Nonterminal[64];
    private int top = -1;

    @Override
    public void reset(CharSequence input)
    {
      this.input = input;
      top = -1;
    }

    @Override
    public void startNonterminal(String name, int begin)
    {
      Nonterminal nonterminal = new Nonterminal(name, begin, begin, new Symbol[0]);
      if (top >= 0) addChild(nonterminal);
      if (++top >= stack.length) stack = Arrays.copyOf(stack, stack.length << 1);
      stack[top] = nonterminal;
    }

    @Override
    public void endNonterminal(String name, int end)
    {
      stack[top].end = end;
      if (top > 0) --top;
    }

    @Override
    public void terminal(String name, int begin, int end)
    {
      addChild(new Terminal(name, begin, end));
    }

    @Override
    public void whitespace(int begin, int end)
    {
    }

    private void addChild(Symbol s)
    {
      Nonterminal current = stack[top];
      current.children = Arrays.copyOf(current.children, current.children.length + 1);
      current.children[current.children.length - 1] = s;
    }

    public void serialize(EventHandler e)
    {
      e.reset(input);
      stack[0].send(e);
    }
  }

  public static abstract class Symbol
  {
    public String name;
    public int begin;
    public int end;

    protected Symbol(String name, int begin, int end)
    {
      this.name = name;
      this.begin = begin;
      this.end = end;
    }

    public abstract void send(EventHandler e);
  }

  public static class Terminal extends Symbol
  {
    public Terminal(String name, int begin, int end)
    {
      super(name, begin, end);
    }

    @Override
    public void send(EventHandler e)
    {
      e.terminal(name, begin, end);
    }
  }

  public static class Nonterminal extends Symbol
  {
    public Symbol[] children;

    public Nonterminal(String name, int begin, int end, Symbol[] children)
    {
      super(name, begin, end);
      this.children = children;
    }

    @Override
    public void send(EventHandler e)
    {
      e.startNonterminal(name, begin);
      int pos = begin;
      for (Symbol c : children)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
      if (pos < end) e.whitespace(pos, end);
      e.endNonterminal(name, end);
    }
  }

  public static ANode parseXQuery(Str str) throws IOException
  {
    BaseXFunction baseXFunction = new BaseXFunction()
    {
      @Override
      public void execute(Parse_BaseX p) {p.parse_XQuery();}
    };
    return baseXFunction.call(str);
  }

  public static abstract class BaseXFunction
  {
    protected abstract void execute(Parse_BaseX p);

    public ANode call(Str str) throws IOException
    {
      String input = str.toJava();
      SingleParser singleParser = new SingleParser(new IOContent(""), MainOptions.get())
      {
        @Override
        protected void parse() throws IOException {}
      };
      MemBuilder memBuilder = new MemBuilder(input, singleParser);
      memBuilder.init();
      BaseXTreeBuilder treeBuilder = new BaseXTreeBuilder(memBuilder);
      Parse_BaseX parser = new Parse_BaseX();
      parser.initialize(input, treeBuilder);
      try
      {
        execute(parser);
      }
      catch (ParseException pe)
      {
        memBuilder = new MemBuilder(input, singleParser);
        memBuilder.init();
        Atts atts = new Atts();
        atts.add(Token.token("b"), Token.token(pe.getBegin() + 1));
        atts.add(Token.token("e"), Token.token(pe.getEnd() + 1));
        if (pe.getOffending() < 0)
        {
          atts.add(Token.token("s"), Token.token(pe.getState()));
        }
        else
        {
          atts.add(Token.token("o"), Token.token(pe.getOffending()));
          atts.add(Token.token("x"), Token.token(pe.getExpected()));
        }
        memBuilder.openElem(Token.token("ERROR"), atts, new Atts());
        memBuilder.text(Token.token(parser.getErrorMessage(pe)));
        memBuilder.closeElem();
      }
      return new DBNode(memBuilder.data());
    }
  }

  public static class BaseXTreeBuilder implements EventHandler
  {
    private CharSequence input;
    private MemBuilder builder;
    private Atts nsp = new Atts();
    private Atts atts = new Atts();

    public BaseXTreeBuilder(MemBuilder b)
    {
      input = null;
      builder = b;
    }

    @Override
    public void reset(CharSequence string)
    {
      input = string;
    }

    @Override
    public void startNonterminal(String name, int begin)
    {
      try
      {
        builder.openElem(Token.token(name), atts, nsp);
      }
      catch (IOException e)
      {
        throw new RuntimeException(e);
      }
    }

    @Override
    public void endNonterminal(String name, int end)
    {
      try
      {
        builder.closeElem();
      }
      catch (IOException e)
      {
        throw new RuntimeException(e);
      }
    }

    @Override
    public void terminal(String name, int begin, int end)
    {
      if (name.charAt(0) == '\'')
      {
        name = "TOKEN";
      }
      startNonterminal(name, begin);
      characters(begin, end);
      endNonterminal(name, end);
    }

    @Override
    public void whitespace(int begin, int end)
    {
      characters(begin, end);
    }

    private void characters(int begin, int end)
    {
      if (begin < end)
      {
        try
        {
          builder.text(Token.token(input.subSequence(begin, end).toString()));
        }
        catch (IOException e)
        {
          throw new RuntimeException(e);
        }
      }
    }
  }

  public Parse_BaseX()
  {
  }

  public Parse_BaseX(CharSequence string, EventHandler t)
  {
    initialize(string, t);
  }

  public void initialize(CharSequence source, EventHandler parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = source;
    size = source.length();
    reset(0, 0, 0);
  }

  public CharSequence getInput()
  {
    return input;
  }

  public int getTokenOffset()
  {
    return b0;
  }

  public int getTokenEnd()
  {
    return e0;
  }

  public final void reset(int l, int b, int e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0; b2 = 0; e2 = 0;
    end = e;
    ex = -1;
    memo.clear();
    eventHandler.reset(input);
  }

  public void reset()
  {
    reset(0, 0, 0);
  }

  public static String getOffendingToken(ParseException e)
  {
    return e.getOffending() < 0 ? null : TOKEN[e.getOffending()];
  }

  public static String[] getExpectedTokenSet(ParseException e)
  {
    String[] expected;
    if (e.getExpected() >= 0)
    {
      expected = new String[]{TOKEN[e.getExpected()]};
    }
    else
    {
      expected = getTokenSet(- e.getState());
    }
    return expected;
  }

  public String getErrorMessage(ParseException e)
  {
    String message = e.getMessage();
    String[] tokenSet = getExpectedTokenSet(e);
    String found = getOffendingToken(e);
    int size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : java.util.Arrays.toString(tokenSet))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    String prefix = input.subSequence(0, e.getBegin()).toString();
    int line = prefix.replaceAll("[^\n]", "").length() + 1;
    int column = prefix.length() - prefix.lastIndexOf('\n');
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.subSequence(e.getBegin(), Math.min(input.length(), e.getBegin() + 64))
         + "...";
  }

  public void parse_XQuery()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Module();
    consume(25);                    // EOF
    eventHandler.endNonterminal("XQuery", e0);
  }

  private void parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 262:                       // 'xquery'
      lookahead2W(182);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'encoding' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'transform' | 'treat' | 'union' | 'update' | 'version' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 63750                 // 'xquery' 'encoding'
     || lk == 129286)               // 'xquery' 'version'
    {
      whitespace();
      parse_VersionDecl();
    }
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 175:                       // 'module'
      lookahead2W(181);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'or' | 'to' | 'transform' | 'treat' | 'union' | 'update' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 90799:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  private void parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    consume(262);                   // 'xquery'
    lookahead1W(110);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 124:                       // 'encoding'
      consume(124);                 // 'encoding'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      break;
    default:
      consume(252);                 // 'version'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      lookahead1W(102);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 124)                // 'encoding'
      {
        consume(124);               // 'encoding'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consume(4);                 // StringLiteral
      }
    }
    lookahead1W(31);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  private void parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_QueryBody();
    eventHandler.endNonterminal("MainModule", e0);
  }

  private void parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(132);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  private void parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    consume(175);                   // 'module'
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consume(177);                   // 'namespace'
    lookahead1W(174);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
    whitespace();
    parse_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(31);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  private void parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(185);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'base-uri' | 'boundary-space' | 'cast' | 'castable' | 'construction' |
                                    // 'contains' | 'context' | 'copy-namespaces' | 'decimal-format' | 'default' |
                                    // 'div' | 'eq' | 'except' | 'ft-option' | 'function' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'option' | 'or' | 'ordering' | 'revalidation' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'update' | 'updating' | 'variable' | '|' | '||'
        break;
      case 150:                     // 'import'
        lookahead2W(183);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'module' | 'ne' | 'or' |
                                    // 'schema' | 'to' | 'transform' | 'treat' | 'union' | 'update' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 44651               // 'declare' 'base-uri'
       && lk != 45675               // 'declare' 'boundary-space'
       && lk != 50283               // 'declare' 'construction'
       && lk != 52843               // 'declare' 'copy-namespaces'
       && lk != 53867               // 'declare' 'decimal-format'
       && lk != 55403               // 'declare' 'default'
       && lk != 70763               // 'declare' 'ft-option'
       && lk != 89750               // 'import' 'module'
       && lk != 90731               // 'declare' 'namespace'
       && lk != 99435               // 'declare' 'ordering'
       && lk != 108139              // 'declare' 'revalidation'
       && lk != 109718)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(167);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 55403)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 90731:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 150:                     // 'import'
        whitespace();
        parse_Import();
        break;
      case 70763:                   // 'declare' 'ft-option'
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(237);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(184);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'context' | 'div' | 'eq' | 'except' |
                                    // 'function' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'lt' | 'mod' | 'ne' | 'option' | 'or' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'updating' | 'variable' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 16491               // 'declare' '%'
       && lk != 51819               // 'declare' 'context'
       && lk != 72811               // 'declare' 'function'
       && lk != 97387               // 'declare' 'option'
       && lk != 126059              // 'declare' 'updating'
       && lk != 128619)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 107:                     // 'declare'
        lookahead2W(161);           // S^WS | '%' | '(:' | 'context' | 'function' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 51819:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 97387:                   // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(31);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  private void parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    consume(52);                    // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  private void parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 107:                       // 'declare'
      lookahead2W(162);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 55403)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (ParseException p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (ParseException p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 45675:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 44651:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 50283:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 99435:                     // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 108139:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 52843:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  private void parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(36);                // S^WS | '(:' | 'boundary-space'
    consume(89);                    // 'boundary-space'
    lookahead1W(127);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 204:                       // 'preserve'
      consume(204);                 // 'preserve'
      break;
    default:
      consume(230);                 // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  private void parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(108);                   // 'default'
    lookahead1W(40);                // S^WS | '(:' | 'collation'
    consume(96);                    // 'collation'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  private void try_DefaultCollationDecl()
  {
    consumeT(107);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(108);                  // 'default'
    lookahead1W(40);                // S^WS | '(:' | 'collation'
    consumeT(96);                   // 'collation'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
  }

  private void parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(35);                // S^WS | '(:' | 'base-uri'
    consume(87);                    // 'base-uri'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  private void parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'construction'
    consume(98);                    // 'construction'
    lookahead1W(127);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 230:                       // 'strip'
      consume(230);                 // 'strip'
      break;
    default:
      consume(204);                 // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  private void parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(62);                // S^WS | '(:' | 'ordering'
    consume(194);                   // 'ordering'
    lookahead1W(125);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 193:                       // 'ordered'
      consume(193);                 // 'ordered'
      break;
    default:
      consume(244);                 // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  private void parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(108);                   // 'default'
    lookahead1W(61);                // S^WS | '(:' | 'order'
    consume(192);                   // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(122);                   // 'empty'
    lookahead1W(115);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 144:                       // 'greatest'
      consume(144);                 // 'greatest'
      break;
    default:
      consume(166);                 // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  private void try_EmptyOrderDecl()
  {
    consumeT(107);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(108);                  // 'default'
    lookahead1W(61);                // S^WS | '(:' | 'order'
    consumeT(192);                  // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(122);                  // 'empty'
    lookahead1W(115);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 144:                       // 'greatest'
      consumeT(144);                // 'greatest'
      break;
    default:
      consumeT(166);                // 'least'
    }
  }

  private void parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'copy-namespaces'
    consume(103);                   // 'copy-namespaces'
    lookahead1W(122);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(27);                // S^WS | '(:' | ','
    consume(40);                    // ','
    lookahead1W(117);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  private void parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 204:                       // 'preserve'
      consume(204);                 // 'preserve'
      break;
    default:
      consume(183);                 // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  private void parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 153:                       // 'inherit'
      consume(153);                 // 'inherit'
      break;
    default:
      consume(182);                 // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  private void parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(108);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 105:                       // 'decimal-format'
      consume(105);                 // 'decimal-format'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      consume(108);                 // 'default'
      lookahead1W(45);              // S^WS | '(:' | 'decimal-format'
      consume(105);                 // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(172);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'exponent-separator' | 'grouping-separator' | 'infinity' | 'minus-sign' |
                                    // 'pattern-separator' | 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 52)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  private void parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 106:                       // 'decimal-separator'
      consume(106);                 // 'decimal-separator'
      break;
    case 146:                       // 'grouping-separator'
      consume(146);                 // 'grouping-separator'
      break;
    case 152:                       // 'infinity'
      consume(152);                 // 'infinity'
      break;
    case 172:                       // 'minus-sign'
      consume(172);                 // 'minus-sign'
      break;
    case 68:                        // 'NaN'
      consume(68);                  // 'NaN'
      break;
    case 200:                       // 'percent'
      consume(200);                 // 'percent'
      break;
    case 199:                       // 'per-mille'
      consume(199);                 // 'per-mille'
      break;
    case 263:                       // 'zero-digit'
      consume(263);                 // 'zero-digit'
      break;
    case 115:                       // 'digit'
      consume(115);                 // 'digit'
      break;
    case 198:                       // 'pattern-separator'
      consume(198);                 // 'pattern-separator'
      break;
    default:
      consume(131);                 // 'exponent-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  private void parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 150:                       // 'import'
      lookahead2W(120);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 109718:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  private void parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    consume(150);                   // 'import'
    lookahead1W(65);                // S^WS | '(:' | 'schema'
    consume(214);                   // 'schema'
    lookahead1W(131);               // StringLiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 4)                    // StringLiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(101);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 85)                   // 'at'
    {
      consume(85);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(93);            // S^WS | '(:' | ',' | ';'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  private void parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 177:                       // 'namespace'
      consume(177);                 // 'namespace'
      lookahead1W(174);             // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
      whitespace();
      parse_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
      break;
    default:
      consume(108);                 // 'default'
      lookahead1W(47);              // S^WS | '(:' | 'element'
      consume(120);                 // 'element'
      lookahead1W(57);              // S^WS | '(:' | 'namespace'
      consume(177);                 // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  private void parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    consume(150);                   // 'import'
    lookahead1W(56);                // S^WS | '(:' | 'module'
    consume(175);                   // 'module'
    lookahead1W(82);                // StringLiteral | S^WS | '(:' | 'namespace'
    if (l1 == 177)                  // 'namespace'
    {
      consume(177);                 // 'namespace'
      lookahead1W(174);             // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
      whitespace();
      parse_NCName();
      lookahead1W(32);              // S^WS | '(:' | '='
      consume(60);                  // '='
    }
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(101);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 85)                   // 'at'
    {
      consume(85);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      for (;;)
      {
        lookahead1W(93);            // S^WS | '(:' | ',' | ';'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  private void parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consume(177);                   // 'namespace'
    lookahead1W(174);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where'
    whitespace();
    parse_NCName();
    lookahead1W(32);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  private void parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(108);                   // 'default'
    lookahead1W(109);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 120:                       // 'element'
      consume(120);                 // 'element'
      break;
    default:
      consume(142);                 // 'function'
    }
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consume(177);                   // 'namespace'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  private void try_DefaultNamespaceDecl()
  {
    consumeT(107);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(108);                  // 'default'
    lookahead1W(109);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 120:                       // 'element'
      consumeT(120);                // 'element'
      break;
    default:
      consumeT(142);                // 'function'
    }
    lookahead1W(57);                // S^WS | '(:' | 'namespace'
    consumeT(177);                  // 'namespace'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
  }

  private void parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(51);                // S^WS | '(:' | 'ft-option'
    consume(138);                   // 'ft-option'
    lookahead1W(74);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  private void parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    consume(107);                   // 'declare'
    for (;;)
    {
      lookahead1W(146);             // S^WS | '%' | '(:' | 'function' | 'updating' | 'variable'
      if (l1 != 32                  // '%'
       && l1 != 246)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 246:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 251:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    default:
      whitespace();
      parse_FunctionDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  private void parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    consume(246);                   // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  private void parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    consume(32);                    // '%'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(155);               // S^WS | '%' | '(' | '(:' | 'function' | 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      consume(34);                  // '('
      lookahead1W(144);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(144);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  private void try_Annotation()
  {
    consumeT(32);                   // '%'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_EQName();
    lookahead1W(155);               // S^WS | '%' | '(' | '(:' | 'function' | 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      consumeT(34);                 // '('
      lookahead1W(144);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(144);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      consumeT(37);                 // ')'
    }
  }

  private void parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    consume(251);                   // 'variable'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(138);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(100);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 51:                        // ':='
      consume(51);                  // ':='
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(132);                 // 'external'
      lookahead1W(98);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consume(51);                // ':='
        lookahead1W(236);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  private void parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  private void parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  private void parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(43);                // S^WS | '(:' | 'context'
    consume(101);                   // 'context'
    lookahead1W(54);                // S^WS | '(:' | 'item'
    consume(161);                   // 'item'
    lookahead1W(138);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 83)                   // 'as'
    {
      consume(83);                  // 'as'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(100);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 51:                        // ':='
      consume(51);                  // ':='
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(132);                 // 'external'
      lookahead1W(98);              // S^WS | '(:' | ':=' | ';'
      if (l1 == 51)                 // ':='
      {
        consume(51);                // ':='
        lookahead1W(236);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  private void parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    consume(142);                   // 'function'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(85);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(139);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 83)                   // 'as'
    {
      consume(83);                  // 'as'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(113);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      whitespace();
      parse_FunctionBody();
      break;
    default:
      consume(132);                 // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  private void parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  private void try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  private void parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(136);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  private void try_Param()
  {
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_EQName();
    lookahead1W(136);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  private void parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  private void try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  private void parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    consume(264);                   // '{'
    lookahead1W(241);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  private void try_EnclosedExpr()
  {
    consumeT(264);                  // '{'
    lookahead1W(241);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      try_Expr();
    }
    consumeT(268);                  // '}'
  }

  private void parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(60);                // S^WS | '(:' | 'option'
    consume(190);                   // 'option'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  private void parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(163);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 210)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  private void try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(163);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 210)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  private void parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(134);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
      parse_ForClause();
      break;
    case 167:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  private void try_InitialClause()
  {
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(134);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
      try_ForClause();
      break;
    case 167:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  private void parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 136:                       // 'for'
    case 167:                       // 'let'
      parse_InitialClause();
      break;
    case 255:                       // 'where'
      parse_WhereClause();
      break;
    case 145:                       // 'group'
      parse_GroupByClause();
      break;
    case 104:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  private void try_IntermediateClause()
  {
    switch (l1)
    {
    case 136:                       // 'for'
    case 167:                       // 'let'
      try_InitialClause();
      break;
    case 255:                       // 'where'
      try_WhereClause();
      break;
    case 145:                       // 'group'
      try_GroupByClause();
      break;
    case 104:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  private void parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    consume(136);                   // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  private void try_ForClause()
  {
    consumeT(136);                  // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  private void parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(156);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(148);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 77)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(141);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 85)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(116);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 217)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  private void try_ForBinding()
  {
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(156);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(148);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 77)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(141);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 85)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(116);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 217)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    consume(77);                    // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(122);                   // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  private void try_AllowingEmpty()
  {
    consumeT(77);                   // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(122);                  // 'empty'
  }

  private void parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    consume(85);                    // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  private void try_PositionalVar()
  {
    consumeT(85);                   // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  private void parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    consume(217);                   // 'score'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  private void try_FTScoreVar()
  {
    consumeT(217);                  // 'score'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  private void parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    consume(167);                   // 'let'
    lookahead1W(87);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(87);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  private void try_LetClause()
  {
    consumeT(167);                  // 'let'
    lookahead1W(87);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(87);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  private void parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 31:                        // '$'
      consume(31);                  // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(99);              // S^WS | '(:' | ':=' | 'as'
      if (l1 == 83)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(30);                // S^WS | '(:' | ':='
    consume(51);                    // ':='
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  private void try_LetBinding()
  {
    switch (l1)
    {
    case 31:                        // '$'
      consumeT(31);                 // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_VarName();
      lookahead1W(99);              // S^WS | '(:' | ':=' | 'as'
      if (l1 == 83)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(30);                // S^WS | '(:' | ':='
    consumeT(51);                   // ':='
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    consume(136);                   // 'for'
    lookahead1W(129);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 240:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  private void try_WindowClause()
  {
    consumeT(136);                  // 'for'
    lookahead1W(129);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 240:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  private void parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    consume(240);                   // 'tumbling'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consume(257);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    whitespace();
    parse_WindowStartCondition();
    lookahead1W(168);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 125                   // 'end'
     || l1 == 189)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  private void try_TumblingWindowClause()
  {
    consumeT(240);                  // 'tumbling'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consumeT(257);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    try_WindowStartCondition();
    lookahead1W(168);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 125                   // 'end'
     || l1 == 189)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  private void parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    consume(223);                   // 'sliding'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consume(257);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    whitespace();
    parse_WindowStartCondition();
    lookahead1W(111);               // S^WS | '(:' | 'end' | 'only'
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  private void try_SlidingWindowClause()
  {
    consumeT(223);                  // 'sliding'
    lookahead1W(77);                // S^WS | '(:' | 'window'
    consumeT(257);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(66);                // S^WS | '(:' | 'start'
    try_WindowStartCondition();
    lookahead1W(111);               // S^WS | '(:' | 'end' | 'only'
    try_WindowEndCondition();
  }

  private void parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    consume(226);                   // 'start'
    lookahead1W(154);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consume(254);                   // 'when'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  private void try_WindowStartCondition()
  {
    consumeT(226);                  // 'start'
    lookahead1W(154);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consumeT(254);                  // 'when'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 189)                  // 'only'
    {
      consume(189);                 // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consume(125);                   // 'end'
    lookahead1W(154);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consume(254);                   // 'when'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  private void try_WindowEndCondition()
  {
    if (l1 == 189)                  // 'only'
    {
      consumeT(189);                // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consumeT(125);                  // 'end'
    lookahead1W(154);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(75);                // S^WS | '(:' | 'when'
    consumeT(254);                  // 'when'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 85)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(143);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 205)                  // 'previous'
    {
      consume(205);                 // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(121);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 180)                  // 'next'
    {
      consume(180);                 // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  private void try_WindowVars()
  {
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_CurrentItem();
    }
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 85)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(143);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 205)                  // 'previous'
    {
      consumeT(205);                // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_PreviousItem();
    }
    lookahead1W(121);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 180)                  // 'next'
    {
      consumeT(180);                // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_NextItem();
    }
  }

  private void parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  private void try_CurrentItem()
  {
    try_EQName();
  }

  private void parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  private void try_PreviousItem()
  {
    try_EQName();
  }

  private void parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  private void try_NextItem()
  {
    try_EQName();
  }

  private void parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    consume(104);                   // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  private void try_CountClause()
  {
    consumeT(104);                  // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  private void parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    consume(255);                   // 'where'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  private void try_WhereClause()
  {
    consumeT(255);                  // 'where'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    consume(145);                   // 'group'
    lookahead1W(37);                // S^WS | '(:' | 'by'
    consume(90);                    // 'by'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  private void try_GroupByClause()
  {
    consumeT(145);                  // 'group'
    lookahead1W(37);                // S^WS | '(:' | 'by'
    consumeT(90);                   // 'by'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_GroupingSpecList();
  }

  private void parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  private void try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_GroupingSpec();
    }
  }

  private void parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 2591                  // '$' URIQualifiedName
     || lk == 7711                  // '$' QName^Token
     || lk == 39967                 // '$' 'ancestor'
     || lk == 40479                 // '$' 'ancestor-or-self'
     || lk == 40991                 // '$' 'and'
     || lk == 42527                 // '$' 'as'
     || lk == 43039                 // '$' 'ascending'
     || lk == 43551                 // '$' 'at'
     || lk == 44063                 // '$' 'attribute'
     || lk == 46623                 // '$' 'case'
     || lk == 47135                 // '$' 'cast'
     || lk == 47647                 // '$' 'castable'
     || lk == 48671                 // '$' 'child'
     || lk == 49183                 // '$' 'collation'
     || lk == 49695                 // '$' 'comment'
     || lk == 52255                 // '$' 'copy'
     || lk == 53279                 // '$' 'count'
     || lk == 54815                 // '$' 'declare'
     || lk == 55327                 // '$' 'default'
     || lk == 55839                 // '$' 'delete'
     || lk == 56351                 // '$' 'descendant'
     || lk == 56863                 // '$' 'descendant-or-self'
     || lk == 57375                 // '$' 'descending'
     || lk == 59935                 // '$' 'div'
     || lk == 60447                 // '$' 'document'
     || lk == 60959                 // '$' 'document-node'
     || lk == 61471                 // '$' 'element'
     || lk == 61983                 // '$' 'else'
     || lk == 62495                 // '$' 'empty'
     || lk == 63007                 // '$' 'empty-sequence'
     || lk == 64031                 // '$' 'end'
     || lk == 65055                 // '$' 'eq'
     || lk == 65567                 // '$' 'every'
     || lk == 66591                 // '$' 'except'
     || lk == 68639                 // '$' 'following'
     || lk == 69151                 // '$' 'following-sibling'
     || lk == 69663                 // '$' 'for'
     || lk == 72735                 // '$' 'function'
     || lk == 73247                 // '$' 'ge'
     || lk == 74271                 // '$' 'group'
     || lk == 75295                 // '$' 'gt'
     || lk == 75807                 // '$' 'idiv'
     || lk == 76319                 // '$' 'if'
     || lk == 76831                 // '$' 'import'
     || lk == 79391                 // '$' 'insert'
     || lk == 79903                 // '$' 'instance'
     || lk == 80415                 // '$' 'intersect'
     || lk == 81439                 // '$' 'invoke'
     || lk == 81951                 // '$' 'is'
     || lk == 82463                 // '$' 'item'
     || lk == 84511                 // '$' 'le'
     || lk == 85535                 // '$' 'let'
     || lk == 87071                 // '$' 'lt'
     || lk == 88607                 // '$' 'mod'
     || lk == 89119                 // '$' 'modify'
     || lk == 89631                 // '$' 'module'
     || lk == 90655                 // '$' 'namespace'
     || lk == 91167                 // '$' 'namespace-node'
     || lk == 91679                 // '$' 'ne'
     || lk == 94239                 // '$' 'node'
     || lk == 96799                 // '$' 'only'
     || lk == 97823                 // '$' 'or'
     || lk == 98335                 // '$' 'order'
     || lk == 98847                 // '$' 'ordered'
     || lk == 100895                // '$' 'parent'
     || lk == 103455                // '$' 'preceding'
     || lk == 103967                // '$' 'preceding-sibling'
     || lk == 105503                // '$' 'processing-instruction'
     || lk == 106527                // '$' 'rename'
     || lk == 107039                // '$' 'replace'
     || lk == 107551                // '$' 'return'
     || lk == 109087                // '$' 'satisfies'
     || lk == 110111                // '$' 'schema-attribute'
     || lk == 110623                // '$' 'schema-element'
     || lk == 111647                // '$' 'self'
     || lk == 114719                // '$' 'some'
     || lk == 115231                // '$' 'stable'
     || lk == 115743                // '$' 'start'
     || lk == 118303                // '$' 'switch'
     || lk == 118815                // '$' 'text'
     || lk == 120863                // '$' 'to'
     || lk == 121375                // '$' 'transform'
     || lk == 121887                // '$' 'treat'
     || lk == 122399                // '$' 'try'
     || lk == 123935                // '$' 'typeswitch'
     || lk == 124447                // '$' 'union'
     || lk == 124959                // '$' 'unordered'
     || lk == 125471                // '$' 'update'
     || lk == 127519                // '$' 'validate'
     || lk == 130591                // '$' 'where'
     || lk == 132127                // '$' 'with'
     || lk == 134175)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(171);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 51              // ':='
           || l1 == 83)             // 'as'
          {
            if (l1 == 83)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(30);        // S^WS | '(:' | ':='
            consumeT(51);           // ':='
            lookahead1W(236);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
            try_ExprSingle();
          }
          lookahead1W(166);         // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
          if (l1 == 96)             // 'collation'
          {
            consumeT(96);           // 'collation'
            lookahead1W(19);        // StringLiteral | S^WS | '(:'
            try_URILiteral();
          }
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(2, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      parse_GroupingVariable();
      lookahead1W(171);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 51                  // ':='
       || l1 == 83)                 // 'as'
      {
        if (l1 == 83)               // 'as'
        {
          whitespace();
          parse_TypeDeclaration();
        }
        lookahead1W(30);            // S^WS | '(:' | ':='
        consume(51);                // ':='
        lookahead1W(236);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
      lookahead1W(166);             // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
      if (l1 == 96)                 // 'collation'
      {
        consume(96);                // 'collation'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        whitespace();
        parse_URILiteral();
      }
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  private void try_GroupingSpec()
  {
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 2591                  // '$' URIQualifiedName
     || lk == 7711                  // '$' QName^Token
     || lk == 39967                 // '$' 'ancestor'
     || lk == 40479                 // '$' 'ancestor-or-self'
     || lk == 40991                 // '$' 'and'
     || lk == 42527                 // '$' 'as'
     || lk == 43039                 // '$' 'ascending'
     || lk == 43551                 // '$' 'at'
     || lk == 44063                 // '$' 'attribute'
     || lk == 46623                 // '$' 'case'
     || lk == 47135                 // '$' 'cast'
     || lk == 47647                 // '$' 'castable'
     || lk == 48671                 // '$' 'child'
     || lk == 49183                 // '$' 'collation'
     || lk == 49695                 // '$' 'comment'
     || lk == 52255                 // '$' 'copy'
     || lk == 53279                 // '$' 'count'
     || lk == 54815                 // '$' 'declare'
     || lk == 55327                 // '$' 'default'
     || lk == 55839                 // '$' 'delete'
     || lk == 56351                 // '$' 'descendant'
     || lk == 56863                 // '$' 'descendant-or-self'
     || lk == 57375                 // '$' 'descending'
     || lk == 59935                 // '$' 'div'
     || lk == 60447                 // '$' 'document'
     || lk == 60959                 // '$' 'document-node'
     || lk == 61471                 // '$' 'element'
     || lk == 61983                 // '$' 'else'
     || lk == 62495                 // '$' 'empty'
     || lk == 63007                 // '$' 'empty-sequence'
     || lk == 64031                 // '$' 'end'
     || lk == 65055                 // '$' 'eq'
     || lk == 65567                 // '$' 'every'
     || lk == 66591                 // '$' 'except'
     || lk == 68639                 // '$' 'following'
     || lk == 69151                 // '$' 'following-sibling'
     || lk == 69663                 // '$' 'for'
     || lk == 72735                 // '$' 'function'
     || lk == 73247                 // '$' 'ge'
     || lk == 74271                 // '$' 'group'
     || lk == 75295                 // '$' 'gt'
     || lk == 75807                 // '$' 'idiv'
     || lk == 76319                 // '$' 'if'
     || lk == 76831                 // '$' 'import'
     || lk == 79391                 // '$' 'insert'
     || lk == 79903                 // '$' 'instance'
     || lk == 80415                 // '$' 'intersect'
     || lk == 81439                 // '$' 'invoke'
     || lk == 81951                 // '$' 'is'
     || lk == 82463                 // '$' 'item'
     || lk == 84511                 // '$' 'le'
     || lk == 85535                 // '$' 'let'
     || lk == 87071                 // '$' 'lt'
     || lk == 88607                 // '$' 'mod'
     || lk == 89119                 // '$' 'modify'
     || lk == 89631                 // '$' 'module'
     || lk == 90655                 // '$' 'namespace'
     || lk == 91167                 // '$' 'namespace-node'
     || lk == 91679                 // '$' 'ne'
     || lk == 94239                 // '$' 'node'
     || lk == 96799                 // '$' 'only'
     || lk == 97823                 // '$' 'or'
     || lk == 98335                 // '$' 'order'
     || lk == 98847                 // '$' 'ordered'
     || lk == 100895                // '$' 'parent'
     || lk == 103455                // '$' 'preceding'
     || lk == 103967                // '$' 'preceding-sibling'
     || lk == 105503                // '$' 'processing-instruction'
     || lk == 106527                // '$' 'rename'
     || lk == 107039                // '$' 'replace'
     || lk == 107551                // '$' 'return'
     || lk == 109087                // '$' 'satisfies'
     || lk == 110111                // '$' 'schema-attribute'
     || lk == 110623                // '$' 'schema-element'
     || lk == 111647                // '$' 'self'
     || lk == 114719                // '$' 'some'
     || lk == 115231                // '$' 'stable'
     || lk == 115743                // '$' 'start'
     || lk == 118303                // '$' 'switch'
     || lk == 118815                // '$' 'text'
     || lk == 120863                // '$' 'to'
     || lk == 121375                // '$' 'transform'
     || lk == 121887                // '$' 'treat'
     || lk == 122399                // '$' 'try'
     || lk == 123935                // '$' 'typeswitch'
     || lk == 124447                // '$' 'union'
     || lk == 124959                // '$' 'unordered'
     || lk == 125471                // '$' 'update'
     || lk == 127519                // '$' 'validate'
     || lk == 130591                // '$' 'where'
     || lk == 132127                // '$' 'with'
     || lk == 134175)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(171);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 51              // ':='
           || l1 == 83)             // 'as'
          {
            if (l1 == 83)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(30);        // S^WS | '(:' | ':='
            consumeT(51);           // ':='
            lookahead1W(236);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
            try_ExprSingle();
          }
          lookahead1W(166);         // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
          if (l1 == 96)             // 'collation'
          {
            consumeT(96);           // 'collation'
            lookahead1W(19);        // StringLiteral | S^WS | '(:'
            try_URILiteral();
          }
          memoize(2, e0A, -1);
          lk = -3;
        }
        catch (ParseException p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      try_GroupingVariable();
      lookahead1W(171);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 51                  // ':='
       || l1 == 83)                 // 'as'
      {
        if (l1 == 83)               // 'as'
        {
          try_TypeDeclaration();
        }
        lookahead1W(30);            // S^WS | '(:' | ':='
        consumeT(51);               // ':='
        lookahead1W(236);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_ExprSingle();
      }
      lookahead1W(166);             // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
      if (l1 == 96)                 // 'collation'
      {
        consumeT(96);               // 'collation'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        try_URILiteral();
      }
      break;
    case -3:
      break;
    default:
      try_ExprSingle();
    }
  }

  private void parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  private void try_GroupingVariable()
  {
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  private void parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 192:                       // 'order'
      consume(192);                 // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consume(90);                  // 'by'
      break;
    default:
      consume(225);                 // 'stable'
      lookahead1W(61);              // S^WS | '(:' | 'order'
      consume(192);                 // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consume(90);                  // 'by'
    }
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  private void try_OrderByClause()
  {
    switch (l1)
    {
    case 192:                       // 'order'
      consumeT(192);                // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consumeT(90);                 // 'by'
      break;
    default:
      consumeT(225);                // 'stable'
      lookahead1W(61);              // S^WS | '(:' | 'order'
      consumeT(192);                // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      consumeT(90);                 // 'by'
    }
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_OrderSpecList();
  }

  private void parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  private void try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(165);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_OrderSpec();
    }
  }

  private void parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    lookahead1W(173);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  private void try_OrderSpec()
  {
    try_ExprSingle();
    lookahead1W(173);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    try_OrderModifier();
  }

  private void parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 84                    // 'ascending'
     || l1 == 112)                  // 'descending'
    {
      switch (l1)
      {
      case 84:                      // 'ascending'
        consume(84);                // 'ascending'
        break;
      default:
        consume(112);               // 'descending'
      }
    }
    lookahead1W(169);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 122)                  // 'empty'
    {
      consume(122);                 // 'empty'
      lookahead1W(115);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 144:                     // 'greatest'
        consume(144);               // 'greatest'
        break;
      default:
        consume(166);               // 'least'
      }
    }
    lookahead1W(166);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 96)                   // 'collation'
    {
      consume(96);                  // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  private void try_OrderModifier()
  {
    if (l1 == 84                    // 'ascending'
     || l1 == 112)                  // 'descending'
    {
      switch (l1)
      {
      case 84:                      // 'ascending'
        consumeT(84);               // 'ascending'
        break;
      default:
        consumeT(112);              // 'descending'
      }
    }
    lookahead1W(169);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 122)                  // 'empty'
    {
      consumeT(122);                // 'empty'
      lookahead1W(115);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 144:                     // 'greatest'
        consumeT(144);              // 'greatest'
        break;
      default:
        consumeT(166);              // 'least'
      }
    }
    lookahead1W(166);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 96)                   // 'collation'
    {
      consumeT(96);                 // 'collation'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
    }
  }

  private void parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    consume(210);                   // 'return'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  private void try_ReturnClause()
  {
    consumeT(210);                  // 'return'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 224:                       // 'some'
      consume(224);                 // 'some'
      break;
    default:
      consume(128);                 // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_QuantifiedVarDecl();
    for (;;)
    {
      lookahead1W(96);              // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_QuantifiedVarDecl();
    }
    consume(213);                   // 'satisfies'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  private void try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 224:                       // 'some'
      consumeT(224);                // 'some'
      break;
    default:
      consumeT(128);                // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_QuantifiedVarDecl();
    for (;;)
    {
      lookahead1W(96);              // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_QuantifiedVarDecl();
    }
    consumeT(213);                  // 'satisfies'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_QuantifiedVarDecl()
  {
    eventHandler.startNonterminal("QuantifiedVarDecl", e0);
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consume(151);                   // 'in'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedVarDecl", e0);
  }

  private void try_QuantifiedVarDecl()
  {
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(103);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 83)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(52);                // S^WS | '(:' | 'in'
    consumeT(151);                  // 'in'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    consume(231);                   // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(108);                   // 'default'
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consume(210);                   // 'return'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  private void try_SwitchExpr()
  {
    consumeT(231);                  // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(108);                  // 'default'
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consumeT(210);                  // 'return'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      consume(91);                  // 'case'
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SwitchCaseOperand();
      lookahead1W(107);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(210);                   // 'return'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  private void try_SwitchCaseClause()
  {
    for (;;)
    {
      consumeT(91);                 // 'case'
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_SwitchCaseOperand();
      lookahead1W(107);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(210);                  // 'return'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  private void try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  private void parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    consume(242);                   // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consume(108);                   // 'default'
    lookahead1W(86);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consume(210);                   // 'return'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  private void try_TypeswitchExpr()
  {
    consumeT(242);                  // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_CaseClause();
      lookahead1W(106);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 91)                 // 'case'
      {
        break;
      }
    }
    consumeT(108);                  // 'default'
    lookahead1W(86);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_VarName();
    }
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consumeT(210);                  // 'return'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    consume(91);                    // 'case'
    lookahead1W(230);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
    }
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    consume(210);                   // 'return'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  private void try_CaseClause()
  {
    consumeT(91);                   // 'case'
    lookahead1W(230);               // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
    }
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SequenceTypeUnion();
    consumeT(210);                  // 'return'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(128);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consume(266);                 // '|'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  private void try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(128);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consumeT(266);                // '|'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  private void parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    consume(149);                   // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consume(233);                   // 'then'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consume(121);                   // 'else'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  private void try_IfExpr()
  {
    consumeT(149);                  // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consumeT(233);                  // 'then'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consumeT(121);                  // 'else'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_BasexIfExpr()
  {
    eventHandler.startNonterminal("BasexIfExpr", e0);
    consume(149);                   // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consume(233);                   // 'then'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("BasexIfExpr", e0);
  }

  private void try_BasexIfExpr()
  {
    consumeT(149);                  // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(70);                // S^WS | '(:' | 'then'
    consumeT(233);                  // 'then'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(188);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'catch' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 94)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  private void try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(188);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'catch' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 94)                 // 'catch'
      {
        break;
      }
    }
  }

  private void parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    consume(239);                   // 'try'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedTryTargetExpr();
    eventHandler.endNonterminal("TryClause", e0);
  }

  private void try_TryClause()
  {
    consumeT(239);                  // 'try'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedTryTargetExpr();
  }

  private void parse_EnclosedTryTargetExpr()
  {
    eventHandler.startNonterminal("EnclosedTryTargetExpr", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("EnclosedTryTargetExpr", e0);
  }

  private void try_EnclosedTryTargetExpr()
  {
    try_EnclosedExpr();
  }

  private void parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    consume(94);                    // 'catch'
    lookahead1W(224);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_CatchErrorList();
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CatchClause", e0);
  }

  private void try_CatchClause()
  {
    consumeT(94);                   // 'catch'
    lookahead1W(224);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_CatchErrorList();
    try_EnclosedExpr();
  }

  private void parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(130);             // S^WS | '(:' | '{' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consume(266);                 // '|'
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  private void try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(130);             // S^WS | '(:' | '{' | '|'
      if (l1 != 266)                // '|'
      {
        break;
      }
      consumeT(266);                // '|'
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_NameTest();
    }
  }

  private void parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      switch (l1)
      {
      case 191:                     // 'or'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(191);          // 'or'
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_AndExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      consume(191);                 // 'or'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  private void try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      switch (l1)
      {
      case 191:                     // 'or'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(191);          // 'or'
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_AndExpr();
            memoize(3, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(3, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      consumeT(191);                // 'or'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AndExpr();
    }
  }

  private void parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      switch (l1)
      {
      case 80:                      // 'and'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(80);           // 'and'
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_ComparisonExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(4, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      consume(80);                  // 'and'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  private void try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      switch (l1)
      {
      case 80:                      // 'and'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(4, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(80);           // 'and'
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_ComparisonExpr();
            memoize(4, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(4, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      consumeT(80);                 // 'and'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_ComparisonExpr();
    }
  }

  private void parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    switch (l1)
    {
    case 27:                        // '!='
    case 53:                        // '<'
    case 57:                        // '<<'
    case 58:                        // '<='
    case 60:                        // '='
    case 62:                        // '>'
    case 63:                        // '>='
    case 64:                        // '>>'
    case 127:                       // 'eq'
    case 143:                       // 'ge'
    case 147:                       // 'gt'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 170:                       // 'lt'
    case 179:                       // 'ne'
      lookahead2W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk != 25                    // EOF
     && lk != 37                    // ')'
     && lk != 38                    // '*'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 70                    // ']'
     && lk != 75                    // 'after'
     && lk != 80                    // 'and'
     && lk != 83                    // 'as'
     && lk != 84                    // 'ascending'
     && lk != 88                    // 'before'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 96                    // 'collation'
     && lk != 99                    // 'contains'
     && lk != 104                   // 'count'
     && lk != 108                   // 'default'
     && lk != 112                   // 'descending'
     && lk != 117                   // 'div'
     && lk != 121                   // 'else'
     && lk != 122                   // 'empty'
     && lk != 125                   // 'end'
     && lk != 130                   // 'except'
     && lk != 136                   // 'for'
     && lk != 145                   // 'group'
     && lk != 148                   // 'idiv'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'intersect'
     && lk != 158                   // 'into'
     && lk != 167                   // 'let'
     && lk != 173                   // 'mod'
     && lk != 174                   // 'modify'
     && lk != 189                   // 'only'
     && lk != 191                   // 'or'
     && lk != 192                   // 'order'
     && lk != 196                   // 'paragraphs'
     && lk != 210                   // 'return'
     && lk != 213                   // 'satisfies'
     && lk != 221                   // 'sentences'
     && lk != 225                   // 'stable'
     && lk != 226                   // 'start'
     && lk != 235                   // 'times'
     && lk != 236                   // 'to'
     && lk != 237                   // 'transform'
     && lk != 238                   // 'treat'
     && lk != 243                   // 'union'
     && lk != 255                   // 'where'
     && lk != 258                   // 'with'
     && lk != 261                   // 'words'
     && lk != 266                   // '|'
     && lk != 267                   // '||'
     && lk != 268                   // '}'
     && lk != 269)                  // '}`'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          switch (l1)
          {
          case 127:                 // 'eq'
          case 143:                 // 'ge'
          case 147:                 // 'gt'
          case 165:                 // 'le'
          case 170:                 // 'lt'
          case 179:                 // 'ne'
            try_ValueComp();
            break;
          case 57:                  // '<<'
          case 64:                  // '>>'
          case 160:                 // 'is'
            try_NodeComp();
            break;
          default:
            try_GeneralComp();
          }
          lookahead1W(235);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_FTContainsExpr();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0, lk);
      }
    }
    if (lk == -1)
    {
      switch (l1)
      {
      case 127:                     // 'eq'
      case 143:                     // 'ge'
      case 147:                     // 'gt'
      case 165:                     // 'le'
      case 170:                     // 'lt'
      case 179:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 57:                      // '<<'
      case 64:                      // '>>'
      case 160:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  private void try_ComparisonExpr()
  {
    try_FTContainsExpr();
    switch (l1)
    {
    case 27:                        // '!='
    case 53:                        // '<'
    case 57:                        // '<<'
    case 58:                        // '<='
    case 60:                        // '='
    case 62:                        // '>'
    case 63:                        // '>='
    case 64:                        // '>>'
    case 127:                       // 'eq'
    case 143:                       // 'ge'
    case 147:                       // 'gt'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 170:                       // 'lt'
    case 179:                       // 'ne'
      lookahead2W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk != 25                    // EOF
     && lk != 37                    // ')'
     && lk != 38                    // '*'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 70                    // ']'
     && lk != 75                    // 'after'
     && lk != 80                    // 'and'
     && lk != 83                    // 'as'
     && lk != 84                    // 'ascending'
     && lk != 88                    // 'before'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 96                    // 'collation'
     && lk != 99                    // 'contains'
     && lk != 104                   // 'count'
     && lk != 108                   // 'default'
     && lk != 112                   // 'descending'
     && lk != 117                   // 'div'
     && lk != 121                   // 'else'
     && lk != 122                   // 'empty'
     && lk != 125                   // 'end'
     && lk != 130                   // 'except'
     && lk != 136                   // 'for'
     && lk != 145                   // 'group'
     && lk != 148                   // 'idiv'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'intersect'
     && lk != 158                   // 'into'
     && lk != 167                   // 'let'
     && lk != 173                   // 'mod'
     && lk != 174                   // 'modify'
     && lk != 189                   // 'only'
     && lk != 191                   // 'or'
     && lk != 192                   // 'order'
     && lk != 196                   // 'paragraphs'
     && lk != 210                   // 'return'
     && lk != 213                   // 'satisfies'
     && lk != 221                   // 'sentences'
     && lk != 225                   // 'stable'
     && lk != 226                   // 'start'
     && lk != 235                   // 'times'
     && lk != 236                   // 'to'
     && lk != 237                   // 'transform'
     && lk != 238                   // 'treat'
     && lk != 243                   // 'union'
     && lk != 255                   // 'where'
     && lk != 258                   // 'with'
     && lk != 261                   // 'words'
     && lk != 266                   // '|'
     && lk != 267                   // '||'
     && lk != 268                   // '}'
     && lk != 269)                  // '}`'
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          switch (l1)
          {
          case 127:                 // 'eq'
          case 143:                 // 'ge'
          case 147:                 // 'gt'
          case 165:                 // 'le'
          case 170:                 // 'lt'
          case 179:                 // 'ne'
            try_ValueComp();
            break;
          case 57:                  // '<<'
          case 64:                  // '>>'
          case 160:                 // 'is'
            try_NodeComp();
            break;
          default:
            try_GeneralComp();
          }
          lookahead1W(235);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_FTContainsExpr();
          memoize(5, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(5, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      switch (l1)
      {
      case 127:                     // 'eq'
      case 143:                     // 'ge'
      case 147:                     // 'gt'
      case 165:                     // 'le'
      case 170:                     // 'lt'
      case 179:                     // 'ne'
        try_ValueComp();
        break;
      case 57:                      // '<<'
      case 64:                      // '>>'
      case 160:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_FTContainsExpr();
    }
  }

  private void parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    switch (l1)
    {
    case 99:                        // 'contains'
      lookahead2W(69);              // S^WS | '(:' | 'text'
      break;
    default:
      lk = l1;
    }
    if (lk == 118883)               // 'contains' 'text'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(99);             // 'contains'
          lookahead1W(69);          // S^WS | '(:' | 'text'
          consumeT(232);            // 'text'
          lookahead1W(153);         // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
          try_FTSelection();
          if (l1 == 259)            // 'without'
          {
            try_FTIgnoreOption();
          }
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(6, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(99);                  // 'contains'
      lookahead1W(69);              // S^WS | '(:' | 'text'
      consume(232);                 // 'text'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 259)                // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  private void try_FTContainsExpr()
  {
    try_StringConcatExpr();
    switch (l1)
    {
    case 99:                        // 'contains'
      lookahead2W(69);              // S^WS | '(:' | 'text'
      break;
    default:
      lk = l1;
    }
    if (lk == 118883)               // 'contains' 'text'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(99);             // 'contains'
          lookahead1W(69);          // S^WS | '(:' | 'text'
          consumeT(232);            // 'text'
          lookahead1W(153);         // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
          try_FTSelection();
          if (l1 == 259)            // 'without'
          {
            try_FTIgnoreOption();
          }
          memoize(6, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(6, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(99);                 // 'contains'
      lookahead1W(69);              // S^WS | '(:' | 'text'
      consumeT(232);                // 'text'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 259)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  private void parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 267:                     // '||'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(7, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(267);          // '||'
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_RangeExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(7, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      consume(267);                 // '||'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  private void try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 267:                     // '||'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(7, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(267);          // '||'
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_RangeExpr();
            memoize(7, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(7, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      consumeT(267);                // '||'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_RangeExpr();
    }
  }

  private void parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    switch (l1)
    {
    case 236:                       // 'to'
      lookahead2W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk != 25                    // EOF
     && lk != 27                    // '!='
     && lk != 37                    // ')'
     && lk != 38                    // '*'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 53                    // '<'
     && lk != 57                    // '<<'
     && lk != 58                    // '<='
     && lk != 60                    // '='
     && lk != 62                    // '>'
     && lk != 63                    // '>='
     && lk != 64                    // '>>'
     && lk != 70                    // ']'
     && lk != 75                    // 'after'
     && lk != 80                    // 'and'
     && lk != 83                    // 'as'
     && lk != 84                    // 'ascending'
     && lk != 88                    // 'before'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 96                    // 'collation'
     && lk != 99                    // 'contains'
     && lk != 104                   // 'count'
     && lk != 108                   // 'default'
     && lk != 112                   // 'descending'
     && lk != 117                   // 'div'
     && lk != 121                   // 'else'
     && lk != 122                   // 'empty'
     && lk != 125                   // 'end'
     && lk != 127                   // 'eq'
     && lk != 130                   // 'except'
     && lk != 136                   // 'for'
     && lk != 143                   // 'ge'
     && lk != 145                   // 'group'
     && lk != 147                   // 'gt'
     && lk != 148                   // 'idiv'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'intersect'
     && lk != 158                   // 'into'
     && lk != 160                   // 'is'
     && lk != 165                   // 'le'
     && lk != 167                   // 'let'
     && lk != 170                   // 'lt'
     && lk != 173                   // 'mod'
     && lk != 174                   // 'modify'
     && lk != 179                   // 'ne'
     && lk != 189                   // 'only'
     && lk != 191                   // 'or'
     && lk != 192                   // 'order'
     && lk != 196                   // 'paragraphs'
     && lk != 210                   // 'return'
     && lk != 213                   // 'satisfies'
     && lk != 221                   // 'sentences'
     && lk != 225                   // 'stable'
     && lk != 226                   // 'start'
     && lk != 235                   // 'times'
     && lk != 237                   // 'transform'
     && lk != 238                   // 'treat'
     && lk != 243                   // 'union'
     && lk != 255                   // 'where'
     && lk != 258                   // 'with'
     && lk != 261                   // 'words'
     && lk != 266                   // '|'
     && lk != 267                   // '||'
     && lk != 268                   // '}'
     && lk != 269)                  // '}`'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(236);            // 'to'
          lookahead1W(235);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_AdditiveExpr();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(8, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(236);                 // 'to'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  private void try_RangeExpr()
  {
    try_AdditiveExpr();
    switch (l1)
    {
    case 236:                       // 'to'
      lookahead2W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk != 25                    // EOF
     && lk != 27                    // '!='
     && lk != 37                    // ')'
     && lk != 38                    // '*'
     && lk != 39                    // '+'
     && lk != 40                    // ','
     && lk != 41                    // '-'
     && lk != 48                    // ':'
     && lk != 52                    // ';'
     && lk != 53                    // '<'
     && lk != 57                    // '<<'
     && lk != 58                    // '<='
     && lk != 60                    // '='
     && lk != 62                    // '>'
     && lk != 63                    // '>='
     && lk != 64                    // '>>'
     && lk != 70                    // ']'
     && lk != 75                    // 'after'
     && lk != 80                    // 'and'
     && lk != 83                    // 'as'
     && lk != 84                    // 'ascending'
     && lk != 88                    // 'before'
     && lk != 91                    // 'case'
     && lk != 92                    // 'cast'
     && lk != 93                    // 'castable'
     && lk != 96                    // 'collation'
     && lk != 99                    // 'contains'
     && lk != 104                   // 'count'
     && lk != 108                   // 'default'
     && lk != 112                   // 'descending'
     && lk != 117                   // 'div'
     && lk != 121                   // 'else'
     && lk != 122                   // 'empty'
     && lk != 125                   // 'end'
     && lk != 127                   // 'eq'
     && lk != 130                   // 'except'
     && lk != 136                   // 'for'
     && lk != 143                   // 'ge'
     && lk != 145                   // 'group'
     && lk != 147                   // 'gt'
     && lk != 148                   // 'idiv'
     && lk != 156                   // 'instance'
     && lk != 157                   // 'intersect'
     && lk != 158                   // 'into'
     && lk != 160                   // 'is'
     && lk != 165                   // 'le'
     && lk != 167                   // 'let'
     && lk != 170                   // 'lt'
     && lk != 173                   // 'mod'
     && lk != 174                   // 'modify'
     && lk != 179                   // 'ne'
     && lk != 189                   // 'only'
     && lk != 191                   // 'or'
     && lk != 192                   // 'order'
     && lk != 196                   // 'paragraphs'
     && lk != 210                   // 'return'
     && lk != 213                   // 'satisfies'
     && lk != 221                   // 'sentences'
     && lk != 225                   // 'stable'
     && lk != 226                   // 'start'
     && lk != 235                   // 'times'
     && lk != 237                   // 'transform'
     && lk != 238                   // 'treat'
     && lk != 243                   // 'union'
     && lk != 255                   // 'where'
     && lk != 258                   // 'with'
     && lk != 261                   // 'words'
     && lk != 266                   // '|'
     && lk != 267                   // '||'
     && lk != 268                   // '}'
     && lk != 269)                  // '}`'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(236);            // 'to'
          lookahead1W(235);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_AdditiveExpr();
          memoize(8, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(8, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(236);                // 'to'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AdditiveExpr();
    }
  }

  private void parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 39:                      // '+'
      case 41:                      // '-'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // ','
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(9, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 39:                // '+'
              consumeT(39);         // '+'
              break;
            default:
              consumeT(41);         // '-'
            }
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_MultiplicativeExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(9, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '+'
        consume(39);                // '+'
        break;
      default:
        consume(41);                // '-'
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  private void try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      switch (l1)
      {
      case 39:                      // '+'
      case 41:                      // '-'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // ','
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(9, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 39:                // '+'
              consumeT(39);         // '+'
              break;
            default:
              consumeT(41);         // '-'
            }
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_MultiplicativeExpr();
            memoize(9, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(9, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '+'
        consumeT(39);               // '+'
        break;
      default:
        consumeT(41);               // '-'
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_MultiplicativeExpr();
    }
  }

  private void parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      switch (l1)
      {
      case 38:                      // '*'
      case 117:                     // 'div'
      case 148:                     // 'idiv'
      case 173:                     // 'mod'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(10, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 38:                // '*'
              consumeT(38);         // '*'
              break;
            case 117:               // 'div'
              consumeT(117);        // 'div'
              break;
            case 148:               // 'idiv'
              consumeT(148);        // 'idiv'
              break;
            default:
              consumeT(173);        // 'mod'
            }
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_UnionExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(10, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consume(38);                // '*'
        break;
      case 117:                     // 'div'
        consume(117);               // 'div'
        break;
      case 148:                     // 'idiv'
        consume(148);               // 'idiv'
        break;
      default:
        consume(173);               // 'mod'
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  private void try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      switch (l1)
      {
      case 38:                      // '*'
      case 117:                     // 'div'
      case 148:                     // 'idiv'
      case 173:                     // 'mod'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(10, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 38:                // '*'
              consumeT(38);         // '*'
              break;
            case 117:               // 'div'
              consumeT(117);        // 'div'
              break;
            case 148:               // 'idiv'
              consumeT(148);        // 'idiv'
              break;
            default:
              consumeT(173);        // 'mod'
            }
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_UnionExpr();
            memoize(10, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(10, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consumeT(38);               // '*'
        break;
      case 117:                     // 'div'
        consumeT(117);              // 'div'
        break;
      case 148:                     // 'idiv'
        consumeT(148);              // 'idiv'
        break;
      default:
        consumeT(173);              // 'mod'
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_UnionExpr();
    }
  }

  private void parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      switch (l1)
      {
      case 243:                     // 'union'
      case 266:                     // '|'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(11, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 243:               // 'union'
              consumeT(243);        // 'union'
              break;
            default:
              consumeT(266);        // '|'
            }
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_IntersectExceptExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(11, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 243:                     // 'union'
        consume(243);               // 'union'
        break;
      default:
        consume(266);               // '|'
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  private void try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      switch (l1)
      {
      case 243:                     // 'union'
      case 266:                     // '|'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(11, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 243:               // 'union'
              consumeT(243);        // 'union'
              break;
            default:
              consumeT(266);        // '|'
            }
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_IntersectExceptExpr();
            memoize(11, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(11, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 243:                     // 'union'
        consumeT(243);              // 'union'
        break;
      default:
        consumeT(266);              // '|'
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_IntersectExceptExpr();
    }
  }

  private void parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(186);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 130:                     // 'except'
      case 157:                     // 'intersect'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(12, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 157:               // 'intersect'
              consumeT(157);        // 'intersect'
              break;
            default:
              consumeT(130);        // 'except'
            }
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_InstanceofExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(12, e0, lk);
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 157:                     // 'intersect'
        consume(157);               // 'intersect'
        break;
      default:
        consume(130);               // 'except'
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  private void try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(186);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 130:                     // 'except'
      case 157:                     // 'intersect'
        lookahead2W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269)                // '}`'
      {
        lk = memoized(12, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 157:               // 'intersect'
              consumeT(157);        // 'intersect'
              break;
            default:
              consumeT(130);        // 'except'
            }
            lookahead1W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            try_InstanceofExpr();
            memoize(12, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(12, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1)
      {
        break;
      }
      switch (l1)
      {
      case 157:                     // 'intersect'
        consumeT(157);              // 'intersect'
        break;
      default:
        consumeT(130);              // 'except'
      }
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_InstanceofExpr();
    }
  }

  private void parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 156:                       // 'instance'
      lookahead2W(59);              // S^WS | '(:' | 'of'
      break;
    default:
      lk = l1;
    }
    if (lk == 96412)                // 'instance' 'of'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(156);            // 'instance'
          lookahead1W(59);          // S^WS | '(:' | 'of'
          consumeT(188);            // 'of'
          lookahead1W(229);         // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SequenceType();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(13, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(156);                 // 'instance'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consume(188);                 // 'of'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  private void try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 156:                       // 'instance'
      lookahead2W(59);              // S^WS | '(:' | 'of'
      break;
    default:
      lk = l1;
    }
    if (lk == 96412)                // 'instance' 'of'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(156);            // 'instance'
          lookahead1W(59);          // S^WS | '(:' | 'of'
          consumeT(188);            // 'of'
          lookahead1W(229);         // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SequenceType();
          memoize(13, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(13, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(156);                // 'instance'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consumeT(188);                // 'of'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  private void parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 238:                       // 'treat'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42734)                // 'treat' 'as'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(238);            // 'treat'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(229);         // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SequenceType();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(14, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(238);                 // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  private void try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 238:                       // 'treat'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42734)                // 'treat' 'as'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(238);            // 'treat'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(229);         // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
          try_SequenceType();
          memoize(14, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(14, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(238);                // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  private void parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 93:                        // 'castable'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42589)                // 'castable' 'as'
    {
      lk = memoized(15, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(93);             // 'castable'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(222);         // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_SingleType();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(15, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(93);                  // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  private void try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 93:                        // 'castable'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42589)                // 'castable' 'as'
    {
      lk = memoized(15, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(93);             // 'castable'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(222);         // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_SingleType();
          memoize(15, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(15, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(93);                 // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_SingleType();
    }
  }

  private void parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_TransformWithExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 92:                        // 'cast'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42588)                // 'cast' 'as'
    {
      lk = memoized(16, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(92);             // 'cast'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(222);         // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_SingleType();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(16, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(92);                  // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consume(83);                  // 'as'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  private void try_CastExpr()
  {
    try_TransformWithExpr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 92:                        // 'cast'
      lookahead2W(33);              // S^WS | '(:' | 'as'
      break;
    default:
      lk = l1;
    }
    if (lk == 42588)                // 'cast' 'as'
    {
      lk = memoized(16, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(92);             // 'cast'
          lookahead1W(33);          // S^WS | '(:' | 'as'
          consumeT(83);             // 'as'
          lookahead1W(222);         // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
          try_SingleType();
          memoize(16, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(16, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(92);                 // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      consumeT(83);                 // 'as'
      lookahead1W(222);             // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_SingleType();
    }
  }

  private void parse_TransformWithExpr()
  {
    eventHandler.startNonterminal("TransformWithExpr", e0);
    parse_BasexUpdate1Expr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 237:                       // 'transform'
      lookahead2W(78);              // S^WS | '(:' | 'with'
      break;
    default:
      lk = l1;
    }
    if (lk == 132333)               // 'transform' 'with'
    {
      lk = memoized(17, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(237);            // 'transform'
          lookahead1W(78);          // S^WS | '(:' | 'with'
          consumeT(258);            // 'with'
          lookahead1W(80);          // S^WS | '(:' | '{'
          consumeT(264);            // '{'
          lookahead1W(241);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
          if (l1 != 268)            // '}'
          {
            try_Expr();
          }
          consumeT(268);            // '}'
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(17, e0, lk);
      }
    }
    if (lk == -1)
    {
      consume(237);                 // 'transform'
      lookahead1W(78);              // S^WS | '(:' | 'with'
      consume(258);                 // 'with'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consume(264);                 // '{'
      lookahead1W(241);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        whitespace();
        parse_Expr();
      }
      consume(268);                 // '}'
    }
    eventHandler.endNonterminal("TransformWithExpr", e0);
  }

  private void try_TransformWithExpr()
  {
    try_BasexUpdate1Expr();
    lookahead1W(186);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 237:                       // 'transform'
      lookahead2W(78);              // S^WS | '(:' | 'with'
      break;
    default:
      lk = l1;
    }
    if (lk == 132333)               // 'transform' 'with'
    {
      lk = memoized(17, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          consumeT(237);            // 'transform'
          lookahead1W(78);          // S^WS | '(:' | 'with'
          consumeT(258);            // 'with'
          lookahead1W(80);          // S^WS | '(:' | '{'
          consumeT(264);            // '{'
          lookahead1W(241);         // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
          if (l1 != 268)            // '}'
          {
            try_Expr();
          }
          consumeT(268);            // '}'
          memoize(17, e0A, -1);
        }
        catch (ParseException p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(17, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1)
    {
      consumeT(237);                // 'transform'
      lookahead1W(78);              // S^WS | '(:' | 'with'
      consumeT(258);                // 'with'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consumeT(264);                // '{'
      lookahead1W(241);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        try_Expr();
      }
      consumeT(268);                // '}'
    }
  }

  private void parse_BasexUpdate1Expr()
  {
    eventHandler.startNonterminal("BasexUpdate1Expr", e0);
    parse_BasexUpdateExpr();
    if (l1 == 245)                  // 'update'
    {
      consume(245);                 // 'update'
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("BasexUpdate1Expr", e0);
  }

  private void try_BasexUpdate1Expr()
  {
    try_BasexUpdateExpr();
    if (l1 == 245)                  // 'update'
    {
      consumeT(245);                // 'update'
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_ExprSingle();
    }
  }

  private void parse_BasexUpdateExpr()
  {
    eventHandler.startNonterminal("BasexUpdateExpr", e0);
    parse_ArrowExpr();
    for (;;)
    {
      lookahead1W(189);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 245:                     // 'update'
        lookahead2W(240);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '{'
        break;
      default:
        lk = l1;
      }
      if (lk != 135413)             // 'update' '{'
      {
        break;
      }
      consume(245);                 // 'update'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consume(264);                 // '{'
      lookahead1W(241);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        whitespace();
        parse_Expr();
      }
      consume(268);                 // '}'
    }
    eventHandler.endNonterminal("BasexUpdateExpr", e0);
  }

  private void try_BasexUpdateExpr()
  {
    try_ArrowExpr();
    for (;;)
    {
      lookahead1W(189);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 245:                     // 'update'
        lookahead2W(240);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '{'
        break;
      default:
        lk = l1;
      }
      if (lk != 135413)             // 'update' '{'
      {
        break;
      }
      consumeT(245);                // 'update'
      lookahead1W(80);              // S^WS | '(:' | '{'
      consumeT(264);                // '{'
      lookahead1W(241);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
      if (l1 != 268)                // '}'
      {
        try_Expr();
      }
      consumeT(268);                // '}'
    }
  }

  private void parse_ArrowExpr()
  {
    eventHandler.startNonterminal("ArrowExpr", e0);
    parse_UnaryExpr();
    for (;;)
    {
      lookahead1W(190);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 61)                 // '=>'
      {
        break;
      }
      consume(61);                  // '=>'
      lookahead1W(227);             // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      whitespace();
      parse_ArgumentList();
    }
    eventHandler.endNonterminal("ArrowExpr", e0);
  }

  private void try_ArrowExpr()
  {
    try_UnaryExpr();
    for (;;)
    {
      lookahead1W(190);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' |
                                    // 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 61)                 // '=>'
      {
        break;
      }
      consumeT(61);                 // '=>'
      lookahead1W(227);             // URIQualifiedName | QName^Token | S^WS | '$' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      try_ArgumentList();
    }
  }

  private void parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      if (l1 != 39                  // '+'
       && l1 != 41)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '-'
        consume(41);                // '-'
        break;
      default:
        consume(39);                // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  private void try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      if (l1 != 39                  // '+'
       && l1 != 41)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '-'
        consumeT(41);               // '-'
        break;
      default:
        consumeT(39);               // '+'
      }
    }
    try_ValueExpr();
  }

  private void parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 249:                       // 'validate'
      lookahead2W(212);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'transform' | 'treat' | 'type' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 84217:                     // 'validate' 'lax'
    case 117497:                    // 'validate' 'strict'
    case 123641:                    // 'validate' 'type'
    case 135417:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 35:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  private void try_ValueExpr()
  {
    switch (l1)
    {
    case 249:                       // 'validate'
      lookahead2W(212);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'transform' | 'treat' | 'type' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 84217:                     // 'validate' 'lax'
    case 117497:                    // 'validate' 'strict'
    case 123641:                    // 'validate' 'type'
    case 135417:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 35:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  private void parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consume(26);                  // '!'
      lookahead1W(234);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  private void try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consumeT(26);                 // '!'
      lookahead1W(234);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_PathExpr();
    }
  }

  private void parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 60:                        // '='
      consume(60);                  // '='
      break;
    case 27:                        // '!='
      consume(27);                  // '!='
      break;
    case 53:                        // '<'
      consume(53);                  // '<'
      break;
    case 58:                        // '<='
      consume(58);                  // '<='
      break;
    case 62:                        // '>'
      consume(62);                  // '>'
      break;
    default:
      consume(63);                  // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  private void try_GeneralComp()
  {
    switch (l1)
    {
    case 60:                        // '='
      consumeT(60);                 // '='
      break;
    case 27:                        // '!='
      consumeT(27);                 // '!='
      break;
    case 53:                        // '<'
      consumeT(53);                 // '<'
      break;
    case 58:                        // '<='
      consumeT(58);                 // '<='
      break;
    case 62:                        // '>'
      consumeT(62);                 // '>'
      break;
    default:
      consumeT(63);                 // '>='
    }
  }

  private void parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 127:                       // 'eq'
      consume(127);                 // 'eq'
      break;
    case 179:                       // 'ne'
      consume(179);                 // 'ne'
      break;
    case 170:                       // 'lt'
      consume(170);                 // 'lt'
      break;
    case 165:                       // 'le'
      consume(165);                 // 'le'
      break;
    case 147:                       // 'gt'
      consume(147);                 // 'gt'
      break;
    default:
      consume(143);                 // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  private void try_ValueComp()
  {
    switch (l1)
    {
    case 127:                       // 'eq'
      consumeT(127);                // 'eq'
      break;
    case 179:                       // 'ne'
      consumeT(179);                // 'ne'
      break;
    case 170:                       // 'lt'
      consumeT(170);                // 'lt'
      break;
    case 165:                       // 'le'
      consumeT(165);                // 'le'
      break;
    case 147:                       // 'gt'
      consumeT(147);                // 'gt'
      break;
    default:
      consumeT(143);                // 'ge'
    }
  }

  private void parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 160:                       // 'is'
      consume(160);                 // 'is'
      break;
    case 57:                        // '<<'
      consume(57);                  // '<<'
      break;
    default:
      consume(64);                  // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  private void try_NodeComp()
  {
    switch (l1)
    {
    case 160:                       // 'is'
      consumeT(160);                // 'is'
      break;
    case 57:                        // '<<'
      consumeT(57);                 // '<<'
      break;
    default:
      consumeT(64);                 // '>>'
    }
  }

  private void parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    consume(249);                   // 'validate'
    lookahead1W(151);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 264)                  // '{'
    {
      switch (l1)
      {
      case 241:                     // 'type'
        consume(241);               // 'type'
        lookahead1W(222);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  private void try_ValidateExpr()
  {
    consumeT(249);                  // 'validate'
    lookahead1W(151);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 264)                  // '{'
    {
      switch (l1)
      {
      case 241:                     // 'type'
        consumeT(241);              // 'type'
        lookahead1W(222);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  private void parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 164:                       // 'lax'
      consume(164);                 // 'lax'
      break;
    default:
      consume(229);                 // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  private void try_ValidationMode()
  {
    switch (l1)
    {
    case 164:                       // 'lax'
      consumeT(164);                // 'lax'
      break;
    default:
      consumeT(229);                // 'strict'
    }
  }

  private void parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(264);                   // '{'
    lookahead1W(241);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  private void try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(264);                  // '{'
    lookahead1W(241);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      try_Expr();
    }
    consumeT(268);                  // '}'
  }

  private void parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    consume(35);                    // '(#'
    lookahead1(221);                // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
    }
    parse_EQName();
    lookahead1(12);                 // S | '#)'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
      lookahead1(2);                // PragmaContents
      consume(20);                  // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consume(30);                    // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  private void try_Pragma()
  {
    consumeT(35);                   // '(#'
    lookahead1(221);                // URIQualifiedName | QName^Token | S | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
    }
    try_EQName();
    lookahead1(12);                 // S | '#)'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
      lookahead1(2);                // PragmaContents
      consumeT(20);                 // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consumeT(30);                   // '#)'
  }

  private void parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 45:                        // '/'
      consume(45);                  // '/'
      lookahead1W(245);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'contains' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'sentences' | 'some' |
                                    // 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'words' | 'xquery' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 39:                      // '+'
      case 40:                      // ','
      case 41:                      // '-'
      case 48:                      // ':'
      case 52:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '=>'
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 75:                      // 'after'
      case 88:                      // 'before'
      case 99:                      // 'contains'
      case 158:                     // 'into'
      case 196:                     // 'paragraphs'
      case 221:                     // 'sentences'
      case 235:                     // 'times'
      case 261:                     // 'words'
      case 266:                     // '|'
      case 267:                     // '||'
      case 268:                     // '}'
      case 269:                     // '}`'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 46:                        // '//'
      consume(46);                  // '//'
      lookahead1W(233);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  private void try_PathExpr()
  {
    switch (l1)
    {
    case 45:                        // '/'
      consumeT(45);                 // '/'
      lookahead1W(245);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | EOF | '!' | '!=' | '$' | '%' |
                                    // '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' |
                                    // '<!--' | '<<' | '<=' | '<?' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' |
                                    // ']' | '``[' | 'after' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'contains' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'into' | 'invoke' |
                                    // 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'sentences' | 'some' |
                                    // 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'words' | 'xquery' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 39:                      // '+'
      case 40:                      // ','
      case 41:                      // '-'
      case 48:                      // ':'
      case 52:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '=>'
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 75:                      // 'after'
      case 88:                      // 'before'
      case 99:                      // 'contains'
      case 158:                     // 'into'
      case 196:                     // 'paragraphs'
      case 221:                     // 'sentences'
      case 235:                     // 'times'
      case 261:                     // 'words'
      case 266:                     // '|'
      case 267:                     // '||'
      case 268:                     // '}'
      case 269:                     // '}`'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 46:                        // '//'
      consumeT(46);                 // '//'
      lookahead1W(233);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  private void parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(234);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '=>'
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 245                 // 'update'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269                 // '}`'
       && lk != 23066               // '!' '/'
       && lk != 23578)              // '!' '//'
      {
        lk = memoized(18, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 45:                // '/'
              consumeT(45);         // '/'
              break;
            case 46:                // '//'
              consumeT(46);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(233);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
            try_StepExpr();
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(18, e0, lk);
        }
      }
      if (lk != -1
       && lk != 45                  // '/'
       && lk != 46)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 45:                      // '/'
        consume(45);                // '/'
        break;
      case 46:                      // '//'
        consume(46);                // '//'
        break;
      default:
        consume(26);                // '!'
      }
      lookahead1W(233);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  private void try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(234);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 39                  // '+'
       && lk != 40                  // ','
       && lk != 41                  // '-'
       && lk != 45                  // '/'
       && lk != 46                  // '//'
       && lk != 48                  // ':'
       && lk != 52                  // ';'
       && lk != 53                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '=>'
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 83                  // 'as'
       && lk != 84                  // 'ascending'
       && lk != 88                  // 'before'
       && lk != 91                  // 'case'
       && lk != 92                  // 'cast'
       && lk != 93                  // 'castable'
       && lk != 96                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 104                 // 'count'
       && lk != 108                 // 'default'
       && lk != 112                 // 'descending'
       && lk != 117                 // 'div'
       && lk != 121                 // 'else'
       && lk != 122                 // 'empty'
       && lk != 125                 // 'end'
       && lk != 127                 // 'eq'
       && lk != 130                 // 'except'
       && lk != 136                 // 'for'
       && lk != 143                 // 'ge'
       && lk != 145                 // 'group'
       && lk != 147                 // 'gt'
       && lk != 148                 // 'idiv'
       && lk != 156                 // 'instance'
       && lk != 157                 // 'intersect'
       && lk != 158                 // 'into'
       && lk != 160                 // 'is'
       && lk != 165                 // 'le'
       && lk != 167                 // 'let'
       && lk != 170                 // 'lt'
       && lk != 173                 // 'mod'
       && lk != 174                 // 'modify'
       && lk != 179                 // 'ne'
       && lk != 189                 // 'only'
       && lk != 191                 // 'or'
       && lk != 192                 // 'order'
       && lk != 196                 // 'paragraphs'
       && lk != 210                 // 'return'
       && lk != 213                 // 'satisfies'
       && lk != 221                 // 'sentences'
       && lk != 225                 // 'stable'
       && lk != 226                 // 'start'
       && lk != 235                 // 'times'
       && lk != 236                 // 'to'
       && lk != 237                 // 'transform'
       && lk != 238                 // 'treat'
       && lk != 243                 // 'union'
       && lk != 245                 // 'update'
       && lk != 255                 // 'where'
       && lk != 258                 // 'with'
       && lk != 261                 // 'words'
       && lk != 266                 // '|'
       && lk != 267                 // '||'
       && lk != 268                 // '}'
       && lk != 269                 // '}`'
       && lk != 23066               // '!' '/'
       && lk != 23578)              // '!' '//'
      {
        lk = memoized(18, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            switch (l1)
            {
            case 45:                // '/'
              consumeT(45);         // '/'
              break;
            case 46:                // '//'
              consumeT(46);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(233);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
            try_StepExpr();
            memoize(18, e0A, -1);
            continue;
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(18, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 45                  // '/'
       && lk != 46)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 45:                      // '/'
        consumeT(45);               // '/'
        break;
      case 46:                      // '//'
        consumeT(46);               // '//'
        break;
      default:
        consumeT(26);               // '!'
      }
      lookahead1W(233);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(:' | '.' |
                                    // '..' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_StepExpr();
    }
  }

  private void parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(244);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'contains' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 120:                       // 'element'
      lookahead2W(243);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'contains' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 177:                       // 'namespace'
    case 206:                       // 'processing-instruction'
      lookahead2W(206);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 97:                        // 'comment'
    case 118:                       // 'document'
    case 193:                       // 'ordered'
    case 232:                       // 'text'
    case 244:                       // 'unordered'
      lookahead2W(204);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 123:                       // 'empty-sequence'
    case 149:                       // 'if'
    case 161:                       // 'item'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(192);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 218:                       // 'self'
      lookahead2W(201);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 109:                       // 'delete'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 119:                       // 'document-node'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 136:                       // 'for'
    case 142:                       // 'function'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 155:                       // 'insert'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 178:                       // 'namespace-node'
    case 179:                       // 'ne'
    case 184:                       // 'node'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(195);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 41046                 // 'attribute' 'and'
     || lk == 41080                 // 'element' 'and'
     || lk == 41137                 // 'namespace' 'and'
     || lk == 41166                 // 'processing-instruction' 'and'
     || lk == 42582                 // 'attribute' 'as'
     || lk == 42616                 // 'element' 'as'
     || lk == 42673                 // 'namespace' 'as'
     || lk == 42702                 // 'processing-instruction' 'as'
     || lk == 43094                 // 'attribute' 'ascending'
     || lk == 43128                 // 'element' 'ascending'
     || lk == 43185                 // 'namespace' 'ascending'
     || lk == 43214                 // 'processing-instruction' 'ascending'
     || lk == 46678                 // 'attribute' 'case'
     || lk == 46712                 // 'element' 'case'
     || lk == 46769                 // 'namespace' 'case'
     || lk == 46798                 // 'processing-instruction' 'case'
     || lk == 47190                 // 'attribute' 'cast'
     || lk == 47224                 // 'element' 'cast'
     || lk == 47281                 // 'namespace' 'cast'
     || lk == 47310                 // 'processing-instruction' 'cast'
     || lk == 47702                 // 'attribute' 'castable'
     || lk == 47736                 // 'element' 'castable'
     || lk == 47793                 // 'namespace' 'castable'
     || lk == 47822                 // 'processing-instruction' 'castable'
     || lk == 49238                 // 'attribute' 'collation'
     || lk == 49272                 // 'element' 'collation'
     || lk == 49329                 // 'namespace' 'collation'
     || lk == 49358                 // 'processing-instruction' 'collation'
     || lk == 53334                 // 'attribute' 'count'
     || lk == 53368                 // 'element' 'count'
     || lk == 53425                 // 'namespace' 'count'
     || lk == 53454                 // 'processing-instruction' 'count'
     || lk == 55382                 // 'attribute' 'default'
     || lk == 55416                 // 'element' 'default'
     || lk == 55473                 // 'namespace' 'default'
     || lk == 55502                 // 'processing-instruction' 'default'
     || lk == 57430                 // 'attribute' 'descending'
     || lk == 57464                 // 'element' 'descending'
     || lk == 57521                 // 'namespace' 'descending'
     || lk == 57550                 // 'processing-instruction' 'descending'
     || lk == 59990                 // 'attribute' 'div'
     || lk == 60024                 // 'element' 'div'
     || lk == 60081                 // 'namespace' 'div'
     || lk == 60110                 // 'processing-instruction' 'div'
     || lk == 62038                 // 'attribute' 'else'
     || lk == 62072                 // 'element' 'else'
     || lk == 62129                 // 'namespace' 'else'
     || lk == 62158                 // 'processing-instruction' 'else'
     || lk == 62550                 // 'attribute' 'empty'
     || lk == 62584                 // 'element' 'empty'
     || lk == 62641                 // 'namespace' 'empty'
     || lk == 62670                 // 'processing-instruction' 'empty'
     || lk == 64086                 // 'attribute' 'end'
     || lk == 64120                 // 'element' 'end'
     || lk == 64177                 // 'namespace' 'end'
     || lk == 64206                 // 'processing-instruction' 'end'
     || lk == 65110                 // 'attribute' 'eq'
     || lk == 65144                 // 'element' 'eq'
     || lk == 65201                 // 'namespace' 'eq'
     || lk == 65230                 // 'processing-instruction' 'eq'
     || lk == 66646                 // 'attribute' 'except'
     || lk == 66680                 // 'element' 'except'
     || lk == 66737                 // 'namespace' 'except'
     || lk == 66766                 // 'processing-instruction' 'except'
     || lk == 69718                 // 'attribute' 'for'
     || lk == 69752                 // 'element' 'for'
     || lk == 69809                 // 'namespace' 'for'
     || lk == 69838                 // 'processing-instruction' 'for'
     || lk == 73302                 // 'attribute' 'ge'
     || lk == 73336                 // 'element' 'ge'
     || lk == 73393                 // 'namespace' 'ge'
     || lk == 73422                 // 'processing-instruction' 'ge'
     || lk == 74326                 // 'attribute' 'group'
     || lk == 74360                 // 'element' 'group'
     || lk == 74417                 // 'namespace' 'group'
     || lk == 74446                 // 'processing-instruction' 'group'
     || lk == 75350                 // 'attribute' 'gt'
     || lk == 75384                 // 'element' 'gt'
     || lk == 75441                 // 'namespace' 'gt'
     || lk == 75470                 // 'processing-instruction' 'gt'
     || lk == 75862                 // 'attribute' 'idiv'
     || lk == 75896                 // 'element' 'idiv'
     || lk == 75953                 // 'namespace' 'idiv'
     || lk == 75982                 // 'processing-instruction' 'idiv'
     || lk == 79958                 // 'attribute' 'instance'
     || lk == 79992                 // 'element' 'instance'
     || lk == 80049                 // 'namespace' 'instance'
     || lk == 80078                 // 'processing-instruction' 'instance'
     || lk == 80470                 // 'attribute' 'intersect'
     || lk == 80504                 // 'element' 'intersect'
     || lk == 80561                 // 'namespace' 'intersect'
     || lk == 80590                 // 'processing-instruction' 'intersect'
     || lk == 82006                 // 'attribute' 'is'
     || lk == 82040                 // 'element' 'is'
     || lk == 82097                 // 'namespace' 'is'
     || lk == 82126                 // 'processing-instruction' 'is'
     || lk == 84566                 // 'attribute' 'le'
     || lk == 84600                 // 'element' 'le'
     || lk == 84657                 // 'namespace' 'le'
     || lk == 84686                 // 'processing-instruction' 'le'
     || lk == 85590                 // 'attribute' 'let'
     || lk == 85624                 // 'element' 'let'
     || lk == 85681                 // 'namespace' 'let'
     || lk == 85710                 // 'processing-instruction' 'let'
     || lk == 87126                 // 'attribute' 'lt'
     || lk == 87160                 // 'element' 'lt'
     || lk == 87217                 // 'namespace' 'lt'
     || lk == 87246                 // 'processing-instruction' 'lt'
     || lk == 88662                 // 'attribute' 'mod'
     || lk == 88696                 // 'element' 'mod'
     || lk == 88753                 // 'namespace' 'mod'
     || lk == 88782                 // 'processing-instruction' 'mod'
     || lk == 89174                 // 'attribute' 'modify'
     || lk == 89208                 // 'element' 'modify'
     || lk == 91734                 // 'attribute' 'ne'
     || lk == 91768                 // 'element' 'ne'
     || lk == 91825                 // 'namespace' 'ne'
     || lk == 91854                 // 'processing-instruction' 'ne'
     || lk == 96854                 // 'attribute' 'only'
     || lk == 96888                 // 'element' 'only'
     || lk == 96945                 // 'namespace' 'only'
     || lk == 96974                 // 'processing-instruction' 'only'
     || lk == 97878                 // 'attribute' 'or'
     || lk == 97912                 // 'element' 'or'
     || lk == 97969                 // 'namespace' 'or'
     || lk == 97998                 // 'processing-instruction' 'or'
     || lk == 98390                 // 'attribute' 'order'
     || lk == 98424                 // 'element' 'order'
     || lk == 98481                 // 'namespace' 'order'
     || lk == 98510                 // 'processing-instruction' 'order'
     || lk == 107606                // 'attribute' 'return'
     || lk == 107640                // 'element' 'return'
     || lk == 107697                // 'namespace' 'return'
     || lk == 107726                // 'processing-instruction' 'return'
     || lk == 109142                // 'attribute' 'satisfies'
     || lk == 109176                // 'element' 'satisfies'
     || lk == 109233                // 'namespace' 'satisfies'
     || lk == 109262                // 'processing-instruction' 'satisfies'
     || lk == 115286                // 'attribute' 'stable'
     || lk == 115320                // 'element' 'stable'
     || lk == 115377                // 'namespace' 'stable'
     || lk == 115406                // 'processing-instruction' 'stable'
     || lk == 115798                // 'attribute' 'start'
     || lk == 115832                // 'element' 'start'
     || lk == 115889                // 'namespace' 'start'
     || lk == 115918                // 'processing-instruction' 'start'
     || lk == 120918                // 'attribute' 'to'
     || lk == 120952                // 'element' 'to'
     || lk == 121009                // 'namespace' 'to'
     || lk == 121038                // 'processing-instruction' 'to'
     || lk == 121430                // 'attribute' 'transform'
     || lk == 121464                // 'element' 'transform'
     || lk == 121942                // 'attribute' 'treat'
     || lk == 121976                // 'element' 'treat'
     || lk == 122033                // 'namespace' 'treat'
     || lk == 122062                // 'processing-instruction' 'treat'
     || lk == 124502                // 'attribute' 'union'
     || lk == 124536                // 'element' 'union'
     || lk == 124593                // 'namespace' 'union'
     || lk == 124622                // 'processing-instruction' 'union'
     || lk == 125526                // 'attribute' 'update'
     || lk == 125560                // 'element' 'update'
     || lk == 130646                // 'attribute' 'where'
     || lk == 130680                // 'element' 'where'
     || lk == 130737                // 'namespace' 'where'
     || lk == 130766                // 'processing-instruction' 'where'
     || lk == 132182                // 'attribute' 'with'
     || lk == 132216)               // 'element' 'with'
    {
      lk = memoized(19, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (ParseException p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(19, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 43:                        // '.'
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
    case 65:                        // '?'
    case 69:                        // '['
    case 73:                        // '``['
    case 82:                        // 'array'
    case 171:                       // 'map'
    case 2646:                      // 'attribute' URIQualifiedName
    case 2680:                      // 'element' URIQualifiedName
    case 7345:                      // 'namespace' NCName^Token
    case 7374:                      // 'processing-instruction' NCName^Token
    case 7766:                      // 'attribute' QName^Token
    case 7800:                      // 'element' QName^Token
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14957:                     // 'delete' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14967:                     // 'document-node' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14971:                     // 'empty-sequence' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14990:                     // 'function' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14997:                     // 'if' '#'
    case 14998:                     // 'import' '#'
    case 15003:                     // 'insert' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15009:                     // 'item' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15026:                     // 'namespace-node' '#'
    case 15027:                     // 'ne' '#'
    case 15032:                     // 'node' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15056:                     // 'rename' '#'
    case 15057:                     // 'replace' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15063:                     // 'schema-attribute' '#'
    case 15064:                     // 'schema-element' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15079:                     // 'switch' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15090:                     // 'typeswitch' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17517:                     // 'delete' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17550:                     // 'function' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17563:                     // 'insert' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17616:                     // 'rename' '('
    case 17617:                     // 'replace' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
    case 40022:                     // 'attribute' 'ancestor'
    case 40056:                     // 'element' 'ancestor'
    case 40534:                     // 'attribute' 'ancestor-or-self'
    case 40568:                     // 'element' 'ancestor-or-self'
    case 43606:                     // 'attribute' 'at'
    case 43640:                     // 'element' 'at'
    case 44118:                     // 'attribute' 'attribute'
    case 44152:                     // 'element' 'attribute'
    case 48726:                     // 'attribute' 'child'
    case 48760:                     // 'element' 'child'
    case 49750:                     // 'attribute' 'comment'
    case 49784:                     // 'element' 'comment'
    case 52310:                     // 'attribute' 'copy'
    case 52344:                     // 'element' 'copy'
    case 54870:                     // 'attribute' 'declare'
    case 54904:                     // 'element' 'declare'
    case 55894:                     // 'attribute' 'delete'
    case 55928:                     // 'element' 'delete'
    case 56406:                     // 'attribute' 'descendant'
    case 56440:                     // 'element' 'descendant'
    case 56918:                     // 'attribute' 'descendant-or-self'
    case 56952:                     // 'element' 'descendant-or-self'
    case 60502:                     // 'attribute' 'document'
    case 60536:                     // 'element' 'document'
    case 61014:                     // 'attribute' 'document-node'
    case 61048:                     // 'element' 'document-node'
    case 61526:                     // 'attribute' 'element'
    case 61560:                     // 'element' 'element'
    case 63062:                     // 'attribute' 'empty-sequence'
    case 63096:                     // 'element' 'empty-sequence'
    case 65622:                     // 'attribute' 'every'
    case 65656:                     // 'element' 'every'
    case 68694:                     // 'attribute' 'following'
    case 68728:                     // 'element' 'following'
    case 69206:                     // 'attribute' 'following-sibling'
    case 69240:                     // 'element' 'following-sibling'
    case 72790:                     // 'attribute' 'function'
    case 72824:                     // 'element' 'function'
    case 76374:                     // 'attribute' 'if'
    case 76408:                     // 'element' 'if'
    case 76886:                     // 'attribute' 'import'
    case 76920:                     // 'element' 'import'
    case 79446:                     // 'attribute' 'insert'
    case 79480:                     // 'element' 'insert'
    case 81494:                     // 'attribute' 'invoke'
    case 81528:                     // 'element' 'invoke'
    case 82518:                     // 'attribute' 'item'
    case 82552:                     // 'element' 'item'
    case 89686:                     // 'attribute' 'module'
    case 89720:                     // 'element' 'module'
    case 90710:                     // 'attribute' 'namespace'
    case 90744:                     // 'element' 'namespace'
    case 91222:                     // 'attribute' 'namespace-node'
    case 91256:                     // 'element' 'namespace-node'
    case 94294:                     // 'attribute' 'node'
    case 94328:                     // 'element' 'node'
    case 98902:                     // 'attribute' 'ordered'
    case 98936:                     // 'element' 'ordered'
    case 100950:                    // 'attribute' 'parent'
    case 100984:                    // 'element' 'parent'
    case 103510:                    // 'attribute' 'preceding'
    case 103544:                    // 'element' 'preceding'
    case 104022:                    // 'attribute' 'preceding-sibling'
    case 104056:                    // 'element' 'preceding-sibling'
    case 105558:                    // 'attribute' 'processing-instruction'
    case 105592:                    // 'element' 'processing-instruction'
    case 106582:                    // 'attribute' 'rename'
    case 106616:                    // 'element' 'rename'
    case 107094:                    // 'attribute' 'replace'
    case 107128:                    // 'element' 'replace'
    case 110166:                    // 'attribute' 'schema-attribute'
    case 110200:                    // 'element' 'schema-attribute'
    case 110678:                    // 'attribute' 'schema-element'
    case 110712:                    // 'element' 'schema-element'
    case 111702:                    // 'attribute' 'self'
    case 111736:                    // 'element' 'self'
    case 114774:                    // 'attribute' 'some'
    case 114808:                    // 'element' 'some'
    case 118358:                    // 'attribute' 'switch'
    case 118392:                    // 'element' 'switch'
    case 118870:                    // 'attribute' 'text'
    case 118904:                    // 'element' 'text'
    case 122454:                    // 'attribute' 'try'
    case 122488:                    // 'element' 'try'
    case 123990:                    // 'attribute' 'typeswitch'
    case 124024:                    // 'element' 'typeswitch'
    case 125014:                    // 'attribute' 'unordered'
    case 125048:                    // 'element' 'unordered'
    case 127574:                    // 'attribute' 'validate'
    case 127608:                    // 'element' 'validate'
    case 134230:                    // 'attribute' 'xquery'
    case 134264:                    // 'element' 'xquery'
    case 135254:                    // 'attribute' '{'
    case 135265:                    // 'comment' '{'
    case 135286:                    // 'document' '{'
    case 135288:                    // 'element' '{'
    case 135345:                    // 'namespace' '{'
    case 135361:                    // 'ordered' '{'
    case 135374:                    // 'processing-instruction' '{'
    case 135400:                    // 'text' '{'
    case 135412:                    // 'unordered' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  private void try_StepExpr()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(244);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'contains' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 120:                       // 'element'
      lookahead2W(243);             // URIQualifiedName | QName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' |
                                    // ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'contains' |
                                    // 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'sentences' | 'some' | 'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                    // 'validate' | 'where' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 177:                       // 'namespace'
    case 206:                       // 'processing-instruction'
      lookahead2W(206);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '{' | '|' | '||' | '}' | '}`'
      break;
    case 97:                        // 'comment'
    case 118:                       // 'document'
    case 193:                       // 'ordered'
    case 232:                       // 'text'
    case 244:                       // 'unordered'
      lookahead2W(204);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 123:                       // 'empty-sequence'
    case 149:                       // 'if'
    case 161:                       // 'item'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(192);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 218:                       // 'self'
      lookahead2W(201);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 109:                       // 'delete'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 119:                       // 'document-node'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 136:                       // 'for'
    case 142:                       // 'function'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 155:                       // 'insert'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 178:                       // 'namespace-node'
    case 179:                       // 'ne'
    case 184:                       // 'node'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(195);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 41046                 // 'attribute' 'and'
     || lk == 41080                 // 'element' 'and'
     || lk == 41137                 // 'namespace' 'and'
     || lk == 41166                 // 'processing-instruction' 'and'
     || lk == 42582                 // 'attribute' 'as'
     || lk == 42616                 // 'element' 'as'
     || lk == 42673                 // 'namespace' 'as'
     || lk == 42702                 // 'processing-instruction' 'as'
     || lk == 43094                 // 'attribute' 'ascending'
     || lk == 43128                 // 'element' 'ascending'
     || lk == 43185                 // 'namespace' 'ascending'
     || lk == 43214                 // 'processing-instruction' 'ascending'
     || lk == 46678                 // 'attribute' 'case'
     || lk == 46712                 // 'element' 'case'
     || lk == 46769                 // 'namespace' 'case'
     || lk == 46798                 // 'processing-instruction' 'case'
     || lk == 47190                 // 'attribute' 'cast'
     || lk == 47224                 // 'element' 'cast'
     || lk == 47281                 // 'namespace' 'cast'
     || lk == 47310                 // 'processing-instruction' 'cast'
     || lk == 47702                 // 'attribute' 'castable'
     || lk == 47736                 // 'element' 'castable'
     || lk == 47793                 // 'namespace' 'castable'
     || lk == 47822                 // 'processing-instruction' 'castable'
     || lk == 49238                 // 'attribute' 'collation'
     || lk == 49272                 // 'element' 'collation'
     || lk == 49329                 // 'namespace' 'collation'
     || lk == 49358                 // 'processing-instruction' 'collation'
     || lk == 53334                 // 'attribute' 'count'
     || lk == 53368                 // 'element' 'count'
     || lk == 53425                 // 'namespace' 'count'
     || lk == 53454                 // 'processing-instruction' 'count'
     || lk == 55382                 // 'attribute' 'default'
     || lk == 55416                 // 'element' 'default'
     || lk == 55473                 // 'namespace' 'default'
     || lk == 55502                 // 'processing-instruction' 'default'
     || lk == 57430                 // 'attribute' 'descending'
     || lk == 57464                 // 'element' 'descending'
     || lk == 57521                 // 'namespace' 'descending'
     || lk == 57550                 // 'processing-instruction' 'descending'
     || lk == 59990                 // 'attribute' 'div'
     || lk == 60024                 // 'element' 'div'
     || lk == 60081                 // 'namespace' 'div'
     || lk == 60110                 // 'processing-instruction' 'div'
     || lk == 62038                 // 'attribute' 'else'
     || lk == 62072                 // 'element' 'else'
     || lk == 62129                 // 'namespace' 'else'
     || lk == 62158                 // 'processing-instruction' 'else'
     || lk == 62550                 // 'attribute' 'empty'
     || lk == 62584                 // 'element' 'empty'
     || lk == 62641                 // 'namespace' 'empty'
     || lk == 62670                 // 'processing-instruction' 'empty'
     || lk == 64086                 // 'attribute' 'end'
     || lk == 64120                 // 'element' 'end'
     || lk == 64177                 // 'namespace' 'end'
     || lk == 64206                 // 'processing-instruction' 'end'
     || lk == 65110                 // 'attribute' 'eq'
     || lk == 65144                 // 'element' 'eq'
     || lk == 65201                 // 'namespace' 'eq'
     || lk == 65230                 // 'processing-instruction' 'eq'
     || lk == 66646                 // 'attribute' 'except'
     || lk == 66680                 // 'element' 'except'
     || lk == 66737                 // 'namespace' 'except'
     || lk == 66766                 // 'processing-instruction' 'except'
     || lk == 69718                 // 'attribute' 'for'
     || lk == 69752                 // 'element' 'for'
     || lk == 69809                 // 'namespace' 'for'
     || lk == 69838                 // 'processing-instruction' 'for'
     || lk == 73302                 // 'attribute' 'ge'
     || lk == 73336                 // 'element' 'ge'
     || lk == 73393                 // 'namespace' 'ge'
     || lk == 73422                 // 'processing-instruction' 'ge'
     || lk == 74326                 // 'attribute' 'group'
     || lk == 74360                 // 'element' 'group'
     || lk == 74417                 // 'namespace' 'group'
     || lk == 74446                 // 'processing-instruction' 'group'
     || lk == 75350                 // 'attribute' 'gt'
     || lk == 75384                 // 'element' 'gt'
     || lk == 75441                 // 'namespace' 'gt'
     || lk == 75470                 // 'processing-instruction' 'gt'
     || lk == 75862                 // 'attribute' 'idiv'
     || lk == 75896                 // 'element' 'idiv'
     || lk == 75953                 // 'namespace' 'idiv'
     || lk == 75982                 // 'processing-instruction' 'idiv'
     || lk == 79958                 // 'attribute' 'instance'
     || lk == 79992                 // 'element' 'instance'
     || lk == 80049                 // 'namespace' 'instance'
     || lk == 80078                 // 'processing-instruction' 'instance'
     || lk == 80470                 // 'attribute' 'intersect'
     || lk == 80504                 // 'element' 'intersect'
     || lk == 80561                 // 'namespace' 'intersect'
     || lk == 80590                 // 'processing-instruction' 'intersect'
     || lk == 82006                 // 'attribute' 'is'
     || lk == 82040                 // 'element' 'is'
     || lk == 82097                 // 'namespace' 'is'
     || lk == 82126                 // 'processing-instruction' 'is'
     || lk == 84566                 // 'attribute' 'le'
     || lk == 84600                 // 'element' 'le'
     || lk == 84657                 // 'namespace' 'le'
     || lk == 84686                 // 'processing-instruction' 'le'
     || lk == 85590                 // 'attribute' 'let'
     || lk == 85624                 // 'element' 'let'
     || lk == 85681                 // 'namespace' 'let'
     || lk == 85710                 // 'processing-instruction' 'let'
     || lk == 87126                 // 'attribute' 'lt'
     || lk == 87160                 // 'element' 'lt'
     || lk == 87217                 // 'namespace' 'lt'
     || lk == 87246                 // 'processing-instruction' 'lt'
     || lk == 88662                 // 'attribute' 'mod'
     || lk == 88696                 // 'element' 'mod'
     || lk == 88753                 // 'namespace' 'mod'
     || lk == 88782                 // 'processing-instruction' 'mod'
     || lk == 89174                 // 'attribute' 'modify'
     || lk == 89208                 // 'element' 'modify'
     || lk == 91734                 // 'attribute' 'ne'
     || lk == 91768                 // 'element' 'ne'
     || lk == 91825                 // 'namespace' 'ne'
     || lk == 91854                 // 'processing-instruction' 'ne'
     || lk == 96854                 // 'attribute' 'only'
     || lk == 96888                 // 'element' 'only'
     || lk == 96945                 // 'namespace' 'only'
     || lk == 96974                 // 'processing-instruction' 'only'
     || lk == 97878                 // 'attribute' 'or'
     || lk == 97912                 // 'element' 'or'
     || lk == 97969                 // 'namespace' 'or'
     || lk == 97998                 // 'processing-instruction' 'or'
     || lk == 98390                 // 'attribute' 'order'
     || lk == 98424                 // 'element' 'order'
     || lk == 98481                 // 'namespace' 'order'
     || lk == 98510                 // 'processing-instruction' 'order'
     || lk == 107606                // 'attribute' 'return'
     || lk == 107640                // 'element' 'return'
     || lk == 107697                // 'namespace' 'return'
     || lk == 107726                // 'processing-instruction' 'return'
     || lk == 109142                // 'attribute' 'satisfies'
     || lk == 109176                // 'element' 'satisfies'
     || lk == 109233                // 'namespace' 'satisfies'
     || lk == 109262                // 'processing-instruction' 'satisfies'
     || lk == 115286                // 'attribute' 'stable'
     || lk == 115320                // 'element' 'stable'
     || lk == 115377                // 'namespace' 'stable'
     || lk == 115406                // 'processing-instruction' 'stable'
     || lk == 115798                // 'attribute' 'start'
     || lk == 115832                // 'element' 'start'
     || lk == 115889                // 'namespace' 'start'
     || lk == 115918                // 'processing-instruction' 'start'
     || lk == 120918                // 'attribute' 'to'
     || lk == 120952                // 'element' 'to'
     || lk == 121009                // 'namespace' 'to'
     || lk == 121038                // 'processing-instruction' 'to'
     || lk == 121430                // 'attribute' 'transform'
     || lk == 121464                // 'element' 'transform'
     || lk == 121942                // 'attribute' 'treat'
     || lk == 121976                // 'element' 'treat'
     || lk == 122033                // 'namespace' 'treat'
     || lk == 122062                // 'processing-instruction' 'treat'
     || lk == 124502                // 'attribute' 'union'
     || lk == 124536                // 'element' 'union'
     || lk == 124593                // 'namespace' 'union'
     || lk == 124622                // 'processing-instruction' 'union'
     || lk == 125526                // 'attribute' 'update'
     || lk == 125560                // 'element' 'update'
     || lk == 130646                // 'attribute' 'where'
     || lk == 130680                // 'element' 'where'
     || lk == 130737                // 'namespace' 'where'
     || lk == 130766                // 'processing-instruction' 'where'
     || lk == 132182                // 'attribute' 'with'
     || lk == 132216)               // 'element' 'with'
    {
      lk = memoized(19, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(19, e0A, -1);
          lk = -3;
        }
        catch (ParseException p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(19, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 43:                        // '.'
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
    case 65:                        // '?'
    case 69:                        // '['
    case 73:                        // '``['
    case 82:                        // 'array'
    case 171:                       // 'map'
    case 2646:                      // 'attribute' URIQualifiedName
    case 2680:                      // 'element' URIQualifiedName
    case 7345:                      // 'namespace' NCName^Token
    case 7374:                      // 'processing-instruction' NCName^Token
    case 7766:                      // 'attribute' QName^Token
    case 7800:                      // 'element' QName^Token
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14957:                     // 'delete' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14967:                     // 'document-node' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14971:                     // 'empty-sequence' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14990:                     // 'function' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14997:                     // 'if' '#'
    case 14998:                     // 'import' '#'
    case 15003:                     // 'insert' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15009:                     // 'item' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15026:                     // 'namespace-node' '#'
    case 15027:                     // 'ne' '#'
    case 15032:                     // 'node' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15056:                     // 'rename' '#'
    case 15057:                     // 'replace' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15063:                     // 'schema-attribute' '#'
    case 15064:                     // 'schema-element' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15079:                     // 'switch' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15090:                     // 'typeswitch' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17517:                     // 'delete' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17550:                     // 'function' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17563:                     // 'insert' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17616:                     // 'rename' '('
    case 17617:                     // 'replace' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
    case 40022:                     // 'attribute' 'ancestor'
    case 40056:                     // 'element' 'ancestor'
    case 40534:                     // 'attribute' 'ancestor-or-self'
    case 40568:                     // 'element' 'ancestor-or-self'
    case 43606:                     // 'attribute' 'at'
    case 43640:                     // 'element' 'at'
    case 44118:                     // 'attribute' 'attribute'
    case 44152:                     // 'element' 'attribute'
    case 48726:                     // 'attribute' 'child'
    case 48760:                     // 'element' 'child'
    case 49750:                     // 'attribute' 'comment'
    case 49784:                     // 'element' 'comment'
    case 52310:                     // 'attribute' 'copy'
    case 52344:                     // 'element' 'copy'
    case 54870:                     // 'attribute' 'declare'
    case 54904:                     // 'element' 'declare'
    case 55894:                     // 'attribute' 'delete'
    case 55928:                     // 'element' 'delete'
    case 56406:                     // 'attribute' 'descendant'
    case 56440:                     // 'element' 'descendant'
    case 56918:                     // 'attribute' 'descendant-or-self'
    case 56952:                     // 'element' 'descendant-or-self'
    case 60502:                     // 'attribute' 'document'
    case 60536:                     // 'element' 'document'
    case 61014:                     // 'attribute' 'document-node'
    case 61048:                     // 'element' 'document-node'
    case 61526:                     // 'attribute' 'element'
    case 61560:                     // 'element' 'element'
    case 63062:                     // 'attribute' 'empty-sequence'
    case 63096:                     // 'element' 'empty-sequence'
    case 65622:                     // 'attribute' 'every'
    case 65656:                     // 'element' 'every'
    case 68694:                     // 'attribute' 'following'
    case 68728:                     // 'element' 'following'
    case 69206:                     // 'attribute' 'following-sibling'
    case 69240:                     // 'element' 'following-sibling'
    case 72790:                     // 'attribute' 'function'
    case 72824:                     // 'element' 'function'
    case 76374:                     // 'attribute' 'if'
    case 76408:                     // 'element' 'if'
    case 76886:                     // 'attribute' 'import'
    case 76920:                     // 'element' 'import'
    case 79446:                     // 'attribute' 'insert'
    case 79480:                     // 'element' 'insert'
    case 81494:                     // 'attribute' 'invoke'
    case 81528:                     // 'element' 'invoke'
    case 82518:                     // 'attribute' 'item'
    case 82552:                     // 'element' 'item'
    case 89686:                     // 'attribute' 'module'
    case 89720:                     // 'element' 'module'
    case 90710:                     // 'attribute' 'namespace'
    case 90744:                     // 'element' 'namespace'
    case 91222:                     // 'attribute' 'namespace-node'
    case 91256:                     // 'element' 'namespace-node'
    case 94294:                     // 'attribute' 'node'
    case 94328:                     // 'element' 'node'
    case 98902:                     // 'attribute' 'ordered'
    case 98936:                     // 'element' 'ordered'
    case 100950:                    // 'attribute' 'parent'
    case 100984:                    // 'element' 'parent'
    case 103510:                    // 'attribute' 'preceding'
    case 103544:                    // 'element' 'preceding'
    case 104022:                    // 'attribute' 'preceding-sibling'
    case 104056:                    // 'element' 'preceding-sibling'
    case 105558:                    // 'attribute' 'processing-instruction'
    case 105592:                    // 'element' 'processing-instruction'
    case 106582:                    // 'attribute' 'rename'
    case 106616:                    // 'element' 'rename'
    case 107094:                    // 'attribute' 'replace'
    case 107128:                    // 'element' 'replace'
    case 110166:                    // 'attribute' 'schema-attribute'
    case 110200:                    // 'element' 'schema-attribute'
    case 110678:                    // 'attribute' 'schema-element'
    case 110712:                    // 'element' 'schema-element'
    case 111702:                    // 'attribute' 'self'
    case 111736:                    // 'element' 'self'
    case 114774:                    // 'attribute' 'some'
    case 114808:                    // 'element' 'some'
    case 118358:                    // 'attribute' 'switch'
    case 118392:                    // 'element' 'switch'
    case 118870:                    // 'attribute' 'text'
    case 118904:                    // 'element' 'text'
    case 122454:                    // 'attribute' 'try'
    case 122488:                    // 'element' 'try'
    case 123990:                    // 'attribute' 'typeswitch'
    case 124024:                    // 'element' 'typeswitch'
    case 125014:                    // 'attribute' 'unordered'
    case 125048:                    // 'element' 'unordered'
    case 127574:                    // 'attribute' 'validate'
    case 127608:                    // 'element' 'validate'
    case 134230:                    // 'attribute' 'xquery'
    case 134264:                    // 'element' 'xquery'
    case 135254:                    // 'attribute' '{'
    case 135265:                    // 'comment' '{'
    case 135286:                    // 'document' '{'
    case 135288:                    // 'element' '{'
    case 135345:                    // 'namespace' '{'
    case 135361:                    // 'ordered' '{'
    case 135374:                    // 'processing-instruction' '{'
    case 135400:                    // 'text' '{'
    case 135412:                    // 'unordered' '{'
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  private void parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
      lookahead2W(194);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 44:                        // '..'
    case 25678:                     // 'ancestor' '::'
    case 25679:                     // 'ancestor-or-self' '::'
    case 25797:                     // 'parent' '::'
    case 25802:                     // 'preceding' '::'
    case 25803:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(191);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  private void try_AxisStep()
  {
    switch (l1)
    {
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
      lookahead2W(194);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 44:                        // '..'
    case 25678:                     // 'ancestor' '::'
    case 25679:                     // 'ancestor-or-self' '::'
    case 25797:                     // 'parent' '::'
    case 25802:                     // 'preceding' '::'
    case 25803:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(191);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    try_PredicateList();
  }

  private void parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(196);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 218:                       // 'self'
      lookahead2W(194);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 25686:                     // 'attribute' '::'
    case 25695:                     // 'child' '::'
    case 25710:                     // 'descendant' '::'
    case 25711:                     // 'descendant-or-self' '::'
    case 25734:                     // 'following' '::'
    case 25735:                     // 'following-sibling' '::'
    case 25818:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  private void try_ForwardStep()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
      lookahead2W(196);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 95:                        // 'child'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 218:                       // 'self'
      lookahead2W(194);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 25686:                     // 'attribute' '::'
    case 25695:                     // 'child' '::'
    case 25710:                     // 'descendant' '::'
    case 25711:                     // 'descendant-or-self' '::'
    case 25734:                     // 'following' '::'
    case 25735:                     // 'following-sibling' '::'
    case 25818:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  private void parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 95:                        // 'child'
      consume(95);                  // 'child'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 110:                       // 'descendant'
      consume(110);                 // 'descendant'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 86:                        // 'attribute'
      consume(86);                  // 'attribute'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 218:                       // 'self'
      consume(218);                 // 'self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 111:                       // 'descendant-or-self'
      consume(111);                 // 'descendant-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 135:                       // 'following-sibling'
      consume(135);                 // 'following-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    default:
      consume(134);                 // 'following'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  private void try_ForwardAxis()
  {
    switch (l1)
    {
    case 95:                        // 'child'
      consumeT(95);                 // 'child'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 110:                       // 'descendant'
      consumeT(110);                // 'descendant'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 86:                        // 'attribute'
      consumeT(86);                 // 'attribute'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 218:                       // 'self'
      consumeT(218);                // 'self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 111:                       // 'descendant-or-self'
      consumeT(111);                // 'descendant-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 135:                       // 'following-sibling'
      consumeT(135);                // 'following-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    default:
      consumeT(134);                // 'following'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
    }
  }

  private void parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 67)                   // '@'
    {
      consume(67);                  // '@'
    }
    lookahead1W(224);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  private void try_AbbrevForwardStep()
  {
    if (l1 == 67)                   // '@'
    {
      consumeT(67);                 // '@'
    }
    lookahead1W(224);               // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_NodeTest();
  }

  private void parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 44:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  private void try_ReverseStep()
  {
    switch (l1)
    {
    case 44:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(224);             // URIQualifiedName | QName^Token | S^WS | Wildcard | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_NodeTest();
    }
  }

  private void parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 197:                       // 'parent'
      consume(197);                 // 'parent'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 203:                       // 'preceding-sibling'
      consume(203);                 // 'preceding-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    case 202:                       // 'preceding'
      consume(202);                 // 'preceding'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
      break;
    default:
      consume(79);                  // 'ancestor-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consume(50);                  // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  private void try_ReverseAxis()
  {
    switch (l1)
    {
    case 197:                       // 'parent'
      consumeT(197);                // 'parent'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 203:                       // 'preceding-sibling'
      consumeT(203);                // 'preceding-sibling'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    case 202:                       // 'preceding'
      consumeT(202);                // 'preceding'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
      break;
    default:
      consumeT(79);                 // 'ancestor-or-self'
      lookahead1W(29);              // S^WS | '(:' | '::'
      consumeT(50);                 // '::'
    }
  }

  private void parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    consume(44);                    // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  private void try_AbbrevReverseStep()
  {
    consumeT(44);                   // '..'
  }

  private void parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(193);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  private void try_NodeTest()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(193);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  private void parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 21:                        // Wildcard
      consume(21);                  // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  private void try_NameTest()
  {
    switch (l1)
    {
    case 21:                        // Wildcard
      consumeT(21);                 // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  private void parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(197);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 34                  // '('
       && l1 != 65                  // '?'
       && l1 != 69)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        whitespace();
        parse_Predicate();
        break;
      case 34:                      // '('
        whitespace();
        parse_ArgumentList();
        break;
      default:
        whitespace();
        parse_Lookup();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  private void try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(197);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 34                  // '('
       && l1 != 65                  // '?'
       && l1 != 69)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        try_Predicate();
        break;
      case 34:                      // '('
        try_ArgumentList();
        break;
      default:
        try_Lookup();
      }
    }
  }

  private void parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    consume(34);                    // '('
    lookahead1W(238);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(236);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_Argument();
      }
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  private void try_ArgumentList()
  {
    consumeT(34);                   // '('
    lookahead1W(238);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(236);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_Argument();
      }
    }
    consumeT(37);                   // ')'
  }

  private void parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(191);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 69)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  private void try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(191);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 69)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  private void parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    consume(69);                    // '['
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(70);                    // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  private void try_Predicate()
  {
    consumeT(69);                   // '['
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(70);                   // ']'
  }

  private void parse_Lookup()
  {
    eventHandler.startNonterminal("Lookup", e0);
    consume(65);                    // '?'
    lookahead1W(178);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("Lookup", e0);
  }

  private void try_Lookup()
  {
    consumeT(65);                   // '?'
    lookahead1W(178);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
    try_KeySpecifier();
  }

  private void parse_UnaryLookup()
  {
    eventHandler.startNonterminal("UnaryLookup", e0);
    consume(65);                    // '?'
    lookahead1W(178);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("UnaryLookup", e0);
  }

  private void try_UnaryLookup()
  {
    consumeT(65);                   // '?'
    lookahead1W(178);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'and' | 'as' |
                                    // 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
    try_KeySpecifier();
  }

  private void parse_KeySpecifier()
  {
    eventHandler.startNonterminal("KeySpecifier", e0);
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consume(1);                   // IntegerLiteral
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_NCName();
    }
    eventHandler.endNonterminal("KeySpecifier", e0);
  }

  private void try_KeySpecifier()
  {
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consumeT(1);                  // IntegerLiteral
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_NCName();
    }
  }

  private void parse_ArrowFunctionSpecifier()
  {
    eventHandler.startNonterminal("ArrowFunctionSpecifier", e0);
    switch (l1)
    {
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("ArrowFunctionSpecifier", e0);
  }

  private void try_ArrowFunctionSpecifier()
  {
    switch (l1)
    {
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    default:
      try_EQName();
    }
  }

  private void parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 4:                         // StringLiteral
      consume(4);                   // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  private void try_Literal()
  {
    switch (l1)
    {
    case 4:                         // StringLiteral
      consumeT(4);                  // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  private void parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consume(1);                   // IntegerLiteral
      break;
    case 2:                         // DecimalLiteral
      consume(2);                   // DecimalLiteral
      break;
    default:
      consume(3);                   // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  private void try_NumericLiteral()
  {
    switch (l1)
    {
    case 1:                         // IntegerLiteral
      consumeT(1);                  // IntegerLiteral
      break;
    case 2:                         // DecimalLiteral
      consumeT(2);                  // DecimalLiteral
      break;
    default:
      consumeT(3);                  // DoubleLiteral
    }
  }

  private void parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  private void try_VarRef()
  {
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  private void parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  private void try_VarName()
  {
    try_EQName();
  }

  private void parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    consume(34);                    // '('
    lookahead1W(238);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  private void try_ParenthesizedExpr()
  {
    consumeT(34);                   // '('
    lookahead1W(238);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_Expr();
    }
    consumeT(37);                   // ')'
  }

  private void parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    consume(43);                    // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  private void try_ContextItemExpr()
  {
    consumeT(43);                   // '.'
  }

  private void parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    consume(193);                   // 'ordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  private void try_OrderedExpr()
  {
    consumeT(193);                  // 'ordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  private void parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    consume(244);                   // 'unordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  private void try_UnorderedExpr()
  {
    consumeT(244);                  // 'unordered'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  private void parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionEQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  private void try_FunctionCall()
  {
    try_FunctionEQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  private void parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 65:                        // '?'
      lookahead2W(180);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'and' |
                                    // 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19009:                     // '?' ')'
    case 20545:                     // '?' ','
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  private void try_Argument()
  {
    switch (l1)
    {
    case 65:                        // '?'
      lookahead2W(180);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'and' |
                                    // 'as' | 'ascending' | 'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19009:                     // '?' ')'
    case 20545:                     // '?' ','
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  private void parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    consume(65);                    // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  private void try_ArgumentPlaceholder()
  {
    consumeT(65);                   // '?'
  }

  private void parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  private void try_Constructor()
  {
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  private void parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 53:                        // '<'
      parse_DirElemConstructor();
      break;
    case 54:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  private void try_DirectConstructor()
  {
    switch (l1)
    {
    case 53:                        // '<'
      try_DirElemConstructor();
      break;
    case 54:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  private void parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    consume(53);                    // '<'
    parse_QName();
    parse_DirAttributeList();
    switch (l1)
    {
    case 47:                        // '/>'
      consume(47);                  // '/>'
      break;
    default:
      consume(62);                  // '>'
      for (;;)
      {
        lookahead1(164);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      consume(56);                  // '</'
      parse_QName();
      lookahead1(14);               // S | '>'
      if (l1 == 17)                 // S
      {
        consume(17);                // S
      }
      lookahead1(9);                // '>'
      consume(62);                  // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  private void try_DirElemConstructor()
  {
    consumeT(53);                   // '<'
    try_QName();
    try_DirAttributeList();
    switch (l1)
    {
    case 47:                        // '/>'
      consumeT(47);                 // '/>'
      break;
    default:
      consumeT(62);                 // '>'
      for (;;)
      {
        lookahead1(164);            // PredefinedEntityRef | ElementContentChar | CharRef | '<' | '<!--' | '<![CDATA[' |
                                    // '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      consumeT(56);                 // '</'
      try_QName();
      lookahead1(14);               // S | '>'
      if (l1 == 17)                 // S
      {
        consumeT(17);               // S
      }
      lookahead1(9);                // '>'
      consumeT(62);                 // '>'
    }
  }

  private void parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 17)                 // S
      {
        break;
      }
      consume(17);                  // S
      lookahead1(223);              // QName^Token | S | '/>' | '>' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      if (l1 != 17                  // S
       && l1 != 47                  // '/>'
       && l1 != 62)                 // '>'
      {
        parse_QName();
        lookahead1(13);             // S | '='
        if (l1 == 17)               // S
        {
          consume(17);              // S
        }
        lookahead1(8);              // '='
        consume(60);                // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 17)               // S
        {
          consume(17);              // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  private void try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 17)                 // S
      {
        break;
      }
      consumeT(17);                 // S
      lookahead1(223);              // QName^Token | S | '/>' | '>' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      if (l1 != 17                  // S
       && l1 != 47                  // '/>'
       && l1 != 62)                 // '>'
      {
        try_QName();
        lookahead1(13);             // S | '='
        if (l1 == 17)               // S
        {
          consumeT(17);             // S
        }
        lookahead1(8);              // '='
        consumeT(60);               // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 17)               // S
        {
          consumeT(17);             // S
        }
        try_DirAttributeValue();
      }
    }
  }

  private void parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(16);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consume(28);                  // '"'
      for (;;)
      {
        lookahead1(158);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          consume(7);               // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      consume(28);                  // '"'
      break;
    default:
      consume(33);                  // "'"
      for (;;)
      {
        lookahead1(159);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          consume(8);               // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      consume(33);                  // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  private void try_DirAttributeValue()
  {
    lookahead1(16);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consumeT(28);                 // '"'
      for (;;)
      {
        lookahead1(158);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 7:                     // EscapeQuot
          consumeT(7);              // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      consumeT(28);                 // '"'
      break;
    default:
      consumeT(33);                 // "'"
      for (;;)
      {
        lookahead1(159);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 8:                     // EscapeApos
          consumeT(8);              // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      consumeT(33);                 // "'"
    }
  }

  private void parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      consume(10);                  // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  private void try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 10:                        // QuotAttrContentChar
      consumeT(10);                 // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  private void parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      consume(11);                  // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  private void try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 11:                        // AposAttrContentChar
      consumeT(11);                 // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  private void parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    case 55:                        // '<![CDATA['
      parse_CDataSection();
      break;
    case 9:                         // ElementContentChar
      consume(9);                   // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  private void try_DirElemContent()
  {
    switch (l1)
    {
    case 53:                        // '<'
    case 54:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    case 55:                        // '<![CDATA['
      try_CDataSection();
      break;
    case 9:                         // ElementContentChar
      consumeT(9);                  // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  private void parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    consume(54);                    // '<!--'
    lookahead1(3);                  // DirCommentContents
    consume(22);                    // DirCommentContents
    lookahead1(7);                  // '-->'
    consume(42);                    // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  private void try_DirCommentConstructor()
  {
    consumeT(54);                   // '<!--'
    lookahead1(3);                  // DirCommentContents
    consumeT(22);                   // DirCommentContents
    lookahead1(7);                  // '-->'
    consumeT(42);                   // '-->'
  }

  private void parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    consume(59);                    // '<?'
    lookahead1(0);                  // PITarget
    consume(12);                    // PITarget
    lookahead1(15);                 // S | '?>'
    if (l1 == 17)                   // S
    {
      consume(17);                  // S
      lookahead1(4);                // DirPIContents
      consume(23);                  // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consume(66);                    // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  private void try_DirPIConstructor()
  {
    consumeT(59);                   // '<?'
    lookahead1(0);                  // PITarget
    consumeT(12);                   // PITarget
    lookahead1(15);                 // S | '?>'
    if (l1 == 17)                   // S
    {
      consumeT(17);                 // S
      lookahead1(4);                // DirPIContents
      consumeT(23);                 // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consumeT(66);                   // '?>'
  }

  private void parse_CDataSection()
  {
    eventHandler.startNonterminal("CDataSection", e0);
    consume(55);                    // '<![CDATA['
    lookahead1(5);                  // CDataSectionContents
    consume(24);                    // CDataSectionContents
    lookahead1(11);                 // ']]>'
    consume(71);                    // ']]>'
    eventHandler.endNonterminal("CDataSection", e0);
  }

  private void try_CDataSection()
  {
    consumeT(55);                   // '<![CDATA['
    lookahead1(5);                  // CDataSectionContents
    consumeT(24);                   // CDataSectionContents
    lookahead1(11);                 // ']]>'
    consumeT(71);                   // ']]>'
  }

  private void parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 118:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 120:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 86:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 177:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 232:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  private void try_ComputedConstructor()
  {
    switch (l1)
    {
    case 118:                       // 'document'
      try_CompDocConstructor();
      break;
    case 120:                       // 'element'
      try_CompElemConstructor();
      break;
    case 86:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 177:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 232:                       // 'text'
      try_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  private void parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    consume(120);                   // 'element'
    lookahead1W(225);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedContentExpr();
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  private void try_CompElemConstructor()
  {
    consumeT(120);                  // 'element'
    lookahead1W(225);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedContentExpr();
  }

  private void parse_EnclosedContentExpr()
  {
    eventHandler.startNonterminal("EnclosedContentExpr", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("EnclosedContentExpr", e0);
  }

  private void try_EnclosedContentExpr()
  {
    try_EnclosedExpr();
  }

  private void parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    consume(177);                   // 'namespace'
    lookahead1W(175);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_PrefixExpr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_URIExpr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  private void try_CompNamespaceConstructor()
  {
    consumeT(177);                  // 'namespace'
    lookahead1W(175);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_PrefixExpr();
      consumeT(268);                // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_URIExpr();
    consumeT(268);                  // '}'
  }

  private void parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  private void try_Prefix()
  {
    try_NCName();
  }

  private void parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  private void try_PrefixExpr()
  {
    try_Expr();
  }

  private void parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  private void try_URIExpr()
  {
    try_Expr();
  }

  private void parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  private void try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  private void parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consume(29);                    // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consume(1);                     // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  private void try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consumeT(29);                   // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consumeT(1);                    // IntegerLiteral
  }

  private void parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(142);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(85);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(104);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 83)                   // 'as'
    {
      consume(83);                  // 'as'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  private void try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(142);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(85);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      try_ParamList();
    }
    consumeT(37);                   // ')'
    lookahead1W(104);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 83)                   // 'as'
    {
      consumeT(83);                 // 'as'
      lookahead1W(229);             // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  private void parse_MapConstructor()
  {
    eventHandler.startNonterminal("MapConstructor", e0);
    consume(171);                   // 'map'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(241);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_MapConstructorEntry();
      for (;;)
      {
        lookahead1W(97);            // S^WS | '(:' | ',' | '}'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(236);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_MapConstructorEntry();
      }
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("MapConstructor", e0);
  }

  private void try_MapConstructor()
  {
    consumeT(171);                  // 'map'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(241);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}'
    if (l1 != 268)                  // '}'
    {
      try_MapConstructorEntry();
      for (;;)
      {
        lookahead1W(97);            // S^WS | '(:' | ',' | '}'
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(236);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_MapConstructorEntry();
      }
    }
    consumeT(268);                  // '}'
  }

  private void parse_MapConstructorEntry()
  {
    eventHandler.startNonterminal("MapConstructorEntry", e0);
    parse_MapKeyExpr();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consume(48);                    // ':'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_MapValueExpr();
    eventHandler.endNonterminal("MapConstructorEntry", e0);
  }

  private void try_MapConstructorEntry()
  {
    try_MapKeyExpr();
    lookahead1W(28);                // S^WS | '(:' | ':'
    consumeT(48);                   // ':'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_MapValueExpr();
  }

  private void parse_MapKeyExpr()
  {
    eventHandler.startNonterminal("MapKeyExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapKeyExpr", e0);
  }

  private void try_MapKeyExpr()
  {
    try_ExprSingle();
  }

  private void parse_MapValueExpr()
  {
    eventHandler.startNonterminal("MapValueExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("MapValueExpr", e0);
  }

  private void try_MapValueExpr()
  {
    try_ExprSingle();
  }

  private void parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    switch (l1)
    {
    case 69:                        // '['
      parse_SquareArrayConstructor();
      break;
    default:
      parse_CurlyArrayConstructor();
    }
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  private void try_ArrayConstructor()
  {
    switch (l1)
    {
    case 69:                        // '['
      try_SquareArrayConstructor();
      break;
    default:
      try_CurlyArrayConstructor();
    }
  }

  private void parse_SquareArrayConstructor()
  {
    eventHandler.startNonterminal("SquareArrayConstructor", e0);
    consume(69);                    // '['
    lookahead1W(239);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 70)                   // ']'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(94);            // S^WS | '(:' | ',' | ']'
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(236);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(70);                    // ']'
    eventHandler.endNonterminal("SquareArrayConstructor", e0);
  }

  private void try_SquareArrayConstructor()
  {
    consumeT(69);                   // '['
    lookahead1W(239);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | ']' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 70)                   // ']'
    {
      try_ExprSingle();
      for (;;)
      {
        lookahead1W(94);            // S^WS | '(:' | ',' | ']'
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(236);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_ExprSingle();
      }
    }
    consumeT(70);                   // ']'
  }

  private void parse_CurlyArrayConstructor()
  {
    eventHandler.startNonterminal("CurlyArrayConstructor", e0);
    consume(82);                    // 'array'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CurlyArrayConstructor", e0);
  }

  private void try_CurlyArrayConstructor()
  {
    consumeT(82);                   // 'array'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  private void parse_StringConstructor()
  {
    eventHandler.startNonterminal("StringConstructor", e0);
    consume(73);                    // '``['
    parse_StringConstructorContent();
    consume(72);                    // ']``'
    eventHandler.endNonterminal("StringConstructor", e0);
  }

  private void try_StringConstructor()
  {
    consumeT(73);                   // '``['
    try_StringConstructorContent();
    consumeT(72);                   // ']``'
  }

  private void parse_StringConstructorContent()
  {
    eventHandler.startNonterminal("StringConstructorContent", e0);
    lookahead1(1);                  // StringConstructorChars
    consume(16);                    // StringConstructorChars
    for (;;)
    {
      lookahead1(17);               // ']``' | '`{'
      if (l1 != 74)                 // '`{'
      {
        break;
      }
      parse_StringConstructorInterpolation();
      lookahead1(1);                // StringConstructorChars
      consume(16);                  // StringConstructorChars
    }
    eventHandler.endNonterminal("StringConstructorContent", e0);
  }

  private void try_StringConstructorContent()
  {
    lookahead1(1);                  // StringConstructorChars
    consumeT(16);                   // StringConstructorChars
    for (;;)
    {
      lookahead1(17);               // ']``' | '`{'
      if (l1 != 74)                 // '`{'
      {
        break;
      }
      try_StringConstructorInterpolation();
      lookahead1(1);                // StringConstructorChars
      consumeT(16);                 // StringConstructorChars
    }
  }

  private void parse_StringConstructorInterpolation()
  {
    eventHandler.startNonterminal("StringConstructorInterpolation", e0);
    consume(74);                    // '`{'
    lookahead1W(242);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}`'
    if (l1 != 269)                  // '}`'
    {
      whitespace();
      parse_Expr();
    }
    consume(269);                   // '}`'
    eventHandler.endNonterminal("StringConstructorInterpolation", e0);
  }

  private void try_StringConstructorInterpolation()
  {
    consumeT(74);                   // '`{'
    lookahead1W(242);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery' | '}`'
    if (l1 != 269)                  // '}`'
    {
      try_Expr();
    }
    consumeT(269);                  // '}`'
  }

  private void parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(187);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 65)                   // '?'
    {
      consume(65);                  // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  private void try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(187);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' |
                                    // 'with' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 65)                   // '?'
    {
      consumeT(65);                 // '?'
    }
  }

  private void parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    consume(83);                    // 'as'
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  private void try_TypeDeclaration()
  {
    consumeT(83);                   // 'as'
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SequenceType();
  }

  private void parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 123:                       // 'empty-sequence'
      lookahead2W(205);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17531:                     // 'empty-sequence' '('
      consume(123);                 // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(198);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      switch (l1)
      {
      case 38:                      // '*'
      case 39:                      // '+'
      case 65:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  private void try_SequenceType()
  {
    switch (l1)
    {
    case 123:                       // 'empty-sequence'
      lookahead2W(205);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17531:                     // 'empty-sequence' '('
      consumeT(123);                // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(198);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      switch (l1)
      {
      case 38:                      // '*'
      case 39:                      // '+'
      case 65:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  private void parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 142:                       // 'function'
    case 161:                       // 'item'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(205);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      parse_KindTest();
      break;
    case 17569:                     // 'item' '('
      consume(161);                 // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      parse_FunctionTest();
      break;
    case 171:                       // 'map'
      parse_MapTest();
      break;
    case 82:                        // 'array'
      parse_ArrayTest();
      break;
    case 34:                        // '('
      parse_ParenthesizedItemType();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  private void try_ItemType()
  {
    switch (l1)
    {
    case 86:                        // 'attribute'
    case 97:                        // 'comment'
    case 119:                       // 'document-node'
    case 120:                       // 'element'
    case 142:                       // 'function'
    case 161:                       // 'item'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 206:                       // 'processing-instruction'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 232:                       // 'text'
      lookahead2W(205);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17494:                     // 'attribute' '('
    case 17505:                     // 'comment' '('
    case 17527:                     // 'document-node' '('
    case 17528:                     // 'element' '('
    case 17586:                     // 'namespace-node' '('
    case 17592:                     // 'node' '('
    case 17614:                     // 'processing-instruction' '('
    case 17623:                     // 'schema-attribute' '('
    case 17624:                     // 'schema-element' '('
    case 17640:                     // 'text' '('
      try_KindTest();
      break;
    case 17569:                     // 'item' '('
      consumeT(161);                // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    case 32:                        // '%'
    case 17550:                     // 'function' '('
      try_FunctionTest();
      break;
    case 171:                       // 'map'
      try_MapTest();
      break;
    case 82:                        // 'array'
      try_ArrayTest();
      break;
    case 34:                        // '('
      try_ParenthesizedItemType();
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  private void parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 65:                        // '?'
      consume(65);                  // '?'
      break;
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      consume(39);                  // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  private void try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 65:                        // '?'
      consumeT(65);                 // '?'
      break;
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      consumeT(39);                 // '+'
    }
  }

  private void parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  private void try_AtomicOrUnionType()
  {
    try_EQName();
  }

  private void parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 119:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 120:                       // 'element'
      parse_ElementTest();
      break;
    case 86:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 216:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 215:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 206:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 97:                        // 'comment'
      parse_CommentTest();
      break;
    case 232:                       // 'text'
      parse_TextTest();
      break;
    case 178:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  private void try_KindTest()
  {
    switch (l1)
    {
    case 119:                       // 'document-node'
      try_DocumentTest();
      break;
    case 120:                       // 'element'
      try_ElementTest();
      break;
    case 86:                        // 'attribute'
      try_AttributeTest();
      break;
    case 216:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 215:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 206:                       // 'processing-instruction'
      try_PITest();
      break;
    case 97:                        // 'comment'
      try_CommentTest();
      break;
    case 232:                       // 'text'
      try_TextTest();
      break;
    case 178:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  private void parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    consume(184);                   // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  private void try_AnyKindTest()
  {
    consumeT(184);                  // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    consume(119);                   // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(137);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 120:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  private void try_DocumentTest()
  {
    consumeT(119);                  // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(137);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 120:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    consume(232);                   // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  private void try_TextTest()
  {
    consumeT(232);                  // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    consume(97);                    // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  private void try_CommentTest()
  {
    consumeT(97);                   // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    consume(178);                   // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  private void try_NamespaceNodeTest()
  {
    consumeT(178);                  // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    consume(206);                   // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(176);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 4:                       // StringLiteral
        consume(4);                 // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  private void try_PITest()
  {
    consumeT(206);                  // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(176);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'and' | 'as' | 'ascending' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'to' | 'treat' | 'union' | 'where'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 4:                       // StringLiteral
        consumeT(4);                // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    consume(86);                    // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(228);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consume(40);                // ','
        lookahead1W(222);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  private void try_AttributeTest()
  {
    consumeT(86);                   // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(228);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consumeT(40);               // ','
        lookahead1W(222);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  private void try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  private void parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    consume(215);                   // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  private void try_SchemaAttributeTest()
  {
    consumeT(215);                  // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  private void try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  private void parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    consume(120);                   // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(228);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consume(40);                // ','
        lookahead1W(222);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(92);            // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          consume(65);              // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  private void try_ElementTest()
  {
    consumeT(120);                  // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(228);               // URIQualifiedName | QName^Token | S^WS | '(:' | ')' | '*' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(91);              // S^WS | '(:' | ')' | ','
      if (l1 == 40)                 // ','
      {
        consumeT(40);               // ','
        lookahead1W(222);           // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_TypeName();
        lookahead1W(92);            // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          consumeT(65);             // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  private void try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_ElementName();
    }
  }

  private void parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    consume(216);                   // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  private void try_SchemaElementTest()
  {
    consumeT(216);                  // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  private void try_ElementDeclaration()
  {
    try_ElementName();
  }

  private void parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  private void try_AttributeName()
  {
    try_EQName();
  }

  private void parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  private void try_ElementName()
  {
    try_EQName();
  }

  private void parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  private void try_SimpleTypeName()
  {
    try_TypeName();
  }

  private void parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  private void try_TypeName()
  {
    try_EQName();
  }

  private void parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(20, e0);
    if (lk == 0)
    {
      int b0A = b0; int e0A = e0; int l1A = l1;
      int b1A = b1; int e1A = e1; int l2A = l2;
      int b2A = b2; int e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (ParseException p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(20, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  private void try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(88);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 142:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(20, e0);
    if (lk == 0)
    {
      int b0A = b0; int e0A = e0; int l1A = l1;
      int b1A = b1; int e1A = e1; int l2A = l2;
      int b2A = b2; int e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(20, e0A, -1);
        lk = -3;
      }
      catch (ParseException p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(20, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  private void parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    consume(142);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  private void try_AnyFunctionTest()
  {
    consumeT(142);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    consume(142);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(229);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    consume(37);                    // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consume(83);                    // 'as'
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  private void try_TypedFunctionTest()
  {
    consumeT(142);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(231);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | ')' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(229);           // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
        try_SequenceType();
      }
    }
    consumeT(37);                   // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consumeT(83);                   // 'as'
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SequenceType();
  }

  private void parse_MapTest()
  {
    eventHandler.startNonterminal("MapTest", e0);
    switch (l1)
    {
    case 171:                       // 'map'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(21, e0);
    if (lk == 0)
    {
      int b0A = b0; int e0A = e0; int l1A = l1;
      int b1A = b1; int e1A = e1; int l2A = l2;
      int b2A = b2; int e2A = e2;
      try
      {
        try_AnyMapTest();
        lk = -1;
      }
      catch (ParseException p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(21, e0, lk);
    }
    switch (lk)
    {
    case -1:
      parse_AnyMapTest();
      break;
    default:
      parse_TypedMapTest();
    }
    eventHandler.endNonterminal("MapTest", e0);
  }

  private void try_MapTest()
  {
    switch (l1)
    {
    case 171:                       // 'map'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(21, e0);
    if (lk == 0)
    {
      int b0A = b0; int e0A = e0; int l1A = l1;
      int b1A = b1; int e1A = e1; int l2A = l2;
      int b2A = b2; int e2A = e2;
      try
      {
        try_AnyMapTest();
        memoize(21, e0A, -1);
        lk = -3;
      }
      catch (ParseException p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(21, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyMapTest();
      break;
    case -3:
      break;
    default:
      try_TypedMapTest();
    }
  }

  private void parse_AnyMapTest()
  {
    eventHandler.startNonterminal("AnyMapTest", e0);
    consume(171);                   // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyMapTest", e0);
  }

  private void try_AnyMapTest()
  {
    consumeT(171);                  // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_TypedMapTest()
  {
    eventHandler.startNonterminal("TypedMapTest", e0);
    consume(171);                   // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_AtomicOrUnionType();
    lookahead1W(27);                // S^WS | '(:' | ','
    consume(40);                    // ','
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TypedMapTest", e0);
  }

  private void try_TypedMapTest()
  {
    consumeT(171);                  // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_AtomicOrUnionType();
    lookahead1W(27);                // S^WS | '(:' | ','
    consumeT(40);                   // ','
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_ArrayTest()
  {
    eventHandler.startNonterminal("ArrayTest", e0);
    switch (l1)
    {
    case 82:                        // 'array'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(22, e0);
    if (lk == 0)
    {
      int b0A = b0; int e0A = e0; int l1A = l1;
      int b1A = b1; int e1A = e1; int l2A = l2;
      int b2A = b2; int e2A = e2;
      try
      {
        try_AnyArrayTest();
        lk = -1;
      }
      catch (ParseException p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(22, e0, lk);
    }
    switch (lk)
    {
    case -1:
      parse_AnyArrayTest();
      break;
    default:
      parse_TypedArrayTest();
    }
    eventHandler.endNonterminal("ArrayTest", e0);
  }

  private void try_ArrayTest()
  {
    switch (l1)
    {
    case 82:                        // 'array'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(22, e0);
    if (lk == 0)
    {
      int b0A = b0; int e0A = e0; int l1A = l1;
      int b1A = b1; int e1A = e1; int l2A = l2;
      int b2A = b2; int e2A = e2;
      try
      {
        try_AnyArrayTest();
        memoize(22, e0A, -1);
        lk = -3;
      }
      catch (ParseException p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(22, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyArrayTest();
      break;
    case -3:
      break;
    default:
      try_TypedArrayTest();
    }
  }

  private void parse_AnyArrayTest()
  {
    eventHandler.startNonterminal("AnyArrayTest", e0);
    consume(82);                    // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyArrayTest", e0);
  }

  private void try_AnyArrayTest()
  {
    consumeT(82);                   // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_TypedArrayTest()
  {
    eventHandler.startNonterminal("TypedArrayTest", e0);
    consume(82);                    // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TypedArrayTest", e0);
  }

  private void try_TypedArrayTest()
  {
    consumeT(82);                   // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    consume(34);                    // '('
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  private void try_ParenthesizedItemType()
  {
    consumeT(34);                   // '('
    lookahead1W(229);               // URIQualifiedName | QName^Token | S^WS | '%' | '(' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'case' | 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                    // 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  private void parse_URILiteral()
  {
    eventHandler.startNonterminal("URILiteral", e0);
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("URILiteral", e0);
  }

  private void try_URILiteral()
  {
    consumeT(4);                    // StringLiteral
  }

  private void parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(220);                // URIQualifiedName | QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consume(5);                   // URIQualifiedName
      break;
    default:
      parse_QName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  private void try_EQName()
  {
    lookahead1(220);                // URIQualifiedName | QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consumeT(5);                  // URIQualifiedName
      break;
    default:
      try_QName();
    }
  }

  private void parse_FunctionEQName()
  {
    eventHandler.startNonterminal("FunctionEQName", e0);
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consume(5);                   // URIQualifiedName
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("FunctionEQName", e0);
  }

  private void try_FunctionEQName()
  {
    switch (l1)
    {
    case 5:                         // URIQualifiedName
      consumeT(5);                  // URIQualifiedName
      break;
    default:
      try_FunctionName();
    }
  }

  private void parse_QName()
  {
    eventHandler.startNonterminal("QName", e0);
    lookahead1(218);                // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 86:                        // 'attribute'
      consume(86);                  // 'attribute'
      break;
    case 97:                        // 'comment'
      consume(97);                  // 'comment'
      break;
    case 119:                       // 'document-node'
      consume(119);                 // 'document-node'
      break;
    case 120:                       // 'element'
      consume(120);                 // 'element'
      break;
    case 123:                       // 'empty-sequence'
      consume(123);                 // 'empty-sequence'
      break;
    case 142:                       // 'function'
      consume(142);                 // 'function'
      break;
    case 149:                       // 'if'
      consume(149);                 // 'if'
      break;
    case 161:                       // 'item'
      consume(161);                 // 'item'
      break;
    case 178:                       // 'namespace-node'
      consume(178);                 // 'namespace-node'
      break;
    case 184:                       // 'node'
      consume(184);                 // 'node'
      break;
    case 206:                       // 'processing-instruction'
      consume(206);                 // 'processing-instruction'
      break;
    case 215:                       // 'schema-attribute'
      consume(215);                 // 'schema-attribute'
      break;
    case 216:                       // 'schema-element'
      consume(216);                 // 'schema-element'
      break;
    case 231:                       // 'switch'
      consume(231);                 // 'switch'
      break;
    case 232:                       // 'text'
      consume(232);                 // 'text'
      break;
    case 242:                       // 'typeswitch'
      consume(242);                 // 'typeswitch'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("QName", e0);
  }

  private void try_QName()
  {
    lookahead1(218);                // QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                    // 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                    // 'except' | 'following' | 'following-sibling' | 'for' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                    // 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    switch (l1)
    {
    case 86:                        // 'attribute'
      consumeT(86);                 // 'attribute'
      break;
    case 97:                        // 'comment'
      consumeT(97);                 // 'comment'
      break;
    case 119:                       // 'document-node'
      consumeT(119);                // 'document-node'
      break;
    case 120:                       // 'element'
      consumeT(120);                // 'element'
      break;
    case 123:                       // 'empty-sequence'
      consumeT(123);                // 'empty-sequence'
      break;
    case 142:                       // 'function'
      consumeT(142);                // 'function'
      break;
    case 149:                       // 'if'
      consumeT(149);                // 'if'
      break;
    case 161:                       // 'item'
      consumeT(161);                // 'item'
      break;
    case 178:                       // 'namespace-node'
      consumeT(178);                // 'namespace-node'
      break;
    case 184:                       // 'node'
      consumeT(184);                // 'node'
      break;
    case 206:                       // 'processing-instruction'
      consumeT(206);                // 'processing-instruction'
      break;
    case 215:                       // 'schema-attribute'
      consumeT(215);                // 'schema-attribute'
      break;
    case 216:                       // 'schema-element'
      consumeT(216);                // 'schema-element'
      break;
    case 231:                       // 'switch'
      consumeT(231);                // 'switch'
      break;
    case 232:                       // 'text'
      consumeT(232);                // 'text'
      break;
    case 242:                       // 'typeswitch'
      consumeT(242);                // 'typeswitch'
      break;
    default:
      try_FunctionName();
    }
  }

  private void parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 15:                        // QName^Token
      consume(15);                  // QName^Token
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consume(79);                  // 'ancestor-or-self'
      break;
    case 80:                        // 'and'
      consume(80);                  // 'and'
      break;
    case 83:                        // 'as'
      consume(83);                  // 'as'
      break;
    case 84:                        // 'ascending'
      consume(84);                  // 'ascending'
      break;
    case 85:                        // 'at'
      consume(85);                  // 'at'
      break;
    case 91:                        // 'case'
      consume(91);                  // 'case'
      break;
    case 92:                        // 'cast'
      consume(92);                  // 'cast'
      break;
    case 93:                        // 'castable'
      consume(93);                  // 'castable'
      break;
    case 95:                        // 'child'
      consume(95);                  // 'child'
      break;
    case 96:                        // 'collation'
      consume(96);                  // 'collation'
      break;
    case 102:                       // 'copy'
      consume(102);                 // 'copy'
      break;
    case 104:                       // 'count'
      consume(104);                 // 'count'
      break;
    case 107:                       // 'declare'
      consume(107);                 // 'declare'
      break;
    case 108:                       // 'default'
      consume(108);                 // 'default'
      break;
    case 109:                       // 'delete'
      consume(109);                 // 'delete'
      break;
    case 110:                       // 'descendant'
      consume(110);                 // 'descendant'
      break;
    case 111:                       // 'descendant-or-self'
      consume(111);                 // 'descendant-or-self'
      break;
    case 112:                       // 'descending'
      consume(112);                 // 'descending'
      break;
    case 117:                       // 'div'
      consume(117);                 // 'div'
      break;
    case 118:                       // 'document'
      consume(118);                 // 'document'
      break;
    case 121:                       // 'else'
      consume(121);                 // 'else'
      break;
    case 122:                       // 'empty'
      consume(122);                 // 'empty'
      break;
    case 125:                       // 'end'
      consume(125);                 // 'end'
      break;
    case 127:                       // 'eq'
      consume(127);                 // 'eq'
      break;
    case 128:                       // 'every'
      consume(128);                 // 'every'
      break;
    case 130:                       // 'except'
      consume(130);                 // 'except'
      break;
    case 134:                       // 'following'
      consume(134);                 // 'following'
      break;
    case 135:                       // 'following-sibling'
      consume(135);                 // 'following-sibling'
      break;
    case 136:                       // 'for'
      consume(136);                 // 'for'
      break;
    case 143:                       // 'ge'
      consume(143);                 // 'ge'
      break;
    case 145:                       // 'group'
      consume(145);                 // 'group'
      break;
    case 147:                       // 'gt'
      consume(147);                 // 'gt'
      break;
    case 148:                       // 'idiv'
      consume(148);                 // 'idiv'
      break;
    case 150:                       // 'import'
      consume(150);                 // 'import'
      break;
    case 155:                       // 'insert'
      consume(155);                 // 'insert'
      break;
    case 156:                       // 'instance'
      consume(156);                 // 'instance'
      break;
    case 157:                       // 'intersect'
      consume(157);                 // 'intersect'
      break;
    case 159:                       // 'invoke'
      consume(159);                 // 'invoke'
      break;
    case 160:                       // 'is'
      consume(160);                 // 'is'
      break;
    case 165:                       // 'le'
      consume(165);                 // 'le'
      break;
    case 167:                       // 'let'
      consume(167);                 // 'let'
      break;
    case 170:                       // 'lt'
      consume(170);                 // 'lt'
      break;
    case 173:                       // 'mod'
      consume(173);                 // 'mod'
      break;
    case 175:                       // 'module'
      consume(175);                 // 'module'
      break;
    case 174:                       // 'modify'
      consume(174);                 // 'modify'
      break;
    case 177:                       // 'namespace'
      consume(177);                 // 'namespace'
      break;
    case 179:                       // 'ne'
      consume(179);                 // 'ne'
      break;
    case 189:                       // 'only'
      consume(189);                 // 'only'
      break;
    case 191:                       // 'or'
      consume(191);                 // 'or'
      break;
    case 192:                       // 'order'
      consume(192);                 // 'order'
      break;
    case 193:                       // 'ordered'
      consume(193);                 // 'ordered'
      break;
    case 197:                       // 'parent'
      consume(197);                 // 'parent'
      break;
    case 202:                       // 'preceding'
      consume(202);                 // 'preceding'
      break;
    case 203:                       // 'preceding-sibling'
      consume(203);                 // 'preceding-sibling'
      break;
    case 208:                       // 'rename'
      consume(208);                 // 'rename'
      break;
    case 209:                       // 'replace'
      consume(209);                 // 'replace'
      break;
    case 210:                       // 'return'
      consume(210);                 // 'return'
      break;
    case 213:                       // 'satisfies'
      consume(213);                 // 'satisfies'
      break;
    case 218:                       // 'self'
      consume(218);                 // 'self'
      break;
    case 224:                       // 'some'
      consume(224);                 // 'some'
      break;
    case 225:                       // 'stable'
      consume(225);                 // 'stable'
      break;
    case 226:                       // 'start'
      consume(226);                 // 'start'
      break;
    case 236:                       // 'to'
      consume(236);                 // 'to'
      break;
    case 237:                       // 'transform'
      consume(237);                 // 'transform'
      break;
    case 238:                       // 'treat'
      consume(238);                 // 'treat'
      break;
    case 239:                       // 'try'
      consume(239);                 // 'try'
      break;
    case 243:                       // 'union'
      consume(243);                 // 'union'
      break;
    case 244:                       // 'unordered'
      consume(244);                 // 'unordered'
      break;
    case 245:                       // 'update'
      consume(245);                 // 'update'
      break;
    case 249:                       // 'validate'
      consume(249);                 // 'validate'
      break;
    case 255:                       // 'where'
      consume(255);                 // 'where'
      break;
    case 258:                       // 'with'
      consume(258);                 // 'with'
      break;
    default:
      consume(262);                 // 'xquery'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  private void try_FunctionName()
  {
    switch (l1)
    {
    case 15:                        // QName^Token
      consumeT(15);                 // QName^Token
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consumeT(79);                 // 'ancestor-or-self'
      break;
    case 80:                        // 'and'
      consumeT(80);                 // 'and'
      break;
    case 83:                        // 'as'
      consumeT(83);                 // 'as'
      break;
    case 84:                        // 'ascending'
      consumeT(84);                 // 'ascending'
      break;
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      break;
    case 91:                        // 'case'
      consumeT(91);                 // 'case'
      break;
    case 92:                        // 'cast'
      consumeT(92);                 // 'cast'
      break;
    case 93:                        // 'castable'
      consumeT(93);                 // 'castable'
      break;
    case 95:                        // 'child'
      consumeT(95);                 // 'child'
      break;
    case 96:                        // 'collation'
      consumeT(96);                 // 'collation'
      break;
    case 102:                       // 'copy'
      consumeT(102);                // 'copy'
      break;
    case 104:                       // 'count'
      consumeT(104);                // 'count'
      break;
    case 107:                       // 'declare'
      consumeT(107);                // 'declare'
      break;
    case 108:                       // 'default'
      consumeT(108);                // 'default'
      break;
    case 109:                       // 'delete'
      consumeT(109);                // 'delete'
      break;
    case 110:                       // 'descendant'
      consumeT(110);                // 'descendant'
      break;
    case 111:                       // 'descendant-or-self'
      consumeT(111);                // 'descendant-or-self'
      break;
    case 112:                       // 'descending'
      consumeT(112);                // 'descending'
      break;
    case 117:                       // 'div'
      consumeT(117);                // 'div'
      break;
    case 118:                       // 'document'
      consumeT(118);                // 'document'
      break;
    case 121:                       // 'else'
      consumeT(121);                // 'else'
      break;
    case 122:                       // 'empty'
      consumeT(122);                // 'empty'
      break;
    case 125:                       // 'end'
      consumeT(125);                // 'end'
      break;
    case 127:                       // 'eq'
      consumeT(127);                // 'eq'
      break;
    case 128:                       // 'every'
      consumeT(128);                // 'every'
      break;
    case 130:                       // 'except'
      consumeT(130);                // 'except'
      break;
    case 134:                       // 'following'
      consumeT(134);                // 'following'
      break;
    case 135:                       // 'following-sibling'
      consumeT(135);                // 'following-sibling'
      break;
    case 136:                       // 'for'
      consumeT(136);                // 'for'
      break;
    case 143:                       // 'ge'
      consumeT(143);                // 'ge'
      break;
    case 145:                       // 'group'
      consumeT(145);                // 'group'
      break;
    case 147:                       // 'gt'
      consumeT(147);                // 'gt'
      break;
    case 148:                       // 'idiv'
      consumeT(148);                // 'idiv'
      break;
    case 150:                       // 'import'
      consumeT(150);                // 'import'
      break;
    case 155:                       // 'insert'
      consumeT(155);                // 'insert'
      break;
    case 156:                       // 'instance'
      consumeT(156);                // 'instance'
      break;
    case 157:                       // 'intersect'
      consumeT(157);                // 'intersect'
      break;
    case 159:                       // 'invoke'
      consumeT(159);                // 'invoke'
      break;
    case 160:                       // 'is'
      consumeT(160);                // 'is'
      break;
    case 165:                       // 'le'
      consumeT(165);                // 'le'
      break;
    case 167:                       // 'let'
      consumeT(167);                // 'let'
      break;
    case 170:                       // 'lt'
      consumeT(170);                // 'lt'
      break;
    case 173:                       // 'mod'
      consumeT(173);                // 'mod'
      break;
    case 175:                       // 'module'
      consumeT(175);                // 'module'
      break;
    case 174:                       // 'modify'
      consumeT(174);                // 'modify'
      break;
    case 177:                       // 'namespace'
      consumeT(177);                // 'namespace'
      break;
    case 179:                       // 'ne'
      consumeT(179);                // 'ne'
      break;
    case 189:                       // 'only'
      consumeT(189);                // 'only'
      break;
    case 191:                       // 'or'
      consumeT(191);                // 'or'
      break;
    case 192:                       // 'order'
      consumeT(192);                // 'order'
      break;
    case 193:                       // 'ordered'
      consumeT(193);                // 'ordered'
      break;
    case 197:                       // 'parent'
      consumeT(197);                // 'parent'
      break;
    case 202:                       // 'preceding'
      consumeT(202);                // 'preceding'
      break;
    case 203:                       // 'preceding-sibling'
      consumeT(203);                // 'preceding-sibling'
      break;
    case 208:                       // 'rename'
      consumeT(208);                // 'rename'
      break;
    case 209:                       // 'replace'
      consumeT(209);                // 'replace'
      break;
    case 210:                       // 'return'
      consumeT(210);                // 'return'
      break;
    case 213:                       // 'satisfies'
      consumeT(213);                // 'satisfies'
      break;
    case 218:                       // 'self'
      consumeT(218);                // 'self'
      break;
    case 224:                       // 'some'
      consumeT(224);                // 'some'
      break;
    case 225:                       // 'stable'
      consumeT(225);                // 'stable'
      break;
    case 226:                       // 'start'
      consumeT(226);                // 'start'
      break;
    case 236:                       // 'to'
      consumeT(236);                // 'to'
      break;
    case 237:                       // 'transform'
      consumeT(237);                // 'transform'
      break;
    case 238:                       // 'treat'
      consumeT(238);                // 'treat'
      break;
    case 239:                       // 'try'
      consumeT(239);                // 'try'
      break;
    case 243:                       // 'union'
      consumeT(243);                // 'union'
      break;
    case 244:                       // 'unordered'
      consumeT(244);                // 'unordered'
      break;
    case 245:                       // 'update'
      consumeT(245);                // 'update'
      break;
    case 249:                       // 'validate'
      consumeT(249);                // 'validate'
      break;
    case 255:                       // 'where'
      consumeT(255);                // 'where'
      break;
    case 258:                       // 'with'
      consumeT(258);                // 'with'
      break;
    default:
      consumeT(262);                // 'xquery'
    }
  }

  private void parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    consume(107);                   // 'declare'
    lookahead1W(64);                // S^WS | '(:' | 'revalidation'
    consume(211);                   // 'revalidation'
    lookahead1W(142);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 229:                       // 'strict'
      consume(229);                 // 'strict'
      break;
    case 164:                       // 'lax'
      consume(164);                 // 'lax'
      break;
    default:
      consume(222);                 // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  private void parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 75:                        // 'after'
      consume(75);                  // 'after'
      break;
    case 88:                        // 'before'
      consume(88);                  // 'before'
      break;
    default:
      if (l1 == 83)                 // 'as'
      {
        consume(83);                // 'as'
        lookahead1W(114);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 133:                   // 'first'
          consume(133);             // 'first'
          break;
        default:
          consume(163);             // 'last'
        }
      }
      lookahead1W(53);              // S^WS | '(:' | 'into'
      consume(158);                 // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  private void try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 75:                        // 'after'
      consumeT(75);                 // 'after'
      break;
    case 88:                        // 'before'
      consumeT(88);                 // 'before'
      break;
    default:
      if (l1 == 83)                 // 'as'
      {
        consumeT(83);               // 'as'
        lookahead1W(114);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 133:                   // 'first'
          consumeT(133);            // 'first'
          break;
        default:
          consumeT(163);            // 'last'
        }
      }
      lookahead1W(53);              // S^WS | '(:' | 'into'
      consumeT(158);                // 'into'
    }
  }

  private void parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    consume(155);                   // 'insert'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consume(184);                 // 'node'
      break;
    default:
      consume(185);                 // 'nodes'
    }
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_SourceExpr();
    lookahead1W(147);               // S^WS | '(:' | 'after' | 'as' | 'before' | 'into'
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  private void try_InsertExpr()
  {
    consumeT(155);                  // 'insert'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consumeT(184);                // 'node'
      break;
    default:
      consumeT(185);                // 'nodes'
    }
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_SourceExpr();
    lookahead1W(147);               // S^WS | '(:' | 'after' | 'as' | 'before' | 'into'
    try_InsertExprTargetChoice();
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
  }

  private void parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    consume(109);                   // 'delete'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consume(184);                 // 'node'
      break;
    default:
      consume(185);                 // 'nodes'
    }
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  private void try_DeleteExpr()
  {
    consumeT(109);                  // 'delete'
    lookahead1W(123);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 184:                       // 'node'
      consumeT(184);                // 'node'
      break;
    default:
      consumeT(185);                // 'nodes'
    }
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
  }

  private void parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    consume(209);                   // 'replace'
    lookahead1W(124);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 250)                  // 'value'
    {
      consume(250);                 // 'value'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consume(188);                 // 'of'
    }
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consume(184);                   // 'node'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(78);                // S^WS | '(:' | 'with'
    consume(258);                   // 'with'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  private void try_ReplaceExpr()
  {
    consumeT(209);                  // 'replace'
    lookahead1W(124);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 250)                  // 'value'
    {
      consumeT(250);                // 'value'
      lookahead1W(59);              // S^WS | '(:' | 'of'
      consumeT(188);                // 'of'
    }
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consumeT(184);                  // 'node'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
    lookahead1W(78);                // S^WS | '(:' | 'with'
    consumeT(258);                  // 'with'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    consume(208);                   // 'rename'
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consume(184);                   // 'node'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_TargetExpr();
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consume(83);                    // 'as'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  private void try_RenameExpr()
  {
    consumeT(208);                  // 'rename'
    lookahead1W(58);                // S^WS | '(:' | 'node'
    consumeT(184);                  // 'node'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_TargetExpr();
    lookahead1W(33);                // S^WS | '(:' | 'as'
    consumeT(83);                   // 'as'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_NewNameExpr();
  }

  private void parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  private void try_SourceExpr()
  {
    try_ExprSingle();
  }

  private void parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  private void try_TargetExpr()
  {
    try_ExprSingle();
  }

  private void parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  private void try_NewNameExpr()
  {
    try_ExprSingle();
  }

  private void parse_UpdatingFunctionCall()
  {
    eventHandler.startNonterminal("UpdatingFunctionCall", e0);
    if (l1 == 159)                  // 'invoke'
    {
      consume(159);                 // 'invoke'
    }
    lookahead1W(73);                // S^WS | '(:' | 'updating'
    consume(246);                   // 'updating'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_PrimaryExpr();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(238);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(236);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("UpdatingFunctionCall", e0);
  }

  private void try_UpdatingFunctionCall()
  {
    if (l1 == 159)                  // 'invoke'
    {
      consumeT(159);                // 'invoke'
    }
    lookahead1W(73);                // S^WS | '(:' | 'updating'
    consumeT(246);                  // 'updating'
    lookahead1W(232);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' | '(:' | '.' | '<' |
                                    // '<!--' | '<?' | '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                    // 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                    // 'default' | 'delete' | 'descendant' | 'descendant-or-self' | 'descending' |
                                    // 'div' | 'document' | 'document-node' | 'element' | 'else' | 'empty' |
                                    // 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'satisfies' |
                                    // 'schema-attribute' | 'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                    // 'switch' | 'text' | 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'update' | 'validate' | 'where' | 'with' | 'xquery'
    try_PrimaryExpr();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(238);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | ')' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' |
                                    // '@' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ExprSingle();
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(236);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
        try_ExprSingle();
      }
    }
    consumeT(37);                   // ')'
  }

  private void parse_CopyModifyExpr()
  {
    eventHandler.startNonterminal("CopyModifyExpr", e0);
    consume(102);                   // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_CopyModifySpec();
    for (;;)
    {
      lookahead1W(95);              // S^WS | '(:' | ',' | 'modify'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_CopyModifySpec();
    }
    consume(174);                   // 'modify'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consume(210);                   // 'return'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CopyModifyExpr", e0);
  }

  private void try_CopyModifyExpr()
  {
    consumeT(102);                  // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_CopyModifySpec();
    for (;;)
    {
      lookahead1W(95);              // S^WS | '(:' | ',' | 'modify'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_CopyModifySpec();
    }
    consumeT(174);                  // 'modify'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
    lookahead1W(63);                // S^WS | '(:' | 'return'
    consumeT(210);                  // 'return'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_CopyModifySpec()
  {
    eventHandler.startNonterminal("CopyModifySpec", e0);
    consume(31);                    // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consume(51);                    // ':='
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CopyModifySpec", e0);
  }

  private void try_CopyModifySpec()
  {
    consumeT(31);                   // '$'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(30);                // S^WS | '(:' | ':='
    consumeT(51);                   // ':='
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_ExprSingle();
  }

  private void parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(199);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'ordered' | 'paragraphs' | 'return' |
                                    // 'same' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 85                  // 'at'
       && l1 != 114                 // 'different'
       && l1 != 116                 // 'distance'
       && l1 != 126                 // 'entire'
       && l1 != 193                 // 'ordered'
       && l1 != 212                 // 'same'
       && l1 != 257)                // 'window'
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  private void try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(199);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'ordered' | 'paragraphs' | 'return' |
                                    // 'same' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 85                  // 'at'
       && l1 != 114                 // 'different'
       && l1 != 116                 // 'distance'
       && l1 != 126                 // 'entire'
       && l1 != 193                 // 'ordered'
       && l1 != 212                 // 'same'
       && l1 != 257)                // 'window'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  private void parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    consume(253);                   // 'weight'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consume(264);                   // '{'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    whitespace();
    parse_Expr();
    consume(268);                   // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  private void try_FTWeight()
  {
    consumeT(253);                  // 'weight'
    lookahead1W(80);                // S^WS | '(:' | '{'
    consumeT(264);                  // '{'
    lookahead1W(236);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
    try_Expr();
    consumeT(268);                  // '}'
  }

  private void parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 141)                // 'ftor'
      {
        break;
      }
      consume(141);                 // 'ftor'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  private void try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 141)                // 'ftor'
      {
        break;
      }
      consumeT(141);                // 'ftor'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  private void parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 139)                // 'ftand'
      {
        break;
      }
      consume(139);                 // 'ftand'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  private void try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 139)                // 'ftand'
      {
        break;
      }
      consumeT(139);                // 'ftand'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  private void parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' |
                                    // 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 186)                // 'not'
      {
        break;
      }
      consume(186);                 // 'not'
      lookahead1W(52);              // S^WS | '(:' | 'in'
      consume(151);                 // 'in'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  private void try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'where' |
                                    // 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' | '}`'
      if (l1 != 186)                // 'not'
      {
        break;
      }
      consumeT(186);                // 'not'
      lookahead1W(52);              // S^WS | '(:' | 'in'
      consumeT(151);                // 'in'
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  private void parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 140)                  // 'ftnot'
    {
      consume(140);                 // 'ftnot'
    }
    lookahead1W(145);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  private void try_FTUnaryNot()
  {
    if (l1 == 140)                  // 'ftnot'
    {
      consumeT(140);                // 'ftnot'
    }
    lookahead1W(145);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  private void parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(213);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    if (l1 == 248)                  // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 253)                  // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  private void try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(213);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
    if (l1 == 248)                  // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 253)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  private void parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 34:                        // '('
      consume(34);                  // '('
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      consume(37);                  // ')'
      break;
    case 35:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 == 187)                // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  private void try_FTPrimary()
  {
    switch (l1)
    {
    case 34:                        // '('
      consumeT(34);                 // '('
      lookahead1W(153);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      consumeT(37);                 // ')'
      break;
    case 35:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 == 187)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  private void parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(219);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'different' | 'distance' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'paragraphs' | 'phrase' | 'return' |
                                    // 'same' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'using' | 'weight' | 'where' | 'window' |
                                    // 'with' | 'without' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 76                    // 'all'
     || l1 == 81                    // 'any'
     || l1 == 201)                  // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  private void try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(219);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'different' | 'distance' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'paragraphs' | 'phrase' | 'return' |
                                    // 'same' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'using' | 'weight' | 'where' | 'window' |
                                    // 'with' | 'without' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 76                    // 'all'
     || l1 == 81                    // 'any'
     || l1 == 201)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  private void parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 4:                         // StringLiteral
      consume(4);                   // StringLiteral
      break;
    default:
      consume(264);                 // '{'
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  private void try_FTWordsValue()
  {
    switch (l1)
    {
    case 4:                         // StringLiteral
      consumeT(4);                  // StringLiteral
      break;
    default:
      consumeT(264);                // '{'
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
    }
  }

  private void parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(264);                   // '{'
    lookahead1W(157);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 268)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    consume(268);                   // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  private void try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(90);              // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(264);                  // '{'
    lookahead1W(157);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 268)                  // '}'
    {
      try_FTSelection();
    }
    consumeT(268);                  // '}'
  }

  private void parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 81:                        // 'any'
      consume(81);                  // 'any'
      lookahead1W(216);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'word' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 == 260)                // 'word'
      {
        consume(260);               // 'word'
      }
      break;
    case 76:                        // 'all'
      consume(76);                  // 'all'
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 261:                     // 'words'
        lookahead2W(214);           // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
        break;
      default:
        lk = l1;
      }
      if (lk == 13061               // 'words' EOF
       || lk == 14085               // 'words' '!='
       || lk == 19205               // 'words' ')'
       || lk == 19717               // 'words' '*'
       || lk == 20229               // 'words' '+'
       || lk == 20741               // 'words' ','
       || lk == 21253               // 'words' '-'
       || lk == 24837               // 'words' ':'
       || lk == 26885               // 'words' ';'
       || lk == 27397               // 'words' '<'
       || lk == 29445               // 'words' '<<'
       || lk == 29957               // 'words' '<='
       || lk == 30981               // 'words' '='
       || lk == 32005               // 'words' '>'
       || lk == 32517               // 'words' '>='
       || lk == 33029               // 'words' '>>'
       || lk == 36101               // 'words' ']'
       || lk == 38661               // 'words' 'after'
       || lk == 41221               // 'words' 'and'
       || lk == 42757               // 'words' 'as'
       || lk == 43269               // 'words' 'ascending'
       || lk == 43781               // 'words' 'at'
       || lk == 45317               // 'words' 'before'
       || lk == 46853               // 'words' 'case'
       || lk == 47365               // 'words' 'cast'
       || lk == 47877               // 'words' 'castable'
       || lk == 49413               // 'words' 'collation'
       || lk == 50949               // 'words' 'contains'
       || lk == 53509               // 'words' 'count'
       || lk == 55557               // 'words' 'default'
       || lk == 57605               // 'words' 'descending'
       || lk == 58629               // 'words' 'different'
       || lk == 59653               // 'words' 'distance'
       || lk == 60165               // 'words' 'div'
       || lk == 62213               // 'words' 'else'
       || lk == 62725               // 'words' 'empty'
       || lk == 64261               // 'words' 'end'
       || lk == 64773               // 'words' 'entire'
       || lk == 65285               // 'words' 'eq'
       || lk == 66821               // 'words' 'except'
       || lk == 69893               // 'words' 'for'
       || lk == 73477               // 'words' 'ge'
       || lk == 74501               // 'words' 'group'
       || lk == 75525               // 'words' 'gt'
       || lk == 76037               // 'words' 'idiv'
       || lk == 80133               // 'words' 'instance'
       || lk == 80645               // 'words' 'intersect'
       || lk == 81157               // 'words' 'into'
       || lk == 82181               // 'words' 'is'
       || lk == 84741               // 'words' 'le'
       || lk == 85765               // 'words' 'let'
       || lk == 87301               // 'words' 'lt'
       || lk == 88837               // 'words' 'mod'
       || lk == 89349               // 'words' 'modify'
       || lk == 91909               // 'words' 'ne'
       || lk == 97029               // 'words' 'only'
       || lk == 98053               // 'words' 'or'
       || lk == 98565               // 'words' 'order'
       || lk == 99077               // 'words' 'ordered'
       || lk == 100613              // 'words' 'paragraphs'
       || lk == 107781              // 'words' 'return'
       || lk == 108805              // 'words' 'same'
       || lk == 109317              // 'words' 'satisfies'
       || lk == 113413              // 'words' 'sentences'
       || lk == 115461              // 'words' 'stable'
       || lk == 115973              // 'words' 'start'
       || lk == 120581              // 'words' 'times'
       || lk == 121093              // 'words' 'to'
       || lk == 121605              // 'words' 'transform'
       || lk == 122117              // 'words' 'treat'
       || lk == 124677              // 'words' 'union'
       || lk == 130821              // 'words' 'where'
       || lk == 131845              // 'words' 'window'
       || lk == 132357              // 'words' 'with'
       || lk == 132869              // 'words' 'without'
       || lk == 133893              // 'words' 'words'
       || lk == 136453              // 'words' '|'
       || lk == 136965              // 'words' '||'
       || lk == 137477              // 'words' '}'
       || lk == 137989)             // 'words' '}`'
      {
        lk = memoized(23, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(261);          // 'words'
            lk = -1;
          }
          catch (ParseException p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(23, e0, lk);
        }
      }
      if (lk == -1
       || lk == 71429               // 'words' 'ftand'
       || lk == 72453               // 'words' 'ftor'
       || lk == 95493               // 'words' 'not'
       || lk == 96005               // 'words' 'occurs'
       || lk == 127237              // 'words' 'using'
       || lk == 129797)             // 'words' 'weight'
      {
        consume(261);               // 'words'
      }
      break;
    default:
      consume(201);                 // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  private void try_FTAnyallOption()
  {
    switch (l1)
    {
    case 81:                        // 'any'
      consumeT(81);                 // 'any'
      lookahead1W(216);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | 'word' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      if (l1 == 260)                // 'word'
      {
        consumeT(260);              // 'word'
      }
      break;
    case 76:                        // 'all'
      consumeT(76);                 // 'all'
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      switch (l1)
      {
      case 261:                     // 'words'
        lookahead2W(214);           // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' |
                                    // 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
        break;
      default:
        lk = l1;
      }
      if (lk == 13061               // 'words' EOF
       || lk == 14085               // 'words' '!='
       || lk == 19205               // 'words' ')'
       || lk == 19717               // 'words' '*'
       || lk == 20229               // 'words' '+'
       || lk == 20741               // 'words' ','
       || lk == 21253               // 'words' '-'
       || lk == 24837               // 'words' ':'
       || lk == 26885               // 'words' ';'
       || lk == 27397               // 'words' '<'
       || lk == 29445               // 'words' '<<'
       || lk == 29957               // 'words' '<='
       || lk == 30981               // 'words' '='
       || lk == 32005               // 'words' '>'
       || lk == 32517               // 'words' '>='
       || lk == 33029               // 'words' '>>'
       || lk == 36101               // 'words' ']'
       || lk == 38661               // 'words' 'after'
       || lk == 41221               // 'words' 'and'
       || lk == 42757               // 'words' 'as'
       || lk == 43269               // 'words' 'ascending'
       || lk == 43781               // 'words' 'at'
       || lk == 45317               // 'words' 'before'
       || lk == 46853               // 'words' 'case'
       || lk == 47365               // 'words' 'cast'
       || lk == 47877               // 'words' 'castable'
       || lk == 49413               // 'words' 'collation'
       || lk == 50949               // 'words' 'contains'
       || lk == 53509               // 'words' 'count'
       || lk == 55557               // 'words' 'default'
       || lk == 57605               // 'words' 'descending'
       || lk == 58629               // 'words' 'different'
       || lk == 59653               // 'words' 'distance'
       || lk == 60165               // 'words' 'div'
       || lk == 62213               // 'words' 'else'
       || lk == 62725               // 'words' 'empty'
       || lk == 64261               // 'words' 'end'
       || lk == 64773               // 'words' 'entire'
       || lk == 65285               // 'words' 'eq'
       || lk == 66821               // 'words' 'except'
       || lk == 69893               // 'words' 'for'
       || lk == 73477               // 'words' 'ge'
       || lk == 74501               // 'words' 'group'
       || lk == 75525               // 'words' 'gt'
       || lk == 76037               // 'words' 'idiv'
       || lk == 80133               // 'words' 'instance'
       || lk == 80645               // 'words' 'intersect'
       || lk == 81157               // 'words' 'into'
       || lk == 82181               // 'words' 'is'
       || lk == 84741               // 'words' 'le'
       || lk == 85765               // 'words' 'let'
       || lk == 87301               // 'words' 'lt'
       || lk == 88837               // 'words' 'mod'
       || lk == 89349               // 'words' 'modify'
       || lk == 91909               // 'words' 'ne'
       || lk == 97029               // 'words' 'only'
       || lk == 98053               // 'words' 'or'
       || lk == 98565               // 'words' 'order'
       || lk == 99077               // 'words' 'ordered'
       || lk == 100613              // 'words' 'paragraphs'
       || lk == 107781              // 'words' 'return'
       || lk == 108805              // 'words' 'same'
       || lk == 109317              // 'words' 'satisfies'
       || lk == 113413              // 'words' 'sentences'
       || lk == 115461              // 'words' 'stable'
       || lk == 115973              // 'words' 'start'
       || lk == 120581              // 'words' 'times'
       || lk == 121093              // 'words' 'to'
       || lk == 121605              // 'words' 'transform'
       || lk == 122117              // 'words' 'treat'
       || lk == 124677              // 'words' 'union'
       || lk == 130821              // 'words' 'where'
       || lk == 131845              // 'words' 'window'
       || lk == 132357              // 'words' 'with'
       || lk == 132869              // 'words' 'without'
       || lk == 133893              // 'words' 'words'
       || lk == 136453              // 'words' '|'
       || lk == 136965              // 'words' '||'
       || lk == 137477              // 'words' '}'
       || lk == 137989)             // 'words' '}`'
      {
        lk = memoized(23, e0);
        if (lk == 0)
        {
          int b0A = b0; int e0A = e0; int l1A = l1;
          int b1A = b1; int e1A = e1; int l2A = l2;
          int b2A = b2; int e2A = e2;
          try
          {
            consumeT(261);          // 'words'
            memoize(23, e0A, -1);
          }
          catch (ParseException p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(23, e0A, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1
       || lk == 71429               // 'words' 'ftand'
       || lk == 72453               // 'words' 'ftor'
       || lk == 95493               // 'words' 'not'
       || lk == 96005               // 'words' 'occurs'
       || lk == 127237              // 'words' 'using'
       || lk == 129797)             // 'words' 'weight'
      {
        consumeT(261);              // 'words'
      }
      break;
    default:
      consumeT(201);                // 'phrase'
    }
  }

  private void parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    consume(187);                   // 'occurs'
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    consume(235);                   // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  private void try_FTTimes()
  {
    consumeT(187);                  // 'occurs'
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    consumeT(235);                  // 'times'
  }

  private void parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 129:                       // 'exactly'
      consume(129);                 // 'exactly'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
      break;
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consume(166);               // 'least'
        lookahead1W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        consume(176);               // 'most'
        lookahead1W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      consume(137);                 // 'from'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
      consume(236);                 // 'to'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  private void try_FTRange()
  {
    switch (l1)
    {
    case 129:                       // 'exactly'
      consumeT(129);                // 'exactly'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AdditiveExpr();
      break;
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consumeT(166);              // 'least'
        lookahead1W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_AdditiveExpr();
        break;
      default:
        consumeT(176);              // 'most'
        lookahead1W(235);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
        try_AdditiveExpr();
      }
      break;
    default:
      consumeT(137);                // 'from'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AdditiveExpr();
      consumeT(236);                // 'to'
      lookahead1W(235);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
      try_AdditiveExpr();
    }
  }

  private void parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 193:                       // 'ordered'
      parse_FTOrder();
      break;
    case 257:                       // 'window'
      parse_FTWindow();
      break;
    case 116:                       // 'distance'
      parse_FTDistance();
      break;
    case 114:                       // 'different'
    case 212:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  private void try_FTPosFilter()
  {
    switch (l1)
    {
    case 193:                       // 'ordered'
      try_FTOrder();
      break;
    case 257:                       // 'window'
      try_FTWindow();
      break;
    case 116:                       // 'distance'
      try_FTDistance();
      break;
    case 114:                       // 'different'
    case 212:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  private void parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    consume(193);                   // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  private void try_FTOrder()
  {
    consumeT(193);                  // 'ordered'
  }

  private void parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    consume(257);                   // 'window'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  private void try_FTWindow()
  {
    consumeT(257);                  // 'window'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_AdditiveExpr();
    try_FTUnit();
  }

  private void parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    consume(116);                   // 'distance'
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  private void try_FTDistance()
  {
    consumeT(116);                  // 'distance'
    lookahead1W(140);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  private void parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 261:                       // 'words'
      consume(261);                 // 'words'
      break;
    case 221:                       // 'sentences'
      consume(221);                 // 'sentences'
      break;
    default:
      consume(196);                 // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  private void try_FTUnit()
  {
    switch (l1)
    {
    case 261:                       // 'words'
      consumeT(261);                // 'words'
      break;
    case 221:                       // 'sentences'
      consumeT(221);                // 'sentences'
      break;
    default:
      consumeT(196);                // 'paragraphs'
    }
  }

  private void parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 212:                       // 'same'
      consume(212);                 // 'same'
      break;
    default:
      consume(114);                 // 'different'
    }
    lookahead1W(126);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  private void try_FTScope()
  {
    switch (l1)
    {
    case 212:                       // 'same'
      consumeT(212);                // 'same'
      break;
    default:
      consumeT(114);                // 'different'
    }
    lookahead1W(126);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  private void parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 220:                       // 'sentence'
      consume(220);                 // 'sentence'
      break;
    default:
      consume(195);                 // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  private void try_FTBigUnit()
  {
    switch (l1)
    {
    case 220:                       // 'sentence'
      consumeT(220);                // 'sentence'
      break;
    default:
      consumeT(195);                // 'paragraph'
    }
  }

  private void parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(112);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 226:                     // 'start'
        consume(226);               // 'start'
        break;
      default:
        consume(125);               // 'end'
      }
      break;
    default:
      consume(126);                 // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consume(100);                 // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  private void try_FTContent()
  {
    switch (l1)
    {
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(112);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 226:                     // 'start'
        consumeT(226);              // 'start'
        break;
      default:
        consumeT(125);              // 'end'
      }
      break;
    default:
      consumeT(126);                // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consumeT(100);                // 'content'
    }
  }

  private void parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      consume(248);                 // 'using'
      lookahead1W(170);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      whitespace();
      parse_FTMatchOption();
      lookahead1W(213);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 248)                // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  private void try_FTMatchOptions()
  {
    for (;;)
    {
      consumeT(248);                // 'using'
      lookahead1W(170);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      try_FTMatchOption();
      lookahead1W(213);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      if (l1 != 248)                // 'using'
      {
        break;
      }
    }
  }

  private void parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    switch (l1)
    {
    case 181:                       // 'no'
      lookahead2W(152);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 162:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 256:                       // 'wildcards'
    case 131253:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 234:                       // 'thesaurus'
    case 119989:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 227:                       // 'stemming'
    case 116405:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 113:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 228:                       // 'stop'
    case 116917:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 190:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  private void try_FTMatchOption()
  {
    switch (l1)
    {
    case 181:                       // 'no'
      lookahead2W(152);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 162:                       // 'language'
      try_FTLanguageOption();
      break;
    case 256:                       // 'wildcards'
    case 131253:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 234:                       // 'thesaurus'
    case 119989:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 227:                       // 'stemming'
    case 116405:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 113:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 228:                       // 'stop'
    case 116917:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 190:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  private void parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 91:                        // 'case'
      consume(91);                  // 'case'
      lookahead1W(118);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 154:                     // 'insensitive'
        consume(154);               // 'insensitive'
        break;
      default:
        consume(219);               // 'sensitive'
      }
      break;
    case 169:                       // 'lowercase'
      consume(169);                 // 'lowercase'
      break;
    default:
      consume(247);                 // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  private void try_FTCaseOption()
  {
    switch (l1)
    {
    case 91:                        // 'case'
      consumeT(91);                 // 'case'
      lookahead1W(118);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 154:                     // 'insensitive'
        consumeT(154);              // 'insensitive'
        break;
      default:
        consumeT(219);              // 'sensitive'
      }
      break;
    case 169:                       // 'lowercase'
      consumeT(169);                // 'lowercase'
      break;
    default:
      consumeT(247);                // 'uppercase'
    }
  }

  private void parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    consume(113);                   // 'diacritics'
    lookahead1W(118);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 154:                       // 'insensitive'
      consume(154);                 // 'insensitive'
      break;
    default:
      consume(219);                 // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  private void try_FTDiacriticsOption()
  {
    consumeT(113);                  // 'diacritics'
    lookahead1W(118);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 154:                       // 'insensitive'
      consumeT(154);                // 'insensitive'
      break;
    default:
      consumeT(219);                // 'sensitive'
    }
  }

  private void parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 227:                       // 'stemming'
      consume(227);                 // 'stemming'
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(67);              // S^WS | '(:' | 'stemming'
      consume(227);                 // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  private void try_FTStemOption()
  {
    switch (l1)
    {
    case 227:                       // 'stemming'
      consumeT(227);                // 'stemming'
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(67);              // S^WS | '(:' | 'stemming'
      consumeT(227);                // 'stemming'
    }
  }

  private void parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 234:                       // 'thesaurus'
      consume(234);                 // 'thesaurus'
      lookahead1W(135);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 85:                      // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 108:                     // 'default'
        consume(108);               // 'default'
        break;
      default:
        consume(34);                // '('
        lookahead1W(105);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 85:                    // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          consume(108);             // 'default'
        }
        for (;;)
        {
          lookahead1W(91);          // S^WS | '(:' | ')' | ','
          if (l1 != 40)             // ','
          {
            break;
          }
          consume(40);              // ','
          lookahead1W(34);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        consume(37);                // ')'
      }
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(71);              // S^WS | '(:' | 'thesaurus'
      consume(234);                 // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  private void try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 234:                       // 'thesaurus'
      consumeT(234);                // 'thesaurus'
      lookahead1W(135);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 85:                      // 'at'
        try_FTThesaurusID();
        break;
      case 108:                     // 'default'
        consumeT(108);              // 'default'
        break;
      default:
        consumeT(34);               // '('
        lookahead1W(105);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 85:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          consumeT(108);            // 'default'
        }
        for (;;)
        {
          lookahead1W(91);          // S^WS | '(:' | ')' | ','
          if (l1 != 40)             // ','
          {
            break;
          }
          consumeT(40);             // ','
          lookahead1W(34);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        consumeT(37);               // ')'
      }
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(71);              // S^WS | '(:' | 'thesaurus'
      consumeT(234);                // 'thesaurus'
    }
  }

  private void parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    consume(85);                    // 'at'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    whitespace();
    parse_URILiteral();
    lookahead1W(217);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'except' | 'for' | 'from' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'relationship' | 'return' | 'same' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' |
                                    // 'without' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 207)                  // 'relationship'
    {
      consume(207);                 // 'relationship'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
    }
    lookahead1W(215);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'except' | 'for' | 'from' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 85:                        // 'at'
      lookahead2W(150);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 129                   // 'exactly'
     || lk == 137                   // 'from'
     || lk == 85077                 // 'at' 'least'
     || lk == 90197)                // 'at' 'most'
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(55);              // S^WS | '(:' | 'levels'
      consume(168);                 // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  private void try_FTThesaurusID()
  {
    consumeT(85);                   // 'at'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    try_URILiteral();
    lookahead1W(217);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'except' | 'for' | 'from' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'relationship' | 'return' | 'same' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' |
                                    // 'without' | 'words' | '|' | '||' | '}' | '}`'
    if (l1 == 207)                  // 'relationship'
    {
      consumeT(207);                // 'relationship'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consumeT(4);                  // StringLiteral
    }
    lookahead1W(215);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'except' | 'for' | 'from' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' |
                                    // 'or' | 'order' | 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' |
                                    // 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' |
                                    // 'union' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' |
                                    // 'words' | '|' | '||' | '}' | '}`'
    switch (l1)
    {
    case 85:                        // 'at'
      lookahead2W(150);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 129                   // 'exactly'
     || lk == 137                   // 'from'
     || lk == 85077                 // 'at' 'least'
     || lk == 90197)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(55);              // S^WS | '(:' | 'levels'
      consumeT(168);                // 'levels'
    }
  }

  private void parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 129:                       // 'exactly'
      consume(129);                 // 'exactly'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(1);                   // IntegerLiteral
      break;
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consume(166);               // 'least'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consume(1);                 // IntegerLiteral
        break;
      default:
        consume(176);               // 'most'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consume(1);                 // IntegerLiteral
      }
      break;
    default:
      consume(137);                 // 'from'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(1);                   // IntegerLiteral
      lookahead1W(72);              // S^WS | '(:' | 'to'
      consume(236);                 // 'to'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(1);                   // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  private void try_FTLiteralRange()
  {
    switch (l1)
    {
    case 129:                       // 'exactly'
      consumeT(129);                // 'exactly'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(1);                  // IntegerLiteral
      break;
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 166:                     // 'least'
        consumeT(166);              // 'least'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consumeT(1);                // IntegerLiteral
        break;
      default:
        consumeT(176);              // 'most'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consumeT(1);                // IntegerLiteral
      }
      break;
    default:
      consumeT(137);                // 'from'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(1);                  // IntegerLiteral
      lookahead1W(72);              // S^WS | '(:' | 'to'
      consumeT(236);                // 'to'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(1);                  // IntegerLiteral
    }
  }

  private void parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 228:                       // 'stop'
      consume(228);                 // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consume(261);                 // 'words'
      lookahead1W(135);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 108:                     // 'default'
        consume(108);               // 'default'
        for (;;)
        {
          lookahead1W(213);         // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
          switch (l1)
          {
          case 130:                 // 'except'
          case 243:                 // 'union'
            lookahead2W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            break;
          default:
            lk = l1;
          }
          if (lk == 17538           // 'except' '('
           || lk == 17651           // 'union' '('
           || lk == 43650           // 'except' 'at'
           || lk == 43763)          // 'union' 'at'
          {
            lk = memoized(25, e0);
            if (lk == 0)
            {
              int b0A = b0; int e0A = e0; int l1A = l1;
              int b1A = b1; int e1A = e1; int l2A = l2;
              int b2A = b2; int e2A = e2;
              try
              {
                try_FTStopWordsInclExcl();
                lk = -1;
              }
              catch (ParseException p1A)
              {
                lk = -2;
              }
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              memoize(25, e0, lk);
            }
          }
          if (lk != -1)
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(213);         // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
          switch (l1)
          {
          case 130:                 // 'except'
          case 243:                 // 'union'
            lookahead2W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            break;
          default:
            lk = l1;
          }
          if (lk == 17538           // 'except' '('
           || lk == 17651           // 'union' '('
           || lk == 43650           // 'except' 'at'
           || lk == 43763)          // 'union' 'at'
          {
            lk = memoized(24, e0);
            if (lk == 0)
            {
              int b0A = b0; int e0A = e0; int l1A = l1;
              int b1A = b1; int e1A = e1; int l2A = l2;
              int b2A = b2; int e2A = e2;
              try
              {
                try_FTStopWordsInclExcl();
                lk = -1;
              }
              catch (ParseException p1A)
              {
                lk = -2;
              }
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              memoize(24, e0, lk);
            }
          }
          if (lk != -1)
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(68);              // S^WS | '(:' | 'stop'
      consume(228);                 // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consume(261);                 // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  private void try_FTStopWordOption()
  {
    switch (l1)
    {
    case 228:                       // 'stop'
      consumeT(228);                // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consumeT(261);                // 'words'
      lookahead1W(135);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 108:                     // 'default'
        consumeT(108);              // 'default'
        for (;;)
        {
          lookahead1W(213);         // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
          switch (l1)
          {
          case 130:                 // 'except'
          case 243:                 // 'union'
            lookahead2W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            break;
          default:
            lk = l1;
          }
          if (lk == 17538           // 'except' '('
           || lk == 17651           // 'union' '('
           || lk == 43650           // 'except' 'at'
           || lk == 43763)          // 'union' 'at'
          {
            lk = memoized(25, e0);
            if (lk == 0)
            {
              int b0A = b0; int e0A = e0; int l1A = l1;
              int b1A = b1; int e1A = e1; int l2A = l2;
              int b2A = b2; int e2A = e2;
              try
              {
                try_FTStopWordsInclExcl();
                memoize(25, e0A, -1);
                continue;
              }
              catch (ParseException p1A)
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(25, e0A, -2);
                break;
              }
            }
          }
          if (lk != -1)
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(213);         // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'different' | 'distance' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' | 'ftand' | 'ftor' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'paragraphs' | 'return' | 'same' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'transform' | 'treat' | 'union' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | 'words' | '|' | '||' | '}' |
                                    // '}`'
          switch (l1)
          {
          case 130:                 // 'except'
          case 243:                 // 'union'
            lookahead2W(235);       // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
            break;
          default:
            lk = l1;
          }
          if (lk == 17538           // 'except' '('
           || lk == 17651           // 'union' '('
           || lk == 43650           // 'except' 'at'
           || lk == 43763)          // 'union' 'at'
          {
            lk = memoized(24, e0);
            if (lk == 0)
            {
              int b0A = b0; int e0A = e0; int l1A = l1;
              int b1A = b1; int e1A = e1; int l2A = l2;
              int b2A = b2; int e2A = e2;
              try
              {
                try_FTStopWordsInclExcl();
                memoize(24, e0A, -1);
                continue;
              }
              catch (ParseException p1A)
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(24, e0A, -2);
                break;
              }
            }
          }
          if (lk != -1)
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(68);              // S^WS | '(:' | 'stop'
      consumeT(228);                // 'stop'
      lookahead1W(79);              // S^WS | '(:' | 'words'
      consumeT(261);                // 'words'
    }
  }

  private void parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 85:                        // 'at'
      consume(85);                  // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      whitespace();
      parse_URILiteral();
      break;
    default:
      consume(34);                  // '('
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(4);                   // StringLiteral
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consume(40);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consume(4);                 // StringLiteral
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  private void try_FTStopWords()
  {
    switch (l1)
    {
    case 85:                        // 'at'
      consumeT(85);                 // 'at'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      try_URILiteral();
      break;
    default:
      consumeT(34);                 // '('
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consumeT(4);                  // StringLiteral
      for (;;)
      {
        lookahead1W(91);            // S^WS | '(:' | ')' | ','
        if (l1 != 40)               // ','
        {
          break;
        }
        consumeT(40);               // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consumeT(4);                // StringLiteral
      }
      consumeT(37);                 // ')'
    }
  }

  private void parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 243:                       // 'union'
      consume(243);                 // 'union'
      break;
    default:
      consume(130);                 // 'except'
    }
    lookahead1W(89);                // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  private void try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 243:                       // 'union'
      consumeT(243);                // 'union'
      break;
    default:
      consumeT(130);                // 'except'
    }
    lookahead1W(89);                // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  private void parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    consume(162);                   // 'language'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  private void try_FTLanguageOption()
  {
    consumeT(162);                  // 'language'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consumeT(4);                    // StringLiteral
  }

  private void parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 256:                       // 'wildcards'
      consume(256);                 // 'wildcards'
      break;
    default:
      consume(181);                 // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'wildcards'
      consume(256);                 // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  private void try_FTWildCardOption()
  {
    switch (l1)
    {
    case 256:                       // 'wildcards'
      consumeT(256);                // 'wildcards'
      break;
    default:
      consumeT(181);                // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'wildcards'
      consumeT(256);                // 'wildcards'
    }
  }

  private void parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    consume(190);                   // 'option'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(4);                     // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  private void try_FTExtensionOption()
  {
    consumeT(190);                  // 'option'
    lookahead1W(222);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consumeT(4);                    // StringLiteral
  }

  private void parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    consume(259);                   // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consume(100);                   // 'content'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  private void try_FTIgnoreOption()
  {
    consumeT(259);                  // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consumeT(100);                  // 'content'
    lookahead1W(235);               // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery'
    try_UnionExpr();
  }

  private void try_Comment()
  {
    consumeT(36);                   // '(:'
    for (;;)
    {
      lookahead1(81);               // CommentContents | '(:' | ':)'
      if (l1 == 49)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 19:                      // CommentContents
        consumeT(19);               // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    consumeT(49);                   // ':)'
  }

  private void try_Whitespace()
  {
    switch (l1)
    {
    case 18:                        // S^WS
      consumeT(18);                 // S^WS
      break;
    default:
      try_Comment();
    }
  }

  private void parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 14:                        // NCName^Token
      consume(14);                  // NCName^Token
      break;
    case 80:                        // 'and'
      consume(80);                  // 'and'
      break;
    case 83:                        // 'as'
      consume(83);                  // 'as'
      break;
    case 84:                        // 'ascending'
      consume(84);                  // 'ascending'
      break;
    case 91:                        // 'case'
      consume(91);                  // 'case'
      break;
    case 92:                        // 'cast'
      consume(92);                  // 'cast'
      break;
    case 93:                        // 'castable'
      consume(93);                  // 'castable'
      break;
    case 96:                        // 'collation'
      consume(96);                  // 'collation'
      break;
    case 104:                       // 'count'
      consume(104);                 // 'count'
      break;
    case 108:                       // 'default'
      consume(108);                 // 'default'
      break;
    case 112:                       // 'descending'
      consume(112);                 // 'descending'
      break;
    case 117:                       // 'div'
      consume(117);                 // 'div'
      break;
    case 121:                       // 'else'
      consume(121);                 // 'else'
      break;
    case 122:                       // 'empty'
      consume(122);                 // 'empty'
      break;
    case 125:                       // 'end'
      consume(125);                 // 'end'
      break;
    case 127:                       // 'eq'
      consume(127);                 // 'eq'
      break;
    case 130:                       // 'except'
      consume(130);                 // 'except'
      break;
    case 136:                       // 'for'
      consume(136);                 // 'for'
      break;
    case 143:                       // 'ge'
      consume(143);                 // 'ge'
      break;
    case 145:                       // 'group'
      consume(145);                 // 'group'
      break;
    case 147:                       // 'gt'
      consume(147);                 // 'gt'
      break;
    case 148:                       // 'idiv'
      consume(148);                 // 'idiv'
      break;
    case 156:                       // 'instance'
      consume(156);                 // 'instance'
      break;
    case 157:                       // 'intersect'
      consume(157);                 // 'intersect'
      break;
    case 160:                       // 'is'
      consume(160);                 // 'is'
      break;
    case 165:                       // 'le'
      consume(165);                 // 'le'
      break;
    case 167:                       // 'let'
      consume(167);                 // 'let'
      break;
    case 170:                       // 'lt'
      consume(170);                 // 'lt'
      break;
    case 173:                       // 'mod'
      consume(173);                 // 'mod'
      break;
    case 179:                       // 'ne'
      consume(179);                 // 'ne'
      break;
    case 189:                       // 'only'
      consume(189);                 // 'only'
      break;
    case 191:                       // 'or'
      consume(191);                 // 'or'
      break;
    case 192:                       // 'order'
      consume(192);                 // 'order'
      break;
    case 210:                       // 'return'
      consume(210);                 // 'return'
      break;
    case 213:                       // 'satisfies'
      consume(213);                 // 'satisfies'
      break;
    case 225:                       // 'stable'
      consume(225);                 // 'stable'
      break;
    case 226:                       // 'start'
      consume(226);                 // 'start'
      break;
    case 236:                       // 'to'
      consume(236);                 // 'to'
      break;
    case 238:                       // 'treat'
      consume(238);                 // 'treat'
      break;
    case 243:                       // 'union'
      consume(243);                 // 'union'
      break;
    default:
      consume(255);                 // 'where'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  private void try_NCName()
  {
    switch (l1)
    {
    case 14:                        // NCName^Token
      consumeT(14);                 // NCName^Token
      break;
    case 80:                        // 'and'
      consumeT(80);                 // 'and'
      break;
    case 83:                        // 'as'
      consumeT(83);                 // 'as'
      break;
    case 84:                        // 'ascending'
      consumeT(84);                 // 'ascending'
      break;
    case 91:                        // 'case'
      consumeT(91);                 // 'case'
      break;
    case 92:                        // 'cast'
      consumeT(92);                 // 'cast'
      break;
    case 93:                        // 'castable'
      consumeT(93);                 // 'castable'
      break;
    case 96:                        // 'collation'
      consumeT(96);                 // 'collation'
      break;
    case 104:                       // 'count'
      consumeT(104);                // 'count'
      break;
    case 108:                       // 'default'
      consumeT(108);                // 'default'
      break;
    case 112:                       // 'descending'
      consumeT(112);                // 'descending'
      break;
    case 117:                       // 'div'
      consumeT(117);                // 'div'
      break;
    case 121:                       // 'else'
      consumeT(121);                // 'else'
      break;
    case 122:                       // 'empty'
      consumeT(122);                // 'empty'
      break;
    case 125:                       // 'end'
      consumeT(125);                // 'end'
      break;
    case 127:                       // 'eq'
      consumeT(127);                // 'eq'
      break;
    case 130:                       // 'except'
      consumeT(130);                // 'except'
      break;
    case 136:                       // 'for'
      consumeT(136);                // 'for'
      break;
    case 143:                       // 'ge'
      consumeT(143);                // 'ge'
      break;
    case 145:                       // 'group'
      consumeT(145);                // 'group'
      break;
    case 147:                       // 'gt'
      consumeT(147);                // 'gt'
      break;
    case 148:                       // 'idiv'
      consumeT(148);                // 'idiv'
      break;
    case 156:                       // 'instance'
      consumeT(156);                // 'instance'
      break;
    case 157:                       // 'intersect'
      consumeT(157);                // 'intersect'
      break;
    case 160:                       // 'is'
      consumeT(160);                // 'is'
      break;
    case 165:                       // 'le'
      consumeT(165);                // 'le'
      break;
    case 167:                       // 'let'
      consumeT(167);                // 'let'
      break;
    case 170:                       // 'lt'
      consumeT(170);                // 'lt'
      break;
    case 173:                       // 'mod'
      consumeT(173);                // 'mod'
      break;
    case 179:                       // 'ne'
      consumeT(179);                // 'ne'
      break;
    case 189:                       // 'only'
      consumeT(189);                // 'only'
      break;
    case 191:                       // 'or'
      consumeT(191);                // 'or'
      break;
    case 192:                       // 'order'
      consumeT(192);                // 'order'
      break;
    case 210:                       // 'return'
      consumeT(210);                // 'return'
      break;
    case 213:                       // 'satisfies'
      consumeT(213);                // 'satisfies'
      break;
    case 225:                       // 'stable'
      consumeT(225);                // 'stable'
      break;
    case 226:                       // 'start'
      consumeT(226);                // 'start'
      break;
    case 236:                       // 'to'
      consumeT(236);                // 'to'
      break;
    case 238:                       // 'treat'
      consumeT(238);                // 'treat'
      break;
    case 243:                       // 'union'
      consumeT(243);                // 'union'
      break;
    default:
      consumeT(255);                // 'where'
    }
  }

  private void parse_QueryBody()
  {
    eventHandler.startNonterminal("QueryBody", e0);
    parse_Expr();
    eventHandler.endNonterminal("QueryBody", e0);
  }

  private void parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(160);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '}' | '}`'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consume(40);                  // ','
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  private void try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(160);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '}' | '}`'
      if (l1 != 40)                 // ','
      {
        break;
      }
      consumeT(40);                 // ','
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_ExprSingle();
    }
  }

  private void parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(210);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'sliding' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'tumbling' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 159:                       // 'invoke'
      lookahead2W(203);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'updating' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 167:                       // 'let'
      lookahead2W(207);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 208:                       // 'rename'
      lookahead2W(202);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 209:                       // 'replace'
      lookahead2W(209);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'value' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 239:                       // 'try'
      lookahead2W(204);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 109:                       // 'delete'
    case 155:                       // 'insert'
      lookahead2W(208);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 102:                       // 'copy'
    case 128:                       // 'every'
    case 224:                       // 'some'
      lookahead2W(200);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 149:                       // 'if'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(195);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 17557)                // 'if' '('
    {
      lk = memoized(26, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_IfExpr();
          lk = -5;
        }
        catch (ParseException p5A)
        {
          lk = -6;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(26, e0, lk);
      }
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
    case 16039:                     // 'let' '$'
    case 111271:                    // 'let' 'score'
    case 114312:                    // 'for' 'sliding'
    case 123016:                    // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 16000:                     // 'every' '$'
    case 16096:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 17639:                     // 'switch' '('
      parse_SwitchExpr();
      break;
    case 17650:                     // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    case -5:
      parse_IfExpr();
      break;
    case -6:
      parse_BasexIfExpr();
      break;
    case 135407:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 94363:                     // 'insert' 'node'
    case 94875:                     // 'insert' 'nodes'
      parse_InsertExpr();
      break;
    case 94317:                     // 'delete' 'node'
    case 94829:                     // 'delete' 'nodes'
      parse_DeleteExpr();
      break;
    case 94416:                     // 'rename' 'node'
      parse_RenameExpr();
      break;
    case 94417:                     // 'replace' 'node'
    case 128209:                    // 'replace' 'value'
      parse_ReplaceExpr();
      break;
    case 246:                       // 'updating'
    case 126111:                    // 'invoke' 'updating'
      parse_UpdatingFunctionCall();
      break;
    case 15974:                     // 'copy' '$'
      parse_CopyModifyExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  private void try_ExprSingle()
  {
    switch (l1)
    {
    case 136:                       // 'for'
      lookahead2W(210);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'sliding' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'tumbling' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 159:                       // 'invoke'
      lookahead2W(203);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'updating' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 167:                       // 'let'
      lookahead2W(207);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 208:                       // 'rename'
      lookahead2W(202);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '}' | '}`'
      break;
    case 209:                       // 'replace'
      lookahead2W(209);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'transform' | 'treat' | 'union' | 'update' | 'value' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 239:                       // 'try'
      lookahead2W(204);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '{' | '|' | '||' |
                                    // '}' | '}`'
      break;
    case 109:                       // 'delete'
    case 155:                       // 'insert'
      lookahead2W(208);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'transform' | 'treat' | 'union' | 'update' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '}' | '}`'
      break;
    case 102:                       // 'copy'
    case 128:                       // 'every'
    case 224:                       // 'some'
      lookahead2W(200);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    case 149:                       // 'if'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
      lookahead2W(195);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'transform' |
                                    // 'treat' | 'union' | 'update' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                    // '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 17557)                // 'if' '('
    {
      lk = memoized(26, e0);
      if (lk == 0)
      {
        int b0A = b0; int e0A = e0; int l1A = l1;
        int b1A = b1; int e1A = e1; int l2A = l2;
        int b2A = b2; int e2A = e2;
        try
        {
          try_IfExpr();
          memoize(26, e0A, -5);
          lk = -15;
        }
        catch (ParseException p5A)
        {
          lk = -6;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(26, e0A, -6);
        }
      }
    }
    switch (lk)
    {
    case 16008:                     // 'for' '$'
    case 16039:                     // 'let' '$'
    case 111271:                    // 'let' 'score'
    case 114312:                    // 'for' 'sliding'
    case 123016:                    // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 16000:                     // 'every' '$'
    case 16096:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case 17639:                     // 'switch' '('
      try_SwitchExpr();
      break;
    case 17650:                     // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    case -5:
      try_IfExpr();
      break;
    case -6:
      try_BasexIfExpr();
      break;
    case 135407:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 94363:                     // 'insert' 'node'
    case 94875:                     // 'insert' 'nodes'
      try_InsertExpr();
      break;
    case 94317:                     // 'delete' 'node'
    case 94829:                     // 'delete' 'nodes'
      try_DeleteExpr();
      break;
    case 94416:                     // 'rename' 'node'
      try_RenameExpr();
      break;
    case 94417:                     // 'replace' 'node'
    case 128209:                    // 'replace' 'value'
      try_ReplaceExpr();
      break;
    case 246:                       // 'updating'
    case 126111:                    // 'invoke' 'updating'
      try_UpdatingFunctionCall();
      break;
    case 15974:                     // 'copy' '$'
      try_CopyModifyExpr();
      break;
    case -15:
      break;
    default:
      try_OrExpr();
    }
  }

  private void parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      consume(6);                   // PredefinedEntityRef
      break;
    case 13:                        // CharRef
      consume(13);                  // CharRef
      break;
    case 265:                       // '{{'
      consume(265);                 // '{{'
      break;
    case 270:                       // '}}'
      consume(270);                 // '}}'
      break;
    default:
      parse_EnclosedExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  private void try_CommonContent()
  {
    switch (l1)
    {
    case 6:                         // PredefinedEntityRef
      consumeT(6);                  // PredefinedEntityRef
      break;
    case 13:                        // CharRef
      consumeT(13);                 // CharRef
      break;
    case 265:                       // '{{'
      consumeT(265);                // '{{'
      break;
    case 270:                       // '}}'
      consumeT(270);                // '}}'
      break;
    default:
      try_EnclosedExpr();
    }
  }

  private void parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    consume(118);                   // 'document'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  private void try_CompDocConstructor()
  {
    consumeT(118);                  // 'document'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  private void parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    consume(86);                    // 'attribute'
    lookahead1W(225);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  private void try_CompAttrConstructor()
  {
    consumeT(86);                   // 'attribute'
    lookahead1W(225);               // URIQualifiedName | QName^Token | S^WS | '(:' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' |
                                    // 'child' | 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'end' | 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'validate' | 'where' |
                                    // 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  private void parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    consume(206);                   // 'processing-instruction'
    lookahead1W(175);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consume(264);                 // '{'
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      whitespace();
      parse_Expr();
      consume(268);                 // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  private void try_CompPIConstructor()
  {
    consumeT(206);                  // 'processing-instruction'
    lookahead1W(175);               // NCName^Token | S^WS | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
    switch (l1)
    {
    case 264:                       // '{'
      consumeT(264);                // '{'
      lookahead1W(236);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // URIQualifiedName | QName^Token | S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                    // '(:' | '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' |
                                    // '[' | '``[' | 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                    // 'collation' | 'comment' | 'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                    // 'descendant' | 'descendant-or-self' | 'descending' | 'div' | 'document' |
                                    // 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                    // 'eq' | 'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                    // 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                    // 'instance' | 'intersect' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                    // 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'satisfies' | 'schema-attribute' | 'schema-element' | 'self' |
                                    // 'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                    // 'try' | 'typeswitch' | 'union' | 'unordered' | 'update' | 'updating' |
                                    // 'validate' | 'where' | 'with' | 'xquery'
      try_Expr();
      consumeT(268);                // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  private void parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    consume(97);                    // 'comment'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  private void try_CompCommentConstructor()
  {
    consumeT(97);                   // 'comment'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  private void parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    consume(232);                   // 'text'
    lookahead1W(80);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  private void try_CompTextConstructor()
  {
    consumeT(232);                  // 'text'
    lookahead1W(80);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  private void parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 177:                       // 'namespace'
      lookahead2W(179);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'treat' | 'union' | 'where' | '{'
      break;
    case 206:                       // 'processing-instruction'
      lookahead2W(177);             // NCName^Token | S^WS | '#' | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
      break;
    case 86:                        // 'attribute'
    case 120:                       // 'element'
      lookahead2W(226);             // URIQualifiedName | QName^Token | S^WS | '#' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
      break;
    case 97:                        // 'comment'
    case 232:                       // 'text'
      lookahead2W(84);              // S^WS | '#' | '(:' | '{'
      break;
    case 118:                       // 'document'
    case 193:                       // 'ordered'
    case 244:                       // 'unordered'
      lookahead2W(133);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 95:                        // 'child'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 109:                       // 'delete'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 136:                       // 'for'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 155:                       // 'insert'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 179:                       // 'ne'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 218:                       // 'self'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
      parse_Literal();
      break;
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 43:                        // '.'
      parse_ContextItemExpr();
      break;
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17517:                     // 'delete' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17563:                     // 'insert' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17616:                     // 'rename' '('
    case 17617:                     // 'replace' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
      parse_FunctionCall();
      break;
    case 135361:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 135412:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 119:                       // 'document-node'
    case 123:                       // 'empty-sequence'
    case 142:                       // 'function'
    case 149:                       // 'if'
    case 161:                       // 'item'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14957:                     // 'delete' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14998:                     // 'import' '#'
    case 15003:                     // 'insert' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15027:                     // 'ne' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15056:                     // 'rename' '#'
    case 15057:                     // 'replace' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case 171:                       // 'map'
      parse_MapConstructor();
      break;
    case 69:                        // '['
    case 82:                        // 'array'
      parse_ArrayConstructor();
      break;
    case 73:                        // '``['
      parse_StringConstructor();
      break;
    case 65:                        // '?'
      parse_UnaryLookup();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  private void try_PrimaryExpr()
  {
    switch (l1)
    {
    case 177:                       // 'namespace'
      lookahead2W(179);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'and' | 'as' | 'ascending' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' |
                                    // 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                    // 'treat' | 'union' | 'where' | '{'
      break;
    case 206:                       // 'processing-instruction'
      lookahead2W(177);             // NCName^Token | S^WS | '#' | '(:' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | '{'
      break;
    case 86:                        // 'attribute'
    case 120:                       // 'element'
      lookahead2W(226);             // URIQualifiedName | QName^Token | S^WS | '#' | '(:' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                    // 'cast' | 'castable' | 'child' | 'collation' | 'comment' | 'copy' | 'count' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' | 'except' | 'following' |
                                    // 'following-sibling' | 'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'if' | 'import' | 'insert' | 'instance' | 'intersect' | 'invoke' | 'is' |
                                    // 'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'satisfies' | 'schema-attribute' |
                                    // 'schema-element' | 'self' | 'some' | 'stable' | 'start' | 'switch' | 'text' |
                                    // 'to' | 'transform' | 'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'update' | 'validate' | 'where' | 'with' | 'xquery' | '{'
      break;
    case 97:                        // 'comment'
    case 232:                       // 'text'
      lookahead2W(84);              // S^WS | '#' | '(:' | '{'
      break;
    case 118:                       // 'document'
    case 193:                       // 'ordered'
    case 244:                       // 'unordered'
      lookahead2W(133);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 5:                         // URIQualifiedName
    case 15:                        // QName^Token
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 80:                        // 'and'
    case 83:                        // 'as'
    case 84:                        // 'ascending'
    case 85:                        // 'at'
    case 91:                        // 'case'
    case 92:                        // 'cast'
    case 93:                        // 'castable'
    case 95:                        // 'child'
    case 96:                        // 'collation'
    case 102:                       // 'copy'
    case 104:                       // 'count'
    case 107:                       // 'declare'
    case 108:                       // 'default'
    case 109:                       // 'delete'
    case 110:                       // 'descendant'
    case 111:                       // 'descendant-or-self'
    case 112:                       // 'descending'
    case 117:                       // 'div'
    case 121:                       // 'else'
    case 122:                       // 'empty'
    case 125:                       // 'end'
    case 127:                       // 'eq'
    case 128:                       // 'every'
    case 130:                       // 'except'
    case 134:                       // 'following'
    case 135:                       // 'following-sibling'
    case 136:                       // 'for'
    case 143:                       // 'ge'
    case 145:                       // 'group'
    case 147:                       // 'gt'
    case 148:                       // 'idiv'
    case 150:                       // 'import'
    case 155:                       // 'insert'
    case 156:                       // 'instance'
    case 157:                       // 'intersect'
    case 159:                       // 'invoke'
    case 160:                       // 'is'
    case 165:                       // 'le'
    case 167:                       // 'let'
    case 170:                       // 'lt'
    case 173:                       // 'mod'
    case 174:                       // 'modify'
    case 175:                       // 'module'
    case 179:                       // 'ne'
    case 189:                       // 'only'
    case 191:                       // 'or'
    case 192:                       // 'order'
    case 197:                       // 'parent'
    case 202:                       // 'preceding'
    case 203:                       // 'preceding-sibling'
    case 208:                       // 'rename'
    case 209:                       // 'replace'
    case 210:                       // 'return'
    case 213:                       // 'satisfies'
    case 218:                       // 'self'
    case 224:                       // 'some'
    case 225:                       // 'stable'
    case 226:                       // 'start'
    case 236:                       // 'to'
    case 237:                       // 'transform'
    case 238:                       // 'treat'
    case 239:                       // 'try'
    case 243:                       // 'union'
    case 245:                       // 'update'
    case 249:                       // 'validate'
    case 255:                       // 'where'
    case 258:                       // 'with'
    case 262:                       // 'xquery'
      lookahead2W(83);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 1:                         // IntegerLiteral
    case 2:                         // DecimalLiteral
    case 3:                         // DoubleLiteral
    case 4:                         // StringLiteral
      try_Literal();
      break;
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 43:                        // '.'
      try_ContextItemExpr();
      break;
    case 17413:                     // URIQualifiedName '('
    case 17423:                     // QName^Token '('
    case 17486:                     // 'ancestor' '('
    case 17487:                     // 'ancestor-or-self' '('
    case 17488:                     // 'and' '('
    case 17491:                     // 'as' '('
    case 17492:                     // 'ascending' '('
    case 17493:                     // 'at' '('
    case 17499:                     // 'case' '('
    case 17500:                     // 'cast' '('
    case 17501:                     // 'castable' '('
    case 17503:                     // 'child' '('
    case 17504:                     // 'collation' '('
    case 17510:                     // 'copy' '('
    case 17512:                     // 'count' '('
    case 17515:                     // 'declare' '('
    case 17516:                     // 'default' '('
    case 17517:                     // 'delete' '('
    case 17518:                     // 'descendant' '('
    case 17519:                     // 'descendant-or-self' '('
    case 17520:                     // 'descending' '('
    case 17525:                     // 'div' '('
    case 17526:                     // 'document' '('
    case 17529:                     // 'else' '('
    case 17530:                     // 'empty' '('
    case 17533:                     // 'end' '('
    case 17535:                     // 'eq' '('
    case 17536:                     // 'every' '('
    case 17538:                     // 'except' '('
    case 17542:                     // 'following' '('
    case 17543:                     // 'following-sibling' '('
    case 17544:                     // 'for' '('
    case 17551:                     // 'ge' '('
    case 17553:                     // 'group' '('
    case 17555:                     // 'gt' '('
    case 17556:                     // 'idiv' '('
    case 17558:                     // 'import' '('
    case 17563:                     // 'insert' '('
    case 17564:                     // 'instance' '('
    case 17565:                     // 'intersect' '('
    case 17567:                     // 'invoke' '('
    case 17568:                     // 'is' '('
    case 17573:                     // 'le' '('
    case 17575:                     // 'let' '('
    case 17578:                     // 'lt' '('
    case 17581:                     // 'mod' '('
    case 17582:                     // 'modify' '('
    case 17583:                     // 'module' '('
    case 17585:                     // 'namespace' '('
    case 17587:                     // 'ne' '('
    case 17597:                     // 'only' '('
    case 17599:                     // 'or' '('
    case 17600:                     // 'order' '('
    case 17601:                     // 'ordered' '('
    case 17605:                     // 'parent' '('
    case 17610:                     // 'preceding' '('
    case 17611:                     // 'preceding-sibling' '('
    case 17616:                     // 'rename' '('
    case 17617:                     // 'replace' '('
    case 17618:                     // 'return' '('
    case 17621:                     // 'satisfies' '('
    case 17626:                     // 'self' '('
    case 17632:                     // 'some' '('
    case 17633:                     // 'stable' '('
    case 17634:                     // 'start' '('
    case 17644:                     // 'to' '('
    case 17645:                     // 'transform' '('
    case 17646:                     // 'treat' '('
    case 17647:                     // 'try' '('
    case 17651:                     // 'union' '('
    case 17652:                     // 'unordered' '('
    case 17653:                     // 'update' '('
    case 17657:                     // 'validate' '('
    case 17663:                     // 'where' '('
    case 17666:                     // 'with' '('
    case 17670:                     // 'xquery' '('
      try_FunctionCall();
      break;
    case 135361:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 135412:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 119:                       // 'document-node'
    case 123:                       // 'empty-sequence'
    case 142:                       // 'function'
    case 149:                       // 'if'
    case 161:                       // 'item'
    case 178:                       // 'namespace-node'
    case 184:                       // 'node'
    case 215:                       // 'schema-attribute'
    case 216:                       // 'schema-element'
    case 231:                       // 'switch'
    case 242:                       // 'typeswitch'
    case 14853:                     // URIQualifiedName '#'
    case 14863:                     // QName^Token '#'
    case 14926:                     // 'ancestor' '#'
    case 14927:                     // 'ancestor-or-self' '#'
    case 14928:                     // 'and' '#'
    case 14931:                     // 'as' '#'
    case 14932:                     // 'ascending' '#'
    case 14933:                     // 'at' '#'
    case 14934:                     // 'attribute' '#'
    case 14939:                     // 'case' '#'
    case 14940:                     // 'cast' '#'
    case 14941:                     // 'castable' '#'
    case 14943:                     // 'child' '#'
    case 14944:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14950:                     // 'copy' '#'
    case 14952:                     // 'count' '#'
    case 14955:                     // 'declare' '#'
    case 14956:                     // 'default' '#'
    case 14957:                     // 'delete' '#'
    case 14958:                     // 'descendant' '#'
    case 14959:                     // 'descendant-or-self' '#'
    case 14960:                     // 'descending' '#'
    case 14965:                     // 'div' '#'
    case 14966:                     // 'document' '#'
    case 14968:                     // 'element' '#'
    case 14969:                     // 'else' '#'
    case 14970:                     // 'empty' '#'
    case 14973:                     // 'end' '#'
    case 14975:                     // 'eq' '#'
    case 14976:                     // 'every' '#'
    case 14978:                     // 'except' '#'
    case 14982:                     // 'following' '#'
    case 14983:                     // 'following-sibling' '#'
    case 14984:                     // 'for' '#'
    case 14991:                     // 'ge' '#'
    case 14993:                     // 'group' '#'
    case 14995:                     // 'gt' '#'
    case 14996:                     // 'idiv' '#'
    case 14998:                     // 'import' '#'
    case 15003:                     // 'insert' '#'
    case 15004:                     // 'instance' '#'
    case 15005:                     // 'intersect' '#'
    case 15007:                     // 'invoke' '#'
    case 15008:                     // 'is' '#'
    case 15013:                     // 'le' '#'
    case 15015:                     // 'let' '#'
    case 15018:                     // 'lt' '#'
    case 15021:                     // 'mod' '#'
    case 15022:                     // 'modify' '#'
    case 15023:                     // 'module' '#'
    case 15025:                     // 'namespace' '#'
    case 15027:                     // 'ne' '#'
    case 15037:                     // 'only' '#'
    case 15039:                     // 'or' '#'
    case 15040:                     // 'order' '#'
    case 15041:                     // 'ordered' '#'
    case 15045:                     // 'parent' '#'
    case 15050:                     // 'preceding' '#'
    case 15051:                     // 'preceding-sibling' '#'
    case 15054:                     // 'processing-instruction' '#'
    case 15056:                     // 'rename' '#'
    case 15057:                     // 'replace' '#'
    case 15058:                     // 'return' '#'
    case 15061:                     // 'satisfies' '#'
    case 15066:                     // 'self' '#'
    case 15072:                     // 'some' '#'
    case 15073:                     // 'stable' '#'
    case 15074:                     // 'start' '#'
    case 15080:                     // 'text' '#'
    case 15084:                     // 'to' '#'
    case 15085:                     // 'transform' '#'
    case 15086:                     // 'treat' '#'
    case 15087:                     // 'try' '#'
    case 15091:                     // 'union' '#'
    case 15092:                     // 'unordered' '#'
    case 15093:                     // 'update' '#'
    case 15097:                     // 'validate' '#'
    case 15103:                     // 'where' '#'
    case 15106:                     // 'with' '#'
    case 15110:                     // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case 171:                       // 'map'
      try_MapConstructor();
      break;
    case 69:                        // '['
    case 82:                        // 'array'
      try_ArrayConstructor();
      break;
    case 73:                        // '``['
      try_StringConstructor();
      break;
    case 65:                        // '?'
      try_UnaryLookup();
      break;
    default:
      try_Constructor();
    }
  }

  private void consume(int t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  private void consumeT(int t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  private void skip(int code)
  {
    int b0W = b0; int e0W = e0; int l1W = l1;
    int b1W = b1; int e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  private void whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  private int matchW(int tokenSetId)
  {
    int code;
    for (;;)
    {
      code = match(tokenSetId);
      if (code != 18)               // S^WS
      {
        if (code != 36)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  private void lookahead1W(int tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = matchW(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  private void lookahead2W(int tokenSetId)
  {
    if (l2 == 0)
    {
      l2 = matchW(tokenSetId);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  private void lookahead1(int tokenSetId)
  {
    if (l1 == 0)
    {
      l1 = match(tokenSetId);
      b1 = begin;
      e1 = end;
    }
  }

  private int error(int b, int e, int s, int l, int t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new ParseException(bx, ex, sx, lx, tx);
  }

  private void memoize(int i, int e, int v)
  {
    memo.put((e << 5) + i, v);
  }

  private int memoized(int i, int e)
  {
    Integer v = memo.get((e << 5) + i);
    return v == null ? 0 : v;
  }

  private int lk, b0, e0;
  private int l1, b1, e1;
  private int l2, b2, e2;
  private int bx, ex, sx, lx, tx;
  private EventHandler eventHandler = null;
  private java.util.Map<Integer, Integer> memo = new java.util.HashMap<Integer, Integer>();
  private CharSequence input = null;
  private int size = 0;
  private int begin = 0;
  private int end = 0;

  private int match(int tokenSetId)
  {
    boolean nonbmp = false;
    begin = end;
    int current = end;
    int result = INITIAL[tokenSetId];
    int state = 0;

    for (int code = result & 4095; code != 0; )
    {
      int charclass;
      int c0 = current < size ? input.charAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        int c1 = c0 >> 4;
        charclass = MAP1[(c0 & 15) + MAP1[(c1 & 31) + MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          int c1 = current < size ? input.charAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            nonbmp = true;
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
          }
        }

        int lo = 0, hi = 5;
        for (int m = 3; ; m = (hi + lo) >> 1)
        {
          if (MAP2[m] > c0) {hi = m - 1;}
          else if (MAP2[6 + m] < c0) {lo = m + 1;}
          else {charclass = MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      int i0 = (charclass << 12) + code - 1;
      code = TRANSITION[(i0 & 15) + TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      int c1 = end < size ? input.charAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000)
      {
        --end;
      }
      return error(begin, end, state, -1, -1);
    }
    else if (nonbmp)
    {
      for (int i = result >> 9; i > 0; --i)
      {
        --end;
        int c1 = end < size ? input.charAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000)
        {
          --end;
        }
      }
    }
    else
    {
      end -= result >> 9;
    }

    if (end > size) end = size;
    return (result & 511) - 1;
  }

  private static String[] getTokenSet(int tokenSetId)
  {
    java.util.ArrayList<String> expected = new java.util.ArrayList<>();
    int s = tokenSetId < 0 ? - tokenSetId : INITIAL[tokenSetId] & 4095;
    for (int i = 0; i < 271; i += 32)
    {
      int j = i;
      int i0 = (i >> 5) * 2582 + s - 1;
      int i1 = i0 >> 2;
      int i2 = i1 >> 2;
      int f = EXPECTED[(i0 & 3) + EXPECTED[(i1 & 3) + EXPECTED[(i2 & 7) + EXPECTED[i2 >> 3]]]];
      for ( ; f != 0; f >>>= 1, ++j)
      {
        if ((f & 1) != 0)
        {
          expected.add(TOKEN[j]);
        }
      }
    }
    return expected.toArray(new String[]{});
  }

  private static final int[] MAP0 = new int[128];
  static
  {
    final String s1[] =
    {
      /*   0 */ "70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2",
      /*  34 */ "3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20",
      /*  61 */ "21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30",
      /*  86 */ "30, 30, 36, 30, 30, 37, 38, 39, 38, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 30, 50, 51, 52, 53",
      /* 111 */ "54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 38, 38"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 128; ++i) {MAP0[i] = Integer.parseInt(s2[i]);}
  }

  private static final int[] MAP1 = new int[456];
  static
  {
    final String s1[] =
    {
      /*   0 */ "108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181",
      /*  20 */ "181, 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214",
      /*  40 */ "214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214",
      /*  60 */ "214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214",
      /*  80 */ "214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214",
      /* 100 */ "214, 214, 214, 214, 214, 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415",
      /* 120 */ "339, 331, 339, 331, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339",
      /* 140 */ "440, 440, 440, 440, 440, 440, 440, 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424",
      /* 160 */ "422, 423, 423, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339",
      /* 180 */ "339, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423",
      /* 200 */ "423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 338, 339, 339, 339, 339, 339, 339",
      /* 220 */ "339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339",
      /* 240 */ "339, 339, 339, 339, 339, 339, 423, 70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 269 */ "0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17",
      /* 299 */ "17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33",
      /* 324 */ "30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30",
      /* 349 */ "30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30, 40, 41, 42",
      /* 374 */ "43, 44, 45, 46, 47, 48, 49, 30, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66",
      /* 399 */ "67, 68, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 69, 38",
      /* 424 */ "38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69",
      /* 449 */ "69, 69, 69, 69, 69, 69, 69"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 456; ++i) {MAP1[i] = Integer.parseInt(s2[i]);}
  }

  private static final int[] MAP2 = new int[18];
  static
  {
    final String s1[] =
    {
      /*  0 */ "57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30",
      /* 16 */ "30, 38"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 18; ++i) {MAP2[i] = Integer.parseInt(s2[i]);}
  }

  private static final int[] INITIAL = new int[246];
  static
  {
    final String s1[] =
    {
      /*   0 */ "1, 2, 3, 94212, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27",
      /*  27 */ "28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52",
      /*  52 */ "53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77",
      /*  77 */ "78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102",
      /* 102 */ "103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122",
      /* 122 */ "123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142",
      /* 142 */ "143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162",
      /* 162 */ "163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182",
      /* 182 */ "183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202",
      /* 202 */ "203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222",
      /* 222 */ "223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242",
      /* 242 */ "243, 244, 245, 246"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 246; ++i) {INITIAL[i] = Integer.parseInt(s2[i]);}
  }

  private static final int[] TRANSITION = new int[43035];
  static
  {
    final String s1[] =
    {
      /*     0 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*    14 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*    28 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*    42 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*    56 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*    70 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*    84 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*    98 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   112 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   126 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   140 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   154 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   168 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   182 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   196 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   210 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   224 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   238 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   252 */ "19417, 19417, 19417, 19417, 18176, 18192, 18216, 18216, 18216, 18214, 18216, 18216, 18216, 18218",
      /*   266 */ "18234, 18216, 18216, 18198, 18216, 18244, 18260, 19417, 19417, 25309, 19417, 19417, 37275, 19417",
      /*   280 */ "19417, 18994, 19416, 19417, 19417, 18987, 19416, 18944, 19598, 18945, 18314, 20157, 18344, 18365",
      /*   294 */ "20346, 27203, 19417, 30832, 19417, 42618, 18505, 18392, 18426, 18461, 18496, 19261, 19991, 18521",
      /*   308 */ "20505, 19979, 19995, 18525, 20509, 19766, 19332, 42850, 19417, 19417, 19417, 37523, 42869, 42741",
      /*   322 */ "18541, 18576, 18592, 18602, 18621, 39001, 18650, 18670, 24387, 38997, 18646, 18666, 24383, 18688",
      /*   336 */ "19331, 21130, 18710, 18726, 18750, 22021, 19417, 21020, 18785, 18801, 18820, 18859, 18881, 18903",
      /*   350 */ "18925, 18853, 18875, 18897, 18919, 18941, 19639, 18961, 21859, 18977, 21231, 18605, 19010, 19046",
      /*   364 */ "19091, 19107, 19125, 19143, 18630, 19109, 19127, 19168, 19687, 19193, 23820, 19227, 20710, 19248",
      /*   378 */ "19605, 19277, 19297, 19609, 19281, 19326, 19348, 19369, 19417, 19405, 20252, 19384, 18694, 19389",
      /*   392 */ "19434, 19450, 19491, 19526, 19059, 19075, 19068, 19554, 19570, 19586, 19625, 19675, 19703, 19751",
      /*   406 */ "19785, 19306, 19815, 19768, 18328, 21072, 19849, 19891, 19310, 19937, 19953, 20011, 19417, 19417",
      /*   420 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   434 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   448 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   462 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   476 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   490 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   504 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 20044, 19417, 19417, 19417, 19417, 27202",
      /*   518 */ "19417, 19417, 19417, 42362, 25891, 35735, 20066, 20080, 19417, 20108, 34285, 19417, 19417, 25309",
      /*   532 */ "19417, 19417, 37275, 26348, 19417, 18994, 19416, 19417, 19417, 18987, 19416, 18944, 19598, 19769",
      /*   546 */ "20143, 20157, 18344, 18365, 20346, 27203, 19417, 30832, 19417, 42618, 18505, 18392, 18426, 18461",
      /*   560 */ "18496, 19261, 19991, 18521, 20505, 19979, 19995, 18525, 20509, 19766, 19332, 42850, 19417, 19417",
      /*   574 */ "19417, 37523, 42869, 42741, 18541, 18576, 18592, 18602, 18621, 39001, 18650, 18670, 24387, 38997",
      /*   588 */ "18646, 18666, 24383, 18688, 19331, 21130, 18710, 18726, 18750, 22021, 19417, 21020, 18785, 18801",
      /*   602 */ "18820, 18859, 18881, 18903, 18925, 18853, 18875, 18897, 18919, 18941, 19639, 18961, 21859, 18977",
      /*   616 */ "21231, 18605, 19010, 19046, 19091, 19107, 19125, 19143, 18630, 19109, 19127, 19168, 19687, 19193",
      /*   630 */ "23820, 19227, 20710, 19248, 19605, 19277, 19297, 19609, 19281, 19326, 19348, 19369, 19417, 19405",
      /*   644 */ "20252, 19384, 18694, 19389, 19434, 19450, 19491, 19526, 19059, 19075, 19068, 19554, 19570, 19586",
      /*   658 */ "19625, 19675, 19703, 19751, 19785, 19306, 19815, 19768, 18328, 21072, 19849, 19891, 19310, 19937",
      /*   672 */ "19953, 20011, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   686 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   700 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   714 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   728 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   742 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   756 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 20044, 20182",
      /*   770 */ "19417, 19417, 19417, 20203, 19417, 19417, 23816, 20222, 25891, 20205, 19417, 19417, 18734, 20238",
      /*   784 */ "18280, 19417, 19417, 25309, 19417, 19417, 37275, 20268, 19417, 18994, 19416, 19417, 19417, 18987",
      /*   798 */ "19416, 18944, 19598, 18945, 18314, 23807, 18344, 18365, 20346, 27203, 19417, 30832, 19417, 42618",
      /*   812 */ "18505, 18392, 18426, 18461, 18496, 19261, 19991, 18521, 20505, 19979, 19995, 18525, 20509, 19766",
      /*   826 */ "19332, 42850, 19417, 19417, 19417, 37523, 42869, 42741, 18541, 18576, 18592, 18602, 18621, 39001",
      /*   840 */ "18650, 18670, 24387, 38997, 18646, 18666, 24383, 18688, 19331, 21130, 18710, 18726, 18750, 22021",
      /*   854 */ "19417, 21020, 18785, 18801, 18820, 18859, 18881, 18903, 18925, 18853, 18875, 18897, 18919, 18941",
      /*   868 */ "19639, 18961, 21859, 18977, 21231, 18605, 19010, 19046, 19091, 19107, 19125, 19143, 18630, 19109",
      /*   882 */ "19127, 19168, 19687, 19193, 23820, 19227, 20710, 19248, 19605, 19277, 19297, 19609, 19281, 19326",
      /*   896 */ "19348, 19369, 19417, 19405, 20252, 19384, 18694, 19389, 19434, 19450, 19491, 19526, 19059, 19075",
      /*   910 */ "19068, 19554, 19570, 19586, 19625, 19675, 19703, 19751, 19785, 19306, 19815, 19768, 18328, 21072",
      /*   924 */ "19849, 19891, 19310, 19937, 19953, 20011, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   938 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   952 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   966 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   980 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*   994 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1008 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1022 */ "19417, 19417, 20286, 24726, 19417, 19417, 19417, 20315, 19417, 19417, 24727, 42362, 25891, 20336",
      /*  1036 */ "20362, 20376, 20397, 20416, 34285, 19417, 19417, 25309, 20446, 19417, 37275, 20464, 19417, 18994",
      /*  1050 */ "19416, 19417, 19417, 18987, 19416, 18944, 19598, 18945, 18314, 23619, 18344, 18365, 20346, 27203",
      /*  1064 */ "19417, 30832, 19417, 42618, 18505, 18392, 18426, 18461, 18496, 19261, 19991, 18521, 20505, 19979",
      /*  1078 */ "19995, 18525, 20509, 19766, 19332, 42850, 19417, 19417, 19417, 37523, 42869, 42741, 18541, 18576",
      /*  1092 */ "18592, 18602, 18621, 39001, 18650, 18670, 20483, 20499, 18646, 18666, 24383, 18688, 19331, 21130",
      /*  1106 */ "18710, 18726, 18750, 22021, 19417, 21020, 18785, 18801, 18820, 18859, 18881, 18903, 18925, 18853",
      /*  1120 */ "18875, 18897, 18919, 18941, 19639, 18961, 21859, 18977, 21231, 18605, 19010, 19046, 19091, 19107",
      /*  1134 */ "19125, 19143, 18630, 19109, 19127, 19168, 19687, 19193, 23820, 19227, 20710, 19248, 19605, 19277",
      /*  1148 */ "19297, 19609, 19281, 19326, 19348, 19369, 19417, 19405, 20252, 19384, 18694, 19389, 19434, 19450",
      /*  1162 */ "19491, 19526, 19059, 19075, 19068, 19554, 19570, 19586, 19625, 19675, 19703, 19751, 19785, 19306",
      /*  1176 */ "19815, 19768, 18328, 21072, 19849, 19891, 19310, 19937, 19953, 20011, 19417, 19417, 19417, 19417",
      /*  1190 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1204 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1218 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1232 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1246 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1260 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1274 */ "19417, 19417, 19417, 19417, 19417, 19417, 20044, 36556, 19417, 19417, 19417, 20525, 19417, 19417",
      /*  1288 */ "36557, 34188, 25891, 19417, 24360, 20549, 20568, 20581, 34285, 19417, 19417, 25309, 19417, 19417",
      /*  1302 */ "37275, 19417, 19417, 18994, 19416, 19417, 19417, 18987, 19416, 18944, 19598, 18945, 18314, 20157",
      /*  1316 */ "18344, 18365, 20346, 27203, 19417, 30832, 19417, 42618, 18505, 18392, 18426, 18461, 18496, 19261",
      /*  1330 */ "19991, 18521, 20505, 19979, 19995, 18525, 20509, 19766, 19332, 42850, 19417, 19417, 19417, 37523",
      /*  1344 */ "42869, 42741, 18541, 18576, 18592, 18602, 18621, 39001, 18650, 18670, 24387, 38997, 18646, 18666",
      /*  1358 */ "24383, 18688, 19331, 21130, 18710, 18726, 18750, 22021, 19417, 21020, 18785, 18801, 18820, 18859",
      /*  1372 */ "18881, 18903, 18925, 18853, 18875, 18897, 18919, 18941, 19639, 18961, 21859, 18977, 21231, 18605",
      /*  1386 */ "19010, 19046, 19091, 19107, 19125, 19143, 18630, 19109, 19127, 19168, 19687, 19193, 23820, 19227",
      /*  1400 */ "20710, 19248, 19605, 19277, 19297, 19609, 19281, 19326, 19348, 19369, 19417, 19405, 20252, 19384",
      /*  1414 */ "18694, 19389, 19434, 19450, 19491, 19526, 19059, 19075, 19068, 19554, 19570, 19586, 19625, 19675",
      /*  1428 */ "19703, 19751, 19785, 19306, 19815, 19768, 18328, 21072, 19849, 19891, 19310, 19937, 19953, 20011",
      /*  1442 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1456 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1470 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1484 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1498 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1512 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1526 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 20044, 19417, 19417, 19417",
      /*  1540 */ "19417, 20597, 19417, 19417, 19417, 20603, 20619, 37369, 19417, 19417, 34385, 34398, 34285, 19417",
      /*  1554 */ "19417, 25309, 19417, 19417, 37275, 19417, 19417, 18994, 19416, 19417, 19417, 18987, 19416, 18944",
      /*  1568 */ "19598, 18945, 18314, 20157, 18344, 18365, 20346, 27203, 19417, 30832, 19417, 42618, 18505, 18392",
      /*  1582 */ "18426, 18461, 18496, 19261, 19991, 18521, 20505, 19979, 19995, 18525, 20509, 19766, 19332, 42850",
      /*  1596 */ "19417, 19417, 19417, 37523, 42869, 42741, 18541, 18576, 18592, 18602, 18621, 39001, 18650, 18670",
      /*  1610 */ "24387, 38997, 18646, 18666, 24383, 18688, 19331, 21130, 18710, 18726, 18750, 22021, 19417, 21020",
      /*  1624 */ "18785, 18801, 18820, 18859, 18881, 18903, 18925, 18853, 18875, 18897, 18919, 18941, 19639, 18961",
      /*  1638 */ "21859, 18977, 21231, 18605, 19010, 19046, 19091, 19107, 19125, 19143, 18630, 19109, 19127, 19168",
      /*  1652 */ "19687, 19193, 23820, 19227, 20710, 19248, 19605, 19277, 19297, 19609, 19281, 19326, 19348, 19369",
      /*  1666 */ "19417, 19405, 20252, 19384, 18694, 19389, 19434, 19450, 19491, 19526, 19059, 19075, 19068, 19554",
      /*  1680 */ "19570, 19586, 19625, 19675, 19703, 19751, 19785, 19306, 19815, 19768, 18328, 21072, 19849, 19891",
      /*  1694 */ "19310, 19937, 19953, 20011, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1708 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1722 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1736 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1750 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1764 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1778 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1792 */ "20044, 19417, 19417, 19417, 19417, 27202, 19417, 19417, 19417, 22208, 22185, 19417, 19417, 19417",
      /*  1806 */ "19417, 37283, 18270, 19417, 19417, 25309, 19417, 19417, 37275, 19417, 19417, 18994, 19416, 19417",
      /*  1820 */ "19417, 18987, 19416, 18944, 19598, 18945, 18314, 20157, 18344, 18365, 20346, 27203, 19417, 30832",
      /*  1834 */ "19417, 42618, 18505, 18392, 18426, 18461, 18496, 19261, 19991, 18521, 20505, 23468, 19995, 18525",
      /*  1848 */ "20509, 19766, 19332, 42850, 19417, 19417, 19417, 37523, 42869, 42741, 18541, 18576, 18592, 18602",
      /*  1862 */ "18621, 39001, 18650, 18670, 24387, 38997, 18646, 18666, 24383, 18688, 19331, 21130, 18710, 18726",
      /*  1876 */ "18750, 22021, 19417, 21020, 18785, 18801, 18820, 18859, 18881, 18903, 18925, 18853, 18875, 18897",
      /*  1890 */ "18919, 18941, 19639, 18961, 21859, 18977, 21231, 18605, 19010, 19046, 19091, 19107, 19125, 19143",
      /*  1904 */ "18630, 19109, 19127, 19168, 19687, 19193, 23820, 19227, 20710, 19248, 19605, 19277, 19297, 19609",
      /*  1918 */ "19281, 19326, 19348, 19369, 19417, 19405, 20252, 19384, 18694, 19389, 19434, 19450, 19491, 19526",
      /*  1932 */ "19059, 19075, 19068, 19554, 19570, 19586, 19625, 19675, 19703, 19751, 19785, 19306, 19815, 19768",
      /*  1946 */ "18328, 21072, 19849, 19891, 19310, 19937, 19953, 20011, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1960 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1974 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  1988 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2002 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2016 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2030 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2044 */ "19417, 19417, 19417, 19417, 20044, 20640, 19417, 19417, 19417, 20661, 19417, 19417, 23435, 20680",
      /*  2058 */ "25891, 20663, 19417, 19417, 25860, 20696, 43019, 19417, 19417, 25309, 19417, 19417, 37275, 33286",
      /*  2072 */ "19417, 18994, 19416, 19417, 19417, 18987, 19416, 18944, 19598, 18945, 18314, 23423, 18344, 18365",
      /*  2086 */ "20346, 27203, 19417, 30832, 19417, 42618, 18505, 18392, 18426, 18461, 18496, 19261, 19991, 18521",
      /*  2100 */ "20505, 19979, 19995, 18525, 20509, 19766, 19332, 42850, 19417, 19417, 19417, 37523, 42869, 42741",
      /*  2114 */ "18541, 18576, 18592, 18602, 18621, 39001, 18650, 18670, 24387, 38997, 18646, 18666, 24383, 18688",
      /*  2128 */ "19331, 21130, 18710, 18726, 18750, 22021, 19417, 21020, 18785, 18801, 18820, 18859, 18881, 18903",
      /*  2142 */ "18925, 18853, 18875, 18897, 18919, 18941, 19639, 18961, 21859, 18977, 21231, 18605, 19010, 19046",
      /*  2156 */ "19091, 19107, 19125, 19143, 18630, 19109, 19127, 19168, 19687, 19193, 23820, 19227, 20710, 19248",
      /*  2170 */ "19605, 19277, 19297, 19609, 19281, 19326, 19348, 19369, 19417, 19405, 20252, 19384, 18694, 19389",
      /*  2184 */ "19434, 19450, 19491, 19526, 19059, 19075, 19068, 19554, 19570, 19586, 19625, 19675, 19703, 19751",
      /*  2198 */ "19785, 19306, 19815, 19768, 18328, 21072, 19849, 19891, 19310, 19937, 19953, 20011, 19417, 19417",
      /*  2212 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2226 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2240 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2254 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2268 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2282 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2296 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 20044, 20726, 20770, 20770, 20770, 20753",
      /*  2310 */ "20770, 20770, 20737, 20786, 20765, 20808, 20802, 20824, 20860, 20873, 34285, 19417, 19417, 20624",
      /*  2324 */ "19417, 19417, 37275, 19417, 19417, 18994, 19416, 19417, 19417, 18987, 19416, 18944, 19598, 18945",
      /*  2338 */ "18314, 20157, 18344, 18365, 24588, 20889, 19417, 30832, 19417, 42618, 18505, 18392, 18426, 18461",
      /*  2352 */ "18496, 19261, 19991, 18521, 20505, 19979, 19995, 18525, 20509, 19766, 19332, 42850, 19417, 19417",
      /*  2366 */ "19417, 37523, 42869, 42741, 18541, 18576, 18592, 18602, 18621, 39001, 18650, 18670, 24387, 38997",
      /*  2380 */ "18646, 18666, 24383, 18688, 19331, 21130, 18710, 18726, 18750, 22021, 19417, 21020, 18785, 18801",
      /*  2394 */ "18820, 18859, 18881, 18903, 18925, 18853, 18875, 18897, 18919, 18941, 19639, 18961, 21859, 18977",
      /*  2408 */ "21231, 18605, 19010, 19046, 19091, 19107, 19125, 19143, 18630, 19109, 19127, 19168, 19687, 19193",
      /*  2422 */ "23820, 19227, 20710, 19248, 19605, 19277, 19297, 19609, 19281, 19326, 19348, 19369, 19417, 19405",
      /*  2436 */ "20252, 19384, 18694, 19389, 19434, 19450, 19491, 19526, 19059, 19075, 19068, 19554, 19570, 19586",
      /*  2450 */ "19625, 19675, 19703, 19751, 19785, 19306, 19815, 19768, 18328, 21072, 19849, 19891, 19310, 19937",
      /*  2464 */ "19953, 20011, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2478 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2492 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2506 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2520 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2534 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2548 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 20044, 40889",
      /*  2562 */ "19417, 19417, 19417, 20906, 19417, 19417, 27669, 42362, 20918, 35355, 35365, 35371, 35341, 20939",
      /*  2576 */ "34285, 19417, 19417, 23439, 19417, 19417, 37275, 19417, 19417, 18994, 19416, 19417, 19417, 18987",
      /*  2590 */ "19416, 18944, 19598, 18945, 18314, 20157, 18344, 18365, 20346, 19417, 19417, 30832, 19417, 42618",
      /*  2604 */ "18505, 18392, 18426, 18461, 18496, 19261, 19991, 18521, 20505, 19979, 19995, 18525, 20509, 19766",
      /*  2618 */ "19332, 42850, 19417, 19417, 19417, 37523, 42869, 42741, 18541, 18576, 18592, 18602, 18621, 39001",
      /*  2632 */ "18650, 18670, 24387, 38997, 18646, 18666, 24383, 18688, 19331, 21130, 18710, 18726, 18750, 22021",
      /*  2646 */ "19417, 21020, 18785, 18801, 18820, 18859, 18881, 18903, 18925, 18853, 18875, 18897, 18919, 18941",
      /*  2660 */ "19639, 18961, 21859, 18977, 21231, 18605, 19010, 19046, 19091, 19107, 19125, 19143, 18630, 19109",
      /*  2674 */ "19127, 19168, 19687, 19193, 23820, 19227, 20710, 19248, 19605, 19277, 19297, 19609, 19281, 19326",
      /*  2688 */ "19348, 19369, 19417, 19405, 20252, 19384, 18694, 19389, 19434, 19450, 19491, 19526, 19059, 19075",
      /*  2702 */ "19068, 19554, 19570, 19586, 19625, 19675, 19703, 19751, 19785, 19306, 19815, 19768, 18328, 21072",
      /*  2716 */ "19849, 19891, 19310, 19937, 19953, 20011, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2730 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2744 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2758 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2772 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2786 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2800 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2814 */ "19417, 19417, 20044, 25240, 19417, 19417, 19417, 27202, 19417, 19417, 19417, 42362, 25891, 20980",
      /*  2828 */ "20984, 21000, 21036, 21049, 34285, 19417, 19417, 25309, 19417, 19417, 37275, 19417, 19417, 18994",
      /*  2842 */ "19416, 19417, 19417, 18987, 19416, 18944, 19598, 18945, 18314, 20157, 18344, 18365, 20346, 27203",
      /*  2856 */ "19417, 30832, 19417, 42618, 18505, 18392, 18426, 18461, 18496, 19261, 19991, 18521, 20505, 23481",
      /*  2870 */ "19995, 18525, 20509, 19766, 19332, 42850, 19417, 19417, 19417, 37523, 42869, 42741, 18541, 18576",
      /*  2884 */ "18592, 18602, 18621, 39001, 18650, 18670, 24387, 21065, 18646, 18666, 24383, 18688, 19331, 21130",
      /*  2898 */ "18710, 18726, 18750, 22021, 19417, 21020, 18785, 18801, 18820, 18859, 18881, 18903, 18925, 18853",
      /*  2912 */ "18875, 18897, 18919, 18941, 19639, 18961, 21859, 18977, 21231, 18605, 19010, 19046, 19091, 19107",
      /*  2926 */ "19125, 19143, 18630, 19109, 19127, 19168, 19687, 19193, 23820, 19227, 20710, 19248, 19605, 19277",
      /*  2940 */ "19297, 19609, 19281, 19326, 19348, 19369, 19417, 19405, 20252, 19384, 18694, 19389, 19434, 19450",
      /*  2954 */ "19491, 19526, 19059, 19075, 19068, 19554, 19570, 19586, 19625, 19675, 19703, 19751, 19785, 19306",
      /*  2968 */ "19815, 19768, 18328, 21072, 19849, 19891, 19310, 19937, 19953, 20011, 19417, 19417, 19417, 19417",
      /*  2982 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  2996 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3010 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3024 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3038 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3052 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3066 */ "19417, 19417, 19417, 19417, 19417, 19417, 20044, 19417, 19417, 19417, 19417, 27202, 19417, 19417",
      /*  3080 */ "19417, 42362, 25891, 34951, 34956, 21088, 42890, 21116, 34285, 19417, 19417, 25309, 19417, 19417",
      /*  3094 */ "37275, 19417, 19417, 18994, 19416, 19417, 19417, 18987, 19416, 18944, 19598, 18945, 18314, 20157",
      /*  3108 */ "18344, 18365, 20346, 27203, 19417, 29842, 19417, 42618, 18505, 18392, 18426, 18461, 18496, 19261",
      /*  3122 */ "19991, 18521, 20505, 19979, 19995, 18525, 20509, 19766, 19332, 42850, 19417, 19417, 19417, 37523",
      /*  3136 */ "42869, 42741, 18541, 18576, 18592, 18602, 18621, 39001, 18650, 18670, 24387, 38997, 18646, 18666",
      /*  3150 */ "24383, 18688, 19331, 21130, 18710, 18726, 18750, 22021, 19417, 21020, 18785, 18801, 18820, 18859",
      /*  3164 */ "18881, 18903, 18925, 18853, 18875, 18897, 18919, 18941, 19639, 18961, 21859, 18977, 21231, 18605",
      /*  3178 */ "19010, 19046, 19091, 19107, 19125, 19143, 18630, 19109, 19127, 19168, 19687, 19193, 23820, 19227",
      /*  3192 */ "20710, 19248, 19605, 19277, 19297, 19609, 19281, 19326, 19348, 19369, 19417, 19405, 20252, 19384",
      /*  3206 */ "18694, 19389, 19434, 19450, 19491, 19526, 19059, 19075, 19068, 19554, 19570, 19586, 19625, 19675",
      /*  3220 */ "19703, 19751, 19785, 19306, 19815, 19768, 18328, 21072, 19849, 19891, 19310, 19937, 19953, 20011",
      /*  3234 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3248 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3262 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3276 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3290 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3304 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3318 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 20044, 38818, 19417, 19417",
      /*  3332 */ "19417, 21146, 21199, 19417, 38821, 42362, 21217, 35402, 35406, 21159, 19417, 21247, 34285, 19417",
      /*  3346 */ "19417, 25309, 19417, 19417, 37275, 19417, 19417, 18994, 19416, 19417, 19417, 18987, 19416, 18944",
      /*  3360 */ "19598, 18945, 18314, 20157, 18344, 18365, 20346, 27203, 19417, 30832, 19417, 42618, 18505, 18392",
      /*  3374 */ "18426, 18461, 18496, 19261, 19991, 18521, 20505, 19979, 19995, 18525, 20509, 19766, 19332, 42850",
      /*  3388 */ "19417, 19417, 19417, 37523, 42869, 42741, 18541, 18576, 18592, 18602, 18621, 39001, 18650, 18670",
      /*  3402 */ "24387, 38997, 18646, 18666, 24383, 18688, 19331, 21130, 18710, 18726, 18750, 22021, 19417, 21020",
      /*  3416 */ "18785, 18801, 18820, 18859, 18881, 18903, 18925, 18853, 18875, 18897, 18919, 18941, 19639, 18961",
      /*  3430 */ "21859, 18977, 21231, 18605, 19010, 19046, 19091, 19107, 19125, 19143, 18630, 19109, 19127, 19168",
      /*  3444 */ "19687, 19193, 23820, 19227, 20710, 19248, 19605, 19277, 19297, 19609, 19281, 19326, 19348, 19369",
      /*  3458 */ "19417, 19405, 20252, 19384, 18694, 19389, 19434, 19450, 19491, 19526, 19059, 19075, 19068, 19554",
      /*  3472 */ "19570, 19586, 19625, 19675, 19703, 19751, 19785, 19306, 19815, 19768, 18328, 21072, 19849, 19891",
      /*  3486 */ "19310, 19937, 19953, 20011, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3500 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3514 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3528 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3542 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3556 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3570 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3584 */ "21284, 19417, 19417, 19417, 19417, 27202, 19417, 19417, 19417, 42362, 25891, 20023, 20028, 21308",
      /*  3598 */ "20017, 21343, 34285, 19417, 19417, 25309, 19417, 19417, 37275, 19417, 19417, 32335, 19734, 19417",
      /*  3612 */ "19417, 24236, 19734, 32368, 40547, 31009, 21546, 27364, 19417, 21359, 20664, 24031, 32199, 29842",
      /*  3626 */ "30138, 23350, 32335, 42449, 19417, 19417, 24234, 30497, 32368, 32368, 32368, 21594, 25813, 25813",
      /*  3640 */ "25814, 21378, 42487, 19417, 19417, 19417, 19417, 30346, 19417, 21403, 21422, 32336, 19417, 23351",
      /*  3654 */ "35844, 32368, 32368, 32368, 28691, 21442, 25813, 25813, 25813, 21995, 42486, 21462, 19417, 19417",
      /*  3668 */ "19417, 19417, 19417, 24416, 32336, 19417, 32234, 32366, 32368, 32368, 28691, 21490, 25813, 25813",
      /*  3682 */ "25813, 36495, 42488, 19417, 19417, 19417, 19417, 21514, 42449, 23350, 32360, 25358, 32368, 26153",
      /*  3696 */ "28113, 40623, 25813, 39789, 30344, 19417, 40134, 19417, 38874, 24232, 32367, 32368, 21535, 25813",
      /*  3710 */ "41537, 28413, 21562, 19417, 39837, 33410, 35505, 32368, 21387, 25813, 26812, 19417, 23987, 19725",
      /*  3724 */ "21581, 37561, 21620, 36251, 22225, 28650, 21640, 21660, 22226, 21697, 31538, 25554, 42485, 27549",
      /*  3738 */ "28445, 22003, 40270, 42482, 21644, 21644, 37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3752 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3766 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3780 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3794 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3808 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3822 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  3836 */ "19417, 19417, 19417, 19417, 20044, 19417, 19417, 19417, 19417, 27202, 19417, 19417, 19417, 21734",
      /*  3850 */ "25891, 19417, 19417, 19417, 39186, 21750, 34285, 19417, 19417, 25309, 19417, 19417, 18290, 19417",
      /*  3864 */ "19417, 32335, 19734, 19417, 19417, 24236, 19734, 32368, 40547, 31009, 21780, 27364, 19417, 19417",
      /*  3878 */ "20664, 27203, 19417, 30832, 19417, 23350, 32335, 42449, 19417, 19417, 24234, 30497, 32368, 32368",
      /*  3892 */ "32368, 21594, 25813, 25813, 25814, 37612, 42487, 19417, 19417, 19417, 19417, 30346, 19417, 19417",
      /*  3906 */ "38875, 32336, 19417, 23351, 35844, 32368, 32368, 32368, 28691, 21442, 25813, 25813, 25813, 21995",
      /*  3920 */ "42486, 19417, 19417, 19417, 19417, 19417, 19417, 24235, 32336, 19417, 32234, 32366, 32368, 32368",
      /*  3934 */ "28691, 21490, 25813, 25813, 25813, 36495, 42488, 19417, 19417, 19417, 19417, 24233, 42449, 23350",
      /*  3948 */ "32360, 32368, 32368, 26153, 28113, 25813, 25813, 39789, 30344, 19417, 19417, 19417, 38874, 24232",
      /*  3962 */ "32367, 32368, 26635, 25813, 25813, 28413, 19417, 19417, 19417, 33410, 35505, 32368, 21387, 25813",
      /*  3976 */ "28418, 19417, 19417, 19725, 27743, 26706, 25813, 36251, 22225, 28650, 27550, 33257, 22226, 26706",
      /*  3990 */ "42485, 27546, 42485, 27549, 40266, 21385, 40270, 42482, 21644, 21644, 37483, 23677, 19417, 19417",
      /*  4004 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4018 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4032 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4046 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4060 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4074 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4088 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 20044, 21853, 19417, 19417, 19417, 27202",
      /*  4102 */ "19417, 19417, 19417, 42362, 25891, 34985, 21829, 21843, 35214, 21875, 34285, 19417, 19417, 25309",
      /*  4116 */ "19417, 19417, 37275, 42431, 19417, 18994, 18556, 19417, 19417, 18987, 19416, 18944, 19598, 18945",
      /*  4130 */ "18314, 20157, 18344, 18365, 20346, 27203, 19417, 30832, 19417, 42618, 18505, 18392, 18426, 18461",
      /*  4144 */ "18496, 19261, 19991, 18521, 20505, 19979, 19995, 18525, 20509, 19766, 19332, 42850, 19417, 19417",
      /*  4158 */ "19417, 37523, 42869, 42741, 18541, 18576, 18592, 18602, 18621, 39001, 18650, 18670, 24387, 38997",
      /*  4172 */ "18646, 18666, 24383, 18688, 19331, 21130, 18710, 18726, 18750, 22021, 19417, 21020, 18785, 18801",
      /*  4186 */ "18820, 18859, 18881, 18903, 18925, 18853, 18875, 18897, 18919, 18941, 19639, 18961, 21859, 18977",
      /*  4200 */ "21231, 18605, 19010, 19046, 19091, 19107, 19125, 19143, 18630, 19109, 19127, 19168, 19687, 19193",
      /*  4214 */ "23820, 19227, 20710, 19248, 19605, 19277, 19297, 19609, 19281, 19326, 19348, 19369, 19417, 19405",
      /*  4228 */ "20252, 19384, 18694, 19389, 19434, 19450, 19491, 19526, 19059, 19075, 19068, 19554, 19570, 19586",
      /*  4242 */ "19625, 19675, 19703, 19751, 19785, 19306, 19815, 19768, 18328, 21072, 19849, 19891, 19310, 19937",
      /*  4256 */ "19953, 20011, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4270 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4284 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4298 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4312 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4326 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4340 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 20044, 21905",
      /*  4354 */ "19417, 19417, 19417, 27202, 19417, 19417, 19417, 31645, 25891, 21924, 19417, 19417, 19833, 21945",
      /*  4368 */ "20166, 19417, 19417, 25309, 19417, 19417, 31638, 19417, 19417, 32335, 19734, 19417, 19417, 24236",
      /*  4382 */ "19734, 32368, 40547, 31009, 21981, 27364, 19417, 19417, 20664, 27203, 19417, 26422, 22019, 23350",
      /*  4396 */ "32335, 42449, 19417, 19417, 24234, 30497, 32368, 32368, 32368, 21594, 25813, 25813, 25814, 37612",
      /*  4410 */ "21604, 19417, 19417, 19417, 19417, 32806, 25852, 19417, 38875, 32336, 19417, 23351, 35844, 32368",
      /*  4424 */ "32368, 32368, 28691, 21442, 25813, 25813, 25813, 21995, 40805, 19417, 19417, 19417, 19417, 19417",
      /*  4438 */ "38639, 24235, 32336, 19417, 32234, 32366, 32368, 32368, 35902, 22037, 25813, 25813, 25813, 36495",
      /*  4452 */ "30925, 19417, 19417, 19417, 19417, 24233, 42449, 23350, 32360, 32368, 32368, 27957, 22061, 25813",
      /*  4466 */ "25813, 39789, 30344, 19417, 19417, 19417, 38874, 24232, 32367, 32368, 33218, 25813, 25813, 28413",
      /*  4480 */ "19417, 19417, 19417, 33410, 35505, 32368, 21387, 25813, 28418, 19417, 19417, 19725, 27743, 26706",
      /*  4494 */ "25813, 36251, 22225, 28650, 27550, 33257, 22226, 26706, 42485, 27546, 42485, 27549, 40266, 21385",
      /*  4508 */ "40270, 42482, 21644, 21644, 37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4522 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4536 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4550 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4564 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4578 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4592 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4606 */ "19417, 19417, 20044, 20320, 19417, 19417, 19417, 22083, 22101, 19417, 23230, 42362, 31244, 21813",
      /*  4620 */ "22122, 22136, 19417, 22171, 30812, 19417, 19417, 22190, 22206, 19417, 37275, 19417, 19417, 18994",
      /*  4634 */ "19416, 19417, 19417, 18987, 19416, 22384, 22984, 41396, 22779, 22560, 18344, 18365, 19825, 22224",
      /*  4648 */ "19417, 30832, 19417, 42618, 18505, 18392, 18426, 18461, 18496, 22242, 22258, 22274, 22366, 23130",
      /*  4662 */ "22312, 22290, 22412, 22865, 22930, 42850, 19417, 19417, 19417, 37523, 42869, 42741, 18541, 18576",
      /*  4676 */ "18592, 18602, 18621, 22328, 22358, 22382, 22974, 41390, 22400, 22428, 22435, 22695, 22929, 21130",
      /*  4690 */ "18710, 18726, 18750, 22021, 19417, 21020, 18785, 18801, 18820, 22451, 22478, 22736, 22852, 22494",
      /*  4704 */ "22534, 22507, 22550, 22585, 22518, 18961, 21859, 18977, 21231, 18605, 19010, 19046, 22616, 22462",
      /*  4718 */ "22343, 22632, 28947, 23022, 22665, 22681, 22821, 19193, 23820, 19227, 20710, 19248, 22721, 22752",
      /*  4732 */ "22768, 23143, 22795, 22811, 19348, 19369, 19417, 19405, 20430, 22837, 22705, 22302, 23100, 19450",
      /*  4746 */ "19491, 19526, 22888, 22904, 22920, 22946, 19570, 22962, 23008, 23048, 19703, 23085, 23032, 41139",
      /*  4760 */ "22992, 41142, 22600, 22872, 23116, 23159, 22593, 23194, 23210, 23224, 19417, 19417, 19417, 19417",
      /*  4774 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4788 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4802 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4816 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4830 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4844 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  4858 */ "19417, 19417, 19417, 19417, 19417, 19417, 20044, 41813, 19417, 19417, 19417, 23246, 23257, 19417",
      /*  4872 */ "19417, 42362, 30787, 36097, 23280, 23286, 19417, 23302, 34285, 19417, 19417, 25309, 19417, 19417",
      /*  4886 */ "37275, 19417, 19417, 18994, 19416, 19417, 19417, 18987, 19416, 18944, 19598, 18945, 18314, 20157",
      /*  4900 */ "18344, 18365, 20346, 27203, 19417, 30832, 19417, 42618, 18505, 18392, 18426, 18461, 18496, 19261",
      /*  4914 */ "19991, 18521, 20505, 19979, 19995, 18525, 20509, 19766, 19332, 42850, 19417, 19417, 19417, 37523",
      /*  4928 */ "24452, 42741, 18541, 18576, 18592, 18602, 18621, 39001, 18650, 18670, 24387, 38997, 18646, 18666",
      /*  4942 */ "24383, 18688, 19177, 23332, 18710, 18726, 18750, 22021, 23348, 21020, 18785, 18801, 18820, 18859",
      /*  4956 */ "18881, 18903, 18925, 18853, 18875, 18897, 18919, 18941, 19863, 18961, 21859, 18977, 21231, 18605",
      /*  4970 */ "19010, 19046, 19091, 19107, 19125, 23367, 23409, 19109, 19127, 19168, 19687, 19193, 23820, 19227",
      /*  4984 */ "20710, 19248, 19605, 19277, 23455, 19609, 19281, 19326, 19348, 19369, 19417, 19405, 20252, 19384",
      /*  4998 */ "18694, 19389, 19434, 19450, 19491, 19526, 19059, 19075, 19068, 19554, 19570, 19586, 19625, 19675",
      /*  5012 */ "19703, 19751, 19785, 19306, 19815, 19768, 18328, 21072, 19849, 19891, 19310, 19937, 19953, 20011",
      /*  5026 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5040 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5054 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5068 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5082 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5096 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5110 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 20044, 19417, 19417, 19417",
      /*  5124 */ "19417, 27202, 19417, 19417, 19417, 19417, 35453, 35799, 35804, 23533, 33883, 23561, 34285, 19417",
      /*  5138 */ "19417, 25309, 19417, 19417, 37275, 19417, 19417, 18994, 18833, 19417, 19417, 18987, 19416, 18944",
      /*  5152 */ "19598, 18945, 23605, 20157, 18344, 18365, 20346, 27203, 19417, 30832, 19417, 42618, 18505, 18392",
      /*  5166 */ "18426, 18461, 18496, 19261, 19991, 18521, 20505, 19979, 19995, 18525, 20509, 19766, 19332, 42850",
      /*  5180 */ "19417, 19417, 19417, 37523, 42869, 42741, 18541, 18576, 18592, 18602, 18621, 39001, 18650, 18670",
      /*  5194 */ "24387, 38997, 18646, 18666, 24383, 18688, 19331, 21130, 18710, 18726, 18750, 22021, 19417, 21020",
      /*  5208 */ "18785, 18801, 18820, 18859, 18881, 18903, 18925, 18853, 18875, 18897, 18919, 18941, 19639, 18961",
      /*  5222 */ "21859, 18977, 21231, 18605, 19010, 19046, 19091, 19107, 19125, 19143, 18630, 19109, 19127, 19168",
      /*  5236 */ "19687, 19193, 23820, 19227, 20710, 19248, 19605, 19277, 19297, 19609, 19281, 19326, 19348, 19369",
      /*  5250 */ "19417, 19405, 20252, 19384, 18694, 19389, 19434, 19450, 19491, 19526, 19059, 19075, 19068, 19554",
      /*  5264 */ "19570, 19586, 19625, 19675, 19703, 19751, 19785, 19306, 19815, 19768, 18328, 21072, 19849, 19891",
      /*  5278 */ "19310, 19937, 19953, 20011, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5292 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5306 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5320 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5334 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5348 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5362 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5376 */ "23635, 19417, 23724, 19417, 19417, 27202, 19417, 19417, 19417, 42362, 25891, 36186, 23699, 23713",
      /*  5390 */ "19417, 23741, 42717, 19417, 19417, 25309, 19417, 19417, 37275, 19417, 19417, 18994, 23771, 19417",
      /*  5404 */ "19417, 18987, 19416, 18944, 19598, 18945, 23793, 20157, 18344, 18365, 20346, 27203, 19417, 30832",
      /*  5418 */ "19417, 42618, 18505, 18392, 18426, 18461, 18496, 19261, 19991, 18521, 20505, 19979, 19995, 18525",
      /*  5432 */ "20509, 19766, 19332, 42850, 19417, 19417, 19417, 37523, 42869, 42741, 18541, 18576, 18592, 18602",
      /*  5446 */ "18621, 39001, 18650, 18670, 24387, 38997, 18646, 18666, 24383, 18688, 19331, 21130, 18710, 18726",
      /*  5460 */ "18750, 22021, 19417, 21020, 18785, 18801, 18820, 18859, 18881, 18903, 18925, 18853, 18875, 18897",
      /*  5474 */ "18919, 18941, 19639, 18961, 21859, 18977, 21231, 18605, 19010, 19046, 19091, 19107, 19125, 19143",
      /*  5488 */ "18630, 19109, 19127, 19168, 19687, 19193, 23820, 19227, 20710, 19248, 19605, 19277, 19297, 19609",
      /*  5502 */ "19281, 19326, 19348, 19369, 19417, 19405, 20252, 19384, 18694, 19389, 19434, 19450, 19491, 19526",
      /*  5516 */ "19059, 19075, 19068, 19554, 19570, 19586, 19625, 19675, 19703, 19751, 19785, 19306, 19815, 19768",
      /*  5530 */ "18328, 21072, 19849, 19891, 19310, 19937, 19953, 20011, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5544 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5558 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5572 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5586 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5600 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5614 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5628 */ "19417, 19417, 19417, 19417, 23836, 36621, 19417, 19417, 19417, 27202, 19417, 19417, 19417, 42362",
      /*  5642 */ "25891, 37188, 37193, 23872, 19417, 23888, 23925, 19417, 19417, 25309, 19417, 19417, 37275, 19417",
      /*  5656 */ "19417, 18994, 18404, 19417, 19417, 18987, 19416, 18944, 19598, 18945, 18314, 23517, 18344, 18365",
      /*  5670 */ "20346, 27203, 19417, 30832, 19417, 42618, 18505, 18392, 18426, 18461, 18496, 19261, 19991, 18521",
      /*  5684 */ "20505, 19979, 19995, 18525, 20509, 19766, 19332, 42850, 19417, 19417, 19417, 37523, 42869, 42741",
      /*  5698 */ "18541, 18576, 18592, 18602, 18621, 39001, 18650, 18670, 24387, 38997, 18646, 18666, 24383, 18688",
      /*  5712 */ "19331, 21130, 18710, 18726, 18750, 22021, 19417, 21020, 18785, 18801, 18820, 18859, 18881, 18903",
      /*  5726 */ "18925, 18853, 18875, 18897, 18919, 18941, 19639, 18961, 21859, 18977, 21231, 18605, 19010, 19046",
      /*  5740 */ "19091, 19107, 19125, 19143, 18630, 19109, 19127, 19168, 19687, 19193, 23820, 19227, 20710, 19248",
      /*  5754 */ "19605, 19277, 19297, 19609, 19281, 19326, 19348, 19369, 19417, 19405, 20252, 19384, 18694, 19389",
      /*  5768 */ "19434, 19450, 19491, 19526, 19059, 19075, 19068, 19554, 19570, 19586, 19625, 19675, 19703, 19751",
      /*  5782 */ "19785, 19306, 19815, 19768, 18328, 21072, 19849, 19891, 19310, 19937, 19953, 20011, 19417, 19417",
      /*  5796 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5810 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5824 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5838 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5852 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5866 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  5880 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 23952, 19417, 19417, 19417, 19417, 23968",
      /*  5894 */ "19417, 19417, 19417, 42362, 25891, 20050, 37775, 19417, 38115, 24003, 34285, 19417, 19417, 25309",
      /*  5908 */ "19417, 19417, 37275, 35192, 19417, 18994, 19416, 19417, 19417, 18987, 19416, 18944, 19598, 18672",
      /*  5922 */ "24047, 20157, 18344, 18365, 20346, 27203, 19417, 30832, 19417, 42618, 18505, 18392, 18426, 18461",
      /*  5936 */ "18496, 19261, 19991, 18521, 20505, 19979, 19995, 18525, 20509, 19766, 19332, 42850, 19417, 19417",
      /*  5950 */ "19417, 37523, 42869, 42741, 18541, 18576, 18592, 18602, 18621, 39001, 18650, 18670, 24387, 38997",
      /*  5964 */ "18646, 18666, 24383, 18688, 19331, 21130, 18710, 18726, 18750, 22021, 19417, 21020, 18785, 18801",
      /*  5978 */ "18820, 18859, 18881, 18903, 18925, 18853, 18875, 18897, 18919, 18941, 19639, 18961, 21859, 18977",
      /*  5992 */ "21231, 18605, 19010, 19046, 19091, 19107, 19125, 19143, 18630, 19109, 19127, 19168, 19687, 19193",
      /*  6006 */ "23820, 19227, 20710, 19248, 19605, 19277, 19297, 19609, 19281, 19326, 19348, 19369, 19417, 19405",
      /*  6020 */ "20252, 19384, 18694, 19389, 19434, 19450, 19491, 19526, 19059, 19075, 19068, 19554, 19570, 19586",
      /*  6034 */ "19625, 19675, 19703, 19751, 19785, 19306, 19815, 19768, 18328, 21072, 19849, 19891, 19310, 19937",
      /*  6048 */ "19953, 20011, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6062 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6076 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6090 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6104 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6118 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6132 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 20044, 19417",
      /*  6146 */ "19417, 19417, 19417, 27202, 19417, 19417, 19417, 42362, 25891, 19417, 19417, 19417, 21718, 24086",
      /*  6160 */ "34285, 19417, 19417, 25309, 19417, 19417, 37275, 19417, 19417, 18994, 19416, 19417, 19417, 18987",
      /*  6174 */ "19416, 18944, 19598, 18945, 18314, 20157, 18344, 18365, 20346, 27203, 19417, 30832, 19417, 42618",
      /*  6188 */ "18505, 18392, 18426, 18461, 18496, 19261, 19991, 18521, 20505, 19979, 19995, 18525, 20509, 19766",
      /*  6202 */ "19332, 42850, 19417, 19417, 19417, 37523, 42869, 42741, 18541, 18576, 18592, 18602, 18621, 39001",
      /*  6216 */ "18650, 18670, 24387, 38997, 18646, 18666, 24383, 18688, 19331, 21130, 18710, 18726, 18750, 22021",
      /*  6230 */ "19417, 21020, 18785, 18801, 18820, 18859, 18881, 18903, 18925, 18853, 18875, 18897, 18919, 18941",
      /*  6244 */ "19639, 18961, 21859, 18977, 21231, 18605, 19010, 19046, 19091, 19107, 19125, 19143, 18630, 19109",
      /*  6258 */ "19127, 19168, 19687, 19193, 23820, 19227, 20710, 19248, 19605, 19277, 19297, 19609, 19281, 19326",
      /*  6272 */ "19348, 19369, 19417, 19405, 20252, 19384, 18694, 19389, 19434, 19450, 19491, 19526, 19059, 19075",
      /*  6286 */ "19068, 19554, 19570, 19586, 19625, 19675, 19703, 19751, 19785, 19306, 19815, 19768, 18328, 21072",
      /*  6300 */ "19849, 19891, 19310, 19937, 19953, 20011, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6314 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6328 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6342 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6356 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6370 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6384 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6398 */ "19417, 19417, 24121, 19417, 19417, 19417, 19417, 27202, 19417, 19417, 19417, 42362, 26681, 19730",
      /*  6412 */ "22226, 18410, 21383, 32497, 20533, 19417, 19417, 25309, 19417, 19417, 19417, 19417, 19417, 32335",
      /*  6426 */ "19734, 19417, 19417, 24236, 19734, 32368, 40547, 31009, 21546, 27364, 19417, 19417, 20664, 27203",
      /*  6440 */ "19417, 19417, 19417, 23350, 32335, 42449, 19417, 19417, 24234, 32017, 32368, 32368, 32368, 25699",
      /*  6454 */ "25813, 25813, 25814, 37612, 42487, 19417, 19417, 19417, 19417, 19417, 38633, 19417, 38875, 32336",
      /*  6468 */ "19417, 23351, 35844, 32368, 32368, 32368, 28691, 24143, 25813, 25813, 25813, 21995, 28387, 19417",
      /*  6482 */ "19417, 19417, 19417, 19417, 38639, 24235, 32336, 19417, 32234, 32366, 32368, 32368, 28691, 21490",
      /*  6496 */ "25813, 25813, 25813, 36495, 30925, 19417, 19417, 19417, 39232, 24233, 42449, 23350, 32360, 32368",
      /*  6510 */ "32368, 25365, 24163, 25813, 25813, 39789, 30344, 19417, 19417, 19417, 38874, 24232, 32367, 32368",
      /*  6524 */ "33218, 25813, 25813, 28413, 19417, 19417, 32563, 33410, 35505, 32368, 21387, 25813, 28418, 19417",
      /*  6538 */ "19417, 19725, 27743, 26706, 25813, 36251, 22225, 28650, 27550, 33257, 22226, 26706, 42485, 27546",
      /*  6552 */ "42485, 27549, 40266, 21385, 40270, 42482, 21644, 21644, 37483, 23677, 19417, 19417, 19417, 19417",
      /*  6566 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6580 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6594 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6608 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6622 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6636 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6650 */ "19417, 19417, 19417, 19417, 19417, 19417, 24121, 19417, 19417, 19417, 19417, 27202, 19417, 19417",
      /*  6664 */ "19417, 42362, 26681, 19730, 22226, 18410, 21383, 32497, 20533, 19417, 19417, 25309, 19417, 19417",
      /*  6678 */ "19417, 19417, 19417, 32335, 19734, 19417, 19417, 24236, 19734, 32368, 40547, 31009, 21546, 27364",
      /*  6692 */ "19417, 19417, 20664, 27203, 19417, 19417, 19417, 23350, 32335, 42449, 19417, 19417, 24234, 32017",
      /*  6706 */ "32368, 32368, 32368, 25699, 25813, 25813, 25814, 37612, 42487, 19417, 19417, 19417, 19417, 19417",
      /*  6720 */ "38633, 19417, 38875, 32336, 19417, 23351, 35844, 32368, 32368, 32368, 28691, 24143, 25813, 25813",
      /*  6734 */ "25813, 21995, 28387, 19417, 19417, 19417, 19417, 19417, 38639, 24235, 32336, 19417, 32234, 32366",
      /*  6748 */ "32368, 32368, 28691, 21490, 25813, 25813, 25813, 36495, 30925, 19417, 19417, 19417, 19417, 24233",
      /*  6762 */ "42449, 23350, 32360, 32368, 32368, 25365, 24163, 25813, 25813, 39789, 30344, 19417, 19417, 19417",
      /*  6776 */ "38874, 24232, 32367, 32368, 33218, 25813, 25813, 28413, 19417, 19417, 19417, 33410, 35505, 32368",
      /*  6790 */ "21387, 25813, 28418, 19417, 19417, 19725, 27743, 26706, 25813, 36251, 22225, 28650, 27550, 33257",
      /*  6804 */ "22226, 26706, 42485, 27546, 42485, 27549, 40266, 21385, 40270, 42482, 21644, 21644, 37483, 23677",
      /*  6818 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6832 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6846 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6860 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6874 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6888 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  6902 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 24121, 19417, 19417, 19417",
      /*  6916 */ "19417, 27202, 19417, 19417, 19417, 42362, 26681, 19730, 22226, 18410, 21383, 32497, 20533, 19417",
      /*  6930 */ "19417, 25309, 19417, 19417, 19417, 19417, 19417, 32335, 19734, 19417, 19417, 24236, 19734, 32368",
      /*  6944 */ "40547, 31009, 21546, 27364, 19417, 19417, 20664, 27203, 19417, 19417, 19417, 23350, 32335, 42449",
      /*  6958 */ "19417, 19417, 24234, 32017, 32368, 32368, 32368, 25699, 25813, 25813, 25814, 37612, 42487, 19417",
      /*  6972 */ "19417, 19417, 19417, 19417, 38633, 24185, 38875, 32336, 19417, 23351, 35844, 32368, 32368, 32368",
      /*  6986 */ "28691, 24143, 25813, 25813, 25813, 21995, 28387, 19417, 19417, 19417, 19417, 19417, 38639, 24235",
      /*  7000 */ "32336, 19417, 32234, 32366, 32368, 32368, 28691, 21490, 25813, 25813, 25813, 36495, 30925, 19417",
      /*  7014 */ "19417, 19417, 19417, 24233, 42449, 23350, 32360, 32368, 32368, 25365, 24163, 25813, 25813, 39789",
      /*  7028 */ "30344, 19417, 19417, 19417, 38874, 24232, 32367, 32368, 33218, 25813, 25813, 28413, 19417, 19417",
      /*  7042 */ "19417, 33410, 35505, 32368, 21387, 25813, 28418, 19417, 19417, 19725, 27743, 26706, 25813, 36251",
      /*  7056 */ "22225, 28650, 27550, 33257, 22226, 26706, 42485, 27546, 42485, 27549, 40266, 21385, 40270, 42482",
      /*  7070 */ "21644, 21644, 37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7084 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7098 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7112 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7126 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7140 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7154 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7168 */ "24121, 19417, 19417, 19417, 19417, 27202, 19417, 19417, 19417, 42362, 26681, 19730, 22226, 18410",
      /*  7182 */ "21383, 32497, 20533, 19417, 19417, 25309, 19417, 19417, 19417, 19417, 19417, 32335, 19734, 19417",
      /*  7196 */ "19417, 24236, 19734, 32368, 40547, 31009, 21546, 27364, 19417, 19417, 20664, 27203, 19417, 19417",
      /*  7210 */ "19417, 23350, 32335, 42449, 19417, 19417, 24234, 32017, 32368, 32368, 32368, 25699, 25813, 25813",
      /*  7224 */ "25814, 37612, 42487, 19417, 19417, 19417, 19417, 19417, 38633, 19417, 38875, 32336, 19417, 23351",
      /*  7238 */ "35844, 32368, 32368, 32368, 28691, 24143, 25813, 25813, 25813, 21995, 28387, 19417, 19417, 19417",
      /*  7252 */ "19417, 19417, 24205, 24235, 32336, 19417, 32234, 32366, 32368, 32368, 28691, 21490, 25813, 25813",
      /*  7266 */ "25813, 36495, 30925, 19417, 19417, 19417, 19417, 24233, 42449, 23350, 32360, 32368, 32368, 25365",
      /*  7280 */ "24163, 25813, 25813, 39789, 30344, 19417, 19417, 19417, 38874, 24232, 32367, 32368, 33218, 25813",
      /*  7294 */ "25813, 28413, 19417, 19417, 19417, 33410, 35505, 32368, 21387, 25813, 28418, 19417, 19417, 19725",
      /*  7308 */ "27743, 26706, 25813, 36251, 22225, 28650, 27550, 33257, 22226, 26706, 42485, 27546, 42485, 27549",
      /*  7322 */ "40266, 21385, 40270, 42482, 21644, 21644, 37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7336 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7350 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7364 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7378 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7392 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7406 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7420 */ "19417, 19417, 19417, 19417, 24121, 19417, 19417, 19417, 19417, 27202, 19417, 19417, 19417, 42362",
      /*  7434 */ "26681, 19730, 22226, 18410, 21383, 32497, 20533, 19417, 19417, 25309, 19417, 19417, 26731, 19417",
      /*  7448 */ "19417, 32335, 19734, 19417, 19417, 24236, 19734, 32368, 40547, 31009, 21546, 27364, 19417, 19417",
      /*  7462 */ "20664, 27203, 19417, 26730, 19417, 23350, 32335, 42449, 19417, 19417, 24234, 32017, 32368, 32368",
      /*  7476 */ "32368, 25699, 25813, 25813, 25814, 37612, 42487, 19417, 19417, 19417, 19417, 19417, 38633, 19417",
      /*  7490 */ "38875, 32336, 19417, 23351, 35844, 32368, 32368, 32368, 28691, 24143, 25813, 25813, 25813, 21995",
      /*  7504 */ "28387, 19417, 19417, 19417, 19417, 19417, 38639, 24235, 32336, 19417, 32234, 32366, 32368, 32368",
      /*  7518 */ "28691, 21490, 25813, 25813, 25813, 36495, 30925, 19417, 19417, 19417, 19417, 24233, 42449, 23350",
      /*  7532 */ "32360, 32368, 32368, 25365, 24163, 25813, 25813, 39789, 30344, 19417, 19417, 19417, 38874, 24232",
      /*  7546 */ "32367, 32368, 33218, 25813, 25813, 28413, 19417, 19417, 19417, 33410, 35505, 32368, 21387, 25813",
      /*  7560 */ "28418, 19417, 19417, 19725, 27743, 26706, 25813, 36251, 22225, 28650, 27550, 33257, 22226, 26706",
      /*  7574 */ "42485, 27546, 42485, 27549, 40266, 21385, 40270, 42482, 21644, 21644, 37483, 23677, 19417, 19417",
      /*  7588 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7602 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7616 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7630 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7644 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7658 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7672 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 24121, 19417, 19417, 19417, 19417, 27202",
      /*  7686 */ "19417, 19417, 19417, 42362, 26681, 19730, 22226, 18410, 21383, 32497, 20533, 19417, 19417, 25309",
      /*  7700 */ "19417, 19417, 19417, 19417, 19417, 32335, 19734, 19417, 19417, 24236, 19734, 32368, 40547, 31009",
      /*  7714 */ "21546, 27364, 19417, 19417, 20664, 27203, 19417, 19417, 19417, 23350, 32335, 42449, 19417, 19417",
      /*  7728 */ "24234, 32017, 32368, 32368, 32368, 25699, 25813, 25813, 25814, 37612, 42487, 19417, 19417, 19417",
      /*  7742 */ "19417, 19417, 19417, 19417, 38875, 32336, 19417, 23351, 35844, 32368, 32368, 32368, 28691, 24143",
      /*  7756 */ "25813, 25813, 25813, 21995, 42486, 19417, 19417, 19417, 19417, 19417, 19417, 24235, 32336, 19417",
      /*  7770 */ "32234, 32366, 32368, 32368, 28691, 21490, 25813, 25813, 25813, 36495, 42488, 19417, 19417, 19417",
      /*  7784 */ "19417, 24233, 42449, 23350, 32360, 32368, 32368, 26153, 28113, 25813, 25813, 39789, 30344, 19417",
      /*  7798 */ "19417, 19417, 38874, 24232, 32367, 32368, 26635, 25813, 25813, 28413, 19417, 19417, 19417, 33410",
      /*  7812 */ "35505, 32368, 21387, 25813, 28418, 19417, 19417, 19725, 27743, 26706, 25813, 36251, 22225, 28650",
      /*  7826 */ "27550, 33257, 22226, 26706, 42485, 27546, 42485, 27549, 40266, 21385, 40270, 42482, 21644, 21644",
      /*  7840 */ "37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7854 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7868 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7882 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7896 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7910 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  7924 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 24121, 19417",
      /*  7938 */ "19417, 19417, 19417, 27202, 19417, 19417, 19417, 42362, 26681, 19730, 22226, 18410, 21383, 32497",
      /*  7952 */ "20533, 19417, 19417, 25309, 19417, 19417, 19417, 19417, 19417, 32335, 19734, 19417, 19417, 24236",
      /*  7966 */ "19734, 32368, 40547, 31009, 21546, 26198, 19417, 19417, 20664, 27203, 19417, 19417, 19417, 23350",
      /*  7980 */ "32335, 42449, 19417, 19417, 24234, 32017, 32368, 32368, 32368, 25699, 25813, 25813, 25814, 37612",
      /*  7994 */ "42487, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 38875, 32336, 19417, 23351, 35844, 32368",
      /*  8008 */ "32368, 32368, 28691, 24143, 25813, 25813, 25813, 21995, 42486, 19417, 19417, 19417, 19417, 19417",
      /*  8022 */ "19417, 24235, 32336, 19417, 32234, 32366, 32368, 32368, 28691, 21490, 25813, 25813, 25813, 36495",
      /*  8036 */ "42488, 19417, 19417, 19417, 19417, 24233, 42449, 23350, 32360, 32368, 32368, 26153, 28113, 25813",
      /*  8050 */ "25813, 39789, 30344, 19417, 19417, 19417, 38874, 24232, 32367, 32368, 26635, 25813, 25813, 28413",
      /*  8064 */ "19417, 19417, 19417, 33410, 35505, 32368, 21387, 25813, 28418, 19417, 19417, 19725, 27743, 26706",
      /*  8078 */ "25813, 36251, 22225, 28650, 27550, 33257, 22226, 26706, 42485, 27546, 42485, 27549, 40266, 21385",
      /*  8092 */ "40270, 42482, 21644, 21644, 37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8106 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8120 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8134 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8148 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8162 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8176 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8190 */ "19417, 19417, 24121, 19417, 19417, 19417, 19417, 27202, 19417, 19417, 19417, 42362, 26681, 19730",
      /*  8204 */ "22226, 18410, 21383, 26614, 20533, 19417, 19417, 25309, 19417, 19417, 19417, 19417, 19417, 32335",
      /*  8218 */ "19734, 19417, 19417, 24236, 19734, 32368, 40547, 31009, 21546, 27364, 19417, 19417, 20664, 27203",
      /*  8232 */ "19417, 19417, 19417, 23350, 32335, 42449, 19417, 19417, 24234, 32017, 32368, 32368, 32368, 25699",
      /*  8246 */ "25813, 25813, 25814, 37612, 42487, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 38875, 32336",
      /*  8260 */ "19417, 23351, 35844, 32368, 32368, 32368, 28691, 24143, 25813, 25813, 25813, 21995, 42486, 19417",
      /*  8274 */ "19417, 19417, 19417, 19417, 19417, 24235, 32336, 19417, 32234, 32366, 32368, 32368, 28691, 21490",
      /*  8288 */ "25813, 25813, 25813, 36495, 42488, 19417, 19417, 19417, 19417, 24233, 42449, 23350, 32360, 32368",
      /*  8302 */ "32368, 26153, 28113, 25813, 25813, 39789, 30344, 19417, 19417, 19417, 38874, 24232, 32367, 32368",
      /*  8316 */ "26635, 25813, 25813, 28413, 19417, 19417, 19417, 33410, 35505, 32368, 21387, 25813, 28418, 19417",
      /*  8330 */ "19417, 19725, 27743, 26706, 25813, 36251, 22225, 28650, 27550, 33257, 22226, 26706, 42485, 27546",
      /*  8344 */ "42485, 27549, 40266, 21385, 40270, 42482, 21644, 21644, 37483, 23677, 19417, 19417, 19417, 19417",
      /*  8358 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8372 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8386 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8400 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8414 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8428 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8442 */ "19417, 19417, 19417, 19417, 19417, 19417, 24121, 19417, 19417, 19417, 19417, 27202, 19417, 19417",
      /*  8456 */ "19417, 42362, 27730, 19730, 22226, 18410, 21383, 32497, 20533, 19417, 19417, 25309, 19417, 19417",
      /*  8470 */ "19417, 19417, 19417, 32335, 19734, 19417, 19417, 24236, 19734, 32368, 40547, 31009, 21546, 27364",
      /*  8484 */ "19417, 19417, 20664, 27203, 19417, 19417, 19417, 24229, 32335, 42449, 19417, 19417, 24234, 32017",
      /*  8498 */ "32368, 32368, 32368, 25699, 25813, 25813, 25814, 37612, 42487, 19417, 19417, 19417, 19417, 19417",
      /*  8512 */ "19417, 19417, 38875, 32336, 19417, 23351, 35844, 32368, 32368, 32368, 28691, 24143, 25813, 25813",
      /*  8526 */ "25813, 21995, 42486, 19417, 19417, 19417, 19417, 19417, 19417, 24235, 32336, 19417, 32234, 32366",
      /*  8540 */ "32368, 32368, 28691, 21490, 25813, 25813, 25813, 36495, 42488, 19417, 19417, 19417, 19417, 24233",
      /*  8554 */ "42449, 23350, 32360, 32368, 32368, 26153, 28113, 25813, 25813, 39789, 30344, 19417, 19417, 19417",
      /*  8568 */ "38874, 24232, 32367, 32368, 26635, 25813, 25813, 28413, 19417, 19417, 19417, 33410, 35505, 32368",
      /*  8582 */ "21387, 25813, 28418, 19417, 19417, 19725, 27743, 26706, 25813, 36251, 22225, 28650, 27550, 33257",
      /*  8596 */ "22226, 26706, 42485, 27546, 42485, 27549, 40266, 21385, 40270, 42482, 21644, 21644, 37483, 23677",
      /*  8610 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8624 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8638 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8652 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8666 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8680 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8694 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 24121, 19417, 19417, 19417",
      /*  8708 */ "19417, 27202, 19417, 19417, 19417, 42362, 26681, 19730, 22226, 24127, 24252, 24265, 20533, 19417",
      /*  8722 */ "19417, 25309, 19417, 19417, 19417, 19417, 19417, 32335, 19734, 19417, 19417, 24236, 19734, 32368",
      /*  8736 */ "40547, 31009, 21546, 27364, 19417, 19417, 20664, 27203, 19417, 19417, 19417, 23350, 32335, 42449",
      /*  8750 */ "19417, 19417, 24234, 32017, 32368, 32368, 32368, 25699, 25813, 25813, 25814, 37612, 42487, 19417",
      /*  8764 */ "19417, 19417, 19417, 19417, 19417, 19417, 38875, 32336, 19417, 23351, 35844, 32368, 32368, 32368",
      /*  8778 */ "28691, 24143, 25813, 25813, 25813, 21995, 42486, 19417, 19417, 19417, 19417, 19417, 19417, 24235",
      /*  8792 */ "32336, 19417, 32234, 32366, 32368, 32368, 28691, 21490, 25813, 25813, 25813, 36495, 42488, 19417",
      /*  8806 */ "19417, 19417, 19417, 24233, 42449, 23350, 32360, 32368, 32368, 26153, 28113, 25813, 25813, 39789",
      /*  8820 */ "30344, 19417, 19417, 19417, 38874, 24232, 32367, 32368, 26635, 25813, 25813, 28413, 19417, 19417",
      /*  8834 */ "19417, 33410, 35505, 32368, 21387, 25813, 28418, 19417, 19417, 19725, 27743, 26706, 25813, 36251",
      /*  8848 */ "22225, 28650, 27550, 33257, 22226, 26706, 42485, 27546, 42485, 27549, 40266, 21385, 40270, 42482",
      /*  8862 */ "21644, 21644, 37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8876 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8890 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8904 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8918 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8932 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8946 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  8960 */ "24121, 19417, 19417, 19417, 19417, 27202, 19417, 19417, 19417, 42362, 26681, 19730, 22226, 18410",
      /*  8974 */ "21383, 32497, 20533, 19417, 19417, 25309, 19417, 19417, 19417, 19417, 19417, 32335, 19734, 19417",
      /*  8988 */ "19417, 24236, 19734, 32368, 40547, 31009, 21546, 27364, 19417, 19417, 20664, 27203, 19417, 19417",
      /*  9002 */ "19417, 23350, 32335, 42449, 19417, 19417, 24234, 32017, 32368, 32368, 32368, 25699, 25813, 25813",
      /*  9016 */ "25814, 37612, 42487, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 38875, 32336, 19417, 23351",
      /*  9030 */ "35844, 32368, 32368, 32368, 28691, 24143, 25813, 25813, 25813, 21995, 42486, 19417, 19417, 19417",
      /*  9044 */ "19417, 19417, 19417, 24235, 32336, 19417, 32234, 32366, 32368, 32368, 28691, 21490, 25813, 25813",
      /*  9058 */ "25813, 36495, 42488, 19417, 19417, 19417, 19417, 24233, 42449, 23350, 32360, 32368, 32368, 26153",
      /*  9072 */ "28113, 25813, 25813, 39789, 30344, 19417, 19417, 29112, 38874, 24232, 32367, 32368, 26635, 25813",
      /*  9086 */ "25813, 28413, 19417, 19417, 19417, 33410, 35505, 32368, 21387, 25813, 28418, 19417, 19417, 19725",
      /*  9100 */ "27743, 26706, 25813, 36251, 22225, 28650, 27550, 33257, 22226, 26706, 42485, 27546, 42485, 27549",
      /*  9114 */ "40266, 21385, 40270, 42482, 21644, 21644, 37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9128 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9142 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9156 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9170 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9184 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9198 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9212 */ "19417, 19417, 19417, 19417, 24281, 19417, 19417, 19417, 19417, 27202, 19417, 19417, 19417, 42362",
      /*  9226 */ "26681, 19730, 22226, 18410, 21383, 32497, 20533, 19417, 19417, 25309, 19417, 19417, 19417, 19417",
      /*  9240 */ "19417, 32335, 19734, 19417, 19417, 24236, 19734, 32368, 40547, 31009, 21546, 27364, 19417, 19417",
      /*  9254 */ "20664, 27203, 19417, 19417, 19417, 23350, 32335, 42449, 19417, 19417, 24234, 32017, 32368, 32368",
      /*  9268 */ "32368, 25699, 25813, 25813, 25814, 37612, 42487, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9282 */ "38875, 32336, 19417, 23351, 35844, 32368, 32368, 32368, 28691, 24143, 25813, 25813, 25813, 21995",
      /*  9296 */ "42486, 19417, 19417, 19417, 19417, 19417, 19417, 24235, 32336, 19417, 32234, 32366, 32368, 32368",
      /*  9310 */ "28691, 21490, 25813, 25813, 25813, 36495, 42488, 19417, 19417, 19417, 19417, 24233, 42449, 23350",
      /*  9324 */ "32360, 32368, 32368, 26153, 28113, 25813, 25813, 39789, 30344, 19417, 19417, 19417, 38874, 24232",
      /*  9338 */ "32367, 32368, 26635, 25813, 25813, 28413, 19417, 19417, 19417, 33410, 35505, 32368, 21387, 25813",
      /*  9352 */ "28418, 19417, 19417, 19725, 27743, 26706, 25813, 36251, 22225, 28650, 27550, 33257, 22226, 26706",
      /*  9366 */ "42485, 27546, 42485, 27549, 40266, 21385, 40270, 42482, 21644, 21644, 37483, 23677, 19417, 19417",
      /*  9380 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9394 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9408 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9422 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9436 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9450 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9464 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 20044, 19417, 19417, 19417, 19417, 27202",
      /*  9478 */ "19417, 19417, 19417, 42362, 25891, 41007, 24303, 24317, 39341, 24338, 34285, 19417, 19417, 25309",
      /*  9492 */ "19417, 19417, 37275, 19417, 19417, 18994, 19416, 19417, 19417, 18987, 19416, 18944, 19598, 18945",
      /*  9506 */ "18314, 20157, 18344, 18365, 20346, 27203, 19417, 30832, 30282, 42618, 18505, 18392, 18426, 18461",
      /*  9520 */ "18496, 19261, 19991, 18521, 20505, 19979, 19995, 18525, 20509, 24376, 19332, 42850, 19417, 19417",
      /*  9534 */ "19417, 37523, 42869, 42741, 18541, 18576, 18592, 18602, 18621, 39001, 18650, 18670, 24387, 38997",
      /*  9548 */ "18646, 18666, 24383, 18688, 19331, 21130, 18710, 18726, 18750, 22021, 19417, 21020, 18785, 18801",
      /*  9562 */ "18820, 18859, 18881, 18903, 18925, 18853, 18875, 18897, 18919, 18941, 19639, 18961, 21859, 18977",
      /*  9576 */ "21231, 18605, 19010, 19046, 19091, 19107, 19125, 19143, 18630, 19109, 19127, 19168, 19687, 19193",
      /*  9590 */ "23820, 19227, 20710, 19248, 19605, 19277, 19297, 19609, 19281, 19326, 19348, 19369, 19417, 19405",
      /*  9604 */ "20252, 19384, 18694, 19389, 19434, 19450, 24403, 19526, 19059, 19075, 19068, 19554, 19570, 19586",
      /*  9618 */ "19625, 19675, 19703, 19751, 19785, 19306, 19815, 19768, 18328, 21072, 19849, 19891, 19310, 19937",
      /*  9632 */ "19953, 20011, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9646 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9660 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9674 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9688 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9702 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9716 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 20044, 19417",
      /*  9730 */ "19417, 19417, 19417, 27202, 19417, 19417, 19417, 42362, 25891, 19417, 19417, 19417, 19417, 37283",
      /*  9744 */ "34285, 19417, 19417, 25309, 19417, 19417, 37275, 19417, 19417, 18994, 19416, 19417, 19417, 18987",
      /*  9758 */ "19416, 18944, 19598, 18945, 18314, 20157, 18344, 18365, 20346, 27203, 19417, 30832, 19417, 42618",
      /*  9772 */ "18505, 18392, 18426, 18461, 18496, 19261, 19991, 18521, 20505, 19979, 19995, 18525, 20509, 19766",
      /*  9786 */ "19332, 42850, 19417, 19417, 19417, 37523, 42869, 42741, 18541, 18576, 18592, 18602, 18621, 39001",
      /*  9800 */ "18650, 18670, 24387, 38997, 18646, 18666, 24383, 18688, 19331, 21130, 18710, 18726, 18750, 22021",
      /*  9814 */ "19417, 21020, 18785, 18801, 18820, 18859, 18881, 18903, 18925, 18853, 18875, 18897, 18919, 18941",
      /*  9828 */ "19639, 18961, 21859, 18977, 21231, 18605, 19010, 19046, 19091, 19107, 19125, 19143, 18630, 19109",
      /*  9842 */ "19127, 19168, 19687, 19193, 23820, 19227, 20710, 19248, 19605, 19277, 19297, 19609, 19281, 19326",
      /*  9856 */ "19348, 19369, 19417, 19405, 20252, 19384, 18694, 19389, 19434, 19450, 19491, 19526, 19059, 19075",
      /*  9870 */ "19068, 19554, 19570, 19586, 19625, 19675, 19703, 19751, 19785, 19306, 19815, 19768, 18328, 21072",
      /*  9884 */ "19849, 19891, 19310, 19937, 19953, 20011, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9898 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9912 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9926 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9940 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9954 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9968 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /*  9982 */ "19417, 19417, 24440, 24468, 19417, 19417, 19417, 24486, 19417, 19417, 19417, 42362, 24500, 34881",
      /*  9996 */ "24521, 24527, 20270, 24543, 24578, 19417, 19417, 25309, 19417, 19417, 37275, 19417, 19417, 18994",
      /* 10010 */ "19416, 19417, 19417, 18987, 19416, 18944, 19598, 18945, 18314, 24061, 18344, 18365, 20346, 27203",
      /* 10024 */ "19417, 30832, 19417, 42618, 18505, 18392, 18426, 18461, 18496, 19261, 19991, 18521, 20505, 19979",
      /* 10038 */ "19995, 18525, 20509, 19766, 19332, 42850, 19417, 19417, 19417, 37523, 42869, 42741, 18541, 18576",
      /* 10052 */ "18592, 18602, 18621, 39001, 18650, 18670, 24387, 38997, 18646, 18666, 24383, 18688, 19331, 21130",
      /* 10066 */ "18710, 18726, 18750, 22021, 19417, 21020, 18785, 18801, 18820, 18859, 18881, 18903, 18925, 18853",
      /* 10080 */ "18875, 18897, 18919, 18941, 19639, 18961, 21859, 18977, 21231, 18605, 19010, 19046, 19091, 19107",
      /* 10094 */ "19125, 19143, 18630, 19109, 19127, 19168, 19687, 19193, 23820, 19227, 20710, 19248, 19605, 19277",
      /* 10108 */ "19297, 19609, 19281, 19326, 19348, 19369, 19417, 19405, 20252, 19384, 18694, 19389, 19434, 19450",
      /* 10122 */ "19491, 19526, 19059, 19075, 19068, 19554, 19570, 19586, 19625, 19675, 19703, 19751, 19785, 19306",
      /* 10136 */ "19815, 19768, 18328, 21072, 19849, 19891, 19310, 19937, 19953, 20011, 19417, 19417, 19417, 19417",
      /* 10150 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10164 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10178 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10192 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10206 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10220 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10234 */ "19417, 19417, 19417, 19417, 19417, 19417, 24604, 24626, 19417, 19417, 19417, 27202, 19417, 19417",
      /* 10248 */ "19417, 42362, 25891, 19417, 19417, 19417, 24213, 24644, 24674, 19417, 19417, 25309, 19417, 19417",
      /* 10262 */ "37275, 28039, 19417, 18994, 19416, 19417, 19417, 18987, 19416, 18944, 19598, 18945, 24700, 24714",
      /* 10276 */ "18344, 18365, 20346, 27203, 19417, 30832, 19417, 42618, 18505, 18392, 18426, 18461, 18496, 19261",
      /* 10290 */ "19991, 18521, 20505, 19979, 19995, 18525, 20509, 19766, 19332, 42850, 19417, 19417, 19417, 37523",
      /* 10304 */ "42869, 42741, 18541, 18576, 18592, 18602, 18621, 39001, 18650, 18670, 24387, 38997, 18646, 18666",
      /* 10318 */ "24383, 18688, 19331, 21130, 18710, 18726, 18750, 22021, 19417, 21020, 18785, 18801, 18820, 18859",
      /* 10332 */ "18881, 18903, 18925, 18853, 18875, 18897, 18919, 18941, 19639, 18961, 21859, 18977, 21231, 18605",
      /* 10346 */ "19010, 19046, 19091, 19107, 19125, 19143, 18630, 19109, 19127, 19168, 19687, 19193, 23820, 19227",
      /* 10360 */ "20710, 19248, 19605, 19277, 19297, 19609, 19281, 19326, 19348, 19369, 19417, 19405, 20252, 19384",
      /* 10374 */ "18694, 19389, 19434, 19450, 19491, 19526, 19059, 19075, 19068, 19554, 19570, 19586, 19625, 19675",
      /* 10388 */ "19703, 19751, 19785, 19306, 19815, 19768, 18328, 21072, 19849, 19891, 19310, 19937, 19953, 20011",
      /* 10402 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10416 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10430 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10444 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10458 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10472 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10486 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 24121, 19417, 24743, 19417",
      /* 10500 */ "19417, 24762, 24788, 19417, 19152, 24814, 31676, 31690, 31700, 24830, 24846, 24859, 21292, 24875",
      /* 10514 */ "25075, 25309, 24895, 40106, 24939, 24972, 24996, 25025, 25066, 35996, 18376, 27048, 25097, 25121",
      /* 10528 */ "25178, 32548, 25206, 25256, 19417, 19417, 25306, 30692, 19417, 25325, 26031, 23350, 32335, 33181",
      /* 10542 */ "27569, 30756, 24234, 25344, 32368, 32368, 36432, 25699, 25813, 25813, 39781, 37612, 42487, 23909",
      /* 10556 */ "37436, 25381, 25399, 25418, 38633, 19417, 28083, 42227, 31580, 25435, 25456, 30991, 32368, 32406",
      /* 10570 */ "25472, 25488, 25813, 33390, 26398, 25504, 25539, 33120, 19417, 25603, 19417, 30800, 38639, 41708",
      /* 10584 */ "25621, 25637, 25653, 25686, 33238, 38927, 28691, 25725, 25774, 25793, 25812, 31889, 25830, 25876",
      /* 10598 */ "25912, 37541, 40080, 24233, 42449, 23350, 32360, 32368, 34330, 28327, 24163, 25813, 25972, 42043",
      /* 10612 */ "30662, 19232, 35538, 34022, 38874, 31256, 32367, 41907, 33218, 25813, 42154, 38966, 36075, 19417",
      /* 10626 */ "19417, 33410, 35505, 25932, 25951, 35884, 28418, 19417, 19417, 19725, 27743, 26706, 25813, 36251",
      /* 10640 */ "22225, 28650, 27550, 33257, 22226, 26706, 40579, 25988, 40555, 27549, 38402, 21385, 33046, 42482",
      /* 10654 */ "21644, 21644, 37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10668 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10682 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10696 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10710 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10724 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10738 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10752 */ "24121, 19417, 26025, 19417, 19417, 27202, 19417, 19417, 19417, 26047, 26063, 23069, 26088, 26103",
      /* 10766 */ "21383, 31829, 20533, 19417, 19417, 25309, 19417, 19417, 19417, 19417, 19417, 32335, 19734, 19417",
      /* 10780 */ "19417, 24236, 19734, 32368, 40547, 31009, 21546, 27364, 19417, 19417, 20664, 27203, 19417, 19417",
      /* 10794 */ "19417, 23350, 32335, 42449, 19417, 19417, 24234, 32017, 32368, 32368, 32368, 25699, 25813, 25813",
      /* 10808 */ "25814, 37612, 42487, 19417, 19417, 19417, 19417, 39592, 38633, 26131, 38875, 34076, 19417, 18474",
      /* 10822 */ "35844, 32368, 32368, 32368, 26148, 24143, 25813, 25813, 36890, 21995, 28387, 19417, 19417, 19417",
      /* 10836 */ "19417, 19417, 38639, 24235, 32336, 19417, 32234, 32366, 32368, 32368, 28691, 21490, 25813, 25813",
      /* 10850 */ "25813, 36495, 30925, 19417, 19417, 19417, 26169, 41928, 39632, 23350, 34422, 32368, 32368, 25365",
      /* 10864 */ "26188, 25813, 25813, 39789, 30344, 19417, 19417, 19417, 38874, 24232, 32367, 32368, 33218, 25813",
      /* 10878 */ "25813, 28413, 19417, 19417, 19417, 33410, 35505, 32368, 21387, 25813, 28418, 19417, 19417, 19725",
      /* 10892 */ "27743, 26706, 25813, 36251, 22225, 28650, 27550, 33257, 22226, 26706, 42485, 27546, 42485, 26223",
      /* 10906 */ "26239, 21385, 40270, 42482, 21644, 21644, 37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10920 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10934 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10948 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10962 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10976 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 10990 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11004 */ "19417, 19417, 19417, 19417, 24121, 19417, 24684, 19417, 19417, 27202, 23777, 19417, 19417, 42362",
      /* 11018 */ "26259, 26273, 26286, 26302, 26318, 26331, 20533, 19417, 21406, 30952, 19417, 19417, 26347, 19417",
      /* 11032 */ "19417, 32335, 19734, 19417, 25419, 24236, 37955, 37501, 40547, 39026, 26364, 33972, 27158, 19417",
      /* 11046 */ "20664, 26414, 30299, 19417, 19417, 26438, 33172, 42449, 26454, 38849, 26473, 26585, 26493, 32368",
      /* 11060 */ "32368, 36483, 26522, 25813, 25814, 37612, 42487, 26547, 19417, 25758, 19417, 37402, 38633, 39662",
      /* 11074 */ "26566, 32336, 19417, 23351, 35844, 31390, 41465, 37800, 28691, 24143, 26601, 39428, 25813, 21995",
      /* 11088 */ "28387, 19417, 19417, 19504, 19417, 28346, 38639, 24235, 32336, 19417, 32234, 32366, 32368, 32368",
      /* 11102 */ "26630, 21490, 25813, 25813, 33451, 36495, 30925, 19417, 19417, 19417, 18349, 24233, 42449, 23350",
      /* 11116 */ "32360, 32368, 41776, 25365, 24163, 25813, 38009, 39789, 30344, 19417, 19211, 19417, 21519, 26651",
      /* 11130 */ "32367, 26702, 33218, 37730, 25813, 34356, 22148, 19417, 19417, 31722, 35505, 42273, 21387, 29334",
      /* 11144 */ "28418, 19417, 23171, 19725, 27743, 42385, 25813, 26722, 22225, 28650, 27550, 33257, 22226, 26706",
      /* 11158 */ "42485, 27546, 41517, 26747, 40266, 21385, 40270, 42482, 21644, 21644, 26797, 23677, 19417, 19417",
      /* 11172 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11186 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11200 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11214 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11228 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11242 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11256 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 24121, 19417, 18804, 19417, 19417, 27202",
      /* 11270 */ "23264, 19417, 26846, 42362, 26870, 26884, 26894, 26910, 26926, 26939, 20533, 19417, 19417, 25309",
      /* 11284 */ "19417, 19417, 19417, 19417, 19417, 40758, 36026, 19417, 36035, 18480, 19734, 37809, 40547, 26955",
      /* 11298 */ "27020, 27099, 19417, 27124, 40391, 27154, 24906, 19417, 19417, 33489, 38343, 27174, 19510, 27220",
      /* 11312 */ "35038, 27256, 42521, 33511, 42539, 40255, 39422, 39055, 32291, 25136, 42487, 19417, 19417, 37313",
      /* 11326 */ "19417, 27306, 38633, 19417, 38875, 32336, 19417, 23351, 42099, 32368, 32368, 32368, 28691, 24143",
      /* 11340 */ "25813, 25813, 25813, 23589, 42414, 40442, 19417, 35862, 38292, 19417, 38639, 24235, 32336, 19417",
      /* 11354 */ "40490, 27326, 32368, 32368, 36821, 27350, 25813, 25813, 35770, 27397, 30925, 19417, 19417, 19417",
      /* 11368 */ "19417, 38524, 42449, 23350, 39133, 32368, 27950, 25365, 27427, 25813, 40956, 39789, 30344, 27451",
      /* 11382 */ "21320, 19417, 20954, 24232, 30028, 39953, 33218, 26997, 32836, 28413, 19353, 19417, 19417, 33410",
      /* 11396 */ "35505, 32368, 21387, 25813, 28418, 42206, 19417, 19725, 27743, 40226, 25813, 27470, 22225, 28650",
      /* 11410 */ "27550, 33257, 22226, 26706, 42485, 23649, 27494, 27512, 27537, 21385, 40270, 42482, 21644, 21644",
      /* 11424 */ "37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11438 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11452 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11466 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11480 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11494 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11508 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 24121, 19417",
      /* 11522 */ "19418, 27566, 19417, 27202, 21889, 27585, 28046, 24772, 34123, 34137, 34147, 27603, 27619, 27632",
      /* 11536 */ "20533, 28584, 27648, 27685, 39863, 27715, 26207, 25916, 24070, 27763, 26666, 30706, 27798, 30720",
      /* 11550 */ "27814, 27830, 34541, 27846, 27890, 37352, 27587, 31855, 27906, 39542, 35665, 27108, 40663, 23350",
      /* 11564 */ "32335, 24424, 29580, 19417, 24234, 27936, 34498, 41457, 27973, 28001, 38491, 39408, 31314, 37612",
      /* 11578 */ "27496, 28027, 28062, 32517, 38905, 30887, 28135, 40383, 28159, 28175, 28210, 28233, 28268, 28284",
      /* 11592 */ "28313, 28362, 37903, 28378, 28403, 28434, 28461, 28488, 28504, 38782, 19417, 39562, 38091, 28559",
      /* 11606 */ "28577, 28600, 35691, 19030, 28640, 28673, 28689, 38704, 31601, 28707, 31344, 33471, 25813, 28723",
      /* 11620 */ "28761, 37218, 42692, 28785, 28808, 28832, 34310, 19799, 28851, 28873, 28894, 28935, 24163, 28963",
      /* 11634 */ "29033, 29061, 30344, 19417, 29099, 19417, 26477, 23382, 36813, 29134, 33218, 29165, 29185, 28413",
      /* 11648 */ "41573, 41421, 29212, 23316, 29235, 40521, 29278, 29303, 28978, 33292, 42124, 19725, 41084, 29319",
      /* 11662 */ "22045, 36251, 25271, 28650, 42474, 38017, 36306, 29356, 29378, 35010, 38046, 29422, 33927, 29458",
      /* 11676 */ "40270, 42482, 29487, 21644, 37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11690 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11704 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11718 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11732 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11746 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11760 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11774 */ "19417, 19417, 24121, 19417, 19417, 29532, 19417, 29552, 20400, 29577, 24189, 29596, 29612, 29626",
      /* 11788 */ "29636, 29652, 29668, 29681, 20533, 19417, 22641, 25309, 19417, 19417, 30476, 19417, 19417, 32335",
      /* 11802 */ "19734, 18559, 18560, 29697, 19734, 38713, 29721, 29745, 29789, 29825, 25402, 19417, 20664, 29858",
      /* 11816 */ "19417, 29536, 19417, 29561, 29882, 42449, 19417, 30895, 34911, 32017, 29901, 32368, 32368, 25699",
      /* 11830 */ "29922, 25813, 25814, 38460, 42487, 19417, 19417, 19417, 19417, 19417, 38633, 19417, 38875, 32336",
      /* 11844 */ "19417, 35497, 35844, 32368, 32368, 25935, 28691, 24143, 25813, 25813, 29939, 21995, 28387, 19417",
      /* 11858 */ "19417, 23856, 19417, 19417, 38639, 24235, 32336, 19417, 29958, 32366, 32368, 29984, 28691, 21490",
      /* 11872 */ "25813, 25965, 25813, 36495, 30925, 19417, 37394, 19417, 19417, 24233, 26577, 30001, 30021, 32368",
      /* 11886 */ "32255, 30044, 24163, 25813, 31996, 39789, 30344, 19417, 19417, 19417, 38874, 24232, 32367, 32368",
      /* 11900 */ "33218, 25813, 25813, 28413, 19417, 19417, 19417, 33410, 35505, 32368, 21387, 25813, 37876, 19417",
      /* 11914 */ "19417, 19725, 27743, 26706, 25813, 36251, 22225, 28650, 27550, 33257, 22226, 26706, 42485, 27546",
      /* 11928 */ "42485, 27549, 40266, 21385, 40270, 42482, 30072, 21644, 30095, 23677, 19417, 19417, 19417, 19417",
      /* 11942 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11956 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11970 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11984 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 11998 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12012 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12026 */ "19417, 19417, 19417, 19417, 19417, 19417, 24121, 19417, 19417, 19417, 19417, 27202, 19417, 30134",
      /* 12040 */ "19417, 42362, 30154, 30168, 30178, 30194, 30210, 30223, 20533, 19417, 19417, 25309, 19417, 19417",
      /* 12054 */ "19417, 30239, 19417, 32335, 19734, 19417, 19417, 24236, 19734, 32368, 40547, 31009, 21546, 27411",
      /* 12068 */ "19417, 19417, 20664, 27203, 19417, 19417, 19417, 33741, 32335, 42449, 19417, 19417, 24234, 32017",
      /* 12082 */ "32368, 32368, 32368, 25699, 25813, 25813, 25814, 37612, 42487, 19417, 19417, 19417, 19417, 19417",
      /* 12096 */ "19417, 18763, 38875, 32336, 19417, 23351, 36686, 32368, 32368, 32368, 32614, 30258, 25813, 25813",
      /* 12110 */ "25813, 21995, 42486, 19417, 19417, 30278, 19417, 30298, 19417, 24235, 32336, 35310, 30315, 32366",
      /* 12124 */ "32368, 32368, 28691, 21490, 25813, 25813, 25813, 29045, 30341, 19417, 19417, 19417, 19417, 24233",
      /* 12138 */ "42449, 23350, 32360, 32368, 32368, 26153, 28113, 25813, 25813, 39789, 30344, 19417, 42994, 29508",
      /* 12152 */ "38874, 24232, 32367, 32368, 26635, 25813, 25813, 28413, 39814, 30362, 30418, 30446, 35505, 32368",
      /* 12166 */ "21387, 25813, 30469, 19417, 38593, 30492, 30513, 30562, 33084, 36251, 42311, 30599, 30636, 27034",
      /* 12180 */ "22226, 26706, 42485, 27546, 42485, 27549, 40266, 21385, 40270, 42482, 21644, 30652, 37483, 23677",
      /* 12194 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12208 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12222 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12236 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12250 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12264 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12278 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 24121, 19417, 19417, 19417",
      /* 12292 */ "19417, 27202, 19417, 19417, 19417, 42362, 26681, 19730, 22226, 18410, 21383, 32497, 20533, 19417",
      /* 12306 */ "19417, 30678, 19417, 19417, 19417, 25383, 19417, 32335, 30755, 19417, 24287, 34069, 30772, 30848",
      /* 12320 */ "30867, 24169, 30911, 30878, 19417, 19417, 30949, 27699, 19417, 30968, 19417, 23350, 32335, 42449",
      /* 12334 */ "19417, 19417, 24234, 32017, 32368, 32368, 30986, 25699, 25813, 25813, 31007, 37612, 42487, 19417",
      /* 12348 */ "19417, 33646, 19417, 19417, 19417, 19417, 38875, 32336, 19417, 37855, 20964, 32368, 32368, 32368",
      /* 12362 */ "31276, 24143, 25813, 25813, 25813, 31025, 42486, 19914, 19417, 19417, 19417, 19417, 19417, 24235",
      /* 12376 */ "32336, 19417, 31959, 32366, 32368, 32368, 28691, 21490, 25813, 25813, 25813, 36495, 42488, 19417",
      /* 12390 */ "39109, 19417, 19417, 24233, 42449, 23350, 32360, 32368, 35601, 26153, 28113, 25813, 40716, 39789",
      /* 12404 */ "30344, 19417, 19417, 19417, 38874, 24232, 32367, 32368, 26635, 25813, 25813, 28413, 19417, 19417",
      /* 12418 */ "19417, 33410, 35505, 32368, 21387, 25813, 28418, 21201, 19417, 31462, 31058, 26706, 25813, 30110",
      /* 12432 */ "22225, 41899, 25670, 26009, 22226, 26706, 42485, 27546, 42485, 27549, 40266, 21385, 40270, 42482",
      /* 12446 */ "21644, 21644, 37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12460 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12474 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12488 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12502 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12516 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12530 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12544 */ "24121, 19417, 19417, 21261, 19417, 27202, 21965, 21674, 21959, 31079, 28519, 28533, 31095, 28543",
      /* 12558 */ "31111, 31124, 20533, 19417, 19417, 25105, 29219, 19417, 19417, 19417, 31140, 31168, 38624, 24610",
      /* 12572 */ "37321, 31188, 31229, 31272, 31292, 29340, 31330, 35488, 19417, 19417, 33653, 27203, 26457, 38568",
      /* 12586 */ "19417, 23350, 41796, 38350, 40866, 19417, 24234, 39887, 31368, 31387, 37817, 31507, 41831, 25813",
      /* 12600 */ "36240, 37612, 42487, 22649, 42592, 35671, 42988, 31406, 31435, 29083, 38875, 40766, 19417, 31452",
      /* 12614 */ "31478, 32368, 32368, 31494, 37583, 24143, 25813, 29436, 31523, 21995, 42486, 19417, 19417, 38132",
      /* 12628 */ "27381, 31562, 19417, 24235, 32336, 19417, 32234, 31596, 32368, 32368, 28691, 31617, 25813, 25813",
      /* 12642 */ "25813, 36495, 42488, 20844, 31661, 40412, 42942, 31716, 31172, 20092, 25662, 39270, 32368, 26153",
      /* 12656 */ "28113, 39377, 25813, 29287, 21794, 42831, 31738, 19417, 31758, 24232, 31798, 32771, 31814, 31877",
      /* 12670 */ "37996, 31905, 19417, 19417, 31918, 31934, 35505, 31975, 30620, 36210, 28418, 42960, 19417, 32012",
      /* 12684 */ "27743, 26706, 25813, 25190, 22225, 28650, 27550, 33257, 24470, 26706, 42485, 37712, 32033, 27549",
      /* 12698 */ "40266, 21385, 26243, 36507, 21644, 21644, 39317, 23677, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12712 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12726 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12740 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12754 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12768 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12782 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12796 */ "19417, 19417, 19417, 19417, 24121, 19417, 19417, 19417, 19417, 27202, 19417, 19417, 19417, 42362",
      /* 12810 */ "26681, 19730, 22226, 18410, 21383, 32497, 20533, 19417, 19417, 25309, 19417, 19417, 24557, 19417",
      /* 12824 */ "19417, 32335, 19734, 19417, 19417, 24236, 19734, 32368, 40547, 31009, 21546, 27364, 19417, 19417",
      /* 12838 */ "20664, 27203, 19417, 19417, 19417, 23350, 32335, 42449, 19417, 19417, 24234, 32017, 32368, 32368",
      /* 12852 */ "32368, 25699, 25813, 25813, 25814, 37612, 42487, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12866 */ "38875, 32336, 19417, 23351, 35844, 32368, 32368, 32368, 28691, 24143, 25813, 25813, 25813, 21995",
      /* 12880 */ "42486, 19417, 19417, 19417, 19417, 19417, 19417, 24235, 32336, 19417, 32234, 32366, 30851, 32368",
      /* 12894 */ "28691, 21490, 25813, 27285, 25813, 36495, 42488, 19417, 19417, 19417, 19417, 24233, 42449, 23350",
      /* 12908 */ "32360, 32368, 32368, 26153, 28113, 25813, 25813, 39789, 30344, 19417, 19417, 19417, 38874, 24232",
      /* 12922 */ "32367, 32368, 26635, 25813, 25813, 28413, 19417, 19417, 19417, 33410, 35505, 32368, 21387, 25813",
      /* 12936 */ "28418, 19417, 19417, 19725, 27743, 26706, 25813, 36251, 22225, 28650, 27550, 33257, 22226, 26706",
      /* 12950 */ "42485, 27546, 42485, 27549, 40266, 21385, 40270, 42482, 21644, 21644, 37483, 23677, 19417, 19417",
      /* 12964 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12978 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 12992 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13006 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13020 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13034 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13048 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 24121, 19417, 19417, 27373, 19417, 27202",
      /* 13062 */ "19417, 32057, 22085, 24798, 32081, 32095, 32105, 32121, 32137, 32150, 20533, 21929, 19417, 25309",
      /* 13076 */ "19417, 24879, 24505, 32166, 19417, 30734, 19734, 19417, 32185, 32230, 32220, 32250, 32271, 31009",
      /* 13090 */ "21546, 28011, 24948, 19417, 40447, 32307, 33981, 26550, 25328, 23350, 32333, 32352, 19417, 24948",
      /* 13104 */ "26686, 30453, 32385, 39971, 29149, 32422, 32459, 37925, 32485, 29759, 32437, 32513, 19417, 19417",
      /* 13118 */ "19417, 18439, 19417, 19417, 25282, 32336, 19417, 23351, 35844, 30528, 30539, 36936, 32614, 32533",
      /* 13132 */ "27004, 29942, 25813, 21995, 42486, 19417, 32584, 19417, 19417, 40658, 23981, 24235, 29705, 19417",
      /* 13146 */ "32234, 32366, 32368, 32612, 32630, 21490, 25813, 26390, 26002, 36495, 42488, 32651, 19417, 40680",
      /* 13160 */ "19417, 30005, 42449, 23350, 32360, 32670, 32368, 26153, 32317, 25813, 25813, 39789, 36516, 19417",
      /* 13174 */ "19417, 32688, 32725, 32748, 32766, 32368, 26635, 32787, 25813, 28413, 40978, 19417, 41263, 33410",
      /* 13188 */ "35505, 32368, 21387, 25813, 28418, 19417, 32804, 19725, 27743, 37475, 24147, 36251, 22225, 28650",
      /* 13202 */ "27550, 33257, 22226, 26706, 42485, 27546, 42485, 27549, 40266, 32822, 36258, 32858, 21644, 32877",
      /* 13216 */ "37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13230 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13244 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13258 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13272 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13286 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13300 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 24121, 19417",
      /* 13314 */ "19417, 30933, 19417, 27920, 19417, 26821, 19417, 40116, 28993, 29007, 29017, 32903, 32919, 32932",
      /* 13328 */ "20533, 21362, 19417, 25309, 19417, 26132, 19417, 19417, 19417, 28247, 19734, 19417, 32948, 31955",
      /* 13342 */ "31945, 32983, 33845, 33007, 33070, 33111, 19417, 28143, 20664, 27203, 30970, 19417, 33144, 23350",
      /* 13356 */ "32335, 42449, 19417, 19417, 33163, 33197, 33234, 28878, 42514, 26506, 25813, 40830, 33254, 33021",
      /* 13370 */ "33273, 31861, 33308, 19417, 19417, 41872, 19417, 19417, 38875, 32336, 19417, 23351, 35844, 34489",
      /* 13384 */ "33342, 32368, 28691, 33358, 36587, 33386, 25813, 21995, 42486, 41283, 41303, 19417, 19417, 35148",
      /* 13398 */ "42293, 33406, 32336, 19417, 32234, 32366, 33426, 41344, 28691, 33443, 42057, 40333, 33467, 36495",
      /* 13412 */ "42488, 19417, 19417, 19417, 19417, 24233, 42449, 23350, 32360, 32368, 32368, 26153, 28113, 25813",
      /* 13426 */ "25813, 39789, 30344, 19417, 19417, 19417, 38874, 24232, 32367, 32368, 26635, 25813, 25813, 28413",
      /* 13440 */ "33487, 19417, 19417, 33410, 35505, 32368, 21387, 25813, 28418, 19417, 19417, 34449, 33505, 32991",
      /* 13454 */ "38759, 36251, 22225, 28650, 27550, 33257, 19875, 40911, 25150, 27546, 42485, 27549, 40266, 21385",
      /* 13468 */ "40270, 42482, 21644, 21644, 37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13482 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13496 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13510 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13524 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13538 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13552 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13566 */ "19417, 19417, 24121, 19417, 19417, 22155, 19417, 33527, 19417, 30430, 33546, 33556, 34627, 34641",
      /* 13580 */ "34651, 33572, 33588, 33601, 20533, 24628, 33617, 25309, 33697, 33128, 19417, 19417, 33635, 33669",
      /* 13594 */ "33685, 33713, 33762, 33817, 35722, 33833, 33861, 33899, 33957, 34005, 27478, 19417, 27310, 34038",
      /* 13608 */ "34057, 19417, 34092, 38054, 32335, 29885, 19417, 34108, 28769, 32017, 37835, 32368, 34163, 25699",
      /* 13622 */ "36770, 41849, 25814, 38432, 34182, 34204, 34205, 34221, 19417, 19417, 34225, 19417, 42090, 32336",
      /* 13636 */ "29516, 23351, 39916, 25587, 32368, 32368, 34241, 34262, 25813, 25813, 39369, 21995, 42486, 19417",
      /* 13650 */ "19417, 19417, 19651, 19417, 36704, 34301, 28252, 35530, 32234, 34326, 32368, 27076, 28194, 34346",
      /* 13664 */ "25813, 36592, 36986, 36495, 30079, 34372, 35156, 19659, 19417, 21100, 34414, 34438, 34465, 34514",
      /* 13678 */ "39993, 26153, 31213, 34557, 34578, 28745, 34594, 34612, 24105, 34667, 38874, 34683, 28657, 32368",
      /* 13692 */ "26635, 34570, 25813, 33035, 36914, 19417, 19417, 34729, 34752, 29249, 31035, 34780, 26762, 19417",
      /* 13706 */ "19417, 34804, 30390, 34829, 34851, 36251, 27240, 30325, 27550, 34897, 22226, 30613, 34938, 23575",
      /* 13720 */ "34972, 33054, 35001, 21385, 40270, 42482, 35026, 21644, 37483, 25234, 19417, 19417, 19417, 19417",
      /* 13734 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13748 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13762 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13776 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13790 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13804 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 13818 */ "19417, 19417, 19417, 19417, 19417, 19417, 24121, 19417, 19417, 20645, 19417, 27202, 20890, 20467",
      /* 13832 */ "19417, 42362, 35054, 35068, 35078, 35094, 35110, 35123, 20533, 35139, 23902, 24017, 35172, 35208",
      /* 13846 */ "19417, 22569, 35230, 35251, 35291, 35326, 31843, 25162, 35387, 35422, 41493, 35438, 35474, 35521",
      /* 13860 */ "19417, 19417, 35584, 35554, 19921, 35572, 28816, 28073, 27782, 42449, 19417, 19417, 24234, 38670",
      /* 13874 */ "32368, 35600, 35617, 25699, 36895, 29169, 40029, 37612, 42487, 33619, 19417, 32169, 19417, 37429",
      /* 13888 */ "35653, 42672, 35687, 30739, 38574, 35707, 35751, 32368, 31063, 32368, 38375, 24143, 32788, 35767",
      /* 13902 */ "32842, 25220, 35786, 35820, 34014, 25751, 19417, 19417, 19417, 24235, 32336, 19417, 35839, 32366",
      /* 13916 */ "25580, 32368, 28691, 21490, 27290, 25813, 25813, 36495, 42488, 19417, 42598, 19417, 35860, 24233",
      /* 13930 */ "42449, 23350, 32360, 32368, 32368, 34246, 35878, 25813, 25813, 39789, 30344, 39451, 19417, 19417",
      /* 13944 */ "38874, 31419, 35900, 35918, 35936, 35955, 25813, 35971, 21807, 19417, 19417, 23062, 42796, 32368",
      /* 13958 */ "39293, 25813, 28418, 19417, 19417, 19725, 27743, 26706, 25813, 21183, 22225, 41448, 39704, 21446",
      /* 13972 */ "36012, 36051, 42485, 23755, 36067, 27549, 40266, 21385, 40270, 27521, 29362, 21644, 37483, 36091",
      /* 13986 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14000 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14014 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14028 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14042 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14056 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14070 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 24121, 19417, 19417, 19417",
      /* 14084 */ "19417, 27202, 19417, 36627, 19735, 31152, 29393, 34736, 36113, 36128, 36144, 36157, 20533, 19417",
      /* 14098 */ "24980, 32596, 19417, 19417, 19417, 19417, 34875, 32335, 19734, 36173, 19417, 28835, 19734, 32368",
      /* 14112 */ "36202, 42064, 36226, 27364, 39667, 36274, 20664, 27203, 19417, 36291, 36359, 36381, 27776, 42449",
      /* 14126 */ "19417, 36403, 24234, 32017, 36423, 36448, 36470, 28297, 35950, 36532, 38499, 36573, 36608, 19417",
      /* 14140 */ "42637, 19417, 18769, 23683, 37226, 19417, 38875, 32336, 19417, 23351, 35844, 32368, 32368, 32368",
      /* 14154 */ "28691, 24143, 25813, 25813, 25813, 21995, 26531, 19417, 36643, 19417, 19417, 36661, 41626, 24235",
      /* 14168 */ "36680, 36702, 32234, 32366, 34480, 32368, 28691, 36720, 29442, 25813, 25813, 36495, 42488, 33989",
      /* 14182 */ "19417, 19417, 19417, 24233, 42449, 23350, 32360, 32368, 36744, 40291, 36764, 25813, 36786, 39789",
      /* 14196 */ "30344, 19417, 19417, 19417, 38874, 24232, 32367, 32368, 26635, 25813, 25813, 28413, 19417, 32967",
      /* 14210 */ "19417, 33410, 36804, 32368, 21387, 25813, 29076, 19417, 19417, 19725, 27743, 26706, 25813, 36251",
      /* 14224 */ "22225, 28650, 27550, 21624, 36837, 26706, 42485, 36876, 42485, 27549, 40266, 21385, 40270, 42482",
      /* 14238 */ "21644, 21644, 37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14252 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14266 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14280 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14294 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14308 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14322 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14336 */ "24121, 19417, 19417, 19417, 19417, 27202, 19417, 19417, 19417, 42362, 26681, 19730, 22226, 18410",
      /* 14350 */ "21383, 32497, 20533, 19417, 19417, 25309, 19417, 19417, 19417, 36911, 19417, 39627, 31773, 31779",
      /* 14364 */ "31782, 40486, 40476, 36930, 36952, 42159, 21546, 27874, 19417, 19417, 20664, 27203, 19417, 19417",
      /* 14378 */ "19417, 23350, 32335, 42449, 19417, 19417, 24234, 32017, 32368, 32368, 32368, 25699, 25813, 25813",
      /* 14392 */ "25814, 37612, 42487, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 38875, 32336, 19417, 23351",
      /* 14406 */ "35844, 32368, 32368, 32368, 32672, 36982, 25813, 25813, 25813, 21995, 42486, 19417, 19417, 19417",
      /* 14420 */ "19417, 19417, 19417, 24235, 32336, 19417, 32234, 32366, 32368, 32368, 28691, 21490, 25813, 25813",
      /* 14434 */ "25813, 36495, 42488, 19417, 19417, 19417, 19417, 24233, 42449, 23350, 32360, 32368, 32368, 26153",
      /* 14448 */ "28113, 25813, 25813, 39789, 30344, 19417, 19417, 19417, 38874, 24232, 32367, 32368, 26635, 25813",
      /* 14462 */ "25813, 28413, 19417, 19417, 19417, 33410, 35505, 32368, 21387, 25813, 28418, 19417, 19417, 19725",
      /* 14476 */ "29406, 26706, 29804, 36251, 22225, 28650, 27550, 33257, 22226, 26706, 42485, 27546, 42485, 27549",
      /* 14490 */ "40266, 21385, 40270, 42482, 21644, 21644, 37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14504 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14518 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14532 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14546 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14560 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14574 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14588 */ "19417, 19417, 19417, 19417, 24121, 19417, 19417, 27204, 37002, 37019, 20923, 19417, 37025, 42362",
      /* 14602 */ "37042, 37056, 37066, 37082, 37098, 37111, 20533, 19417, 28792, 25309, 32568, 24352, 37127, 39597",
      /* 14616 */ "37149, 23393, 34813, 37175, 37209, 37251, 37299, 36343, 26115, 38446, 37337, 37385, 19417, 19417",
      /* 14630 */ "28561, 37418, 25081, 25841, 37361, 38855, 25290, 42449, 19417, 30242, 32750, 37452, 31371, 32368",
      /* 14644 */ "37499, 38956, 31042, 40961, 29923, 27271, 37517, 19417, 35235, 29866, 37003, 19417, 19417, 37539",
      /* 14658 */ "38875, 32732, 19417, 42788, 40156, 37557, 37577, 32368, 37599, 37628, 31352, 25813, 36966, 21995",
      /* 14672 */ "42486, 19417, 32041, 35823, 20299, 19538, 24956, 24235, 25039, 42667, 37652, 37673, 35637, 34529",
      /* 14686 */ "34166, 21490, 25813, 37691, 37728, 37746, 28472, 19417, 19417, 37762, 19417, 19718, 42449, 39092",
      /* 14700 */ "37791, 37833, 32368, 26153, 37159, 25813, 25813, 42344, 37851, 27661, 39178, 19417, 38874, 24232",
      /* 14714 */ "32367, 32368, 28908, 25813, 25813, 37871, 19417, 23851, 19417, 33410, 37892, 32368, 37919, 29809",
      /* 14728 */ "28418, 20187, 19417, 19725, 27743, 26706, 25813, 36251, 22225, 28650, 27550, 33257, 37941, 37983",
      /* 14742 */ "33875, 27546, 32861, 38033, 33095, 21385, 40270, 42482, 38070, 34835, 37483, 23677, 19417, 19417",
      /* 14756 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14770 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14784 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14798 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14812 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14826 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 14840 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 24121, 19417, 19417, 19417, 38086, 38107",
      /* 14854 */ "38131, 38148, 38164, 21764, 38206, 38220, 38230, 38246, 38262, 38275, 18298, 19417, 19417, 32709",
      /* 14868 */ "19417, 19417, 28217, 38291, 25605, 38308, 36851, 24746, 36860, 38332, 31203, 38366, 38391, 38418",
      /* 14882 */ "38476, 38515, 38540, 19417, 20664, 38556, 38590, 19417, 19417, 27454, 38609, 21426, 31573, 32699",
      /* 14896 */ "38657, 32017, 38686, 35631, 32368, 29262, 38737, 38757, 25814, 26969, 38775, 35305, 19417, 38798",
      /* 14910 */ "38837, 19417, 19417, 19417, 38875, 32336, 31436, 23351, 35844, 32368, 32368, 32368, 28691, 24143",
      /* 14924 */ "25813, 25813, 25813, 21995, 42486, 19417, 19023, 24923, 20381, 19417, 37232, 38871, 38316, 25009",
      /* 14938 */ "38891, 38921, 32368, 38943, 38982, 39017, 25813, 40838, 39042, 39067, 39083, 28339, 19417, 39108",
      /* 14952 */ "19417, 24233, 39125, 39149, 28185, 33427, 34704, 26153, 28113, 38741, 32285, 39789, 30344, 40733",
      /* 14966 */ "20839, 41555, 38874, 24232, 27747, 36748, 30546, 21498, 34788, 28413, 19417, 19417, 39169, 26781",
      /* 14980 */ "36333, 32368, 21387, 25813, 39202, 39225, 40356, 39248, 39264, 39286, 28119, 34863, 19464, 34695",
      /* 14994 */ "27550, 22067, 22226, 39309, 39333, 27546, 42485, 39357, 40266, 39393, 25569, 25517, 21644, 21644",
      /* 15008 */ "37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15022 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15036 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15050 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15064 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15078 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15092 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 24121, 19417",
      /* 15106 */ "19417, 19417, 29499, 27202, 19417, 19417, 39444, 26830, 33777, 33791, 33801, 39467, 39483, 39496",
      /* 15120 */ "31546, 23725, 39512, 39528, 19417, 24322, 24658, 39578, 19417, 34922, 28615, 22106, 28624, 39613",
      /* 15134 */ "39648, 39683, 39720, 39736, 39766, 39805, 19204, 27138, 26172, 39830, 19417, 24562, 39853, 21268",
      /* 15148 */ "41321, 39879, 42953, 21681, 39903, 39932, 39969, 37466, 39987, 40009, 25813, 40045, 30262, 39750",
      /* 15162 */ "40061, 41670, 34596, 19417, 40096, 40132, 19417, 37026, 19475, 40150, 40172, 40188, 40204, 40220",
      /* 15176 */ "40242, 32368, 40286, 40307, 40022, 40332, 30576, 23663, 40349, 30118, 34041, 40372, 40407, 32065",
      /* 15190 */ "40428, 36387, 42250, 19903, 40463, 40506, 38695, 32368, 40537, 40571, 40595, 25813, 29471, 33370",
      /* 15204 */ "29196, 27233, 19417, 40644, 40679, 39153, 40696, 23350, 27062, 41092, 39698, 26153, 21171, 26378",
      /* 15218 */ "40712, 39789, 32887, 19417, 40732, 21474, 40749, 36365, 40782, 32368, 34713, 40821, 25813, 40854",
      /* 15232 */ "19417, 40882, 18445, 33410, 26072, 40905, 40927, 40628, 25740, 40977, 19417, 40994, 41023, 41046",
      /* 15246 */ "36728, 36251, 41070, 25050, 33941, 37636, 22226, 26706, 42485, 27546, 42485, 27549, 37703, 31989",
      /* 15260 */ "41108, 41124, 21644, 21644, 41054, 23677, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15274 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15288 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15302 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15316 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15330 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15344 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15358 */ "19417, 19417, 24121, 19417, 19417, 19417, 23178, 27202, 19417, 20552, 19417, 41158, 41174, 41188",
      /* 15372 */ "41201, 41217, 41233, 41246, 20533, 19417, 19417, 25309, 41262, 21565, 19417, 19417, 19417, 32335",
      /* 15386 */ "19734, 35458, 19417, 24236, 41279, 32399, 27985, 31009, 21546, 27364, 41299, 19417, 20664, 27203",
      /* 15400 */ "19417, 19417, 33727, 23350, 41319, 42449, 19417, 24915, 33746, 32017, 41337, 32368, 32368, 41360",
      /* 15414 */ "25813, 25813, 25777, 33913, 41375, 19417, 41412, 19417, 32654, 19417, 35556, 36407, 38875, 41437",
      /* 15428 */ "31742, 23351, 37657, 29985, 41030, 41481, 28691, 24143, 40942, 29773, 25813, 21995, 42486, 33530",
      /* 15442 */ "19417, 19417, 19417, 19417, 39209, 25440, 32336, 19417, 32234, 28857, 32368, 32368, 28691, 41509",
      /* 15456 */ "41533, 25813, 25813, 36495, 31628, 19417, 41553, 19417, 19417, 24233, 42449, 36664, 32360, 32368",
      /* 15470 */ "32368, 26153, 28113, 25813, 25813, 39789, 21711, 19417, 19417, 41571, 38874, 24232, 41589, 32368",
      /* 15484 */ "32635, 25813, 25813, 28413, 32443, 19417, 19417, 33410, 35505, 32368, 21387, 25813, 28418, 19417",
      /* 15498 */ "19417, 19725, 27743, 26706, 25813, 36251, 22225, 29968, 27550, 41612, 22226, 26706, 42485, 27546",
      /* 15512 */ "42485, 27549, 40266, 41642, 40270, 42482, 21644, 41658, 37483, 23677, 19417, 19417, 19417, 19417",
      /* 15526 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15540 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15554 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15568 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15582 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15596 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15610 */ "19417, 19417, 19417, 19417, 19417, 19417, 24121, 19417, 19417, 19417, 19417, 27202, 38641, 18837",
      /* 15624 */ "19417, 41686, 41702, 28103, 22226, 41724, 41740, 41753, 20533, 19417, 19417, 25309, 19417, 19417",
      /* 15638 */ "19417, 19417, 19417, 32335, 19734, 19417, 19417, 24236, 19734, 41769, 34764, 31009, 21546, 27364",
      /* 15652 */ "19417, 23936, 20664, 27203, 19417, 19417, 19417, 23350, 41792, 42449, 41812, 19417, 26776, 32017",
      /* 15666 */ "33211, 39946, 32368, 25699, 41829, 41847, 25814, 27860, 41865, 19417, 19417, 19417, 19417, 33147",
      /* 15680 */ "19417, 19417, 38875, 41888, 40075, 23351, 35844, 32368, 36454, 32368, 28691, 24143, 25796, 25813",
      /* 15694 */ "25813, 21995, 42486, 19417, 19417, 19417, 19417, 19417, 19417, 24235, 32336, 19417, 32234, 32366",
      /* 15708 */ "32368, 32368, 28691, 21490, 25813, 25813, 25813, 36495, 42488, 19417, 19417, 19417, 19417, 24233",
      /* 15722 */ "42449, 23350, 32360, 32368, 32368, 26153, 28113, 25813, 25813, 39789, 30344, 19417, 39555, 19417",
      /* 15736 */ "38874, 24232, 32367, 32368, 26635, 25813, 25813, 28413, 19417, 30824, 19417, 33410, 35505, 32368",
      /* 15750 */ "21387, 25813, 28418, 19417, 19417, 19725, 27743, 26706, 25813, 36251, 41923, 28650, 27550, 33257",
      /* 15764 */ "22226, 26706, 42485, 27546, 42485, 27549, 40266, 21385, 40270, 42482, 21644, 21644, 37483, 23677",
      /* 15778 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15792 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15806 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15820 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15834 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15848 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 15862 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 24121, 19417, 19417, 19417",
      /* 15876 */ "32204, 27202, 19417, 21327, 20206, 30056, 41944, 41958, 41968, 41984, 42000, 42013, 20533, 19417",
      /* 15890 */ "19417, 25309, 19417, 19417, 19417, 19417, 19417, 32335, 19734, 19417, 19417, 24236, 19734, 37675",
      /* 15904 */ "40547, 40316, 42029, 36547, 19417, 19417, 20664, 27203, 19417, 19417, 19417, 42080, 32335, 42449",
      /* 15918 */ "19417, 19417, 24234, 32017, 32368, 32368, 32368, 25699, 25813, 25813, 25814, 37612, 42487, 19417",
      /* 15932 */ "19417, 19417, 19417, 19417, 19417, 19417, 38875, 32336, 19417, 23351, 35844, 32368, 32368, 32368",
      /* 15946 */ "28691, 24143, 25813, 25813, 25813, 21995, 42486, 19417, 19417, 19417, 19417, 36645, 19417, 24235",
      /* 15960 */ "32336, 19417, 32234, 32366, 32368, 32368, 28691, 21490, 25813, 25813, 25813, 36495, 42488, 19417",
      /* 15974 */ "42826, 19417, 19417, 24233, 42449, 23350, 32360, 41596, 32368, 42115, 28113, 31305, 25813, 42140",
      /* 15988 */ "30344, 19417, 19417, 19417, 38874, 24232, 32367, 32368, 26635, 25813, 25813, 28413, 19417, 19417",
      /* 16002 */ "19417, 33410, 35505, 32368, 21387, 25813, 28418, 19417, 19417, 19725, 27743, 26706, 25813, 36251",
      /* 16016 */ "22225, 28650, 27550, 33257, 22226, 26706, 42485, 27546, 42485, 27549, 40266, 21385, 40270, 42482",
      /* 16030 */ "21644, 21644, 37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16044 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16058 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16072 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16086 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16100 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16114 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16128 */ "24281, 19417, 19417, 19417, 19417, 27202, 19417, 19417, 19417, 42362, 26681, 19730, 22226, 29118",
      /* 16142 */ "42175, 42188, 20533, 19417, 19417, 25309, 24100, 19417, 42204, 19417, 26854, 42222, 35266, 35272",
      /* 16156 */ "35275, 42243, 36320, 42266, 30402, 31009, 21546, 27364, 19417, 19417, 27188, 27203, 42289, 32962",
      /* 16170 */ "42309, 23350, 32335, 42449, 19417, 19417, 24234, 32017, 32368, 32368, 27083, 25699, 25813, 25813",
      /* 16184 */ "28737, 37612, 25709, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 38875, 32336, 19417, 23351",
      /* 16198 */ "35844, 32368, 32368, 32368, 28691, 24143, 25813, 25813, 25813, 21995, 42486, 19417, 19417, 19417",
      /* 16212 */ "19417, 19417, 19417, 24235, 32336, 19417, 32234, 32366, 32368, 32368, 35920, 42327, 25813, 25813",
      /* 16226 */ "25813, 36495, 25523, 19417, 19417, 19417, 19417, 24233, 42449, 23350, 32360, 32368, 32368, 26153",
      /* 16240 */ "28113, 25813, 25813, 39789, 30344, 19417, 19417, 19417, 38874, 24232, 32367, 32368, 26635, 25813",
      /* 16254 */ "25813, 28413, 19417, 19417, 19417, 33410, 35505, 32368, 21387, 25813, 28418, 19417, 19417, 19725",
      /* 16268 */ "27743, 26706, 25813, 36251, 22225, 28650, 27550, 33257, 22226, 26706, 42485, 27546, 42485, 27549",
      /* 16282 */ "40266, 21385, 40270, 42482, 21644, 21644, 37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16296 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16310 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16324 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16338 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16352 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16366 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16380 */ "19417, 19417, 19417, 19417, 24121, 19417, 19417, 19417, 19417, 27202, 19417, 19417, 19417, 42362",
      /* 16394 */ "26681, 19730, 22226, 18410, 21383, 32497, 20533, 42360, 19417, 25309, 19417, 19417, 21908, 19417",
      /* 16408 */ "19417, 32335, 19734, 19417, 19417, 24236, 37266, 32369, 40547, 27435, 28919, 34276, 19417, 19417",
      /* 16422 */ "20664, 27203, 19417, 19417, 19417, 23350, 32335, 42449, 19417, 19417, 24234, 32017, 32368, 32368",
      /* 16436 */ "29906, 40795, 25813, 25813, 42336, 37612, 42487, 29834, 19417, 36275, 19417, 19417, 19417, 19417",
      /* 16450 */ "38875, 28093, 19417, 23351, 35844, 27334, 32368, 42378, 28691, 42401, 25813, 29729, 25813, 21995",
      /* 16464 */ "42486, 19417, 42430, 19417, 19417, 19417, 19417, 24235, 42447, 19417, 32234, 32366, 42465, 32368",
      /* 16478 */ "28691, 21490, 30583, 25813, 25813, 40609, 42488, 19417, 21012, 19417, 19417, 24233, 42449, 23350",
      /* 16492 */ "42504, 32368, 42537, 38721, 28113, 36788, 25813, 26983, 30344, 19417, 20448, 19417, 38874, 24232",
      /* 16506 */ "32367, 32368, 26635, 25813, 25813, 32469, 19417, 19417, 25896, 33410, 35505, 32368, 21387, 25813",
      /* 16520 */ "28418, 19417, 19417, 19725, 27743, 26706, 25813, 36251, 22225, 28650, 27550, 33257, 22226, 26706",
      /* 16534 */ "42485, 27546, 42485, 27549, 40266, 21385, 40270, 42482, 21644, 21644, 37483, 23677, 19417, 19417",
      /* 16548 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16562 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16576 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16590 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16604 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16618 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16632 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 24121, 19417, 19417, 19417, 19417, 27202",
      /* 16646 */ "19417, 19417, 19417, 42362, 30377, 19730, 22226, 18410, 21383, 32497, 20533, 19417, 19417, 25309",
      /* 16660 */ "19417, 19417, 19417, 19417, 19417, 32335, 19734, 19417, 19417, 24236, 19734, 32368, 40547, 31009",
      /* 16674 */ "21546, 27364, 19417, 19417, 20664, 27203, 19417, 19417, 19417, 23350, 32335, 42449, 19417, 19417",
      /* 16688 */ "24234, 32017, 32368, 32368, 32368, 25699, 25813, 25813, 25814, 37612, 42487, 19417, 19417, 19417",
      /* 16702 */ "19417, 19417, 19417, 19417, 38875, 32336, 19417, 23351, 35844, 32368, 32368, 32368, 28691, 24143",
      /* 16716 */ "25813, 25813, 25813, 21995, 42486, 19417, 19417, 19417, 19417, 19417, 19417, 24235, 32336, 19417",
      /* 16730 */ "32234, 32366, 32368, 32368, 28691, 21490, 25813, 25813, 25813, 36495, 42488, 19417, 19417, 19417",
      /* 16744 */ "19417, 24233, 42449, 23350, 32360, 32368, 32368, 26153, 28113, 25813, 25813, 39789, 30344, 19417",
      /* 16758 */ "19417, 19417, 38874, 24232, 32367, 32368, 26635, 25813, 25813, 28413, 19417, 19417, 19417, 33410",
      /* 16772 */ "35505, 32368, 21387, 25813, 28418, 19417, 19417, 19725, 27743, 26706, 25813, 36251, 22225, 28650",
      /* 16786 */ "27550, 33257, 22226, 26706, 42485, 27546, 42485, 27549, 40266, 21385, 40270, 42482, 21644, 21644",
      /* 16800 */ "37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16814 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16828 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16842 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16856 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16870 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 16884 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 20044, 19417",
      /* 16898 */ "19417, 19417, 19417, 42555, 38186, 42616, 42580, 42564, 38179, 42614, 37967, 38190, 42634, 42653",
      /* 16912 */ "35986, 19417, 19417, 25309, 19417, 19417, 37275, 42688, 19417, 18994, 19416, 19417, 19417, 18987",
      /* 16926 */ "19416, 18944, 23507, 18945, 18314, 42708, 18344, 18365, 20346, 27203, 19417, 30832, 19417, 42618",
      /* 16940 */ "18505, 18392, 18426, 18461, 18496, 19261, 19991, 18521, 20505, 19966, 19995, 18525, 20509, 19766",
      /* 16954 */ "42733, 42850, 19417, 19417, 19417, 37523, 42869, 42741, 18541, 18576, 18592, 18602, 18621, 39001",
      /* 16968 */ "18650, 18670, 24387, 38997, 18646, 18666, 24383, 18688, 19331, 21130, 18710, 18726, 18750, 22021",
      /* 16982 */ "19417, 21020, 18785, 18801, 18820, 18859, 18881, 18903, 18925, 18853, 18875, 18897, 18919, 18941",
      /* 16996 */ "19639, 18961, 21859, 18977, 21231, 18605, 19010, 19046, 19091, 19107, 19125, 19143, 18630, 19109",
      /* 17010 */ "19127, 19168, 19687, 19193, 23820, 19227, 20710, 19248, 19605, 19277, 19297, 19609, 19281, 19326",
      /* 17024 */ "19348, 19369, 19417, 19405, 20252, 19384, 18694, 19389, 19434, 19450, 19491, 19526, 19059, 19075",
      /* 17038 */ "19068, 19554, 19570, 19586, 19625, 19675, 19703, 19751, 19785, 19306, 19815, 19768, 18328, 21072",
      /* 17052 */ "19849, 19891, 19310, 19937, 19953, 20011, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17066 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17080 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17094 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17108 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17122 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17136 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17150 */ "19417, 19417, 20044, 19417, 19417, 19417, 19417, 27202, 19417, 19417, 42757, 42362, 25891, 20122",
      /* 17164 */ "20127, 42776, 19417, 42812, 34285, 19417, 19417, 25309, 19417, 19417, 37275, 19417, 19417, 18994",
      /* 17178 */ "19416, 42847, 19417, 18987, 19416, 18944, 19598, 18945, 18314, 20157, 18344, 18365, 20346, 27203",
      /* 17192 */ "19417, 30832, 19417, 42618, 18505, 18392, 18426, 18461, 18496, 19261, 19991, 18521, 20505, 19979",
      /* 17206 */ "19995, 18525, 20509, 19766, 19332, 42850, 19417, 19417, 19417, 37523, 42869, 42741, 18541, 18576",
      /* 17220 */ "18592, 18602, 18621, 39001, 18650, 18670, 24387, 38997, 18646, 18666, 24383, 18688, 19331, 21130",
      /* 17234 */ "18710, 18726, 18750, 22021, 19417, 21020, 18785, 18801, 18820, 18859, 18881, 18903, 18925, 18853",
      /* 17248 */ "18875, 18897, 18919, 18941, 19639, 18961, 21859, 18977, 21231, 18605, 19010, 19046, 19091, 19107",
      /* 17262 */ "19125, 19143, 18630, 19109, 19127, 19168, 19687, 19193, 23820, 19227, 20710, 19248, 19605, 19277",
      /* 17276 */ "19297, 19609, 19281, 19326, 19348, 19369, 19417, 19405, 20252, 19384, 18694, 19389, 19434, 19450",
      /* 17290 */ "19491, 19526, 19059, 19075, 19068, 19554, 19570, 19586, 19625, 19675, 19703, 19751, 19785, 19306",
      /* 17304 */ "19815, 19768, 18328, 21072, 19849, 19891, 19310, 19937, 19953, 20011, 19417, 19417, 19417, 19417",
      /* 17318 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17332 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17346 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17360 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17374 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17388 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17402 */ "19417, 19417, 19417, 19417, 19417, 19417, 20044, 19417, 19417, 19417, 19417, 27202, 42866, 19417",
      /* 17416 */ "19417, 42760, 42885, 37133, 42906, 42912, 19417, 42928, 34285, 19417, 19417, 25309, 19417, 19417",
      /* 17430 */ "37275, 38813, 19417, 18994, 19416, 19417, 19417, 18987, 19416, 18944, 19598, 18945, 18314, 20157",
      /* 17444 */ "18344, 18365, 20346, 27203, 19417, 30832, 19417, 42618, 18505, 18392, 18426, 18461, 18496, 19261",
      /* 17458 */ "19991, 18521, 20505, 23494, 19995, 18525, 20509, 19766, 19332, 42850, 19417, 19417, 19417, 37523",
      /* 17472 */ "42869, 42741, 18541, 18576, 18592, 18602, 18621, 39001, 18650, 18670, 24387, 38997, 18646, 18666",
      /* 17486 */ "24383, 18688, 19331, 21130, 18710, 18726, 18750, 22021, 19417, 21020, 18785, 18801, 18820, 18859",
      /* 17500 */ "18881, 18903, 18925, 18853, 18875, 18897, 18919, 18941, 19639, 18961, 21859, 18977, 21231, 18605",
      /* 17514 */ "19010, 19046, 19091, 19107, 19125, 19143, 18630, 19109, 19127, 19168, 19687, 19193, 23820, 19227",
      /* 17528 */ "20710, 19248, 19605, 19277, 19297, 19609, 19281, 19326, 19348, 19369, 19417, 19405, 20252, 19384",
      /* 17542 */ "18694, 19389, 19434, 19450, 19491, 19526, 19059, 19075, 19068, 19554, 19570, 19586, 19625, 19675",
      /* 17556 */ "19703, 19751, 19785, 19306, 19815, 19768, 18328, 21072, 19849, 19891, 19310, 19937, 19953, 20011",
      /* 17570 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17584 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17598 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17612 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17626 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17640 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17654 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 20044, 19417, 19417, 19417",
      /* 17668 */ "19417, 27202, 19417, 19417, 19417, 42362, 25891, 19417, 19417, 19417, 19417, 23545, 20533, 19417",
      /* 17682 */ "19417, 25309, 19417, 19417, 19417, 19417, 19417, 32335, 19734, 19417, 19417, 24236, 19734, 32368",
      /* 17696 */ "40547, 31009, 21546, 27364, 19417, 19417, 20664, 27203, 19417, 19417, 19417, 23350, 32335, 42449",
      /* 17710 */ "19417, 19417, 24234, 30497, 32368, 32368, 32368, 21594, 25813, 25813, 25814, 37612, 42487, 19417",
      /* 17724 */ "19417, 19417, 19417, 19417, 19417, 19417, 38875, 32336, 19417, 23351, 35844, 32368, 32368, 32368",
      /* 17738 */ "28691, 21442, 25813, 25813, 25813, 21995, 42486, 19417, 19417, 19417, 19417, 19417, 19417, 24235",
      /* 17752 */ "32336, 19417, 32234, 32366, 32368, 32368, 28691, 21490, 25813, 25813, 25813, 36495, 42488, 19417",
      /* 17766 */ "19417, 19417, 19417, 24233, 42449, 23350, 32360, 32368, 32368, 26153, 28113, 25813, 25813, 39789",
      /* 17780 */ "30344, 19417, 19417, 19417, 38874, 24232, 32367, 32368, 26635, 25813, 25813, 28413, 19417, 19417",
      /* 17794 */ "19417, 33410, 35505, 32368, 21387, 25813, 28418, 19417, 19417, 19725, 27743, 26706, 25813, 36251",
      /* 17808 */ "22225, 28650, 27550, 33257, 22226, 26706, 42485, 27546, 42485, 27549, 40266, 21385, 40270, 42482",
      /* 17822 */ "21644, 21644, 37483, 23677, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17836 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17850 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17864 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17878 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17892 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17906 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 17920 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 35187, 19417, 35191, 33321, 33326, 42976",
      /* 17934 */ "37235, 43010, 37275, 19417, 19417, 19417, 19417, 19417, 37275, 19417, 19417, 18994, 19416, 19417",
      /* 17948 */ "19417, 18987, 19416, 18944, 19598, 18945, 18314, 19332, 18344, 18365, 19825, 19417, 19417, 30832",
      /* 17962 */ "19417, 42618, 18505, 18392, 18426, 18461, 18496, 19261, 19991, 18521, 20505, 19966, 19995, 18525",
      /* 17976 */ "20509, 19766, 19332, 42850, 19417, 19417, 19417, 37523, 42869, 42741, 18541, 18576, 18592, 18602",
      /* 17990 */ "18621, 39001, 18650, 18670, 24387, 38997, 18646, 18666, 24383, 18688, 19331, 21130, 18710, 18726",
      /* 18004 */ "18750, 22021, 19417, 21020, 18785, 18801, 18820, 18859, 18881, 18903, 18925, 18853, 18875, 18897",
      /* 18018 */ "18919, 18941, 19639, 18961, 21859, 18977, 21231, 18605, 19010, 19046, 19091, 19107, 19125, 19143",
      /* 18032 */ "18630, 19109, 19127, 19168, 19687, 19193, 23820, 19227, 20710, 19248, 19605, 19277, 19297, 19609",
      /* 18046 */ "19281, 19326, 19348, 19369, 19417, 19405, 20252, 19384, 18694, 19389, 19434, 19450, 19491, 19526",
      /* 18060 */ "19059, 19075, 19068, 19554, 19570, 19586, 19625, 19675, 19703, 19751, 19785, 19306, 19815, 19768",
      /* 18074 */ "18328, 21072, 19849, 19891, 19310, 19937, 19953, 20011, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 18088 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 18102 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 18116 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 18130 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 18144 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 18158 */ "19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417, 19417",
      /* 18172 */ "19417, 19417, 19417, 19417, 0, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 73987, 73987, 73987, 73987, 0",
      /* 18193 */ "0, 78086, 78086, 73987, 73987, 78086, 78086, 78086, 78086, 78086, 78086, 78086, 78086, 78086, 78086",
      /* 18208 */ "0, 78086, 0, 73987, 78086, 73987, 78086, 317, 78086, 78086, 78086, 78086, 78086, 78086, 78086",
      /* 18223 */ "78086, 78086, 78086, 78086, 78086, 78086, 78086, 78086, 78086, 45056, 49152, 78086, 78086, 78086",
      /* 18237 */ "78086, 40960, 78086, 78086, 78086, 78086, 78086, 78086, 78086, 78086, 78086, 78086, 78086, 0, 0, 2",
      /* 18253 */ "2, 3, 94212, 5, 6, 0, 0, 0, 0, 73987, 0, 0, 78086, 0, 2105344, 265, 266, 0, 0, 0, 0, 0, 0, 0",
      /* 18277 */ "2105344, 574, 575, 0, 0, 0, 0, 0, 0, 0, 2105344, 21053, 266, 0, 0, 0, 0, 0, 0, 0, 2106009, 0, 0, 0",
      /* 18301 */ "0, 0, 0, 0, 0, 265, 266, 0, 0, 0, 577, 0, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 18321 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2162688, 2162688, 2162688, 2162688",
      /* 18332 */ "2162688, 0, 0, 0, 0, 0, 0, 0, 0, 2162688, 2162688, 2588672, 2441216, 2449408, 0, 0, 2469888, 0, 0",
      /* 18351 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1913, 1914, 0, 0, 0, 0, 0, 2719744, 0, 0, 0, 0, 0, 0, 2871296, 0, 0",
      /* 18378 */ "0, 0, 0, 0, 766, 629, 0, 0, 0, 770, 0, 0, 0, 629, 2777088, 2797568, 2158592, 2834432, 2158592",
      /* 18397 */ "2883584, 2158592, 2158592, 2158592, 3067904, 2158592, 2158592, 2158592, 0, 0, 0, 253952, 266240, 0",
      /* 18411 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 497, 0, 497, 497, 497, 497, 0, 2621440, 0, 2686976, 2703360, 0, 0",
      /* 18433 */ "2756608, 2777088, 2797568, 0, 2834432, 2883584, 0, 0, 0, 0, 0, 1366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 18455 */ "2219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2883584, 2441216, 0, 0, 0, 0, 2777088, 0, 2883584, 0, 0, 0, 0, 0",
      /* 18479 */ "1382, 0, 0, 0, 0, 0, 0, 0, 401, 401, 401, 718, 401, 401, 401, 401, 401, 0, 0, 0, 2719744, 0, 0",
      /* 18502 */ "2883584, 0, 0, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2621440, 2158592",
      /* 18514 */ "2158592, 2686976, 2158592, 2703360, 2158592, 2158592, 2756608, 2162688, 2703360, 2162688, 2711552",
      /* 18525 */ "2162688, 2162688, 2756608, 2162688, 2777088, 2797568, 2162688, 2162688, 2834432, 2162688, 2162688",
      /* 18536 */ "2883584, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0, 2428928, 2158592, 2158592, 2158592",
      /* 18549 */ "2158592, 2158592, 2158592, 2580480, 2158592, 2158592, 2613248, 2158592, 0, 192512, 0, 0, 0, 0, 0, 0",
      /* 18565 */ "0, 0, 0, 0, 0, 0, 0, 668, 0, 0, 0, 2658304, 2158592, 2158592, 2158592, 2158592, 2785280, 2809856",
      /* 18583 */ "2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2428928, 0, 0, 2580480, 0",
      /* 18596 */ "0, 0, 0, 2809856, 0, 0, 0, 0, 2809856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592",
      /* 18618 */ "2527232, 2158592, 2158592, 2158592, 2809856, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592",
      /* 18629 */ "2158592, 0, 0, 0, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2490368, 2162688, 2162688, 2527232",
      /* 18644 */ "2162688, 2162688, 2162688, 2162688, 2580480, 2162688, 2162688, 2162688, 2162688, 2613248, 2162688",
      /* 18655 */ "2162688, 2162688, 2658304, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 18666 */ "2162688, 2162688, 2162688, 2162688, 2785280, 2809856, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 18677 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 245760",
      /* 18688 */ "2162688, 2162688, 2162688, 2801664, 2162688, 2801664, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 18699 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2498560, 2539520, 2543616, 2162688, 2162688, 2592768",
      /* 18710 */ "0, 0, 2760704, 0, 0, 0, 2854912, 0, 0, 0, 0, 0, 0, 0, 0, 3051520, 3055616, 0, 0, 0, 3141632, 0, 0",
      /* 18733 */ "3158016, 0, 0, 0, 0, 0, 0, 0, 0, 265, 265, 265, 265, 265, 265, 265, 265, 2875392, 0, 2768896, 0, 0",
      /* 18755 */ "0, 0, 0, 0, 2838528, 0, 0, 2854912, 0, 0, 0, 0, 0, 1386, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1355, 0, 0",
      /* 18782 */ "0, 0, 0, 2158592, 2158592, 2158592, 2707456, 2158592, 2158592, 2875392, 2158592, 2158592, 2158592",
      /* 18795 */ "2158592, 2158592, 2158592, 2158592, 2158592, 2478080, 0, 0, 2707456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 18814 */ "0, 0, 0, 282, 283, 0, 0, 0, 3158016, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592",
      /* 18830 */ "2158592, 2158592, 3158016, 2158592, 0, 0, 237568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 343, 0, 0, 0",
      /* 18853 */ "0, 0, 0, 2121728, 0, 0, 0, 0, 2162688, 2162688, 2162688, 2473984, 2478080, 2162688, 2162688",
      /* 18868 */ "2162688, 2519040, 2162688, 2162688, 2162688, 2162688, 2162688, 2519040, 2162688, 2162688, 2162688",
      /* 18879 */ "2162688, 2162688, 2162688, 2162688, 2596864, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 18890 */ "2707456, 2162688, 2162688, 2162688, 2162688, 2162688, 2760704, 2162688, 2162688, 2162688, 2162688",
      /* 18901 */ "2162688, 2760704, 2162688, 2162688, 2162688, 2854912, 2875392, 2162688, 2162688, 2162688, 2162688",
      /* 18912 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2994176, 3018752, 2162688, 2162688, 2162688, 2162688",
      /* 18923 */ "2994176, 3018752, 2162688, 2162688, 2162688, 3051520, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 18934 */ "2162688, 2162688, 2162688, 3158016, 2162688, 0, 0, 2162688, 2162688, 3158016, 2162688, 2162688",
      /* 18946 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 18957 */ "2162688, 2162688, 2162688, 0, 0, 0, 0, 0, 2600960, 0, 0, 0, 0, 0, 2887680, 0, 0, 0, 0, 3026944, 0",
      /* 18978 */ "0, 0, 0, 3125248, 0, 0, 0, 0, 3043328, 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592",
      /* 18998 */ "2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592",
      /* 19009 */ "2158592, 2600960, 2158592, 2695168, 2158592, 2158592, 2887680, 2158592, 2158592, 2158592, 3026944",
      /* 19020 */ "3076096, 3096576, 3145728, 0, 0, 0, 0, 0, 1625, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1616, 0, 0, 1721, 0",
      /* 19044 */ "1722, 0, 0, 0, 0, 3076096, 3096576, 0, 0, 0, 0, 0, 0, 0, 2887680, 0, 2158592, 2158592, 2158592, 0",
      /* 19064 */ "2420736, 2162688, 2162688, 2482176, 2162688, 2162688, 2162688, 2584576, 2162688, 2162688, 2682880",
      /* 19075 */ "2740224, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 19086 */ "3121152, 2420736, 2162688, 2162688, 2482176, 2158592, 2158592, 2158592, 2158592, 2158592, 0, 0, 0",
      /* 19099 */ "2162688, 2162688, 2162688, 2162688, 2490368, 2162688, 2162688, 2527232, 2162688, 2162688, 2162688",
      /* 19110 */ "2162688, 2162688, 2162688, 2600960, 2625536, 2162688, 2162688, 2162688, 2695168, 2162688, 2162688",
      /* 19121 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2887680, 2162688, 2162688",
      /* 19132 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3026944, 2162688, 2162688, 3076096",
      /* 19143 */ "2162688, 3076096, 2162688, 3096576, 2162688, 2162688, 2162688, 3145728, 2162688, 0, 0, 0, 0, 0, 0",
      /* 19158 */ "0, 271, 270, 0, 270, 270, 271, 271, 0, 0, 2162688, 3096576, 2162688, 2162688, 2162688, 3145728",
      /* 19174 */ "2162688, 2437120, 2437120, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 265, 0, 0",
      /* 19187 */ "0, 265, 0, 266, 0, 0, 0, 2961408, 0, 2977792, 0, 0, 0, 0, 3153920, 0, 2813952, 0, 0, 0, 0, 0, 0",
      /* 19210 */ "947, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2077, 0, 0, 0, 0, 0, 0, 3039232, 0, 0, 0, 3022848, 0, 0, 0, 0, 0, 0",
      /* 19238 */ "0, 0, 0, 0, 0, 0, 2064, 0, 0, 0, 0, 0, 2633728, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2813952, 2158592",
      /* 19262 */ "2158592, 2158592, 2158592, 2158592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2162688, 2441216, 2162688, 2715648",
      /* 19279 */ "2736128, 2162688, 2162688, 2752512, 2813952, 2818048, 2162688, 2162688, 2908160, 2162688, 2162688",
      /* 19290 */ "2953216, 2162688, 2961408, 2162688, 2162688, 3022848, 3047424, 2162688, 2162688, 3022848, 3047424",
      /* 19301 */ "2162688, 2162688, 2162688, 2162688, 3174400, 0, 0, 0, 0, 2162688, 2162688, 2162688, 2162688",
      /* 19314 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0, 2162688",
      /* 19327 */ "2162688, 2162688, 2162688, 3174400, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 19338 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2514944, 0, 0, 2543616, 2592768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 19365 */ "2196, 0, 0, 0, 0, 3133440, 0, 2727936, 0, 0, 0, 0, 0, 2891776, 0, 0, 0, 3014656, 0, 2539520",
      /* 19385 */ "2543616, 2162688, 2162688, 2592768, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2891776",
      /* 19396 */ "2162688, 2162688, 2957312, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2920448, 0, 0, 0",
      /* 19409 */ "2158592, 2158592, 2158592, 2543616, 2158592, 2158592, 2158592, 2158592, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 19426 */ "0, 0, 0, 0, 0, 0, 0, 284, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2457600, 0",
      /* 19443 */ "0, 0, 0, 0, 0, 0, 2895872, 0, 0, 3108864, 0, 2682880, 0, 2641920, 2609152, 2691072, 0, 0, 0, 0",
      /* 19463 */ "2936832, 0, 0, 0, 0, 0, 466944, 0, 2377, 2378, 0, 0, 0, 0, 0, 0, 401, 401, 1403, 401, 401, 401, 401",
      /* 19486 */ "401, 401, 1409, 401, 401, 3084288, 0, 2940928, 3129344, 2416640, 0, 0, 0, 0, 0, 0, 0, 2723840, 0, 0",
      /* 19506 */ "0, 0, 0, 1636, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1096, 0, 0, 0, 0, 1100, 0, 0, 0, 2158592, 2482176",
      /* 19531 */ "2158592, 2158592, 2740224, 2158592, 2158592, 2482176, 2740224, 0, 0, 0, 0, 0, 0, 1662, 0, 0, 0, 0",
      /* 19549 */ "0, 311296, 1668, 0, 0, 2162688, 2162688, 3121152, 3108864, 2162688, 2162688, 2162688, 2162688, 0",
      /* 19563 */ "2494464, 0, 0, 0, 2826240, 0, 2973696, 0, 0, 0, 3100672, 0, 0, 0, 0, 0, 0, 0, 2916352, 0, 2445312",
      /* 19584 */ "0, 2445312, 2494464, 2158592, 2744320, 2973696, 2744320, 0, 2158592, 0, 2162688, 2445312, 2453504",
      /* 19597 */ "2494464, 2162688, 2162688, 2162688, 2162688, 0, 0, 2162688, 0, 2162688, 2162688, 2162688, 2162688",
      /* 19610 */ "2162688, 2162688, 2162688, 2162688, 2547712, 2162688, 2162688, 2162688, 2162688, 2633728, 2162688",
      /* 19621 */ "2162688, 2715648, 2736128, 2162688, 2650112, 2744320, 2826240, 2928640, 2162688, 2973696, 2162688",
      /* 19632 */ "2162688, 2162688, 3100672, 2162688, 2445312, 2453504, 2494464, 2162688, 2162688, 2162688, 2162688",
      /* 19643 */ "2162688, 0, 0, 0, 0, 0, 0, 2486272, 0, 0, 0, 0, 0, 0, 1648, 1649, 0, 0, 0, 0, 0, 0, 0, 0, 1898, 0",
      /* 19669 */ "1899, 0, 0, 0, 0, 0, 2162688, 2162688, 2650112, 2744320, 2826240, 2928640, 2162688, 2973696",
      /* 19683 */ "2162688, 2162688, 2162688, 3100672, 2162688, 2162688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2818048, 0",
      /* 19702 */ "2879488, 0, 0, 0, 2846720, 0, 0, 0, 0, 0, 0, 2805760, 0, 3178496, 2560000, 2560000, 0, 0, 0, 0",
      /* 19722 */ "1920, 0, 0, 0, 0, 0, 401, 401, 401, 401, 401, 401, 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 19750 */ "358, 2162688, 2551808, 2560000, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 19761 */ "2162688, 3092480, 2162688, 2551808, 2560000, 2162688, 0, 0, 2162688, 2162688, 2162688, 2162688",
      /* 19773 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 19784 */ "914, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3092480, 0, 0, 0, 0, 0, 2850816",
      /* 19799 */ "0, 0, 0, 0, 0, 1007616, 1007616, 0, 0, 0, 0, 520192, 1895, 0, 364945, 401, 2162688, 2162688",
      /* 19817 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2502656, 0, 0, 0, 0, 0, 0, 0, 3067904, 0",
      /* 19834 */ "0, 0, 0, 0, 0, 0, 0, 360, 360, 360, 360, 360, 360, 360, 360, 2162688, 2465792, 0, 2531328, 2985984",
      /* 19854 */ "0, 0, 0, 0, 2162688, 2162688, 2605056, 2162688, 2830336, 2162688, 2162688, 2162688, 2162688",
      /* 19867 */ "2162688, 265, 0, 266, 0, 0, 0, 2486272, 0, 0, 0, 0, 0, 0, 2415, 0, 0, 0, 0, 0, 0, 0, 401, 0",
      /* 19891 */ "2162688, 2985984, 2162688, 2162688, 2605056, 2162688, 2830336, 2162688, 2162688, 2162688, 2985984",
      /* 19902 */ "2523136, 0, 0, 0, 0, 0, 0, 1716, 0, 1718, 0, 1719, 0, 0, 0, 0, 0, 0, 1612, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 19929 */ "0, 1008, 0, 0, 0, 0, 0, 0, 2424832, 2162688, 2162688, 2162688, 2162688, 2981888, 2424832, 2162688",
      /* 19945 */ "2162688, 2162688, 2162688, 2981888, 2535424, 0, 0, 2912256, 2162688, 2654208, 2932736, 2162688",
      /* 19957 */ "2162688, 2654208, 2932736, 2162688, 2637824, 2699264, 2555904, 2162688, 2555904, 2162688, 2162688",
      /* 19968 */ "2162688, 0, 0, 0, 0, 0, 0, 0, 2162688, 2441216, 2449408, 2162688, 2162688, 2162688, 0, 0, 0, 855, 0",
      /* 19987 */ "0, 858, 2162688, 2441216, 2449408, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 19999 */ "2162688, 2162688, 2621440, 2162688, 2162688, 2162688, 2162688, 2686976, 2162688, 2703360, 2162688",
      /* 20010 */ "2711552, 2162688, 2162688, 2162688, 2162688, 2945024, 2945024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 20028 */ "172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032",
      /* 20040 */ "172032, 172032, 172032, 172032, 0, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 270336, 0, 0",
      /* 20064 */ "0, 0, 111010, 111010, 111010, 111010, 111010, 111010, 418, 418, 111010, 111010, 111010, 111010",
      /* 20078 */ "111010, 418, 111010, 111010, 111010, 418, 111010, 418, 418, 418, 418, 418, 0, 418, 0, 0, 0, 0, 0, 0",
      /* 20098 */ "1879, 0, 0, 0, 0, 0, 0, 0, 401, 1948, 0, 0, 0, 111010, 111010, 111010, 0, 0, 2, 2, 3, 94212, 5, 6",
      /* 20122 */ "0, 0, 0, 0, 0, 1094067, 1094067, 1094067, 1094067, 1094067, 1094067, 1094067, 1094067, 1094067",
      /* 20136 */ "1094067, 1094067, 1094067, 1094067, 1094067, 1094067, 1094067, 0, 0, 2162688, 2162688, 2162688",
      /* 20148 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 914, 2162688, 2162688",
      /* 20159 */ "2162688, 2162688, 2162688, 2162688, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 264, 265, 266, 0, 0, 0, 0, 0, 0",
      /* 20182 */ "118784, 0, 0, 265, 118784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2307, 0, 0, 0, 0, 317, 265, 0, 0, 0",
      /* 20209 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 312, 265, 265, 0, 0, 0, 0, 0, 0, 0, 265, 0, 0, 0, 265, 119154",
      /* 20237 */ "49152, 265, 265, 265, 0, 0, 265, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 2158592, 2158592",
      /* 20259 */ "2158592, 2158592, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2498560, 0, 32768, 0, 0, 0, 0, 0",
      /* 20275 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290816, 0, 2, 2183419, 94212, 5, 6, 255, 0, 0, 0, 0, 0, 255, 0, 0, 0",
      /* 20302 */ "0, 0, 1647, 0, 0, 0, 0, 1651, 0, 0, 0, 1654, 0, 0, 317, 0, 122880, 122880, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 20328 */ "0, 0, 0, 0, 200704, 268, 269, 0, 0, 122880, 0, 122880, 0, 122880, 122880, 122880, 122880, 122880, 0",
      /* 20347 */ "0, 0, 0, 0, 0, 0, 3067904, 0, 0, 0, 0, 0, 0, 0, 317, 122880, 0, 0, 122880, 0, 0, 0, 0, 122880",
      /* 20371 */ "122880, 122880, 122880, 122880, 0, 122880, 122880, 122880, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 20391 */ "0, 0, 761856, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 321, 0, 0, 0, 0, 0",
      /* 20419 */ "122880, 122880, 0, 0, 0, 2, 2, 2183419, 94212, 5, 6, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592",
      /* 20438 */ "2158592, 0, 2163486, 2163486, 2163486, 2163486, 2163486, 2499358, 0, 147456, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 20456 */ "0, 0, 0, 0, 0, 0, 0, 532480, 0, 0, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 344, 0, 0, 2162688",
      /* 20484 */ "2162688, 2162688, 2162688, 2162688, 3080192, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 20495 */ "2162688, 2162688, 0, 1520, 0, 0, 1525, 0, 2162688, 2428928, 2162688, 2162688, 2162688, 2162688",
      /* 20509 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3067904, 2162688, 2162688, 2162688, 2162688",
      /* 20520 */ "2162688, 2162688, 2162688, 2162688, 2162688, 0, 317, 0, 0, 0, 131072, 131072, 131072, 0, 0, 0, 0, 0",
      /* 20538 */ "0, 0, 0, 265, 266, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 345, 0, 0",
      /* 20568 */ "0, 0, 0, 131072, 0, 0, 131072, 0, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 0",
      /* 20585 */ "0, 131072, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 317, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 0, 0, 0, 0",
      /* 20613 */ "0, 135168, 0, 0, 45056, 49152, 0, 135168, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2179696",
      /* 20637 */ "2179696, 2179696, 0, 139264, 0, 0, 266, 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 296, 297, 298, 299",
      /* 20660 */ "0, 0, 317, 266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 317, 266, 266, 0, 0, 0, 0, 0, 0, 0",
      /* 20689 */ "266, 0, 0, 0, 266, 45056, 139638, 266, 266, 266, 0, 0, 266, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0",
      /* 20714 */ "0, 2158592, 2158592, 2158592, 2158592, 2158592, 2633728, 2158592, 2158592, 2961408, 2158592",
      /* 20725 */ "3022848, 0, 0, 263, 263, 0, 0, 263, 263, 143623, 263, 263, 263, 263, 263, 263, 263, 143623, 263",
      /* 20744 */ "143623, 263, 263, 263, 263, 263, 263, 263, 263, 263, 318, 263, 143623, 263, 263, 263, 263, 263",
      /* 20762 */ "143623, 322, 263, 263, 263, 263, 263, 40960, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263",
      /* 20781 */ "263, 263, 263, 263, 263, 263, 143682, 263, 263, 263, 263, 263, 263, 263, 143682, 263, 143623, 263",
      /* 20799 */ "143682, 45056, 49152, 263, 143623, 263, 143623, 143623, 143623, 263, 263, 143623, 143623, 143623",
      /* 20813 */ "143623, 143623, 143623, 143623, 143623, 263, 263, 263, 263, 263, 263, 143623, 143623, 143623, 263",
      /* 20828 */ "143623, 263, 263, 263, 263, 263, 0, 263, 0, 0, 263, 0, 0, 0, 0, 2072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 20854 */ "0, 1873, 0, 1875, 0, 0, 263, 263, 263, 143623, 263, 143623, 143623, 143623, 143623, 143623, 143623",
      /* 20871 */ "143682, 143682, 143682, 143682, 143682, 143623, 143623, 143623, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0",
      /* 20889 */ "2179696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 329, 0, 317, 0, 0, 0, 155648, 0, 0, 0, 0, 0",
      /* 20917 */ "155648, 155648, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 0, 0, 0, 0, 0, 0, 0, 155648",
      /* 20943 */ "155648, 155648, 0, 0, 2, 2, 0, 94212, 5, 6, 126976, 0, 0, 0, 0, 2100, 401, 401, 401, 401, 2105, 401",
      /* 20965 */ "401, 401, 401, 401, 401, 401, 1453, 401, 0, 0, 0, 0, 0, 0, 1136, 0, 0, 159744, 0, 159744, 159744",
      /* 20986 */ "159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744",
      /* 20998 */ "159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 0",
      /* 21011 */ "159744, 0, 0, 0, 0, 0, 0, 1883, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2473984, 2478080, 2158592",
      /* 21032 */ "2158592, 2158592, 2158592, 2596864, 90632, 0, 0, 0, 159744, 0, 0, 0, 0, 90632, 90632, 90632, 90632",
      /* 21049 */ "90632, 90632, 90632, 159744, 159744, 90632, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 90112",
      /* 21069 */ "2162688, 2428928, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 21080 */ "2162688, 2588672, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 163840, 163840, 163840",
      /* 21091 */ "163840, 163840, 163840, 163840, 163840, 163840, 163840, 0, 163840, 0, 0, 0, 0, 0, 0, 1922, 0, 0",
      /* 21109 */ "1925, 401, 401, 401, 401, 401, 1930, 163840, 163840, 163840, 163840, 163840, 163840, 0, 0, 2, 2, 3",
      /* 21127 */ "94212, 5, 6, 0, 0, 0, 0, 0, 2473984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2596864, 0, 317, 0, 0, 0, 0, 0, 0",
      /* 21154 */ "0, 0, 0, 167936, 0, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936",
      /* 21169 */ "0, 167936, 0, 0, 0, 0, 0, 0, 1998, 521, 521, 521, 521, 2002, 521, 521, 521, 521, 497, 497, 521, 521",
      /* 21191 */ "0, 0, 0, 0, 2370, 0, 0, 0, 167936, 167936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 802816",
      /* 21217 */ "167936, 0, 0, 0, 40960, 167936, 167936, 0, 0, 167936, 0, 167936, 0, 167936, 0, 0, 0, 0, 0, 2527232",
      /* 21237 */ "2695168, 0, 3145728, 0, 0, 0, 0, 0, 0, 2572288, 0, 0, 0, 167936, 167936, 167936, 0, 0, 2, 2, 3",
      /* 21258 */ "94212, 5, 6, 0, 0, 0, 0, 289, 290, 291, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056, 0, 0, 0, 0, 401, 401, 0, 2",
      /* 21286 */ "3, 252, 5, 6, 0, 256, 0, 0, 0, 0, 0, 0, 0, 0, 265, 266, 0, 0, 0, 0, 0, 579, 172032, 172032, 172032",
      /* 21311 */ "172032, 172032, 172032, 172032, 172032, 172032, 172032, 0, 172032, 0, 0, 0, 0, 0, 0, 2074, 0, 0, 0",
      /* 21330 */ "0, 0, 0, 0, 0, 0, 312, 0, 0, 0, 0, 0, 0, 172032, 172032, 172032, 172032, 172032, 172032, 53495",
      /* 21350 */ "53495, 2, 2, 3, 0, 5, 6, 0, 570, 0, 0, 959, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 593, 0, 0, 497",
      /* 21379 */ "1043, 0, 521, 521, 521, 497, 497, 497, 497, 497, 497, 497, 497, 521, 521, 521, 521, 521, 521, 521",
      /* 21399 */ "521, 521, 521, 521, 0, 0, 225280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 609, 0, 0, 1396, 0, 0, 0",
      /* 21426 */ "401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 0, 1089, 0, 0, 91314, 0, 0, 521",
      /* 21447 */ "521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 497, 521, 0, 2410, 0, 0, 0, 1610, 0, 0, 0, 0",
      /* 21470 */ "0, 0, 0, 1617, 0, 0, 0, 0, 0, 0, 2086, 0, 0, 0, 0, 0, 0, 2093, 0, 0, 0, 0, 0, 1524, 0, 0, 0, 0, 521",
      /* 21499 */ "521, 521, 521, 521, 521, 521, 521, 521, 2161, 521, 521, 521, 521, 521, 521, 0, 0, 0, 1919, 0, 0, 0",
      /* 21521 */ "0, 0, 0, 401, 401, 401, 401, 401, 401, 2106, 401, 401, 401, 401, 497, 2145, 497, 497, 497, 497, 497",
      /* 21542 */ "497, 497, 0, 0, 0, 0, 521, 521, 521, 497, 497, 497, 497, 497, 497, 497, 497, 0, 521, 521, 0, 0",
      /* 21564 */ "2189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 655, 0, 0, 0, 401, 401, 401, 0, 2329, 497, 497, 497",
      /* 21590 */ "497, 497, 497, 2335, 497, 497, 497, 0, 0, 0, 855, 0, 0, 858, 521, 521, 521, 521, 521, 521, 0, 1288",
      /* 21612 */ "0, 0, 0, 1294, 0, 0, 0, 0, 521, 521, 521, 2353, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521",
      /* 21634 */ "521, 521, 497, 521, 2409, 0, 2390, 497, 2391, 2392, 497, 497, 497, 497, 497, 497, 521, 521, 521",
      /* 21653 */ "521, 521, 521, 0, 0, 0, 0, 521, 521, 2402, 521, 2403, 2404, 521, 521, 521, 521, 521, 521, 497, 521",
      /* 21674 */ "0, 0, 0, 0, 289, 334, 336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1106, 1040, 0, 0, 0, 0, 0, 497, 2422, 497",
      /* 21700 */ "497, 497, 497, 497, 497, 2428, 497, 497, 497, 521, 2432, 521, 521, 0, 0, 0, 2048, 0, 0, 0, 0, 0, 0",
      /* 21723 */ "0, 0, 0, 0, 278528, 278528, 278528, 278528, 278528, 278528, 278528, 359, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 21744 */ "0, 0, 0, 0, 45056, 49152, 180770, 180770, 180770, 0, 0, 180770, 53495, 53495, 2, 2, 3, 94212, 5, 6",
      /* 21764 */ "0, 0, 0, 0, 320, 0, 303, 365, 367, 0, 0, 0, 320, 0, 45056, 49152, 0, 184320, 521, 521, 521, 497",
      /* 21786 */ "497, 497, 497, 497, 497, 497, 497, 0, 521, 521, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 2054, 0, 0, 0, 0",
      /* 21811 */ "0, 2190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200704, 200704, 200704, 200704, 200704, 200704, 188835",
      /* 21830 */ "188835, 188835, 188835, 188835, 188835, 0, 0, 188835, 188835, 188835, 188835, 188835, 0, 188835",
      /* 21844 */ "188835, 188835, 0, 188835, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 267, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 21870 */ "2646016, 0, 2781184, 0, 0, 188835, 188835, 188835, 188835, 188835, 0, 0, 0, 2, 2, 3, 94212, 5, 6, 0",
      /* 21890 */ "0, 0, 0, 325, 0, 326, 0, 0, 0, 0, 0, 0, 284, 326, 287, 0, 0, 264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 21919 */ "0, 0, 671, 0, 0, 0, 0, 264, 0, 264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 591, 592, 0, 0, 0, 360, 360",
      /* 21947 */ "360, 0, 0, 360, 53495, 53495, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 352, 0, 0, 0, 0, 0, 0, 0, 0, 289, 0",
      /* 21974 */ "0, 0, 0, 0, 0, 0, 0, 0, 665, 521, 521, 521, 497, 497, 497, 497, 497, 497, 497, 497, 0, 521, 521",
      /* 21997 */ "497, 497, 521, 521, 521, 497, 497, 497, 497, 497, 497, 497, 497, 521, 2516, 521, 521, 521, 521, 521",
      /* 22017 */ "521, 521, 0, 1031, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3088384, 0, 0, 0, 1524, 1793, 0, 0",
      /* 22044 */ "0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2357, 521, 521, 521, 521, 521, 521, 1793, 1996, 0",
      /* 22064 */ "0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 807409, 807433, 0, 0, 0, 319",
      /* 22085 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 356, 0, 0, 0, 269, 269, 269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 22116 */ "0, 595, 0, 0, 0, 0, 200704, 200704, 200972, 200704, 200972, 200704, 200973, 200704, 200704, 200972",
      /* 22132 */ "200704, 200704, 200704, 200973, 200704, 200704, 200704, 200704, 200704, 200704, 200704, 200704",
      /* 22144 */ "200704, 200704, 0, 200704, 0, 0, 0, 0, 0, 0, 2191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 294, 295, 0, 0, 0, 0",
      /* 22170 */ "0, 0, 0, 0, 200704, 200972, 200704, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 371, 0, 0, 0, 0, 0, 0",
      /* 22196 */ "0, 0, 0, 0, 0, 0, 2179697, 151552, 2179697, 0, 0, 151552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 22222 */ "371, 371, 2179697, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401, 0, 2158592, 2158592, 2158592",
      /* 22245 */ "2158592, 2158592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2163486, 2442014, 2450206, 2163486, 2163486, 2163486",
      /* 22262 */ "2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2622238, 2163486, 2163486, 2163486, 2163486",
      /* 22273 */ "2687774, 2163486, 2704158, 2163486, 2712350, 2163486, 2163486, 2757406, 2163486, 2777886, 2798366",
      /* 22284 */ "2163486, 2163486, 2835230, 2163486, 2163486, 2884382, 2163545, 2163545, 2757465, 2163545, 2777945",
      /* 22295 */ "2798425, 2163545, 2163545, 2835289, 2163545, 2163545, 2884441, 2163545, 2163545, 2163545, 2163545",
      /* 22306 */ "2163545, 2163545, 2892633, 2163545, 2163545, 2958169, 2163545, 2163545, 2163545, 2163545, 2163545",
      /* 22317 */ "2163545, 2622297, 2163545, 2163545, 2163545, 2163545, 2687833, 2163545, 2704217, 2163545, 2712409",
      /* 22328 */ "2163486, 2429726, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486",
      /* 22339 */ "2163486, 2163486, 2163486, 2581278, 2163486, 2163486, 2163486, 2163486, 2888478, 2163486, 2163486",
      /* 22350 */ "2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 3027742, 2163486, 2163486, 2163486",
      /* 22361 */ "2614046, 2163486, 2163486, 2163486, 2659102, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486",
      /* 22372 */ "2163486, 2163486, 2163486, 2163486, 3068702, 2163486, 2163486, 2163486, 2163486, 2163486, 2786078",
      /* 22383 */ "2810654, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486",
      /* 22394 */ "2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163545, 2163545, 2581337, 2163545, 2163545",
      /* 22405 */ "2163545, 2163545, 2614105, 2163545, 2163545, 2163545, 2659161, 2163545, 2163545, 2163545, 2163545",
      /* 22416 */ "2163545, 2163545, 3068761, 2163545, 2163545, 2163545, 2163545, 2163545, 2163545, 2163545, 2163545",
      /* 22427 */ "2163486, 2163545, 2163545, 2163545, 2163545, 2786137, 2810713, 2163545, 2163545, 2163545, 2163545",
      /* 22438 */ "2163545, 2163545, 2163545, 2163545, 2163545, 2163545, 3081049, 2163545, 2163545, 2163545, 2163545",
      /* 22449 */ "2163545, 2163545, 0, 0, 2163486, 2163486, 2163486, 2474782, 2478878, 2163486, 2163486, 2163486",
      /* 22461 */ "2519838, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2601758, 2626334, 2163486, 2163486",
      /* 22472 */ "2163486, 2695966, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2597662, 2163486, 2163486",
      /* 22483 */ "2163486, 2163486, 2163486, 2163486, 2708254, 2163486, 2163486, 2163486, 2163486, 2163486, 2761502",
      /* 22494 */ "0, 0, 0, 2121728, 0, 0, 0, 0, 2163545, 2163545, 2163545, 2474841, 2478937, 2163545, 2163545",
      /* 22509 */ "2163545, 2163545, 2163545, 2761561, 2163545, 2163545, 2163545, 2855769, 2876249, 2163545, 2163545",
      /* 22520 */ "2163545, 2163545, 2163545, 0, 0, 0, 0, 0, 0, 2486272, 0, 0, 0, 0, 2519897, 2163545, 2163545",
      /* 22537 */ "2163545, 2163545, 2163545, 2163545, 2163545, 2597721, 2163545, 2163545, 2163545, 2163545, 2163545",
      /* 22548 */ "2163545, 2708313, 2163545, 2163545, 2163545, 2163545, 2995033, 3019609, 2163545, 2163545, 2163545",
      /* 22559 */ "3052377, 2163545, 2163545, 2163545, 2163545, 2163545, 2163545, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 580",
      /* 22577 */ "678, 679, 680, 0, 0, 0, 0, 0, 2163545, 2163545, 3158873, 2163545, 2163486, 2163545, 2163545",
      /* 22592 */ "2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163545, 2163545, 2163545, 2163545",
      /* 22603 */ "2163545, 2163545, 0, 0, 0, 0, 0, 0, 0, 0, 2163486, 2163486, 2589470, 2158592, 2158592, 2158592",
      /* 22619 */ "2158592, 2158592, 0, 0, 0, 2163486, 2163486, 2163486, 2163486, 2491166, 2163486, 2163486, 2528030",
      /* 22632 */ "2163486, 3076894, 2163486, 3097374, 2163486, 2163486, 2163486, 3146526, 2163486, 0, 0, 0, 0, 0, 0",
      /* 22647 */ "0, 603, 0, 0, 0, 0, 0, 0, 0, 0, 1309, 0, 0, 0, 0, 0, 0, 0, 2163545, 2163545, 2888537, 2163545",
      /* 22669 */ "2163545, 2163545, 2163545, 2163545, 2163545, 2163545, 2163545, 2163545, 3027801, 2163545, 2163545",
      /* 22680 */ "3076953, 2163545, 3097433, 2163545, 2163545, 2163545, 3146585, 2163545, 2437918, 2437977, 2163545",
      /* 22691 */ "2163486, 2163486, 2163486, 2163486, 2163545, 2163545, 2163486, 2802462, 2163545, 2802521, 2163545",
      /* 22702 */ "2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163545, 2163545, 2163545",
      /* 22713 */ "2163545, 2163545, 2499417, 2540377, 2544473, 2163545, 2163545, 2593625, 0, 2163486, 2163486",
      /* 22724 */ "2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2548510, 2163486, 2163486, 2163486, 2163486",
      /* 22735 */ "2634526, 2163486, 2163486, 2163486, 2855710, 2876190, 2163486, 2163486, 2163486, 2163486, 2163486",
      /* 22746 */ "2163486, 2163486, 2163486, 2163486, 2994974, 3019550, 2163486, 2716446, 2736926, 2163486, 2163486",
      /* 22757 */ "2753310, 2814750, 2818846, 2163486, 2163486, 2908958, 2163486, 2163486, 2954014, 2163486, 2962206",
      /* 22768 */ "2163486, 2163486, 3023646, 3048222, 2163486, 2163486, 2163486, 2163486, 3175198, 0, 0, 0, 0",
      /* 22781 */ "2163545, 2163545, 2163545, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486",
      /* 22792 */ "0, 2163545, 2163545, 2163545, 2753369, 2814809, 2818905, 2163545, 2163545, 2909017, 2163545",
      /* 22803 */ "2163545, 2954073, 2163545, 2962265, 2163545, 2163545, 3023705, 3048281, 2163545, 2163545, 2163545",
      /* 22814 */ "2163545, 3175257, 2163545, 2163486, 2163486, 2163486, 2163545, 2163545, 2163545, 0, 0, 0, 0, 0, 0",
      /* 22829 */ "0, 0, 0, 0, 0, 2818048, 0, 2879488, 2540318, 2544414, 2163486, 2163486, 2593566, 2163486, 2163486",
      /* 22844 */ "2163486, 2163486, 2163486, 2163486, 2892574, 2163486, 2163486, 2958110, 2163486, 2163486, 2163486",
      /* 22855 */ "3052318, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 3158814, 2163486",
      /* 22866 */ "0, 0, 2163545, 2163545, 2163545, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486",
      /* 22878 */ "2163486, 2163545, 2163545, 2589529, 2163545, 2163545, 2163545, 2163545, 2163545, 2163545, 0",
      /* 22889 */ "2158592, 2158592, 2158592, 0, 2421534, 2163486, 2163486, 2482974, 2163486, 2163486, 2163486",
      /* 22900 */ "2585374, 2163486, 2163486, 2683678, 2741022, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486",
      /* 22911 */ "2163486, 2163486, 2163486, 2163486, 3121950, 2421593, 2163545, 2163545, 2483033, 2163545, 2163545",
      /* 22922 */ "2163545, 2585433, 2163545, 2163545, 2683737, 2741081, 2163545, 2163545, 2163545, 2163545, 2163545",
      /* 22933 */ "2163545, 2163545, 2163545, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2163545, 2163545, 3122009, 3109721",
      /* 22950 */ "2163486, 2163486, 2163545, 2163545, 0, 2494464, 0, 0, 0, 2826240, 0, 2973696, 2494464, 2158592",
      /* 22964 */ "2744320, 2973696, 2744320, 0, 2158592, 0, 2163486, 2446110, 2454302, 2495262, 2163486, 2163486",
      /* 22976 */ "2163486, 2163486, 2163486, 3080990, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486",
      /* 22987 */ "2163486, 0, 0, 2163486, 856, 2163545, 2163545, 2163545, 2163545, 2163545, 2163545, 2163545, 2163545",
      /* 23000 */ "0, 2502656, 0, 0, 0, 0, 0, 0, 2650910, 2745118, 2827038, 2929438, 2163486, 2974494, 2163486",
      /* 23015 */ "2163486, 2163486, 3101470, 2163545, 2446169, 2454361, 2495321, 2163545, 2163545, 2163545, 2163545",
      /* 23026 */ "2601817, 2626393, 2163545, 2163545, 2163545, 2696025, 2163545, 2163545, 2163545, 2163545, 2163545",
      /* 23037 */ "2163545, 2163545, 3093337, 0, 0, 0, 0, 0, 2850816, 0, 0, 2163545, 2163545, 2650969, 2745177",
      /* 23052 */ "2827097, 2929497, 2163545, 2974553, 2163545, 2163545, 2163545, 3101529, 2163486, 2163545, 0, 0, 0",
      /* 23065 */ "0, 401, 401, 2230, 401, 401, 401, 401, 401, 0, 0, 0, 0, 376, 363, 363, 363, 363, 363, 363, 2163486",
      /* 23086 */ "2552606, 2560798, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 3093278",
      /* 23097 */ "2163545, 2552665, 2560857, 2163545, 2163486, 2163486, 2163486, 2163545, 2163545, 2163545, 2457600",
      /* 23108 */ "0, 0, 0, 0, 0, 0, 0, 2895872, 2163545, 2465792, 0, 2531328, 2985984, 0, 0, 0, 0, 2163486, 2163486",
      /* 23127 */ "2605854, 2163486, 2831134, 2163486, 2163486, 2163486, 0, 0, 0, 855, 0, 0, 858, 2163545, 2442073",
      /* 23142 */ "2450265, 2163545, 2163545, 2163545, 2163545, 2163545, 2548569, 2163545, 2163545, 2163545, 2163545",
      /* 23153 */ "2634585, 2163545, 2163545, 2716505, 2736985, 2163545, 2163486, 2986782, 2163545, 2163545, 2605913",
      /* 23164 */ "2163545, 2831193, 2163545, 2163545, 2163545, 2986841, 2523136, 0, 0, 0, 0, 0, 0, 2310, 0, 0, 0, 0",
      /* 23182 */ "0, 0, 0, 0, 0, 310, 311, 0, 0, 0, 0, 0, 2425630, 2163486, 2163486, 2163486, 2163486, 2982686",
      /* 23200 */ "2425689, 2163545, 2163545, 2163545, 2163545, 2982745, 2535424, 0, 0, 2912256, 2163486, 2655006",
      /* 23212 */ "2933534, 2163486, 2163545, 2655065, 2933593, 2163545, 2637824, 2699264, 2556702, 2163486, 2556761",
      /* 23223 */ "2163545, 2163486, 2163545, 2163486, 2163545, 2945822, 2945881, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 269, 0",
      /* 23242 */ "0, 0, 0, 0, 0, 317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 0, 0, 217088, 217088, 0, 0, 0, 0, 0, 0",
      /* 23270 */ "0, 0, 0, 283, 283, 0, 327, 0, 0, 0, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088",
      /* 23288 */ "217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 0, 217088, 0, 0, 0, 0, 0, 0, 0",
      /* 23305 */ "217088, 217088, 217088, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 401, 2229, 401, 401, 401, 2232, 401",
      /* 23327 */ "2234, 2235, 0, 2236, 0, 0, 266, 0, 0, 0, 2473984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2596864, 0, 57344, 0",
      /* 23351 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401, 401, 401, 2162688, 3076096, 2162688, 3096576, 2162688",
      /* 23372 */ "2162688, 2162688, 3145728, 2162688, 0, 855, 0, 0, 0, 855, 0, 0, 0, 0, 2112, 0, 0, 0, 2116, 0, 0",
      /* 23393 */ "401, 401, 401, 401, 401, 401, 716, 401, 401, 401, 401, 726, 401, 401, 731, 401, 858, 0, 0, 0, 858",
      /* 23414 */ "0, 2162688, 2162688, 2162688, 2162688, 2490368, 2162688, 2162688, 2527232, 2162688, 2162688",
      /* 23425 */ "2162688, 2162688, 2162688, 2162688, 0, 2, 6, 0, 0, 0, 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 23450 */ "0, 317, 317, 204800, 0, 2162688, 2162688, 3022848, 3047424, 2162688, 2162688, 2162688, 2162688",
      /* 23463 */ "3174400, 855, 0, 858, 0, 2162688, 2162688, 2162688, 0, 0, 0, 1200, 0, 0, 1203, 2162688, 2441216",
      /* 23480 */ "2449408, 2162688, 2162688, 2162688, 0, 0, 0, 855, 0, 90112, 858, 2162688, 2441216, 2449408, 2162688",
      /* 23495 */ "2162688, 2162688, 0, 0, 0, 1201, 0, 0, 1204, 2162688, 2441216, 2449408, 2162688, 2162688, 2162688",
      /* 23510 */ "2162688, 0, 0, 2163543, 0, 2162688, 2163546, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 23523 */ "0, 2, 0, 176128, 294912, 0, 0, 0, 0, 0, 221604, 221604, 221604, 221604, 221604, 221604, 221604",
      /* 23540 */ "221604, 221604, 221604, 0, 221604, 0, 0, 0, 0, 0, 0, 53495, 53495, 2, 2, 3, 94212, 5, 6, 0, 0",
      /* 23561 */ "221728, 221728, 221728, 221604, 221604, 221742, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 497, 497",
      /* 23581 */ "497, 2453, 497, 497, 497, 497, 497, 497, 521, 521, 497, 497, 521, 521, 521, 497, 497, 497, 497, 497",
      /* 23601 */ "497, 497, 1598, 521, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 23615 */ "2162688, 2162688, 2162688, 237568, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2, 6, 0",
      /* 23629 */ "0, 0, 0, 936, 940, 0, 0, 2, 3, 94212, 5, 6, 0, 0, 249856, 0, 0, 0, 0, 249856, 0, 0, 0, 0, 497, 497",
      /* 23655 */ "2452, 497, 497, 497, 497, 497, 497, 497, 521, 521, 497, 497, 521, 521, 521, 497, 497, 1594, 497",
      /* 23674 */ "497, 1596, 497, 497, 521, 497, 521, 497, 521, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 913408, 0, 0, 0, 0",
      /* 23699 */ "250277, 250277, 250277, 250277, 250277, 250277, 249856, 249856, 250277, 250277, 250277, 250277",
      /* 23711 */ "250277, 249856, 250277, 250277, 250277, 249856, 250277, 249856, 249856, 249856, 249856, 249856, 0",
      /* 23724 */ "249856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 595, 0, 0, 0, 250277, 250277, 250277, 0, 0, 2",
      /* 23750 */ "2, 3, 94212, 5, 6, 0, 0, 0, 0, 497, 2451, 497, 497, 497, 2455, 497, 497, 497, 497, 521, 2461",
      /* 23771 */ "2158592, 114688, 0, 241664, 0, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 275, 275, 0, 0, 0, 0, 0, 0",
      /* 23795 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 23806 */ "241664, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2, 6, 0, 0, 0, 265, 0, 0, 0, 0, 0",
      /* 23825 */ "0, 0, 0, 0, 0, 0, 0, 0, 2715648, 0, 0, 0, 2, 3, 94212, 5, 6, 0, 0, 0, 258048, 0, 0, 0, 0, 258048, 0",
      /* 23852 */ "0, 0, 0, 2202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1639, 0, 0, 0, 0, 258470, 258470, 258470, 258470",
      /* 23876 */ "258470, 258470, 258470, 258470, 258470, 258470, 0, 258470, 0, 0, 0, 258048, 0, 0, 0, 258470, 258470",
      /* 23893 */ "258470, 0, 0, 2, 2, 3, 94212, 0, 6, 0, 0, 0, 0, 600, 0, 602, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1310, 0, 0",
      /* 23921 */ "0, 0, 0, 0, 274432, 0, 0, 0, 0, 0, 0, 2105344, 265, 266, 196608, 0, 0, 0, 0, 0, 0, 962, 0, 0, 0, 0",
      /* 23947 */ "0, 0, 0, 0, 970, 0, 2, 3, 94212, 2195709, 6, 0, 0, 0, 0, 257, 0, 0, 0, 0, 257, 0, 317, 0, 0, 0, 0",
      /* 23974 */ "0, 0, 0, 0, 0, 0, 270336, 0, 0, 0, 0, 0, 1672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2312, 2313, 0, 0, 0, 0",
      /* 24003 */ "270336, 270336, 270336, 0, 0, 270336, 0, 0, 2, 2, 3, 94212, 2195709, 6, 0, 0, 0, 0, 616, 0, 0, 0, 0",
      /* 24026 */ "0, 0, 623, 317, 317, 317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 998, 0, 0, 2162688, 2162688",
      /* 24051 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 245760, 2162688",
      /* 24062 */ "2162688, 2162688, 2162688, 2162688, 2162688, 0, 249, 4297273, 0, 0, 0, 0, 0, 0, 0, 692, 0, 0, 0, 0",
      /* 24082 */ "699, 700, 0, 702, 278528, 278528, 278528, 0, 0, 278528, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 630",
      /* 24105 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2079, 0, 0, 0, 0, 53495, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 24135 */ "0, 0, 497, 0, 519, 519, 519, 497, 1524, 91314, 0, 1524, 521, 521, 521, 521, 521, 521, 521, 521, 521",
      /* 24156 */ "521, 521, 521, 521, 521, 2362, 521, 0, 1996, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521",
      /* 24177 */ "521, 521, 521, 909, 521, 497, 497, 0, 0, 0, 0, 1384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 355, 0, 0",
      /* 24204 */ "0, 0, 1378, 0, 0, 0, 0, 0, 1674, 0, 0, 0, 0, 0, 0, 0, 0, 545, 545, 545, 545, 545, 545, 545, 545, 0",
      /* 24230 */ "0, 1049, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401, 401, 401, 401, 401, 401, 401, 401, 401, 522, 519",
      /* 24254 */ "519, 519, 519, 519, 519, 519, 519, 522, 522, 522, 522, 522, 522, 522, 519, 519, 522, 53495, 53495",
      /* 24273 */ "2, 2, 3, 94212, 5, 6, 0, 0, 53496, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 684, 0, 0, 0, 0",
      /* 24302 */ "0, 286720, 286720, 286720, 286720, 286720, 286720, 0, 0, 286720, 286720, 286720, 286720, 286720, 0",
      /* 24317 */ "286720, 286720, 286720, 0, 286720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 653, 0, 0, 0, 0, 286720, 286720",
      /* 24340 */ "286720, 286720, 286720, 286720, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 646, 0, 0, 649, 0, 0, 0, 0",
      /* 24364 */ "0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 131072, 2162688, 0, 303104, 2162688, 2162688, 2162688",
      /* 24382 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3080192",
      /* 24393 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 3084288, 0, 2940928",
      /* 24406 */ "3129344, 2416640, 229376, 0, 0, 0, 0, 0, 0, 2723840, 0, 0, 0, 0, 0, 1688, 0, 0, 401, 401, 401, 401",
      /* 24428 */ "401, 401, 401, 401, 401, 401, 1085, 401, 1087, 0, 0, 0, 0, 249, 3, 94212, 5, 254, 0, 0, 0, 0, 0",
      /* 24451 */ "258, 0, 0, 0, 0, 0, 0, 57344, 0, 0, 0, 28672, 0, 0, 2658304, 0, 2785280, 0, 260, 0, 0, 0, 0, 0, 0",
      /* 24476 */ "0, 0, 0, 0, 0, 0, 0, 0, 401, 2420, 0, 317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290816, 0, 0, 0",
      /* 24504 */ "40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 670, 0, 0, 0, 0, 290816, 290816, 290816, 290816, 290816",
      /* 24526 */ "290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 0, 290816",
      /* 24539 */ "0, 0, 0, 0, 0, 0, 0, 290816, 290816, 290816, 0, 0, 249, 249, 3, 94212, 5, 4297273, 0, 0, 0, 0, 662",
      /* 24562 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1026, 0, 0, 0, 0, 0, 571, 0, 0, 0, 0, 0, 2105344, 265, 266, 0, 0",
      /* 24590 */ "0, 0, 0, 0, 0, 3067904, 0, 0, 0, 0, 0, 0, 0, 2179696, 0, 250, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0",
      /* 24617 */ "0, 0, 0, 737, 0, 0, 0, 0, 737, 0, 261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 594, 0, 545, 545",
      /* 24646 */ "545, 0, 0, 545, 0, 0, 4264504, 250, 3, 94212, 5, 6, 0, 0, 0, 0, 663, 0, 0, 0, 0, 0, 0, 578, 663, 0",
      /* 24672 */ "672, 673, 0, 0, 0, 572, 0, 0, 0, 2105344, 265, 266, 0, 0, 0, 0, 0, 0, 275, 276, 277, 278, 279, 280",
      /* 24696 */ "281, 0, 0, 0, 915, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 24710 */ "2162688, 2162688, 2162688, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 935, 6, 0, 0",
      /* 24725 */ "299008, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 270, 271, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 24754 */ "0, 0, 0, 0, 0, 758, 0, 0, 0, 317, 0, 0, 0, 0, 0, 0, 0, 271, 0, 0, 0, 0, 0, 0, 287, 0, 0, 0, 0, 0, 0",
      /* 24785 */ "0, 45056, 49152, 0, 0, 0, 270, 0, 271, 0, 270, 270, 271, 0, 0, 0, 0, 0, 0, 333, 356, 0, 0, 0, 0, 0",
      /* 24811 */ "0, 45056, 49152, 0, 0, 0, 362, 364, 271, 0, 0, 0, 0, 271, 0, 369, 0, 45056, 49152, 446, 446, 446",
      /* 24833 */ "465, 446, 465, 465, 465, 465, 465, 498, 517, 498, 498, 498, 498, 523, 498, 498, 498, 498, 542, 542",
      /* 24853 */ "542, 542, 547, 547, 547, 547, 547, 547, 547, 550, 550, 559, 53495, 53495, 2, 2, 3, 94212, 5, 6, 0",
      /* 24874 */ "0, 0, 0, 582, 583, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 654, 0, 0, 0, 0, 0, 0, 629, 0, 0, 0, 0, 0, 0",
      /* 24905 */ "636, 0, 0, 0, 0, 0, 0, 1005, 0, 1007, 0, 0, 0, 0, 0, 0, 0, 1037, 0, 0, 0, 0, 0, 0, 0, 0, 1073152, 0",
      /* 24933 */ "0, 0, 1640, 0, 0, 0, 0, 0, 0, 661, 0, 0, 0, 0, 667, 0, 0, 0, 0, 0, 0, 0, 948, 0, 0, 0, 0, 0, 0, 0",
      /* 24963 */ "0, 1675, 0, 1677, 1678, 0, 0, 0, 0, 0, 0, 675, 0, 0, 0, 0, 579, 0, 0, 0, 0, 0, 0, 0, 0, 604, 0, 0",
      /* 24991 */ "0, 0, 0, 0, 0, 0, 0, 0, 688, 0, 0, 691, 0, 0, 0, 0, 0, 698, 0, 0, 0, 0, 0, 1715, 0, 0, 0, 0, 0, 0",
      /* 25021 */ "0, 966656, 0, 0, 401, 401, 705, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 728, 401, 401",
      /* 25041 */ "401, 401, 401, 1701, 401, 1702, 1703, 401, 401, 401, 401, 401, 401, 0, 0, 401, 0, 497, 497, 497",
      /* 25061 */ "497, 2386, 497, 497, 497, 401, 0, 0, 0, 0, 0, 0, 735, 0, 0, 0, 0, 0, 0, 601, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 25089 */ "0, 0, 1009, 0, 1011, 0, 0, 0, 401, 0, 629, 0, 0, 0, 661, 629, 0, 0, 0, 0, 0, 0, 0, 0, 620, 621, 622",
      /* 25116 */ "0, 317, 317, 317, 0, 497, 497, 802, 497, 497, 497, 497, 497, 497, 497, 828, 497, 833, 497, 836, 497",
      /* 25137 */ "0, 0, 521, 521, 1271, 497, 497, 497, 497, 497, 497, 497, 497, 521, 521, 521, 521, 521, 521, 2440",
      /* 25157 */ "521, 0, 0, 0, 2444, 0, 0, 0, 0, 0, 623, 602, 401, 401, 780, 401, 782, 401, 401, 730, 401, 497, 848",
      /* 25180 */ "497, 497, 0, 766, 497, 0, 521, 521, 521, 862, 521, 521, 521, 521, 497, 497, 521, 521, 0, 0, 2368, 0",
      /* 25202 */ "0, 0, 2371, 0, 0, 0, 521, 917, 521, 497, 497, 802, 497, 923, 836, 497, 497, 0, 521, 521, 497, 497",
      /* 25224 */ "521, 521, 521, 497, 1593, 497, 651761, 497, 497, 497, 497, 521, 2581, 2582, 497, 521, 0, 0, 0, 0, 0",
      /* 25245 */ "0, 0, 0, 0, 0, 159744, 0, 0, 0, 0, 0, 862, 521, 931, 896, 521, 521, 53495, 2, 6, 0, 0, 0, 0, 937",
      /* 25270 */ "941, 0, 0, 0, 0, 2375, 0, 2376, 0, 0, 0, 2380, 0, 0, 0, 0, 401, 401, 401, 1404, 401, 401, 401, 401",
      /* 25294 */ "401, 401, 401, 401, 401, 1073, 401, 401, 401, 401, 401, 401, 0, 972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 25318 */ "0, 0, 0, 317, 317, 317, 0, 0, 0, 1017, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 948, 0, 0, 401, 1126",
      /* 25346 */ "401, 401, 401, 1130, 0, 1110, 0, 0, 1017, 0, 0, 1136, 497, 497, 497, 497, 497, 497, 1966, 497, 497",
      /* 25367 */ "497, 497, 497, 497, 497, 497, 497, 0, 0, 1994, 0, 0, 0, 0, 0, 1331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 25394 */ "0, 0, 0, 684, 0, 0, 0, 1348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 954, 0, 0, 1361, 0, 0, 0, 0, 0",
      /* 25424 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 626, 0, 0, 0, 1436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401, 401, 401, 401",
      /* 25452 */ "401, 1695, 401, 401, 401, 401, 1448, 401, 401, 401, 1452, 401, 401, 0, 0, 0, 0, 0, 1458, 1136, 497",
      /* 25473 */ "497, 497, 497, 1510, 497, 497, 497, 497, 1514, 497, 497, 497, 497, 1519, 1521, 1524, 91314, 1526",
      /* 25491 */ "1524, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1540, 521, 521, 1589, 497, 1590, 521",
      /* 25510 */ "1591, 497, 497, 497, 497, 1595, 497, 497, 497, 521, 2536, 521, 521, 521, 521, 521, 521, 521, 0, 0",
      /* 25530 */ "0, 0, 0, 0, 0, 0, 0, 0, 1864, 521, 521, 521, 1602, 521, 521, 521, 0, 1606, 0, 0, 0, 0, 0, 1608, 0",
      /* 25555 */ "0, 0, 0, 2450, 497, 497, 497, 497, 497, 497, 497, 497, 497, 2460, 521, 0, 2524, 0, 0, 0, 0, 0, 0",
      /* 25578 */ "497, 2530, 497, 497, 497, 497, 497, 497, 1754, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1468",
      /* 25597 */ "497, 497, 497, 497, 497, 497, 0, 1634, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 701, 0, 401, 401",
      /* 25623 */ "401, 401, 1700, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 1710, 1711, 0, 0, 1713, 0, 0, 0",
      /* 25644 */ "0, 0, 1711, 0, 0, 0, 0, 0, 1723, 0, 0, 0, 401, 401, 1728, 401, 401, 401, 401, 401, 401, 401, 401, 0",
      /* 25668 */ "0, 1953, 497, 497, 497, 497, 497, 497, 497, 497, 2396, 497, 521, 521, 521, 521, 521, 521, 0, 0, 497",
      /* 25689 */ "497, 497, 497, 1740, 497, 1742, 497, 497, 497, 1745, 497, 497, 497, 0, 0, 0, 855, 91314, 1136, 858",
      /* 25709 */ "521, 521, 521, 521, 521, 521, 0, 1289, 0, 0, 0, 1295, 0, 0, 0, 0, 0, 0, 0, 1524, 0, 0, 0, 0, 521",
      /* 25734 */ "521, 521, 521, 1802, 521, 1804, 521, 497, 497, 497, 521, 521, 521, 0, 0, 0, 2299, 0, 0, 0, 0, 0, 0",
      /* 25757 */ "1637, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1339, 0, 0, 0, 0, 0, 0, 521, 521, 1807, 521, 521, 521, 521, 521",
      /* 25782 */ "521, 521, 521, 521, 521, 521, 521, 521, 521, 1266, 497, 521, 521, 1821, 521, 521, 521, 521, 521",
      /* 25801 */ "521, 521, 521, 521, 521, 521, 521, 521, 521, 1552, 521, 1832, 521, 521, 521, 521, 521, 521, 521",
      /* 25820 */ "521, 521, 521, 521, 521, 521, 521, 521, 521, 497, 1856, 521, 521, 521, 521, 1606, 0, 1608, 0, 0",
      /* 25840 */ "1860, 0, 0, 0, 0, 0, 0, 1021, 0, 0, 0, 1025, 0, 0, 0, 0, 0, 0, 1031, 1378, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 25868 */ "266, 266, 266, 266, 266, 266, 266, 266, 0, 1866, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1876, 0, 0, 0",
      /* 25894 */ "0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2221, 0, 0, 0, 0, 0, 0, 1880, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 25924 */ "0, 0, 0, 0, 682, 0, 0, 0, 497, 497, 2251, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497",
      /* 25946 */ "497, 497, 497, 1503, 497, 2263, 497, 497, 497, 497, 521, 521, 521, 521, 521, 521, 521, 521, 2274",
      /* 25965 */ "521, 521, 521, 521, 521, 521, 1824, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2030, 521",
      /* 25984 */ "521, 521, 521, 521, 0, 0, 2449, 0, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 521, 521, 521",
      /* 26005 */ "521, 521, 521, 1836, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2408, 521, 497, 521, 0, 0, 0",
      /* 26026 */ "0, 0, 272, 273, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1041, 0, 0, 0, 1045, 0, 0, 0, 0, 363, 0, 0, 0, 0",
      /* 26055 */ "0, 0, 0, 0, 0, 0, 45056, 49152, 0, 0, 376, 0, 40960, 0, 0, 376, 0, 0, 0, 0, 0, 0, 401, 401, 401",
      /* 26080 */ "401, 0, 497, 497, 2248, 497, 497, 497, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363",
      /* 26100 */ "363, 363, 473, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 497, 363, 497, 497, 497, 497, 0, 0",
      /* 26121 */ "497, 0, 521, 521, 521, 521, 521, 521, 521, 877, 1382, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 26147 */ "657, 1505, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 26170 */ "0, 1907, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 983, 0, 317, 0, 1996, 0, 0, 0, 0, 521, 521, 2000",
      /* 26197 */ "2001, 521, 521, 521, 521, 521, 521, 247, 2, 6, 0, 0, 0, 0, 0, 0, 0, 666, 0, 0, 669, 0, 0, 0, 0, 0",
      /* 26223 */ "0, 497, 497, 497, 497, 2482, 497, 2484, 497, 2486, 497, 521, 521, 521, 521, 2492, 521, 2494, 521",
      /* 26242 */ "2496, 521, 0, 0, 0, 0, 0, 0, 0, 0, 497, 497, 497, 2531, 497, 2532, 497, 0, 280, 377, 378, 40960",
      /* 26264 */ "378, 385, 377, 378, 385, 275, 385, 0, 385, 403, 403, 403, 403, 403, 424, 424, 424, 439, 442, 447",
      /* 26284 */ "447, 460, 447, 447, 447, 447, 447, 447, 447, 447, 447, 447, 447, 447, 447, 447, 474, 447, 447, 447",
      /* 26304 */ "447, 447, 447, 447, 447, 447, 447, 447, 499, 447, 499, 499, 499, 499, 524, 499, 499, 499, 499, 499",
      /* 26324 */ "499, 499, 499, 524, 524, 524, 524, 524, 524, 524, 552, 552, 561, 53495, 53495, 2, 2, 3, 94212, 5, 6",
      /* 26345 */ "0, 0, 658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 685, 0, 0, 521, 521, 521, 497, 497, 497",
      /* 26372 */ "497, 497, 837, 497, 497, 0, 521, 521, 521, 521, 521, 521, 2011, 521, 521, 521, 2014, 2015, 521, 521",
      /* 26392 */ "521, 521, 521, 521, 521, 1825, 521, 521, 521, 521, 521, 521, 521, 521, 1580, 521, 521, 521, 521",
      /* 26411 */ "1584, 521, 521, 317, 0, 0, 0, 0, 0, 990, 953, 0, 0, 0, 0, 0, 0, 0, 0, 665, 1024, 0, 0, 0, 0, 0, 0",
      /* 26438 */ "0, 0, 0, 1050, 0, 0, 0, 0, 0, 0, 0, 0, 1059, 0, 401, 1062, 0, 0, 1092, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 26467 */ "0, 0, 0, 1012, 0, 0, 0, 0, 1092, 0, 0, 0, 0, 0, 0, 401, 401, 401, 401, 401, 401, 401, 2107, 401",
      /* 26491 */ "401, 401, 497, 497, 497, 497, 1147, 497, 1152, 497, 497, 497, 497, 497, 1158, 497, 497, 497, 0, 0",
      /* 26511 */ "0, 855, 91314, 1136, 858, 521, 521, 521, 521, 521, 1212, 1215, 521, 1220, 521, 521, 521, 521, 521",
      /* 26530 */ "1226, 521, 521, 521, 521, 521, 521, 521, 0, 0, 1292, 0, 0, 0, 0, 0, 1298, 0, 0, 1303, 0, 0, 0, 0, 0",
      /* 26555 */ "0, 0, 0, 0, 0, 0, 0, 0, 1028, 0, 0, 1397, 0, 0, 1400, 401, 401, 401, 401, 401, 401, 1407, 401, 401",
      /* 26579 */ "401, 401, 401, 401, 401, 1935, 401, 401, 401, 401, 401, 0, 0, 0, 0, 1133, 1092, 0, 0, 1136, 1137",
      /* 26600 */ "1139, 521, 1542, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1550, 521, 521, 521, 497, 497",
      /* 26619 */ "521, 53495, 53815, 2, 2, 3, 94212, 5, 6, 0, 0, 497, 497, 1776, 497, 497, 497, 497, 497, 497, 497",
      /* 26640 */ "497, 497, 497, 497, 0, 0, 0, 0, 521, 521, 521, 0, 0, 0, 2111, 0, 0, 0, 2115, 0, 2117, 0, 401, 401",
      /* 26664 */ "401, 2120, 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 740, 0, 745, 0, 748, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0",
      /* 26692 */ "0, 0, 0, 401, 401, 1064, 401, 401, 401, 401, 497, 497, 497, 2137, 497, 497, 497, 497, 497, 497, 497",
      /* 26713 */ "497, 497, 497, 497, 497, 521, 521, 521, 521, 2363, 521, 521, 521, 497, 497, 521, 521, 0, 0, 0, 0, 0",
      /* 26735 */ "0, 0, 0, 666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 497, 497, 497, 2481, 497, 497, 497, 497, 497, 497, 521",
      /* 26759 */ "521, 521, 2491, 521, 497, 497, 497, 521, 521, 521, 0, 0, 2298, 0, 0, 0, 569344, 0, 0, 0, 0, 1091, 0",
      /* 26782 */ "0, 0, 0, 401, 401, 401, 401, 401, 401, 401, 401, 0, 409600, 0, 0, 497, 497, 497, 2572, 521, 521",
      /* 26803 */ "521, 2574, 0, 0, 497, 497, 521, 521, 497, 521, 497, 497, 497, 521, 521, 521, 0, 2297, 0, 0, 0, 0, 0",
      /* 26826 */ "0, 0, 338, 293, 0, 0, 0, 0, 0, 0, 0, 366, 308, 0, 0, 0, 0, 0, 45056, 49152, 0, 0, 0, 283, 351, 0, 0",
      /* 26853 */ "283, 0, 0, 0, 0, 0, 0, 0, 0, 694, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327, 0, 40960, 0, 0, 327, 0, 0, 387, 0",
      /* 26882 */ "392, 400, 404, 404, 404, 404, 404, 425, 425, 425, 425, 443, 448, 448, 448, 448, 448, 448, 448, 466",
      /* 26902 */ "448, 448, 448, 448, 448, 448, 404, 448, 448, 448, 448, 466, 448, 466, 466, 466, 466, 466, 500, 466",
      /* 26922 */ "500, 500, 500, 500, 525, 500, 500, 500, 500, 500, 500, 500, 500, 525, 525, 525, 525, 525, 525, 525",
      /* 26942 */ "500, 500, 525, 53495, 53495, 2, 2, 3, 94212, 5, 6, 0, 0, 879, 521, 521, 521, 521, 521, 521, 521",
      /* 26963 */ "521, 521, 521, 521, 521, 497, 497, 0, 0, 521, 521, 521, 497, 497, 497, 1165, 497, 497, 497, 497",
      /* 26983 */ "521, 521, 521, 521, 521, 521, 2037, 497, 521, 521, 497, 497, 497, 497, 521, 521, 521, 521, 521, 521",
      /* 27003 */ "2158, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1549, 521, 521, 521, 521, 521, 0, 0, 521",
      /* 27023 */ "521, 521, 497, 497, 497, 819, 497, 497, 497, 497, 0, 521, 521, 521, 521, 521, 521, 2405, 521, 521",
      /* 27043 */ "521, 521, 521, 497, 521, 0, 0, 0, 0, 776, 0, 0, 401, 401, 705, 401, 401, 783, 728, 401, 401, 401",
      /* 27065 */ "401, 401, 1040384, 0, 0, 1954, 497, 497, 497, 497, 1958, 497, 497, 497, 497, 497, 497, 1766, 497",
      /* 27084 */ "497, 497, 497, 497, 497, 497, 497, 497, 1187, 497, 497, 497, 497, 497, 497, 521, 879, 521, 521, 521",
      /* 27104 */ "521, 53495, 2, 6, 0, 0, 0, 0, 0, 0, 0, 1022, 666, 0, 0, 0, 0, 0, 0, 973, 0, 958, 0, 0, 0, 0, 0, 963",
      /* 27132 */ "0, 965, 0, 0, 967, 968, 0, 0, 0, 0, 960, 0, 0, 0, 0, 0, 0, 966, 0, 0, 969, 0, 317, 0, 0, 987, 0, 0",
      /* 27160 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 953, 0, 0, 0, 401, 401, 1079, 401, 401, 1081, 401, 401, 401, 401, 401",
      /* 27185 */ "401, 401, 1088, 0, 0, 0, 0, 975, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 27215 */ "0, 0, 0, 0, 300, 1101, 0, 1103, 0, 968, 0, 0, 0, 0, 0, 0, 1107, 967, 0, 0, 0, 0, 0, 1869, 0, 0, 0",
      /* 27242 */ "0, 0, 0, 0, 0, 0, 0, 2379, 0, 0, 0, 0, 0, 401, 401, 401, 1127, 401, 401, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 27269 */ "1136, 1138, 497, 0, 0, 1269, 521, 521, 497, 497, 497, 497, 1276, 497, 497, 1279, 521, 521, 521, 521",
      /* 27289 */ "1823, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1816, 521, 521, 521, 0, 0, 0",
      /* 27309 */ "1364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 982, 0, 0, 317, 0, 0, 497, 497, 497, 497, 497, 1741, 497",
      /* 27335 */ "497, 497, 497, 497, 497, 497, 497, 1467, 497, 497, 497, 497, 497, 497, 497, 0, 0, 0, 1524, 0, 0, 0",
      /* 27357 */ "0, 521, 521, 521, 521, 521, 1803, 521, 521, 521, 521, 521, 521, 53495, 2, 6, 0, 0, 0, 0, 0, 0, 0",
      /* 27380 */ "292, 0, 0, 0, 0, 0, 0, 0, 0, 1650, 0, 0, 0, 0, 0, 0, 0, 1845, 521, 521, 521, 497, 521, 521, 497",
      /* 27405 */ "497, 497, 497, 497, 497, 497, 521, 521, 521, 521, 521, 521, 53495, 2, 6, 0, 0, 0, 0, 938, 942, 0, 0",
      /* 27428 */ "1996, 0, 0, 0, 0, 521, 1999, 521, 521, 521, 521, 521, 521, 521, 521, 905, 521, 521, 521, 521, 497",
      /* 27449 */ "497, 0, 0, 0, 2057, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1060, 401, 401, 521, 2364, 521, 521, 497",
      /* 27475 */ "497, 521, 521, 0, 0, 0, 0, 0, 0, 0, 0, 949, 950, 951, 0, 0, 0, 0, 0, 2462, 521, 521, 521, 521, 521",
      /* 27500 */ "521, 521, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1300, 0, 497, 497, 497, 497, 497, 2483, 497, 497, 497, 497",
      /* 27523 */ "521, 521, 521, 521, 521, 521, 521, 521, 521, 0, 2541, 0, 0, 2544, 2493, 521, 521, 521, 521, 0, 0, 0",
      /* 27545 */ "0, 0, 0, 0, 0, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 521, 521, 521, 521, 521, 521, 285",
      /* 27567 */ "286, 287, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1097, 0, 0, 287, 325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 27597 */ "0, 0, 0, 0, 955, 0, 449, 449, 449, 467, 449, 467, 467, 493, 467, 493, 501, 467, 501, 501, 501, 501",
      /* 27619 */ "526, 501, 501, 501, 501, 501, 501, 501, 501, 526, 526, 526, 526, 526, 526, 526, 501, 501, 526",
      /* 27638 */ "53495, 53495, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 599, 0, 0, 0, 0, 0, 0, 0, 607, 608, 0, 0, 0, 0",
      /* 27665 */ "0, 2059, 0, 2061, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 155648, 0, 0, 0, 0, 0, 0, 0, 613, 0, 0, 0, 0, 0",
      /* 27692 */ "0, 0, 0, 0, 0, 317, 317, 317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 997, 0, 642, 0, 644, 0, 0, 0",
      /* 27721 */ "0, 0, 0, 0, 652, 0, 0, 0, 656, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 391, 0, 401, 401, 401, 0",
      /* 27748 */ "497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 2134, 497, 497, 401, 401, 401, 707, 401",
      /* 27768 */ "401, 715, 401, 721, 401, 724, 401, 727, 401, 401, 401, 401, 401, 1070, 401, 401, 401, 401, 401, 401",
      /* 27788 */ "401, 401, 401, 401, 401, 1074, 401, 401, 401, 401, 0, 740, 0, 763, 0, 0, 0, 767, 0, 0, 0, 0, 0, 0",
      /* 27812 */ "0, 767, 401, 748, 767, 0, 0, 748, 763, 767, 0, 0, 793, 0, 0, 0, 793, 797, 497, 497, 497, 805, 497",
      /* 27835 */ "497, 816, 497, 825, 497, 829, 497, 497, 835, 838, 842, 521, 885, 521, 889, 521, 521, 895, 898, 902",
      /* 27855 */ "521, 521, 521, 521, 497, 497, 0, 0, 521, 521, 521, 497, 497, 497, 1167, 497, 497, 497, 497, 521",
      /* 27875 */ "521, 521, 521, 521, 521, 53495, 2, 6, 0, 0, 0, 0, 939, 943, 0, 0, 0, 521, 521, 521, 497, 920, 497",
      /* 27898 */ "497, 497, 924, 842, 497, 0, 521, 928, 0, 0, 973, 0, 0, 976, 977, 0, 0, 0, 980, 0, 0, 0, 0, 317, 0",
      /* 27923 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 323, 401, 1085, 401, 401, 401, 0, 0, 0, 0, 0, 0, 0, 0, 1136",
      /* 27950 */ "497, 497, 497, 497, 497, 497, 1980, 497, 497, 497, 497, 497, 497, 497, 497, 497, 0, 1787, 1994, 0",
      /* 27970 */ "0, 0, 0, 497, 1176, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1189, 497, 497, 497, 497, 0, 0",
      /* 27991 */ "497, 0, 521, 521, 521, 521, 521, 521, 875, 521, 1196, 497, 497, 0, 0, 0, 855, 91314, 1136, 858, 521",
      /* 28012 */ "521, 521, 521, 521, 521, 247, 2, 6, 0, 0, 0, 0, 938, 942, 0, 0, 1302, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 28038 */ "1312, 0, 0, 0, 0, 0, 0, 1105920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 284, 325, 325, 354, 0, 0, 0, 0, 1316, 0",
      /* 28065 */ "1318, 1319, 0, 1321, 1322, 0, 0, 1325, 0, 0, 0, 0, 0, 0, 1053, 0, 0, 0, 0, 0, 0, 0, 401, 401, 401",
      /* 28090 */ "401, 401, 1406, 401, 401, 401, 401, 401, 401, 401, 1415, 401, 401, 401, 401, 401, 401, 401, 0, 328",
      /* 28110 */ "0, 361, 361, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2360",
      /* 28132 */ "521, 521, 521, 0, 1373, 0, 0, 1376, 0, 0, 1378, 0, 0, 0, 0, 0, 0, 0, 0, 964, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 28160 */ "0, 1399, 0, 401, 1401, 1402, 401, 401, 401, 401, 401, 1408, 401, 401, 1410, 401, 401, 401, 401",
      /* 28179 */ "1414, 401, 401, 401, 1416, 401, 401, 401, 401, 401, 401, 0, 770048, 0, 497, 497, 497, 497, 497, 497",
      /* 28199 */ "497, 497, 1780, 497, 497, 497, 497, 497, 497, 0, 0, 0, 0, 0, 1426, 0, 0, 1429, 0, 0, 0, 0, 0, 0, 0",
      /* 28224 */ "0, 0, 577, 0, 0, 0, 0, 0, 0, 1302, 1429, 0, 0, 0, 0, 1438, 0, 0, 0, 1442, 872448, 0, 1444, 401, 401",
      /* 28249 */ "401, 401, 710, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 1708, 401, 0, 1414",
      /* 28269 */ "401, 401, 401, 1450, 401, 401, 401, 401, 0, 0, 0, 0, 0, 0, 1136, 1459, 497, 1460, 497, 1462, 497",
      /* 28290 */ "497, 497, 497, 497, 497, 497, 1471, 497, 497, 497, 0, 0, 0, 855, 91314, 1136, 858, 521, 521, 521",
      /* 28310 */ "521, 521, 1213, 497, 1475, 497, 497, 497, 1478, 497, 497, 497, 497, 497, 497, 1484, 1486, 497, 497",
      /* 28329 */ "497, 497, 497, 497, 1992, 497, 497, 0, 0, 1994, 0, 0, 0, 0, 0, 0, 692224, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 28355 */ "1665, 0, 0, 0, 0, 0, 0, 497, 497, 1491, 1492, 497, 1494, 1495, 497, 497, 497, 497, 497, 497, 1502",
      /* 28376 */ "497, 1504, 1524, 91314, 0, 1524, 1529, 521, 1530, 521, 1532, 521, 521, 521, 521, 521, 521, 521, 0",
      /* 28395 */ "1606, 0, 0, 0, 0, 0, 1608, 0, 1541, 521, 521, 521, 521, 1545, 521, 521, 521, 1548, 521, 521, 521",
      /* 28416 */ "521, 521, 521, 497, 497, 497, 521, 521, 521, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1554, 1556, 521, 521, 521",
      /* 28439 */ "521, 1561, 1562, 521, 1564, 1565, 521, 521, 521, 521, 521, 0, 0, 0, 0, 0, 0, 0, 0, 497, 2507, 497",
      /* 28461 */ "521, 1572, 521, 1574, 521, 521, 521, 521, 521, 521, 1581, 521, 521, 521, 521, 521, 0, 0, 0, 0, 0, 0",
      /* 28483 */ "0, 0, 1862, 0, 0, 521, 1588, 497, 497, 521, 521, 521, 1592, 497, 497, 1486, 1495, 497, 1597, 497",
      /* 28503 */ "1599, 521, 521, 1556, 1565, 521, 1604, 521, 0, 1606, 0, 0, 0, 0, 0, 1608, 0, 0, 0, 0, 40960, 0, 0",
      /* 28526 */ "0, 0, 0, 0, 0, 395, 0, 408, 408, 408, 408, 408, 428, 428, 428, 428, 428, 451, 451, 451, 451, 451",
      /* 28548 */ "451, 451, 451, 451, 451, 504, 451, 504, 504, 504, 504, 0, 1657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 28573 */ "0, 0, 984, 317, 0, 1378, 0, 0, 0, 0, 1673, 0, 0, 0, 0, 0, 0, 0, 0, 0, 589, 590, 0, 0, 0, 0, 0, 0, 0",
      /* 28602 */ "1685, 0, 1687, 0, 0, 1690, 401, 401, 401, 401, 401, 401, 1696, 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 741",
      /* 28626 */ "0, 746, 0, 0, 0, 768, 0, 0, 0, 0, 578, 0, 0, 768, 0, 0, 0, 401, 401, 401, 401, 401, 1731, 401, 401",
      /* 28651 */ "401, 401, 401, 0, 0, 401, 0, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 2132, 497, 497, 497",
      /* 28672 */ "497, 0, 0, 497, 497, 497, 497, 497, 497, 497, 1743, 497, 497, 497, 497, 497, 1748, 497, 1750, 497",
      /* 28692 */ "497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 0, 0, 0, 0, 0, 1524, 0, 0, 0, 0",
      /* 28715 */ "521, 521, 521, 521, 521, 521, 521, 1805, 521, 1846, 521, 521, 497, 521, 521, 497, 497, 497, 497",
      /* 28734 */ "1854, 497, 497, 521, 521, 521, 521, 521, 1255, 521, 521, 521, 521, 521, 521, 521, 521, 521, 497",
      /* 28753 */ "521, 521, 497, 497, 497, 2041, 521, 521, 521, 521, 1858, 521, 521, 1606, 0, 1608, 0, 0, 0, 0, 0, 0",
      /* 28775 */ "0, 0, 982, 401, 401, 1120, 401, 401, 401, 1124, 0, 0, 1893, 0, 0, 1895, 1896, 0, 0, 0, 0, 0, 0, 0",
      /* 28799 */ "0, 0, 605, 606, 0, 0, 0, 0, 0, 0, 0, 0, 364544, 0, 0, 0, 1909, 0, 0, 0, 0, 0, 0, 0, 0, 1039, 0, 0",
      /* 28827 */ "0, 0, 0, 0, 0, 1916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401, 401, 401, 401, 401, 401, 401, 401, 787, 401",
      /* 28852 */ "401, 401, 401, 1008017, 0, 0, 0, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1746, 497",
      /* 28872 */ "497, 497, 497, 1962, 497, 1964, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1171, 497",
      /* 28891 */ "497, 497, 497, 1974, 497, 1976, 497, 1978, 497, 497, 497, 1982, 497, 497, 497, 497, 1987, 497, 497",
      /* 28910 */ "497, 497, 497, 497, 2148, 497, 497, 0, 0, 0, 0, 521, 521, 521, 497, 497, 497, 497, 497, 497, 845",
      /* 28931 */ "497, 0, 521, 521, 497, 497, 497, 497, 1991, 1008113, 497, 497, 497, 827392, 0, 1994, 0, 0, 0, 0, 0",
      /* 28952 */ "0, 2163545, 2163545, 2163545, 2163545, 2491225, 2163545, 2163545, 2528089, 2163545, 2163545, 2006",
      /* 28964 */ "521, 2008, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2018, 521, 497, 497, 2294, 521",
      /* 28983 */ "521, 2296, 0, 0, 0, 0, 2300, 0, 0, 2302, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 396, 0, 410, 410",
      /* 29009 */ "410, 410, 410, 430, 430, 438, 430, 430, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453",
      /* 29029 */ "453, 453, 476, 453, 2020, 521, 2022, 521, 521, 521, 2026, 521, 521, 521, 521, 2031, 521, 521, 521",
      /* 29048 */ "521, 497, 521, 521, 497, 497, 497, 1853, 497, 497, 497, 521, 521, 521, 521, 2035, 1008137, 521, 521",
      /* 29067 */ "521, 497, 521, 1008137, 365041, 497, 497, 497, 365065, 521, 497, 2293, 497, 521, 2295, 521, 0, 0, 0",
      /* 29086 */ "0, 0, 0, 0, 0, 0, 1389, 1390, 0, 0, 1393, 0, 0, 0, 2069, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2080, 0, 0",
      /* 29114 */ "0, 0, 0, 2085, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 516, 0, 516, 516, 516, 516, 497, 497, 497, 497, 2138",
      /* 29139 */ "497, 497, 497, 497, 497, 497, 497, 497, 497, 2143, 497, 497, 497, 497, 497, 1183, 497, 497, 497",
      /* 29158 */ "497, 497, 497, 497, 497, 497, 1195, 521, 521, 521, 2156, 521, 521, 521, 521, 521, 521, 521, 521",
      /* 29177 */ "521, 521, 521, 521, 521, 1245, 521, 521, 2165, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2170",
      /* 29196 */ "521, 521, 521, 521, 521, 0, 0, 0, 0, 0, 0, 0, 1861, 0, 0, 0, 2210, 0, 2212, 0, 0, 0, 667648, 0, 0",
      /* 29221 */ "0, 0, 0, 0, 0, 0, 0, 635, 0, 0, 0, 0, 0, 0, 0, 0, 2240, 0, 479232, 401, 401, 2243, 401, 0, 497, 497",
      /* 29247 */ "497, 2249, 497, 497, 497, 497, 497, 497, 2255, 2256, 497, 497, 497, 497, 2260, 497, 497, 497, 0, 0",
      /* 29267 */ "0, 855, 91314, 1136, 858, 521, 521, 521, 1209, 521, 521, 2264, 497, 497, 2267, 2268, 521, 521, 521",
      /* 29286 */ "2272, 521, 521, 521, 521, 521, 521, 521, 497, 521, 2038, 497, 2039, 497, 497, 521, 2042, 2277, 521",
      /* 29305 */ "521, 2280, 521, 521, 521, 521, 521, 521, 2285, 2287, 521, 521, 2290, 2291, 497, 497, 2339, 497, 497",
      /* 29324 */ "497, 497, 497, 497, 497, 497, 497, 521, 521, 2349, 521, 521, 521, 521, 2281, 2282, 521, 521, 521",
      /* 29343 */ "521, 521, 521, 521, 521, 521, 521, 521, 910, 521, 497, 497, 0, 497, 497, 497, 497, 2424, 497, 497",
      /* 29363 */ "497, 497, 497, 497, 497, 521, 521, 521, 521, 521, 521, 0, 2558, 2559, 0, 2434, 521, 521, 521, 521",
      /* 29383 */ "521, 521, 521, 0, 0, 0, 0, 0, 0, 2445, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 397, 0, 401, 401",
      /* 29409 */ "401, 0, 497, 497, 497, 497, 497, 497, 497, 497, 2336, 497, 497, 0, 497, 497, 2480, 497, 497, 497",
      /* 29429 */ "497, 497, 497, 497, 521, 521, 2490, 521, 521, 521, 521, 521, 1559, 521, 521, 521, 521, 521, 521",
      /* 29448 */ "521, 521, 521, 521, 521, 1815, 521, 521, 1818, 521, 2508, 497, 2510, 497, 497, 497, 497, 2515, 521",
      /* 29467 */ "521, 2517, 521, 2519, 521, 521, 521, 521, 521, 521, 521, 1837, 521, 521, 521, 1840, 521, 521, 521",
      /* 29486 */ "1844, 497, 2546, 497, 497, 497, 2550, 521, 2552, 521, 521, 521, 2556, 0, 0, 0, 0, 0, 306, 307, 308",
      /* 29507 */ "309, 0, 0, 0, 0, 0, 0, 0, 2087, 0, 0, 0, 0, 0, 0, 0, 0, 1430, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 288, 0",
      /* 29537 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1027, 0, 0, 0, 0, 317, 0, 0, 0, 0, 0, 0, 321, 0, 0, 0, 0, 0, 0, 0",
      /* 29568 */ "1054, 0, 0, 0, 0, 0, 0, 401, 401, 0, 0, 330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1098, 0, 0, 0",
      /* 29597 */ "0, 321, 0, 0, 0, 0, 0, 0, 368, 0, 321, 0, 368, 45056, 49152, 0, 321, 0, 379, 40960, 379, 379, 288",
      /* 29620 */ "379, 379, 0, 379, 0, 379, 406, 406, 406, 406, 406, 0, 0, 0, 321, 444, 379, 379, 379, 379, 379, 379",
      /* 29642 */ "379, 379, 379, 379, 379, 379, 379, 379, 406, 379, 379, 379, 379, 485, 379, 485, 485, 494, 485, 494",
      /* 29662 */ "502, 485, 502, 502, 502, 502, 527, 502, 502, 502, 502, 502, 502, 502, 502, 527, 527, 527, 527, 527",
      /* 29682 */ "527, 527, 502, 502, 527, 53495, 53495, 2, 2, 3, 94212, 5, 6, 0, 0, 668, 0, 0, 0, 0, 0, 0, 778, 401",
      /* 29706 */ "401, 401, 401, 401, 401, 401, 401, 401, 401, 1705, 401, 401, 401, 401, 0, 497, 497, 497, 497, 668",
      /* 29726 */ "0, 497, 0, 521, 521, 521, 521, 521, 521, 521, 521, 1563, 521, 521, 521, 521, 521, 521, 521, 880",
      /* 29746 */ "521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 497, 497, 0, 0, 521, 521, 521, 497, 497",
      /* 29767 */ "1143, 497, 497, 1183, 497, 497, 521, 521, 521, 521, 521, 1560, 521, 521, 521, 521, 521, 521, 521",
      /* 29786 */ "521, 521, 1570, 0, 0, 521, 521, 521, 919, 497, 497, 820, 497, 497, 497, 497, 0, 927, 521, 521, 521",
      /* 29807 */ "521, 2354, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2288, 521, 521, 521, 521",
      /* 29826 */ "880, 521, 521, 521, 521, 53495, 2, 6, 0, 0, 0, 0, 0, 0, 0, 1308, 0, 0, 0, 0, 0, 0, 0, 0, 2109440",
      /* 29851 */ "1023, 0, 0, 0, 0, 0, 0, 317, 0, 0, 0, 0, 0, 0, 954, 0, 0, 0, 0, 0, 0, 0, 0, 1338, 0, 0, 0, 0, 0, 0",
      /* 29881 */ "0, 401, 401, 1066, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 0, 0, 1090, 497",
      /* 29902 */ "497, 497, 497, 1148, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1190, 497, 497, 497",
      /* 29921 */ "497, 1216, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1267, 521",
      /* 29940 */ "521, 1573, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1569, 521, 0, 0, 0",
      /* 29961 */ "401, 401, 401, 1729, 401, 401, 401, 401, 401, 401, 401, 0, 0, 401, 0, 497, 497, 497, 497, 497, 497",
      /* 29982 */ "497, 2389, 1762, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1473, 0",
      /* 30002 */ "0, 1942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401, 401, 401, 401, 1929, 401, 401, 401, 401, 1952, 401",
      /* 30026 */ "0, 0, 0, 497, 497, 497, 497, 497, 497, 497, 497, 497, 2131, 497, 497, 497, 497, 497, 1989, 497, 497",
      /* 30047 */ "497, 497, 497, 497, 497, 497, 0, 0, 1994, 0, 0, 0, 0, 0, 312, 0, 0, 313, 0, 312, 0, 0, 0, 45056",
      /* 30071 */ "49152, 2545, 497, 497, 497, 497, 497, 2551, 521, 521, 521, 521, 521, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 30093 */ "1863, 0, 2571, 497, 497, 497, 2573, 521, 521, 521, 0, 0, 497, 497, 521, 521, 497, 521, 521, 521",
      /* 30113 */ "521, 2365, 497, 2366, 521, 0, 0, 0, 0, 0, 0, 0, 0, 1614, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 332, 0, 0, 0",
      /* 30141 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 1043, 0, 0, 0, 0, 0, 0, 380, 40960, 380, 380, 0, 380, 380, 0, 380, 394",
      /* 30167 */ "380, 407, 407, 407, 407, 407, 427, 427, 427, 427, 427, 450, 450, 450, 450, 450, 450, 450, 450, 450",
      /* 30187 */ "450, 450, 450, 450, 450, 407, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 503, 450, 503",
      /* 30207 */ "503, 503, 503, 528, 503, 503, 503, 503, 503, 503, 503, 503, 528, 528, 528, 528, 528, 528, 528, 503",
      /* 30227 */ "503, 528, 53495, 53495, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 30254 */ "0, 1108, 0, 0, 1524, 91314, 1527, 1524, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521",
      /* 30274 */ "521, 1265, 521, 497, 0, 0, 0, 1019904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1044, 0, 0, 0, 1656, 0",
      /* 30300 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1014, 0, 0, 0, 401, 401, 401, 401, 1730, 401, 401, 401",
      /* 30326 */ "401, 401, 401, 0, 0, 401, 0, 497, 497, 497, 497, 497, 497, 2388, 497, 521, 1857, 521, 521, 521, 0",
      /* 30347 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2113536, 2200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 30376 */ "2209, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 398, 0, 401, 401, 401, 0, 497, 497, 497, 497, 2332",
      /* 30400 */ "2333, 2334, 497, 497, 497, 497, 0, 0, 497, 0, 521, 521, 521, 521, 521, 873, 521, 521, 0, 0, 0, 2213",
      /* 30422 */ "0, 0, 0, 0, 0, 0, 0, 2220, 0, 0, 0, 0, 0, 335, 0, 0, 0, 339, 340, 342, 295, 0, 0, 0, 0, 2225, 0, 0",
      /* 30450 */ "401, 401, 401, 401, 401, 401, 401, 401, 0, 0, 0, 0, 0, 0, 0, 1135, 1136, 497, 497, 2292, 497, 497",
      /* 30472 */ "497, 521, 521, 521, 0, 0, 0, 0, 0, 0, 0, 0, 0, 668, 0, 0, 0, 0, 0, 0, 0, 2318, 0, 2320, 401, 401",
      /* 30498 */ "401, 401, 401, 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 497, 497, 0, 401, 401, 401, 0, 497, 2330, 497, 497",
      /* 30522 */ "497, 497, 497, 497, 497, 2337, 497, 497, 497, 497, 497, 1464, 1465, 497, 497, 497, 1469, 497, 497",
      /* 30541 */ "497, 497, 497, 497, 1479, 497, 497, 497, 497, 497, 497, 497, 497, 497, 0, 1791, 0, 1797, 521, 521",
      /* 30561 */ "521, 497, 497, 497, 2340, 497, 497, 497, 497, 497, 497, 497, 497, 521, 2348, 521, 521, 521, 521",
      /* 30580 */ "521, 1577, 1578, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1813, 1814, 521, 521, 521, 521, 521",
      /* 30599 */ "401, 2383, 401, 401, 0, 0, 401, 0, 497, 497, 497, 497, 497, 2387, 497, 497, 497, 497, 497, 497",
      /* 30619 */ "2426, 497, 497, 497, 497, 497, 521, 521, 521, 521, 521, 521, 521, 521, 2275, 521, 521, 497, 497",
      /* 30638 */ "497, 497, 2393, 497, 497, 497, 497, 497, 521, 521, 521, 521, 521, 2399, 497, 497, 2562, 2563, 497",
      /* 30657 */ "497, 521, 521, 2566, 2567, 521, 521, 0, 0, 0, 0, 0, 0, 2050, 0, 0, 0, 0, 0, 2055, 0, 0, 0, 614, 615",
      /* 30682 */ "0, 0, 0, 619, 0, 0, 0, 0, 317, 317, 317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 996, 0, 0, 0, 0, 748",
      /* 30711 */ "0, 0, 0, 0, 0, 632, 0, 0, 0, 0, 761, 0, 0, 767, 0, 748, 401, 779, 401, 401, 401, 401, 784, 401, 401",
      /* 30736 */ "401, 401, 709, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 1422, 401, 0, 733",
      /* 30756 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1110, 733, 0, 0, 0, 0, 0, 0, 0, 0, 0, 684, 0, 0, 0",
      /* 30786 */ "684, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 217088, 0, 0, 0, 0, 0, 1661, 0, 0, 0, 0, 0, 1667, 0, 0",
      /* 30814 */ "0, 0, 0, 0, 151552, 2105344, 265, 266, 0, 208896, 0, 0, 0, 0, 0, 0, 2204, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 30840 */ "2109440, 0, 0, 0, 0, 0, 0, 0, 497, 497, 803, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497",
      /* 30862 */ "497, 497, 497, 1761, 497, 497, 497, 849, 497, 0, 854, 497, 0, 521, 521, 521, 863, 521, 521, 521",
      /* 30882 */ "521, 909, 53495, 2, 6, 0, 0, 0, 0, 0, 0, 0, 1368, 0, 0, 0, 0, 0, 0, 0, 0, 954, 0, 0, 0, 0, 0, 0, 0",
      /* 30911 */ "0, 0, 521, 521, 521, 497, 497, 803, 497, 497, 497, 497, 849, 0, 521, 521, 521, 521, 521, 1606, 0",
      /* 30932 */ "1608, 0, 0, 0, 0, 0, 0, 0, 0, 293, 0, 0, 0, 0, 0, 0, 0, 971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 30963 */ "0, 317, 317, 317, 626, 0, 1016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1013, 0, 497, 497, 497",
      /* 30989 */ "497, 1182, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1470, 497, 497, 497, 497, 1250",
      /* 31008 */ "521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 497, 497, 0, 1587, 521, 497",
      /* 31028 */ "497, 521, 521, 521, 497, 497, 497, 497, 497, 497, 497, 497, 521, 2270, 521, 521, 521, 521, 521, 521",
      /* 31048 */ "521, 521, 521, 1228, 521, 521, 521, 521, 521, 521, 0, 2327, 401, 401, 0, 497, 497, 497, 497, 497",
      /* 31068 */ "497, 497, 497, 497, 497, 497, 1483, 497, 497, 1487, 497, 0, 0, 0, 290, 289, 0, 0, 0, 0, 0, 0, 0",
      /* 31091 */ "289, 0, 45056, 49152, 451, 451, 451, 451, 451, 451, 463, 451, 451, 451, 451, 451, 451, 463, 475",
      /* 31110 */ "451, 529, 504, 504, 504, 504, 504, 504, 504, 504, 529, 529, 529, 529, 529, 529, 529, 553, 553, 562",
      /* 31130 */ "53495, 53495, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 687, 0, 0, 0, 0, 693, 0, 0, 0, 697, 0, 0, 0, 0, 0",
      /* 31157 */ "358, 0, 0, 0, 0, 358, 0, 0, 0, 45056, 49152, 401, 401, 401, 708, 401, 401, 401, 401, 401, 401, 401",
      /* 31179 */ "401, 401, 401, 401, 401, 401, 0, 1938, 0, 0, 773, 0, 0, 0, 777, 0, 401, 401, 401, 401, 401, 401",
      /* 31201 */ "401, 785, 401, 0, 0, 0, 0, 0, 0, 0, 0, 618, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 2003",
      /* 31226 */ "521, 521, 521, 788, 0, 0, 769, 0, 0, 0, 0, 769, 0, 777, 0, 0, 0, 777, 0, 0, 0, 0, 40960, 0, 0, 0, 0",
      /* 31253 */ "0, 0, 269, 0, 0, 0, 0, 0, 0, 2114, 0, 0, 0, 0, 401, 401, 2119, 401, 401, 497, 497, 497, 806, 497",
      /* 31277 */ "497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1517, 497, 0, 0, 497, 497, 850, 497, 0, 0",
      /* 31298 */ "497, 0, 521, 521, 521, 521, 866, 521, 521, 521, 521, 521, 521, 521, 2012, 521, 521, 521, 521, 521",
      /* 31318 */ "521, 521, 521, 1257, 521, 521, 521, 521, 1264, 521, 521, 497, 0, 0, 521, 521, 521, 497, 497, 497",
      /* 31338 */ "497, 497, 497, 925, 850, 0, 521, 521, 521, 521, 521, 1810, 521, 1812, 521, 521, 521, 521, 521, 521",
      /* 31358 */ "521, 521, 1547, 521, 521, 521, 521, 521, 521, 521, 497, 497, 1142, 497, 497, 497, 497, 497, 497",
      /* 31377 */ "497, 497, 497, 497, 497, 497, 497, 1160, 497, 497, 497, 497, 1163, 497, 497, 497, 497, 497, 497",
      /* 31396 */ "497, 497, 497, 497, 497, 497, 497, 1472, 497, 497, 0, 0, 1363, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1370, 0",
      /* 31420 */ "0, 0, 0, 0, 2113, 0, 0, 0, 0, 0, 401, 401, 401, 401, 2121, 1372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 31448 */ "0, 0, 0, 1305, 0, 0, 1340, 0, 0, 0, 0, 0, 0, 1441, 0, 0, 0, 401, 401, 401, 401, 401, 401, 401, 0, 0",
      /* 31474 */ "0, 0, 2326, 0, 401, 1447, 401, 401, 401, 401, 401, 401, 401, 0, 0, 0, 0, 0, 0, 1136, 497, 1489, 497",
      /* 31497 */ "497, 497, 497, 497, 497, 497, 497, 497, 497, 1501, 497, 497, 497, 0, 0, 0, 855, 91314, 1136, 858",
      /* 31517 */ "521, 521, 521, 521, 1210, 521, 1571, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521",
      /* 31536 */ "521, 1585, 521, 521, 521, 521, 2438, 521, 521, 521, 0, 0, 0, 0, 0, 0, 0, 0, 265, 266, 0, 0, 0, 0",
      /* 31560 */ "578, 0, 0, 0, 0, 1659, 0, 0, 0, 0, 0, 0, 1666, 0, 0, 0, 0, 0, 0, 1094, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 31589 */ "1431, 0, 1433, 0, 0, 1435, 0, 0, 0, 497, 497, 1739, 497, 497, 497, 497, 497, 497, 497, 497, 497",
      /* 31610 */ "497, 497, 1784, 497, 497, 0, 0, 0, 0, 0, 1524, 0, 0, 0, 0, 521, 521, 1801, 521, 521, 521, 521, 521",
      /* 31633 */ "0, 0, 0, 0, 1859, 0, 0, 0, 0, 0, 0, 665, 360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 49152",
      /* 31661 */ "1877, 0, 1879, 0, 0, 1882, 0, 0, 0, 1886, 0, 0, 0, 0, 1889, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0",
      /* 31687 */ "270, 0, 399, 402, 402, 402, 402, 402, 423, 423, 423, 423, 423, 446, 446, 446, 446, 446, 446, 461",
      /* 31707 */ "465, 446, 446, 446, 446, 446, 461, 472, 446, 0, 1917, 1918, 0, 0, 1921, 0, 0, 0, 0, 401, 401, 401",
      /* 31729 */ "401, 401, 401, 2233, 401, 0, 0, 0, 2237, 0, 0, 2070, 2071, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1317",
      /* 31755 */ "0, 0, 0, 0, 0, 2098, 2099, 0, 2101, 401, 2103, 401, 401, 401, 401, 401, 401, 2108, 401, 0, 0, 0, 0",
      /* 31778 */ "0, 0, 0, 0, 738, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738, 0, 0, 0, 497, 2124, 497, 497, 2127, 497",
      /* 31805 */ "497, 497, 497, 497, 497, 497, 497, 497, 2135, 2144, 497, 497, 497, 497, 2147, 497, 497, 497, 0, 0",
      /* 31825 */ "0, 0, 521, 2151, 521, 521, 521, 551, 551, 560, 53495, 53495, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 764",
      /* 31848 */ "0, 0, 0, 616, 0, 623, 760, 0, 0, 0, 0, 0, 961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1311, 0, 0, 0, 0, 0",
      /* 31877 */ "521, 2154, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2162, 521, 521, 521, 521, 497, 521, 521",
      /* 31896 */ "497, 497, 1852, 497, 497, 497, 497, 521, 521, 521, 2174, 521, 521, 521, 521, 497, 497, 497, 521",
      /* 31915 */ "521, 521, 2184, 0, 0, 0, 0, 0, 2215, 0, 0, 0, 0, 0, 0, 0, 2222, 0, 0, 0, 0, 0, 2227, 401, 401, 401",
      /* 31941 */ "401, 2231, 401, 401, 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 593, 0, 0, 0, 0, 401, 401, 401, 401, 401",
      /* 31967 */ "401, 401, 401, 401, 401, 401, 0, 1734, 497, 497, 2252, 497, 497, 497, 497, 497, 497, 497, 497, 497",
      /* 31987 */ "497, 2261, 497, 497, 497, 497, 497, 497, 2514, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2029",
      /* 32006 */ "521, 521, 521, 521, 2033, 521, 2317, 0, 0, 401, 401, 401, 401, 401, 401, 401, 0, 0, 0, 0, 0, 0, 0",
      /* 32029 */ "0, 1136, 497, 497, 521, 521, 2464, 521, 2466, 2467, 2468, 521, 0, 0, 0, 0, 0, 0, 0, 0, 1627, 1628",
      /* 32051 */ "1629, 0, 0, 0, 0, 0, 0, 0, 331, 333, 0, 0, 0, 333, 0, 0, 0, 0, 0, 0, 0, 0, 1664, 0, 0, 0, 0, 0, 0",
      /* 32080 */ "0, 0, 0, 0, 381, 40960, 381, 381, 0, 381, 381, 388, 381, 0, 381, 409, 409, 409, 409, 409, 429, 429",
      /* 32102 */ "429, 429, 429, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 409, 452, 452",
      /* 32122 */ "452, 452, 452, 487, 452, 452, 452, 452, 452, 505, 452, 505, 505, 505, 505, 530, 505, 505, 505, 505",
      /* 32142 */ "505, 505, 505, 505, 530, 530, 530, 530, 530, 530, 530, 505, 505, 530, 53495, 53495, 2, 2, 3, 94212",
      /* 32162 */ "5, 6, 0, 0, 670, 0, 676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1343, 0, 0, 592, 0, 0, 0, 0, 0, 0",
      /* 32192 */ "0, 0, 0, 0, 0, 670, 592, 0, 0, 0, 0, 1003, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 312, 313, 314, 315, 316",
      /* 32220 */ "401, 0, 654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 592, 0, 0, 0, 0, 401, 401, 401, 401, 401, 401, 401, 401",
      /* 32245 */ "401, 401, 401, 0, 0, 497, 497, 497, 497, 808, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497",
      /* 32266 */ "1985, 497, 497, 497, 497, 497, 497, 497, 497, 852, 0, 497, 0, 521, 521, 521, 521, 521, 868, 521",
      /* 32286 */ "521, 521, 521, 521, 2025, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1262, 521, 521, 521",
      /* 32305 */ "521, 497, 317, 0, 0, 0, 0, 0, 0, 0, 0, 992, 0, 0, 0, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521",
      /* 32330 */ "521, 521, 2005, 401, 1064, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401",
      /* 32349 */ "401, 401, 0, 401, 401, 401, 401, 1080, 401, 401, 401, 401, 401, 401, 401, 401, 0, 0, 0, 497, 497",
      /* 32370 */ "497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 845, 497, 497, 497, 1143",
      /* 32389 */ "1149, 497, 497, 497, 497, 497, 497, 497, 497, 1159, 497, 497, 497, 497, 497, 815, 497, 497, 497",
      /* 32408 */ "497, 497, 497, 497, 497, 497, 497, 1498, 497, 497, 497, 497, 497, 497, 497, 497, 497, 315392, 0, 0",
      /* 32428 */ "855, 91314, 1136, 858, 521, 521, 521, 521, 521, 1211, 521, 521, 1251, 521, 521, 0, 0, 0, 0, 0, 0, 0",
      /* 32450 */ "0, 0, 0, 2194, 0, 0, 0, 0, 0, 1217, 521, 521, 521, 521, 521, 521, 521, 521, 1227, 521, 521, 521",
      /* 32472 */ "521, 521, 521, 497, 497, 497, 521, 521, 521, 0, 2185, 0, 0, 521, 1251, 521, 521, 521, 521, 521, 521",
      /* 32493 */ "521, 521, 521, 1263, 521, 521, 521, 497, 497, 521, 53495, 53495, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0",
      /* 32515 */ "0, 1304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1342, 0, 0, 0, 1524, 91314, 1527, 1524, 521, 521, 521",
      /* 32540 */ "521, 521, 1534, 1535, 521, 521, 521, 1539, 521, 521, 521, 888, 521, 893, 521, 896, 521, 521, 908",
      /* 32559 */ "521, 521, 497, 913, 0, 0, 0, 0, 2214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 637, 0, 0, 0, 0, 0, 0, 0",
      /* 32587 */ "1623, 1624, 0, 0, 0, 0, 0, 0, 1630, 0, 0, 0, 0, 0, 617, 0, 0, 0, 0, 0, 0, 317, 317, 317, 0, 497",
      /* 32613 */ "1763, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 0, 1522, 1774, 497, 497",
      /* 32633 */ "497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 0, 0, 0, 0, 521, 521, 2152, 0, 0, 1867, 0, 0",
      /* 32656 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1358, 0, 0, 497, 1961, 497, 497, 497, 497, 497, 497, 497, 497, 497",
      /* 32681 */ "497, 497, 497, 497, 497, 0, 1523, 0, 0, 2083, 0, 0, 0, 0, 0, 0, 0, 2090, 0, 0, 0, 0, 0, 0, 1105, 0",
      /* 32707 */ "1060, 1094, 0, 0, 0, 0, 0, 0, 618, 0, 0, 0, 0, 0, 317, 317, 317, 0, 2096, 0, 0, 0, 0, 401, 2102",
      /* 32732 */ "401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 1420, 401, 401, 1423, 0, 2109, 0, 0, 0, 0, 0",
      /* 32754 */ "0, 0, 0, 0, 0, 401, 401, 401, 401, 401, 1123, 401, 0, 497, 497, 497, 2126, 497, 497, 497, 497, 497",
      /* 32776 */ "497, 497, 497, 497, 497, 497, 2141, 497, 497, 497, 497, 2153, 521, 521, 521, 521, 521, 521, 521",
      /* 32795 */ "521, 521, 521, 521, 521, 521, 521, 521, 1553, 0, 2309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 32820 */ "1024, 1024, 497, 2509, 497, 2511, 497, 497, 497, 521, 521, 521, 521, 2518, 521, 2520, 521, 521, 521",
      /* 32839 */ "521, 521, 2167, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1582, 521, 521, 521, 521",
      /* 32858 */ "497, 497, 2535, 521, 521, 521, 521, 521, 521, 521, 521, 0, 0, 0, 0, 0, 2474, 0, 0, 497, 2561, 497",
      /* 32880 */ "497, 497, 497, 521, 2565, 521, 521, 521, 521, 0, 0, 0, 0, 413696, 2049, 0, 0, 2052, 2053, 0, 0, 0",
      /* 32902 */ "0, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 506, 453, 506, 506, 506, 506, 531, 506, 506",
      /* 32922 */ "506, 506, 543, 543, 543, 543, 548, 548, 548, 548, 548, 548, 548, 506, 506, 548, 53495, 53815, 2, 2",
      /* 32942 */ "3, 94212, 5, 6, 0, 0, 593, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 593, 0, 0, 0, 0, 1019, 0, 0, 0, 0, 0",
      /* 32972 */ "0, 0, 0, 0, 0, 0, 2208, 0, 0, 0, 0, 497, 497, 497, 497, 809, 497, 497, 821, 497, 497, 497, 497, 497",
      /* 32996 */ "497, 497, 497, 975345, 497, 497, 497, 521, 521, 521, 521, 881, 521, 521, 521, 521, 521, 521, 521",
      /* 33015 */ "521, 521, 521, 521, 521, 497, 497, 0, 0, 521, 521, 521, 497, 497, 1144, 497, 497, 497, 1278, 497",
      /* 33035 */ "521, 521, 521, 521, 521, 2177, 2178, 497, 497, 2181, 521, 521, 0, 0, 0, 0, 0, 2526, 2527, 0, 497",
      /* 33056 */ "497, 497, 497, 497, 497, 497, 2485, 497, 2487, 521, 521, 521, 521, 521, 0, 0, 521, 521, 521, 497",
      /* 33076 */ "497, 497, 821, 497, 497, 497, 497, 0, 521, 521, 521, 521, 521, 2355, 521, 521, 521, 521, 2358, 521",
      /* 33096 */ "521, 521, 521, 521, 0, 0, 0, 0, 0, 2503, 2504, 0, 497, 497, 497, 521, 881, 521, 521, 521, 521",
      /* 33117 */ "53495, 2, 6, 0, 0, 0, 0, 0, 0, 0, 1613, 0, 0, 0, 0, 0, 0, 0, 0, 650, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 33146 */ "1033, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1371, 0, 0, 1111, 0, 0, 0, 0, 0, 0, 1116, 0, 401, 401",
      /* 33174 */ "401, 401, 401, 401, 401, 401, 1072, 401, 401, 401, 401, 401, 401, 401, 401, 1084, 401, 401, 401",
      /* 33193 */ "401, 0, 0, 0, 1125, 401, 401, 401, 401, 0, 0, 0, 0, 0, 0, 0, 0, 1136, 497, 497, 497, 497, 497, 1151",
      /* 33217 */ "497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1994, 0, 1996, 0, 521, 521, 521, 497, 497, 497",
      /* 33237 */ "1144, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1759, 497, 497, 497, 521, 521",
      /* 33256 */ "1252, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 497, 521, 0, 0, 1212, 521, 521",
      /* 33276 */ "521, 1286, 521, 0, 0, 1290, 0, 0, 0, 1296, 0, 0, 0, 0, 0, 36864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 33303 */ "901120, 0, 0, 0, 0, 1315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1327, 0, 0, 0, 0, 0, 106496, 106496",
      /* 33328 */ "106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496",
      /* 33340 */ "106496, 106496, 1474, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1488",
      /* 33358 */ "1524, 91314, 0, 1524, 521, 521, 521, 521, 521, 521, 521, 1536, 521, 521, 521, 521, 497, 521, 1850",
      /* 33377 */ "497, 497, 497, 497, 497, 497, 497, 521, 521, 521, 521, 521, 1558, 521, 521, 521, 521, 521, 521, 521",
      /* 33397 */ "521, 521, 521, 521, 521, 521, 1568, 521, 521, 0, 0, 0, 1686, 0, 0, 0, 0, 401, 401, 401, 401, 401",
      /* 33419 */ "401, 401, 401, 0, 0, 0, 0, 1749, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497",
      /* 33440 */ "497, 497, 1973, 1789, 0, 0, 1524, 0, 1795, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 1838, 521",
      /* 33461 */ "521, 521, 521, 521, 521, 521, 521, 521, 521, 1835, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521",
      /* 33481 */ "521, 521, 521, 1829, 1830, 521, 0, 2188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1061, 401, 0",
      /* 33506 */ "401, 401, 975249, 0, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1170, 497, 497, 1172",
      /* 33525 */ "497, 1174, 0, 317, 294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1619, 0, 0, 0, 0, 0, 294, 0, 0, 0, 0",
      /* 33554 */ "0, 0, 0, 0, 0, 0, 0, 339, 0, 0, 0, 0, 339, 0, 0, 0, 45056, 49152, 482, 471, 437, 486, 437, 486, 486",
      /* 33579 */ "486, 486, 486, 507, 486, 507, 507, 507, 507, 532, 507, 507, 507, 507, 507, 507, 507, 507, 532, 532",
      /* 33599 */ "532, 532, 532, 532, 532, 507, 507, 532, 53495, 53495, 2, 2, 3, 94212, 5, 6, 0, 0, 596, 597, 0, 0, 0",
      /* 33622 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1314, 651264, 0, 634, 0, 0, 0, 0, 0, 0, 0, 0, 696, 0, 0, 0, 0, 0",
      /* 33651 */ "0, 1336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 979, 0, 0, 0, 0, 0, 317, 401, 703, 401, 401, 711, 401, 401, 719",
      /* 33677 */ "401, 401, 401, 725, 401, 401, 401, 732, 401, 0, 0, 0, 0, 0, 734, 0, 0, 0, 0, 743, 0, 0, 0, 0, 0",
      /* 33702 */ "631, 0, 0, 634, 0, 0, 0, 0, 639, 0, 641, 0, 751, 0, 631, 0, 0, 0, 0, 751, 0, 0, 0, 0, 734, 0, 0, 0",
      /* 33730 */ "0, 1036, 0, 1037, 0, 0, 0, 0, 0, 0, 1037, 0, 0, 0, 0, 1051, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401, 401",
      /* 33757 */ "1065, 401, 401, 401, 401, 594, 0, 762, 0, 0, 634, 0, 0, 0, 751, 0, 0, 734, 594, 772, 0, 0, 0, 0",
      /* 33781 */ "40960, 0, 0, 0, 0, 0, 308, 0, 0, 0, 415, 415, 415, 415, 415, 433, 433, 433, 433, 433, 457, 457, 457",
      /* 33804 */ "457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 457, 479, 457, 734, 0, 774, 634, 0, 0, 0, 703",
      /* 33825 */ "401, 401, 781, 401, 401, 401, 401, 732, 497, 799, 497, 497, 810, 497, 497, 822, 497, 497, 497, 831",
      /* 33845 */ "497, 497, 497, 497, 0, 0, 497, 0, 521, 521, 521, 521, 521, 869, 521, 521, 846, 497, 497, 497, 853",
      /* 33866 */ "0, 497, 0, 521, 521, 859, 521, 521, 870, 521, 521, 521, 521, 521, 2439, 521, 521, 0, 0, 0, 0, 0, 0",
      /* 33889 */ "0, 0, 221728, 221728, 221728, 221728, 221728, 221728, 221728, 221728, 882, 521, 521, 521, 891, 521",
      /* 33905 */ "521, 521, 521, 906, 521, 521, 521, 799, 497, 0, 0, 521, 521, 521, 497, 497, 1146, 497, 497, 497",
      /* 33925 */ "497, 497, 521, 521, 521, 521, 521, 2498, 2499, 0, 0, 0, 0, 0, 0, 2506, 497, 497, 497, 497, 497, 497",
      /* 33947 */ "2394, 497, 497, 497, 521, 521, 521, 521, 2398, 521, 0, 0, 859, 521, 906, 799, 497, 497, 922, 497",
      /* 33967 */ "497, 497, 497, 0, 859, 521, 521, 521, 897, 521, 521, 53495, 2, 6, 0, 0, 0, 0, 0, 0, 0, 1006, 0, 0",
      /* 33991 */ "0, 0, 0, 0, 0, 0, 1871, 0, 0, 0, 0, 0, 0, 0, 521, 930, 521, 521, 521, 521, 53495, 2, 6, 0, 0, 0, 0",
      /* 34018 */ "0, 0, 0, 1626, 0, 0, 0, 0, 0, 0, 0, 0, 2088, 2089, 0, 0, 0, 0, 0, 0, 317, 0, 986, 0, 0, 0, 0, 0, 0",
      /* 34047 */ "0, 0, 0, 0, 0, 0, 0, 1632, 0, 0, 0, 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1010, 0, 0, 0, 0, 0, 684, 0",
      /* 34076 */ "401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 1419, 401, 401, 401, 0, 1030, 0, 0, 0, 0",
      /* 34097 */ "949, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1046, 0, 1102, 0, 1104, 0, 0, 0, 1090, 0, 0, 0, 0, 0, 0, 1109, 0, 0",
      /* 34125 */ "0, 0, 40960, 0, 0, 0, 287, 286, 0, 0, 393, 286, 405, 405, 405, 405, 405, 426, 436, 426, 426, 426",
      /* 34147 */ "449, 449, 449, 449, 449, 449, 462, 467, 449, 449, 449, 449, 449, 462, 405, 449, 497, 497, 1178, 497",
      /* 34167 */ "497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1785, 0, 0, 1282, 521, 521, 1285, 521",
      /* 34187 */ "521, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 45056, 49152, 1301, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 34214 */ "0, 0, 0, 0, 0, 0, 1329, 0, 0, 1332, 1333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1380, 0, 0, 0, 497",
      /* 34242 */ "497, 497, 1509, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 0, 0, 0, 0, 1995, 0, 1522, 1524",
      /* 34263 */ "91314, 0, 1524, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1538, 521, 521, 521, 521, 905, 521",
      /* 34282 */ "53495, 2, 6, 0, 0, 0, 0, 0, 0, 0, 2105344, 265, 266, 0, 0, 0, 0, 0, 0, 1683, 0, 0, 0, 0, 0, 1689, 0",
      /* 34309 */ "1691, 401, 401, 401, 401, 401, 401, 401, 401, 1936, 401, 401, 401, 401, 0, 0, 0, 0, 0, 497, 1738",
      /* 34330 */ "497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1986, 497, 497, 497, 0, 0, 0, 1524, 0",
      /* 34351 */ "0, 0, 0, 521, 1800, 521, 521, 521, 521, 521, 521, 497, 497, 2180, 521, 521, 2183, 0, 0, 0, 2187",
      /* 34372 */ "1865, 0, 0, 1868, 0, 0, 0, 0, 0, 1872, 0, 0, 1874, 0, 0, 0, 0, 0, 135168, 135168, 135168, 135168",
      /* 34394 */ "135168, 135168, 135168, 135168, 135168, 135168, 135168, 0, 0, 135168, 0, 0, 2, 2, 3, 94212, 5, 6, 0",
      /* 34413 */ "0, 401, 401, 401, 1932, 401, 401, 1934, 401, 401, 401, 401, 401, 401, 0, 0, 0, 497, 497, 1956, 1957",
      /* 34434 */ "497, 497, 497, 497, 1940, 0, 0, 0, 0, 0, 0, 0, 1944, 0, 1946, 0, 0, 0, 401, 401, 401, 401, 401, 401",
      /* 34458 */ "401, 0, 0, 0, 974848, 0, 0, 401, 401, 1951, 401, 401, 0, 0, 0, 497, 497, 497, 497, 497, 497, 1959",
      /* 34480 */ "497, 497, 497, 497, 497, 1753, 497, 497, 1756, 497, 497, 497, 497, 497, 497, 497, 1466, 497, 497",
      /* 34499 */ "497, 497, 497, 497, 497, 497, 1153, 497, 497, 497, 1157, 497, 497, 497, 497, 497, 497, 497, 1963",
      /* 34518 */ "497, 1965, 497, 497, 497, 497, 497, 497, 497, 497, 1972, 497, 497, 497, 497, 497, 1765, 497, 497",
      /* 34537 */ "497, 497, 497, 1771, 497, 497, 497, 497, 0, 0, 497, 0, 521, 521, 521, 521, 865, 521, 521, 876, 521",
      /* 34558 */ "2007, 521, 2009, 521, 521, 521, 521, 521, 521, 521, 521, 2016, 521, 521, 521, 521, 521, 521, 521",
      /* 34577 */ "2159, 521, 521, 521, 521, 521, 521, 521, 521, 2028, 521, 521, 521, 521, 521, 521, 521, 521, 2044, 0",
      /* 34597 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1328, 0, 2056, 0, 0, 0, 2058, 0, 2060, 0, 0, 0, 0, 0, 0",
      /* 34625 */ "2065, 2066, 0, 0, 0, 0, 40960, 0, 0, 294, 0, 0, 389, 0, 0, 0, 411, 411, 411, 411, 411, 431, 437",
      /* 34648 */ "437, 437, 431, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 471, 437, 437, 437, 411, 437, 0, 0",
      /* 34669 */ "0, 2084, 0, 0, 0, 0, 0, 0, 0, 2091, 2092, 0, 0, 2095, 0, 2110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2118, 401",
      /* 34696 */ "401, 401, 401, 0, 806912, 807313, 0, 497, 497, 497, 497, 497, 497, 497, 497, 1981, 497, 497, 497",
      /* 34715 */ "497, 497, 497, 497, 497, 2149, 497, 0, 0, 0, 0, 521, 521, 521, 0, 0, 2226, 0, 2228, 401, 401, 401",
      /* 34737 */ "401, 401, 401, 401, 0, 0, 0, 0, 0, 455, 455, 455, 455, 455, 455, 0, 0, 0, 2241, 0, 401, 401, 401",
      /* 34760 */ "401, 2245, 497, 2247, 497, 497, 497, 497, 0, 0, 497, 0, 521, 521, 521, 521, 521, 872, 521, 521, 521",
      /* 34781 */ "2278, 2279, 521, 521, 521, 521, 2283, 521, 521, 521, 521, 521, 521, 521, 521, 2169, 521, 521, 521",
      /* 34800 */ "521, 521, 521, 521, 0, 0, 2319, 401, 401, 2321, 2322, 401, 401, 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 34824 */ "0, 0, 0, 0, 749, 497, 497, 497, 497, 2341, 497, 497, 497, 497, 497, 497, 497, 521, 521, 521, 521",
      /* 34845 */ "521, 521, 0, 2569, 2570, 0, 2350, 2351, 2352, 521, 521, 521, 521, 521, 521, 521, 521, 2359, 521",
      /* 34864 */ "521, 521, 521, 497, 909809, 521, 909833, 2367, 0, 0, 2369, 0, 0, 0, 0, 0, 690, 0, 0, 0, 0, 0, 0, 0",
      /* 34888 */ "0, 0, 0, 290816, 290816, 290816, 290816, 290816, 290816, 2400, 521, 521, 521, 521, 521, 521, 521",
      /* 34905 */ "521, 521, 521, 521, 497, 521, 0, 0, 0, 0, 1112, 0, 0, 0, 0, 401, 1119, 401, 401, 401, 401, 401, 401",
      /* 34928 */ "717, 401, 722, 401, 401, 401, 401, 729, 401, 401, 521, 521, 2436, 521, 521, 521, 521, 521, 0, 2442",
      /* 34948 */ "0, 0, 868352, 0, 0, 0, 0, 0, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840",
      /* 34965 */ "163840, 163840, 163840, 163840, 163840, 163840, 163840, 521, 2463, 521, 521, 521, 521, 521, 521, 0",
      /* 34981 */ "0, 0, 0, 2473, 0, 0, 0, 0, 0, 188835, 188835, 188835, 188835, 188835, 0, 0, 0, 0, 0, 188835, 521",
      /* 35002 */ "521, 2495, 521, 2497, 0, 0, 0, 0, 0, 0, 0, 0, 497, 497, 497, 497, 497, 497, 497, 497, 497, 2459",
      /* 35024 */ "521, 521, 497, 497, 2547, 2548, 497, 497, 521, 521, 2553, 2554, 521, 521, 0, 0, 0, 0, 0, 958, 1115",
      /* 35045 */ "0, 0, 401, 401, 401, 401, 1122, 401, 401, 0, 297, 299, 298, 40960, 298, 298, 299, 386, 298, 297",
      /* 35065 */ "298, 0, 298, 412, 412, 412, 412, 412, 432, 432, 432, 440, 445, 454, 454, 454, 454, 454, 454, 454",
      /* 35085 */ "468, 454, 454, 454, 454, 454, 454, 412, 454, 454, 454, 454, 468, 454, 468, 492, 468, 492, 468, 508",
      /* 35105 */ "492, 508, 508, 508, 508, 533, 508, 508, 508, 508, 508, 508, 508, 508, 533, 533, 533, 533, 533, 533",
      /* 35125 */ "533, 508, 508, 533, 53495, 53495, 2, 2, 3, 94212, 5, 6, 0, 0, 580, 0, 0, 0, 584, 585, 586, 587, 588",
      /* 35148 */ "0, 0, 0, 0, 0, 0, 0, 1663, 0, 0, 0, 0, 0, 0, 0, 0, 1885, 0, 0, 0, 0, 0, 0, 0, 0, 0, 628, 0, 0, 0, 0",
      /* 35179 */ "0, 0, 0, 0, 0, 0, 0, 640, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245760",
      /* 35208 */ "0, 643, 0, 645, 0, 647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188835, 188835, 188835, 188835, 188835",
      /* 35229 */ "188835, 686, 0, 0, 689, 745472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1326, 0, 0, 0, 0, 401, 401, 706",
      /* 35254 */ "401, 401, 714, 401, 401, 401, 723, 401, 401, 401, 401, 730, 401, 0, 0, 0, 0, 0, 0, 0, 0, 739, 0, 0",
      /* 35278 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 771, 0, 0, 401, 0, 0, 0, 0, 0, 0, 736, 0, 0, 0, 0, 0, 747, 0, 0, 0, 0",
      /* 35309 */ "1305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1720, 0, 0, 0, 0, 616, 0, 0, 0, 0, 753, 754, 0, 0, 756, 0, 0",
      /* 35338 */ "0, 0, 760, 0, 0, 0, 0, 155648, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 155648, 0, 0, 0, 0",
      /* 35364 */ "0, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648",
      /* 35377 */ "155648, 155648, 155648, 155648, 0, 155648, 0, 0, 0, 0, 789, 647, 0, 616, 680, 791, 0, 0, 616, 0",
      /* 35397 */ "623, 0, 0, 680, 796, 0, 0, 0, 0, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936",
      /* 35414 */ "167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 497, 497, 804, 807, 497, 814, 497",
      /* 35429 */ "497, 497, 827, 830, 497, 497, 497, 839, 843, 521, 521, 887, 890, 521, 521, 521, 899, 903, 521, 521",
      /* 35449 */ "521, 521, 497, 827, 0, 0, 0, 0, 221568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 627, 0, 0, 0, 0, 0, 0, 521",
      /* 35477 */ "887, 521, 497, 497, 921, 497, 497, 839, 843, 926, 0, 521, 521, 521, 521, 933, 910, 53495, 2, 6, 0",
      /* 35498 */ "0, 0, 0, 0, 0, 0, 1439, 0, 0, 0, 0, 0, 401, 401, 401, 401, 0, 497, 497, 497, 497, 497, 497, 929",
      /* 35522 */ "521, 521, 899, 903, 934, 53495, 2, 6, 0, 0, 0, 0, 0, 0, 0, 1717, 0, 0, 0, 0, 0, 0, 0, 0, 2076, 0, 0",
      /* 35549 */ "0, 0, 0, 0, 0, 317, 985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1381, 0, 0, 0, 0, 1018, 0, 0, 0",
      /* 35579 */ "0, 0, 0, 0, 0, 0, 0, 0, 974, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 317, 1162, 497, 497, 497, 497, 497",
      /* 35606 */ "497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1988, 497, 1177, 497, 497, 497, 497, 497, 497",
      /* 35625 */ "497, 497, 497, 497, 497, 1193, 497, 497, 497, 497, 497, 1165, 497, 497, 497, 497, 497, 497, 497",
      /* 35644 */ "497, 497, 497, 1757, 1758, 497, 1760, 497, 497, 0, 0, 1374, 1375, 0, 1377, 0, 0, 0, 1379, 0, 676, 0",
      /* 35666 */ "0, 0, 0, 0, 1004, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1340, 1341, 0, 0, 0, 0, 0, 1398, 0, 0, 401, 401",
      /* 35693 */ "401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 1709, 0, 0, 651264, 0, 0, 0, 0, 0, 0, 0",
      /* 35716 */ "0, 0, 0, 0, 401, 1445, 401, 0, 0, 0, 0, 0, 0, 0, 0, 751, 0, 634, 774, 0, 0, 0, 0, 0, 111010, 111010",
      /* 35742 */ "111010, 111010, 111010, 418, 418, 418, 418, 418, 111010, 651665, 401, 401, 401, 401, 401, 401, 401",
      /* 35759 */ "401, 0, 0, 0, 0, 0, 0, 1136, 521, 521, 1557, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521",
      /* 35781 */ "521, 521, 521, 1843, 521, 1600, 521, 651785, 521, 521, 521, 521, 0, 0, 0, 1607, 0, 938, 0, 0, 0, 0",
      /* 35803 */ "0, 221604, 221604, 221604, 221604, 221604, 221604, 221604, 221604, 221604, 221604, 221604, 221604",
      /* 35816 */ "221604, 221604, 221604, 221604, 1609, 0, 942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1641, 0, 0, 0",
      /* 35840 */ "0, 1726, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 0, 0, 0, 0, 0, 0, 1136, 0, 1906, 0",
      /* 35863 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1642, 0, 0, 0, 0, 1997, 0, 1527, 521, 521, 521, 521, 521",
      /* 35889 */ "521, 521, 521, 521, 521, 521, 2286, 521, 521, 521, 521, 2122, 2123, 497, 497, 497, 497, 497, 497",
      /* 35908 */ "497, 497, 497, 497, 497, 497, 497, 497, 0, 1787, 2136, 497, 497, 497, 497, 497, 497, 497, 497, 497",
      /* 35928 */ "497, 497, 497, 497, 497, 497, 0, 1788, 497, 497, 497, 497, 2146, 497, 497, 497, 497, 0, 0, 0, 0",
      /* 35949 */ "2150, 521, 521, 521, 521, 1223, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2163",
      /* 35968 */ "521, 521, 521, 2173, 521, 521, 521, 521, 521, 497, 497, 497, 521, 521, 521, 0, 0, 2186, 0, 0, 0, 0",
      /* 35990 */ "307200, 0, 0, 2105344, 265, 266, 0, 0, 0, 0, 0, 0, 735, 0, 0, 735, 0, 0, 0, 0, 759, 0, 0, 0, 2413",
      /* 36015 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 742, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 36047 */ "0, 0, 742, 0, 497, 497, 497, 2423, 497, 497, 497, 497, 497, 497, 497, 497, 521, 521, 521, 2433, 521",
      /* 36068 */ "521, 521, 2465, 521, 521, 521, 521, 0, 0, 0, 0, 0, 0, 0, 0, 2193, 0, 0, 0, 0, 0, 0, 0, 2579, 2580",
      /* 36093 */ "497, 521, 497, 521, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 217088, 217088, 217088, 217088, 217088",
      /* 36113 */ "455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 477, 455, 455, 455, 455, 455",
      /* 36133 */ "455, 455, 455, 455, 455, 509, 518, 509, 509, 509, 509, 534, 509, 509, 509, 509, 509, 509, 509, 509",
      /* 36153 */ "534, 534, 534, 534, 534, 534, 534, 554, 554, 563, 53495, 53495, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 752",
      /* 36175 */ "0, 0, 0, 0, 0, 604, 755, 0, 0, 0, 604, 0, 0, 0, 0, 0, 250277, 250277, 250277, 250277, 250277",
      /* 36196 */ "249856, 249856, 249856, 249856, 250277, 250277, 847, 497, 497, 497, 0, 0, 497, 0, 521, 521, 521",
      /* 36213 */ "521, 521, 521, 521, 521, 2284, 521, 521, 521, 521, 521, 521, 521, 0, 0, 521, 521, 918, 497, 497",
      /* 36233 */ "497, 497, 497, 497, 497, 497, 0, 521, 521, 521, 521, 1254, 521, 521, 521, 521, 1260, 521, 521, 521",
      /* 36253 */ "521, 521, 497, 497, 521, 521, 0, 0, 0, 0, 0, 0, 0, 0, 2529, 497, 497, 497, 497, 497, 497, 957, 0, 0",
      /* 36277 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1345, 1015, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1029, 0",
      /* 36307 */ "0, 0, 0, 634880, 2414, 0, 0, 2417, 2418, 0, 0, 0, 0, 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 795, 0",
      /* 36334 */ "0, 0, 0, 0, 410001, 401, 401, 401, 0, 497, 497, 497, 497, 497, 497, 817, 497, 497, 497, 497, 832",
      /* 36355 */ "834, 497, 497, 844, 0, 0, 1034, 0, 0, 952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1064960, 401, 401, 401",
      /* 36379 */ "401, 401, 0, 1048, 0, 0, 0, 1052, 0, 0, 0, 0, 0, 0, 0, 0, 401, 401, 401, 401, 1694, 401, 401, 401",
      /* 36403 */ "0, 0, 0, 952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1392, 0, 1394, 0, 497, 497, 497, 1145, 497, 497",
      /* 36429 */ "497, 497, 1155, 497, 497, 497, 497, 497, 497, 497, 1185, 497, 497, 497, 1188, 497, 497, 497, 497",
      /* 36448 */ "497, 497, 497, 497, 1164, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1482, 497, 497",
      /* 36467 */ "497, 497, 497, 497, 497, 1179, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1191, 497, 497, 497, 0",
      /* 36487 */ "0, 0, 855, 91314, 1136, 858, 1205, 1207, 521, 521, 521, 521, 497, 521, 521, 497, 497, 497, 497, 497",
      /* 36507 */ "497, 497, 521, 521, 521, 2537, 521, 2538, 521, 521, 521, 0, 0, 0, 0, 0, 0, 0, 2051, 0, 0, 0, 0, 0",
      /* 36531 */ "0, 1232, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1247, 521, 521, 521, 901",
      /* 36551 */ "521, 521, 53495, 2, 6, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1268, 0, 0, 521",
      /* 36577 */ "1270, 521, 497, 497, 1145, 497, 497, 497, 497, 497, 521, 521, 521, 521, 1544, 521, 521, 521, 521",
      /* 36596 */ "521, 521, 521, 521, 521, 521, 521, 521, 1828, 521, 521, 521, 1213, 521, 521, 521, 521, 521, 0, 0",
      /* 36616 */ "1291, 0, 0, 0, 1297, 0, 0, 0, 0, 0, 258048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 341, 0, 0, 0, 346, 341, 0",
      /* 36644 */ "1622, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1669, 0, 0, 0, 1658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 36674 */ "0, 0, 0, 1947, 401, 401, 401, 1698, 1699, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401",
      /* 36694 */ "401, 0, 0, 1456, 0, 0, 0, 1136, 0, 1712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1681, 0, 1790, 0",
      /* 36722 */ "0, 1524, 0, 1796, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 2356, 521, 521, 521, 521, 2361, 521",
      /* 36743 */ "521, 497, 497, 497, 1977, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 2142, 497",
      /* 36762 */ "497, 497, 0, 0, 1797, 0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1229, 521, 521",
      /* 36783 */ "521, 521, 521, 521, 2021, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521",
      /* 36803 */ "2019, 0, 2239, 0, 0, 0, 401, 2242, 401, 401, 0, 497, 497, 497, 497, 497, 497, 2129, 497, 497, 497",
      /* 36824 */ "497, 497, 497, 497, 497, 1781, 497, 1783, 497, 497, 497, 0, 0, 2411, 0, 0, 0, 0, 0, 0, 2416, 0, 0",
      /* 36847 */ "0, 2419, 0, 0, 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 758, 0, 744, 0",
      /* 36876 */ "2447, 2448, 0, 851968, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 521, 521, 521, 521, 1575",
      /* 36895 */ "521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1230, 521, 521, 521, 0, 0, 677, 0, 0, 0",
      /* 36917 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2197, 0, 0, 497, 497, 497, 497, 811, 497, 497, 497, 497, 497, 497",
      /* 36941 */ "497, 497, 497, 497, 497, 1499, 497, 497, 497, 497, 497, 497, 497, 497, 851, 0, 0, 497, 0, 521, 521",
      /* 36962 */ "521, 521, 521, 871, 521, 521, 521, 521, 1576, 521, 521, 521, 521, 521, 521, 521, 1583, 521, 521",
      /* 36981 */ "1586, 1524, 91314, 1528, 1524, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521",
      /* 36999 */ "1842, 521, 521, 301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1360, 0, 317, 0, 0, 0, 0, 300, 0",
      /* 37027 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1395, 0, 0, 301, 300, 40960, 300, 300, 301, 300, 300, 0",
      /* 37053 */ "300, 0, 300, 413, 413, 413, 413, 413, 0, 0, 0, 0, 301, 300, 300, 300, 300, 300, 300, 300, 300, 300",
      /* 37075 */ "300, 300, 300, 300, 300, 413, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 496, 510, 300, 510",
      /* 37095 */ "510, 510, 510, 535, 510, 510, 510, 510, 510, 510, 510, 510, 535, 535, 535, 535, 535, 535, 535, 510",
      /* 37115 */ "510, 535, 53495, 53495, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 660, 0, 0, 664, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 37142 */ "0, 1102199, 1102199, 1102199, 1102199, 1102199, 1102199, 0, 605, 0, 0, 0, 0, 0, 0, 0, 695, 0, 0, 0",
      /* 37162 */ "0, 0, 0, 521, 521, 521, 521, 521, 521, 521, 521, 2004, 521, 750, 0, 0, 0, 0, 0, 0, 749, 0, 0, 0, 0",
      /* 37187 */ "757, 0, 0, 0, 0, 0, 258470, 258470, 258470, 258470, 258470, 258470, 258470, 258470, 258470, 258470",
      /* 37203 */ "258470, 258470, 258470, 258470, 258470, 258470, 0, 681, 0, 0, 0, 765, 0, 0, 750, 0, 0, 0, 0, 0, 0",
      /* 37224 */ "0, 1870, 0, 0, 0, 0, 0, 0, 0, 0, 1035, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 0",
      /* 37254 */ "775, 0, 0, 0, 401, 401, 401, 401, 401, 401, 401, 786, 401, 0, 0, 0, 0, 0, 0, 0, 671, 0, 0, 0, 0, 0",
      /* 37280 */ "0, 0, 2105344, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 401, 0, 0, 750, 0, 0, 0, 0, 750",
      /* 37308 */ "0, 0, 775, 0, 660, 0, 0, 0, 0, 1334, 1335, 0, 1337, 0, 0, 0, 0, 0, 0, 0, 0, 769, 0, 622, 0, 0, 0, 0",
      /* 37336 */ "0, 0, 0, 916, 521, 521, 497, 497, 497, 497, 834, 497, 844, 497, 0, 916, 521, 521, 521, 932, 902",
      /* 37357 */ "521, 53495, 2, 6, 0, 0, 0, 0, 0, 0, 0, 1038, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 135168, 0, 0, 0, 0, 0",
      /* 37384 */ "0, 521, 521, 894, 521, 904, 521, 53495, 2, 6, 0, 0, 0, 0, 0, 0, 0, 1884, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 37410 */ "1369, 0, 0, 0, 0, 0, 0, 0, 317, 0, 0, 0, 0, 0, 0, 0, 991, 0, 993, 0, 0, 0, 0, 0, 0, 1367, 0, 0, 0",
      /* 37439 */ "0, 0, 0, 0, 0, 0, 1324, 0, 0, 0, 0, 0, 0, 401, 401, 401, 401, 1129, 0, 0, 1021, 0, 0, 0, 1134, 0",
      /* 37465 */ "1136, 497, 497, 497, 497, 497, 1166, 497, 497, 1169, 497, 497, 497, 497, 497, 497, 497, 2344, 497",
      /* 37484 */ "497, 497, 497, 521, 521, 521, 521, 0, 0, 497, 497, 521, 521, 497, 521, 1175, 497, 497, 497, 497",
      /* 37504 */ "497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 837, 497, 521, 521, 1284, 521, 521, 1287, 0",
      /* 37524 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 2772992, 0, 0, 0, 0, 2113536, 0, 1383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 37552 */ "0, 0, 0, 1903, 0, 497, 497, 497, 1461, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497",
      /* 37573 */ "2347, 521, 521, 521, 497, 497, 497, 497, 1477, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497",
      /* 37592 */ "497, 1515, 497, 497, 497, 0, 0, 1506, 497, 497, 497, 497, 497, 497, 497, 1513, 497, 497, 1516, 497",
      /* 37612 */ "497, 0, 0, 521, 521, 521, 497, 497, 497, 497, 497, 497, 497, 497, 521, 521, 1524, 91314, 0, 1524",
      /* 37632 */ "521, 521, 521, 1531, 521, 521, 521, 521, 521, 521, 521, 521, 2406, 521, 521, 521, 497, 521, 0, 0",
      /* 37652 */ "1724, 1725, 0, 311697, 1727, 401, 401, 401, 401, 401, 401, 401, 401, 401, 0, 0, 0, 1457, 0, 0, 1136",
      /* 37673 */ "1735, 0, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 841, 497, 1819, 1820",
      /* 37693 */ "521, 1822, 521, 521, 521, 521, 521, 521, 521, 1827, 521, 521, 521, 521, 521, 0, 0, 2500, 2501, 0, 0",
      /* 37714 */ "0, 0, 497, 497, 497, 497, 2454, 497, 2456, 2457, 2458, 497, 521, 521, 521, 1833, 521, 521, 521, 521",
      /* 37734 */ "521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2164, 521, 521, 521, 1847, 497, 521, 521",
      /* 37753 */ "311793, 1851, 497, 497, 497, 497, 497, 311817, 1855, 0, 0, 0, 1894, 0, 0, 0, 1897, 0, 0, 0, 0, 1901",
      /* 37775 */ "0, 0, 0, 0, 0, 270336, 270336, 0, 0, 0, 0, 0, 0, 270336, 0, 0, 401, 1950, 401, 401, 401, 0, 0, 0",
      /* 37799 */ "497, 497, 497, 497, 497, 497, 497, 497, 1496, 1497, 497, 497, 497, 497, 497, 497, 497, 819, 497",
      /* 37818 */ "497, 497, 497, 497, 497, 497, 497, 1186, 497, 497, 497, 497, 1192, 497, 497, 1960, 497, 497, 497",
      /* 37837 */ "497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1161, 497, 2043, 521, 2045, 2046, 0, 0",
      /* 37857 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1443, 401, 401, 401, 521, 521, 2175, 521, 521, 521, 497, 497, 497",
      /* 37880 */ "521, 521, 521, 0, 0, 0, 0, 0, 2301, 0, 0, 0, 2238, 0, 0, 0, 0, 401, 401, 401, 2244, 0, 2246, 497",
      /* 37904 */ "497, 497, 497, 497, 497, 1511, 497, 497, 497, 497, 497, 497, 1518, 0, 0, 497, 2265, 497, 497, 497",
      /* 37924 */ "2269, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1241, 521, 521, 521, 521, 521, 0, 2412, 0",
      /* 37944 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 794, 0, 0, 0, 0, 0, 0, 1085440",
      /* 37974 */ "0, 0, 0, 0, 0, 1085440, 1085440, 1085440, 0, 2421, 497, 497, 497, 497, 497, 497, 497, 497, 2429",
      /* 37993 */ "497, 497, 2431, 521, 521, 521, 521, 521, 521, 521, 2168, 521, 521, 521, 521, 2171, 521, 521, 521",
      /* 38012 */ "521, 521, 521, 521, 2027, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2407, 521, 521, 497, 521, 0",
      /* 38032 */ "0, 2477, 497, 2479, 497, 497, 497, 497, 497, 497, 497, 497, 521, 2489, 521, 521, 521, 521, 521, 521",
      /* 38052 */ "521, 2469, 0, 0, 0, 0, 0, 0, 0, 0, 1055, 0, 0, 0, 0, 0, 401, 401, 497, 497, 497, 497, 2549, 497",
      /* 38076 */ "521, 521, 521, 521, 2555, 521, 2557, 0, 0, 2560, 0, 302, 303, 304, 305, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 38100 */ "0, 0, 1652, 0, 1653, 0, 0, 0, 317, 0, 0, 0, 0, 0, 320, 0, 0, 0, 0, 0, 0, 0, 0, 270336, 270336",
      /* 38125 */ "270336, 270336, 270336, 270336, 270336, 270336, 324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 38147 */ "1643, 303, 0, 0, 0, 320, 0, 337, 0, 302, 0, 0, 0, 0, 0, 347, 348, 0, 349, 0, 0, 0, 0, 349, 0, 0",
      /* 38173 */ "353, 0, 0, 0, 320, 357, 0, 0, 0, 0, 1085812, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1085440, 0, 0, 0, 0, 0",
      /* 38200 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 382, 40960, 382, 382, 0, 382, 382, 367, 382, 0, 382, 414, 414, 414, 414",
      /* 38224 */ "414, 0, 0, 302, 0, 0, 456, 456, 456, 456, 456, 456, 464, 469, 456, 456, 456, 456, 456, 464, 478",
      /* 38245 */ "464, 456, 456, 483, 469, 488, 469, 469, 469, 469, 469, 511, 469, 511, 511, 511, 511, 536, 511, 511",
      /* 38265 */ "511, 511, 511, 511, 511, 511, 536, 536, 536, 536, 536, 536, 536, 555, 555, 564, 53495, 53495, 2, 2",
      /* 38285 */ "3, 94212, 5, 6, 0, 0, 577, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1655, 401, 704, 401, 401",
      /* 38312 */ "401, 401, 401, 720, 401, 401, 401, 401, 401, 401, 401, 401, 401, 1704, 401, 401, 401, 401, 401, 0",
      /* 38332 */ "758, 0, 0, 0, 0, 0, 0, 704, 401, 401, 720, 401, 401, 401, 401, 401, 401, 1071, 401, 401, 401, 401",
      /* 38354 */ "401, 401, 401, 401, 401, 401, 401, 1086, 401, 0, 0, 0, 497, 800, 497, 497, 497, 497, 497, 823, 497",
      /* 38375 */ "497, 497, 497, 497, 497, 497, 497, 1512, 497, 497, 497, 497, 497, 497, 0, 0, 497, 497, 497, 497",
      /* 38395 */ "758, 0, 497, 0, 521, 521, 860, 521, 521, 521, 521, 521, 0, 0, 0, 0, 2502, 0, 0, 2505, 497, 497, 497",
      /* 38418 */ "883, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 800, 497, 0, 0, 521, 521, 521, 497",
      /* 38439 */ "497, 1274, 497, 497, 1277, 497, 497, 521, 521, 521, 521, 892, 894, 521, 521, 904, 521, 521, 521",
      /* 38458 */ "521, 912, 497, 0, 0, 521, 521, 521, 497, 1273, 497, 497, 497, 497, 497, 497, 521, 1281, 0, 0, 860",
      /* 38479 */ "521, 521, 800, 497, 497, 823, 497, 497, 497, 497, 0, 860, 521, 521, 521, 1221, 521, 521, 521, 1225",
      /* 38499 */ "521, 521, 521, 521, 521, 521, 521, 521, 1259, 521, 521, 521, 521, 521, 521, 497, 521, 883, 521, 521",
      /* 38519 */ "521, 521, 53495, 2, 6, 0, 0, 0, 0, 0, 0, 0, 1923, 1924, 0, 1926, 401, 401, 401, 401, 401, 0, 0, 944",
      /* 38543 */ "0, 0, 946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 956, 317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 994, 0, 0, 0, 0, 0",
      /* 38573 */ "1020, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1432, 0, 0, 0, 0, 0, 999, 0, 1001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 38603 */ "0, 0, 0, 2314, 0, 0, 1063, 401, 1067, 401, 1069, 401, 401, 401, 401, 401, 401, 401, 401, 401, 1076",
      /* 38624 */ "401, 0, 0, 0, 0, 0, 0, 0, 737, 0, 0, 0, 0, 0, 0, 0, 1378, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 38655 */ "328, 0, 0, 1105, 0, 1094, 1113, 0, 0, 0, 0, 401, 401, 401, 1076, 401, 401, 401, 401, 401, 1131, 0",
      /* 38677 */ "0, 0, 0, 0, 0, 0, 1136, 497, 497, 497, 1141, 497, 497, 1150, 497, 497, 1154, 497, 497, 497, 497",
      /* 38698 */ "497, 497, 497, 497, 1755, 497, 497, 497, 497, 497, 497, 497, 497, 1767, 1768, 497, 497, 497, 497",
      /* 38717 */ "497, 497, 497, 820, 497, 497, 497, 497, 497, 497, 497, 497, 1993, 0, 0, 0, 0, 0, 0, 0, 1218, 521",
      /* 38739 */ "521, 1222, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2017, 521, 521, 521",
      /* 38758 */ "1233, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 975369, 521, 1233",
      /* 38777 */ "521, 521, 521, 521, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1615, 1616, 0, 0, 0, 1620, 0, 1330, 0, 0, 0, 0, 0",
      /* 38804 */ "0, 0, 0, 0, 0, 0, 0, 0, 1344, 0, 0, 0, 0, 1110016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 0, 0",
      /* 38833 */ "0, 0, 0, 0, 1346, 0, 0, 1349, 0, 0, 0, 1353, 0, 0, 0, 1356, 0, 0, 0, 0, 0, 1059, 0, 0, 0, 0, 0, 0",
      /* 38861 */ "0, 0, 0, 0, 1057, 1058, 0, 0, 401, 401, 0, 1684, 0, 0, 0, 0, 0, 0, 401, 401, 401, 401, 401, 401",
      /* 38885 */ "401, 401, 401, 401, 401, 401, 0, 0, 0, 401, 401, 401, 401, 401, 401, 967057, 1732, 401, 401",
      /* 38904 */ "1073553, 0, 0, 0, 0, 1350, 0, 1352, 0, 0, 0, 0, 0, 1357, 0, 1359, 0, 0, 0, 1737, 497, 497, 497, 497",
      /* 38928 */ "497, 497, 497, 497, 497, 497, 497, 497, 497, 1770, 497, 497, 497, 497, 497, 497, 497, 1764, 497",
      /* 38947 */ "497, 497, 497, 497, 497, 497, 497, 497, 1772, 497, 497, 497, 0, 0, 1199, 855, 91314, 1136, 858, 521",
      /* 38967 */ "521, 521, 521, 521, 521, 497, 2179, 497, 521, 2182, 521, 0, 0, 0, 0, 497, 497, 497, 497, 1777, 497",
      /* 38988 */ "1779, 497, 497, 497, 497, 497, 497, 497, 1786, 0, 0, 0, 0, 2162688, 2428928, 2162688, 2162688",
      /* 39005 */ "2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2580480",
      /* 39016 */ "2162688, 0, 0, 0, 1524, 0, 0, 0, 0, 1799, 521, 521, 521, 521, 521, 521, 521, 897, 521, 521, 521",
      /* 39037 */ "521, 521, 497, 497, 0, 521, 521, 1834, 521, 521, 521, 521, 521, 521, 521, 1839, 521, 1841, 521, 521",
      /* 39057 */ "521, 521, 521, 521, 1238, 521, 521, 1240, 521, 1242, 521, 521, 521, 521, 497, 521, 521, 497, 497",
      /* 39076 */ "497, 497, 497, 967153, 1073649, 521, 521, 521, 521, 521, 967177, 1073673, 0, 1292, 0, 1298, 0, 0, 0",
      /* 39095 */ "0, 0, 0, 0, 1943, 0, 1945, 0, 0, 0, 0, 401, 401, 1891, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 39124 */ "1890, 401, 401, 401, 401, 1933, 401, 401, 401, 401, 401, 401, 401, 401, 0, 0, 0, 497, 1955, 497",
      /* 39144 */ "497, 497, 497, 497, 497, 0, 1941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401, 401, 1928, 401, 401, 401",
      /* 39169 */ "0, 2211, 0, 0, 0, 0, 0, 2216, 2217, 0, 0, 0, 0, 0, 0, 0, 2075, 0, 0, 0, 0, 0, 0, 0, 0, 180583",
      /* 39195 */ "180770, 180770, 180770, 180770, 180770, 180770, 180770, 521, 410097, 497, 497, 410121, 521, 521, 0",
      /* 39210 */ "0, 0, 0, 0, 0, 0, 0, 0, 1676, 0, 0, 0, 0, 0, 0, 0, 962560, 0, 1052672, 0, 2304, 0, 0, 0, 0, 0, 0, 0",
      /* 39238 */ "0, 0, 0, 1910, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401, 401, 401, 401, 401, 401, 2324, 0, 0, 0, 0, 0, 909312",
      /* 39264 */ "0, 401, 909713, 401, 2328, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1969, 497, 497",
      /* 39283 */ "497, 497, 497, 497, 497, 497, 497, 497, 2342, 497, 497, 497, 497, 497, 497, 521, 521, 521, 521",
      /* 39302 */ "2273, 521, 521, 521, 521, 521, 521, 497, 497, 497, 497, 497, 2425, 497, 2427, 497, 497, 497, 497",
      /* 39321 */ "521, 521, 521, 521, 0, 0, 497, 497, 521, 521, 2577, 2578, 521, 2435, 521, 2437, 521, 521, 521, 521",
      /* 39341 */ "0, 0, 0, 0, 0, 0, 0, 0, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 0, 2478",
      /* 39359 */ "497, 497, 497, 497, 497, 497, 497, 497, 497, 2488, 521, 521, 521, 521, 521, 521, 521, 1579, 521",
      /* 39378 */ "521, 521, 521, 521, 521, 521, 521, 2013, 521, 521, 521, 521, 521, 521, 521, 497, 497, 497, 497",
      /* 39397 */ "2512, 497, 497, 521, 521, 521, 521, 521, 521, 521, 2521, 521, 521, 521, 1236, 521, 521, 521, 521",
      /* 39416 */ "521, 521, 521, 521, 521, 1244, 521, 521, 521, 521, 521, 1224, 521, 521, 521, 521, 521, 521, 521",
      /* 39435 */ "521, 521, 521, 521, 1566, 1567, 521, 521, 521, 0, 350, 0, 0, 0, 0, 350, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 39460 */ "2062, 0, 0, 0, 0, 0, 0, 457, 457, 484, 457, 489, 457, 457, 457, 457, 457, 512, 457, 512, 512, 512",
      /* 39482 */ "512, 537, 512, 512, 512, 512, 512, 512, 512, 512, 537, 537, 537, 537, 537, 537, 537, 556, 556, 565",
      /* 39502 */ "53495, 53495, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 598, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 610, 611, 612",
      /* 39529 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 317, 317, 317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 995, 0, 0, 0, 0, 0",
      /* 39560 */ "2073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 892928, 0, 0, 0, 0, 0, 0, 578, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 39590 */ "0, 683, 0, 0, 0, 0, 1365, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 681, 0, 0, 0, 0, 578, 0, 0, 0, 768, 0, 0",
      /* 39620 */ "401, 401, 401, 401, 401, 401, 729, 401, 401, 401, 401, 712, 401, 401, 401, 401, 401, 401, 401, 401",
      /* 39640 */ "401, 401, 401, 401, 401, 1937, 0, 0, 401, 0, 768, 0, 790, 0, 746, 792, 0, 0, 0, 0, 0, 790, 0, 0, 0",
      /* 39665 */ "0, 1385, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 952, 0, 0, 0, 0, 497, 801, 497, 497, 497, 497, 818, 824",
      /* 39691 */ "826, 497, 497, 497, 497, 497, 840, 497, 497, 497, 497, 497, 1979, 497, 497, 497, 497, 497, 497, 497",
      /* 39711 */ "497, 497, 497, 2397, 521, 521, 521, 521, 521, 497, 497, 497, 497, 578, 0, 497, 0, 521, 521, 861",
      /* 39731 */ "521, 521, 521, 521, 878, 884, 886, 521, 521, 521, 521, 521, 900, 521, 521, 521, 521, 521, 801, 497",
      /* 39751 */ "0, 0, 521, 521, 521, 1272, 497, 497, 1275, 497, 497, 497, 497, 1280, 521, 0, 0, 861, 521, 521, 801",
      /* 39772 */ "497, 497, 824, 497, 840, 497, 497, 0, 861, 521, 521, 521, 1253, 521, 521, 521, 1256, 521, 521, 521",
      /* 39792 */ "521, 521, 521, 521, 497, 521, 521, 497, 497, 497, 497, 521, 521, 521, 884, 521, 900, 521, 521",
      /* 39811 */ "53495, 2, 6, 0, 0, 0, 0, 0, 0, 0, 2192, 0, 933888, 0, 2195, 0, 0, 0, 0, 317, 0, 0, 0, 988, 989, 0",
      /* 39837 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 2218, 0, 0, 0, 0, 2223, 0, 0, 0, 0, 1035, 0, 0, 0, 0, 0, 1040, 0, 0, 0",
      /* 39866 */ "0, 0, 0, 632, 633, 0, 0, 0, 0, 638, 0, 0, 0, 1078, 401, 401, 401, 401, 401, 1082, 1083, 401, 401",
      /* 39889 */ "401, 401, 401, 0, 0, 0, 1132, 0, 0, 0, 0, 1136, 497, 497, 0, 947, 989, 1106, 0, 1114, 0, 988, 1117",
      /* 39912 */ "1118, 401, 401, 1121, 401, 401, 401, 401, 401, 1451, 401, 401, 401, 1455, 0, 0, 0, 0, 0, 1136, 401",
      /* 39933 */ "401, 401, 1128, 401, 0, 765952, 0, 0, 0, 0, 0, 969, 1136, 497, 497, 497, 497, 497, 1167, 497, 497",
      /* 39954 */ "497, 497, 497, 497, 497, 497, 497, 497, 2140, 497, 497, 497, 497, 497, 497, 1140, 497, 497, 497",
      /* 39973 */ "497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1173, 497, 497, 497, 1180, 1181, 497",
      /* 39992 */ "497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1984, 497, 497, 497, 497, 497, 497, 1197",
      /* 40011 */ "497, 0, 0, 0, 855, 91314, 1136, 858, 521, 521, 1208, 521, 521, 521, 521, 521, 521, 1546, 521, 521",
      /* 40031 */ "521, 521, 521, 521, 521, 521, 521, 1261, 521, 521, 521, 521, 521, 497, 521, 1234, 521, 521, 1237",
      /* 40050 */ "521, 521, 521, 521, 521, 521, 521, 521, 521, 1248, 1249, 521, 1283, 521, 521, 521, 521, 0, 0, 0",
      /* 40070 */ "1292, 0, 0, 0, 1298, 0, 0, 0, 0, 1427, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912, 0, 0, 1915, 0, 0",
      /* 40097 */ "1347, 0, 0, 0, 0, 0, 0, 724992, 1354, 0, 0, 0, 0, 0, 0, 648, 0, 0, 651, 0, 0, 0, 0, 0, 0, 338, 0, 0",
      /* 40125 */ "0, 0, 0, 0, 0, 45056, 49152, 0, 1362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2081, 0, 401, 401",
      /* 40152 */ "401, 1413, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 0, 581632, 0, 0, 0, 0, 1136, 1424",
      /* 40173 */ "1425, 0, 0, 0, 1428, 0, 0, 0, 0, 0, 0, 0, 1434, 0, 1434, 1424, 0, 0, 0, 1437, 0, 0, 0, 1440, 0, 0",
      /* 40199 */ "0, 0, 401, 401, 1446, 401, 401, 401, 1449, 401, 401, 401, 401, 401, 0, 0, 0, 0, 0, 0, 1136, 497",
      /* 40221 */ "497, 497, 497, 1463, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 2346, 497, 521, 521",
      /* 40240 */ "521, 521, 497, 497, 1476, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1485, 497, 497, 497, 0, 1088",
      /* 40260 */ "0, 855, 91314, 1136, 858, 1206, 521, 521, 521, 521, 521, 0, 0, 0, 0, 0, 0, 0, 0, 497, 497, 497, 497",
      /* 40283 */ "497, 497, 497, 497, 1507, 1508, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 0, 0, 0",
      /* 40303 */ "1791, 0, 0, 0, 1524, 91314, 0, 1524, 521, 521, 521, 521, 1533, 521, 521, 521, 521, 521, 521, 521",
      /* 40323 */ "901, 521, 521, 521, 521, 521, 497, 497, 0, 1555, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521",
      /* 40343 */ "521, 521, 521, 521, 521, 1831, 521, 1601, 521, 521, 1603, 521, 521, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2311",
      /* 40366 */ "0, 0, 0, 0, 2315, 0, 0, 0, 1635, 0, 0, 0, 0, 0, 0, 0, 1638, 0, 0, 0, 0, 0, 0, 1387, 1388, 0, 0, 0",
      /* 40394 */ "0, 0, 0, 0, 0, 978, 0, 0, 0, 0, 0, 0, 317, 0, 1644, 0, 1645, 1646, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 40423 */ "1900, 0, 0, 0, 0, 577536, 0, 0, 1670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1680, 0, 0, 0, 0, 1611, 0, 0, 0, 0",
      /* 40451 */ "0, 0, 0, 0, 0, 0, 0, 981, 0, 0, 0, 317, 0, 0, 0, 401, 401, 401, 401, 401, 401, 401, 401, 1733, 401",
      /* 40476 */ "401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738, 0, 0, 0, 0, 401, 401, 401, 401, 401, 401, 401, 401, 401",
      /* 40502 */ "401, 401, 573440, 0, 0, 1736, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1744, 497, 497, 1747",
      /* 40521 */ "497, 497, 497, 497, 497, 2254, 497, 497, 2257, 497, 497, 497, 497, 497, 497, 2262, 497, 1775, 497",
      /* 40540 */ "497, 497, 1778, 497, 497, 497, 1782, 497, 497, 497, 497, 0, 0, 497, 0, 521, 521, 521, 521, 521, 521",
      /* 40561 */ "521, 521, 0, 0, 0, 2472, 0, 0, 2475, 2476, 0, 1791, 0, 1524, 0, 0, 1797, 0, 521, 521, 521, 521, 521",
      /* 40584 */ "521, 521, 521, 2441, 0, 2443, 0, 0, 0, 0, 2446, 521, 1806, 521, 521, 1809, 521, 521, 521, 521, 521",
      /* 40605 */ "521, 521, 521, 1817, 521, 521, 521, 521, 1848, 1849, 521, 497, 497, 497, 497, 497, 497, 497, 521",
      /* 40624 */ "521, 521, 521, 2010, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2289, 521",
      /* 40643 */ "521, 0, 1892, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1902, 0, 0, 0, 0, 1660, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 40673 */ "0, 1042, 0, 0, 0, 0, 1905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1904, 401, 1931, 401, 401",
      /* 40700 */ "401, 401, 401, 401, 401, 401, 401, 401, 401, 0, 0, 1939, 521, 521, 521, 2023, 521, 521, 521, 521",
      /* 40720 */ "521, 521, 521, 521, 521, 521, 521, 521, 521, 2032, 521, 521, 2068, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 40744 */ "0, 0, 0, 0, 2067, 0, 2097, 0, 0, 0, 401, 401, 401, 2104, 401, 401, 401, 401, 401, 401, 401, 718",
      /* 40766 */ "401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 1418, 401, 401, 401, 401, 0, 0, 497, 497, 497",
      /* 40786 */ "497, 497, 2128, 497, 2130, 497, 497, 497, 2133, 497, 497, 497, 0, 335872, 0, 855, 91314, 1136, 858",
      /* 40805 */ "521, 521, 521, 521, 521, 521, 521, 1288, 1606, 0, 0, 0, 0, 1294, 1608, 0, 521, 521, 2155, 521, 2157",
      /* 40826 */ "521, 521, 521, 2160, 521, 521, 521, 521, 521, 521, 521, 1239, 521, 521, 521, 521, 521, 521, 521",
      /* 40845 */ "521, 1826, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2176, 521, 521, 497, 497, 497, 521",
      /* 40864 */ "521, 521, 0, 0, 0, 0, 0, 1093, 0, 0, 0, 0, 0, 0, 0, 0, 1099, 0, 0, 0, 2201, 0, 0, 2203, 0, 0, 0, 0",
      /* 40892 */ "0, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 497, 497, 497, 2253, 497, 497, 497, 497, 497, 497, 497",
      /* 40916 */ "497, 497, 497, 497, 497, 2430, 497, 521, 521, 521, 521, 497, 497, 2266, 497, 497, 521, 521, 2271",
      /* 40935 */ "521, 521, 521, 521, 521, 521, 2276, 521, 521, 521, 1543, 521, 521, 521, 521, 521, 521, 521, 521",
      /* 40954 */ "521, 1551, 521, 521, 521, 521, 2024, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521",
      /* 40973 */ "1243, 521, 521, 521, 2303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2199, 0, 0, 0, 401, 401",
      /* 40999 */ "401, 401, 401, 2323, 401, 0, 0, 2325, 0, 0, 0, 0, 0, 286720, 286720, 286720, 286720, 286720, 0, 0",
      /* 41019 */ "0, 0, 0, 286720, 471040, 401, 401, 401, 0, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497",
      /* 41039 */ "1481, 497, 497, 497, 497, 497, 497, 497, 2338, 497, 497, 497, 497, 2343, 497, 497, 497, 497, 497",
      /* 41058 */ "521, 521, 521, 521, 0, 0, 497, 2575, 521, 2576, 497, 521, 2372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 41082 */ "2381, 0, 0, 401, 401, 401, 0, 497, 497, 2331, 497, 497, 497, 497, 497, 497, 497, 497, 1967, 497",
      /* 41102 */ "497, 497, 1970, 1971, 497, 497, 2523, 0, 0, 0, 0, 2525, 0, 0, 2528, 497, 497, 497, 497, 497, 497",
      /* 41123 */ "2533, 2534, 497, 521, 521, 521, 521, 521, 521, 2539, 2540, 521, 0, 0, 2542, 2543, 0, 0, 0, 0",
      /* 41143 */ "2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163486, 2163545",
      /* 41154 */ "2163545, 2163545, 2163545, 2163545, 0, 0, 310, 0, 0, 0, 0, 0, 0, 0, 0, 310, 0, 0, 45056, 49152, 0",
      /* 41175 */ "310, 0, 0, 40960, 0, 0, 0, 0, 0, 390, 0, 0, 0, 416, 416, 416, 416, 416, 434, 434, 434, 441, 441",
      /* 41198 */ "458, 458, 458, 434, 434, 434, 434, 434, 434, 458, 458, 434, 434, 434, 441, 434, 458, 480, 434, 434",
      /* 41218 */ "434, 434, 458, 434, 490, 490, 490, 490, 490, 513, 490, 513, 513, 513, 513, 538, 513, 513, 513, 513",
      /* 41238 */ "513, 513, 513, 513, 538, 538, 538, 549, 549, 549, 549, 513, 513, 538, 53495, 53495, 2, 2, 3, 94212",
      /* 41258 */ "5, 6, 0, 0, 627, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2224, 401, 0, 0, 655, 0, 0, 0, 0, 0",
      /* 41288 */ "0, 0, 0, 0, 0, 0, 0, 1618, 0, 0, 0, 0, 0, 0, 945, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1631, 0, 1633",
      /* 41318 */ "0, 401, 1065, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 1077, 401, 497",
      /* 41338 */ "497, 497, 1146, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1769, 497, 497, 497",
      /* 41357 */ "1773, 497, 497, 497, 497, 1198, 0, 0, 0, 855, 91314, 1136, 858, 521, 521, 521, 521, 521, 1214, 521",
      /* 41377 */ "521, 521, 521, 521, 0, 0, 0, 0, 1293, 0, 0, 0, 1299, 0, 0, 0, 0, 2163545, 2429785, 2163545, 2163545",
      /* 41398 */ "2163545, 2163545, 2163545, 2163545, 2163545, 2163545, 2163545, 2163545, 2163545, 2163545, 2163545",
      /* 41409 */ "2163486, 2163486, 0, 0, 0, 1317, 0, 0, 0, 0, 0, 1323, 0, 0, 0, 0, 0, 0, 0, 2205, 2206, 0, 2207, 0",
      /* 41433 */ "905216, 0, 0, 0, 401, 1411, 401, 401, 401, 401, 401, 401, 401, 1417, 401, 401, 401, 401, 401, 0, 0",
      /* 41454 */ "401, 0, 2385, 497, 497, 497, 497, 497, 497, 497, 1168, 497, 497, 497, 497, 497, 497, 497, 497, 1480",
      /* 41474 */ "497, 497, 497, 497, 497, 497, 497, 497, 1490, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1500",
      /* 41493 */ "497, 497, 497, 497, 0, 0, 497, 0, 521, 521, 521, 864, 867, 521, 874, 521, 0, 0, 1792, 1524, 0, 0, 0",
      /* 41516 */ "1798, 521, 521, 521, 521, 521, 521, 521, 521, 2470, 0, 2471, 0, 0, 0, 0, 0, 521, 521, 521, 1808",
      /* 41537 */ "521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 2172, 521, 521, 0, 1878, 0, 0, 0",
      /* 41558 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2094, 0, 0, 2082, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2198",
      /* 41588 */ "0, 0, 497, 497, 2125, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1968, 497, 497",
      /* 41608 */ "497, 497, 497, 497, 521, 2401, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 497, 521, 0, 0, 0",
      /* 41629 */ "0, 1671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1682, 497, 497, 497, 497, 497, 2513, 497, 521, 521, 521, 521",
      /* 41653 */ "521, 521, 521, 521, 2522, 497, 497, 497, 497, 2564, 497, 521, 521, 521, 521, 2568, 521, 0, 0, 0, 0",
      /* 41674 */ "0, 1306, 1307, 0, 0, 0, 0, 0, 1313, 0, 0, 0, 0, 0, 361, 0, 0, 0, 0, 0, 0, 0, 0, 361, 0, 0, 45056",
      /* 41701 */ "49152, 0, 361, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401, 401, 1692, 1693, 401, 401, 401, 401, 0",
      /* 41725 */ "343, 0, 0, 0, 0, 0, 0, 0, 0, 514, 0, 514, 514, 514, 514, 539, 514, 514, 514, 514, 514, 514, 514",
      /* 41748 */ "514, 539, 539, 539, 539, 539, 539, 539, 514, 514, 539, 53495, 53495, 2, 2, 3, 94212, 5, 6, 0, 0",
      /* 41769 */ "497, 497, 497, 497, 812, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 1983, 497, 497, 497",
      /* 41789 */ "497, 497, 497, 401, 401, 401, 1068, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401",
      /* 41809 */ "1075, 401, 401, 1091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 521, 1219, 521, 521, 521",
      /* 41834 */ "521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1231, 521, 521, 1235, 521, 521, 521, 521",
      /* 41853 */ "521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 1246, 521, 521, 1235, 521, 521, 521, 521, 0, 0, 0",
      /* 41874 */ "0, 0, 0, 0, 0, 0, 0, 565248, 0, 0, 0, 0, 0, 0, 401, 401, 1412, 401, 401, 401, 401, 401, 401, 401",
      /* 41898 */ "401, 401, 401, 401, 401, 0, 0, 401, 2384, 497, 497, 497, 497, 497, 497, 497, 497, 2139, 497, 497",
      /* 41918 */ "497, 497, 497, 497, 497, 0, 2373, 2374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401, 1927, 401, 401",
      /* 41942 */ "401, 401, 0, 0, 0, 383, 40960, 383, 383, 0, 383, 383, 313, 383, 0, 383, 417, 417, 417, 417, 417, 0",
      /* 41964 */ "0, 0, 0, 0, 459, 459, 459, 459, 459, 459, 459, 470, 459, 459, 459, 459, 459, 459, 481, 459, 459",
      /* 41985 */ "459, 459, 470, 459, 491, 491, 491, 495, 491, 515, 491, 515, 515, 515, 515, 540, 515, 515, 515, 515",
      /* 42005 */ "515, 515, 515, 515, 540, 540, 540, 540, 540, 540, 540, 557, 557, 566, 53495, 53495, 2, 2, 3, 94212",
      /* 42025 */ "5, 6, 0, 0, 0, 0, 521, 521, 521, 497, 497, 497, 497, 497, 841, 497, 497, 0, 521, 521, 521, 521",
      /* 42047 */ "2036, 521, 521, 497, 521, 521, 497, 497, 497, 497, 521, 521, 521, 521, 521, 521, 1811, 521, 521",
      /* 42066 */ "521, 521, 521, 521, 521, 521, 521, 907, 521, 521, 521, 497, 497, 0, 1047, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 42090 */ "0, 0, 0, 0, 401, 401, 401, 401, 1405, 401, 401, 401, 401, 401, 401, 401, 401, 1454, 0, 0, 0, 0",
      /* 42112 */ "1070393, 0, 1136, 497, 497, 1990, 497, 497, 497, 497, 497, 497, 0, 0, 0, 0, 0, 0, 0, 696320",
      /* 42132 */ "1015808, 0, 0, 0, 0, 0, 0, 2316, 2034, 521, 521, 521, 521, 521, 521, 497, 521, 521, 497, 497, 497",
      /* 42153 */ "497, 521, 521, 521, 521, 2166, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 911, 497",
      /* 42173 */ "497, 0, 541, 516, 516, 516, 516, 516, 516, 516, 516, 541, 541, 541, 541, 541, 541, 541, 516, 516",
      /* 42193 */ "541, 53495, 53495, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 42220 */ "2308, 0, 401, 401, 401, 401, 713, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 1421",
      /* 42240 */ "401, 401, 0, 0, 0, 739, 0, 0, 0, 0, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 1706",
      /* 42262 */ "1707, 401, 401, 0, 497, 497, 497, 497, 813, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497",
      /* 42282 */ "2258, 2259, 497, 497, 497, 497, 497, 0, 0, 0, 1002, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1679, 0, 0",
      /* 42308 */ "0, 0, 1032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2382, 401, 0, 0, 0, 1524, 1794, 0, 0, 0, 521",
      /* 42336 */ "521, 521, 521, 521, 521, 521, 521, 1258, 521, 521, 521, 521, 521, 521, 521, 497, 521, 521, 497, 497",
      /* 42356 */ "2040, 497, 521, 521, 0, 581, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 49152, 497, 497, 497",
      /* 42381 */ "497, 1493, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 2345, 497, 497, 521, 521, 521",
      /* 42400 */ "521, 1524, 91314, 0, 1524, 521, 521, 521, 521, 521, 521, 521, 521, 1537, 521, 521, 521, 521, 521",
      /* 42419 */ "521, 1605, 0, 1606, 0, 0, 0, 0, 0, 1608, 0, 1621, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 42446 */ "233472, 1697, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 0, 0, 0, 497",
      /* 42466 */ "497, 497, 1751, 1752, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 2395, 497, 497, 521",
      /* 42485 */ "521, 521, 521, 521, 521, 521, 521, 521, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1949, 401, 401, 401, 401",
      /* 42509 */ "0, 0, 0, 497, 497, 497, 497, 497, 497, 497, 497, 1184, 497, 497, 497, 497, 497, 497, 497, 497, 497",
      /* 42530 */ "1156, 497, 497, 497, 497, 497, 497, 497, 1975, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497",
      /* 42549 */ "497, 497, 497, 497, 1194, 497, 1085440, 317, 0, 0, 1085440, 0, 0, 0, 0, 0, 1085440, 0, 0, 0, 0, 0",
      /* 42571 */ "1085440, 0, 1085440, 0, 0, 0, 1085440, 1085812, 1085812, 0, 0, 1085440, 0, 0, 1085440, 0, 0, 0, 0",
      /* 42590 */ "0, 1085440, 0, 0, 0, 0, 0, 1320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1887, 0, 0, 0, 0, 0, 0, 1085440, 0",
      /* 42617 */ "1085440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2441216, 0, 1085440, 1085440, 0, 0, 0",
      /* 42640 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 937984, 0, 0, 1085440, 0, 0, 1085440, 1085440, 0, 0, 0, 2, 4263936, 3",
      /* 42664 */ "94212, 5, 6, 0, 0, 0, 0, 1714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1391, 0, 0, 0, 0, 0, 0, 0, 1089536",
      /* 42692 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1888, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688",
      /* 42713 */ "2162688, 0, 4263936, 6, 0, 0, 0, 0, 0, 0, 0, 2105344, 265, 266, 0, 0, 212992, 0, 0, 0, 2162688",
      /* 42734 */ "2162688, 2162688, 2162688, 2162688, 2162688, 4263936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2379776, 0, 0, 0",
      /* 42753 */ "0, 0, 0, 0, 1093632, 0, 1093632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1101824, 373, 373, 1094067",
      /* 42777 */ "1094067, 1094067, 1094067, 1094067, 1094067, 1094067, 1094067, 1094067, 1094067, 0, 1094067, 0, 0",
      /* 42790 */ "0, 0, 0, 1326, 0, 0, 0, 0, 0, 0, 0, 401, 401, 401, 401, 0, 497, 497, 497, 497, 2250, 497, 0, 0, 0",
      /* 42815 */ "1094067, 1094067, 1094067, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 1881, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 42840 */ "0, 0, 2063, 0, 0, 0, 0, 0, 0, 1097728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2613248, 0, 0, 0",
      /* 42867 */ "1101824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2658304, 0, 2785280, 1102199, 0, 0, 0, 373, 0, 0",
      /* 42892 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 163840, 163840, 163840, 163840, 163840, 1102199, 1102199, 1102199",
      /* 42909 */ "1102199, 1102199, 1102199, 1102199, 1102199, 1102199, 1102199, 1102199, 1102199, 1102199, 1102199",
      /* 42920 */ "1102199, 1102199, 0, 1102199, 0, 0, 0, 0, 0, 1101824, 375, 1102199, 1102199, 1102199, 0, 0, 2, 2, 3",
      /* 42939 */ "94212, 5, 6, 0, 0, 0, 0, 1908, 0, 0, 0, 0, 0, 1911, 0, 0, 0, 0, 0, 0, 1095, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 42968 */ "0, 2305, 2306, 0, 0, 0, 0, 0, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496",
      /* 42984 */ "106496, 106496, 0, 106496, 0, 0, 0, 0, 0, 1351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2078, 0, 0, 0, 0, 0",
      /* 43010 */ "0, 0, 0, 106496, 106496, 106496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2105344, 265, 21056, 0, 0, 0, 0, 0",
      /* 43034 */ "0"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 43035; ++i) {TRANSITION[i] = Integer.parseInt(s2[i]);}
  }

  private static final int[] EXPECTED = new int[5852];
  static
  {
    final String s1[] =
    {
      /*    0 */ "182, 190, 198, 703, 206, 749, 214, 233, 241, 710, 249, 257, 220, 857, 265, 283, 658, 291, 299, 307",
      /*   20 */ "315, 323, 331, 1173, 364, 1177, 373, 1407, 426, 373, 374, 373, 373, 841, 373, 372, 798, 369, 373",
      /*   39 */ "373, 1029, 351, 359, 1317, 382, 430, 390, 398, 755, 412, 793, 438, 566, 343, 275, 1364, 404, 770",
      /*   58 */ "460, 475, 467, 543, 483, 512, 520, 528, 536, 452, 976, 551, 559, 574, 582, 590, 598, 606, 621, 629",
      /*   78 */ "637, 645, 653, 666, 674, 689, 682, 718, 726, 734, 1232, 742, 947, 962, 763, 1294, 778, 490, 786, 810",
      /*   98 */ "818, 826, 834, 1393, 850, 1379, 865, 873, 881, 889, 897, 905, 925, 913, 921, 933, 941, 955, 984, 992",
      /*  118 */ "1000, 1008, 1024, 1411, 1037, 445, 1045, 1053, 1061, 1069, 1083, 1091, 1111, 1099, 1107, 1075, 504",
      /*  135 */ "497, 1119, 1127, 1135, 1143, 1151, 1159, 1185, 1193, 1201, 1209, 1217, 1225, 1240, 1248, 1256, 1264",
      /*  152 */ "1272, 1280, 1288, 1302, 1310, 1325, 1333, 1341, 1015, 1016, 1349, 1357, 613, 1372, 1166, 270, 1387",
      /*  169 */ "1401, 1419, 696, 337, 1423, 969, 1436, 1431, 419, 802, 225, 373, 845, 1444, 1448, 1450, 1450, 1450",
      /*  187 */ "1454, 1450, 1450, 1458, 1462, 1466, 1470, 1474, 1478, 1482, 1486, 1490, 1503, 1503, 1987, 1503, 1503",
      /*  204 */ "2126, 1501, 1519, 1681, 1529, 1522, 1503, 1503, 1940, 1533, 3597, 1549, 1623, 1623, 1623, 1557, 1655",
      /*  221 */ "1655, 1655, 1636, 1640, 1503, 1503, 1503, 1771, 1503, 1503, 1503, 1771, 1656, 1568, 1560, 1503, 1503",
      /*  238 */ "1503, 1503, 1787, 1583, 1503, 1593, 1595, 1503, 3596, 1545, 1623, 1608, 1563, 1503, 1503, 1503, 1503",
      /*  255 */ "1616, 3318, 1595, 1503, 2136, 1622, 1623, 1623, 1624, 1628, 1653, 1655, 1655, 1660, 1664, 1503, 1503",
      /*  272 */ "1503, 1896, 3686, 1503, 1503, 1503, 1955, 1503, 1503, 2589, 1503, 3598, 2134, 1694, 1623, 1707, 1655",
      /*  289 */ "1655, 1669, 1685, 1503, 1503, 3315, 1693, 1695, 1655, 1699, 2133, 1705, 2384, 1600, 2171, 1695, 1630",
      /*  306 */ "2383, 1630, 1552, 1711, 1553, 1712, 1571, 2385, 2385, 1716, 1720, 1724, 1728, 1610, 1610, 1525, 1732",
      /*  323 */ "1610, 1612, 1736, 1740, 1744, 1751, 1748, 1755, 1759, 2602, 1766, 1503, 1503, 1775, 1503, 1503, 1769",
      /*  340 */ "1503, 1503, 3715, 1503, 1503, 2432, 1950, 3611, 3373, 2614, 2886, 3277, 1796, 1503, 1802, 1806, 1810",
      /*  357 */ "1814, 1818, 1822, 1826, 1830, 2446, 1503, 1503, 1503, 1503, 2406, 1781, 1503, 1503, 1503, 2208, 1503",
      /*  374 */ "1503, 1503, 1503, 1503, 1503, 1503, 1503, 2251, 1861, 2805, 1503, 1867, 2084, 1873, 1877, 1881, 3042",
      /*  391 */ "1503, 1886, 1497, 2777, 1503, 1503, 3530, 1890, 1503, 1503, 2029, 1946, 3328, 1503, 1503, 2452, 1503",
      /*  408 */ "2575, 1965, 1969, 3415, 1496, 2810, 1911, 1503, 1503, 1503, 1910, 1503, 1503, 2800, 1510, 1503, 1503",
      /*  425 */ "1770, 1503, 1503, 2907, 1503, 1503, 1503, 1503, 1503, 3240, 1846, 3184, 1503, 1777, 1503, 1932, 3424",
      /*  442 */ "3401, 2508, 1939, 1503, 1503, 2916, 2976, 3021, 2185, 2521, 1503, 1503, 3058, 1503, 1503, 3664, 3666",
      /*  459 */ "2901, 2416, 1503, 2898, 1992, 1996, 2003, 2285, 2104, 2017, 2022, 1503, 1503, 1503, 1927, 2027, 2105",
      /*  476 */ "2898, 2020, 2936, 2759, 2012, 2760, 2938, 2049, 2045, 2053, 2056, 1503, 1928, 1964, 1503, 1503, 3160",
      /*  493 */ "2562, 2570, 2473, 2580, 1503, 1503, 3178, 1503, 3182, 3188, 2654, 3166, 2226, 1493, 1836, 3172, 1503",
      /*  510 */ "1643, 3232, 2608, 1503, 2062, 1798, 2067, 2082, 2572, 2088, 2092, 2096, 2008, 3040, 2360, 1503, 3682",
      /*  527 */ "3666, 2900, 2103, 1503, 2595, 1503, 3529, 2367, 2109, 2370, 1503, 2574, 2116, 3303, 1503, 3057, 1503",
      /*  544 */ "1503, 3209, 2033, 3088, 1962, 2038, 2042, 2113, 2123, 2132, 2732, 2141, 1503, 1503, 2731, 2140, 1503",
      /*  561 */ "1503, 3698, 2170, 2900, 2145, 1503, 1503, 3445, 1503, 1503, 1503, 1944, 3696, 2007, 3477, 2151, 2398",
      /*  578 */ "2155, 2160, 2169, 2552, 2176, 1503, 1503, 1503, 2182, 1503, 1503, 3698, 3615, 2189, 1906, 2717, 2195",
      /*  595 */ "2202, 2206, 2212, 2216, 2221, 1503, 1503, 3540, 2230, 1503, 1792, 2236, 1905, 2717, 1913, 2621, 3700",
      /*  612 */ "3448, 1503, 1503, 3656, 1767, 1503, 1503, 3267, 3604, 1503, 3449, 1503, 1869, 2240, 2250, 2255, 2624",
      /*  629 */ "2962, 2262, 1505, 2274, 2627, 1984, 2842, 3520, 2279, 1503, 2283, 2217, 2444, 2289, 2312, 2293, 2298",
      /*  646 */ "2302, 2306, 2310, 2317, 2677, 2527, 2678, 2528, 3384, 3174, 3174, 2321, 1503, 1503, 1503, 3319, 1676",
      /*  663 */ "1623, 1679, 1655, 3016, 1503, 1503, 2325, 2832, 3667, 2329, 2337, 2341, 2345, 2349, 2353, 2355, 1503",
      /*  680 */ "1503, 3017, 2364, 2380, 3572, 2389, 3623, 1503, 3689, 1503, 1762, 2268, 2749, 2775, 2359, 3120, 1503",
      /*  697 */ "1503, 3709, 3365, 1503, 1503, 3569, 1503, 1594, 1509, 1503, 1503, 2135, 1514, 1623, 1623, 1624, 1599",
      /*  714 */ "1655, 1655, 1655, 1604, 2393, 1503, 3577, 1503, 2264, 2403, 3367, 2232, 2502, 1503, 2414, 2165, 1503",
      /*  731 */ "2420, 2427, 2431, 2436, 1503, 1503, 1504, 2437, 1503, 1503, 2441, 2070, 1540, 2891, 3064, 2482, 2333",
      /*  748 */ "2488, 1503, 1863, 1538, 2245, 1594, 1544, 1503, 1503, 1564, 1503, 1935, 1904, 2058, 3125, 3266, 2739",
      /*  765 */ "2512, 1503, 1503, 1503, 2518, 1503, 1982, 1503, 1975, 1503, 1991, 2076, 1982, 2373, 1503, 1504, 2547",
      /*  782 */ "1503, 1503, 2867, 2556, 3512, 1503, 1503, 3513, 1503, 2600, 2423, 1503, 2034, 1917, 2207, 1925, 1503",
      /*  799 */ "1503, 1503, 2475, 1503, 1503, 1503, 1503, 3727, 1503, 3733, 1503, 2507, 2593, 2944, 2375, 3505, 1503",
      /*  816 */ "3147, 2599, 2606, 2612, 2618, 3504, 1964, 3108, 2631, 3658, 3652, 2861, 2635, 1768, 3398, 2639, 2646",
      /*  833 */ "2409, 2647, 2410, 2752, 2651, 2658, 2665, 3400, 1503, 2207, 1503, 1503, 1503, 1503, 1503, 1503, 3692",
      /*  850 */ "2686, 2698, 2702, 2704, 2708, 2712, 2716, 1503, 2246, 1544, 2245, 1647, 1623, 1623, 1649, 2743, 1579",
      /*  867 */ "2756, 2764, 2768, 2772, 3011, 2294, 2781, 2785, 1503, 1503, 3486, 1503, 2793, 2797, 2804, 2258, 3014",
      /*  884 */ "2955, 2809, 2814, 3693, 3094, 3076, 1503, 2818, 1503, 1503, 1503, 2819, 2717, 3267, 1503, 2275, 2823",
      /*  901 */ "3243, 2829, 1934, 1767, 2836, 1503, 2840, 3491, 2846, 2178, 1503, 3131, 1503, 2865, 2147, 2871, 1503",
      /*  918 */ "2099, 1503, 1963, 1503, 2880, 1503, 3429, 2853, 1503, 1503, 1503, 2852, 1503, 2860, 1503, 2895, 1503",
      /*  935 */ "1503, 1503, 2905, 2911, 2332, 3463, 2738, 1503, 2171, 2163, 2133, 2915, 1503, 1503, 2487, 1503, 1503",
      /*  952 */ "2492, 1503, 2601, 2977, 1503, 1503, 2191, 1853, 2477, 3464, 1503, 2266, 2063, 2499, 2506, 3153, 3196",
      /*  969 */ "1503, 1900, 1503, 1503, 2409, 1503, 1792, 1503, 1905, 1503, 3477, 3471, 2543, 2399, 1964, 2172, 1503",
      /*  986 */ "2920, 1503, 1503, 2921, 1503, 2197, 2927, 2933, 1503, 1503, 3501, 1503, 2943, 1912, 2746, 3085, 1503",
      /* 1003 */ "1503, 3503, 2942, 2078, 2948, 1503, 3503, 2954, 2959, 2550, 2968, 1999, 2536, 1503, 1503, 1503, 1503",
      /* 1020 */ "1503, 1503, 1503, 2854, 2565, 1503, 2566, 1998, 2550, 1503, 1503, 1503, 3408, 2483, 1791, 1503, 1503",
      /* 1037 */ "2981, 2985, 2989, 2993, 2997, 3001, 3005, 3008, 2889, 3027, 3032, 1503, 3336, 3037, 3046, 3050, 3054",
      /* 1054 */ "3723, 2642, 3062, 1503, 1503, 3068, 2874, 2661, 3073, 1503, 3102, 1503, 1493, 1503, 3334, 3082, 3202",
      /* 1071 */ "3101, 1503, 2788, 3233, 1503, 1534, 3144, 2537, 3151, 1926, 3157, 2971, 2789, 3705, 3106, 1503, 3616",
      /* 1088 */ "2156, 3479, 3112, 3167, 1503, 3116, 3168, 1503, 1837, 3201, 2022, 2583, 1503, 2478, 3069, 2876, 3135",
      /* 1105 */ "1503, 3139, 3028, 1835, 2073, 2013, 1503, 3591, 3130, 3124, 1503, 3590, 3129, 3676, 3194, 3200, 3254",
      /* 1122 */ "1617, 3207, 1503, 1618, 3213, 1687, 3217, 3221, 3140, 3227, 1515, 3231, 2514, 3237, 1689, 3247, 3275",
      /* 1139 */ "3253, 3261, 2726, 3258, 3272, 3190, 3261, 3078, 3281, 3288, 3289, 3293, 3300, 1920, 3307, 1921, 3308",
      /* 1156 */ "3296, 3284, 3284, 3312, 3323, 1503, 1503, 1503, 3728, 3332, 1503, 2313, 1503, 1503, 1503, 1503, 2408",
      /* 1173 */ "1503, 2396, 1503, 1957, 1503, 1503, 1503, 1503, 1786, 1503, 1503, 1503, 3249, 2689, 3522, 3340, 3344",
      /* 1190 */ "3348, 3352, 3356, 3359, 1503, 1503, 1503, 3729, 2866, 1986, 3363, 2883, 1972, 1503, 2466, 1893, 3371",
      /* 1207 */ "3377, 2469, 3381, 1574, 1503, 3388, 3392, 1503, 1503, 1701, 3396, 2250, 3405, 3412, 3091, 1503, 1503",
      /* 1224 */ "3422, 2848, 1586, 3735, 3428, 1503, 1503, 3433, 1503, 2450, 1503, 2456, 2063, 2460, 3326, 2473, 1503",
      /* 1241 */ "2929, 3434, 3264, 1503, 1503, 3438, 1977, 3584, 3711, 2128, 2928, 1503, 3442, 3453, 3457, 3461, 1503",
      /* 1258 */ "1503, 2923, 3469, 1503, 1503, 2922, 3468, 3475, 1503, 1503, 2119, 1984, 3584, 3483, 1577, 1503, 3495",
      /* 1275 */ "3499, 3509, 1503, 1503, 3023, 3469, 1503, 1503, 1504, 3517, 3526, 1503, 1589, 1978, 3534, 3538, 1503",
      /* 1292 */ "3544, 3548, 1503, 1503, 2600, 2146, 2532, 2541, 3118, 3223, 3418, 3470, 1503, 1503, 3552, 3556, 3203",
      /* 1309 */ "2005, 3562, 3539, 2270, 2964, 1503, 3557, 3589, 1503, 2495, 1834, 1841, 1503, 1845, 1850, 1857, 3558",
      /* 1326 */ "1503, 3566, 2524, 2477, 2242, 2244, 2576, 1503, 3581, 1782, 2950, 2477, 3489, 1503, 3588, 1672, 2023",
      /* 1343 */ "1503, 1503, 3595, 3602, 1503, 2535, 3608, 2463, 1502, 3620, 3627, 3631, 3635, 3638, 3642, 3646, 3650",
      /* 1360 */ "1503, 1503, 1503, 2855, 1503, 2575, 1951, 1961, 2824, 1964, 1503, 2825, 3662, 3671, 1503, 3675, 1632",
      /* 1377 */ "3033, 3680, 1503, 2670, 1503, 2721, 2725, 2730, 2694, 2736, 3704, 1503, 1503, 3268, 1882, 3721, 1503",
      /* 1394 */ "1503, 2669, 1503, 2198, 3372, 2674, 2682, 2856, 1503, 1503, 1503, 1503, 1770, 1503, 1503, 2692, 1503",
      /* 1411 */ "1503, 1503, 1503, 1503, 2975, 2558, 2586, 3162, 1665, 3097, 1503, 1503, 1503, 2376, 1503, 1503, 1503",
      /* 1428 */ "1503, 3719, 3575, 1899, 1503, 1503, 2641, 3613, 1503, 1503, 2799, 1503, 1503, 1503, 2224, 1503, 3934",
      /* 1445 */ "3739, 3742, 3761, 3771, 3775, 3813, 3813, 3813, 3813, 5691, 3777, 3813, 3813, 3814, 3781, 3813, 3813",
      /* 1462 */ "3796, 3813, 5714, 3808, 3812, 3818, 3813, 3820, 3824, 3828, 3842, 3844, 3834, 3848, 3840, 3837, 3830",
      /* 1479 */ "3843, 3850, 3854, 3858, 3862, 3866, 3871, 3867, 3875, 3885, 3739, 4193, 3894, 3984, 3742, 3742, 5478",
      /* 1496 */ "3742, 3742, 5577, 3742, 3742, 3900, 5630, 3742, 3742, 3742, 3742, 3743, 4729, 3913, 3742, 3742, 3742",
      /* 1513 */ "3746, 5760, 3742, 3742, 3742, 3747, 3945, 4395, 3930, 5624, 3932, 4573, 3982, 5570, 4033, 4037, 3938",
      /* 1530 */ "3944, 3945, 5622, 4737, 3742, 3742, 3742, 3752, 3958, 4628, 3742, 3742, 3756, 4474, 5757, 5757, 5757",
      /* 1547 */ "5760, 4365, 5757, 5760, 3742, 5832, 3945, 5833, 5624, 5624, 3946, 3786, 3964, 5624, 3940, 3982, 3983",
      /* 1564 */ "3742, 3742, 3742, 3802, 4017, 5836, 3945, 5834, 5624, 5625, 3742, 3742, 5596, 3751, 4431, 3742, 3742",
      /* 1581 */ "5259, 5194, 3742, 5612, 3960, 3742, 3742, 5616, 3742, 3742, 5695, 4364, 3742, 5757, 5757, 5757, 5757",
      /* 1598 */ "5758, 3788, 5624, 5624, 5624, 4023, 5836, 4007, 3945, 5833, 5624, 3966, 3982, 3982, 3982, 3982, 4048",
      /* 1615 */ "4053, 5399, 3742, 3742, 3742, 3896, 5727, 5831, 3945, 3945, 3945, 3945, 3947, 3970, 3790, 5624, 5624",
      /* 1632 */ "3742, 3742, 3756, 4628, 5624, 5835, 3945, 5834, 5624, 3981, 3985, 3742, 3742, 5724, 5728, 5757, 5760",
      /* 1649 */ "3945, 3945, 3948, 3970, 3790, 3792, 5624, 5624, 5624, 5624, 4007, 5624, 4007, 5836, 5834, 5626, 3742",
      /* 1666 */ "3742, 3742, 3907, 5624, 5836, 4006, 3742, 3742, 5749, 5742, 3742, 5756, 4012, 3945, 4006, 5624, 5624",
      /* 1683 */ "5624, 5837, 3944, 5625, 3742, 3742, 3756, 4737, 4312, 4333, 5756, 5832, 3945, 3945, 3945, 5624, 5624",
      /* 1700 */ "5834, 3742, 3742, 3756, 5825, 5757, 4378, 3945, 3945, 4002, 3965, 5624, 5627, 3742, 5832, 3945, 3945",
      /* 1717 */ "5624, 5831, 4008, 4021, 4023, 3742, 5144, 4173, 4385, 4120, 4049, 4029, 4043, 3982, 3982, 3767, 4069",
      /* 1734 */ "4041, 4047, 4057, 4058, 5569, 4058, 4062, 5566, 4066, 4072, 4076, 4080, 4089, 4092, 4110, 4109, 4099",
      /* 1751 */ "4102, 4096, 4106, 4114, 4275, 4118, 4124, 4127, 4131, 4138, 4134, 3742, 3742, 5760, 3985, 4142, 3742",
      /* 1768 */ "3742, 3742, 3923, 3742, 3742, 3742, 3924, 3990, 3764, 3742, 3742, 3803, 3742, 4907, 3742, 3742, 4633",
      /* 1785 */ "4364, 4794, 3742, 3742, 3742, 3954, 4581, 3742, 3742, 3742, 3988, 4168, 4181, 3742, 3742, 3926, 3742",
      /* 1802 */ "4310, 5559, 4398, 4548, 4265, 4311, 4191, 5401, 4673, 4607, 4201, 4203, 4207, 4210, 4214, 4223, 4217",
      /* 1819 */ "4223, 4221, 4224, 4228, 4230, 4234, 4234, 4237, 4241, 4242, 4246, 4249, 3742, 3742, 4256, 4673, 3742",
      /* 1836 */ "3742, 3742, 3990, 4920, 4597, 3991, 3742, 4298, 4272, 4748, 3742, 3742, 3742, 3991, 5228, 5229, 4281",
      /* 1853 */ "3742, 3742, 5760, 4361, 3742, 5296, 4290, 4296, 5550, 5548, 3742, 3742, 3952, 3742, 4309, 4693, 3742",
      /* 1870 */ "3742, 3953, 3742, 4324, 3742, 4701, 3889, 3742, 5045, 3742, 4591, 4582, 3742, 3742, 3742, 3995, 4339",
      /* 1887 */ "3742, 3742, 4348, 4360, 4416, 4355, 3742, 3742, 5816, 3742, 3742, 5829, 3742, 3743, 4387, 3742, 3742",
      /* 1904 */ "4392, 3742, 3742, 3742, 4173, 3742, 4779, 4356, 3742, 3742, 3742, 4195, 4636, 5199, 4573, 4637, 4573",
      /* 1921 */ "4628, 4637, 5681, 3742, 4383, 3742, 3742, 3742, 4267, 4443, 4448, 4298, 4410, 3742, 3742, 3985, 3742",
      /* 1938 */ "4298, 5054, 3742, 3742, 3742, 4291, 3798, 4573, 5576, 3742, 5576, 3742, 4376, 3742, 3742, 3742, 4297",
      /* 1955 */ "4785, 4422, 3742, 3742, 4155, 3742, 4918, 3742, 3742, 4920, 3742, 3742, 3742, 4298, 4919, 3742, 4920",
      /* 1972 */ "3742, 3747, 3751, 4429, 4428, 3742, 3742, 4176, 3742, 4913, 4786, 4920, 3742, 3742, 4175, 3742, 3742",
      /* 1989 */ "3742, 5557, 4376, 3742, 3742, 4916, 3742, 3742, 5845, 3742, 3742, 4301, 3742, 3742, 3742, 5843, 4364",
      /* 2006 */ "3742, 4176, 3742, 3742, 3742, 4400, 4405, 3742, 4367, 3742, 3742, 4366, 3742, 3742, 4368, 3742, 4366",
      /* 2023 */ "3742, 3742, 3742, 4299, 4448, 4920, 3742, 3742, 4301, 5409, 4453, 3742, 3742, 3742, 4302, 3997, 4469",
      /* 2040 */ "4478, 4482, 4486, 4487, 4491, 4499, 4495, 4503, 4507, 4499, 4499, 4497, 4499, 4509, 4509, 4509, 4509",
      /* 2057 */ "4513, 3742, 3742, 4314, 5230, 4640, 3742, 3742, 3742, 4362, 4575, 4195, 4517, 3742, 3756, 4472, 4920",
      /* 2074 */ "3754, 3990, 4920, 5586, 3742, 3742, 4192, 4362, 3919, 4523, 3742, 3742, 4320, 4319, 3742, 5720, 4538",
      /* 2091 */ "4547, 4552, 3742, 3742, 4559, 3890, 4402, 4738, 3742, 3756, 4632, 4369, 3881, 3742, 3742, 3742, 4368",
      /* 2108 */ "3742, 4195, 4735, 3742, 4314, 3986, 4313, 3742, 5632, 4540, 4586, 3742, 3756, 5656, 5092, 4623, 3742",
      /* 2125 */ "4647, 3742, 3909, 3742, 3742, 3748, 3742, 3988, 3742, 3742, 3742, 4377, 5757, 5757, 5759, 4725, 3976",
      /* 2142 */ "4613, 3742, 3742, 4449, 3742, 3742, 3742, 4379, 5586, 3742, 5630, 4193, 4734, 4659, 3742, 3742, 3742",
      /* 2159 */ "4406, 3987, 3742, 5632, 3742, 3914, 3742, 3742, 4867, 5664, 4648, 3986, 3742, 3742, 3742, 4378, 3742",
      /* 2176 */ "5268, 4671, 3742, 3742, 4334, 3742, 4653, 4725, 3977, 3742, 3914, 4811, 4815, 4443, 4677, 3742, 3742",
      /* 2193 */ "4365, 5300, 3742, 5628, 3742, 4195, 3742, 3742, 4379, 4736, 3742, 4314, 4251, 4684, 3742, 3742, 3742",
      /* 2210 */ "4429, 3742, 3989, 3742, 4301, 4649, 3988, 3742, 3742, 3743, 4768, 4439, 5268, 4672, 3742, 3916, 3742",
      /* 2227 */ "3742, 5424, 3742, 4725, 4698, 3742, 3742, 4372, 5628, 3988, 4267, 4443, 4719, 4709, 4718, 3742, 3742",
      /* 2244 */ "4374, 3742, 3742, 3742, 5755, 5757, 4174, 3742, 3742, 3742, 4431, 4639, 4192, 4633, 3742, 3921, 3742",
      /* 2261 */ "5247, 4723, 5269, 3742, 3742, 4378, 3992, 4871, 4942, 3742, 3742, 4386, 4373, 5270, 3742, 3742, 3742",
      /* 2278 */ "4437, 4302, 3742, 3743, 4742, 4350, 4743, 3742, 3742, 4404, 3742, 4747, 3742, 3742, 4351, 4752, 3742",
      /* 2295 */ "3742, 3742, 4542, 4767, 3742, 4635, 4314, 4776, 4753, 3742, 4784, 4753, 3742, 3756, 4769, 4635, 4365",
      /* 2312 */ "4754, 3742, 3742, 3743, 4896, 4343, 3742, 3756, 5142, 4366, 4366, 3742, 4015, 5760, 3742, 3742, 4083",
      /* 2329 */ "4799, 4804, 5778, 4783, 3742, 3742, 3742, 4995, 4161, 4810, 4822, 4824, 4828, 4832, 4834, 4838, 4842",
      /* 2346 */ "4844, 4844, 4849, 4844, 4850, 4845, 4854, 4856, 4860, 4860, 4860, 4861, 4865, 4713, 3742, 3742, 3742",
      /* 2363 */ "4563, 4880, 3742, 3756, 3742, 3925, 5631, 4574, 4579, 4423, 3742, 3756, 5591, 3742, 3742, 3742, 4627",
      /* 2380 */ "4177, 3742, 4884, 3742, 3945, 3945, 5834, 5624, 3742, 5667, 3742, 3742, 4911, 4332, 3742, 4331, 3742",
      /* 2397 */ "4148, 3742, 3742, 3919, 4252, 4619, 3994, 4941, 4945, 3742, 4159, 3742, 3742, 3921, 3742, 3742, 5196",
      /* 2414 */ "4956, 5664, 3742, 3742, 4420, 3742, 4962, 3742, 5302, 3742, 4163, 5034, 4944, 3742, 4963, 3742, 4968",
      /* 2431 */ "4970, 3742, 3742, 3742, 4570, 3743, 4975, 4983, 3888, 3742, 4284, 3742, 4284, 3742, 4192, 4636, 3742",
      /* 2448 */ "4590, 4581, 3742, 5460, 3742, 3742, 4427, 3742, 4379, 3985, 4872, 4943, 5082, 3742, 3742, 4371, 3742",
      /* 2465 */ "5631, 3742, 4196, 5539, 3742, 4196, 5563, 5574, 3986, 4952, 3742, 3742, 4430, 3742, 3742, 3742, 5029",
      /* 2482 */ "5201, 3742, 3742, 3742, 4590, 4995, 5020, 4991, 3742, 3742, 4904, 3742, 4904, 3742, 4262, 3742, 4191",
      /* 2499 */ "4387, 3742, 4372, 4195, 3742, 3742, 4950, 3742, 5196, 4573, 3742, 3742, 4785, 5021, 5025, 3742, 3742",
      /* 2516 */ "4519, 5448, 4267, 5019, 5065, 3751, 4573, 5308, 3742, 4300, 3920, 3914, 3742, 5142, 3742, 4760, 3993",
      /* 2533 */ "4941, 4945, 3742, 4303, 3742, 3742, 3742, 5287, 3742, 5079, 3742, 4193, 4633, 4737, 5018, 5065, 3751",
      /* 2550 */ "3742, 4304, 3742, 3742, 4893, 4655, 5052, 5025, 3742, 3742, 4526, 3742, 4379, 5122, 4943, 3742, 4304",
      /* 2567 */ "3742, 4302, 3742, 3742, 5079, 3742, 3742, 4534, 3742, 3742, 3742, 4373, 5736, 4927, 4920, 4927, 4920",
      /* 2584 */ "5761, 4920, 3742, 4313, 3742, 4301, 5717, 4571, 4084, 5590, 5589, 3742, 3742, 4568, 3742, 5069, 3742",
      /* 2601 */ "3742, 3742, 4635, 3742, 3985, 5196, 4573, 3742, 4173, 4569, 3742, 5588, 4920, 3742, 3742, 4571, 3742",
      /* 2618 */ "3742, 5099, 5591, 3742, 4315, 5442, 3742, 3919, 5443, 3986, 3987, 3743, 4768, 4304, 3742, 5586, 4920",
      /* 2635 */ "5198, 3742, 3742, 3923, 3924, 3742, 3922, 3742, 3742, 3742, 5772, 3742, 5196, 3742, 3923, 3742, 3742",
      /* 2652 */ "5197, 3922, 3742, 4333, 5429, 5434, 3924, 5197, 3922, 3742, 4335, 4371, 4814, 3924, 5197, 3923, 3923",
      /* 2669 */ "3742, 5672, 4704, 3742, 3742, 5077, 5086, 5104, 3742, 4344, 3742, 4342, 3914, 4194, 3742, 3742, 5115",
      /* 2686 */ "4297, 5121, 4300, 5243, 4887, 3917, 3742, 4361, 3742, 3742, 3922, 5585, 5127, 5139, 5136, 5148, 5149",
      /* 2703 */ "5153, 5161, 5161, 5160, 5157, 5165, 5169, 5173, 5175, 5176, 5180, 5180, 5180, 5183, 3742, 3742, 3742",
      /* 2720 */ "4638, 5760, 5586, 5281, 5033, 5237, 3742, 3742, 3742, 4642, 3992, 3742, 3742, 3742, 4653, 4725, 5187",
      /* 2737 */ "3742, 4371, 3742, 3742, 3742, 5017, 3742, 5265, 4171, 3742, 4361, 4430, 3742, 4361, 5081, 3742, 3924",
      /* 2754 */ "3742, 3923, 4555, 4151, 4150, 3742, 4365, 3742, 3742, 4405, 5205, 3742, 3742, 3746, 3903, 5584, 5209",
      /* 2771 */ "4946, 4937, 5215, 4797, 3742, 4369, 3742, 3742, 4416, 4355, 5220, 3742, 3742, 5226, 5225, 3753, 3742",
      /* 2788 */ "3752, 3973, 4605, 3742, 3742, 4379, 5585, 5280, 4363, 5236, 5242, 3742, 3742, 4628, 3742, 3742, 3991",
      /* 2805 */ "3742, 3742, 3742, 4694, 5252, 3742, 3742, 3742, 4779, 3742, 5107, 5262, 4413, 3742, 5274, 5545, 4423",
      /* 2822 */ "3742, 4958, 3742, 3742, 3742, 4786, 4920, 4187, 5123, 5238, 3742, 4379, 4773, 4791, 3756, 4632, 3742",
      /* 2839 */ "4372, 3921, 5285, 3742, 3742, 4733, 3742, 5210, 3742, 3742, 4388, 5707, 5610, 5542, 4979, 3742, 3742",
      /* 2856 */ "3742, 4895, 3742, 3742, 3800, 3742, 3742, 3742, 4945, 5672, 3740, 3742, 3742, 3742, 4994, 5281, 5111",
      /* 2873 */ "5238, 3742, 4405, 4313, 3742, 3742, 4755, 3742, 5760, 3742, 4334, 3998, 5606, 3742, 4420, 3751, 3742",
      /* 2890 */ "3745, 3742, 3742, 4905, 3742, 3747, 4977, 4920, 3742, 4428, 3742, 3742, 4268, 4444, 3881, 3742, 5673",
      /* 2907 */ "3742, 3742, 4782, 3742, 3742, 5760, 3915, 4363, 5294, 3742, 3742, 3742, 5028, 3742, 5293, 3742, 3742",
      /* 2924 */ "3742, 5072, 5048, 4362, 4431, 3742, 3742, 3742, 5073, 3742, 5248, 4369, 3742, 4428, 3742, 4367, 3742",
      /* 2941 */ "4366, 3742, 5231, 3742, 3742, 3742, 5099, 4783, 4369, 3742, 3742, 4890, 4335, 5232, 3742, 3742, 3742",
      /* 2958 */ "5190, 5331, 3742, 4372, 3742, 4465, 3742, 3742, 4375, 3742, 4304, 3742, 4429, 3742, 4530, 4813, 4817",
      /* 2975 */ "5028, 5032, 3742, 3742, 3742, 5292, 5639, 3784, 4025, 4572, 5306, 3742, 5316, 4374, 4428, 4662, 4667",
      /* 2992 */ "4665, 5323, 5325, 5329, 5335, 5341, 5341, 5343, 5341, 5347, 5337, 5351, 5354, 5358, 5358, 5358, 5358",
      /* 3009 */ "5359, 5363, 3742, 4543, 5221, 3742, 4370, 3742, 3742, 4633, 4764, 3742, 4403, 4310, 3742, 3742, 4894",
      /* 3026 */ "5047, 5369, 3742, 3742, 3743, 5480, 5480, 3742, 3742, 3742, 5312, 5216, 3752, 5375, 3742, 4564, 3742",
      /* 3043 */ "3742, 4328, 3742, 5097, 4277, 5211, 3752, 4305, 3742, 3742, 3752, 5393, 3742, 5385, 3742, 4601, 4611",
      /* 3060 */ "3751, 3742, 3742, 5771, 3742, 3742, 4906, 3742, 5029, 4364, 3742, 3742, 4405, 4818, 4572, 5397, 3742",
      /* 3077 */ "4606, 3742, 3742, 4643, 5454, 5413, 3742, 4615, 3742, 4631, 4369, 3742, 4461, 5011, 3742, 3750, 4429",
      /* 3094 */ "3742, 3751, 4388, 3742, 3756, 3996, 5841, 5418, 3742, 3742, 3742, 5405, 3742, 5762, 3742, 3742, 4944",
      /* 3111 */ "3986, 4812, 4816, 4570, 5243, 3915, 5407, 3742, 3742, 4951, 3742, 3742, 4876, 4630, 3742, 3742, 3742",
      /* 3128 */ "5549, 5727, 4604, 3742, 3742, 3742, 5542, 4812, 4816, 4570, 4374, 3742, 5117, 5631, 3742, 4310, 5725",
      /* 3145 */ "5729, 4945, 3742, 4635, 3742, 4164, 3742, 5288, 3742, 3742, 4999, 5591, 5031, 3742, 4310, 3742, 4636",
      /* 3162 */ "3742, 3742, 4529, 5847, 4571, 4375, 3742, 3742, 3742, 5479, 3755, 5288, 4365, 3742, 4367, 4634, 3742",
      /* 3179 */ "5722, 5726, 5730, 5414, 5414, 3742, 3742, 5002, 5549, 3742, 5030, 3742, 4310, 4800, 3742, 3915, 5425",
      /* 3196 */ "3742, 3742, 5006, 4920, 5439, 3742, 5287, 3742, 3742, 3742, 5381, 5727, 5731, 3742, 3742, 5009, 3878",
      /* 3213 */ "5731, 3742, 3990, 4455, 4311, 3742, 4334, 5430, 5435, 3804, 3742, 3742, 5038, 4920, 3742, 5288, 5287",
      /* 3230 */ "4367, 5447, 5732, 3742, 3742, 4631, 3742, 3742, 5287, 5288, 3742, 4637, 3804, 3742, 3742, 5760, 5278",
      /* 3247 */ "5848, 5013, 3742, 3742, 5041, 3742, 5287, 5288, 4368, 3742, 3742, 5453, 3742, 4457, 3742, 4641, 5452",
      /* 3264 */ "3742, 4638, 3742, 4638, 3742, 3742, 3742, 4626, 4589, 3742, 4573, 5117, 3742, 3742, 4312, 4186, 4291",
      /* 3281 */ "3984, 4292, 4571, 3915, 4637, 5458, 5679, 4365, 3742, 4637, 5681, 3742, 4144, 5371, 3742, 5678, 5454",
      /* 3298 */ "4637, 5681, 5454, 3742, 5680, 3742, 4680, 3742, 4595, 3742, 5679, 4573, 4573, 4628, 3915, 5678, 5678",
      /* 3315 */ "4377, 5757, 5759, 3742, 3742, 5757, 5757, 3742, 5756, 5757, 5759, 3742, 4714, 3742, 3742, 4429, 4383",
      /* 3332 */ "5464, 3740, 3742, 3742, 5043, 3742, 5095, 3742, 5475, 5484, 4964, 5491, 5492, 5489, 5496, 5497, 5501",
      /* 3349 */ "5513, 5505, 5505, 5514, 5510, 5506, 5518, 5521, 5525, 5527, 5527, 5529, 5531, 5535, 4915, 3917, 3742",
      /* 3366 */ "3994, 3742, 3742, 5080, 3742, 4687, 3742, 3742, 3742, 5587, 3742, 5554, 3751, 4971, 4197, 5581, 4172",
      /* 3383 */ "4172, 3742, 4759, 3742, 5129, 5595, 4987, 3742, 4690, 3742, 5601, 3742, 5600, 5465, 3741, 3742, 3742",
      /* 3400 */ "5198, 3742, 3742, 3742, 4637, 4914, 3916, 3920, 3742, 4766, 3756, 5132, 3996, 3914, 5605, 3742, 4785",
      /* 3417 */ "4435, 3742, 3747, 5703, 5652, 4286, 5648, 3742, 3742, 5227, 3742, 5636, 3742, 3742, 3742, 5619, 5073",
      /* 3434 */ "5642, 4986, 3742, 4921, 3742, 5823, 5657, 3740, 3742, 5646, 3751, 3742, 4787, 5056, 3742, 3743, 4724",
      /* 3451 */ "5269, 3742, 5687, 5707, 5610, 4196, 4640, 3742, 3742, 5200, 4313, 5587, 3742, 3742, 5247, 3742, 4372",
      /* 3468 */ "5048, 5652, 4987, 3742, 3742, 3742, 5629, 5610, 4637, 3742, 4637, 3742, 3742, 4333, 4369, 3997, 4335",
      /* 3485 */ "4194, 3747, 4957, 4705, 3742, 4373, 3742, 4375, 4413, 3742, 3742, 5661, 3751, 4373, 5706, 5677, 3742",
      /* 3502 */ "3742, 5295, 3742, 3742, 3742, 5100, 4920, 4637, 5685, 5587, 3742, 4806, 5064, 4423, 3742, 5060, 5689",
      /* 3519 */ "4985, 3742, 4892, 3920, 3742, 5469, 5485, 5610, 4638, 3742, 4639, 3742, 3742, 3742, 4369, 5116, 3919",
      /* 3536 */ "3994, 3914, 3749, 4429, 3742, 3742, 3742, 5670, 5058, 5648, 3742, 5705, 5610, 3742, 3742, 5699, 3742",
      /* 3553 */ "5059, 5689, 4985, 4921, 3742, 3742, 3742, 5711, 5089, 4299, 3919, 3994, 4184, 3986, 5110, 4173, 3742",
      /* 3570 */ "4894, 3996, 3742, 4901, 3757, 3742, 3996, 3742, 3742, 5420, 3741, 3742, 5748, 5741, 3742, 4912, 4299",
      /* 3587 */ "3918, 5748, 5737, 3742, 3742, 3742, 5723, 5727, 4464, 3742, 3742, 3742, 5756, 5757, 5757, 3742, 5746",
      /* 3604 */ "3742, 3742, 5310, 3742, 5631, 5631, 5629, 3742, 4917, 3742, 3742, 3987, 3742, 3742, 4267, 5031, 5131",
      /* 3621 */ "5630, 5628, 3742, 4925, 3742, 4932, 5630, 5628, 5753, 5766, 5776, 5769, 3744, 4712, 4258, 5782, 5784",
      /* 3638 */ "5786, 5794, 5786, 5791, 5787, 5796, 5800, 5804, 5807, 5804, 5804, 5804, 5811, 5814, 3742, 3742, 5377",
      /* 3655 */ "3742, 4629, 5820, 3742, 3742, 5379, 3742, 3742, 5319, 3742, 3742, 5387, 3742, 3742, 3742, 4364, 5312",
      /* 3672 */ "3742, 5318, 5365, 4625, 3742, 3742, 3742, 5761, 3742, 5311, 3742, 3742, 5388, 3742, 3756, 3996, 5761",
      /* 3689 */ "3742, 4931, 4936, 3742, 4025, 3742, 5256, 3742, 4085, 3742, 3742, 3986, 3742, 4464, 3988, 4626, 3742",
      /* 3706 */ "3742, 3742, 5762, 4627, 3742, 3742, 3994, 4334, 4193, 3905, 3742, 3742, 4897, 4625, 3742, 3742, 3995",
      /* 3723 */ "3742, 3742, 5392, 3742, 3743, 3742, 3742, 3742, 5824, 5464, 3924, 3742, 3742, 3742, 5471, 4313",
      /* 3739 */ "8388608, 16777216, 1073741824, 0, 0, 0, 0, 1, 0, 0, 0, 2, -2147483648, 0, 0, 0, 3, 0, 0, 0, 4, 0",
      /* 3761 */ "1073872896, 131072, 131072, 131072, 0, 0, 24, 304, 48, 1048848, 268435456, 0, 262146, 262160",
      /* 3775 */ "268566528, 131072, 537133056, -2147221504, -2147221504, -2147221504, 33816576, 537133056",
      /* 3783 */ "-2147221504, 262144, -2147483648, 0, 0, 32, 2097152, 2097184, 2097184, 2097184, 2097184, 2129920",
      /* 3795 */ "2129920, 262174, 262160, 262144, 262144, 0, 2048, 0, 2048, 16777216, 8192, 0, 0, 262144, 262160",
      /* 3810 */ "268444864, 10560, 33816576, 262144, 262144, 262144, 262144, 262160, 8768, 262144, 262144, 262144",
      /* 3822 */ "278528, 278528, 278544, 537149440, 278530, 537149440, 278530, 772014080, 772014080, 772014080",
      /* 3832 */ "-1375469568, 168034304, 772014080, 235143168, 235143168, 772014080, 168034304, 772030464",
      /* 3840 */ "-1375469568, 772014080, 772014080, 772014080, 168034304, 168034304, 168034304, 235143168, 235143168",
      /* 3849 */ "235143168, 168034304, 168034304, 32768, 168034304, 32800, 163872, 294944, 163840, 2392096, 294944",
      /* 3860 */ "537165856, -2147188704, 294944, 294944, -2147188704, 294944, -2147188674, -2145091522, -2145091522",
      /* 3869 */ "-2145091522, 772046880, -2145091522, -2111537090, -2145091522, -2145091522, 772046880, -1910210498",
      /* 3877 */ "4096, 4096, 0, 4608, 16777216, 33554432, 67108864, 536870912, 65536, 65536, 1048576, 4194304",
      /* 3889 */ "-1207959552, 0, 0, 0, 3477504, 0, 262144, 0, 2, 32, 3072, 0, 128, 8256, 0, -1610612736, 0, 0, 12, 0",
      /* 3909 */ "0, 0, 12, 14, 16384, 134217728, 0, 0, 0, 64, 0, 65536, 0, 0, 0, 128, 0, 0, 0, 132, 256, 2129920",
      /* 3931 */ "2129952, 2129920, 2129920, 4096, 65536, 1048576, 4194304, 0, 12, 2129920, 2129920, 65536, 16",
      /* 3944 */ "2129920, 32768, 32768, 32768, 32768, 0, 32, 32, 12, 8, 0, 0, 8, 8, 0, 8192, 64, 64, 64, 64, 2129920",
      /* 3965 */ "2097184, 2129920, 2129920, 2129920, 16, 32, 32, 32, 32, 19456, 458752, 2097152, 12582912, 16777216",
      /* 3979 */ "33554432, 201326592, 2129920, 16, 16, 16, 16, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 32, 0, 0, 0, 32, 131072",
      /* 4002 */ "32768, 32, 32, 2097184, 32768, 2129920, 2129920, 2129920, 32768, 2129920, 16384, 0, 32768, 32768, 0",
      /* 4017 */ "32768, 0, 0, 2129920, 32768, 2129920, 32768, 2129920, 0, 0, -2147483648, 0, 80, 272, 65552, 262160",
      /* 4033 */ "16, 20, 16, 48, 16, 16, 17, 20, 1572880, 524304, 524304, 1048592, 268435472, 16, 1048592, 16, 16, 16",
      /* 4051 */ "20, 48, 16, 20, 304, 48, 524304, 16, 16, 16, 28, 16, 21, 16, 28, 16, 16, 165675008, 272, 272, 272",
      /* 4072 */ "272, 16, 16, 272, 16, 524560, 1048592, 272, 16, 16, 48, 16, 0, 0, 8388608, 33554432, 1073741824, 84",
      /* 4090 */ "20, 372, -165649452, -165649452, -165649451, -165649451, -164559888, -164535312, -164535312",
      /* 4099 */ "-164535308, -701430800, -164535308, -701430800, -701430800, -701430800, -701430800, -164273168",
      /* 4107 */ "-164535308, -164273164, -164535308, -164535308, -164535308, -164535308, -700906508, -700906512",
      /* 4115 */ "-701430800, -164535308, -164273164, 16, 1073774592, 16, 16, 2, 1073774592, 16, 20, 112, 21, 53",
      /* 4129 */ "140511253, 140515349, 140539925, 140540573, 140540573, 140540573, -164535308, -164273164, -26141771",
      /* 4138 */ "140540605, 140540573, 140540573, 140540573, 32768, 262144, 524288, 0, 16777216, 0, 0, 163577856, 0",
      /* 4151 */ "0, -1073741824, 0, 0, 16384, 100663296, 536870912, -2147483648, 0, 138412032, 0, 4096, 0, 16384, 0",
      /* 4166 */ "16, 0, 0, 2097152, 0, 524288, -1610612736, 0, 0, 0, 268435456, 0, 0, 0, 17408, 524288, 2097152",
      /* 4183 */ "134217728, 134217728, 0, 2, 0, 64, 0, 4194304, 2629632, 0, 0, 0, 131072, 0, 0, 0, 6, -2147483648, 16",
      /* 4202 */ "1048576, 941162496, 941162496, 941162496, 941162496, 941162496, 805371937, 805371937, 805371937",
      /* 4211 */ "847314977, 957941825, 957941827, 2031683649, 957941825, 957941825, 957941857, 957941859, 960047171",
      /* 4220 */ "960038977, 957941857, 960047171, 957941857, 957941857, 957941857, 957941857, 960038977, 957941857",
      /* 4229 */ "960038977, 960038977, 960038977, -1199980544, 960174145, -1199980544, -1199980544, -1199980544",
      /* 4237 */ "-1199980544, -1199718400, -1199718400, -1199718400, -1199717854, -1199717846, -1199717846",
      /* 4244 */ "-1199717846, -1199717782, -1199717846, -1199717846, -1199717846, -1183201183, -1182938517, 0, 0, 1",
      /* 4254 */ "256, 4096, 4, 128, 0, 256, 0, 256, 0, 526336, 16777216, 2105344, 2097152, 0, 0, 1, 4, 16, 0, 1638400",
      /* 4274 */ "939524096, 0, -701430800, 0, 0, -1608515584, 0, 0, 1640448, 939524096, 0, -134217728, 0, 0, 6, 4096",
      /* 4290 */ "3745792, 0, 0, 0, 524288, 0, 3737600, 0, 0, 0, 1048576, 0, 0, 0, 262144, 0, 0, 0, 294912, 3872768, 0",
      /* 4311 */ "0, 0, 2097152, 0, 0, 0, 65536, 0, 512, 0, 8241152, 0, 0, 0, 7981056, 16777216, -1207959552, 0, 65536",
      /* 4330 */ "805306368, 0, -126877696, 0, 0, 0, 134217728, 0, 0, 0, 1572864, 939524096, 0, 0, 32768, 8388608",
      /* 4346 */ "134217728, 0, 0, 2013265920, 0, 0, 1, 49152, 65536, 6291456, 939524096, -2147483648, 0, 0, 196608, 0",
      /* 4362 */ "0, 0, 4194304, 0, 0, 0, 32768, 0, 0, 0, 4096, 0, 0, 0, 8192, 0, 0, 0, 16384, 0, 0, 33554432",
      /* 4384 */ "134217728, 1073741824, 0, 2, 0, 0, 0, 24576, 65536, 1048576, 939524096, 0, 0, 32800, 2097152",
      /* 4399 */ "2097152, 0, 0, -436207616, 0, 0, 0, 33554432, 0, 0, 2097152, 1048576, 134217728, 805306368, 0, 0",
      /* 4415 */ "40960, 0, 0, 114688, 1572864, 49152, 1048576, 4194304, 536870912, -2147483648, 0, 0, 8388608",
      /* 4428 */ "33554432, 0, 0, 0, 8388608, 0, 0, 4194304, 536870912, 0, 0, 2, 256, 2048, 4096, 16, 32, 128, 512",
      /* 4447 */ "4096, 4096, 16777216, 33554432, 67108864, 0, 268435456, 536870912, 536870912, 0, 16, 536870912, 16",
      /* 4460 */ "536870912, 0, 4096, 2048, 0, 0, 262144, 1048576, 8, 4740, 256, 0, 256, 131072, 1048576, 268435456",
      /* 4476 */ "536870912, 0, 257, 4740, 536871168, 67109121, 131072, 257, 525312, 67174657, -1507782399",
      /* 4487 */ "-1507782399, -1507782399, -1507782399, -2145386488, -1876951032, -2145386488, -2145386456",
      /* 4494 */ "-2145381716, -1507782391, -432729847, -1507782391, -432729847, -1507782391, -1507782391, -1507782391",
      /* 4502 */ "-1507782391, -432729847, -432729847, -432729847, -432729847, -1344145085, -432729847, -1344145085",
      /* 4510 */ "-1344145085, -1344145085, -1344145085, -1344145085, -1344145077, -1344145077, -1344145077, 0, 525312",
      /* 4519 */ "0, 0, 2, 3072, 257, 2166784, -1509949440, 0, 0, 262144, 33554432, 0, 134217728, 0, 4096, 0, 8",
      /* 4536 */ "2097152, -2147483648, 40, 0, 0, 172, 0, 0, 3, 1184, 57344, 2101760, 0, 0, 0, 17303552, 265, 2166784",
      /* 4554 */ "-1509949440, 0, 0, 524288, 40960, 0, 265, 0, -1509949440, 0, 323, 14809088, -1358954496, 0",
      /* 4568 */ "268435456, 4608, 0, 0, 0, 16777216, 0, 0, 0, 257, 0, 69632, 2097152, 33554432, 67108864, 134217728",
      /* 4584 */ "1073741824, 0, 0, 265, 69632, 0, 0, 524288, 2097152, 8388608, 33554432, 0, 265, 0, 0, 3, 1048576, 0",
      /* 4602 */ "323, 129024, 2097152, 25165824, 67108864, 0, 0, 134217728, 524288, 12582912, 50331648, 201326592",
      /* 4614 */ "536870912, 0, 0, 3, 3145728, 65536, 2097152, 33554432, 67108864, 0, 44, 0, 0, 4, 64, 0, 0, 0, 512, 0",
      /* 4634 */ "0, 0, 1024, 0, 0, 0, 2048, 0, 0, 0, 3072, 16384, 2097152, 0, 262144, 1048576, 1073741824, 0, 0, 1, 2",
      /* 4655 */ "64, 256, 2048, 4096, 65536, 33554432, 67108864, 0, 0, 524292, 262145, 262145, 0, 262145, 262145",
      /* 4670 */ "524292, 33554432, 201326592, 0, 0, 0, 41943040, 4096, 16777216, 67108864, 0, 0, 3407872, 1610612736",
      /* 4684 */ "4096, 65536, 67108864, 0, 0, 6815744, 0, 0, 7864320, 0, 0, 7979008, -1207959552, 0, 12582912",
      /* 4699 */ "16777216, 201326592, 0, 0, 8243200, 16777216, 268435456, 1073741824, 0, 0, 1, 4, 32, 128, 0, 0, 256",
      /* 4716 */ "131072, 0, 512, 4096, 16777216, 0, 0, 1, 2, 2048, 4096, 8192, 114688, 2, 2048, 4096, 114688, 131072",
      /* 4734 */ "0, 0, 1024, 524288, 0, 0, 0, 265, 49152, 65536, 12582912, 134217728, 0, 65536, 0, 1, 65536",
      /* 4751 */ "805306368, 49152, 65536, 8388608, 134217728, 0, 0, 4096, 0, 32768, 134217728, 0, 0, 8388608",
      /* 4765 */ "1073741824, 0, 0, 4, 128, 512, 0, 0, 0, 16, 32, 65536, 0, 0, 49152, 65536, 1048576, 4194304, 8388608",
      /* 4784 */ "0, 0, 0, 49152, 1048576, 4194304, 134217728, 8388608, 33554432, 67108864, 0, 0, 12582912, 0",
      /* 4798 */ "-1476395008, 0, 0, 16, 16, 32768, 514, 8388608, 0, 0, 4, 192, 8388608, 4096, 0, 0, 2, 0, 8",
      /* 4817 */ "268435456, 0, -2147483648, 0, 0, 0, 16384, 0, 131328, 131328, 1024, 131328, 131328, 0, 131328",
      /* 4832 */ "17039368, 131328, 807043332, 807043332, 807043332, 807043332, 807043332, 806912004, 806912004",
      /* 4841 */ "806912004, 806928388, 806929412, 1880785156, 1880785156, 1880785156, 1880785156, 1880795396",
      /* 4849 */ "1880785156, 1880785156, 1889173780, 1880785156, 1880785156, 1880785156, 1880795396, 1880795396",
      /* 4857 */ "1880795910, -1199914555, 1880795396, -1199914555, -1199914555, -1199914555, -1199914555, -126172731",
      /* 4865 */ "-126172731, -126172731, 0, 0, 4, 32768, 0, 32, 0, 65536, 0, 4, 256, 688128, 806354944, 0, 4, 557056",
      /* 4883 */ "806354944, 4, 688128, 1880096768, 0, 0, 67108864, 1048576, 0, 65536, 0, 0, 1, 2, 4, 32, 0, 0, 0, 20",
      /* 4903 */ "1888485376, 0, 0, 1610612736, 0, 0, 0, 239075328, 10496, 0, 0, 0, 67108864, 0, 1048576, 0, 1048576",
      /* 4920 */ "536870912, 0, 0, 0, 6291456, 6, 11008, 0, 0, 4, 268435456, 0, 5, 16832, 688128, -1200619520",
      /* 4936 */ "-1200619520, 0, 0, 0, 67633152, 65536, 0, 33554432, 0, 67108864, 0, 0, 0, 50855936, 0, 8, 262144",
      /* 4953 */ "16777216, 0, 0, 4, 256, 32768, 131072, 16777216, 1073741824, 0, 1879048192, 0, 0, 0, 138412032, 0",
      /* 4969 */ "10240, 0, 0, 6, 0, 0, 4, 448, 16384, 32768, 393216, 16777216, 536870912, 0, 131072, 524288, 1048576",
      /* 4986 */ "2097152, 33554432, -2147483648, 0, 0, 402653184, 536870912, -2147483648, 0, 1, 4, 192, 256, 0, 4",
      /* 5001 */ "131072, 1048576, 0, 65536, 1572864, 0, 4, 1048576, 268435456, 0, 0, 4096, 0, 16777216, 8192, 0, 1, 4",
      /* 5019 */ "192, 16384, 131072, 1048576, 4194304, 134217728, 268435456, 536870912, -2147483648, 0, 1, 4, 262144",
      /* 5032 */ "524288, 4194304, 0, 0, 65536, 33554432, 0, 4, 131072, 268435456, 0, 4, 0, 0, 0, 128, 256, 8192",
      /* 5050 */ "16384, 32768, 16384, 131072, 4194304, 134217728, 805306368, -2147483648, 0, 0, 2, 4, 128, 256, 16384",
      /* 5065 */ "4194304, 134217728, 268435456, 536870912, 65536, 0, 67108864, 0, 1, 6, 128, 256, 8, 64, 0, 4194304",
      /* 5081 */ "0, 2, 512, 0, 0, 0, 65600, 32768, 1048576, 33554432, 0, 4194304, 16777216, 1073741824, 0, 1, 16",
      /* 5098 */ "538968064, 0, 0, 192, 16384, 268435456, 8388608, 50331648, 16777216, 0, 1, 32, 1024, 4194304, 0, 0",
      /* 5114 */ "1048576, 16, 1048576, 0, 0, 64, 128, 65600, 16, 0, 0, 65536, 1048576, 0, 128, 0, 128, 1024, 0, 1280",
      /* 5134 */ "0, 0, 1075839492, 128, 4096, 128, 131072, 536871040, 128, 512, 0, 1024, 268435456, 1073741824",
      /* 5148 */ "-1610079071, -1610079071, -1610079071, -1610079071, -2146819039, -2146950111, -2146917343",
      /* 5155 */ "-1073208287, -1073077215, -1610062687, -1610062687, -1559731039, -1593285471, -1610062687",
      /* 5162 */ "-1610062687, -1610062687, -1610062687, -1610062687, -1542953823, -1610062671, -1542953823",
      /* 5169 */ "-1408736095, -1542953823, -1408736095, -1542953823, -1592859485, -1408736095, -1592859485",
      /* 5176 */ "-1592859485, -1592859485, -1592859485, -1592857437, -1592857437, -1592857437, -1592857437",
      /* 5183 */ "-1592857437, -1592859485, -1592859485, -1592857437, 0, 516, 2097152, 0, 1, 160, 1024, 655360",
      /* 5195 */ "-2147483648, 0, 0, 8, 262144, 0, 0, 2048, 8192, 0, 1, 1184, 24576, -1610612736, 1, 24576, 0, 0, 0",
      /* 5214 */ "538968064, 1200, 0, 0, 0, 572522496, 57344, 17694720, -1610612736, 0, 0, 0, 59392, 0, 0, 0",
      /* 5230 */ "805306368, 0, 0, 0, 393216, 0, 65536, 1048576, 8388608, 0, 50331648, 0, 50331648, 0, 0, 0",
      /* 5246 */ "1073741824, 0, 4, 512, 0, 0, 8192, 524288, 536870912, -2147483648, 160, 24576, -2147483648, 0, 1",
      /* 5261 */ "1056, 8192, 524288, -2147483648, 0, 1, 1184, 8192, 114688, 12582912, 16777216, 134217728, 0, 1, 2",
      /* 5276 */ "160, 1024, 0, 536870912, 0, 8, 0, 64, 0, 8192, 536870912, 0, 0, 16, 536870912, 0, 0, 16384, 32768",
      /* 5295 */ "393216, 0, 0, 0, 2013265920, 131072, 1073741824, 0, 0, 20, 1887436800, 0, 33554432, 1073741824, 8192",
      /* 5310 */ "0, 0, 36, 0, 0, 0, 33554432, 8192, 0, 0, 46, 0, 0, 448, 262145, 2359297, 2359297, 2359297, 2359297",
      /* 5329 */ "2359297, 0, 0, 4194304, 0, 8388608, 0, 524292, 539230225, 539230225, -1608253423, 540278803",
      /* 5341 */ "539230225, 539230225, 539230225, 539230225, 572784657, 540278803, 539230225, 572784657, 539230225",
      /* 5350 */ "572784657, 539230225, 540278803, 540278803, 540278803, 540311571, 94850083, 540279315, 94850083",
      /* 5359 */ "94850083, 94850083, 94850083, 631721011, 631721011, 631721011, 0, 0, 62, 0, 448, 0, 0, 0, 64, 32768",
      /* 5375 */ "540016640, 0, 0, 0, 192, 536870912, 0, 0, 8, 1024, 0, 528, 0, 0, 331, 0, 0, 3, 19488, 458752",
      /* 5395 */ "94371840, 0, 0, 1073741824, 0, 8192, 64, 0, 41943040, 0, 0, 64, 384, 0, 0, 0, 512, 262144, 1, 16",
      /* 5415 */ "536870912, 0, 0, 294912, 0, 0, 0, 1024, 8388608, 64, 128, 256, 0, 0, 0, 4096, 2, 0, 8, 8, 268435456",
      /* 5436 */ "-2147483648, 0, 0, 0, 262144, 2097152, 0, 1, 4096, 65536, 0, 3072, 16384, 131072, 2097152, 25165824",
      /* 5452 */ "16384, 2097152, 8388608, 16777216, 0, 0, 16384, 8388608, 0, 0, 1024, 1073741824, 512, 1024, 4096",
      /* 5467 */ "4194304, 16777216, 32, 1073741824, 0, 0, 2048, 24576, 4, 131104, 1048, 0, 1, 262144, 2097152, 0, 0",
      /* 5484 */ "1073741824, 138412032, 0, 0, 1073741824, 8389656, -2147483646, 0, -2147483646, 0, -2147483646",
      /* 5495 */ "-2147483646, -2146938874, -2146938874, -2146938874, -2146938874, 2650112, 271085568, 2650112",
      /* 5503 */ "141062144, 141062144, -2144831482, -2144831482, -2144831482, -2144831482, -2077722618, -2144831482",
      /* 5511 */ "-2140637178, -2144831482, -2146928634, -2146928634, -2146928634, -2144831482, -2144831482",
      /* 5518 */ "-2144765946, -2146928634, -2144700378, -1593280506, -1593280506, -1593280506, -1593280506",
      /* 5525 */ "-2109935225, -1593280506, -2109935225, -2109935225, -2109935225, -2109935225, -2105740921",
      /* 5532 */ "-2105740921, -2105740921, -2105740921, -2105740921, -2109933177, -2109933177, -2109933177, 20480",
      /* 5540 */ "524288, -2147483648, 0, 2, 128, 57344, 393216, 524288, 16777216, 939524096, 0, 0, 0, 1640448, 0, 6",
      /* 5556 */ "30720, 524288, 524288, 524288, 0, 524288, 524288, 30720, 2621440, -2147483648, 0, 2, 304, 17, 16, 16",
      /* 5572 */ "16, 131088, 6, 96256, 0, 0, 2048, 16777216, 0, 0, 38, 161792, 17301504, 0, 0, 0, 536870912, 0, 0",
      /* 5591 */ "268435456, 536870912, 0, 0, 0, 135, 323840, 3670016, 33554432, 0, 135, 325888, -2147483648, 0",
      /* 5605 */ "131072, 24, 0, 0, 0, 6291456, 0, 0, 0, 8192, 8192, 0, 6, 2048, 0, 2, 16384, 32768, 0, 2129920",
      /* 5625 */ "2129920, 2129920, 2129920, 0, 0, 0, 256, 0, 0, 0, 40, 0, 38, 536870912, 0, 2, 268435464, 4096, 57344",
      /* 5644 */ "262144, 1572864, 0, 6, 16384, 524288, -2147483648, 0, 262144, 524288, 1048576, 2097152, 8, 256, 512",
      /* 5659 */ "1024, 4194304, 2, 4, 16384, 524288, 1048576, 805306368, 0, 0, 1880096768, 0, 1, 2, 256, 32768",
      /* 5675 */ "131072, 1073741824, 6291456, 0, 0, 2048, 16384, 8388608, 16777216, 0, 8192, 2097152, 0, 0, 8192",
      /* 5690 */ "16384, 262144, 524288, 262160, 537133056, 0, 4, 8, 1024, 0, 8192, 2097152, 536870912, 4, 128, 8192",
      /* 5706 */ "16384, 524288, 2097152, 0, 0, 2, 128, 8192, 262144, 262160, -2147221504, 262144, 0, 16777216, 0",
      /* 5721 */ "-1879048192, 0, 0, 3, 32, 3072, 16384, 65536, 131072, 262144, 2097152, 25165824, 0, 0, 0, 262144",
      /* 5737 */ "1048576, 33554432, 0, 0, 1048576, 33554432, 4194304, 0, 0, 262144, 1048576, 0, 0, 8192, 262144",
      /* 5752 */ "1048576, 1, 256, 0, 0, 16384, 16384, 16384, 16384, 0, 0, 0, 48, 603979776, 0, 4352, 17152, 17152, 0",
      /* 5771 */ "0, 0, 19504, 631242752, 0, 12288, 0, 0, 0, 16384, 1073741824, 0, 3072, 3072, 3072, 15396, 15396",
      /* 5788 */ "15396, 15396, 15406, 15652, 15652, 15652, 15396, 15396, 15652, 15406, 15406, 15406, 15422, 15406, 68",
      /* 5803 */ "15406, 68, 68, 68, 68, 324, 324, 68, 324, 4164, 8260, 15716, 15460, 0, 0, 28672, 2621440, 16384, 0",
      /* 5822 */ "8192, 0, 4, 8, 16, 256, 512, 14, 0, 0, 0, 32768, 32768, 32768, 2129920, 2129920, 32768, 32768, 0, 0",
      /* 5842 */ "48, 0, 0, 32768, 1048576, 4194304, 0, 4096, 0, 8"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 5852; ++i) {EXPECTED[i] = Integer.parseInt(s2[i]);}
  }

  private static final String[] TOKEN =
  {
    "(0)",
    "IntegerLiteral",
    "DecimalLiteral",
    "DoubleLiteral",
    "StringLiteral",
    "URIQualifiedName",
    "PredefinedEntityRef",
    "'\"\"'",
    "EscapeApos",
    "ElementContentChar",
    "QuotAttrContentChar",
    "AposAttrContentChar",
    "PITarget",
    "CharRef",
    "NCName",
    "QName",
    "StringConstructorChars",
    "S",
    "S",
    "CommentContents",
    "PragmaContents",
    "Wildcard",
    "DirCommentContents",
    "DirPIContents",
    "CDataSectionContents",
    "EOF",
    "'!'",
    "'!='",
    "'\"'",
    "'#'",
    "'#)'",
    "'$'",
    "'%'",
    "''''",
    "'('",
    "'(#'",
    "'(:'",
    "')'",
    "'*'",
    "'+'",
    "','",
    "'-'",
    "'-->'",
    "'.'",
    "'..'",
    "'/'",
    "'//'",
    "'/>'",
    "':'",
    "':)'",
    "'::'",
    "':='",
    "';'",
    "'<'",
    "'<!--'",
    "'<![CDATA['",
    "'</'",
    "'<<'",
    "'<='",
    "'<?'",
    "'='",
    "'=>'",
    "'>'",
    "'>='",
    "'>>'",
    "'?'",
    "'?>'",
    "'@'",
    "'NaN'",
    "'['",
    "']'",
    "']]>'",
    "']``'",
    "'``['",
    "'`{'",
    "'after'",
    "'all'",
    "'allowing'",
    "'ancestor'",
    "'ancestor-or-self'",
    "'and'",
    "'any'",
    "'array'",
    "'as'",
    "'ascending'",
    "'at'",
    "'attribute'",
    "'base-uri'",
    "'before'",
    "'boundary-space'",
    "'by'",
    "'case'",
    "'cast'",
    "'castable'",
    "'catch'",
    "'child'",
    "'collation'",
    "'comment'",
    "'construction'",
    "'contains'",
    "'content'",
    "'context'",
    "'copy'",
    "'copy-namespaces'",
    "'count'",
    "'decimal-format'",
    "'decimal-separator'",
    "'declare'",
    "'default'",
    "'delete'",
    "'descendant'",
    "'descendant-or-self'",
    "'descending'",
    "'diacritics'",
    "'different'",
    "'digit'",
    "'distance'",
    "'div'",
    "'document'",
    "'document-node'",
    "'element'",
    "'else'",
    "'empty'",
    "'empty-sequence'",
    "'encoding'",
    "'end'",
    "'entire'",
    "'eq'",
    "'every'",
    "'exactly'",
    "'except'",
    "'exponent-separator'",
    "'external'",
    "'first'",
    "'following'",
    "'following-sibling'",
    "'for'",
    "'from'",
    "'ft-option'",
    "'ftand'",
    "'ftnot'",
    "'ftor'",
    "'function'",
    "'ge'",
    "'greatest'",
    "'group'",
    "'grouping-separator'",
    "'gt'",
    "'idiv'",
    "'if'",
    "'import'",
    "'in'",
    "'infinity'",
    "'inherit'",
    "'insensitive'",
    "'insert'",
    "'instance'",
    "'intersect'",
    "'into'",
    "'invoke'",
    "'is'",
    "'item'",
    "'language'",
    "'last'",
    "'lax'",
    "'le'",
    "'least'",
    "'let'",
    "'levels'",
    "'lowercase'",
    "'lt'",
    "'map'",
    "'minus-sign'",
    "'mod'",
    "'modify'",
    "'module'",
    "'most'",
    "'namespace'",
    "'namespace-node'",
    "'ne'",
    "'next'",
    "'no'",
    "'no-inherit'",
    "'no-preserve'",
    "'node'",
    "'nodes'",
    "'not'",
    "'occurs'",
    "'of'",
    "'only'",
    "'option'",
    "'or'",
    "'order'",
    "'ordered'",
    "'ordering'",
    "'paragraph'",
    "'paragraphs'",
    "'parent'",
    "'pattern-separator'",
    "'per-mille'",
    "'percent'",
    "'phrase'",
    "'preceding'",
    "'preceding-sibling'",
    "'preserve'",
    "'previous'",
    "'processing-instruction'",
    "'relationship'",
    "'rename'",
    "'replace'",
    "'return'",
    "'revalidation'",
    "'same'",
    "'satisfies'",
    "'schema'",
    "'schema-attribute'",
    "'schema-element'",
    "'score'",
    "'self'",
    "'sensitive'",
    "'sentence'",
    "'sentences'",
    "'skip'",
    "'sliding'",
    "'some'",
    "'stable'",
    "'start'",
    "'stemming'",
    "'stop'",
    "'strict'",
    "'strip'",
    "'switch'",
    "'text'",
    "'then'",
    "'thesaurus'",
    "'times'",
    "'to'",
    "'transform'",
    "'treat'",
    "'try'",
    "'tumbling'",
    "'type'",
    "'typeswitch'",
    "'union'",
    "'unordered'",
    "'update'",
    "'updating'",
    "'uppercase'",
    "'using'",
    "'validate'",
    "'value'",
    "'variable'",
    "'version'",
    "'weight'",
    "'when'",
    "'where'",
    "'wildcards'",
    "'window'",
    "'with'",
    "'without'",
    "'word'",
    "'words'",
    "'xquery'",
    "'zero-digit'",
    "'{'",
    "'{{'",
    "'|'",
    "'||'",
    "'}'",
    "'}`'",
    "'}}'"
  };
}

// End
