xquery version "1.0" encoding "UTF-8";

(: This file was generated on Wed Dec 11, 2013 16:17 (UTC) by REx v5.28 which is Copyright (c) 1979-2013 by Gunther Rademacher <grd@gmx.net> :)
(: REx command line: xquery-30.ebnf -xquery -tree :)

(:~
 : The parser that was generated for the xquery-30 grammar.
 :)
module namespace p="xquery-30";
declare default function namespace "http://www.w3.org/2005/xpath-functions";

(:~
 : The index of the parser state for accessing the combined
 : (i.e. level > 1) lookahead code.
 :)
declare variable $p:lk := 1;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the begin of the token that has been shifted.
 :)
declare variable $p:b0 := 2;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the end of the token that has been shifted.
 :)
declare variable $p:e0 := 3;

(:~
 : The index of the parser state for accessing the code of the
 : level-1-lookahead token.
 :)
declare variable $p:l1 := 4;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the begin of the level-1-lookahead token.
 :)
declare variable $p:b1 := 5;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the end of the level-1-lookahead token.
 :)
declare variable $p:e1 := 6;

(:~
 : The index of the parser state for accessing the code of the
 : level-2-lookahead token.
 :)
declare variable $p:l2 := 7;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the begin of the level-2-lookahead token.
 :)
declare variable $p:b2 := 8;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the end of the level-2-lookahead token.
 :)
declare variable $p:e2 := 9;

(:~
 : The index of the parser state for accessing the code of the
 : level-3-lookahead token.
 :)
declare variable $p:l3 := 10;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the begin of the level-3-lookahead token.
 :)
declare variable $p:b3 := 11;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the end of the level-3-lookahead token.
 :)
declare variable $p:e3 := 12;

(:~
 : The index of the parser state for accessing the token code that
 : was expected when an error was found.
 :)
declare variable $p:error := 13;

(:~
 : The index of the parser state that points to the first entry
 : used for collecting action results.
 :)
declare variable $p:result := 14;

(:~
 : The codepoint to charclass mapping for 7 bit codepoints.
 :)
declare variable $p:MAP0 as xs:integer+ :=
(
  68, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30, 38, 40,
  41, 42, 43, 44, 45, 46, 47, 48, 30, 30, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 38,
  38
);

(:~
 : The codepoint to charclass mapping for codepoints below the surrogate block.
 :)
declare variable $p:MAP1 as xs:integer+ :=
(
  108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181, 181, 214,
  215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 247, 261, 277, 293, 309, 355, 371,
  387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  339, 339, 440, 440, 440, 440, 440, 440, 440, 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422,
  423, 423, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423,
  423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  423, 423, 423, 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 68, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
  0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32,
  33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
  30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48,
  30, 30, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 38, 38, 38, 38, 38, 38, 38, 38, 38,
  38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 67, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
  67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67
);

(:~
 : The codepoint to charclass mapping for codepoints above the surrogate block.
 :)
declare variable $p:MAP2 as xs:integer+ :=
(
  57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30, 38
);

(:~
 : The token-set-id to DFA-initial-state mapping.
 :)
declare variable $p:INITIAL as xs:integer+ :=
(
  1, 2, 45059, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
  61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
  90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
  115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
  138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
  161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
  184, 185, 186, 187, 188, 189, 190
);

(:~
 : The DFA transition table.
 :)
declare variable $p:TRANSITION as xs:integer+ :=
(
  11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 8832, 8883, 8887, 8905, 8887, 8887, 8887, 8927, 8887,
  8887, 8917, 8889, 8943, 11018, 15241, 11018, 18497, 11018, 17861, 9297, 11018, 11018, 14785, 14793, 9868, 8972, 9009,
  9054, 11018, 9093, 11018, 17866, 9114, 9144, 9160, 9022, 9038, 9196, 10082, 9031, 9189, 9212, 11018, 9235, 11018,
  14125, 9254, 11541, 9288, 9313, 11111, 9344, 9869, 9219, 11116, 9349, 9365, 9328, 14758, 9402, 26005, 11135, 9439,
  9469, 9550, 9497, 9518, 9539, 9555, 9502, 9523, 9571, 9631, 9668, 9705, 9734, 9750, 9766, 9787, 10129, 9761, 9782,
  9803, 9819, 9839, 14295, 9864, 9915, 9885, 9910, 9931, 9962, 9999, 10036, 13903, 13894, 13910, 10108, 10145, 10171,
  10187, 10181, 10203, 10253, 10307, 10305, 10323, 10338, 10369, 9866, 9386, 9868, 10050, 10399, 10415, 10431, 10451,
  10467, 10519, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 10568, 11018, 11018, 11690, 11018, 11018,
  11018, 12731, 26510, 10589, 10602, 24007, 10623, 11018, 15241, 11018, 18497, 22785, 17861, 9297, 11018, 11018, 14785,
  14793, 9868, 10672, 9009, 9054, 11018, 9093, 11018, 17866, 9114, 9144, 9160, 9022, 9038, 9196, 10082, 9031, 9189,
  9212, 11018, 9235, 11018, 14125, 9254, 11541, 9288, 9313, 11111, 9344, 9869, 9219, 11116, 9349, 9365, 9328, 14758,
  9402, 26005, 11135, 9439, 9469, 9550, 9497, 9518, 9539, 9555, 9502, 9523, 9571, 9631, 9668, 9705, 9734, 9750, 9766,
  9787, 10129, 9761, 9782, 9803, 9819, 9839, 14295, 9864, 9915, 9885, 9910, 9931, 9962, 9999, 10036, 13903, 13894,
  13910, 10108, 10145, 10171, 10187, 10181, 10203, 10253, 10307, 10305, 10323, 10338, 10369, 9866, 9386, 9868, 10050,
  10399, 10415, 10431, 10451, 10467, 10519, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 10709, 10725,
  11018, 13942, 11018, 11018, 11343, 10757, 11336, 11018, 11018, 10744, 10773, 11018, 15241, 11018, 26459, 11018, 17861,
  9297, 11018, 11018, 14785, 14793, 9868, 10832, 9009, 9054, 11018, 9093, 11018, 17866, 9114, 9144, 9160, 9022, 9038,
  9196, 10082, 9031, 9189, 9212, 11018, 9235, 11018, 14125, 9254, 11541, 9288, 9313, 11111, 9344, 9869, 9219, 11116,
  9349, 9365, 9328, 14758, 9402, 26005, 11135, 9439, 9469, 9550, 9497, 9518, 9539, 9555, 9502, 9523, 9571, 9631, 9668,
  9705, 9734, 9750, 9766, 9787, 10129, 9761, 9782, 9803, 9819, 9839, 14295, 9864, 9915, 9885, 9910, 9931, 9962, 9999,
  10036, 13903, 13894, 13910, 10108, 10145, 10171, 10187, 10181, 10203, 10253, 10307, 10305, 10323, 10338, 10369, 9866,
  9386, 9868, 10050, 10399, 10415, 10431, 10451, 10467, 10519, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018,
  11018, 10869, 10920, 11018, 13808, 11018, 11018, 10920, 12731, 24986, 10897, 10912, 26989, 10941, 11018, 15241, 10999,
  18497, 11017, 17861, 9297, 11018, 11018, 14785, 14793, 9868, 11035, 9009, 9054, 11018, 9093, 11018, 17866, 9114, 9144,
  9160, 9022, 9038, 9196, 10082, 9031, 9189, 9212, 11018, 9235, 11018, 14125, 9254, 11541, 9288, 9313, 11111, 9344,
  9869, 11100, 11116, 9349, 9365, 9328, 14758, 9402, 26005, 11135, 9439, 9469, 9550, 9497, 9518, 9539, 9555, 9502, 9523,
  9571, 9631, 9668, 9705, 9734, 9750, 9766, 9787, 10129, 9761, 9782, 9803, 9819, 9839, 14295, 9864, 9915, 9885, 9910,
  9931, 9962, 9999, 10036, 13903, 13894, 13910, 10108, 10145, 10171, 10187, 10181, 10203, 10253, 10307, 10305, 10323,
  10338, 10369, 9866, 9386, 9868, 10050, 10399, 10415, 10431, 10451, 10467, 10519, 11018, 11018, 11018, 11018, 11018,
  11018, 11018, 11018, 11018, 10568, 11607, 11018, 11690, 11132, 11018, 11757, 11163, 11018, 23011, 11609, 11151, 10623,
  11018, 15241, 11018, 18497, 11018, 17861, 9297, 11018, 11018, 14785, 14793, 9868, 8972, 9009, 9054, 11018, 9093,
  11018, 17866, 9114, 9144, 9160, 9022, 9038, 9196, 10082, 9031, 9189, 9212, 11018, 9235, 11018, 14125, 9254, 11541,
  9288, 9313, 11111, 9344, 9869, 9219, 11116, 9349, 9365, 9328, 14758, 9402, 26005, 11135, 9439, 9469, 9550, 9497, 9518,
  9539, 9555, 9502, 9523, 9571, 9631, 9668, 9705, 9734, 9750, 9766, 9787, 10129, 9761, 9782, 9803, 9819, 9839, 14295,
  9864, 9915, 9885, 9910, 9931, 9962, 9999, 10036, 13903, 13894, 13910, 10108, 10145, 10171, 10187, 10181, 10203, 10253,
  10307, 10305, 10323, 10338, 10369, 9866, 9386, 9868, 10050, 10399, 10415, 10431, 10451, 10467, 10519, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 11018, 11018, 10568, 11018, 11018, 11690, 9419, 11018, 9415, 11190, 25849, 9422,
  16319, 11179, 10623, 11018, 15241, 11018, 18497, 11018, 17861, 9297, 11018, 11018, 14785, 14793, 9868, 8972, 9009,
  9054, 11018, 9093, 11018, 17866, 9114, 9144, 9160, 9022, 9038, 9196, 10082, 9031, 9189, 9212, 11018, 9235, 11018,
  14125, 9254, 11541, 9288, 9313, 11111, 9344, 9869, 9219, 11116, 9349, 9365, 9328, 14758, 9402, 26005, 11135, 9439,
  9469, 9550, 9497, 9518, 9539, 9555, 9502, 9523, 9571, 9631, 9668, 9705, 9734, 9750, 9766, 9787, 10129, 9761, 9782,
  9803, 9819, 9839, 14295, 9864, 9915, 9885, 9910, 9931, 9962, 9999, 10036, 13903, 13894, 13910, 10108, 10145, 10171,
  10187, 10181, 10203, 10253, 10307, 10305, 10323, 10338, 10369, 9866, 9386, 9868, 10050, 10399, 10415, 10431, 10451,
  10467, 10519, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 10568, 11018, 11018, 11690, 11018, 11018,
  11018, 24813, 11018, 11018, 11018, 11018, 11206, 11018, 15241, 11018, 18497, 11018, 17861, 9297, 11018, 11018, 14785,
  14793, 9868, 8972, 9009, 9054, 11018, 9093, 11018, 17866, 9114, 9144, 9160, 9022, 9038, 9196, 9376, 9031, 9189, 9212,
  11018, 9235, 11018, 14125, 9254, 11541, 9288, 9313, 11111, 9344, 9869, 9219, 11116, 9349, 9365, 9328, 14758, 9402,
  26005, 11135, 9439, 9469, 9550, 9497, 9518, 9539, 9555, 9502, 9523, 9571, 9631, 9668, 9705, 9734, 9750, 9766, 9787,
  10129, 9761, 9782, 9803, 9819, 9839, 14295, 9864, 9915, 9885, 9910, 9931, 9962, 9999, 10036, 13903, 13894, 13910,
  10108, 10145, 10171, 10187, 10181, 10203, 10253, 10307, 10305, 10323, 10338, 10369, 9866, 9386, 9868, 10050, 10399,
  10415, 10431, 10451, 10467, 10519, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11243, 11259, 11018,
  14077, 11018, 11018, 9269, 8956, 9262, 11018, 11018, 11278, 11315, 11018, 15241, 11018, 18497, 11362, 17861, 9297,
  11018, 11018, 14785, 14793, 9868, 11382, 9009, 9054, 11018, 9093, 11018, 17866, 9114, 9144, 9160, 9022, 9038, 9196,
  10082, 9031, 9189, 9212, 11018, 9235, 11018, 14125, 9254, 11541, 9288, 9313, 11111, 9344, 9869, 9219, 11116, 9349,
  9365, 9328, 14758, 9402, 26005, 11135, 9439, 9469, 9550, 9497, 9518, 9539, 9555, 9502, 9523, 9571, 9631, 9668, 9705,
  9734, 9750, 9766, 9787, 10129, 9761, 9782, 9803, 9819, 9839, 14295, 9864, 9915, 9885, 9910, 9931, 9962, 9999, 10036,
  13903, 13894, 13910, 10108, 10145, 10171, 10187, 10181, 10203, 10253, 10307, 10305, 10323, 10338, 10369, 9866, 9386,
  9868, 10050, 10399, 10415, 10431, 10451, 10467, 10519, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018,
  10568, 11427, 11454, 11459, 11449, 11454, 11475, 11496, 11480, 11433, 11512, 11527, 10623, 11018, 20386, 11018, 18497,
  11018, 17861, 9297, 11018, 11018, 14785, 14793, 9868, 8972, 9009, 11592, 11018, 9093, 11018, 17866, 9114, 9144, 9160,
  9022, 9038, 9196, 10082, 9031, 9189, 9212, 11018, 9235, 11018, 14125, 9254, 11541, 9288, 9313, 11111, 9344, 9869,
  9219, 11116, 9349, 9365, 9328, 14758, 9402, 26005, 11135, 9439, 9469, 9550, 9497, 9518, 9539, 9555, 9502, 9523, 9571,
  9631, 9668, 9705, 9734, 9750, 9766, 9787, 10129, 9761, 9782, 9803, 9819, 9839, 14295, 9864, 9915, 9885, 9910, 9931,
  9962, 9999, 10036, 13903, 13894, 13910, 10108, 10145, 10171, 10187, 10181, 10203, 10253, 10307, 10305, 10323, 10338,
  10369, 9866, 9386, 9868, 10050, 10399, 10415, 10431, 10451, 10467, 10519, 11018, 11018, 11018, 11018, 11018, 11018,
  11018, 11018, 11018, 10568, 11643, 11018, 11690, 11672, 11018, 9642, 12731, 10955, 11625, 11636, 11659, 11706, 11018,
  15322, 11018, 18497, 11018, 17861, 9297, 11018, 11018, 14785, 14793, 9868, 8972, 9009, 11742, 11018, 9093, 11018,
  17866, 9114, 9144, 9160, 9022, 9038, 9196, 10082, 9031, 9189, 9212, 11018, 9235, 11018, 14125, 9254, 11541, 9288,
  9313, 11111, 9344, 9869, 9219, 11116, 9349, 9365, 9328, 14758, 9402, 26005, 11135, 9439, 9469, 9550, 9497, 9518, 9539,
  9555, 9502, 9523, 9571, 9631, 9668, 9705, 9734, 9750, 9766, 9787, 10129, 9761, 9782, 9803, 9819, 9839, 14295, 9864,
  9915, 9885, 9910, 9931, 9962, 9999, 10036, 13903, 13894, 13910, 10108, 10145, 10171, 10187, 10181, 10203, 10253,
  10307, 10305, 10323, 10338, 10369, 9866, 9386, 9868, 10050, 10399, 10415, 10431, 10451, 10467, 10519, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 11018, 11018, 10568, 12661, 11018, 11690, 11018, 11018, 11018, 12731, 27021, 11780,
  11791, 11807, 10623, 11018, 15241, 11018, 18497, 11018, 17861, 9297, 11018, 11018, 14785, 14793, 9868, 8972, 9009,
  9054, 11018, 9093, 11018, 17866, 9114, 9144, 9160, 9022, 9038, 9196, 10072, 9031, 9189, 9212, 11018, 9235, 11018,
  14125, 9254, 11541, 9288, 9313, 11111, 9344, 9869, 10092, 11116, 9349, 9365, 9328, 14758, 9402, 26005, 11135, 9439,
  9469, 9550, 9497, 9518, 9539, 9555, 9502, 9523, 9571, 9631, 9668, 9705, 9734, 9750, 9766, 9787, 10129, 9761, 9782,
  9803, 9819, 9839, 14295, 9864, 9915, 9885, 9910, 9931, 9962, 9999, 10036, 13903, 13894, 13910, 10108, 10145, 10171,
  10187, 10181, 10203, 10253, 10307, 10305, 10323, 10338, 10369, 9866, 9386, 9868, 10050, 10399, 10415, 10431, 10451,
  10467, 10519, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 10568, 11018, 11018, 11690, 11018, 11018,
  11018, 12731, 10816, 11857, 11882, 11873, 10623, 11018, 15241, 11018, 18497, 11018, 17861, 9297, 11018, 11018, 14785,
  14793, 9868, 8972, 9009, 9054, 11018, 11903, 11018, 17866, 9114, 9144, 9160, 9022, 9038, 9196, 10082, 9031, 9189,
  9212, 11018, 9235, 11018, 14125, 9254, 11541, 9288, 9313, 11111, 9344, 9869, 9219, 11116, 9349, 9365, 9328, 14758,
  9402, 26005, 11135, 9439, 9469, 9550, 9497, 9518, 9539, 9555, 9502, 9523, 9571, 9631, 9668, 9705, 9734, 9750, 9766,
  9787, 10129, 9761, 9782, 9803, 9819, 9839, 14295, 9864, 9915, 9885, 9910, 9931, 9962, 9999, 10036, 13903, 13894,
  13910, 10108, 10145, 10171, 10187, 10181, 10203, 10253, 10307, 10305, 10323, 10338, 10369, 9866, 9386, 9868, 10050,
  10399, 10415, 10431, 10451, 10467, 10519, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 10568, 10154,
  11018, 11690, 12855, 11018, 10155, 12731, 11925, 11938, 11949, 11909, 10623, 11018, 15241, 11018, 18497, 11018, 17861,
  9297, 11018, 11018, 14785, 14793, 9868, 8972, 9009, 9054, 11018, 9093, 11018, 17866, 9114, 9144, 9160, 9022, 9038,
  9196, 10082, 9031, 9189, 9212, 11018, 9235, 11018, 14125, 9254, 11541, 9288, 9313, 11111, 9344, 9869, 9219, 11116,
  9349, 9365, 9328, 14758, 9402, 26005, 11135, 9439, 9469, 9550, 9497, 9518, 9539, 9555, 9502, 9523, 9571, 9631, 9668,
  9705, 9734, 9750, 9766, 9787, 10129, 9761, 9782, 9803, 9819, 9839, 14295, 9864, 9915, 9885, 9910, 9931, 9962, 9999,
  10036, 13903, 13894, 13910, 10108, 10145, 10171, 10187, 10181, 10203, 10253, 10307, 10305, 10323, 10338, 10369, 9866,
  9386, 9868, 10050, 10399, 10415, 10431, 10451, 10467, 10519, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018,
  11018, 11970, 11018, 11018, 11690, 11018, 11018, 11018, 12731, 14016, 11993, 12004, 12025, 12061, 11018, 15241, 11018,
  18497, 11018, 20193, 13043, 11018, 11018, 21176, 16778, 19933, 17613, 11018, 13776, 22960, 11903, 12091, 19744, 16059,
  16196, 11018, 21181, 16277, 16277, 22705, 19933, 19933, 22930, 11018, 11018, 11018, 14010, 12840, 19744, 16059, 16200,
  16277, 16277, 16277, 18806, 19933, 19933, 19933, 18093, 12112, 11018, 11018, 22359, 26734, 13046, 16276, 16277, 16277,
  25912, 19933, 19933, 16256, 11018, 11018, 11018, 12133, 16059, 21178, 12155, 16278, 14678, 21616, 19933, 22527, 11018,
  12175, 19745, 21180, 17910, 24420, 19933, 12196, 12216, 24568, 12233, 16277, 24394, 19933, 12253, 24805, 16863, 12271,
  12289, 22525, 20195, 15934, 26235, 22528, 12313, 20562, 12354, 24480, 24393, 24591, 18614, 22721, 22715, 15482, 16150,
  21727, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 10568, 11018, 11018, 11690, 11018, 11018, 11018,
  12391, 11018, 11018, 11018, 12407, 10623, 11018, 15241, 11018, 25788, 11018, 20193, 13043, 11018, 11018, 21176, 16778,
  19933, 12423, 11018, 13776, 11018, 9093, 11018, 19744, 16059, 16196, 11018, 21181, 16277, 16277, 22705, 19933, 19933,
  16257, 11018, 11018, 11018, 14010, 11018, 19744, 16059, 16200, 16277, 16277, 16277, 18806, 19933, 19933, 19933, 19246,
  11018, 11018, 11018, 11018, 26734, 13046, 16276, 16277, 16277, 25912, 19933, 19933, 16256, 11018, 11018, 11018, 20191,
  16059, 21178, 16277, 16278, 14678, 19933, 19933, 22527, 11018, 11018, 19745, 21180, 16277, 24420, 19933, 19110, 11018,
  11018, 12233, 16277, 24394, 19933, 11018, 11018, 12237, 16277, 19933, 22525, 20195, 16277, 19932, 22528, 17114, 19111,
  24389, 24480, 24393, 20569, 19107, 22721, 22715, 15482, 16150, 21727, 11018, 11018, 11018, 11018, 11018, 11018, 11018,
  11018, 11018, 10568, 12477, 11018, 11690, 11018, 11018, 11018, 12731, 10503, 12447, 12471, 12463, 10623, 11018, 15241,
  11018, 18497, 12009, 17861, 11555, 11018, 11018, 14785, 14793, 9868, 8972, 9009, 9054, 11018, 9093, 11018, 17866,
  9114, 9144, 9160, 9022, 9038, 9196, 10082, 9031, 9189, 9212, 11018, 9235, 11018, 14125, 9254, 11541, 9288, 9313,
  11111, 9344, 9869, 9219, 11116, 9349, 9365, 9328, 14758, 9402, 26005, 11135, 9439, 9469, 9550, 9497, 9518, 9539, 9555,
  9502, 9523, 9571, 9631, 9668, 9705, 9734, 9750, 9766, 9787, 10129, 9761, 9782, 9803, 9819, 9839, 14295, 9864, 9915,
  9885, 9910, 9931, 9962, 9999, 10036, 13903, 13894, 13910, 10108, 10145, 10171, 10187, 10181, 10203, 10253, 10307,
  10305, 10323, 10338, 10369, 9866, 9386, 9868, 10050, 10399, 10415, 10431, 10451, 10467, 10519, 11018, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 11018, 10568, 12497, 11018, 11690, 11018, 11018, 11018, 12514, 11018, 11018, 11018,
  12530, 12546, 11018, 15241, 11018, 12375, 11018, 20193, 13043, 11018, 11018, 21176, 16778, 19933, 19606, 11018, 13776,
  11018, 12597, 11018, 19744, 16059, 16196, 11018, 21181, 16277, 16277, 22705, 19933, 19933, 19418, 12631, 11018, 11018,
  12650, 11018, 19744, 16059, 16200, 16277, 16277, 16277, 18806, 19933, 19933, 19933, 12686, 11018, 11018, 26388, 11018,
  26734, 13046, 16276, 16277, 16277, 12711, 19933, 19933, 19129, 12694, 11018, 11018, 20191, 16059, 21178, 16277, 24333,
  12747, 19933, 19933, 22527, 11018, 11018, 19745, 21180, 16277, 15634, 19933, 19110, 11018, 11018, 12233, 16277, 24394,
  19933, 11018, 11018, 12237, 16277, 19933, 22525, 20195, 16277, 19932, 22528, 17114, 19111, 24389, 24480, 24393, 20569,
  19107, 22721, 22715, 15482, 16150, 21727, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 10568, 11764,
  11018, 12045, 23186, 11018, 11679, 12731, 11685, 17346, 12774, 20845, 12791, 11018, 20825, 12807, 18497, 11018, 17861,
  9297, 11018, 11018, 17073, 13298, 13339, 13159, 9009, 12825, 11018, 9093, 11018, 17866, 9114, 9144, 9160, 12879,
  12983, 12895, 13483, 13132, 12911, 13099, 11018, 9235, 11018, 14125, 9254, 11541, 9288, 9313, 12939, 12968, 13262,
  13686, 13072, 13062, 13345, 13628, 14758, 9402, 26005, 11135, 9439, 9469, 13416, 13189, 13471, 12952, 13088, 13122,
  13148, 9571, 9631, 9668, 9705, 9734, 13175, 13205, 12998, 23699, 13236, 13717, 13278, 9819, 9839, 14295, 13294, 13314,
  13330, 12923, 13361, 9962, 9999, 13403, 13568, 13597, 13432, 10108, 10145, 13457, 13509, 13525, 13537, 13553, 13584,
  13613, 13644, 10353, 13441, 17079, 13493, 17083, 13250, 13220, 13660, 13676, 13106, 13702, 13733, 11018, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 11018, 10568, 11954, 11018, 11690, 9584, 11018, 11018, 12731, 13769, 13792, 13803,
  16377, 10623, 11018, 15241, 11018, 18497, 11018, 17861, 9297, 11018, 11018, 14785, 14793, 9868, 8972, 9009, 9054,
  11018, 9093, 11018, 17866, 9114, 9144, 9160, 9022, 9038, 9196, 10082, 9031, 9189, 9212, 11018, 9235, 11018, 14230,
  9254, 11541, 9288, 9313, 11111, 9344, 9869, 9219, 11116, 9349, 9365, 13837, 14758, 9402, 14132, 11135, 9439, 9469,
  9550, 9497, 9518, 9539, 9555, 9502, 13824, 10636, 9631, 9668, 9705, 9734, 9750, 9766, 13853, 13869, 9761, 9782, 9803,
  9819, 9839, 14295, 9864, 9915, 13885, 9910, 9931, 9962, 9999, 10036, 13903, 13894, 13910, 10108, 10145, 10171, 10187,
  10181, 10203, 10253, 10307, 10305, 10323, 10338, 10369, 9866, 9386, 9868, 10050, 10399, 10415, 10431, 10451, 10467,
  10519, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 10568, 11018, 11018, 11690, 11018, 11018, 11018,
  25941, 24174, 13926, 13937, 13958, 10623, 11018, 15241, 11018, 18497, 11018, 17861, 9128, 11018, 11018, 14785, 14793,
  9868, 13995, 9009, 9054, 11018, 9093, 11018, 17866, 9114, 9144, 9160, 9022, 9038, 9196, 10082, 9031, 9189, 9212,
  11018, 9235, 11018, 14125, 9254, 11541, 9288, 9313, 11111, 9344, 9869, 9219, 11116, 9349, 9365, 9328, 14758, 9402,
  26005, 11135, 9439, 9469, 9550, 9497, 9518, 9539, 9555, 9502, 9523, 9571, 9631, 9668, 9705, 9734, 9750, 9766, 9787,
  10129, 9761, 9782, 9803, 9819, 9839, 14295, 9864, 9915, 9885, 9910, 9931, 9962, 9999, 10036, 13903, 13894, 13910,
  10108, 10145, 10171, 10187, 10181, 10203, 10253, 10307, 10305, 10323, 10338, 10369, 9866, 9386, 9868, 10050, 10399,
  10415, 10431, 10451, 10467, 10519, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 14032, 17387, 11018,
  11690, 11018, 11018, 11018, 12731, 19479, 14061, 14072, 16987, 10623, 14093, 15241, 11018, 18497, 11018, 17861, 9453,
  11018, 11018, 14785, 14793, 9868, 14110, 9009, 9054, 11018, 9093, 11018, 17866, 9114, 9144, 9160, 9022, 9038, 9196,
  10082, 9031, 9189, 9212, 11018, 9235, 11018, 14125, 9254, 11541, 9288, 9313, 11111, 9344, 9869, 9219, 11116, 9349,
  9365, 9328, 14758, 9402, 26005, 11135, 9439, 9469, 9550, 9497, 9518, 9539, 9555, 9502, 9523, 9571, 9631, 9668, 9705,
  9734, 9750, 9766, 9787, 10129, 9761, 9782, 9803, 9819, 9839, 14295, 9864, 9915, 9885, 9910, 9931, 9962, 9999, 10036,
  13903, 13894, 13910, 10108, 10145, 10171, 10187, 10181, 10203, 10253, 10307, 10305, 10323, 10338, 10369, 9866, 9386,
  9868, 10050, 10399, 10415, 10431, 10451, 10467, 10519, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018,
  14148, 14195, 11018, 11690, 11018, 11018, 11018, 12731, 24950, 14178, 14189, 10853, 14215, 11018, 15241, 11018, 18497,
  11018, 17861, 9718, 11018, 11018, 14785, 14793, 9868, 10482, 9009, 9054, 11018, 9093, 11018, 17866, 9114, 9144, 9160,
  9022, 9038, 9196, 10082, 9031, 9189, 9212, 11018, 9235, 11018, 14125, 9254, 11541, 9288, 9313, 11111, 9344, 9869,
  9219, 11116, 9349, 9365, 9328, 14758, 9402, 26005, 11135, 9439, 9469, 9550, 9497, 9518, 9539, 9555, 9502, 9523, 9571,
  9631, 9668, 9705, 9734, 9750, 9766, 9787, 10129, 9761, 9782, 9803, 9819, 9839, 14295, 9864, 9915, 9885, 9910, 9931,
  9962, 9999, 10036, 13903, 13894, 13910, 10108, 10145, 10171, 10187, 10181, 10203, 10253, 10307, 10305, 10323, 10338,
  10369, 9866, 9386, 9868, 10050, 10399, 10415, 10431, 10451, 10467, 10519, 11018, 11018, 11018, 11018, 11018, 11018,
  11018, 11018, 11018, 14280, 11018, 11018, 11690, 11220, 11018, 11018, 12731, 11018, 13013, 11018, 9597, 14311, 11018,
  15241, 11018, 18497, 12096, 17861, 9297, 11018, 11018, 14785, 14793, 9868, 14353, 9009, 9054, 11018, 9093, 11018,
  17866, 9114, 9144, 9160, 9022, 9038, 9196, 10082, 9031, 9189, 9212, 11018, 9235, 11018, 14125, 9254, 11541, 9288,
  9313, 11111, 9344, 9869, 9219, 11116, 9349, 9365, 9328, 14758, 9402, 26005, 11135, 9439, 9469, 9550, 9497, 9518, 9539,
  9555, 9502, 9523, 9571, 9631, 9668, 9705, 9734, 9750, 9766, 9787, 10129, 9761, 9782, 9803, 9819, 9839, 14295, 9864,
  9915, 9885, 9910, 9931, 9962, 9999, 10036, 13903, 13894, 13910, 10108, 10145, 10171, 10187, 10181, 10203, 10253,
  10307, 10305, 10323, 10338, 10369, 9866, 9386, 9868, 10050, 10399, 10415, 10431, 10451, 10467, 10519, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 11018, 11018, 10568, 11018, 11018, 11690, 11018, 11018, 11018, 12731, 11018, 11018,
  11018, 14427, 10623, 11018, 15241, 11018, 18497, 11018, 17861, 9297, 11018, 11018, 14785, 14793, 9868, 8972, 9009,
  9054, 11018, 9093, 11018, 17866, 9114, 9144, 9160, 9022, 9038, 9196, 10082, 9031, 9189, 9212, 11018, 9235, 11018,
  14125, 9254, 11541, 9288, 9313, 11111, 9344, 9869, 9219, 11116, 9349, 9365, 9328, 14758, 9402, 26005, 11135, 9439,
  9469, 9550, 9497, 9518, 9539, 9555, 9502, 9523, 9571, 9631, 9668, 9705, 9734, 9750, 9766, 9787, 10129, 9761, 9782,
  9803, 9819, 9839, 14295, 9864, 9915, 9885, 9910, 9931, 9962, 9999, 10036, 13903, 13894, 13910, 10108, 10145, 10171,
  10187, 10181, 10203, 10253, 10307, 10305, 10323, 10338, 10369, 9866, 9386, 9868, 10050, 10399, 10415, 10431, 10451,
  10467, 10519, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 12040, 11018, 11018, 11690, 11018, 11018,
  11018, 12731, 12139, 11018, 14487, 22994, 14514, 11018, 15241, 11018, 11018, 11018, 20193, 13043, 11018, 11018, 21176,
  16778, 19933, 17613, 11018, 13776, 11018, 11018, 11018, 19744, 16059, 16196, 11018, 23584, 16277, 16277, 21687, 19933,
  19933, 16257, 11018, 11018, 11018, 26390, 11018, 19744, 16059, 16200, 16277, 16277, 16277, 25304, 19933, 19933, 19933,
  15871, 11018, 11018, 26388, 11018, 26734, 13046, 16276, 16277, 16277, 25912, 19933, 19933, 19129, 12694, 11018, 19228,
  20191, 16059, 21178, 16277, 16278, 14569, 19933, 19933, 22527, 11018, 11018, 19745, 21180, 16277, 15634, 19933, 19110,
  11018, 10544, 12233, 16277, 24394, 19933, 11018, 11018, 12237, 16277, 19933, 22525, 20195, 16277, 19932, 22528, 17114,
  19111, 24389, 24480, 24393, 20569, 19107, 22721, 22715, 15482, 16150, 21727, 11018, 11018, 11018, 11018, 11018, 11018,
  11018, 11018, 11018, 12040, 11018, 11018, 11690, 11018, 11018, 11018, 12731, 12139, 11018, 14487, 22994, 14514, 11018,
  15241, 11018, 11018, 11018, 20193, 13043, 11018, 11018, 21176, 16778, 19933, 17613, 11018, 13776, 11018, 11018, 11018,
  19744, 16059, 16196, 11018, 23584, 16277, 16277, 21687, 19933, 19933, 16257, 11018, 11018, 11018, 26390, 11018, 19744,
  16059, 16200, 16277, 16277, 16277, 25304, 19933, 19933, 19933, 15871, 11018, 11018, 26388, 11018, 26734, 13046, 16276,
  16277, 16277, 25912, 19933, 19933, 19129, 12694, 11018, 11018, 20191, 16059, 21178, 16277, 16278, 14569, 19933, 19933,
  22527, 11018, 11018, 19745, 21180, 16277, 15634, 19933, 19110, 11018, 11018, 12233, 16277, 24394, 19933, 11018, 11018,
  12237, 16277, 19933, 22525, 20195, 16277, 19932, 22528, 17114, 19111, 24389, 24480, 24393, 20569, 19107, 22721, 22715,
  15482, 16150, 21727, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 12040, 11018, 11018, 11690, 11018,
  11018, 11018, 12731, 12139, 11018, 14487, 22994, 14514, 11018, 15241, 11018, 11018, 11018, 20193, 13043, 11018, 11018,
  21176, 16778, 19933, 17613, 11018, 13776, 11018, 11018, 11018, 19744, 16059, 16196, 11018, 23584, 16277, 16277, 21687,
  19933, 19933, 16257, 11018, 11018, 11018, 26390, 25098, 19744, 16059, 16200, 16277, 16277, 16277, 25304, 19933, 19933,
  19933, 15871, 11018, 11018, 26388, 11018, 26734, 13046, 16276, 16277, 16277, 25912, 19933, 19933, 19129, 12694, 11018,
  11018, 20191, 16059, 21178, 16277, 16278, 14569, 19933, 19933, 22527, 11018, 11018, 19745, 21180, 16277, 15634, 19933,
  19110, 11018, 11018, 12233, 16277, 24394, 19933, 11018, 11018, 12237, 16277, 19933, 22525, 20195, 16277, 19932, 22528,
  17114, 19111, 24389, 24480, 24393, 20569, 19107, 22721, 22715, 15482, 16150, 21727, 11018, 11018, 11018, 11018, 11018,
  11018, 11018, 11018, 11018, 12040, 11018, 11018, 11690, 11018, 11018, 11018, 12731, 12139, 11018, 14487, 22994, 14514,
  11018, 15241, 11018, 11018, 11018, 20193, 13043, 11018, 11018, 21176, 16778, 19933, 17613, 11018, 13776, 11018, 11018,
  11018, 19744, 16059, 16196, 11018, 23584, 16277, 16277, 21687, 19933, 19933, 16257, 11018, 11018, 11018, 26390, 11018,
  19744, 16059, 16200, 16277, 16277, 16277, 25304, 19933, 19933, 19933, 15871, 11018, 11018, 26388, 14596, 26734, 13046,
  16276, 16277, 16277, 25912, 19933, 19933, 19129, 12694, 11018, 11018, 20191, 16059, 21178, 16277, 16278, 14569, 19933,
  19933, 22527, 11018, 11018, 19745, 21180, 16277, 15634, 19933, 19110, 11018, 11018, 12233, 16277, 24394, 19933, 11018,
  11018, 12237, 16277, 19933, 22525, 20195, 16277, 19932, 22528, 17114, 19111, 24389, 24480, 24393, 20569, 19107, 22721,
  22715, 15482, 16150, 21727, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 12040, 11018, 11018, 11690,
  11018, 11018, 11018, 12731, 12139, 11018, 14487, 22994, 14514, 11018, 15241, 11018, 26197, 11018, 20193, 13043, 11018,
  11018, 21176, 16778, 19933, 17613, 11018, 13776, 11018, 26203, 11018, 19744, 16059, 16196, 11018, 23584, 16277, 16277,
  21687, 19933, 19933, 16257, 11018, 11018, 11018, 26390, 11018, 19744, 16059, 16200, 16277, 16277, 16277, 25304, 19933,
  19933, 19933, 15871, 11018, 11018, 26388, 11018, 26734, 13046, 16276, 16277, 16277, 25912, 19933, 19933, 19129, 12694,
  11018, 11018, 20191, 16059, 21178, 16277, 16278, 14569, 19933, 19933, 22527, 11018, 11018, 19745, 21180, 16277, 15634,
  19933, 19110, 11018, 11018, 12233, 16277, 24394, 19933, 11018, 11018, 12237, 16277, 19933, 22525, 20195, 16277, 19932,
  22528, 17114, 19111, 24389, 24480, 24393, 20569, 19107, 22721, 22715, 15482, 16150, 21727, 11018, 11018, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 12040, 11018, 11018, 11690, 11018, 11018, 11018, 12731, 12139, 11018, 14487, 22994,
  14514, 11018, 15241, 11018, 11018, 11018, 20193, 13043, 11018, 11018, 21176, 16778, 19933, 17613, 11018, 13776, 11018,
  11018, 11018, 19744, 16059, 16196, 11018, 23584, 16277, 16277, 21687, 19933, 19933, 16257, 11018, 11018, 11018, 11018,
  11018, 19744, 16059, 16200, 16277, 16277, 16277, 25304, 19933, 19933, 19933, 19246, 11018, 11018, 11018, 11018, 26734,
  13046, 16276, 16277, 16277, 25912, 19933, 19933, 16256, 11018, 11018, 11018, 20191, 16059, 21178, 16277, 16278, 14678,
  19933, 19933, 22527, 11018, 11018, 19745, 21180, 16277, 24420, 19933, 19110, 11018, 11018, 12233, 16277, 24394, 19933,
  11018, 11018, 12237, 16277, 19933, 22525, 20195, 16277, 19932, 22528, 17114, 19111, 24389, 24480, 24393, 20569, 19107,
  22721, 22715, 15482, 16150, 21727, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 12040, 11018, 11018,
  11690, 11018, 11018, 11018, 12731, 12139, 11018, 14487, 22994, 14514, 11018, 15241, 11018, 11018, 11018, 20193, 13043,
  11018, 11018, 21176, 16778, 19933, 12367, 11018, 13776, 11018, 11018, 11018, 19744, 16059, 16196, 11018, 23584, 16277,
  16277, 21687, 19933, 19933, 16257, 11018, 11018, 11018, 11018, 11018, 19744, 16059, 16200, 16277, 16277, 16277, 25304,
  19933, 19933, 19933, 19246, 11018, 11018, 11018, 11018, 26734, 13046, 16276, 16277, 16277, 25912, 19933, 19933, 16256,
  11018, 11018, 11018, 20191, 16059, 21178, 16277, 16278, 14678, 19933, 19933, 22527, 11018, 11018, 19745, 21180, 16277,
  24420, 19933, 19110, 11018, 11018, 12233, 16277, 24394, 19933, 11018, 11018, 12237, 16277, 19933, 22525, 20195, 16277,
  19932, 22528, 17114, 19111, 24389, 24480, 24393, 20569, 19107, 22721, 22715, 15482, 16150, 21727, 11018, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 11018, 12040, 11018, 11018, 11690, 11018, 11018, 11018, 12731, 12139, 11018, 14487,
  26349, 14514, 11018, 15241, 11018, 11018, 11018, 20193, 13043, 11018, 11018, 21176, 16778, 19933, 17613, 11018, 13776,
  11018, 11018, 11018, 19744, 16059, 16196, 11018, 23584, 16277, 16277, 21687, 19933, 19933, 16257, 11018, 11018, 11018,
  11018, 11018, 19744, 16059, 16200, 16277, 16277, 16277, 25304, 19933, 19933, 19933, 19246, 11018, 11018, 11018, 11018,
  26734, 13046, 16276, 16277, 16277, 25912, 19933, 19933, 16256, 11018, 11018, 11018, 20191, 16059, 21178, 16277, 16278,
  14678, 19933, 19933, 22527, 11018, 11018, 19745, 21180, 16277, 24420, 19933, 19110, 11018, 11018, 12233, 16277, 24394,
  19933, 11018, 11018, 12237, 16277, 19933, 22525, 20195, 16277, 19932, 22528, 17114, 19111, 24389, 24480, 24393, 20569,
  19107, 22721, 22715, 15482, 16150, 21727, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 12040, 11018,
  11018, 11690, 11018, 11018, 11018, 12731, 14615, 11018, 14487, 22994, 14514, 11018, 15241, 11018, 11018, 11018, 20193,
  13043, 11018, 11018, 21176, 16778, 19933, 17613, 11018, 13776, 11018, 11018, 11077, 19744, 16059, 16196, 11018, 23584,
  16277, 16277, 21687, 19933, 19933, 16257, 11018, 11018, 11018, 11018, 11018, 19744, 16059, 16200, 16277, 16277, 16277,
  25304, 19933, 19933, 19933, 19246, 11018, 11018, 11018, 11018, 26734, 13046, 16276, 16277, 16277, 25912, 19933, 19933,
  16256, 11018, 11018, 11018, 20191, 16059, 21178, 16277, 16278, 14678, 19933, 19933, 22527, 11018, 11018, 19745, 21180,
  16277, 24420, 19933, 19110, 11018, 11018, 12233, 16277, 24394, 19933, 11018, 11018, 12237, 16277, 19933, 22525, 20195,
  16277, 19932, 22528, 17114, 19111, 24389, 24480, 24393, 20569, 19107, 22721, 22715, 15482, 16150, 21727, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 11018, 11018, 12040, 11018, 11018, 11690, 11018, 11018, 11018, 12731, 12139, 11018,
  14643, 14657, 14514, 11018, 15241, 11018, 11018, 11018, 20193, 13043, 11018, 11018, 21176, 16778, 19933, 17613, 11018,
  13776, 11018, 11018, 11018, 19744, 16059, 16196, 11018, 23584, 16277, 16277, 21687, 19933, 19933, 16257, 11018, 11018,
  11018, 11018, 11018, 19744, 16059, 16200, 16277, 16277, 16277, 25304, 19933, 19933, 19933, 19246, 11018, 11018, 11018,
  11018, 26734, 13046, 16276, 16277, 16277, 25912, 19933, 19933, 16256, 11018, 11018, 11018, 20191, 16059, 21178, 16277,
  16278, 14678, 19933, 19933, 22527, 11018, 11018, 19745, 21180, 16277, 24420, 19933, 19110, 11018, 11018, 12233, 16277,
  24394, 19933, 11018, 11018, 12237, 16277, 19933, 22525, 20195, 16277, 19932, 22528, 17114, 19111, 24389, 24480, 24393,
  20569, 19107, 22721, 22715, 15482, 16150, 21727, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 12040,
  11018, 11018, 11690, 11018, 11018, 11018, 12731, 12139, 11018, 14487, 22994, 14514, 11018, 15241, 11018, 11018, 11018,
  20193, 13043, 11018, 11018, 21176, 16778, 19933, 17613, 11018, 13776, 11018, 11018, 11018, 19744, 16059, 16196, 11018,
  23584, 16277, 16277, 21687, 19933, 19933, 16257, 11018, 11018, 11018, 11018, 11018, 19744, 16059, 16200, 16277, 16277,
  16277, 25304, 19933, 19933, 19933, 19246, 11018, 11018, 11018, 11018, 26734, 13046, 16276, 16277, 16277, 25912, 19933,
  19933, 16256, 11018, 11018, 11018, 20191, 16059, 21178, 16277, 16278, 14678, 19933, 19933, 22527, 11018, 21496, 19745,
  21180, 16277, 24420, 19933, 19110, 11018, 11018, 12233, 16277, 24394, 19933, 11018, 11018, 12237, 16277, 19933, 22525,
  20195, 16277, 19932, 22528, 17114, 19111, 24389, 24480, 24393, 20569, 19107, 22721, 22715, 15482, 16150, 21727, 11018,
  11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 14673, 11018, 11018, 11690, 11018, 11018, 11018, 12731, 12139,
  11018, 14487, 22994, 14514, 11018, 15241, 11018, 11018, 11018, 20193, 13043, 11018, 11018, 21176, 16778, 19933, 17613,
  11018, 13776, 11018, 11018, 11018, 19744, 16059, 16196, 11018, 23584, 16277, 16277, 21687, 19933, 19933, 16257, 11018,
  11018, 11018, 11018, 11018, 19744, 16059, 16200, 16277, 16277, 16277, 25304, 19933, 19933, 19933, 19246, 11018, 11018,
  11018, 11018, 26734, 13046, 16276, 16277, 16277, 25912, 19933, 19933, 16256, 11018, 11018, 11018, 20191, 16059, 21178,
  16277, 16278, 14678, 19933, 19933, 22527, 11018, 11018, 19745, 21180, 16277, 24420, 19933, 19110, 11018, 11018, 12233,
  16277, 24394, 19933, 11018, 11018, 12237, 16277, 19933, 22525, 20195, 16277, 19932, 22528, 17114, 19111, 24389, 24480,
  24393, 20569, 19107, 22721, 22715, 15482, 16150, 21727, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018,
  10568, 11018, 11018, 11690, 11018, 11018, 11018, 12731, 20532, 14694, 14707, 9689, 10623, 11018, 15241, 11018, 18497,
  11018, 17861, 9297, 11018, 11018, 14785, 14793, 9868, 8972, 9009, 9054, 11018, 9093, 14728, 17866, 9114, 9144, 9160,
  9022, 9038, 9196, 10082, 9031, 9189, 9212, 11018, 9235, 11018, 14125, 9254, 11541, 9288, 9313, 11111, 9344, 9869,
  9219, 11116, 9349, 9365, 9328, 14758, 9402, 26005, 11135, 9439, 9469, 9550, 9497, 9518, 9539, 9555, 9502, 9523, 9571,
  9631, 9668, 9705, 9734, 9750, 9766, 9787, 10129, 9761, 9782, 9803, 9819, 9839, 14295, 9864, 9915, 9885, 9910, 9931,
  9962, 9999, 10036, 13903, 13894, 13910, 10108, 14749, 10171, 10187, 10181, 10203, 10253, 10307, 10305, 10323, 10338,
  10369, 9866, 9386, 9868, 10050, 10399, 10415, 10431, 10451, 10467, 10519, 11018, 11018, 11018, 11018, 11018, 11018,
  11018, 11018, 11018, 10568, 11018, 11018, 11690, 11018, 11018, 11018, 12731, 11018, 11018, 11018, 11018, 10623, 11018,
  15241, 11018, 18497, 11018, 17861, 9297, 11018, 11018, 14785, 14793, 9868, 8972, 9009, 9054, 11018, 9093, 11018,
  17866, 9114, 9144, 9160, 9022, 9038, 9196, 10082, 9031, 9189, 9212, 11018, 9235, 11018, 14125, 9254, 11541, 9288,
  9313, 11111, 9344, 9869, 9219, 11116, 9349, 9365, 9328, 14758, 9402, 26005, 11135, 9439, 9469, 9550, 9497, 9518, 9539,
  9555, 9502, 9523, 9571, 9631, 9668, 9705, 9734, 9750, 9766, 9787, 10129, 9761, 9782, 9803, 9819, 9839, 14295, 9864,
  9915, 9885, 9910, 9931, 9962, 9999, 10036, 13903, 13894, 13910, 10108, 10145, 10171, 10187, 10181, 10203, 10253,
  10307, 10305, 10323, 10338, 10369, 9866, 9386, 9868, 10050, 10399, 10415, 10431, 10451, 10467, 10519, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 11018, 11018, 14774, 11018, 11018, 11690, 11018, 11018, 11018, 12731, 11292, 14809,
  14820, 10693, 14841, 11018, 15241, 11018, 18497, 11018, 17861, 9297, 11018, 11018, 14785, 14793, 9868, 14893, 9009,
  9054, 11018, 9093, 11018, 17866, 9114, 9144, 9160, 9022, 9038, 9196, 10082, 9031, 9189, 9212, 11018, 9235, 11018,
  14125, 9254, 11541, 9288, 9313, 11111, 9344, 9869, 9219, 11116, 9349, 9365, 9328, 14758, 9402, 26005, 11135, 9439,
  9469, 9550, 9497, 9518, 9539, 9555, 9502, 9523, 9571, 9631, 9668, 9705, 9734, 9750, 9766, 9787, 10129, 9761, 9782,
  9803, 9819, 9839, 14295, 9864, 9915, 9885, 9910, 9931, 9962, 9999, 10036, 13903, 13894, 13910, 10108, 10145, 10171,
  10187, 10181, 10203, 10253, 10307, 10305, 10323, 10338, 10369, 9866, 9386, 9868, 10050, 10399, 10415, 10431, 10451,
  10467, 10519, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 12040, 11001, 11018, 11690, 12863, 11018,
  17801, 14924, 14368, 14383, 14397, 14411, 14514, 14940, 15036, 11018, 14441, 14963, 14994, 16707, 15031, 15052, 15068,
  15095, 15134, 15171, 11018, 13776, 15218, 11018, 15238, 24771, 16059, 15257, 11018, 15277, 16277, 12159, 21687, 19933,
  19933, 15296, 15794, 11018, 15319, 26390, 11018, 14454, 26736, 14553, 18561, 16277, 23587, 26328, 17279, 19933, 23080,
  15871, 15338, 11018, 15356, 11018, 15430, 13979, 15461, 19442, 16277, 25912, 15498, 15520, 19129, 15540, 15566, 23282,
  15586, 16059, 21178, 16277, 15604, 14569, 19933, 24108, 15659, 10497, 11018, 19745, 21180, 25491, 15634, 24864, 19110,
  11018, 11018, 12233, 20782, 15702, 16935, 11018, 11018, 12237, 16277, 19933, 22525, 20195, 16277, 19932, 22528, 17114,
  17945, 15718, 26714, 24393, 15109, 19107, 15739, 22715, 15482, 16150, 21727, 11018, 11018, 11018, 11018, 11018, 11018,
  11018, 11018, 11018, 12040, 11019, 15775, 11690, 11018, 15776, 11018, 9848, 12139, 15793, 14487, 22994, 14514, 11018,
  15241, 11018, 11018, 11018, 20193, 13043, 11018, 11018, 21176, 16778, 19933, 17613, 11018, 13776, 11018, 11018, 11018,
  19744, 16059, 16196, 11018, 23584, 16277, 16277, 21687, 19933, 19933, 16257, 11018, 11018, 9823, 26390, 15810, 8987,
  20442, 16200, 16277, 16277, 23894, 25304, 19933, 19933, 16735, 15871, 11018, 11018, 26388, 11018, 26734, 13046, 16276,
  16277, 16277, 25912, 19933, 19933, 19129, 12694, 11018, 26190, 21348, 16059, 15830, 16277, 16278, 15856, 19933, 19933,
  22527, 11018, 11018, 19745, 21180, 16277, 15634, 19933, 19110, 11018, 11018, 12233, 16277, 24394, 19933, 11018, 11018,
  12237, 16277, 19933, 22525, 20195, 16277, 19932, 22528, 17114, 19111, 24389, 24480, 15895, 15950, 19107, 22721, 22715,
  15482, 16150, 21727, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 12040, 11018, 15969, 11690, 11018,
  11018, 11262, 17569, 15998, 16014, 16028, 16042, 14514, 11018, 10552, 11018, 20022, 11018, 20193, 13043, 11018, 11018,
  21176, 15840, 21567, 17613, 12607, 11227, 12615, 11018, 16485, 16699, 16058, 15015, 15777, 16076, 16115, 16277, 19082,
  16133, 19933, 16257, 19503, 19192, 11018, 26390, 24069, 16166, 16059, 16200, 16670, 21424, 16216, 25304, 22904, 16238,
  16254, 15871, 11018, 11018, 26067, 11018, 26734, 13046, 16276, 16277, 16355, 25912, 19933, 19933, 18355, 12694, 11018,
  11018, 20191, 16059, 21178, 16277, 16278, 14569, 19933, 19933, 22527, 11018, 11018, 14244, 16273, 16294, 15634, 24460,
  20423, 16315, 11018, 16335, 23515, 24394, 21389, 11018, 11018, 12237, 23534, 19933, 16371, 20195, 16277, 19932, 22528,
  17114, 19111, 24389, 26678, 16393, 20569, 19107, 22721, 22715, 15482, 12758, 21727, 11018, 11018, 11018, 11018, 11018,
  11018, 11018, 11018, 11018, 12040, 11018, 17542, 11690, 11018, 16428, 16446, 19721, 16501, 16517, 16531, 16545, 14514,
  11018, 15241, 11018, 11018, 11018, 20193, 12574, 18325, 18320, 16561, 16778, 19553, 17613, 24741, 16577, 21958, 11018,
  11018, 22614, 24777, 24168, 16605, 16634, 12273, 16665, 17249, 16893, 22338, 16257, 11018, 27040, 26255, 26390, 11018,
  19744, 16059, 16200, 16277, 16277, 16277, 25304, 19933, 19933, 19933, 15910, 11018, 25678, 16686, 11018, 26734, 13046,
  18385, 16277, 16117, 16723, 16758, 19933, 17507, 12694, 11018, 11018, 25212, 16059, 16820, 16277, 16776, 16794, 19933,
  19860, 22527, 14199, 11018, 16844, 26688, 20491, 15634, 16879, 19110, 11018, 11018, 12233, 16277, 24394, 19933, 20888,
  11018, 12237, 20265, 19933, 19473, 20195, 16277, 19932, 22528, 17114, 19111, 16915, 24480, 16951, 20569, 19107, 22721,
  22715, 15482, 16150, 21727, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 12040, 11018, 11977, 11690,
  25105, 16981, 17621, 18074, 17003, 17018, 17032, 17046, 14514, 14733, 22164, 14325, 17062, 23290, 17099, 17151, 17178,
  17227, 18001, 17265, 17301, 17613, 10656, 18432, 17337, 17362, 17383, 19744, 16059, 22831, 24944, 17403, 17432, 18138,
  17461, 25438, 17487, 15643, 23177, 11411, 17523, 17558, 11018, 17585, 17637, 14627, 17672, 17688, 17704, 17748, 19866,
  18980, 17764, 17792, 17817, 12338, 26388, 17841, 17882, 9077, 18195, 16277, 17907, 17926, 17961, 25466, 23783, 15879,
  20124, 17987, 20191, 14471, 21178, 18017, 25900, 14569, 24215, 18054, 18090, 11576, 18109, 12560, 18127, 18032, 16649,
  16742, 19110, 10607, 18161, 18182, 18211, 18260, 18297, 18313, 25233, 17891, 25159, 18341, 12200, 18371, 21275, 19932,
  18408, 26785, 18460, 15155, 21170, 18513, 18540, 18577, 22721, 17971, 18602, 16150, 21727, 11018, 11018, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 12040, 11018, 11018, 11690, 21770, 21771, 21766, 18663, 18650, 18637, 18679, 18693,
  14514, 11018, 24622, 11018, 11018, 11018, 20193, 13043, 11018, 11018, 19971, 16778, 22264, 17613, 18925, 13776, 18709,
  11018, 16412, 18726, 16059, 16196, 11018, 18753, 16277, 16277, 21687, 18779, 19933, 16257, 11018, 11018, 11018, 26390,
  11018, 19744, 16059, 16200, 16277, 16277, 18145, 25304, 19933, 19933, 24859, 15871, 11018, 11018, 26388, 11018, 26734,
  13046, 16276, 16277, 16277, 25912, 19933, 19933, 19129, 12694, 11018, 11018, 19794, 8993, 21178, 16277, 18797, 14569,
  19933, 25983, 22527, 11018, 11018, 19745, 21180, 16277, 15634, 19933, 19110, 11018, 11018, 12233, 16277, 24394, 19933,
  10847, 11018, 12237, 16277, 19933, 22525, 20195, 16277, 19932, 22528, 17114, 19111, 24389, 24480, 24393, 20569, 19107,
  22721, 22190, 18822, 14580, 21727, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 12040, 11018, 11018,
  11690, 11018, 10649, 12255, 11841, 18858, 18873, 18887, 18901, 14514, 11018, 15241, 11018, 11018, 22236, 20193, 13043,
  11018, 11018, 21176, 16778, 19933, 22493, 11018, 13776, 11018, 11018, 17533, 19744, 16059, 16196, 11018, 23584, 16277,
  16277, 21687, 19933, 19933, 16257, 11018, 11018, 11018, 11018, 11018, 19744, 16059, 16200, 16277, 16277, 16277, 16088,
  19933, 19933, 19933, 19246, 11018, 11018, 11018, 11018, 26734, 13046, 16276, 16277, 16277, 25912, 19933, 19933, 16256,
  11018, 11018, 11018, 20191, 16059, 21178, 16277, 16278, 14678, 19933, 19933, 22527, 20403, 11018, 19745, 21180, 16277,
  24420, 19933, 19110, 18917, 18941, 12233, 16277, 24394, 19933, 11018, 21863, 18957, 18996, 19029, 22525, 9173, 19060,
  26797, 22528, 17114, 19111, 24389, 24480, 24393, 20569, 19107, 22721, 22715, 25525, 19098, 21727, 11018, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 11018, 12040, 11018, 11018, 11690, 11018, 11018, 11018, 12731, 12139, 11018, 14487,
  22994, 14514, 11018, 11299, 11018, 11018, 14825, 20193, 25407, 11018, 11018, 24515, 16222, 19127, 19145, 11018, 16473,
  19169, 19190, 11018, 19744, 16059, 16196, 11018, 23584, 16277, 21431, 21687, 19933, 19933, 19208, 11018, 11018, 11018,
  11018, 11018, 19744, 16059, 16200, 16277, 16277, 16277, 25304, 19933, 19933, 19933, 19246, 19227, 11018, 11018, 11018,
  26734, 13046, 16276, 16277, 16277, 25912, 19933, 19933, 16256, 11018, 27060, 11018, 20191, 16059, 21178, 16277, 25295,
  14678, 19933, 25374, 22527, 11018, 11018, 19745, 21180, 16277, 24420, 19933, 19110, 11018, 11018, 12233, 16277, 24394,
  19933, 11018, 11018, 12237, 16277, 19933, 22525, 20195, 26754, 19932, 19244, 17114, 19111, 24389, 24480, 24393, 20569,
  19107, 22721, 22715, 15482, 16150, 21727, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 12040, 11018,
  12634, 11690, 9272, 21950, 19263, 19271, 19287, 19331, 19301, 19315, 14514, 11018, 22291, 11018, 11018, 12775, 19347,
  13043, 19396, 19391, 23421, 16778, 19415, 17613, 11018, 13776, 24914, 11018, 11018, 19744, 15195, 15382, 23109, 19434,
  19005, 22399, 19458, 18781, 19933, 23392, 18111, 23319, 8847, 19495, 19640, 19519, 24315, 16200, 16277, 16277, 20483,
  19542, 19933, 19933, 19576, 19246, 11018, 20116, 19630, 11018, 26734, 13046, 19656, 16277, 16277, 17416, 19933, 19933,
  16256, 11018, 19676, 19712, 19737, 16059, 21178, 25045, 16278, 14678, 26410, 19933, 16405, 11018, 11018, 19761, 17193,
  19810, 19846, 23748, 19882, 11018, 23804, 19909, 25332, 19949, 22911, 10925, 11887, 12237, 16277, 19933, 18065, 20195,
  16277, 19932, 22528, 17114, 19111, 19921, 19965, 24393, 20569, 19107, 15674, 19987, 15482, 16150, 20009, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 11018, 11018, 12040, 11018, 11018, 11690, 11018, 13746, 12809, 12075, 20045, 20060,
  20074, 20088, 14514, 21661, 15241, 11018, 20104, 22236, 9652, 13043, 11018, 20923, 20140, 16778, 21823, 16807, 21124,
  13776, 11018, 20188, 21123, 20211, 23496, 16196, 11018, 20237, 20262, 20281, 20315, 19560, 16899, 20331, 26871, 11018,
  11726, 11018, 11018, 15395, 16059, 16200, 22695, 23889, 16277, 16088, 20366, 19933, 19933, 19246, 21329, 11018, 20382,
  20402, 26734, 14256, 16276, 23628, 19013, 25912, 19933, 23073, 20419, 18244, 11018, 11018, 20191, 20439, 20572, 16277,
  16278, 14678, 16930, 19933, 18586, 11018, 20458, 13972, 20474, 16277, 14498, 19933, 19110, 26864, 15570, 12233, 16277,
  24394, 19933, 11018, 20507, 12237, 23607, 19933, 20526, 20195, 16277, 19932, 22528, 17114, 19111, 24389, 24480, 24393,
  20172, 20597, 20548, 22715, 26093, 20588, 21727, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 12040,
  11018, 9423, 11690, 11018, 20932, 11018, 12731, 20613, 20628, 20642, 20656, 14514, 15340, 15241, 11018, 20672, 11018,
  24295, 13043, 11018, 10974, 20693, 16778, 22113, 17613, 11018, 20709, 25186, 23326, 11018, 19744, 16059, 16196, 11018,
  20745, 16277, 20770, 18281, 19933, 24429, 20805, 20821, 20841, 11018, 11018, 11018, 19744, 16059, 16200, 17211, 19660,
  16277, 25304, 20861, 21608, 19933, 19246, 9683, 20887, 20721, 20904, 26734, 13046, 20350, 16277, 24363, 23061, 25446,
  19933, 20957, 11018, 11018, 11018, 20191, 16059, 21178, 16277, 16278, 14678, 19933, 19933, 22527, 11018, 11018, 19745,
  21180, 16277, 24420, 19933, 19211, 11018, 11018, 12233, 16277, 24394, 19933, 11018, 11018, 12237, 16277, 19933, 22525,
  20195, 16277, 19932, 23402, 17600, 16099, 24389, 24480, 24393, 20569, 19107, 22721, 22715, 15482, 16150, 21727, 11018,
  11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 12040, 11018, 11018, 20977, 11018, 14866, 21006, 21017, 9481,
  21033, 21047, 21061, 14514, 12695, 21077, 27091, 11018, 11018, 21093, 14542, 21109, 16460, 21140, 21156, 21197, 17613,
  21541, 19153, 11018, 24127, 17367, 19744, 16059, 16196, 23412, 23584, 21213, 16277, 21687, 15504, 19933, 16257, 8859,
  18166, 11018, 18710, 11018, 15184, 16059, 16200, 16828, 16277, 16277, 25304, 21233, 19933, 19933, 19246, 11018, 20677,
  11018, 25768, 21253, 25020, 21272, 16277, 21291, 17445, 19933, 17321, 22120, 23955, 21322, 21345, 23449, 24157, 21364,
  21413, 21447, 14678, 21472, 25975, 22527, 21488, 21512, 19745, 19993, 16277, 24420, 21564, 19110, 10687, 11018, 21583,
  22858, 21599, 21632, 21658, 10728, 26142, 21677, 19044, 22525, 21713, 18555, 15751, 22528, 19362, 21755, 22427, 21642,
  21306, 21787, 19107, 22721, 17471, 21808, 16150, 24545, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018,
  12040, 11018, 11018, 21843, 11018, 12180, 14599, 19893, 21879, 21895, 21909, 21923, 14514, 21939, 21974, 14947, 11018,
  21527, 20990, 21990, 18444, 22017, 22033, 22063, 22098, 17613, 11018, 13776, 23116, 11018, 22136, 19744, 13039, 16196,
  11018, 23584, 16349, 20292, 22180, 21827, 24261, 22271, 11018, 11018, 22206, 22222, 22237, 19744, 16060, 17162, 16277,
  18392, 16277, 22253, 19933, 23924, 24242, 21739, 26835, 22287, 11018, 11018, 26734, 13046, 16276, 22307, 16277, 25912,
  22464, 19933, 16256, 11018, 24506, 20729, 20191, 16059, 21178, 16277, 16278, 22327, 19933, 19933, 22527, 22354, 11018,
  19745, 22375, 22396, 15472, 17724, 20961, 11018, 11018, 22415, 22443, 15723, 19933, 11018, 11018, 12237, 16277, 19933,
  20871, 19614, 16277, 22462, 19789, 22480, 22522, 22544, 22579, 24393, 20569, 19107, 22721, 18271, 18524, 16150, 11064,
  11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 12040, 11018, 11018, 11690, 11018, 11084, 12498, 14978,
  22601, 11018, 22630, 22644, 14514, 11018, 14162, 11018, 11018, 11018, 20193, 13043, 11018, 22660, 21176, 16778, 19933,
  17613, 18420, 13776, 14094, 15550, 11018, 14045, 16059, 16196, 10965, 22681, 20789, 16277, 22737, 22558, 22763, 12297,
  22781, 11018, 19688, 25870, 11018, 19744, 16059, 16200, 16277, 16277, 16277, 25304, 19933, 19933, 19933, 12328, 11018,
  11018, 22801, 10014, 22817, 15202, 16276, 22852, 16277, 24203, 26368, 22874, 16256, 26939, 11018, 11018, 20191, 16059,
  21178, 23135, 16278, 22893, 19933, 22927, 22527, 11018, 11018, 19745, 21180, 16277, 24420, 19933, 19110, 11018, 11018,
  12233, 16277, 24394, 19933, 11018, 11018, 12237, 16277, 19933, 22525, 20195, 16277, 19932, 22946, 17114, 19111, 22984,
  24480, 24393, 20569, 19107, 22721, 22715, 15482, 16150, 21727, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018,
  11018, 12040, 11018, 11018, 11690, 11018, 11018, 11018, 12731, 12139, 11018, 14487, 22994, 14514, 11018, 15241, 11018,
  11018, 23010, 15588, 13043, 23027, 23032, 23048, 16299, 23659, 23096, 11018, 13776, 11018, 11018, 11018, 19744, 16059,
  16196, 11018, 23584, 16277, 16277, 21687, 19933, 19933, 16257, 11018, 11018, 11018, 11018, 11018, 19744, 16059, 16200,
  16277, 16277, 16277, 18969, 19933, 19933, 19933, 19246, 11018, 11018, 11018, 11018, 26734, 13046, 16276, 16277, 16277,
  25912, 19933, 19933, 16256, 11018, 11018, 11018, 20191, 16059, 21178, 16277, 16278, 14678, 19933, 19933, 22527, 11018,
  11018, 19745, 21180, 16277, 24420, 19933, 19110, 11018, 11018, 12233, 16277, 24394, 19933, 11018, 11018, 12237, 23132,
  17732, 22525, 20195, 16277, 19932, 22528, 17114, 19111, 24389, 24480, 24393, 20569, 19107, 22721, 22715, 15482, 16150,
  21727, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 12040, 11018, 11018, 11821, 11724, 12217, 11720,
  17656, 23164, 23151, 23202, 23216, 14514, 11018, 22506, 14337, 24286, 22155, 23232, 23270, 17825, 23306, 23342, 23378,
  25714, 17613, 11018, 13776, 23437, 23476, 26161, 19744, 23492, 16196, 11018, 23512, 23531, 19824, 21687, 24222, 21237,
  16257, 11018, 11018, 21548, 11018, 23550, 9069, 21256, 23571, 23603, 23623, 22380, 23644, 26112, 19933, 17776, 19246,
  12481, 9946, 9977, 11018, 23460, 23679, 16276, 20754, 23715, 23736, 19933, 23764, 15524, 26060, 26957, 23799, 10283,
  16059, 15953, 16277, 16278, 14678, 23820, 19933, 18490, 9238, 11018, 19745, 21180, 16277, 23840, 19933, 17135, 23555,
  11018, 23874, 16277, 25966, 19933, 15814, 11018, 12237, 16277, 19933, 22525, 20195, 16277, 19932, 18237, 23910, 20165,
  24389, 25563, 25499, 20342, 19107, 22721, 21697, 19591, 26339, 21727, 11018, 11018, 11018, 11018, 11018, 11018, 11018,
  11018, 11018, 12040, 11018, 11018, 10532, 11018, 20941, 23945, 23971, 23987, 24023, 24037, 24051, 14514, 24067, 15241,
  11018, 14712, 11018, 14528, 15008, 17855, 14855, 24085, 16778, 24101, 19375, 24124, 13776, 11018, 11018, 11018, 24143,
  16854, 18737, 26559, 24190, 18038, 16277, 25270, 24238, 24258, 16257, 22836, 11018, 24277, 11018, 11018, 19744, 16059,
  15261, 16277, 16277, 16277, 25304, 19933, 19933, 19933, 19246, 19174, 11018, 25868, 21855, 24311, 16192, 24331, 22311,
  24349, 18224, 19933, 23858, 24437, 12336, 11018, 11018, 20191, 25011, 24385, 23720, 24410, 14678, 19933, 24453, 22527,
  26031, 15222, 19745, 21792, 23362, 17715, 18837, 24476, 11018, 11569, 12233, 16277, 24394, 19933, 11018, 10383, 15405,
  19830, 19933, 24496, 24531, 16277, 19932, 22528, 19776, 24584, 24389, 18621, 25053, 20569, 24607, 18475, 22715, 15482,
  16150, 21727, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 12040, 11018, 11018, 14877, 11018, 11018,
  24638, 24661, 10881, 24677, 24691, 24705, 14514, 11018, 24721, 24737, 24757, 20029, 25685, 24793, 15982, 15977, 24829,
  24845, 24880, 17613, 24910, 24930, 11018, 25870, 24966, 25002, 20221, 12581, 13753, 25036, 24369, 17202, 26631, 19933,
  25069, 16257, 25085, 25121, 24979, 11018, 11366, 16618, 23243, 15445, 23357, 25139, 21217, 21456, 22563, 17501, 23849,
  19246, 25183, 25202, 25123, 25228, 25249, 23254, 25739, 25286, 25339, 21377, 24894, 19933, 25555, 10123, 11018, 10218,
  20510, 25402, 25320, 25649, 16278, 22665, 25355, 17316, 25924, 8867, 10573, 25390, 15619, 16277, 25423, 25462, 15759,
  19696, 11018, 12233, 25482, 25515, 25541, 25579, 11018, 25260, 26609, 23929, 25599, 11050, 25635, 15686, 22528, 17114,
  19111, 24389, 24480, 24393, 15148, 25665, 25701, 25730, 15482, 16150, 25755, 11018, 11018, 11018, 11018, 11018, 11018,
  11018, 11018, 11018, 12040, 11018, 11018, 11690, 11018, 19399, 11018, 12731, 16589, 25804, 25818, 25832, 14514, 11018,
  15241, 25848, 25865, 11018, 20193, 13043, 11018, 11018, 25886, 16778, 22077, 17613, 25940, 13776, 11018, 25583, 23693,
  15369, 16059, 16196, 11018, 25957, 16277, 16277, 22047, 19933, 19933, 23663, 25999, 26021, 11018, 11018, 26047, 19744,
  16179, 14264, 22446, 20246, 25150, 25304, 21397, 26083, 26109, 19246, 25612, 11018, 11018, 11018, 26128, 13046, 15414,
  16277, 16277, 20153, 17938, 19933, 16256, 26158, 11018, 11018, 20191, 16059, 21178, 16277, 16278, 14678, 19933, 19933,
  12723, 11018, 26452, 19745, 15925, 16277, 15079, 19933, 19110, 11018, 11018, 12233, 16277, 24394, 19933, 11018, 11018,
  12237, 16277, 19933, 22525, 20195, 26621, 17126, 22528, 17114, 19111, 24389, 24480, 24393, 20569, 26177, 22721, 22715,
  22747, 26224, 21727, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 12040, 11018, 11018, 11690, 11018,
  26251, 10229, 26271, 10289, 10236, 26287, 26301, 14514, 11018, 15241, 11018, 11018, 11018, 20193, 13043, 11018, 11018,
  22585, 16778, 23779, 17613, 11018, 13776, 11018, 11018, 11018, 13026, 16059, 17648, 11018, 26317, 16277, 16277, 21687,
  26365, 19933, 16257, 11018, 11018, 11018, 26384, 11018, 19744, 14466, 22001, 16277, 25167, 16277, 25304, 19933, 26406,
  19933, 19246, 11018, 11018, 11018, 11018, 26734, 13046, 16276, 16277, 16277, 25912, 19933, 19933, 16256, 11018, 11018,
  11018, 20191, 16059, 21178, 16277, 16278, 14678, 19933, 19933, 22527, 9098, 11018, 19745, 21180, 16277, 24420, 19933,
  19110, 11018, 11018, 12233, 16277, 24394, 19933, 11018, 11018, 12237, 16277, 19933, 15303, 20195, 16277, 19932, 22528,
  17114, 19111, 24389, 24480, 24393, 20569, 19107, 22721, 22715, 15482, 16150, 21727, 11018, 11018, 11018, 11018, 11018,
  11018, 11018, 11018, 11018, 12040, 11018, 11018, 10983, 11018, 22968, 19247, 14908, 26439, 26426, 26475, 26489, 14514,
  11018, 15241, 11018, 11018, 11018, 20193, 13043, 11018, 11018, 21176, 18763, 22877, 17613, 11018, 13776, 11018, 11018,
  11018, 19744, 16059, 16196, 11018, 23584, 16277, 16277, 21687, 19933, 19933, 16257, 11018, 11018, 11018, 11018, 11018,
  19744, 16059, 16200, 16277, 16277, 16277, 25304, 19933, 19933, 19933, 19246, 11018, 11018, 22146, 11018, 26734, 13046,
  16276, 16277, 16277, 25912, 19933, 19933, 16256, 11018, 26505, 11018, 20191, 16059, 21178, 19072, 20299, 14678, 22082,
  22765, 22527, 11018, 11018, 19745, 21180, 16277, 24420, 19933, 19110, 11018, 11018, 12233, 16277, 24394, 19933, 11018,
  11018, 12237, 16277, 19933, 22525, 20195, 16277, 19932, 22528, 17114, 19111, 24389, 24480, 24393, 20569, 19107, 22721,
  22715, 15482, 16150, 21727, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 14673, 11018, 11018, 11690,
  11018, 11018, 11018, 12731, 12139, 11018, 26526, 26540, 14514, 11018, 15241, 26556, 11018, 11018, 26208, 13043, 26575,
  26580, 26596, 16778, 25370, 17613, 11018, 13776, 25781, 24558, 11018, 19744, 16059, 16196, 11018, 23584, 16277, 26815,
  21687, 19933, 19933, 16965, 26647, 11018, 11018, 11018, 11018, 19744, 16059, 16200, 16277, 16277, 16277, 25304, 19933,
  19933, 19933, 19246, 11018, 11018, 11018, 11018, 26734, 13046, 16276, 16277, 16277, 26666, 19933, 19933, 16256, 11833,
  11018, 11018, 20191, 16059, 21178, 16277, 16278, 14678, 19933, 19933, 22527, 11018, 11018, 19745, 21180, 16277, 24420,
  19933, 19110, 11018, 11018, 12233, 16277, 24394, 19933, 11018, 11018, 12237, 16277, 19933, 22525, 20195, 16277, 19932,
  22528, 17114, 19111, 24389, 24480, 24393, 20569, 19107, 22721, 22715, 15482, 16150, 21727, 11018, 11018, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 12040, 11018, 11018, 11690, 11018, 11018, 11018, 12731, 12139, 11018, 14487, 22994,
  14514, 24002, 15241, 11018, 16430, 11018, 20193, 13043, 11018, 11018, 17239, 15118, 16760, 17613, 11018, 13776, 11018,
  11018, 11018, 19744, 16059, 16196, 11018, 23584, 16277, 16277, 26704, 19933, 19933, 16142, 26650, 11018, 11018, 11018,
  11018, 26730, 19526, 16200, 16277, 16277, 26752, 25304, 19933, 23824, 19933, 19246, 20914, 11018, 11018, 11018, 26770,
  13046, 16276, 26813, 16277, 25912, 18842, 19933, 16256, 11018, 11018, 11018, 20191, 16059, 21178, 16277, 15280, 14678,
  19933, 19933, 26831, 11018, 11018, 19745, 21180, 16277, 24420, 19933, 17285, 11018, 24645, 12233, 16277, 24394, 19933,
  11018, 11018, 12237, 16277, 19933, 22525, 20195, 16277, 19932, 22528, 17114, 19111, 24389, 24480, 24393, 20569, 19107,
  22721, 22715, 15482, 16150, 21727, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 12040, 11018, 11018,
  11690, 11018, 11018, 11018, 12731, 26851, 11018, 14487, 22994, 14514, 11018, 15241, 11018, 11018, 11018, 20193, 13043,
  11018, 11018, 21176, 16778, 19933, 17613, 11018, 13776, 11018, 11018, 11018, 19744, 16059, 16196, 11018, 23584, 16277,
  16277, 21687, 19933, 19933, 16257, 11018, 11018, 11018, 11018, 11018, 19744, 16059, 16200, 16277, 16277, 16277, 25304,
  19933, 19933, 19933, 19246, 11018, 11018, 11018, 11018, 26734, 13046, 16276, 16277, 16277, 25912, 19933, 19933, 16256,
  11018, 11018, 11018, 20191, 16059, 21178, 16277, 16278, 14678, 19933, 19933, 22527, 11018, 11018, 19745, 21180, 16277,
  24420, 19933, 19110, 11018, 11018, 12233, 16277, 24394, 19933, 11018, 11018, 12237, 16277, 19933, 22525, 20195, 16277,
  19932, 22528, 17114, 19111, 24389, 24480, 24393, 20569, 19107, 22721, 22715, 15482, 16150, 21727, 11018, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 11018, 10568, 11018, 11018, 25619, 26887, 26921, 9615, 13387, 13376, 26893, 26909,
  9608, 10623, 11018, 15241, 11018, 18497, 26937, 17861, 9297, 11018, 11018, 14785, 9894, 9868, 8972, 9009, 9054, 11018,
  9093, 11018, 17866, 9114, 9144, 9160, 9022, 9038, 9196, 10441, 9031, 9189, 9212, 11018, 9235, 11018, 14125, 9254,
  11541, 9288, 9313, 11111, 9344, 9869, 9219, 11116, 9349, 9365, 9328, 14758, 9402, 26005, 11135, 9439, 9469, 9550,
  9497, 9518, 9539, 9555, 9502, 9523, 9571, 9631, 9668, 9705, 9734, 9750, 9766, 9787, 10129, 9761, 9782, 9803, 9819,
  9839, 14295, 9864, 9915, 9885, 9910, 9931, 9962, 9999, 10036, 13903, 13894, 13910, 10108, 10145, 10171, 10187, 10181,
  10203, 10253, 10307, 10305, 10323, 10338, 10369, 9866, 9386, 9868, 10050, 10399, 10415, 10431, 10451, 10467, 10519,
  11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 10568, 11018, 11018, 11690, 11018, 10237, 26955, 12731,
  10020, 26973, 26984, 9983, 10623, 11018, 15241, 11018, 18497, 11018, 17861, 9297, 12117, 11018, 14785, 14793, 9868,
  8972, 9009, 9054, 11018, 9093, 11018, 17866, 9114, 9144, 9160, 9022, 9038, 9196, 10082, 9031, 9189, 9212, 11018, 9235,
  11018, 14125, 9254, 11541, 9288, 9313, 11111, 9344, 9869, 9219, 11116, 9349, 9365, 9328, 14758, 9402, 26005, 11135,
  9439, 9469, 9550, 9497, 9518, 9539, 9555, 9502, 9523, 9571, 9631, 9668, 9705, 9734, 9750, 9766, 9787, 10129, 9761,
  9782, 9803, 9819, 9839, 14295, 9864, 9915, 9885, 9910, 9931, 9962, 9999, 10036, 13903, 13894, 13910, 10108, 10145,
  10171, 10187, 10181, 10203, 10253, 10307, 10305, 10323, 10338, 10369, 9866, 9386, 9868, 10050, 10399, 10415, 10431,
  10451, 10467, 10519, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 10568, 11018, 11018, 11690, 11018,
  11018, 11018, 12431, 11329, 27005, 27016, 12670, 10623, 11018, 15241, 11018, 18497, 27037, 17861, 9297, 11018, 11018,
  14785, 14793, 9868, 8972, 9009, 9054, 11018, 9093, 11018, 17866, 9114, 9144, 9160, 9022, 9038, 9196, 10062, 9031,
  9189, 9212, 11018, 9235, 11018, 14125, 9254, 11541, 9288, 9313, 11111, 9344, 9869, 9219, 11116, 9349, 9365, 9328,
  14758, 9402, 26005, 11135, 9439, 9469, 9550, 9497, 9518, 9539, 9555, 9502, 9523, 9571, 9631, 9668, 9705, 9734, 9750,
  9766, 9787, 10129, 9761, 9782, 9803, 9819, 9839, 14295, 9864, 9915, 9885, 9910, 9931, 9962, 9999, 10036, 13903, 13894,
  13910, 10108, 10145, 10171, 10187, 10181, 10203, 10253, 10307, 10305, 10323, 10338, 10369, 9866, 9386, 9868, 10050,
  10399, 10415, 10431, 10451, 10467, 10519, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 10568, 11018,
  11018, 11690, 11018, 11018, 11018, 12731, 11018, 11018, 11018, 11346, 14514, 11018, 15241, 11018, 11018, 11018, 20193,
  13043, 11018, 11018, 21176, 16778, 19933, 17613, 11018, 13776, 11018, 11018, 11018, 19744, 16059, 16196, 11018, 21181,
  16277, 16277, 22705, 19933, 19933, 16257, 11018, 11018, 11018, 11018, 11018, 19744, 16059, 16200, 16277, 16277, 16277,
  18806, 19933, 19933, 19933, 19246, 11018, 11018, 11018, 11018, 26734, 13046, 16276, 16277, 16277, 25912, 19933, 19933,
  16256, 11018, 11018, 11018, 20191, 16059, 21178, 16277, 16278, 14678, 19933, 19933, 22527, 11018, 11018, 19745, 21180,
  16277, 24420, 19933, 19110, 11018, 11018, 12233, 16277, 24394, 19933, 11018, 11018, 12237, 16277, 19933, 22525, 20195,
  16277, 19932, 22528, 17114, 19111, 24389, 24480, 24393, 20569, 19107, 22721, 22715, 15482, 16150, 21727, 11018, 11018,
  11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 27056, 11018, 10787, 10800,
  10811, 11397, 18496, 11018, 11018, 11018, 18497, 11018, 17861, 9297, 11018, 11018, 14785, 14793, 9868, 10268, 9009,
  27076, 11018, 9093, 11018, 17866, 9114, 9144, 9160, 9022, 9038, 9196, 10441, 9031, 9189, 9212, 11018, 9235, 11018,
  14125, 9254, 11541, 9288, 9313, 11111, 9344, 9869, 9219, 11116, 9349, 9365, 9328, 14758, 9402, 26005, 11135, 9439,
  9469, 9550, 9497, 9518, 9539, 9555, 9502, 9523, 9571, 9631, 9668, 9705, 9734, 9750, 9766, 9787, 10129, 9761, 9782,
  9803, 9819, 9839, 14295, 9864, 9915, 9885, 9910, 9931, 9962, 9999, 10036, 13903, 13894, 13910, 10108, 10145, 10171,
  10187, 10181, 10203, 10253, 10307, 10305, 10323, 10338, 10369, 9866, 9386, 9868, 10050, 10399, 10415, 10431, 10451,
  10467, 10519, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 11018, 0, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0,
  35017, 35017, 35017, 35017, 0, 0, 0, 0, 0, 956, 0, 0, 0, 0, 0, 962, 0, 0, 0, 0, 0, 0, 0, 927, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 1467, 0, 0, 0, 0, 0, 0, 37066, 37066, 35017, 35017, 37066, 37066, 37066, 37066, 37066, 37066, 37066, 37066, 37066,
  37066, 37066, 37066, 37066, 37066, 37066, 37066, 0, 0, 37066, 37066, 37066, 37066, 37066, 37066, 37066, 37066, 37066,
  37066, 37066, 238, 37066, 37066, 37066, 37066, 37066, 0, 0, 35017, 37066, 35017, 37066, 37066, 37066, 37066, 37066,
  37066, 37066, 37066, 37066, 22528, 24576, 37066, 37066, 37066, 37066, 20480, 2, 45059, 4, 5, 0, 0, 0, 0, 35017, 37066,
  0, 528384, 205, 206, 0, 0, 0, 0, 0, 0, 0, 0, 22528, 67860, 0, 0, 0, 0, 20480, 557056, 557056, 557056, 0, 0, 0, 0, 5,
  0, 0, 0, 0, 0, 0, 675840, 0, 0, 0, 0, 0, 977, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1375, 300, 300, 300,
  300, 300, 0, 688128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 780288, 0, 0, 557056, 557056, 557056, 557056, 557056, 557056,
  557056, 557056, 557056, 557056, 557056, 557056, 747520, 557056, 557056, 557056, 557056, 763904, 557056, 772096,
  557056, 776192, 557056, 557056, 790528, 557056, 796672, 802816, 557056, 0, 825344, 0, 0, 0, 0, 0, 0, 0, 0, 238, 238,
  0, 0, 679936, 0, 0, 0, 0, 0, 994, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 530432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1470, 0, 0, 0, 555008, 555008, 763904, 555008, 772096, 555008,
  555008, 790528, 796672, 802816, 555008, 815104, 555008, 831488, 555008, 555008, 555008, 555008, 555008, 555008,
  555008, 555008, 555008, 555008, 555008, 555008, 0, 0, 114688, 0, 555008, 888832, 555008, 555008, 555008, 0, 0, 0,
  747520, 0, 763904, 772096, 0, 0, 790528, 796672, 802816, 0, 815104, 831488, 888832, 0, 0, 0, 0, 831488, 0, 796672,
  831488, 0, 0, 0, 0, 0, 0, 0, 1712, 0, 300, 300, 1713, 300, 300, 0, 361, 557056, 557056, 790528, 557056, 796672,
  802816, 557056, 557056, 815104, 557056, 557056, 831488, 557056, 557056, 557056, 557056, 557056, 557056, 557056,
  557056, 557056, 557056, 888832, 557056, 557056, 557056, 557056, 557056, 557056, 888832, 557056, 557056, 557056,
  557056, 557056, 557056, 0, 0, 0, 0, 0, 557056, 673792, 557056, 557056, 557056, 0, 0, 745472, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1472, 0, 759808, 0, 800768, 0, 0, 0, 0, 659456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 206, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 225, 0, 225, 745472, 555008, 759808, 555008, 555008, 555008, 555008, 800768, 806912, 555008, 555008,
  555008, 555008, 555008, 555008, 555008, 555008, 555008, 555008, 555008, 555008, 0, 0, 0, 0, 555008, 673792, 0, 729088,
  0, 0, 0, 0, 806912, 0, 0, 806912, 0, 0, 0, 557056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 690176, 557056, 745472,
  557056, 557056, 557056, 759808, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 800768, 806912, 557056,
  557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056,
  557056, 892928, 557056, 557056, 557056, 557056, 557056, 557056, 855, 0, 0, 858, 557056, 557056, 557056, 557056,
  557056, 557056, 0, 704512, 0, 0, 0, 0, 0, 0, 557056, 557056, 0, 886784, 911360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 817152, 0,
  0, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 227, 0, 0, 555008, 690176, 692224, 555008,
  555008, 555008, 555008, 737280, 555008, 555008, 555008, 774144, 555008, 555008, 555008, 555008, 555008, 555008,
  555008, 555008, 555008, 555008, 555008, 555008, 55296, 0, 116736, 124928, 827392, 555008, 555008, 555008, 555008,
  555008, 555008, 555008, 555008, 692224, 0, 774144, 0, 0, 0, 0, 0, 0, 0, 310, 310, 310, 310, 329, 310, 335, 335, 335,
  557056, 557056, 557056, 557056, 557056, 557056, 774144, 557056, 557056, 557056, 792576, 557056, 557056, 823296,
  827392, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 868352,
  872448, 557056, 557056, 557056, 884736, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 0, 0, 557056, 557056,
  557056, 0, 0, 0, 0, 536576, 0, 0, 0, 0, 557056, 557056, 557056, 690176, 692224, 557056, 557056, 557056, 557056,
  557056, 557056, 557056, 557056, 557056, 737280, 557056, 557056, 557056, 557056, 557056, 0, 0, 0, 0, 696320, 0, 0, 0,
  0, 0, 0, 0, 739328, 0, 0, 0, 0, 0, 0, 0, 104448, 104448, 0, 0, 104448, 104448, 0, 0, 0, 0, 0, 0, 0, 129024, 0, 0,
  129024, 0, 0, 0, 0, 0, 0, 0, 0, 397312, 0, 0, 397312, 397312, 0, 0, 0, 0, 0, 0, 397312, 0, 397312, 0, 833536, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 798720, 0, 0, 0, 0, 0, 0, 0, 0, 75776, 75776, 0, 0, 0, 0, 0, 0, 0, 0, 499, 0, 0, 300, 300, 300, 300,
  509, 0, 880640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 710656, 768000, 0, 913408, 0, 0, 0, 0, 0, 1146, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 137216, 137216, 0, 0, 0, 0, 727040, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 876544, 555008, 555008, 555008, 555008,
  555008, 555008, 555008, 555008, 555008, 555008, 555008, 555008, 0, 0, 0, 126976, 710656, 555008, 555008, 739328,
  555008, 768000, 555008, 555008, 833536, 555008, 555008, 555008, 876544, 890880, 901120, 913408, 0, 0, 0, 0, 890880,
  901120, 557056, 557056, 557056, 557056, 698368, 557056, 557056, 710656, 557056, 557056, 557056, 557056, 557056,
  739328, 749568, 557056, 557056, 557056, 768000, 557056, 557056, 557056, 557056, 557056, 833536, 557056, 557056,
  557056, 557056, 833536, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 876544, 557056, 890880, 557056,
  901120, 557056, 557056, 913408, 557056, 0, 557056, 557056, 913408, 557056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 808960, 0,
  829440, 0, 858112, 862208, 915456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 964, 0, 0, 0, 0, 778240, 0, 0, 0, 0, 878592,
  874496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22528, 24576, 0, 277, 277, 0, 20480, 0, 751616, 0, 0, 557056, 557056, 557056,
  557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 892928,
  882688, 557056, 557056, 557056, 917504, 0, 0, 0, 0, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056,
  557056, 557056, 557056, 557056, 557671, 0, 557056, 557674, 557056, 557056, 557056, 557056, 557056, 751616, 557056,
  557056, 778240, 557056, 557056, 808960, 557056, 557056, 839680, 557056, 557056, 858112, 557056, 557056, 874496,
  557056, 858112, 557056, 557056, 874496, 882688, 557056, 557056, 557056, 917504, 0, 0, 0, 0, 706560, 0, 0, 0, 0, 0,
  1159, 0, 0, 0, 0, 1164, 0, 0, 1166, 0, 1168, 0, 718848, 735232, 0, 0, 0, 0, 0, 909312, 0, 784384, 0, 0, 0, 835584, 0,
  0, 0, 0, 0, 1174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401741, 401741, 401741, 0, 0, 870400, 0, 716800, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 845824, 0, 0, 0, 0, 0, 1187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401741, 0, 401741, 401741, 401741, 0, 0,
  0, 555008, 555008, 555008, 718848, 555008, 555008, 555008, 555008, 0, 0, 0, 557056, 557056, 0, 0, 0, 0, 0, 0, 0,
  557056, 557056, 733184, 557056, 557056, 557056, 557056, 557056, 557056, 856, 0, 0, 859, 557056, 557056, 557056,
  557056, 557056, 557056, 615, 0, 43008, 618, 557056, 557056, 557056, 557056, 557056, 557056, 615, 0, 0, 618, 557056,
  557056, 557056, 557056, 557056, 557056, 0, 0, 0, 0, 43008, 557056, 673792, 557056, 557056, 557056, 684032, 0, 0, 0, 0,
  0, 0, 837632, 761856, 753664, 743424, 765952, 0, 0, 851968, 0, 0, 0, 0, 0, 1319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  557056, 557056, 557056, 557056, 698368, 894976, 907264, 0, 667648, 854016, 0, 0, 0, 782336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  81920, 0, 0, 0, 0, 0, 0, 0, 555008, 694272, 555008, 555008, 786432, 555008, 555008, 694272, 786432, 0, 669696, 557056,
  557056, 694272, 557056, 557056, 557056, 731136, 557056, 557056, 761856, 786432, 557056, 557056, 557056, 557056,
  557056, 557056, 557056, 557056, 557056, 905216, 557056, 557056, 557056, 557056, 557056, 905216, 0, 700416, 0, 0, 0,
  811008, 0, 0, 903168, 0, 0, 0, 0, 0, 1347, 0, 0, 0, 0, 1352, 0, 0, 0, 0, 0, 0, 0, 262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 401408, 0, 0, 0, 0, 843776, 0, 677888, 0, 860160, 677888, 700416, 555008, 788480, 860160, 788480,
  557056, 557056, 557056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 675840, 0, 0, 0, 0, 0, 1359, 0, 0, 0, 0, 0, 0, 0, 300, 300,
  300, 300, 0, 300, 247, 0, 262, 903168, 557056, 677888, 681984, 700416, 557056, 557056, 557056, 557056, 755712, 788480,
  811008, 847872, 557056, 860160, 557056, 557056, 557056, 557056, 557056, 903168, 0, 0, 0, 0, 819200, 0, 0, 0, 0,
  804864, 0, 919552, 724992, 557056, 720896, 724992, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056,
  899072, 557056, 720896, 724992, 557619, 721459, 725555, 557619, 557619, 557619, 557619, 557619, 557619, 557619,
  557619, 899635, 557673, 721513, 725609, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 899072, 0, 0,
  0, 0, 821248, 0, 0, 0, 0, 0, 0, 1649, 0, 0, 0, 1652, 0, 0, 0, 0, 1657, 557056, 557056, 557056, 557056, 557056, 733184,
  557056, 557056, 557056, 557056, 557056, 557056, 557056, 686080, 0, 712704, 866304, 0, 0, 0, 557056, 557056, 741376,
  557056, 813056, 557056, 557056, 557056, 866304, 557056, 557056, 741376, 557056, 813056, 557056, 557056, 557056,
  866304, 708608, 0, 0, 0, 557056, 557056, 557056, 557056, 557056, 557056, 0, 0, 0, 0, 557056, 557056, 557056, 557056,
  557056, 557056, 0, 0, 0, 671744, 557056, 557056, 557056, 557056, 864256, 671744, 557056, 557056, 557056, 557056,
  864256, 714752, 0, 841728, 557056, 757760, 849920, 557056, 557056, 757760, 849920, 557056, 557056, 557056, 0, 0, 0, 0,
  0, 86016, 141312, 0, 0, 0, 0, 675840, 0, 0, 0, 0, 0, 1463, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92478, 0, 92478, 92478,
  92478, 770048, 722944, 557056, 722944, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 856064, 856064, 0, 0,
  0, 0, 0, 0, 234, 0, 0, 0, 0, 238, 0, 0, 0, 0, 0, 0, 0, 1574, 0, 0, 0, 0, 0, 0, 0, 0, 0, 439, 0, 0, 0, 238, 238, 238,
  0, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1483, 0, 0, 0, 53565, 317, 317, 317, 317, 317, 317, 53565, 317,
  53565, 53565, 53565, 317, 53565, 53565, 53565, 53565, 53565, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1566, 1567, 0, 1568,
  2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 528384, 205, 206, 0, 0, 0, 696320, 0, 0, 0, 0, 0, 0, 0, 739328, 0, 0, 0, 0, 0, 0,
  248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 689, 0, 0, 0, 692, 0, 557056, 557056, 557056, 0, 670, 670, 0, 5, 0, 0, 0, 0, 0, 0,
  675840, 0, 0, 0, 0, 0, 1561, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 139264, 139264, 0, 0, 0, 2, 45059, 4, 5, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 57344, 0, 205, 57344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1656, 0, 0, 0, 205, 205, 205,
  205, 205, 205, 205, 205, 205, 0, 0, 205, 0, 0, 0, 0, 0, 0, 0, 0, 57616, 24576, 0, 0, 0, 0, 20480, 2, 45059, 4, 5, 0,
  0, 0, 0, 0, 0, 0, 528384, 10651, 206, 0, 0, 0, 0, 0, 0, 51200, 0, 0, 0, 0, 51200, 0, 51200, 51200, 51200, 51200,
  51200, 51200, 51200, 51200, 51200, 51200, 51200, 51200, 51200, 51200, 51200, 51200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  79872, 0, 79872, 79872, 79872, 557056, 557056, 557056, 0, 0, 0, 0, 5, 0, 0, 205, 0, 0, 0, 675840, 0, 0, 0, 0, 0, 1643,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123200, 123200, 123200, 0, 0, 0, 565441, 45059, 4, 5, 197, 0, 0, 0, 0, 0, 197, 0, 0,
  0, 0, 0, 0, 0, 314, 314, 314, 314, 331, 314, 331, 331, 331, 59392, 0, 0, 0, 0, 0, 0, 0, 0, 59392, 0, 0, 0, 59392, 0,
  59392, 59392, 59392, 59392, 59392, 0, 0, 0, 0, 0, 0, 0, 59392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1645, 0, 0, 0,
  565441, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 528384, 205, 206, 0, 0, 0, 0, 0, 0, 75776, 0, 0, 75776, 0, 0, 0, 0, 0, 0, 0,
  0, 686, 0, 0, 0, 0, 0, 0, 0, 0, 428, 0, 0, 0, 0, 0, 0, 0, 0, 236, 237, 0, 238, 0, 0, 0, 0, 0, 71680, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 474, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 211, 557056, 557056, 557056, 0,
  0, 0, 0, 5, 0, 0, 0, 671, 675, 0, 675840, 0, 0, 0, 0, 0, 1711, 0, 0, 0, 300, 300, 300, 300, 300, 0, 361, 361, 383,
  383, 361, 383, 1898, 1899, 361, 383, 361, 383, 0, 0, 0, 0, 0, 0, 744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 254,
  0, 557056, 557056, 557056, 557056, 557056, 557056, 1076, 0, 0, 1081, 0, 557056, 673792, 557056, 557056, 557056,
  557056, 557056, 557056, 557056, 557056, 557056, 557056, 729088, 557056, 557056, 557056, 557056, 745472, 557056,
  557056, 557056, 63488, 63488, 63488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 737280, 827392, 0, 0, 63488, 63488,
  63488, 63488, 63488, 63488, 63488, 63488, 63488, 0, 0, 63488, 0, 0, 0, 0, 63488, 0, 0, 22528, 24576, 63488, 0, 0, 0,
  20480, 65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536, 0, 0, 65536, 0, 0, 0, 0, 65536, 0,
  22528, 24576, 0, 0, 0, 0, 20480, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 528384, 412, 413, 0, 0, 0, 0, 0, 0, 129024, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 238, 238, 0, 0, 0, 705, 0, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67584, 0, 206,
  67584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 0, 0, 0, 0, 206, 206, 206, 206, 206, 206, 206, 206, 206, 0, 0, 206,
  0, 0, 0, 0, 0, 0, 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 440, 441, 0, 238, 238, 238, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0,
  0, 528384, 205, 10654, 0, 0, 0, 0, 0, 0, 405504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 26815, 26815, 0, 0, 0, 18432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 985, 0, 0, 557056, 557056, 557056, 0, 0, 0,
  0, 5, 0, 0, 0, 0, 0, 206, 675840, 0, 0, 0, 0, 0, 51200, 0, 0, 0, 0, 0, 51200, 51200, 51200, 0, 0, 0, 0, 0, 940, 0,
  942, 943, 0, 945, 0, 0, 0, 0, 950, 203, 203, 0, 0, 203, 203, 69835, 203, 203, 203, 203, 203, 203, 203, 203, 203,
  69835, 203, 69835, 69835, 69835, 69835, 203, 203, 203, 203, 242, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
  203, 203, 203, 203, 203, 203, 239, 203, 203, 69835, 203, 203, 203, 203, 203, 69835, 203, 203, 203, 203, 203, 203, 203,
  203, 203, 203, 203, 69835, 69835, 69835, 69835, 69835, 203, 203, 69835, 203, 203, 203, 203, 203, 203, 22528, 24576,
  203, 203, 203, 203, 20480, 69835, 69835, 69835, 69835, 69835, 0, 0, 0, 203, 0, 203, 203, 203, 69835, 203, 69835,
  69835, 69835, 69835, 69874, 69874, 69874, 69874, 69874, 69874, 69874, 69835, 69835, 69835, 0, 0, 0, 0, 0, 0, 673792,
  555008, 555008, 555008, 555008, 555008, 555008, 729088, 555008, 555008, 555008, 555008, 555008, 555008, 555008,
  555008, 555008, 555008, 555008, 555008, 0, 94208, 0, 0, 0, 0, 0, 0, 1573, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1468, 0, 0, 0,
  0, 0, 0, 825344, 0, 0, 0, 0, 0, 0, 0, 0, 563643, 563643, 0, 0, 679936, 0, 0, 0, 0, 0, 63488, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 63488, 0, 75776, 75776, 75776, 75776, 75776, 75776, 75776, 75776, 75776, 75776, 75776, 75776, 75776, 75776,
  75776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75776, 0, 0, 0, 0, 0, 0, 0, 0, 75776, 75776, 0, 0, 0, 0, 75776, 0, 0, 0, 75776,
  75776, 75776, 75776, 0, 0, 0, 0, 75776, 75776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  238, 0, 0, 0, 0, 0, 45059, 4, 5, 61440, 0, 0, 0, 0, 0, 0, 528384, 205, 206, 0, 0, 0, 0, 0, 233, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 965, 0, 0, 825344, 0, 0, 0, 0, 0, 0, 0, 0, 238, 0, 0, 0, 679936, 0, 0, 0, 0, 0, 63488, 63488, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 209, 0, 0, 0, 0, 77824, 77824, 77824, 77824, 77824, 77824, 77824, 77824, 77824, 77824,
  77824, 77824, 77824, 77824, 77824, 77824, 0, 0, 0, 0, 0, 43390, 0, 0, 0, 77824, 0, 0, 77824, 43390, 43390, 43390,
  43390, 43390, 43390, 43390, 43390, 43390, 77824, 77824, 43390, 0, 0, 0, 0, 0, 233, 0, 0, 0, 0, 0, 238, 0, 0, 0, 0, 0,
  0, 0, 1321, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22528, 24576, 0, 0, 0, 281, 20480, 79872, 79872, 79872, 79872, 79872, 79872,
  79872, 79872, 79872, 79872, 79872, 79872, 79872, 79872, 79872, 79872, 0, 0, 0, 0, 79872, 79872, 79872, 79872, 79872,
  79872, 79872, 79872, 79872, 79872, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1654, 0, 0, 0, 0, 0, 0, 0, 530432, 725, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 81920, 81920, 81920, 0, 0, 81920, 81920, 81920, 0, 81920, 81920, 81920, 0, 0, 0, 0, 81920,
  0, 81920, 81920, 81920, 81920, 81920, 81920, 81920, 81920, 81920, 81920, 81920, 81920, 81920, 81920, 81920, 81920, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104448, 0, 0, 0, 0, 2, 194, 4, 5, 0, 198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 222, 223,
  224, 0, 0, 0, 83968, 83968, 83968, 83968, 83968, 83968, 83968, 83968, 83968, 83968, 83968, 83968, 83968, 83968, 83968,
  83968, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112640, 0, 0, 0, 0, 0, 0, 0, 83968, 83968, 83968, 83968, 83968, 83968,
  83968, 83968, 83968, 83968, 26815, 26815, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 0, 0, 0, 0, 2, 0, 4,
  5, 0, 409, 0, 0, 0, 0, 0, 528384, 205, 206, 0, 0, 0, 0, 0, 269, 0, 0, 0, 22528, 24576, 0, 0, 0, 282, 20480, 0, 0, 0,
  0, 742, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118784, 0, 0, 0, 0, 0, 0, 0, 1145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  403456, 0, 0, 0, 0, 0, 0, 0, 1358, 0, 0, 0, 0, 0, 0, 0, 0, 300, 300, 300, 300, 0, 300, 0, 0, 0, 361, 361, 361, 1392,
  361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 844, 361, 361, 361, 0, 0, 0, 0, 1477, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 229, 231, 255, 0, 0, 383, 383, 383, 1549, 383, 383, 383, 383, 383, 383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1706,
  1558, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 233, 0, 0, 0, 300, 300, 300, 300, 300, 300, 300, 300, 0, 0, 0, 361,
  361, 361, 361, 361, 361, 0, 1639, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 361, 1670, 361, 361, 361, 361,
  361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 831, 1682, 383, 383, 383, 383, 383, 383, 1688, 383, 383, 383,
  383, 383, 383, 383, 383, 908, 383, 383, 383, 383, 0, 0, 917, 300, 361, 1748, 361, 361, 361, 361, 361, 361, 1754, 361,
  361, 361, 383, 1758, 383, 0, 0, 918, 0, 0, 0, 0, 0, 924, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1167, 0, 0, 0,
  1775, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1785, 383, 383, 383, 0, 0, 0, 191, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  469, 267, 0, 0, 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 0, 0, 22528, 24576, 0, 0, 0, 0, 20480, 0, 0, 88468, 88468, 88468,
  88468, 88468, 88468, 88468, 88468, 88468, 0, 0, 88468, 26815, 26815, 383, 383, 383, 90112, 0, 0, 26815, 5, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 275, 275, 0, 0, 0, 0, 275, 92478, 0, 0, 0, 0, 0, 0, 92478, 0, 92478, 92478, 92478, 0, 92478, 92478,
  92478, 0, 0, 0, 92478, 92478, 92478, 92478, 92478, 92478, 92478, 92478, 92478, 92478, 0, 0, 0, 0, 207, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 1153, 1154, 1155, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 265, 267, 0, 0, 0, 0, 0,
  0, 0, 0, 22528, 24576, 0, 0, 0, 0, 20480, 0, 0, 267, 267, 267, 267, 267, 267, 267, 267, 267, 0, 0, 267, 26815, 26815,
  2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 204, 205, 206, 0, 0, 0, 0, 0, 300, 300, 300, 300, 300, 300, 300, 1498, 300, 300,
  300, 518, 300, 300, 300, 300, 300, 300, 300, 300, 300, 0, 0, 0, 0, 0, 0, 0, 0, 792, 0, 0, 0, 0, 0, 0, 469, 726, 0, 0,
  0, 730, 0, 0, 0, 0, 0, 0, 0, 0, 687, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 719, 0, 0, 0, 920, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 225, 226, 0, 0, 0, 0, 0, 726, 726, 0, 0, 0, 730, 973, 0, 0, 0, 0, 0, 0, 0, 0, 77824, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 405504, 0, 405504, 405504, 405504, 0, 0, 383, 914, 1135, 0, 0, 0, 0, 920, 1137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 429, 361, 361, 361, 1264, 0, 0, 0, 1080, 1270, 0, 0, 0, 383, 383, 383, 383, 0, 0, 0, 1454, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 22528, 24576, 0, 0, 0, 0, 20480, 1414, 0, 0, 0, 0, 1270, 1416, 0, 0, 0, 0, 383, 383, 383, 383, 383, 0,
  0, 0, 361, 361, 361, 1891, 383, 383, 383, 1893, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 489, 2, 45059, 4, 5,
  0, 0, 0, 0, 0, 0, 73728, 528384, 205, 206, 0, 100352, 0, 73728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249, 0, 0,
  825344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 563644, 0, 0, 679936, 0, 0, 0, 0, 0, 108544, 0, 0, 0, 0, 0, 0, 0, 0, 986, 0, 0, 0,
  0, 0, 81920, 0, 81920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 244, 0, 210, 210, 244, 780288, 0, 0, 557619, 557619, 557619,
  557619, 557619, 557619, 557619, 557619, 557619, 557619, 557619, 557619, 748083, 557619, 815667, 557619, 557619,
  832051, 557619, 557619, 557619, 557619, 557619, 557619, 557619, 557619, 557619, 557619, 889395, 557673, 557673,
  791145, 557673, 797289, 803433, 557673, 557673, 815721, 557673, 557673, 832105, 557673, 557673, 557673, 557673,
  557673, 752233, 557673, 557673, 778857, 557673, 557673, 809577, 557673, 557673, 840297, 557673, 557619, 674355,
  557619, 557619, 557619, 557619, 557619, 557619, 557619, 557619, 557619, 557619, 729651, 557619, 557619, 557619, 0, 0,
  0, 0, 536576, 0, 0, 0, 0, 557673, 557673, 557673, 690793, 557619, 746035, 557619, 557619, 557619, 760371, 557619,
  557619, 557619, 557619, 557619, 557619, 557619, 801331, 807475, 557619, 557619, 557619, 557619, 764467, 557619,
  772659, 557619, 776755, 557619, 557619, 791091, 557619, 797235, 803379, 557619, 557619, 557619, 557619, 557619,
  557619, 877107, 557619, 891443, 557619, 901683, 557619, 557619, 913971, 557619, 0, 0, 0, 0, 0, 129024, 0, 0, 129024,
  0, 0, 0, 129024, 0, 0, 0, 0, 0, 0, 300, 300, 300, 300, 300, 766, 300, 300, 300, 300, 772, 300, 300, 300, 300, 300,
  300, 300, 300, 300, 300, 300, 300, 0, 0, 0, 0, 0, 0, 0, 760425, 557673, 557673, 557673, 557673, 557673, 557673,
  557673, 801385, 807529, 557673, 557673, 557673, 557673, 557673, 557673, 557673, 729705, 557673, 557673, 557673,
  557673, 746089, 557673, 557673, 557673, 692841, 557673, 557673, 557673, 557673, 557673, 557673, 557673, 557673,
  557673, 737897, 557673, 557673, 557673, 557673, 557673, 557673, 889449, 557673, 557673, 557673, 557673, 557673,
  557673, 0, 0, 0, 672307, 557619, 557619, 557619, 557619, 864819, 672361, 557673, 774761, 557673, 557673, 557673,
  793193, 557673, 557673, 823913, 828009, 557673, 557673, 557673, 557673, 557673, 557673, 748137, 557673, 557673,
  557673, 557673, 764521, 557673, 772713, 557673, 776809, 557673, 868969, 873065, 557673, 557673, 557673, 885353,
  557673, 557673, 557673, 557673, 557673, 557673, 557673, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 675840, 0, 0, 0, 0, 0,
  890880, 901120, 557619, 557619, 557619, 557619, 698931, 557619, 557619, 711219, 557619, 557619, 557619, 557619,
  557619, 557619, 774707, 557619, 557619, 557619, 793139, 557619, 557619, 823859, 827955, 557619, 557619, 557619,
  557619, 739891, 750131, 557619, 557619, 557619, 768563, 557619, 557619, 557619, 557619, 557619, 834099, 557619,
  557619, 557619, 557673, 557673, 733801, 557673, 557673, 557673, 557673, 557673, 557673, 557673, 686080, 0, 712704,
  557673, 557673, 711273, 557673, 557673, 557673, 557673, 557673, 739945, 750185, 557673, 557673, 557673, 768617,
  557673, 557673, 0, 0, 0, 0, 0, 0, 0, 557619, 557619, 733747, 557619, 557619, 557619, 557619, 557619, 557619, 557619,
  557619, 557619, 557619, 557619, 557619, 557619, 557619, 557619, 893491, 557673, 557673, 914025, 557673, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 808960, 0, 829440, 0, 751616, 0, 0, 557619, 557619, 557619, 557619, 557619, 557619, 557619, 557619,
  557619, 557619, 557619, 557619, 557619, 616, 557673, 557673, 752179, 557619, 557619, 778803, 557619, 557619, 809523,
  557619, 557619, 840243, 557619, 557619, 858675, 557619, 557619, 875059, 883251, 557619, 557619, 557619, 918067, 0, 0,
  0, 0, 557673, 557673, 557673, 557673, 557673, 557673, 557673, 557673, 557673, 557673, 557673, 557673, 557673, 557673,
  557673, 557673, 893545, 557673, 557673, 557673, 557673, 557673, 557673, 858729, 557673, 557673, 875113, 883305,
  557673, 557673, 557673, 918121, 0, 0, 0, 0, 706560, 0, 0, 0, 0, 0, 397312, 0, 0, 397312, 0, 397312, 0, 397312, 0, 0,
  0, 397312, 0, 0, 0, 397586, 397586, 397312, 0, 0, 0, 397586, 0, 0, 0, 555008, 555008, 555008, 718848, 555008, 555008,
  555008, 555008, 0, 0, 0, 557619, 557619, 557619, 690739, 692787, 557619, 557619, 557619, 557619, 557619, 557619,
  557619, 557619, 557619, 737843, 557673, 735849, 557673, 557673, 557673, 557673, 557673, 557673, 836201, 557673,
  557673, 557673, 557673, 557673, 557673, 557673, 557673, 899689, 0, 0, 0, 0, 821248, 0, 0, 555008, 694272, 555008,
  555008, 786432, 555008, 555008, 694272, 786432, 0, 670259, 557619, 557619, 694835, 557619, 557619, 557619, 557619,
  557619, 557619, 868915, 873011, 557619, 557619, 557619, 885299, 557619, 557619, 557619, 557619, 557619, 557619, 615,
  0, 0, 618, 557673, 557673, 557673, 557673, 557673, 557673, 0, 704512, 0, 0, 0, 0, 0, 0, 557619, 557619, 557619,
  731699, 557619, 557619, 762419, 786995, 557619, 557619, 557619, 557619, 557619, 557619, 557619, 557619, 557619,
  905779, 670313, 557673, 557673, 694889, 557673, 557673, 557673, 731753, 557673, 557673, 762473, 787049, 557673,
  557673, 557673, 557673, 557673, 905833, 0, 700416, 0, 0, 0, 811008, 0, 0, 903168, 0, 0, 0, 0, 0, 843776, 0, 677888, 0,
  860160, 677888, 700416, 555008, 788480, 860160, 788480, 557619, 557619, 557619, 703027, 717363, 719411, 557619,
  557619, 735795, 557619, 557619, 557619, 557619, 557619, 557619, 836147, 678451, 682547, 700979, 557619, 557619,
  557619, 557619, 756275, 789043, 811571, 848435, 557619, 860723, 557619, 557619, 557619, 557619, 557619, 557619,
  557619, 557673, 557673, 557673, 557673, 557673, 703081, 717417, 719465, 557673, 903731, 557673, 678505, 682601,
  701033, 557673, 557673, 557673, 557673, 756329, 789097, 811625, 848489, 557673, 860777, 557673, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 690176, 557673, 557673, 903785, 0, 0, 0, 0, 819200, 0, 0, 0, 0, 804864, 0, 919552, 724992,
  866304, 0, 0, 0, 557619, 557619, 741939, 557619, 813619, 557619, 557619, 557619, 866867, 557673, 557673, 741993,
  557673, 813673, 557673, 557673, 557673, 866921, 708608, 0, 0, 0, 557619, 557619, 557619, 557619, 557619, 557619, 0, 0,
  0, 0, 0, 557673, 674409, 557673, 557673, 557673, 557673, 557673, 557673, 557673, 864873, 714752, 0, 841728, 557619,
  758323, 850483, 557619, 557673, 758377, 850537, 557673, 557673, 557673, 834153, 557673, 557673, 557673, 557673,
  557673, 557673, 557673, 877161, 557673, 891497, 557673, 901737, 770048, 723507, 557619, 723561, 557673, 557619,
  557673, 557619, 557673, 557619, 557673, 856627, 856681, 0, 0, 0, 0, 0, 0, 249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 792, 739,
  0, 0, 0, 704, 0, 0, 0, 104448, 0, 0, 104448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 238, 238, 0, 0, 0, 0, 0, 104448, 104448,
  104448, 104448, 104448, 104448, 104448, 104448, 104448, 104448, 104448, 104448, 104448, 104448, 104448, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 238, 0, 0, 59392, 59392, 557056, 868352, 872448, 557056, 557056, 557056, 884736, 557056, 557056,
  557056, 557056, 557056, 557056, 557056, 205, 0, 0, 0, 205, 0, 206, 0, 0, 0, 206, 0, 0, 0, 690176, 557056, 557056,
  557056, 557056, 557056, 557056, 876544, 557056, 890880, 557056, 901120, 557056, 557056, 913408, 557056, 615, 0, 0, 0,
  615, 0, 618, 0, 0, 0, 618, 0, 557056, 557056, 557056, 557056, 698368, 882688, 557056, 557056, 557056, 917504, 615, 0,
  618, 0, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 702464,
  716800, 718848, 557056, 557056, 735232, 557056, 557056, 557056, 557056, 557056, 557056, 835584, 557056, 557056,
  557056, 557056, 557056, 557056, 557056, 106815, 106815, 106815, 106815, 106815, 106815, 106815, 106815, 106815,
  106815, 106815, 106815, 106815, 106815, 106815, 106815, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 238, 205, 205, 0, 0, 0, 0,
  106901, 106901, 106901, 106901, 106901, 106901, 106901, 106901, 106901, 106815, 106815, 106902, 0, 0, 0, 0, 0, 300,
  1493, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1217, 0, 0, 1219, 0, 0, 0, 557056, 557056, 557056, 0, 0, 114688, 0,
  5, 0, 0, 0, 0, 0, 0, 675840, 0, 0, 0, 0, 0, 532480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83968, 0, 83968, 83968, 83968, 0,
  2, 45059, 4, 5, 0, 0, 120832, 0, 0, 0, 0, 120832, 0, 0, 0, 0, 0, 0, 300, 300, 300, 300, 300, 300, 300, 768, 300, 300,
  120832, 120832, 120832, 120832, 120832, 120832, 120832, 120832, 120832, 120832, 120832, 120832, 120832, 120832,
  120832, 120832, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 238, 206, 206, 0, 0, 102400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 720, 557056, 557056, 557056, 0, 0, 116736, 0, 5, 0, 0, 0, 0, 0, 0, 675840, 0, 0, 0, 0, 0, 532480, 794624, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 897024, 28672, 0, 0, 0, 0, 2, 45059, 4, 5, 0, 0, 0, 122880, 0, 0, 0, 0, 122880, 0, 0, 0, 0,
  0, 435, 0, 0, 0, 0, 0, 0, 0, 238, 238, 238, 123200, 123200, 123200, 123200, 123200, 123200, 123200, 123200, 123200,
  123200, 123200, 123200, 123200, 123200, 123200, 123200, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1471, 0, 0, 2, 45059, 0, 5, 0, 0, 131072, 0, 0, 0, 0, 528384, 205, 206, 96256, 0, 0, 0, 0, 0, 532480, 794624, 0, 0,
  28672, 0, 0, 0, 14336, 0, 0, 0, 0, 0, 300, 300, 300, 300, 300, 300, 1497, 300, 300, 300, 300, 1212, 300, 300, 300,
  300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 939, 0, 0, 0, 800, 0, 2, 45059, 571587, 5, 0, 0, 0, 0, 199, 0, 0, 0, 0, 199, 0, 0,
  0, 0, 0, 555008, 555008, 555008, 555008, 555008, 751616, 555008, 555008, 858112, 555008, 874496, 2, 45059, 571587, 5,
  0, 0, 0, 0, 0, 0, 0, 528384, 205, 206, 0, 0, 0, 0, 0, 449, 450, 0, 452, 0, 0, 455, 0, 0, 0, 0, 0, 0, 0, 451, 0, 0, 0,
  0, 0, 457, 458, 0, 557056, 557056, 557056, 0, 118784, 118784, 0, 5, 0, 0, 0, 0, 0, 0, 675840, 0, 0, 0, 0, 210, 0, 294,
  301, 301, 301, 301, 321, 301, 321, 321, 321, 342, 342, 342, 342, 342, 342, 342, 353, 342, 342, 342, 353, 342, 342,
  342, 301, 342, 342, 362, 362, 362, 362, 362, 385, 362, 362, 362, 362, 362, 385, 385, 385, 385, 385, 385, 385, 385,
  385, 362, 362, 385, 26815, 26815, 0, 0, 133120, 133120, 133120, 133120, 133120, 133120, 133120, 133120, 133120, 0, 0,
  133120, 0, 0, 0, 0, 0, 465, 0, 0, 0, 0, 0, 0, 471, 0, 0, 0, 0, 0, 0, 300, 300, 300, 300, 300, 1000, 300, 300, 300,
  300, 1006, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1376, 300, 300, 300, 300, 0, 0, 300, 0, 0, 361, 361,
  361, 361, 361, 383, 361, 361, 361, 361, 361, 0, 0, 0, 0, 383, 383, 383, 1531, 383, 383, 383, 2, 45059, 4, 5, 0, 0, 0,
  0, 0, 0, 0, 0, 205, 206, 0, 0, 0, 0, 0, 496, 0, 0, 0, 0, 0, 300, 504, 300, 300, 300, 519, 300, 300, 300, 525, 300,
  300, 300, 532, 300, 0, 0, 0, 0, 0, 0, 0, 0, 1023, 0, 0, 0, 0, 0, 800, 1414, 0, 0, 0, 0, 0, 1416, 0, 0, 0, 0, 383, 383,
  383, 383, 383, 0, 0, 0, 1890, 361, 361, 361, 1892, 383, 383, 383, 0, 0, 1184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  231, 0, 0, 0, 0, 0, 287, 0, 0, 0, 300, 300, 300, 300, 0, 300, 0, 0, 0, 1019, 0, 0, 1022, 0, 0, 0, 0, 0, 928, 928, 800,
  0, 0, 300, 0, 0, 361, 381, 381, 381, 361, 384, 381, 381, 381, 381, 381, 384, 384, 384, 384, 384, 384, 384, 384, 384,
  381, 381, 384, 26815, 26815, 26816, 2, 45059, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 383, 383, 383, 383, 383, 137216,
  0, 0, 0, 0, 0, 0, 137216, 0, 137216, 137216, 137216, 0, 137216, 137216, 137216, 137216, 137216, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 415, 0, 0, 0, 0, 0, 0, 0, 0, 743, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 425, 426, 0, 0, 0, 894976, 907264, 0,
  667648, 854016, 110592, 0, 0, 782336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 792576, 0, 0, 0, 0, 0, 0, 0, 2, 45059, 4, 196, 0, 0,
  0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 0, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056, 557056,
  557056, 557056, 557056, 0, 557056, 557056, 0, 139264, 139264, 139264, 139264, 139264, 139264, 139264, 139264, 139264,
  139264, 139264, 139264, 139264, 139264, 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 484, 0, 0, 0, 0, 2, 45059, 4,
  1098136, 0, 0, 0, 410, 0, 0, 0, 528384, 205, 206, 0, 0, 0, 0, 0, 496, 0, 0, 0, 0, 543, 0, 0, 0, 0, 0, 0, 0, 251, 0,
  252, 253, 0, 0, 0, 0, 0, 0, 0, 235, 0, 0, 0, 238, 0, 0, 0, 0, 557056, 557056, 557056, 0, 0, 0, 0, 1098136, 0, 0, 0, 0,
  0, 0, 675840, 0, 0, 0, 0, 236, 0, 236, 0, 0, 22528, 24576, 236, 0, 0, 284, 20480, 0, 0, 0, 268, 244, 0, 244, 0, 0,
  22528, 24576, 244, 0, 0, 0, 20480, 0, 0, 416, 0, 0, 419, 420, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 454, 0, 456, 0, 0, 0, 475,
  0, 0, 0, 416, 0, 0, 0, 0, 0, 0, 0, 0, 0, 487, 0, 0, 0, 0, 265, 0, 265, 0, 0, 22528, 24576, 265, 0, 0, 0, 20480, 0, 0,
  0, 493, 0, 0, 497, 0, 0, 0, 501, 300, 300, 505, 300, 300, 520, 300, 300, 300, 300, 300, 300, 300, 300, 300, 0, 0, 0,
  0, 789, 0, 0, 0, 0, 0, 0, 0, 535, 0, 0, 0, 0, 0, 0, 433, 0, 0, 0, 0, 0, 0, 0, 0, 0, 238, 238, 238, 535, 0, 535, 0, 0,
  0, 419, 0, 0, 0, 0, 0, 0, 0, 558, 559, 0, 0, 0, 501, 0, 471, 501, 0, 361, 361, 567, 361, 361, 361, 361, 361, 0, 0, 0,
  0, 383, 383, 1530, 383, 383, 383, 383, 361, 361, 593, 361, 598, 361, 601, 361, 361, 612, 361, 361, 361, 0, 383, 383,
  0, 0, 0, 0, 1826, 0, 1828, 361, 361, 361, 361, 361, 361, 361, 610, 361, 361, 361, 361, 361, 0, 383, 383, 383, 622,
  383, 383, 383, 383, 383, 383, 383, 648, 383, 653, 383, 656, 383, 383, 0, 0, 1824, 1825, 0, 0, 0, 361, 361, 361, 361,
  361, 361, 361, 361, 361, 1784, 383, 383, 383, 383, 667, 383, 383, 0, 0, 0, 26815, 5, 0, 0, 0, 672, 676, 0, 0, 0, 0, 0,
  0, 300, 300, 300, 300, 999, 300, 300, 300, 300, 300, 773, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 0, 1218,
  0, 0, 0, 0, 0, 0, 0, 0, 708, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1484, 0, 0, 0, 0, 740, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 238, 238, 238, 782, 300, 300, 300, 300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 931, 0, 0, 800, 0, 758, 800, 361,
  361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1413, 0, 383, 383, 383, 903, 383, 383, 383, 383, 383,
  383, 383, 383, 383, 0, 0, 0, 0, 0, 0, 0, 1705, 0, 0, 0, 0, 953, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 238, 238,
  98304, 0, 1142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 428, 0, 0, 0, 0, 0, 1173, 0, 1175, 0, 0, 0, 0, 0, 973, 0, 0,
  0, 0, 0, 0, 300, 300, 300, 763, 300, 300, 300, 300, 300, 300, 784, 300, 0, 0, 0, 0, 0, 0, 0, 790, 0, 0, 0, 0, 0, 0,
  300, 300, 300, 998, 300, 300, 300, 300, 300, 300, 1662, 0, 0, 0, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
  1232, 361, 361, 361, 361, 0, 0, 300, 300, 1199, 1200, 300, 300, 300, 300, 300, 300, 300, 300, 1207, 300, 0, 1018, 0,
  0, 0, 1021, 0, 0, 0, 0, 0, 932, 1025, 1018, 800, 1217, 361, 361, 361, 361, 1226, 361, 1228, 361, 361, 1231, 361, 361,
  361, 361, 361, 0, 0, 0, 0, 1528, 383, 383, 383, 383, 383, 383, 0, 0, 0, 361, 361, 361, 361, 361, 361, 383, 1279, 383,
  1281, 383, 383, 1284, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 882, 383, 383, 383, 383, 383, 383, 383, 383,
  1296, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 1316, 0, 0, 1137, 0, 0, 1318, 0, 0, 0, 0, 0,
  1323, 0, 0, 0, 0, 0, 0, 0, 0, 729, 0, 733, 0, 0, 686, 0, 0, 0, 0, 0, 1331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1580, 0, 0, 1355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 300, 300, 300, 512, 361, 361, 361, 361, 1407, 361, 361,
  361, 361, 361, 361, 361, 1412, 361, 361, 0, 0, 0, 0, 361, 361, 361, 361, 361, 1508, 361, 1510, 361, 361, 1513, 361,
  361, 361, 361, 361, 1414, 0, 1416, 0, 383, 383, 383, 383, 383, 383, 383, 906, 383, 383, 383, 912, 383, 0, 0, 0, 383,
  1449, 383, 383, 0, 0, 0, 0, 0, 1456, 0, 0, 0, 0, 1460, 0, 0, 0, 0, 361, 361, 361, 1853, 361, 1854, 361, 361, 361, 383,
  383, 383, 383, 1727, 383, 383, 383, 383, 383, 383, 383, 383, 383, 1735, 361, 361, 361, 1612, 361, 361, 361, 383, 383,
  383, 383, 383, 383, 383, 383, 1622, 0, 1774, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 383, 383, 383, 383,
  1621, 383, 383, 383, 383, 0, 0, 1849, 0, 361, 361, 361, 361, 361, 361, 361, 361, 361, 383, 383, 383, 383, 383, 383,
  1729, 383, 383, 383, 383, 383, 383, 383, 383, 1552, 383, 0, 0, 0, 0, 0, 0, 212, 213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 789, 277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 935, 0, 0, 0, 977, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 1646, 0, 0, 1377, 0, 0, 0, 0, 0, 361, 361, 1383, 1384, 361, 361, 361, 361, 361, 361, 602, 361, 361, 361, 361,
  361, 361, 0, 383, 383, 1414, 0, 0, 0, 0, 0, 1416, 0, 0, 0, 0, 383, 383, 1420, 1421, 383, 0, 1135, 0, 0, 0, 0, 0, 1137,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1326, 0, 0, 361, 361, 1806, 361, 1808, 361, 1810, 361, 383, 383, 383, 383, 1816,
  383, 1818, 383, 0, 1135, 0, 0, 0, 0, 0, 1137, 0, 0, 0, 0, 0, 1140, 0, 0, 0, 0, 361, 361, 1505, 361, 361, 361, 361,
  361, 361, 361, 361, 361, 1719, 361, 1720, 1721, 361, 361, 361, 361, 361, 1820, 383, 0, 0, 0, 0, 0, 0, 0, 361, 361,
  361, 361, 361, 361, 361, 361, 1387, 361, 0, 0, 214, 215, 216, 217, 218, 219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 540, 0, 545,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 279, 286, 286, 0, 286, 286, 295, 302, 302, 302, 302, 322, 302, 322, 322, 337, 339, 343,
  343, 343, 351, 351, 352, 352, 343, 352, 352, 352, 343, 352, 352, 352, 302, 352, 352, 363, 363, 363, 363, 363, 386,
  363, 363, 363, 363, 363, 386, 386, 386, 386, 386, 386, 386, 386, 386, 363, 363, 386, 26815, 26815, 770, 300, 300, 300,
  300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1016, 0, 0, 800, 801, 803, 361, 361, 361, 361, 810,
  361, 814, 361, 361, 361, 361, 361, 361, 1078, 1080, 43865, 1083, 1080, 383, 383, 383, 383, 383, 383, 383, 1766, 383,
  0, 0, 0, 1770, 0, 0, 0, 361, 820, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1260,
  869, 383, 873, 383, 383, 383, 383, 383, 879, 383, 383, 383, 383, 383, 383, 383, 907, 383, 383, 383, 383, 383, 0, 0, 0,
  361, 361, 361, 361, 383, 383, 383, 383, 0, 990, 0, 0, 0, 0, 300, 300, 300, 300, 300, 300, 1001, 300, 300, 300, 1005,
  300, 300, 300, 300, 300, 300, 300, 1011, 300, 300, 300, 300, 1211, 300, 300, 300, 300, 300, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 800, 361, 361, 361, 361, 1058, 1059, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 613, 361, 361,
  0, 383, 383, 383, 1104, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 1117, 1118, 383, 383, 383,
  383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 0, 0, 0, 0, 0, 1501, 0, 361, 361, 361, 361, 361, 361, 361,
  361, 361, 361, 361, 361, 361, 361, 361, 361, 0, 361, 361, 361, 361, 1517, 361, 361, 361, 361, 361, 361, 361, 361, 361,
  361, 361, 614, 361, 0, 383, 383, 0, 0, 0, 1559, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65536, 0, 65536, 0, 0, 0, 300,
  300, 300, 300, 300, 300, 1590, 300, 0, 0, 1594, 361, 361, 361, 361, 361, 824, 361, 361, 361, 361, 361, 361, 361, 361,
  361, 361, 1256, 361, 361, 361, 361, 361, 383, 383, 383, 1698, 383, 383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104448,
  104448, 104448, 0, 0, 361, 1805, 361, 361, 361, 361, 361, 361, 383, 383, 383, 1815, 383, 383, 383, 383, 0, 0, 1453, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 748, 0, 0, 0, 0, 0, 0, 246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 473, 0, 0, 0, 221,
  260, 0, 0, 0, 0, 0, 0, 0, 0, 0, 220, 0, 0, 0, 0, 0, 534, 0, 0, 429, 0, 555, 0, 500, 0, 0, 0, 0, 0, 0, 699, 0, 0, 0,
  238, 238, 0, 0, 0, 0, 0, 0, 0, 745, 0, 0, 0, 0, 0, 0, 0, 753, 0, 0, 0, 288, 0, 0, 296, 303, 303, 303, 303, 323, 303,
  323, 323, 323, 340, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 344, 303, 344, 344, 364,
  364, 364, 364, 364, 387, 364, 364, 364, 364, 364, 387, 387, 387, 387, 387, 387, 387, 387, 387, 364, 364, 387, 26815,
  26815, 0, 0, 541, 0, 0, 0, 0, 0, 361, 361, 361, 361, 361, 361, 361, 584, 0, 0, 0, 696, 697, 0, 0, 0, 0, 0, 238, 238,
  0, 0, 0, 0, 0, 0, 0, 315, 315, 315, 315, 332, 315, 332, 332, 332, 0, 793, 0, 0, 0, 0, 0, 796, 0, 697, 0, 0, 696, 0, 0,
  0, 0, 0, 0, 300, 300, 997, 300, 300, 300, 300, 300, 300, 1003, 0, 0, 800, 802, 361, 361, 361, 361, 361, 361, 361, 361,
  361, 361, 818, 361, 361, 361, 361, 361, 1414, 0, 1416, 0, 383, 383, 383, 383, 383, 383, 1534, 361, 361, 833, 361, 835,
  361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1037, 361, 361, 361, 361, 1169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 973, 0, 0, 0, 0, 0, 0, 300, 760, 300, 300, 300, 300, 300, 300, 300, 300, 528, 300, 300, 300, 0, 0, 0, 0, 1261, 361,
  361, 0, 0, 0, 0, 1080, 0, 0, 0, 0, 383, 383, 383, 383, 383, 383, 1124, 383, 383, 383, 383, 383, 383, 383, 383, 383,
  383, 1543, 383, 383, 383, 383, 383, 383, 1280, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
  665, 383, 1403, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 0, 383, 383, 1414, 0, 0, 0, 0,
  0, 1416, 0, 0, 0, 0, 383, 1419, 383, 383, 383, 0, 0, 0, 191, 5, 0, 0, 0, 673, 677, 0, 0, 0, 0, 0, 0, 361, 1382, 361,
  361, 361, 361, 361, 361, 361, 361, 1034, 361, 361, 361, 361, 361, 361, 361, 0, 0, 0, 1490, 0, 300, 300, 300, 300,
  1496, 300, 300, 300, 300, 300, 300, 774, 300, 300, 300, 300, 300, 300, 300, 300, 300, 0, 0, 0, 1664, 361, 361, 361,
  361, 361, 383, 1536, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 1545, 383, 383, 383, 383, 383, 877, 383,
  383, 383, 383, 383, 383, 383, 383, 383, 383, 893, 383, 383, 383, 383, 383, 0, 0, 361, 361, 1777, 361, 361, 361, 361,
  361, 361, 361, 383, 383, 1787, 383, 383, 383, 383, 1425, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
  1634, 383, 383, 383, 361, 361, 361, 1807, 361, 361, 361, 361, 383, 383, 383, 383, 383, 1817, 383, 383, 383, 383, 383,
  905, 383, 383, 383, 383, 383, 383, 383, 0, 915, 0, 0, 0, 222, 245, 224, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120832,
  120832, 120832, 0, 0, 0, 0, 223, 0, 0, 223, 297, 304, 304, 304, 304, 324, 304, 334, 324, 324, 345, 345, 345, 345, 345,
  345, 345, 354, 345, 345, 345, 354, 345, 345, 345, 304, 345, 345, 365, 365, 365, 365, 365, 388, 365, 365, 365, 365,
  365, 388, 388, 388, 388, 388, 388, 388, 388, 388, 365, 365, 388, 26815, 26815, 0, 0, 0, 463, 0, 0, 0, 0, 0, 0, 470, 0,
  0, 0, 0, 0, 0, 0, 0, 557619, 557619, 557619, 557619, 557619, 557619, 557619, 557619, 557619, 557619, 557673, 557673,
  557673, 557673, 557673, 557673, 557673, 557673, 0, 0, 0, 494, 495, 0, 0, 498, 0, 0, 0, 300, 300, 300, 507, 300, 361,
  361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 383, 383, 383, 383, 383, 383, 383, 1730, 383, 383, 383, 383,
  383, 383, 383, 1551, 383, 383, 0, 0, 0, 0, 0, 0, 300, 515, 300, 521, 300, 524, 300, 527, 300, 300, 300, 300, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1024, 0, 0, 0, 0, 800, 0, 0, 0, 0, 539, 0, 544, 0, 547, 0, 0, 0, 0, 0, 547, 0, 0, 0, 0, 361, 1504,
  361, 361, 1507, 361, 361, 361, 361, 361, 361, 361, 839, 840, 361, 361, 361, 361, 361, 361, 361, 1033, 361, 361, 361,
  361, 361, 361, 1039, 361, 0, 0, 0, 449, 0, 0, 0, 498, 0, 539, 0, 556, 0, 0, 0, 0, 0, 0, 0, 473, 361, 361, 361, 361,
  361, 361, 361, 361, 615, 43865, 800, 618, 861, 383, 383, 383, 383, 383, 590, 361, 594, 361, 361, 600, 603, 607, 361,
  361, 361, 361, 361, 0, 383, 383, 383, 383, 383, 1095, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 0, 1554, 0, 0,
  0, 0, 383, 383, 625, 383, 383, 636, 383, 645, 383, 649, 383, 383, 655, 658, 662, 383, 383, 383, 383, 1439, 383, 383,
  383, 383, 383, 383, 383, 383, 383, 383, 383, 1301, 383, 383, 383, 383, 0, 0, 707, 0, 0, 0, 0, 0, 713, 0, 0, 0, 0, 0,
  0, 0, 0, 209, 0, 0, 208, 209, 0, 208, 0, 0, 0, 0, 724, 470, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 749, 0, 0, 0, 0, 0, 0, 0,
  741, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120832, 0, 0, 0, 0, 800, 361, 361, 361, 361, 361, 361, 361, 361, 361, 815,
  361, 361, 361, 0, 0, 0, 0, 1080, 0, 0, 0, 0, 383, 383, 1278, 383, 819, 361, 361, 361, 361, 361, 361, 361, 361, 361,
  361, 361, 829, 361, 361, 361, 0, 0, 0, 0, 1080, 0, 0, 0, 0, 383, 1277, 383, 383, 847, 361, 361, 361, 853, 361, 615,
  43865, 800, 618, 383, 383, 383, 383, 383, 383, 0, 0, 0, 0, 361, 361, 1868, 1869, 361, 361, 383, 383, 383, 888, 383,
  383, 383, 383, 383, 383, 383, 383, 383, 896, 383, 383, 383, 383, 383, 1108, 383, 383, 383, 383, 383, 383, 383, 383,
  383, 383, 1313, 1314, 383, 383, 1135, 0, 0, 0, 0, 0, 955, 0, 0, 0, 0, 960, 0, 0, 0, 0, 0, 0, 0, 0, 746, 0, 0, 0, 0, 0,
  0, 0, 0, 220, 221, 0, 0, 0, 0, 0, 0, 0, 968, 0, 0, 0, 0, 0, 0, 972, 0, 973, 0, 0, 0, 0, 0, 0, 0, 218, 216, 22528,
  24576, 0, 278, 278, 279, 20480, 989, 0, 991, 0, 0, 0, 300, 995, 996, 300, 300, 300, 300, 300, 1002, 300, 361, 361,
  361, 361, 361, 361, 361, 361, 361, 361, 1756, 361, 383, 383, 383, 0, 0, 0, 26815, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
  243, 0, 243, 0, 0, 0, 300, 1004, 300, 300, 300, 300, 1008, 300, 300, 300, 1010, 300, 300, 300, 300, 300, 0, 0, 788, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 22528, 24576, 0, 0, 0, 233, 20480, 1026, 361, 1027, 361, 1029, 361, 361, 361, 361, 361, 361,
  361, 361, 361, 361, 1040, 361, 361, 361, 1043, 361, 361, 361, 361, 361, 361, 361, 1050, 361, 361, 361, 1053, 1054,
  361, 1056, 1057, 361, 361, 361, 361, 1062, 361, 1064, 361, 361, 361, 361, 361, 0, 1268, 0, 1274, 383, 383, 383, 383,
  383, 383, 383, 1541, 383, 383, 383, 383, 383, 383, 383, 383, 1689, 383, 383, 383, 383, 383, 383, 383, 1070, 361, 361,
  361, 361, 1075, 0, 1080, 43865, 0, 1080, 1085, 383, 1086, 383, 1088, 383, 383, 383, 1121, 383, 1123, 383, 383, 383,
  383, 383, 1129, 383, 383, 383, 383, 383, 383, 1125, 383, 383, 383, 383, 383, 383, 1131, 383, 1133, 1134, 0, 1135, 0,
  0, 0, 0, 0, 1137, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 210, 264, 210, 0, 0, 0, 0, 0, 0, 1144, 0, 0, 0, 1148, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 548, 550, 0, 0, 0, 0, 0, 0, 1183, 0, 0, 0, 0, 0, 0, 1190, 0, 1192, 0, 0, 1195, 0, 0, 0, 0, 0, 543, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 555008, 555008, 555008, 555008, 555008, 555008, 555008, 555008, 555008, 747520, 0, 0, 300,
  300, 300, 300, 300, 300, 1203, 300, 300, 300, 300, 300, 300, 300, 0, 0, 0, 361, 361, 1666, 361, 361, 361, 361, 1249,
  1250, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1524, 361, 361, 1262, 361, 0, 0, 0, 0,
  1080, 0, 0, 0, 0, 383, 383, 383, 383, 383, 383, 1285, 383, 383, 383, 383, 383, 383, 383, 383, 383, 1767, 0, 1769, 0,
  0, 0, 1772, 383, 383, 383, 1282, 383, 383, 383, 1286, 383, 1288, 383, 383, 383, 383, 383, 383, 0, 0, 0, 0, 361, 1867,
  361, 361, 361, 1871, 1343, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1353, 0, 0, 0, 0, 0, 556, 0, 0, 361, 361, 361, 570,
  361, 361, 581, 361, 361, 1390, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1399, 361, 1401, 361, 361, 361, 361,
  361, 1518, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 827, 361, 361, 361, 361, 361, 383, 1436, 383, 1438, 383,
  383, 383, 383, 383, 383, 1445, 383, 383, 383, 383, 383, 383, 0, 0, 1701, 0, 0, 0, 0, 0, 0, 0, 0, 222, 22528, 24576, 0,
  0, 0, 0, 20480, 1448, 383, 383, 383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1139, 0, 0, 0, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 934, 0, 0, 0, 0, 1502, 361, 361, 361, 361, 361, 361, 1509, 361, 361, 361, 361, 361, 361, 837, 361,
  361, 361, 361, 361, 361, 361, 361, 361, 1063, 361, 361, 361, 361, 361, 361, 0, 0, 0, 1570, 1571, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 946, 947, 0, 0, 0, 0, 0, 1584, 300, 1586, 300, 300, 300, 1589, 300, 1591, 1592, 1593, 0, 361, 361, 361,
  361, 361, 361, 361, 1229, 361, 361, 361, 1233, 361, 1235, 361, 361, 1598, 361, 361, 361, 361, 361, 361, 361, 1603,
  361, 361, 1606, 361, 361, 361, 0, 0, 0, 0, 1080, 0, 0, 0, 0, 1276, 383, 383, 383, 0, 0, 0, 1741, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 1324, 0, 0, 0, 0, 0, 361, 361, 1611, 1613, 361, 1615, 1616, 383, 383, 383, 1620, 383, 383, 383, 383, 383,
  383, 0, 1863, 0, 1865, 361, 361, 361, 361, 361, 361, 615, 43865, 800, 618, 383, 383, 383, 383, 383, 867, 383, 383,
  1625, 383, 383, 1628, 383, 383, 383, 383, 383, 1633, 1635, 383, 1637, 1638, 0, 0, 0, 0, 1642, 0, 1644, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 541, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 383, 383, 1684, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
  1692, 383, 383, 383, 383, 383, 1309, 383, 383, 383, 383, 383, 383, 383, 383, 1135, 0, 1707, 0, 0, 1710, 0, 0, 0, 0, 0,
  300, 300, 300, 300, 300, 0, 361, 361, 361, 361, 361, 1227, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1048, 361,
  361, 361, 361, 361, 361, 1736, 383, 383, 0, 0, 0, 0, 0, 1742, 0, 0, 1745, 0, 0, 0, 0, 0, 0, 0, 686, 0, 0, 0, 690, 0,
  0, 0, 0, 0, 0, 0, 700, 701, 0, 238, 238, 0, 0, 0, 0, 0, 0, 0, 546, 0, 0, 549, 0, 0, 0, 0, 552, 383, 1760, 383, 383,
  383, 383, 383, 383, 383, 0, 0, 0, 0, 0, 1771, 0, 0, 0, 0, 361, 1852, 361, 361, 361, 361, 361, 361, 361, 383, 1858,
  383, 383, 383, 383, 1451, 1452, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 528384, 0, 0, 0, 0, 0, 1804, 361, 361, 361, 361, 361,
  361, 361, 383, 383, 1814, 383, 383, 383, 383, 383, 383, 0, 1879, 0, 361, 361, 361, 361, 361, 361, 383, 383, 383, 1822,
  1823, 0, 0, 0, 0, 0, 1829, 361, 361, 1831, 361, 1833, 361, 361, 361, 361, 361, 1717, 361, 361, 361, 361, 361, 361,
  361, 361, 361, 361, 1036, 361, 361, 361, 361, 361, 361, 361, 361, 1838, 383, 383, 1840, 383, 1842, 383, 383, 383, 383,
  0, 0, 0, 0, 0, 0, 1457, 0, 0, 0, 0, 0, 383, 1873, 383, 383, 383, 1877, 0, 0, 0, 361, 361, 361, 361, 361, 361, 383,
  1839, 383, 383, 383, 383, 383, 383, 383, 383, 0, 0, 0, 0, 0, 0, 0, 0, 1802, 361, 241, 280, 280, 280, 280, 280, 280,
  280, 280, 280, 280, 280, 280, 280, 280, 280, 0, 280, 280, 280, 305, 305, 305, 305, 0, 305, 0, 0, 241, 0, 0, 0, 0, 241,
  241, 22528, 24576, 0, 0, 0, 280, 20480, 280, 280, 305, 280, 280, 366, 366, 366, 366, 366, 389, 366, 366, 366, 366,
  366, 389, 389, 389, 389, 389, 389, 389, 389, 389, 366, 366, 389, 26815, 26815, 688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 975, 0, 688, 0, 0, 0, 0, 300, 300, 300, 300, 764, 300, 300, 300, 300, 300, 0, 787, 0, 0, 0, 0, 0, 0, 791,
  0, 0, 0, 0, 800, 361, 361, 361, 361, 361, 361, 811, 361, 361, 361, 361, 361, 361, 606, 361, 361, 361, 361, 361, 361,
  0, 383, 383, 870, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 884, 383, 361, 361, 361,
  1406, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 0, 0, 43865, 0, 0, 383, 383, 383, 383, 383, 1872, 383,
  383, 383, 383, 383, 0, 0, 0, 361, 361, 361, 361, 361, 361, 383, 383, 383, 383, 1539, 383, 383, 383, 383, 383, 383,
  383, 383, 383, 383, 383, 1289, 1290, 383, 383, 383, 281, 281, 281, 289, 281, 281, 281, 306, 306, 306, 306, 325, 306,
  325, 325, 325, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 346, 306, 346, 346, 367, 367,
  367, 367, 367, 390, 367, 367, 367, 367, 367, 390, 390, 390, 390, 390, 390, 390, 390, 390, 367, 367, 390, 26815, 26815,
  0, 0, 0, 0, 1560, 0, 0, 1563, 0, 0, 0, 0, 0, 0, 0, 0, 0, 688, 0, 0, 0, 0, 0, 0, 0, 1569, 0, 0, 0, 1572, 0, 0, 0, 1576,
  0, 0, 0, 0, 0, 1581, 1658, 300, 300, 300, 300, 300, 300, 0, 0, 0, 361, 1665, 361, 361, 361, 361, 361, 361, 1079, 1080,
  43865, 1084, 1080, 383, 383, 383, 383, 383, 383, 1109, 383, 383, 383, 1112, 1113, 383, 1115, 1116, 383, 361, 361, 361,
  1672, 361, 361, 361, 361, 1675, 361, 361, 361, 361, 361, 361, 361, 825, 361, 361, 361, 361, 361, 361, 361, 361, 1254,
  361, 361, 361, 361, 361, 361, 361, 383, 1683, 383, 383, 383, 383, 383, 383, 383, 1690, 383, 383, 383, 383, 1693, 383,
  383, 383, 383, 1685, 1686, 1687, 383, 383, 383, 383, 383, 383, 383, 383, 1694, 361, 361, 361, 361, 1716, 361, 361,
  361, 361, 361, 361, 1722, 361, 361, 361, 361, 361, 361, 1394, 361, 361, 361, 361, 361, 361, 361, 361, 361, 615, 43865,
  800, 618, 860, 862, 383, 383, 383, 383, 383, 1886, 1887, 383, 383, 0, 0, 0, 361, 361, 361, 361, 383, 383, 383, 383,
  383, 383, 383, 383, 383, 383, 0, 0, 0, 0, 0, 0, 0, 383, 623, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
  383, 383, 383, 1135, 0, 383, 668, 383, 0, 0, 0, 26815, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 702, 238, 238, 703, 0, 0, 0, 0,
  0, 0, 0, 709, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1151, 0, 0, 0, 0, 0, 722, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  949, 0, 900, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 0, 0, 0, 0, 0, 1557, 1141, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1354, 383, 1737, 383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 0, 0, 0, 261, 0, 0,
  0, 0, 0, 0, 0, 225, 0, 0, 0, 0, 0, 22528, 24576, 0, 0, 0, 0, 20480, 0, 0, 0, 290, 0, 0, 0, 307, 307, 307, 307, 326,
  307, 326, 326, 326, 307, 326, 326, 368, 368, 368, 368, 368, 391, 368, 368, 368, 368, 368, 391, 391, 391, 391, 391,
  391, 391, 391, 391, 368, 368, 391, 26815, 26815, 326, 347, 326, 326, 326, 326, 326, 326, 355, 326, 326, 326, 355, 326,
  326, 326, 0, 0, 492, 0, 0, 0, 0, 0, 0, 0, 0, 300, 300, 300, 508, 300, 361, 361, 361, 361, 361, 361, 1752, 361, 361,
  361, 361, 361, 383, 383, 383, 0, 0, 0, 26815, 5, 0, 0, 0, 0, 0, 0, 0, 679, 0, 0, 0, 536, 0, 0, 0, 536, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 256, 0, 0, 383, 383, 626, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 0,
  914, 0, 0, 0, 800, 361, 361, 361, 361, 806, 361, 361, 361, 361, 361, 361, 361, 361, 1243, 361, 361, 361, 361, 361,
  361, 361, 361, 361, 850, 361, 361, 361, 615, 43865, 800, 618, 383, 383, 383, 383, 865, 383, 383, 383, 383, 1699, 383,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120832, 0, 120832, 120832, 120832, 967, 0, 0, 0, 0, 0, 0, 971, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 993, 0, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1009, 300, 300,
  300, 300, 300, 300, 361, 361, 361, 1073, 361, 361, 0, 1080, 43865, 0, 1080, 383, 383, 383, 383, 383, 383, 639, 383,
  383, 383, 383, 383, 383, 383, 383, 383, 880, 383, 383, 383, 383, 383, 383, 383, 383, 1120, 383, 383, 383, 383, 383,
  383, 383, 383, 383, 383, 383, 1132, 383, 383, 383, 383, 1876, 383, 1878, 0, 1880, 361, 361, 361, 361, 361, 361, 383,
  383, 383, 469, 0, 0, 26815, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 300, 300, 300, 300, 0, 1714, 0, 0, 1171, 0, 0, 0, 0, 0,
  0, 1178, 0, 0, 0, 0, 0, 0, 0, 0, 980, 981, 0, 983, 0, 0, 0, 0, 0, 361, 361, 1225, 361, 361, 361, 361, 361, 361, 361,
  361, 361, 361, 361, 361, 1051, 361, 361, 361, 0, 1329, 0, 0, 0, 1333, 0, 1335, 0, 0, 0, 1338, 0, 0, 0, 0, 0, 0, 0,
  958, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1564, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1345, 0, 0, 0, 0, 1350, 0, 0, 0, 0, 0, 0, 0, 0, 220,
  22528, 24576, 0, 246, 246, 0, 20480, 0, 0, 1356, 1357, 0, 0, 1360, 0, 0, 0, 0, 0, 0, 300, 300, 300, 300, 300, 300,
  300, 300, 300, 300, 300, 0, 1488, 1489, 0, 1491, 1492, 300, 1494, 300, 300, 300, 300, 300, 300, 1499, 300, 361, 361,
  361, 361, 361, 1751, 361, 1753, 361, 361, 361, 361, 383, 383, 383, 0, 1739, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1365, 0,
  300, 300, 300, 361, 1515, 361, 361, 361, 361, 361, 361, 361, 361, 1521, 361, 361, 1523, 361, 361, 361, 361, 361, 836,
  361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1677, 361, 361, 361, 361, 361, 361, 1525, 361, 361, 361, 0, 0, 0, 0,
  383, 1529, 383, 383, 1532, 383, 383, 383, 383, 383, 1440, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 1099, 383,
  383, 383, 1102, 383, 383, 383, 1548, 383, 383, 383, 1550, 383, 383, 383, 1553, 0, 0, 0, 0, 0, 0, 0, 230, 231, 22528,
  24576, 0, 232, 232, 231, 20480, 0, 1583, 0, 300, 300, 300, 300, 1588, 300, 300, 300, 0, 0, 0, 361, 361, 361, 361,
  1779, 361, 1781, 1782, 1783, 361, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 361,
  1610, 361, 361, 361, 361, 361, 383, 383, 383, 383, 383, 383, 383, 383, 1623, 1789, 383, 1791, 1792, 1793, 383, 0, 0,
  0, 0, 0, 0, 0, 0, 361, 361, 361, 361, 361, 361, 361, 585, 1859, 383, 1860, 383, 383, 383, 0, 0, 0, 0, 361, 361, 361,
  361, 361, 361, 361, 361, 361, 1512, 361, 361, 0, 361, 361, 383, 383, 1896, 1897, 361, 383, 361, 383, 361, 383, 0, 0,
  0, 0, 0, 0, 466, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 483, 0, 0, 0, 0, 0, 282, 282, 282, 0, 282, 282, 282, 308, 308, 308,
  308, 327, 308, 327, 327, 327, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 308, 348,
  358, 369, 369, 369, 369, 369, 392, 369, 369, 369, 369, 369, 392, 392, 392, 392, 392, 392, 392, 392, 392, 369, 369,
  392, 26815, 26815, 0, 461, 0, 0, 0, 0, 0, 467, 0, 0, 0, 467, 0, 0, 0, 0, 0, 0, 0, 1161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1337, 0, 0, 0, 1340, 0, 1342, 467, 499, 0, 461, 0, 0, 0, 0, 361, 361, 361, 361, 573, 361, 361, 361, 0, 0, 0, 1269,
  1080, 0, 0, 0, 1275, 383, 383, 383, 383, 383, 383, 1765, 383, 383, 0, 0, 0, 0, 0, 0, 0, 361, 361, 361, 361, 1832, 361,
  1834, 0, 0, 723, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 300, 300, 300, 300, 0, 361, 0, 0, 0, 756, 0, 0, 300, 300,
  300, 762, 300, 300, 300, 300, 300, 300, 775, 300, 776, 300, 300, 300, 300, 300, 780, 781, 0, 0, 800, 361, 361, 361,
  361, 361, 807, 361, 361, 361, 361, 361, 361, 361, 1046, 361, 361, 361, 361, 361, 361, 1052, 361, 361, 361, 821, 361,
  361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1681, 361, 361, 361, 361, 834, 361, 361, 361, 361,
  361, 361, 842, 361, 361, 361, 361, 361, 361, 838, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1410, 361, 361, 361,
  361, 361, 0, 361, 361, 361, 852, 361, 361, 615, 43865, 800, 618, 383, 383, 383, 383, 383, 866, 383, 901, 383, 383,
  383, 383, 383, 383, 383, 383, 911, 383, 383, 0, 0, 0, 0, 0, 1827, 0, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
  361, 361, 1234, 361, 361, 1090, 1091, 383, 383, 1094, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 1103, 0, 0, 0,
  1172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 563643, 563643, 563643, 1182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 1473, 383, 383, 383, 1307, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 0, 0, 0, 1556, 0, 0, 300, 1369, 300,
  300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1013, 300, 300, 0, 0, 0, 1476, 0, 0, 0, 0, 0, 0,
  1481, 0, 0, 0, 0, 1486, 1500, 0, 0, 0, 361, 361, 361, 1506, 361, 361, 361, 361, 361, 361, 361, 361, 1061, 361, 361,
  361, 361, 361, 361, 361, 361, 1520, 361, 361, 361, 361, 361, 361, 361, 0, 0, 1648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 300, 300, 1368, 383, 383, 1697, 383, 383, 383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137216, 0, 137216, 137216, 137216,
  0, 0, 0, 0, 1851, 361, 361, 361, 361, 361, 361, 361, 361, 1857, 383, 383, 383, 383, 383, 1764, 383, 383, 383, 0, 0, 0,
  0, 0, 0, 0, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1388, 1885, 383, 383, 383, 383, 0, 0, 0, 361, 361, 361, 361,
  383, 383, 383, 383, 1841, 383, 1843, 383, 383, 383, 0, 0, 0, 0, 0, 0, 291, 0, 0, 0, 309, 309, 309, 309, 328, 309, 328,
  336, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 309, 328, 328, 370, 370, 370,
  370, 370, 393, 370, 370, 370, 370, 370, 393, 393, 393, 393, 393, 393, 393, 393, 393, 370, 370, 393, 26815, 27031, 0,
  0, 0, 0, 464, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1165, 0, 0, 0, 0, 0, 428, 0, 0, 0, 0, 0, 0, 361, 361, 361, 361, 574,
  361, 361, 586, 694, 0, 0, 0, 0, 0, 0, 0, 0, 0, 238, 238, 0, 0, 0, 0, 0, 0, 0, 1176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1351,
  0, 0, 0, 0, 0, 0, 0, 0, 800, 361, 361, 361, 361, 361, 808, 361, 361, 361, 361, 361, 361, 361, 1242, 361, 1244, 361,
  361, 361, 361, 361, 1247, 832, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 843, 361, 361, 361, 361, 361, 361,
  1600, 361, 361, 361, 361, 361, 361, 361, 361, 361, 826, 361, 361, 361, 361, 361, 361, 383, 383, 902, 383, 383, 383,
  383, 383, 383, 383, 383, 383, 383, 0, 0, 916, 0, 0, 0, 922, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 563644, 73728,
  563644, 936, 0, 0, 938, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 383, 383, 1092, 383, 383, 383, 383, 383,
  383, 1098, 383, 383, 383, 383, 383, 383, 0, 0, 0, 0, 1703, 0, 0, 0, 0, 0, 1156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 1647, 0, 0, 0, 1185, 0, 0, 0, 0, 0, 1191, 0, 0, 0, 0, 0, 0, 0, 0, 1149, 0, 0, 0, 0, 0, 0, 0, 0, 499, 0, 0, 0, 0,
  0, 0, 0, 0, 227, 0, 0, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 0, 0, 257, 0, 1306, 383, 383, 383, 383, 383, 383, 383, 383,
  383, 383, 383, 383, 383, 0, 0, 1555, 0, 0, 0, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 238, 228, 0, 0, 0, 0, 0, 0, 486, 0,
  0, 0, 0, 300, 300, 506, 300, 300, 0, 0, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 0, 252, 0, 0, 22528, 24576, 252,
  0, 228, 0, 20480, 329, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 310, 335, 335, 371,
  371, 371, 371, 371, 394, 371, 371, 371, 371, 371, 394, 394, 394, 394, 394, 394, 394, 394, 394, 371, 371, 394, 26815,
  26815, 430, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 238, 238, 238, 0, 491, 0, 0, 0, 0, 0, 0, 429, 500, 0, 300, 503, 300,
  300, 511, 534, 0, 0, 0, 0, 542, 0, 0, 0, 0, 0, 551, 0, 448, 0, 0, 0, 0, 0, 683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 534,
  429, 561, 0, 0, 0, 0, 0, 361, 564, 361, 361, 575, 361, 361, 587, 361, 361, 361, 596, 361, 361, 361, 361, 611, 361,
  361, 361, 361, 0, 383, 383, 383, 383, 383, 1794, 0, 0, 0, 0, 0, 0, 0, 0, 361, 361, 361, 361, 361, 361, 361, 361, 361,
  361, 361, 361, 361, 619, 383, 383, 630, 383, 383, 642, 383, 383, 383, 651, 383, 383, 383, 383, 666, 361, 361, 361,
  823, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1067, 1068, 361, 361, 383, 383, 383, 1093, 383, 383,
  383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 895, 383, 383, 383, 0, 0, 1198, 300, 300, 300, 300, 300, 300, 300,
  300, 300, 300, 300, 300, 300, 1014, 300, 300, 0, 361, 1224, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
  361, 361, 361, 1724, 361, 1248, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1259, 361, 361, 361,
  361, 361, 1809, 361, 1811, 383, 383, 383, 383, 383, 383, 383, 1819, 0, 0, 1330, 0, 0, 0, 1334, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 1150, 0, 0, 0, 0, 0, 0, 0, 1344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 1367, 300, 0, 0, 1379, 0, 0, 0,
  361, 361, 361, 361, 361, 361, 1386, 361, 361, 361, 0, 0, 1268, 0, 1080, 0, 0, 1274, 0, 383, 383, 383, 383, 383, 383,
  1629, 1630, 383, 383, 383, 383, 383, 383, 383, 383, 1097, 383, 383, 383, 383, 383, 383, 383, 1389, 361, 1391, 361,
  361, 361, 361, 361, 361, 361, 1397, 361, 361, 361, 361, 361, 361, 1045, 361, 361, 361, 361, 361, 361, 361, 361, 361,
  841, 361, 361, 361, 361, 361, 361, 361, 361, 1405, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 0,
  1080, 43865, 0, 1080, 383, 383, 383, 383, 1089, 383, 1423, 383, 383, 383, 1426, 383, 1428, 383, 383, 383, 383, 383,
  383, 383, 1434, 1461, 0, 0, 0, 0, 0, 1464, 1465, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1480, 0, 0, 0, 0, 0, 0, 1474, 0, 0, 0, 0,
  1478, 0, 0, 0, 0, 0, 1482, 0, 0, 1485, 0, 0, 0, 0, 417, 478, 479, 480, 0, 0, 0, 0, 0, 486, 0, 0, 0, 0, 0, 684, 685, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 961, 0, 0, 0, 0, 0, 383, 383, 1537, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
  383, 383, 657, 383, 383, 1582, 0, 0, 1585, 300, 300, 300, 300, 300, 300, 300, 0, 0, 0, 361, 1596, 1609, 361, 361, 361,
  361, 361, 361, 383, 1618, 383, 383, 383, 383, 383, 383, 383, 1110, 383, 383, 383, 383, 383, 383, 383, 383, 1429, 383,
  383, 383, 383, 383, 383, 383, 383, 383, 383, 1626, 1627, 383, 383, 383, 383, 1631, 383, 383, 383, 383, 383, 383, 0, 0,
  0, 0, 1798, 0, 0, 0, 361, 361, 0, 0, 1640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 427, 0, 0, 1669, 361, 361, 361, 361,
  361, 361, 361, 361, 1676, 361, 361, 361, 361, 361, 361, 615, 43865, 800, 618, 383, 383, 383, 383, 383, 383, 0, 0, 0,
  0, 361, 361, 361, 361, 1870, 361, 0, 0, 1709, 0, 0, 0, 0, 0, 0, 300, 300, 300, 300, 300, 0, 361, 361, 383, 383, 361,
  383, 361, 383, 361, 383, 361, 383, 0, 0, 0, 1136, 0, 673, 0, 0, 0, 1138, 0, 677, 0, 0, 0, 383, 383, 383, 1762, 383,
  383, 383, 383, 383, 0, 1768, 0, 0, 0, 0, 0, 0, 0, 241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 383, 1821, 0, 0, 0, 0,
  0, 0, 0, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1514, 383, 383, 1874, 1875, 383, 383, 0, 0, 0, 361,
  361, 361, 361, 361, 361, 383, 383, 383, 628, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 883, 383,
  383, 383, 0, 229, 230, 231, 232, 0, 0, 0, 0, 0, 0, 238, 0, 0, 0, 0, 0, 0, 0, 1189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1651, 0,
  0, 0, 1655, 0, 0, 231, 231, 231, 0, 231, 231, 298, 311, 311, 311, 311, 330, 311, 330, 330, 338, 341, 349, 349, 349,
  349, 349, 349, 349, 349, 349, 349, 349, 349, 349, 349, 349, 311, 349, 349, 372, 372, 372, 372, 372, 395, 372, 372,
  372, 372, 372, 395, 395, 395, 395, 395, 395, 395, 395, 395, 372, 372, 395, 26815, 26815, 0, 0, 0, 417, 0, 0, 0, 421,
  422, 423, 424, 0, 0, 0, 0, 0, 0, 0, 250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 714, 0, 0, 0, 0, 0, 0, 0, 0, 432, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 238, 238, 238, 514, 300, 300, 300, 523, 300, 300, 300, 300, 530, 300, 300, 0, 0, 0, 0, 1020, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 800, 423, 0, 553, 0, 0, 0, 486, 0, 0, 0, 0, 0, 0, 549, 486, 486, 0, 0, 0, 0, 549, 0, 0, 549, 361,
  361, 569, 572, 361, 579, 361, 361, 361, 361, 361, 854, 615, 43865, 800, 618, 383, 383, 383, 383, 383, 868, 361, 592,
  595, 361, 361, 361, 604, 608, 361, 361, 361, 361, 361, 0, 383, 383, 383, 383, 635, 383, 383, 383, 383, 383, 383, 383,
  383, 383, 383, 383, 1431, 383, 383, 383, 383, 383, 624, 627, 383, 634, 383, 383, 383, 647, 650, 383, 383, 383, 659,
  663, 383, 383, 383, 629, 383, 383, 641, 383, 383, 383, 383, 383, 383, 383, 383, 383, 1312, 383, 383, 383, 383, 0, 0,
  738, 0, 0, 0, 0, 0, 0, 0, 0, 747, 0, 0, 0, 0, 0, 0, 0, 0, 1177, 0, 0, 0, 0, 0, 0, 0, 0, 481, 0, 0, 0, 0, 0, 0, 0, 0,
  438, 0, 0, 0, 0, 238, 238, 238, 361, 361, 851, 361, 361, 361, 615, 43865, 800, 618, 383, 383, 383, 383, 383, 383, 0,
  0, 0, 0, 1866, 361, 361, 361, 361, 361, 951, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 966, 0, 0, 969, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 974, 0, 476, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 988, 361, 1071, 361, 361, 361, 361, 0, 1080,
  43865, 0, 1080, 383, 383, 383, 383, 383, 383, 640, 383, 383, 383, 383, 383, 383, 383, 383, 383, 910, 383, 383, 383, 0,
  0, 0, 0, 0, 0, 1157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 442, 238, 238, 238, 361, 361, 361, 1239, 361, 361, 361, 361,
  361, 361, 361, 361, 361, 361, 361, 361, 1246, 361, 361, 361, 0, 0, 1415, 0, 1078, 0, 0, 0, 1417, 0, 1083, 383, 383,
  383, 383, 383, 383, 890, 383, 383, 892, 383, 894, 383, 383, 383, 383, 0, 0, 0, 0, 1462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 1193, 0, 0, 0, 0, 0, 0, 0, 0, 1503, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1066, 361, 361, 361,
  361, 361, 361, 1516, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 845, 361, 361, 0, 0, 0, 300,
  300, 1587, 300, 300, 300, 300, 300, 0, 0, 0, 361, 361, 361, 1778, 361, 361, 361, 361, 361, 361, 383, 383, 383, 1788,
  361, 361, 1599, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1038, 361, 361, 361, 1726, 383, 383,
  383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 1292, 383, 300, 361, 361, 361, 1749, 361, 361, 361, 361,
  361, 361, 361, 361, 383, 383, 383, 0, 0, 0, 26815, 5, 0, 0, 0, 673, 677, 0, 0, 0, 0, 0, 0, 436, 437, 0, 0, 0, 0, 0,
  238, 238, 238, 1759, 383, 383, 383, 383, 383, 383, 383, 383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 361, 1776,
  361, 361, 361, 1780, 361, 361, 361, 361, 383, 1786, 383, 383, 383, 383, 876, 383, 383, 383, 383, 383, 383, 383, 383,
  383, 383, 383, 1100, 383, 383, 383, 383, 383, 1790, 383, 383, 383, 383, 0, 0, 0, 0, 0, 0, 0, 0, 361, 361, 361, 361,
  577, 361, 361, 361, 0, 0, 0, 292, 0, 0, 0, 300, 300, 300, 300, 0, 300, 0, 0, 0, 0, 0, 0, 759, 300, 300, 300, 300, 300,
  300, 300, 769, 300, 0, 0, 300, 0, 0, 373, 373, 373, 373, 373, 396, 373, 373, 373, 373, 373, 396, 396, 396, 396, 396,
  396, 396, 396, 396, 373, 373, 396, 26815, 26815, 0, 435, 0, 0, 435, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1418, 383, 383,
  383, 383, 0, 0, 800, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 817, 361, 361, 361, 361, 361, 1031, 1032, 361,
  361, 1035, 361, 361, 361, 361, 361, 361, 615, 0, 0, 618, 383, 383, 383, 383, 383, 383, 0, 0, 0, 0, 361, 361, 361, 361,
  361, 361, 361, 361, 361, 383, 383, 383, 361, 849, 361, 361, 361, 361, 615, 43865, 800, 618, 383, 383, 383, 383, 383,
  383, 0, 0, 0, 361, 361, 361, 361, 1884, 361, 383, 885, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
  383, 383, 383, 1447, 383, 0, 0, 0, 923, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 485, 0, 0, 0, 0, 1170, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 1181, 0, 0, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1205, 1206, 300, 300, 300, 783, 300,
  785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 931, 0, 0, 0, 0, 361, 361, 1238, 361, 361, 1241, 361, 361, 361, 361, 361, 361,
  361, 361, 361, 361, 1604, 1605, 361, 361, 361, 361, 1294, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
  383, 383, 383, 661, 383, 383, 0, 1268, 0, 0, 0, 0, 0, 1274, 0, 0, 0, 383, 383, 383, 383, 383, 383, 1096, 383, 383,
  383, 383, 383, 383, 383, 383, 383, 383, 1632, 383, 383, 383, 383, 383, 383, 383, 1437, 383, 383, 383, 383, 383, 383,
  383, 383, 383, 383, 383, 383, 383, 742, 0, 0, 383, 383, 383, 1738, 0, 1740, 0, 0, 0, 0, 1744, 0, 0, 1746, 0, 0, 0, 0,
  0, 710, 0, 712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 0, 0, 0, 0, 0, 0, 1773, 0, 361, 361, 361, 361, 361, 361, 361, 361,
  361, 361, 383, 383, 383, 383, 383, 383, 383, 383, 383, 361, 361, 383, 26815, 26815, 477, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 63488, 0, 0, 0, 537, 0, 0, 0, 0, 0, 0, 0, 0, 0, 537, 0, 0, 0, 0, 0, 0, 0, 0, 537, 0, 0, 0, 0, 0, 0,
  361, 361, 361, 361, 576, 361, 361, 361, 0, 1266, 0, 0, 1080, 0, 1272, 0, 0, 383, 383, 383, 383, 383, 383, 1298, 383,
  383, 383, 383, 383, 383, 383, 383, 383, 1128, 383, 383, 383, 383, 383, 383, 383, 383, 669, 0, 0, 0, 26815, 5, 0, 0, 0,
  674, 678, 0, 0, 0, 0, 0, 0, 795, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 715, 0, 0, 0, 0, 0, 361, 361, 1671, 361, 361, 361, 361,
  361, 361, 361, 361, 361, 361, 361, 361, 361, 1400, 361, 361, 0, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233,
  233, 233, 233, 233, 0, 233, 233, 233, 312, 312, 312, 312, 0, 312, 0, 0, 0, 0, 0, 0, 926, 0, 928, 0, 0, 0, 0, 0, 0, 0,
  0, 209, 209, 209, 0, 0, 0, 0, 0, 233, 233, 312, 233, 233, 374, 374, 374, 374, 374, 397, 374, 374, 374, 374, 374, 397,
  397, 397, 397, 397, 397, 397, 397, 397, 374, 374, 397, 26815, 26815, 490, 0, 0, 0, 0, 0, 0, 0, 0, 436, 0, 300, 300,
  300, 300, 300, 1007, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1213, 1214, 300, 300, 0, 0, 0, 0, 0, 1221, 0,
  300, 516, 300, 300, 300, 300, 526, 300, 300, 531, 300, 300, 0, 0, 0, 0, 0, 0, 0, 1349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 482,
  0, 0, 0, 0, 0, 488, 0, 548, 0, 0, 554, 0, 0, 0, 0, 481, 0, 0, 557, 0, 0, 0, 0, 0, 0, 941, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 0, 0, 550, 361, 361, 361, 361, 361, 361, 582, 361, 361, 361, 361, 1030, 361,
  361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1522, 361, 361, 361, 361, 361, 361, 361, 597, 599, 361, 361, 609,
  361, 361, 361, 361, 361, 0, 383, 383, 383, 383, 904, 383, 383, 383, 383, 909, 383, 383, 383, 0, 0, 0, 0, 0, 0, 1743,
  0, 0, 0, 0, 0, 0, 0, 0, 797, 0, 0, 0, 0, 0, 0, 0, 0, 361, 361, 361, 571, 361, 361, 361, 361, 0, 706, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 716, 0, 0, 0, 0, 0, 0, 0, 1361, 0, 0, 1364, 0, 0, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
  300, 1208, 721, 0, 0, 0, 0, 0, 0, 728, 0, 0, 0, 0, 0, 0, 0, 737, 300, 771, 300, 300, 300, 300, 300, 300, 300, 300,
  300, 300, 300, 300, 300, 300, 778, 300, 300, 300, 0, 728, 800, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
  361, 361, 1607, 1608, 361, 361, 361, 822, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1680, 361,
  361, 0, 0, 0, 0, 978, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1565, 0, 0, 0, 0, 1017, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 800, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1069, 361, 361, 361, 361, 1028, 361,
  361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1679, 361, 361, 361, 361, 361, 1042, 361, 361, 361, 361, 361,
  361, 361, 361, 361, 361, 361, 361, 361, 1245, 361, 361, 361, 361, 361, 361, 1072, 361, 1074, 361, 0, 1080, 43865, 0,
  1080, 383, 383, 383, 1087, 383, 383, 383, 631, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 913, 0, 0,
  0, 300, 1209, 1210, 300, 300, 300, 300, 300, 300, 0, 0, 0, 0, 1220, 0, 0, 0, 0, 0, 736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 557673, 557673, 557673, 557673, 698985, 361, 361, 361, 1251, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
  361, 1398, 361, 361, 361, 361, 361, 361, 1263, 0, 0, 0, 0, 1080, 0, 0, 0, 0, 383, 383, 383, 383, 383, 383, 1540, 383,
  383, 383, 383, 383, 383, 383, 383, 1546, 383, 383, 1295, 383, 1297, 383, 383, 383, 383, 383, 1300, 383, 383, 383,
  1304, 383, 383, 383, 632, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 1315, 383, 1135, 0, 0, 0, 0, 0,
  1346, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1578, 0, 0, 0, 0, 383, 383, 383, 1424, 383, 383, 383, 383, 383, 383, 383, 383,
  383, 383, 383, 383, 1114, 383, 383, 383, 361, 361, 1526, 361, 361, 0, 0, 0, 0, 383, 383, 383, 383, 383, 383, 383,
  1126, 1127, 383, 383, 383, 383, 383, 383, 383, 1299, 383, 383, 383, 383, 383, 383, 383, 1305, 0, 0, 0, 300, 300, 300,
  300, 300, 300, 300, 300, 0, 0, 0, 1595, 361, 361, 361, 361, 1044, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
  361, 1065, 361, 361, 361, 361, 300, 1747, 361, 361, 361, 361, 361, 361, 361, 361, 1755, 361, 361, 1757, 383, 383, 383,
  383, 1107, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 1691, 383, 383, 383, 258, 0, 0, 0, 0, 0, 258,
  0, 0, 263, 0, 0, 0, 0, 0, 0, 0, 0, 1322, 0, 0, 1325, 0, 0, 0, 1328, 0, 258, 0, 0, 0, 270, 0, 0, 0, 22528, 24576, 0, 0,
  0, 283, 20480, 283, 283, 283, 0, 283, 283, 299, 313, 313, 313, 313, 0, 313, 0, 234, 0, 0, 0, 0, 418, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 53565, 53565, 53565, 0, 0, 0, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
  299, 313, 356, 359, 375, 375, 375, 375, 375, 398, 375, 375, 375, 375, 375, 398, 398, 398, 398, 398, 398, 398, 398,
  398, 375, 375, 398, 26815, 26815, 0, 415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 987, 0, 496, 0, 543, 0, 0, 0, 0,
  0, 361, 565, 361, 361, 361, 361, 361, 588, 620, 383, 383, 383, 383, 383, 643, 383, 383, 383, 383, 383, 383, 383, 383,
  383, 1444, 383, 383, 383, 383, 383, 383, 0, 0, 681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 684, 0, 0, 681, 754, 755,
  0, 0, 0, 300, 300, 761, 300, 765, 300, 767, 300, 300, 300, 1370, 300, 300, 300, 1372, 300, 300, 1374, 300, 300, 300,
  300, 300, 300, 786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106815, 0, 106815, 106815, 106815, 791, 0, 800, 361, 361, 361,
  805, 361, 361, 812, 361, 361, 816, 361, 361, 361, 0, 1267, 0, 0, 1080, 0, 1273, 0, 0, 383, 383, 383, 383, 383, 383,
  1427, 383, 383, 383, 383, 383, 383, 383, 383, 383, 881, 383, 383, 383, 383, 383, 383, 871, 383, 383, 875, 383, 383,
  383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 1130, 383, 383, 383, 383, 886, 383, 383, 383, 383, 383, 383, 383,
  383, 383, 383, 383, 383, 383, 383, 897, 383, 383, 0, 952, 0, 954, 0, 0, 0, 0, 959, 0, 0, 0, 0, 0, 0, 0, 0, 468, 0, 0,
  0, 0, 0, 0, 0, 0, 428, 0, 0, 300, 300, 300, 300, 510, 1196, 0, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
  300, 300, 300, 1012, 300, 300, 300, 0, 1223, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
  361, 1264, 361, 361, 361, 361, 1252, 361, 361, 361, 361, 361, 361, 361, 361, 1258, 361, 361, 361, 361, 361, 1253, 361,
  361, 361, 361, 361, 361, 361, 361, 361, 361, 828, 361, 361, 830, 361, 361, 0, 0, 0, 1380, 0, 0, 361, 361, 361, 361,
  361, 361, 361, 361, 361, 361, 383, 383, 383, 383, 383, 383, 383, 383, 383, 361, 1404, 361, 361, 361, 361, 361, 361,
  361, 361, 361, 361, 361, 361, 361, 0, 0, 0, 0, 383, 383, 383, 383, 383, 383, 383, 891, 383, 383, 383, 383, 383, 383,
  383, 383, 1311, 383, 383, 383, 383, 383, 0, 918, 1435, 383, 383, 383, 383, 383, 1441, 383, 383, 383, 383, 383, 383,
  383, 383, 383, 1542, 383, 383, 383, 383, 383, 383, 1547, 383, 383, 383, 383, 383, 383, 383, 383, 383, 0, 0, 0, 0, 0,
  0, 0, 0, 361, 361, 1695, 383, 383, 383, 383, 383, 1700, 0, 0, 1702, 0, 0, 0, 0, 0, 0, 0, 0, 1336, 0, 0, 0, 0, 0, 0, 0,
  0, 361, 361, 568, 361, 361, 361, 361, 361, 0, 1708, 0, 0, 0, 0, 0, 0, 0, 300, 300, 300, 300, 300, 0, 361, 361, 383,
  383, 361, 383, 361, 383, 1900, 1901, 361, 383, 0, 0, 0, 0, 0, 0, 727, 0, 0, 731, 0, 0, 0, 0, 0, 0, 0, 0, 1575, 0, 0,
  0, 1579, 0, 0, 0, 383, 383, 1761, 383, 1763, 383, 383, 383, 383, 0, 0, 0, 0, 0, 0, 0, 361, 1830, 361, 361, 361, 361,
  361, 1835, 361, 361, 383, 383, 383, 383, 383, 383, 383, 1844, 383, 383, 0, 1847, 0, 0, 0, 0, 434, 0, 0, 0, 0, 0, 0, 0,
  0, 238, 238, 238, 259, 0, 0, 0, 0, 0, 259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1577, 0, 0, 0, 0, 0, 0, 259, 0, 0, 0, 271, 0,
  0, 0, 22528, 24576, 0, 0, 0, 0, 20480, 331, 350, 350, 331, 331, 331, 331, 331, 350, 331, 331, 331, 350, 331, 331, 331,
  314, 357, 360, 376, 376, 376, 376, 376, 399, 376, 376, 376, 376, 376, 399, 399, 399, 399, 399, 399, 399, 399, 399,
  376, 376, 399, 26815, 26815, 0, 431, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 238, 238, 238, 0, 0, 0, 447, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 691, 0, 0, 693, 460, 0, 0, 0, 0, 0, 0, 447, 0, 0, 0, 447, 0, 472, 0, 0, 0, 0, 0, 758, 300, 300, 300,
  300, 300, 300, 300, 300, 300, 300, 777, 300, 300, 779, 300, 300, 300, 517, 300, 522, 300, 300, 300, 300, 529, 300,
  300, 300, 0, 0, 0, 0, 0, 0, 0, 1650, 0, 0, 0, 0, 0, 0, 0, 0, 0, 273, 273, 0, 0, 0, 0, 273, 447, 0, 0, 502, 0, 545,
  562, 0, 361, 566, 361, 361, 361, 361, 583, 589, 591, 361, 361, 361, 361, 361, 605, 361, 361, 361, 361, 361, 361, 0,
  383, 383, 383, 383, 1122, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 1544, 383, 383, 383, 621, 383,
  383, 383, 383, 638, 644, 646, 383, 383, 383, 383, 383, 660, 383, 383, 383, 383, 1283, 383, 383, 383, 383, 383, 383,
  383, 383, 383, 383, 1293, 0, 0, 0, 682, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 717, 0, 0, 0, 0, 0, 695, 0, 0, 698, 0, 0,
  0, 0, 238, 238, 0, 704, 0, 0, 0, 0, 0, 794, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123200, 0, 123200, 123200, 123200, 0,
  739, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 750, 0, 0, 0, 0, 0, 0, 957, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59392, 59392, 59392,
  59392, 59392, 59392, 682, 0, 0, 0, 757, 0, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1373, 300, 300, 300, 300,
  300, 300, 300, 300, 1215, 300, 0, 0, 0, 0, 0, 0, 1222, 792, 0, 800, 361, 361, 804, 361, 361, 361, 361, 361, 361, 361,
  361, 361, 361, 1395, 361, 361, 361, 361, 361, 361, 361, 361, 1812, 383, 383, 383, 383, 383, 383, 383, 383, 887, 383,
  383, 889, 383, 383, 383, 383, 383, 383, 383, 383, 383, 898, 899, 918, 0, 0, 0, 924, 0, 0, 0, 0, 0, 0, 0, 932, 0, 0, 0,
  0, 0, 0, 979, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243, 0, 245, 0, 0, 0, 0, 937, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1180, 0, 1041, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1049, 361, 361, 361, 361, 361, 361, 1060, 361, 361, 361,
  361, 361, 361, 361, 361, 361, 1674, 361, 361, 361, 361, 361, 361, 361, 361, 1047, 361, 361, 361, 361, 361, 361, 361,
  0, 0, 1143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 718, 0, 0, 0, 0, 0, 0, 1158, 0, 0, 0, 1162, 1163, 0, 0, 0, 0, 0, 0,
  0, 0, 1362, 1363, 0, 0, 0, 1366, 300, 300, 0, 0, 0, 0, 1186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1653, 0, 0, 0, 0, 0,
  1197, 300, 300, 300, 300, 1201, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1661, 300, 0, 0, 1663, 361, 361, 361,
  361, 361, 361, 615, 43865, 800, 618, 383, 383, 383, 864, 383, 383, 361, 361, 361, 361, 1240, 361, 361, 361, 361, 361,
  361, 361, 361, 361, 361, 361, 1409, 361, 361, 361, 361, 361, 361, 361, 0, 1080, 43865, 0, 1080, 383, 383, 383, 383,
  383, 0, 1378, 0, 0, 0, 0, 1381, 361, 361, 361, 361, 1385, 361, 361, 361, 361, 361, 361, 1601, 361, 361, 361, 361, 361,
  361, 361, 361, 361, 1255, 361, 361, 1257, 361, 361, 361, 1422, 383, 383, 383, 383, 383, 383, 383, 383, 383, 1430, 383,
  383, 383, 1433, 383, 383, 383, 633, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 1446, 383, 383, 383,
  1487, 0, 0, 0, 0, 300, 300, 300, 1495, 300, 300, 300, 300, 300, 300, 300, 1371, 300, 300, 300, 300, 300, 300, 300,
  300, 300, 300, 300, 533, 0, 0, 0, 0, 361, 361, 361, 1527, 361, 0, 0, 0, 0, 383, 383, 383, 383, 383, 1533, 383, 383,
  383, 874, 383, 383, 383, 878, 383, 383, 383, 383, 383, 383, 383, 383, 1287, 383, 383, 383, 383, 383, 383, 383, 1535,
  383, 383, 1538, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 1302, 1303, 383, 383, 1597, 361, 361, 361,
  361, 361, 361, 1602, 361, 361, 361, 361, 361, 361, 361, 361, 1519, 361, 361, 361, 361, 361, 361, 361, 361, 383, 1813,
  383, 383, 383, 383, 383, 383, 361, 361, 361, 361, 1614, 361, 361, 383, 383, 1619, 383, 383, 383, 383, 383, 383, 0, 0,
  0, 361, 361, 1882, 1883, 361, 361, 383, 1624, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 1636, 383,
  383, 383, 383, 1308, 383, 383, 1310, 383, 383, 383, 383, 383, 383, 0, 0, 0, 0, 0, 1799, 0, 1801, 361, 1803, 0, 0, 0,
  1641, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 735, 0, 736, 0, 383, 1696, 383, 383, 383, 383, 0, 0, 0, 0, 0, 0, 1704, 0, 0,
  0, 0, 0, 0, 1147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397312, 238, 0, 397312, 0, 397312, 361, 361, 361, 1715, 361, 361, 361,
  361, 361, 361, 361, 361, 361, 1723, 361, 361, 361, 361, 361, 1393, 361, 361, 361, 1396, 361, 361, 361, 361, 361, 1402,
  361, 361, 1837, 383, 383, 383, 383, 383, 383, 383, 383, 383, 1846, 0, 0, 0, 0, 0, 0, 1160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 502, 300, 300, 300, 300, 300, 0, 1848, 0, 1850, 361, 361, 361, 361, 361, 361, 1855, 1856, 361, 383, 383, 383, 383,
  383, 637, 383, 383, 383, 383, 652, 654, 383, 383, 664, 383, 383, 383, 383, 1861, 1862, 383, 0, 0, 1864, 0, 361, 361,
  361, 361, 361, 361, 361, 361, 1230, 361, 361, 361, 361, 361, 361, 0, 361, 1894, 383, 1895, 361, 383, 361, 383, 361,
  383, 361, 383, 0, 0, 0, 0, 0, 0, 1188, 0, 0, 0, 0, 0, 1194, 0, 0, 0, 0, 0, 0, 711, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  528853, 0, 0, 0, 0, 0, 332, 332, 332, 332, 332, 332, 332, 332, 332, 332, 332, 332, 332, 332, 332, 332, 315, 332, 332,
  377, 377, 377, 377, 377, 400, 377, 377, 377, 377, 377, 400, 400, 400, 400, 400, 400, 400, 400, 400, 377, 377, 400,
  26815, 26815, 445, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65536, 0, 0, 462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 734, 0, 0, 0, 0, 0, 0, 0, 0, 462, 0, 0, 0, 361, 361, 361, 361, 361, 580, 361, 361, 361, 361, 361, 1408, 361, 361,
  361, 361, 361, 1411, 361, 361, 361, 0, 0, 0, 0, 1080, 0, 0, 0, 0, 383, 383, 383, 383, 0, 0, 0, 0, 1455, 0, 0, 1458,
  1459, 0, 0, 0, 680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106781, 0, 0, 800, 361, 361, 361, 361, 361, 809, 361,
  361, 361, 361, 361, 361, 361, 1617, 383, 383, 383, 383, 383, 383, 383, 383, 1442, 383, 383, 383, 383, 383, 383, 383,
  383, 1443, 383, 383, 383, 383, 383, 383, 383, 0, 919, 0, 0, 0, 925, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 897024, 0, 0, 0,
  0, 0, 0, 0, 0, 939, 0, 0, 0, 0, 944, 0, 0, 0, 0, 0, 0, 0, 0, 1466, 0, 0, 1469, 0, 0, 0, 0, 0, 976, 0, 0, 0, 0, 0, 0,
  0, 0, 982, 0, 984, 0, 0, 0, 0, 0, 0, 1320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1179, 0, 973, 0, 0, 0, 383, 383, 1105, 383,
  383, 383, 383, 383, 383, 1111, 383, 383, 383, 383, 383, 383, 0, 0, 0, 361, 1881, 361, 361, 361, 361, 383, 383, 1119,
  383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 1101, 383, 383, 0, 0, 300, 300, 300, 300, 300,
  1202, 300, 300, 300, 300, 300, 300, 300, 300, 1659, 1660, 300, 300, 300, 0, 0, 0, 361, 361, 361, 361, 1667, 1668, 0,
  0, 1317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 751, 752, 0, 361, 1836, 361, 383, 383, 383, 383, 383, 383, 383, 383,
  1845, 383, 0, 0, 0, 0, 0, 0, 1348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 470, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 300, 300,
  300, 513, 383, 383, 383, 1888, 383, 0, 0, 0, 361, 361, 361, 361, 383, 383, 383, 383, 383, 383, 383, 383, 1731, 383,
  1732, 1733, 383, 383, 383, 0, 0, 0, 247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 963, 0, 0, 0, 0, 0, 262, 0, 0, 0, 0, 262,
  0, 22528, 24576, 0, 0, 0, 0, 20480, 0, 0, 300, 0, 0, 378, 378, 378, 378, 378, 401, 378, 378, 378, 378, 378, 401, 401,
  401, 401, 401, 401, 401, 401, 401, 378, 378, 401, 26815, 26815, 0, 0, 800, 361, 361, 361, 361, 361, 361, 361, 813,
  361, 361, 361, 361, 361, 361, 1077, 1080, 43865, 1082, 1080, 383, 383, 383, 383, 383, 0, 1889, 0, 361, 361, 361, 361,
  383, 383, 383, 383, 383, 383, 383, 383, 383, 361, 361, 383, 26815, 27031, 383, 872, 383, 383, 383, 383, 383, 383, 383,
  383, 383, 383, 383, 383, 383, 383, 1291, 383, 383, 0, 0, 0, 970, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 973, 0, 0, 0, 0,
  0, 383, 383, 383, 1106, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 1432, 383, 383, 383, 0, 284, 284,
  284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 0, 284, 284, 284, 316, 316, 316, 316, 0, 316, 0, 0,
  0, 0, 0, 0, 1479, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 528384, 0, 0, 0, 0, 16384, 284, 284, 316, 284, 284, 379, 379, 379,
  379, 379, 402, 379, 379, 379, 379, 379, 402, 402, 402, 402, 402, 402, 402, 402, 402, 379, 379, 402, 26815, 26815, 0,
  0, 0, 0, 1332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53565, 0, 53565, 53565, 53565, 0, 0, 300, 0, 0, 380, 380, 380, 380,
  380, 403, 380, 380, 380, 380, 380, 403, 403, 403, 403, 403, 403, 403, 403, 403, 380, 380, 403, 26815, 26815, 0, 0,
  446, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 798, 799, 0, 0, 0, 0, 538, 0, 0, 0, 0, 0, 0, 0, 0, 0, 538, 0, 0, 0, 0, 0,
  0, 0, 0, 560, 0, 0, 0, 0, 0, 0, 361, 361, 361, 361, 578, 361, 361, 361, 361, 361, 361, 1673, 361, 361, 361, 361, 1678,
  361, 361, 361, 361, 361, 361, 1718, 361, 361, 361, 361, 361, 361, 361, 361, 361, 615, 43865, 800, 618, 383, 383, 863,
  383, 383, 383, 0, 0, 921, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 933, 0, 0, 361, 361, 361, 1265, 0, 0, 0, 1080, 1271,
  0, 0, 0, 383, 383, 383, 383, 383, 383, 1795, 0, 1796, 0, 0, 0, 0, 0, 361, 361, 361, 361, 361, 361, 361, 361, 1511,
  361, 361, 361, 848, 361, 361, 361, 361, 361, 615, 43865, 800, 618, 383, 383, 383, 383, 383, 383, 0, 0, 0, 1797, 0, 0,
  1800, 0, 361, 361, 0, 0, 0, 992, 0, 0, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1015,
  300, 361, 1055, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 361, 1725, 0, 0, 300, 300, 300,
  300, 300, 300, 300, 300, 1204, 300, 300, 300, 300, 300, 361, 361, 361, 361, 1750, 361, 361, 361, 361, 361, 361, 361,
  383, 383, 383, 383, 383, 1728, 383, 383, 383, 383, 383, 383, 1734, 383, 383, 1236, 1237, 361, 361, 361, 361, 361, 361,
  361, 361, 361, 361, 361, 361, 361, 361, 846, 361, 383, 383, 383, 1450, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1152, 0, 0,
  0, 0, 0, 0, 293, 0, 0, 0, 300, 300, 300, 300, 0, 300, 0, 0, 0, 0, 0, 0, 1562, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 930, 0, 0,
  0, 0, 0, 0, 0, 397312, 0, 397312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397312, 0, 0, 0, 397312, 0, 0, 0, 0, 397312, 397312, 0,
  397312, 0, 0, 0, 0, 0, 0, 397312, 397312, 0, 0, 0, 397312, 397312, 0, 0, 0, 0, 0, 397312, 397312, 0, 0, 0, 0, 399360,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1327, 0, 0, 401408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1341, 0,
  401741, 401741, 401741, 401741, 401741, 401741, 401741, 401741, 401741, 401741, 401741, 401741, 401741, 401741,
  401741, 401741, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59392, 59392, 0, 0, 0, 0, 405504, 405504, 405504, 405504, 405504,
  405504, 405504, 405504, 405504, 405504, 405504, 405504, 405504, 405504, 405504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  77824, 0, 77824, 77824, 77824, 0, 0, 407552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 948, 0, 0, 0, 0, 0, 51200, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1339, 0, 0, 0, 0, 825344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 679936, 0, 0, 0, 0, 448,
  0, 0, 0, 0, 453, 0, 0, 0, 0, 0, 459
);

(:~
 : The DFA-state to expected-token-set mapping.
 :)
declare variable $p:EXPECTED as xs:integer+ :=
(
  104, 112, 129, 144, 137, 152, 160, 174, 182, 279, 166, 190, 198, 206, 214, 222, 230, 248, 259, 288, 273, 288, 236,
  288, 287, 334, 784, 119, 288, 338, 297, 305, 313, 321, 329, 346, 354, 362, 376, 384, 392, 407, 415, 423, 431, 439,
  447, 455, 463, 471, 479, 487, 495, 509, 517, 525, 533, 541, 549, 557, 565, 399, 573, 581, 589, 597, 265, 605, 620,
  628, 636, 644, 612, 652, 660, 668, 683, 691, 699, 707, 715, 501, 723, 731, 739, 747, 675, 755, 763, 771, 779, 369,
  121, 288, 289, 288, 240, 288, 806, 810, 788, 801, 796, 251, 818, 822, 829, 824, 828, 829, 833, 840, 836, 844, 848,
  852, 856, 871, 1687, 871, 1020, 871, 871, 871, 871, 871, 871, 871, 1010, 1027, 860, 1986, 2092, 871, 871, 1175, 913,
  2107, 2110, 871, 912, 940, 940, 2223, 879, 865, 871, 2077, 871, 1226, 871, 2090, 879, 880, 869, 871, 871, 1322, 871,
  2090, 2107, 2111, 940, 940, 940, 876, 879, 879, 2226, 871, 871, 2105, 2220, 940, 879, 884, 871, 871, 1015, 871, 2091,
  2109, 939, 940, 940, 888, 879, 879, 933, 870, 907, 879, 891, 871, 871, 1988, 940, 917, 879, 871, 871, 1989, 940, 879,
  892, 1532, 940, 932, 923, 929, 919, 902, 899, 903, 937, 918, 1176, 910, 948, 945, 952, 956, 960, 963, 965, 969, 963,
  976, 972, 980, 984, 988, 992, 999, 871, 1059, 871, 871, 871, 2129, 871, 871, 871, 871, 871, 871, 925, 871, 1328, 871,
  1950, 871, 871, 871, 871, 871, 871, 871, 1596, 1003, 871, 871, 871, 871, 1009, 871, 871, 1279, 1728, 871, 1269, 1733,
  1737, 1223, 871, 871, 871, 871, 1014, 871, 871, 1531, 2107, 901, 940, 941, 896, 1769, 871, 871, 871, 871, 871, 871,
  871, 871, 924, 1904, 871, 1031, 1364, 1038, 1042, 1046, 1050, 1054, 1057, 1063, 1067, 1118, 861, 1073, 1105, 1077,
  1089, 1392, 1084, 1093, 1961, 871, 1099, 1904, 1702, 1481, 1103, 1109, 1116, 1762, 1122, 1127, 1131, 871, 871, 1666,
  871, 871, 871, 1019, 871, 871, 871, 871, 871, 871, 1087, 1438, 1137, 871, 1481, 1940, 1142, 1147, 1763, 1822, 1547,
  871, 871, 1873, 1363, 871, 871, 2000, 1117, 872, 1757, 1143, 1148, 1154, 1181, 871, 1443, 2232, 2007, 871, 2060, 871,
  871, 1544, 1548, 871, 1508, 2003, 872, 1158, 1164, 2098, 1180, 871, 871, 1585, 871, 1549, 1138, 1005, 1709, 1185,
  1189, 871, 1195, 871, 1622, 1677, 1629, 1634, 995, 1639, 2135, 1902, 1373, 1160, 1202, 1363, 1206, 1550, 1618, 1216,
  1220, 1343, 871, 1233, 1712, 1308, 1513, 1465, 1389, 1249, 1399, 1253, 1400, 1260, 2071, 1380, 1264, 1273, 871, 871,
  871, 871, 1277, 1779, 1283, 1198, 1287, 1976, 1291, 1294, 1297, 1300, 871, 1306, 1659, 1079, 1729, 1625, 1312, 1337,
  2040, 1319, 1326, 1256, 871, 871, 1277, 1332, 1341, 1347, 1353, 1358, 1784, 1362, 1926, 1368, 1372, 871, 1407, 1377,
  871, 871, 1386, 1396, 1341, 1404, 1471, 1411, 1212, 871, 1415, 1372, 871, 1537, 1419, 871, 871, 2021, 1150, 1423,
  1429, 1354, 1436, 1442, 1447, 871, 871, 1993, 1968, 871, 1997, 2011, 2015, 1738, 1451, 871, 871, 1458, 1462, 1469,
  1475, 2083, 1454, 1372, 871, 1630, 1479, 871, 2155, 1485, 1524, 1493, 1500, 871, 2117, 1363, 1635, 1507, 1432, 1648,
  1512, 1517, 1149, 1521, 1645, 1496, 1692, 1530, 1669, 1526, 1750, 1536, 1568, 1541, 1560, 1488, 1561, 1489, 1554,
  1112, 1558, 1565, 1572, 1576, 871, 871, 871, 1582, 1589, 1800, 1594, 1599, 1603, 1607, 1609, 1613, 1617, 1652, 1656,
  1663, 1382, 871, 871, 1582, 1673, 1069, 1681, 1685, 1906, 1691, 1696, 1700, 1905, 1706, 871, 871, 1503, 1749, 871,
  1349, 1673, 1069, 2149, 1716, 1928, 2228, 871, 2227, 1722, 1789, 1686, 1742, 2128, 1021, 1748, 871, 871, 1813, 1819,
  1578, 1132, 1724, 1826, 1827, 1302, 1768, 871, 1754, 1761, 1167, 1095, 1267, 2227, 1767, 871, 871, 1642, 871, 1773,
  1676, 1807, 1777, 1718, 871, 1123, 1783, 1815, 1788, 1793, 2128, 1798, 1133, 1236, 1804, 1794, 1744, 1831, 1836, 1832,
  1837, 1841, 1845, 1849, 1853, 1857, 1860, 871, 871, 871, 2162, 1865, 1425, 1870, 1877, 1881, 1885, 1889, 1891, 871,
  871, 2115, 1191, 2121, 2127, 2133, 2144, 2121, 2234, 1080, 1895, 1946, 1934, 1239, 1170, 1590, 1899, 1910, 1861, 1914,
  871, 2162, 1919, 1923, 1948, 1932, 1443, 1938, 1944, 1954, 871, 1315, 1959, 871, 1866, 1965, 871, 2161, 1919, 1923,
  1335, 1932, 1955, 1973, 871, 871, 1980, 1984, 2020, 2025, 1173, 871, 2029, 2051, 871, 1866, 2033, 871, 2037, 2044,
  1969, 2123, 1242, 871, 2048, 871, 871, 2176, 2058, 2064, 2068, 1034, 2075, 1915, 2081, 871, 2087, 1209, 2096, 2102,
  2139, 1229, 2016, 2143, 2148, 1244, 1245, 2053, 2153, 2054, 2159, 2166, 2170, 2174, 2180, 2186, 2201, 871, 871, 871,
  1809, 2190, 2194, 2198, 2205, 2209, 2213, 2217, 2182, 871, 871, 871, 1025, 871, 871, 871, 871, 871, 924, 871, 871,
  1268, 871, 871, 1010, 871, 871, 871, 871, 2005, 871, 871, 871, 871, 2006, 871, 871, 871, 871, 871, 2227, 871, 871,
  2238, 2665, 2499, 2246, 2243, 2253, 2255, 2255, 2271, 2250, 2288, 2255, 2255, 2255, 2255, 2260, 2264, 2255, 2255,
  2292, 2295, 2297, 2268, 2281, 2285, 2256, 2301, 2302, 2306, 2310, 2314, 2318, 2322, 2326, 2330, 2336, 2332, 2340,
  2239, 2666, 2351, 2401, 2365, 2403, 2403, 2403, 2347, 2415, 2653, 2399, 2401, 2439, 2401, 2403, 2403, 2403, 2403,
  2346, 3019, 3021, 2391, 2452, 2452, 2452, 2452, 2394, 2438, 2439, 2439, 2402, 3020, 2428, 2444, 2452, 2452, 2454,
  2403, 2403, 2428, 2443, 2445, 2452, 2454, 2403, 3017, 3019, 3019, 2452, 2452, 3019, 3022, 2414, 2452, 2454, 3017,
  3019, 3019, 3019, 2370, 3019, 3225, 2452, 2452, 2455, 2403, 2453, 2403, 2403, 2403, 2406, 2403, 3224, 3019, 3019,
  2451, 2452, 2452, 2452, 2437, 2454, 2403, 3018, 3019, 3019, 3019, 3019, 3020, 2452, 2455, 3019, 2452, 2454, 3018,
  3225, 2449, 2461, 2461, 2455, 2784, 2474, 2473, 2481, 2577, 2489, 2510, 2513, 2513, 2513, 2513, 2493, 2539, 2503,
  2507, 2518, 2513, 2520, 2513, 2530, 2495, 2526, 2513, 2514, 2534, 2538, 2543, 2545, 2547, 2551, 2563, 2565, 2567,
  2575, 2578, 3692, 2582, 2586, 2554, 2403, 2361, 2403, 3275, 2785, 2376, 3006, 2590, 2624, 2468, 2403, 2403, 2345,
  3128, 2631, 2403, 2403, 2403, 2407, 3561, 2403, 2403, 2403, 2421, 2403, 3323, 2403, 2403, 2403, 2570, 2403, 3325,
  2403, 2403, 2358, 2592, 2784, 2811, 2642, 2403, 2378, 2403, 3277, 2467, 2646, 2403, 2650, 3485, 2671, 2675, 2678,
  2682, 2685, 2688, 2691, 2695, 2698, 2701, 2702, 2706, 2706, 2706, 2710, 2713, 2403, 2403, 2376, 2464, 3138, 2403,
  2784, 2638, 2777, 2781, 2403, 2403, 2377, 2403, 2722, 2731, 2403, 2920, 2738, 2627, 2783, 2403, 3441, 2403, 2403,
  2752, 2403, 2766, 2403, 2402, 2403, 2403, 2366, 2403, 2989, 2789, 2403, 2403, 2404, 3389, 3136, 2403, 2637, 2776,
  2403, 3347, 2840, 3378, 2847, 2849, 2847, 2403, 2795, 2403, 2403, 3320, 3186, 2804, 2783, 2403, 2403, 2403, 2717,
  2808, 2403, 2403, 2403, 2724, 2815, 3084, 2822, 2827, 2834, 2403, 2403, 2403, 2733, 2656, 2774, 2778, 2782, 2403,
  2403, 2846, 2403, 2850, 2403, 2867, 2854, 3570, 2403, 2403, 2403, 2761, 3076, 3390, 2403, 3113, 2898, 3129, 2839,
  3533, 2403, 2850, 2877, 2849, 2849, 3568, 2403, 2403, 3329, 2403, 2403, 3390, 3321, 2403, 2403, 2403, 3019, 3019,
  2451, 2618, 3212, 3216, 2403, 2403, 3598, 2403, 3203, 2616, 2881, 3216, 2403, 2403, 2408, 3652, 2615, 2619, 2884,
  2403, 2403, 3442, 2762, 2783, 3204, 2618, 2883, 2617, 2882, 3217, 2403, 2403, 3443, 2403, 2403, 3458, 3060, 2848,
  2849, 2876, 3325, 3204, 2618, 2905, 2403, 2403, 3480, 2403, 2374, 2382, 3135, 2403, 2378, 2377, 2889, 3444, 3533,
  2403, 2403, 3483, 2403, 2403, 3523, 2666, 3435, 2403, 2403, 3093, 3678, 3132, 3006, 2891, 3534, 2595, 2913, 3534,
  2595, 2403, 2403, 3699, 3033, 3535, 2403, 2403, 2594, 3091, 2595, 2593, 2403, 2404, 2403, 2403, 2403, 3337, 3535,
  2403, 2594, 3532, 3706, 2848, 2403, 2403, 2569, 3395, 2924, 2958, 2929, 2937, 2946, 3324, 2956, 3470, 2971, 2975,
  2979, 2981, 2980, 2980, 2985, 2985, 2985, 2985, 2988, 2403, 2403, 2571, 3412, 2403, 3707, 2403, 2403, 2592, 2903,
  2403, 3554, 2994, 2403, 2408, 3575, 3585, 3014, 2403, 3026, 2403, 2497, 2419, 2384, 3698, 3032, 2403, 2403, 2601,
  2403, 2761, 2925, 3037, 2403, 2559, 2403, 2403, 3001, 2995, 2403, 3442, 2403, 2403, 2616, 2620, 2403, 3232, 2403,
  2841, 3418, 3201, 2665, 2403, 3043, 2403, 2408, 2908, 3052, 3198, 3060, 3057, 2476, 2403, 2403, 2403, 2798, 3047,
  3064, 3069, 3673, 2475, 2403, 2403, 2403, 2799, 3070, 3674, 2476, 2403, 2592, 2403, 2403, 2457, 3342, 2403, 3132,
  3082, 2403, 2592, 2476, 2403, 2403, 3643, 2748, 2403, 3074, 3037, 2403, 2593, 2403, 2403, 2917, 2403, 3202, 3389,
  2403, 2596, 3048, 3065, 2408, 3080, 3088, 2476, 3045, 3099, 2932, 2274, 3100, 2933, 2275, 2476, 3039, 2403, 2403,
  3444, 3467, 3288, 2403, 3181, 2841, 2665, 2403, 2760, 2409, 3104, 3060, 2403, 2403, 2637, 2776, 3117, 2403, 2403,
  2403, 2841, 2596, 3099, 3664, 2276, 3661, 3665, 2277, 2403, 2596, 3143, 3665, 3705, 2403, 2403, 3075, 3038, 2403,
  2403, 3444, 2848, 2592, 2476, 3180, 2403, 2664, 2403, 3043, 2403, 2759, 2403, 3121, 3235, 3664, 3147, 2403, 2403,
  2666, 3131, 2783, 2403, 3443, 2403, 2605, 2403, 2403, 3319, 3155, 2403, 3156, 2403, 2609, 3173, 2476, 2596, 3240,
  3161, 2403, 2610, 3366, 3371, 3599, 2403, 2403, 2403, 2871, 3166, 2403, 2403, 2403, 2912, 2403, 3237, 3165, 2476,
  2949, 2403, 2403, 2744, 2403, 2758, 2403, 2609, 3177, 3167, 2403, 2403, 2403, 3008, 3010, 3179, 2403, 2403, 2403,
  3046, 2403, 3192, 2607, 2403, 2616, 2899, 3213, 3217, 2403, 2403, 2403, 2772, 2890, 2604, 2591, 2404, 2606, 2403,
  3185, 2403, 3318, 2603, 2607, 2403, 2740, 2403, 2742, 3319, 2754, 3192, 2607, 2741, 2404, 2591, 3190, 2608, 2743,
  2484, 2403, 2403, 3431, 3336, 3197, 3201, 2403, 2617, 3211, 3215, 3083, 2403, 2403, 2403, 3110, 3107, 2810, 2403,
  2403, 2667, 3221, 2403, 3055, 3679, 3229, 3244, 3248, 3256, 3251, 3255, 3260, 3260, 3264, 3265, 3265, 3265, 3265,
  3265, 3269, 2403, 2403, 2403, 3130, 2403, 3337, 3198, 2403, 2662, 2666, 3028, 3406, 2403, 2403, 2403, 3142, 2375,
  2403, 2403, 3134, 3075, 2403, 3271, 3284, 2403, 2726, 3376, 2403, 2759, 2409, 2667, 2403, 2403, 3238, 2997, 2631,
  3317, 3271, 3286, 2597, 3334, 2403, 2761, 2924, 3323, 2456, 3341, 3346, 2403, 2828, 2835, 2403, 2403, 3321, 2758,
  2403, 3128, 3401, 3407, 2403, 2403, 2403, 3400, 2403, 3134, 2403, 3326, 3383, 2761, 2403, 2403, 2403, 3151, 3351,
  2403, 2403, 2403, 3171, 2522, 3361, 2791, 3357, 3352, 2407, 2403, 2403, 2718, 2403, 3365, 3370, 3375, 2403, 2848,
  2403, 2875, 3325, 2896, 2905, 3382, 2761, 2403, 2403, 2725, 3427, 3394, 3412, 3377, 2403, 3016, 3440, 3413, 2403,
  2403, 2403, 3232, 3199, 2403, 2403, 3399, 3405, 2403, 2403, 2403, 3237, 2404, 3388, 2403, 2403, 2733, 3377, 3411,
  3376, 2403, 2403, 2403, 3193, 3417, 3200, 2403, 3129, 2403, 2840, 3534, 3422, 2403, 2403, 2403, 3326, 2808, 2727,
  3377, 2403, 2403, 2403, 3325, 3417, 3201, 2403, 2940, 2407, 2404, 2403, 2403, 2762, 2403, 3426, 2403, 2403, 2403,
  3452, 3406, 2403, 2403, 3326, 3330, 3330, 2403, 2403, 2406, 2406, 2734, 3377, 2403, 2403, 2800, 3208, 2942, 2403,
  2403, 3328, 2848, 2403, 2403, 2757, 2759, 3431, 2403, 2403, 2809, 3201, 3016, 3439, 3327, 3444, 2403, 2858, 2862,
  2829, 3450, 2403, 3445, 2783, 2403, 3456, 2839, 3445, 2783, 2403, 2403, 3647, 2403, 2403, 2840, 3646, 2403, 2403,
  3648, 2403, 3353, 2403, 3648, 2403, 3647, 2403, 2839, 3039, 2423, 2403, 2840, 2783, 2424, 3353, 2424, 2403, 2403,
  2403, 3540, 2842, 2403, 2403, 2403, 3572, 2660, 2658, 3477, 2403, 2863, 2830, 3214, 3474, 3489, 2840, 3492, 3494,
  3498, 3512, 3502, 3506, 3512, 3510, 3510, 3512, 3516, 3518, 3518, 3518, 3519, 3290, 3294, 2406, 3446, 2403, 3527,
  3531, 2403, 2888, 2780, 2403, 2403, 2403, 2609, 3360, 2403, 3539, 3544, 2476, 3545, 2403, 2403, 2403, 3574, 3442,
  2403, 3287, 3291, 3295, 2407, 3551, 2403, 2952, 2403, 2403, 2633, 3387, 2403, 3558, 2403, 2403, 2823, 2403, 3565,
  2665, 2403, 2403, 2839, 2403, 2403, 3581, 2403, 2403, 2849, 2666, 2403, 2403, 2818, 2614, 2769, 2403, 2403, 2403,
  3595, 3590, 3546, 2403, 2403, 2990, 2790, 3576, 3586, 3591, 3547, 2403, 2403, 2403, 3616, 2665, 2403, 3434, 2403,
  2962, 2965, 2969, 2403, 3572, 3576, 3603, 3608, 3546, 2403, 2403, 3006, 3124, 3009, 3017, 3019, 3573, 3577, 3604,
  3609, 3313, 2783, 3444, 2403, 2996, 2775, 2779, 2783, 2403, 2403, 2405, 2403, 2403, 2403, 3289, 3293, 3297, 3325,
  2558, 2403, 2403, 2403, 3669, 3615, 2403, 2403, 2403, 3705, 2841, 3620, 2665, 3202, 2408, 3575, 3304, 3625, 3576,
  3305, 3626, 3546, 2841, 2397, 3443, 2403, 3005, 2377, 3553, 3289, 3293, 3297, 2557, 3572, 3280, 3631, 3611, 2403,
  2403, 2403, 3093, 3135, 2403, 3610, 2476, 2403, 2403, 3137, 2403, 3311, 2783, 3444, 3287, 3292, 3296, 2343, 2403,
  3006, 2892, 2593, 2344, 2403, 2403, 2403, 3150, 2403, 3636, 3060, 2403, 2403, 3156, 2403, 3573, 3635, 3059, 2403,
  3007, 3124, 3124, 3124, 2840, 3640, 3296, 2403, 2403, 3203, 2403, 2376, 2403, 2376, 2403, 3008, 3124, 3124, 3124,
  3124, 3127, 2403, 2403, 3016, 2907, 3653, 2403, 2403, 3239, 3160, 3015, 2403, 2403, 2403, 3277, 3621, 3658, 2406,
  2403, 2403, 2403, 3322, 2375, 2376, 2403, 2403, 3301, 3309, 3669, 3654, 2403, 3287, 3200, 2403, 2403, 2907, 3671,
  3671, 2403, 3133, 2403, 2403, 2403, 3684, 3132, 2403, 2761, 3076, 3684, 3133, 2403, 2403, 3311, 3462, 2403, 3683,
  2403, 2408, 3685, 3134, 2403, 2408, 3685, 2403, 3684, 2403, 2408, 3279, 3630, 3131, 3094, 2403, 3093, 3723, 2403,
  2403, 3095, 2403, 2760, 2433, 2403, 2403, 2433, 2754, 2403, 2755, 3689, 2754, 2403, 2758, 2757, 2353, 2354, 2756,
  2408, 2477, 3696, 3703, 2485, 2431, 3711, 3714, 3717, 3719, 3719, 3718, 3725, 2403, 2755, 2403, 3019, 3019, 3019,
  2388, 2413, 2452, 2403, 2403, 2403, 2404, 2469, 3135, 2403, 2403, 2403, 3312, 3463, 4096, 524288, 2097152, 4194304,
  8388608, 131074, 131088, 134283264, 65536, 65536, 65536, 134217728, 131088, 131088, 268566528, 268566528, 1073872896,
  131072, 131072, 131072, 131072, 8768, 131072, 131072, 131088, 16908288, 268566528, 1073872896, 1073872896,
  -2147352576, 131102, 1073872896, -2147352576, 131072, 131072, 131072, 262144, 524288, 4194304, 33554432, 134217728,
  -2147483648, 0, 131072, 131072, 1073872896, -2147352576, 131072, 134227136, 10560, 1073872896, 1073872896, 1073872896,
  -2147352576, 131072, 131072, 16908288, 147456, 147472, 268582912, 386007040, 386007040, -1761476608, -1761476608,
  84017152, 84017152, 84017152, 117571584, 84017152, 386007040, 117571584, 117571584, 84017152, 386007040, 117571584,
  1459748864, 386007040, 386007040, 386023424, 1459748864, 386007040, 32768, 32800, 98336, 163872, 98304, 1212448,
  163872, 268599328, -2147319776, 163872, -1073577952, -2147319776, -2147319776, -1072529346, -1072529346, -1072529346,
  386039840, -1072529346, -1055752130, -1072529346, -1072529346, 386039840, -955088834, 4096, 4096, 1024, 0, 0, 0,
  536870912, 0, 0, 65536, 131072, 0, 2, 2, 2, 2, 0, 12, 14, 0, 0, 256, 469762048, 8256, 0, 0, 256, 393216, 32800,
  1048576, 1081344, 1081376, 12, 8, 0, 0, 0, 8, 0, 0, 0, 8192, 64, 64, 64, 0, 32768, 32768, 32, 1048576, 1048608,
  1048608, 1081344, 0, 16, 16, 1073741824, 0, 0, 16, 16, 0, 0, 0, 0, 1, 0, 0, 0, 2, -2147483648, 1081344, 1048608,
  1081344, 1081344, 1081344, 12, 0, 8192, 8192, 64, 0, 0, 0, 1073741824, 0, 32, 32, 32, 32, 0, 2, 0, 2, 0, 1081344,
  1081344, 16, 16, 16, 16, 32, 1048608, 1048608, 1048608, 1048608, 1081344, 0, 32768, 32768, 1081344, 1081344, 1081344,
  1081344, 0, 0, 0, 7, 208, 1081344, 32768, 1081344, 32768, 0, 12, 0, 0, 512, 0, 0, 1536, 0, 67108864, 134217728,
  -2147483648, 0, 0, 0, 70, 1, 8, 8, 1, 0, 1, 0, 2, 24, 40, 136, 65544, 32776, 8, 8, 10, 8, 8, 0, 0, 0, 536936448, 8,
  12, 152, 1073741848, 262280, 393224, 131080, 131080, 262152, 67108872, 8, 8, 8, 8, 10, 262152, 262152, 8, 8, 0, 1, 2,
  16, 8, 152, 24, 131080, 41418752, 136, 136, 136, 262152, 131208, 136, 262296, 8, 8, 24, 8, 8, 1032335850, 10,
  1032335850, 1032335850, 1032585720, 1032585720, 2106327544, 1032585720, 1032598008, 2106458616, 1032598008,
  1032598010, 1032663546, 1067191770, 0, 0, 1024, 536870912, 0, 0, 1032663544, 2106458618, 1032598010, 1032663546,
  1032598010, 1032598010, 0, 0, 1, 4, 1024, 6144, 0, 8, 134234112, 8, 8, 10, 56, 35142666, 35142990, 35142990, 35143006,
  1108884814, 35142990, 35142990, 1108884830, 65536, 131072, 0, 0, 0, 128, 0, 0, 0, 3, 0, 0, 40894464, 0, 0, 1, 32, 512,
  131072, 0, 0, 1, 2, 4, 805306368, 0, 0, 0, 192, 1024, 4096, 262144, 2097152, -2147483648, 2048, 34603008, 59768832, 0,
  0, 1280, 69664768, 0, 3145728, 0, 0, 1, 64, 512, 8192, 16384, 32768, 65536, 512, 2048, 32768, 1207959552, 512, 2080,
  512, 136314880, 0, 2592, 2048, 0, 0, 4096, 8388608, 1610612736, 0, 0, 4, 1048832, 0, 0, 4, 8388608, 536870912, 0, 0,
  0, -2147483648, 0, 2048, 1249927168, 1249927168, 67108864, 0, 67108864, 69206016, 268435458, 69206528, 69206016,
  1143538696, 1143407872, 1143407872, 1143407872, 393476, 1143407872, 393476, 17170692, 1267097860, 1143014664,
  1143014664, 1143276808, 1143276808, 1143407880, 1143407884, 1143016744, 1143407884, 1143407884, 1143016744,
  1143407884, 1143407884, 1143407884, 1143407884, -461957696, -461957696, -461957696, -461957696, -461957696,
  -461957695, -461957695, -461957695, -461957695, -461957684, -461957684, -461957687, 0, 2048, 0, 1207959552, 0, 0,
  2080, 0, 0, 1, 1024, 6144, 12582912, 33554432, 0, 2592, 0, 0, 1, 6144, 8388608, 69795840, 1073741824, 0, 0, 1, 131072,
  0, 0, 8388608, 536870912, 59113472, 1207959552, 0, 1280, 69271552, 1073741824, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 524288,
  0, 69533696, 69664768, 3360, 0, 0, 7168, 0, 0, 8192, 16384, 65536, 524288, 2097152, 8388608, 16777216, 33554432,
  134217728, 1073741824, 0, 0, 0, 512, -2147483648, 74907648, -536870912, 0, 0, 0, 1536, 0, 1024, 589824, 1073741824,
  536870912, 0, 0, 32, 32768, 256, 1024, 458752, 69206016, 393216, 0, 0, 0, 2048, 0, 512, 0, 0, 58720256, 0, 0, 8192,
  25165824, 458752, 0, 0, 0, 3080, 0, 448, 1024, 4096, 458752, 1048576, 2097152, 458752, 1048576, 73400320, -536870912,
  0, 0, 67108864, 0, 0, 0, 4, 0, 0, 2, 268435456, 0, 0, 0, 1024, 0, 256, 1024, 458752, 2097152, 0, 0, 25165824, 327680,
  458752, 0, 192, 256, 1024, 1024, 65536, 393216, 2097152, 8192, 16384, 524288, 2097152, 1024, 0, 0, 1024, 262144,
  2097152, 4096, 262144, 2097152, 4194304, 536870912, 1073741824, -2147483648, 8192, 16384, 2097152, 8388608, 33554432,
  134217728, 0, 268435456, 0, 128, 1024, 4096, 65536, 393216, 1048576, 1024, 4096, 2097152, -2147483648, 0, 0, 2, 8,
  128, 0, 16384, 8388608, 33554432, 134217728, 16384, 33554432, 134217728, 0, 0, 24576, 41943040, 0, 32768, 0, 1024, 0,
  0, 524352, 1024, 2048, 8192, 16384, 196608, 262144, 32768, 2097152, 1073741824, 0, 0, 32768, 65536, -2147483648, 0,
  64, 32768, 268435456, 32768, 1024, 2097152, 0, 0, 49152, -1879048192, 0, 524288, 268435456, 0, 268435456, 0, 0,
  4456448, 0, 4456448, 4456704, 545259524, 4456448, 4456704, 4458882, -2091624054, -2091624054, -2096082936,
  -2091624054, -2096081912, -2096082936, -2095558648, -2095558648, 55859594, -2091624054, -2091624054, -2091624054,
  -2091624054, -1823155830, -1889567749, -1889567749, -1889567749, -1889567749, 0, 0, 0, 5568, 74907648, 22020096,
  -2113929216, 0, 0, 0, 8192, 1536, 0, 8, 20480, 17825792, 21504, 0, 0, 0, 16384, 16384, 16384, 0, 32768, 22020096,
  33554432, 0, 0, 0, 32768, 32768, 32768, 32768, 32, 32, 1048608, 55680, -1845493760, 0, 0, 2, 2432, 983040, 22020096,
  -1912602624, 0, 0, 0, 2097152, 0, 1073741824, 0, 0, 2, 128, 0, 0, 3, 8, 48, 192, 768, 256, 2048, 4096, 16384, 8,
  16384, 1048576, 16777216, 33554432, -2147483648, 0, 0, 768, 2048, 4096, 8192, 16384, 16384, 458752, 524288, 1048576,
  4194304, 0, 524288, 32768, 1024, 0, 2097152, 8, 128, 256, 2048, 0, 0, 0, 327680, 16384, 262144, 4194304, 33554432,
  268435456, 0, 0, 2, 32, 0, 0, 48, 64, 128, 768, 2048, 128, 256, 16384, 4194304, 8388608, -2147483648, 0, 0, 131072, 0,
  0, 262144, 192, 0, 16384, 33554432, -2147483648, 0, 2, 256, 16384, 16384, 16384, 16384, 0, 0, 0, 32, 0, 0, 0, 64, 0,
  0, 0, 16, 0, 0, 3, 48, 64, 768, 8192, 4194304, 134217728, -2147483648, 0, 0, 262144, 262144, 262144, 2, 16384,
  -2147483648, 0, 0, 16384, 196608, 524288, 134217728, -2147483648, 64, 512, 196608, 524288, -2147483648, 0, 1, 2, 48,
  512, 196608, 524288, 32, 512, 196608, 0, 0, 0, 4194304, 0, 0, 1, 512, 131072, 0, 0, 8388608, 0, 1, 2, 32, 512, 2048,
  262144, 1048576, 4194304, 16777216, 0, 0, 0, 262144, 0, 0, 1024, 16384, -2147418112, 262144, 1048576, 2097152,
  4194304, 67108864, 536870912, 1073741824, -2147483648, 0, 0, 0, 4194304, 32, 16384, 32768, 32768, 32768, 1081344,
  16777216, 16779264, 4194368, 0, 0, 262144, 4194304, -2147483648, 0, 0, 3, 48, 64, 512, 16384, 4194368, 4194368,
  4194368, 469762304, 4194368, 4194368, 4718656, 6824659, 2106003, 2107027, 3154579, 19933843, 6824659, 6824659,
  6824659, 2108051, 6824659, 6824659, 6824659, 6824659, 6824667, 1659518679, 1659518679, 1659518679, 1659518679,
  1659518679, 1659518679, 0, 0, 3, 208, 0, 4718592, 0, 0, 4, 8, 96, 1024, 2048, 512, 8192, 6815744, 0, 0, 0, 16777216,
  8192, 256, 1048576, 0, 0, 67108864, 64, 0, 1, 4096, 0, 3, 144, 512, 1024, 2048, 16384, 32768, 10240, 2097152, 0, 0, 4,
  16, 65536, 268435456, 19922944, 0, 0, 0, 8388608, 0, 0, 0, 2097152, 0, 0, 0, 256, 67108864, 134217728, 268435456, 0,
  0, 216, 0, 0, 4, 1024, 2048, 208, 1536, 145408, 15204352, 1644167168, 1644167168, 0, 0, 0, 41943040, 524288, 6291456,
  0, 0, 0, 67108864, 0, 18874368, 1, 80, 128, 512, 8192, 2097152, 4, 80, 128, 1536, 6144, 6144, 8192, 131072, 524288,
  14680064, 14680064, 33554432, 1610612736, 0, 0, 0, 69206016, 256, 67108864, 402653184, 0, 0, 512, 524288, 4194304, 0,
  0, 0, 393216, 4, 64, 1536, 6144, 131072, 0, 32, 0, 32768, 16384, 65536, 16384, 65536, -2147483648, 8388608, 0, 0,
  6144, 131072, 524288, 12582912, 33554432, 1610612736, 0, 1024, 2048, 1048576, 4194304, 32768, 65536, -2147483648,
  8388608, 6144, 8388608, 33554432, 1610612736, 0, 1, 6144, 1610612736, 0, 0, 262144, 8388608, 0, 32768, 65536, 0, 0, 0,
  134217728, 0, 0, 0, 4096, 2097152, 256, 67108864, 0, 0, 8, 4096, 0, 65536, 0, 0, 8, 16384, 65536, 268435456,
  1073741824, 0, 0, 0, 16, 268435456, 0, 0, 524288, 524352, 268435457, 0, 1048832, 67108864, 0, 64, 0, 0, 1048576, 0, 0,
  2048, 16777216, 136314880, 0, 0, 268435457, 2101248, 268435457, 0, 0, 536871940, 536871940, 536871940, 0, 536871940,
  536871940, 536873996, 8781824, 545655820, 142999552, 8781840, 75890688, 75890688, 545393676, 545393676, 545655820,
  545393676, 545655820, 545655820, 545655820, 545655820, 546704652, 547757068, -1546727698, -1546727698, -1546727698,
  -1546727698, 0, 4, 3080, 393216, 8388608, 3336, 1441792, 0, 7176, 2490368, 0, 0, 0, 268435456, 0, 0, 128, 0, 2, 4,
  20200, 5144576, 5144576, 25165824, 33554432, 536870912, -2147483648, 0, 0, 4096, 2097152, 0, 0, 10, 22912, 262144, 0,
  8, 3072, 0, 0, 1048576, 2097152, 8, 3072, 131072, 262144, 2097152, 67108864, 1073741824, 0, 0, 2, 4, 8, 96, 128, 512,
  3072, 0, 131072, 262144, 8388608, 512, 3072, 16384, 32768, 131072, 131072, 786432, 4194304, 25165824, 33554432, 4, 8,
  3072, 262144, 2097152, 1073741824, 0, 0, 3072, 16384, 32768, 262144, 524288, 524288, 4194304, 8388608, 16777216,
  33554432, 536870912, -2147483648, 0, 8, 2048, 0, 0, 8, 1024, 2048, 262144, 8388608, 32768, 262144, 4194304, 8388608,
  16777216, 2048, 16384, 262144, 4194304, 8388608, 96, 1024, 16384, 4194304, 16777216, 16777216, 256, 1048576, 0, 0,
  17170432, 0, 0, 4096, 1073741824, 0, 0, 8, 96, 4194304, 16777216, 33554432, 0, 16777216, 1048576, 67108864, 64, 128,
  768, 8192, 16384, 196608, 524288, 4194304, 2, 8, 32, 64, 4194304, 16777216, 33554432, 67108864, 134217728, 64,
  4194304, 0, 0, 16384, 0, 2, 32, 64, 0, 0, 0, 8, 0, 10, 26, 58, 35130378, 70, 2, 0, 0, 59, 31680, 983040, 0, 70, 0, 0,
  64, 256, 2048, 268435456, 2, 24, 2, 24, 24, 24, 56, 56, 56, 56, 58, 56, 0, 58, 58, 56, 58, 0
);

(:~
 : The token-string table.
 :)
declare variable $p:TOKEN as xs:string+ :=
(
  "(0)",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "URIQualifiedName",
  "PredefinedEntityRef",
  "'""""'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "CharRef",
  "NCName",
  "QName",
  "S",
  "S",
  "CommentContents",
  "PragmaContents",
  "Wildcard",
  "DirCommentContents",
  "DirPIContents",
  "CDataSectionContents",
  "EOF",
  "'!'",
  "'!='",
  "'""'",
  "'#'",
  "'#)'",
  "'$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "'/>'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'<![CDATA['",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'['",
  "']'",
  "']]>'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'boundary-space'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'child'",
  "'collation'",
  "'comment'",
  "'construction'",
  "'context'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'digit'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'eq'",
  "'every'",
  "'except'",
  "'external'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'infinity'",
  "'inherit'",
  "'instance'",
  "'intersect'",
  "'is'",
  "'item'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'lt'",
  "'minus-sign'",
  "'mod'",
  "'module'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'of'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'return'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'self'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'strict'",
  "'strip'",
  "'switch'",
  "'text'",
  "'then'",
  "'to'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unordered'",
  "'validate'",
  "'variable'",
  "'version'",
  "'when'",
  "'where'",
  "'window'",
  "'xquery'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'|'",
  "'||'",
  "'}'",
  "'}}'"
);

(:~
 : Match next token in input string, starting at given index, using
 : the DFA entry state for the set of tokens that are expected in
 : the current context.
 :
 : @param $input the input string.
 : @param $begin the index where to start in input string.
 : @param $token-set the expected token set id.
 : @return a sequence of three: the token code of the result token,
 : with input string begin and end positions. If there is no valid
 : token, return the negative id of the DFA state that failed, along
 : with begin and end positions of the longest viable prefix.
 :)
declare function p:match($input as xs:string,
                         $begin as xs:integer,
                         $token-set as xs:integer) as xs:integer+
{
  let $result := $p:INITIAL[1 + $token-set]
  return p:transition($input,
                      $begin,
                      $begin,
                      $begin,
                      $result,
                      $result mod 2048,
                      0)
};

(:~
 : The DFA state transition function. If we are in a valid DFA state, save
 : it's result annotation, consume one input codepoint, calculate the next
 : state, and use tail recursion to do the same again. Otherwise, return
 : any valid result or a negative DFA state id in case of an error.
 :
 : @param $input the input string.
 : @param $begin the begin index of the current token in the input string.
 : @param $current the index of the current position in the input string.
 : @param $end the end index of the result in the input string.
 : @param $result the result code.
 : @param $current-state the current DFA state.
 : @param $previous-state the  previous DFA state.
 : @return a sequence of three: the token code of the result token,
 : with input string begin and end positions. If there is no valid
 : token, return the negative id of the DFA state that failed, along
 : with begin and end positions of the longest viable prefix.
 :)
declare function p:transition($input as xs:string,
                              $begin as xs:integer,
                              $current as xs:integer,
                              $end as xs:integer,
                              $result as xs:integer,
                              $current-state as xs:integer,
                              $previous-state as xs:integer) as xs:integer+
{
  if ($current-state = 0) then
    let $result := $result idiv 2048
    return
      if ($result != 0) then
      (
        $result mod 256 - 1,
        $begin,
        $end - $result idiv 256
      )
      else
      (
        - $previous-state,
        $begin,
        $current - 1
      )
  else
    let $c0 := (string-to-codepoints(substring($input, $current, 1)), 0)[1]
    let $c1 :=
      if ($c0 < 128) then
        $p:MAP0[1 + $c0]
      else if ($c0 < 55296) then
        let $c1 := $c0 idiv 16
        let $c2 := $c1 idiv 32
        return $p:MAP1[1 + $c0 mod 16 + $p:MAP1[1 + $c1 mod 32 + $p:MAP1[1 + $c2]]]
      else
        p:map2($c0, 1, 6)
    let $current := $current + 1
    let $i0 := 2048 * $c1 + $current-state - 1
    let $i1 := $i0 idiv 16
    let $next-state := $p:TRANSITION[$i0 mod 16 + $p:TRANSITION[$i1 + 1] + 1]
    return
      if ($next-state > 2047) then
        p:transition($input, $begin, $current, $current, $next-state, $next-state mod 2048, $current-state)
      else
        p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
};

(:~
 : Recursively translate one 32-bit chunk of an expected token bitset
 : to the corresponding sequence of token strings.
 :
 : @param $result the result of previous recursion levels.
 : @param $chunk the 32-bit chunk of the expected token bitset.
 : @param $base-token-code the token code of bit 0 in the current chunk.
 : @return the set of token strings.
 :)
declare function p:token($result as xs:string*,
                         $chunk as xs:integer,
                         $base-token-code as xs:integer) as xs:string*
{
  if ($chunk = 0) then
    $result
  else
    p:token
    (
      ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
      if ($chunk < 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
      $base-token-code + 1
    )
};

(:~
 : Calculate expected token set for a given DFA state as a sequence
 : of strings.
 :
 : @param $state the DFA state.
 : @return the set of token strings
 :)
declare function p:expected-token-set($state as xs:integer) as xs:string*
{
  if ($state > 0) then
    for $t in 0 to 6
    let $i0 := $t * 1901 + $state - 1
    let $i1 := $i0 idiv 4
    let $i2 := $i1 idiv 4
    let $i3 := $i2 idiv 8
    return p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 mod 4 + $p:EXPECTED[$i2 mod 8 + $p:EXPECTED[$i3 + 1] + 1] + 1] + 1], $t * 32 + 1)
  else
    ()
};

(:~
 : Classify codepoint by doing a tail recursive binary search for a
 : matching codepoint range entry in MAP2, the codepoint to charclass
 : map for codepoints above the surrogate block.
 :
 : @param $c the codepoint.
 : @param $lo the binary search lower bound map index.
 : @param $hi the binary search upper bound map index.
 : @return the character class.
 :)
declare function p:map2($c as xs:integer, $lo as xs:integer, $hi as xs:integer) as xs:integer
{
  if ($lo > $hi) then
    0
  else
    let $m := ($hi + $lo) idiv 2
    return
      if ($p:MAP2[$m] > $c) then
        p:map2($c, $lo, $m - 1)
      else if ($p:MAP2[6 + $m] < $c) then
        p:map2($c, $m + 1, $hi)
      else
        $p:MAP2[12 + $m]
};

(:~
 : Try parsing the 1st loop of production Comment (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-Comment-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(59, $input, $state)          (: CommentContents | ('(' ':') | (':' ')') :)
    return
      if ($state[$p:l1] = 47) then                          (: (':' ')') :)
        $state
      else
        let $state :=
          if ($state[$p:l1] = 18) then                      (: CommentContents :)
            let $state := p:shiftT(18, $input, $state)      (: CommentContents :)
            return $state
          else if ($state[$p:error]) then
            $state
          else
            let $state := p:try-Comment($input, $state)
            return $state
        return p:try-Comment-1($input, $state)
};

(:~
 : Try parsing Comment.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-Comment($input as xs:string, $state as item()+) as item()+
{
  let $state := p:shiftT(35, $input, $state)                (: ('(' ':') :)
  let $state := p:try-Comment-1($input, $state)
  let $state := p:shiftT(47, $input, $state)                (: (':' ')') :)
  return $state
};

(:~
 : Try parsing Whitespace.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-Whitespace($input as xs:string, $state as item()+) as item()+
{
  let $state :=
    if ($state[$p:l1] = 17) then                            (: S^WS :)
      let $state := p:shiftT(17, $input, $state)            (: S^WS :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:try-Comment($input, $state)
      return $state
  return $state
};

(:~
 : Parse QueryBody.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-QueryBody($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-Expr($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "QueryBody", $count, $begin, $end)
};

(:~
 : Parse MainModule.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-MainModule($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-Prolog($input, $state)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-QueryBody($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "MainModule", $count, $begin, $end)
};

(:~
 : Parse OptionDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-OptionDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(93, $input, $state)                 (: 'declare' :)
  let $state := p:lookahead1W(50, $input, $state)           (: S^WS | ('(' ':') | 'option' :)
  let $state := p:shift(148, $input, $state)                (: 'option' :)
  let $state := p:lookahead1W(168, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-EQName($input, $state)
  let $state := p:lookahead1W(17, $input, $state)           (: StringLiteral | S^WS | ('(' ':') :)
  let $state := p:shift(4, $input, $state)                  (: StringLiteral :)
  let $end := $state[$p:e0]
  return p:reduce($state, "OptionDecl", $count, $begin, $end)
};

(:~
 : Parse FunctionDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-FunctionDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(115, $input, $state)                (: 'function' :)
  let $state := p:lookahead1W(168, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-EQName($input, $state)
  let $state := p:lookahead1W(22, $input, $state)           (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(33, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(64, $input, $state)           (: S^WS | '$' | ('(' ':') | ')' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 30) then                       (: '$' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-ParamList($input, $state)
      return $state
    else
      $state
  let $state := p:shift(36, $input, $state)                 (: ')' :)
  let $state := p:lookahead1W(108, $input, $state)          (: S^WS | ('(' ':') | 'as' | 'external' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 73) then                       (: 'as' :)
      let $state := p:shift(73, $input, $state)             (: 'as' :)
      let $state := p:lookahead1W(173, $input, $state)      (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-SequenceType($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(85, $input, $state)           (: S^WS | ('(' ':') | 'external' | '{' :)
  let $state :=
    if ($state[$p:l1] = 193) then                           (: '{' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-FunctionBody($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(111, $input, $state)            (: 'external' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "FunctionDecl", $count, $begin, $end)
};

(:~
 : Parse VarDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-VarDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(186, $input, $state)                (: 'variable' :)
  let $state := p:lookahead1W(21, $input, $state)           (: S^WS | '$' | ('(' ':') :)
  let $state := p:shift(30, $input, $state)                 (: '$' :)
  let $state := p:lookahead1W(168, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-VarName($input, $state)
  let $state := p:lookahead1W(106, $input, $state)          (: S^WS | ('(' ':') | ':=' | 'as' | 'external' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 73) then                       (: 'as' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-TypeDeclaration($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(74, $input, $state)           (: S^WS | ('(' ':') | ':=' | 'external' :)
  let $state :=
    if ($state[$p:l1] = 49) then                            (: ':=' :)
      let $state := p:shift(49, $input, $state)             (: ':=' :)
      let $state := p:lookahead1W(180, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-VarValue($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(111, $input, $state)            (: 'external' :)
      let $state := p:lookahead1W(72, $input, $state)       (: S^WS | ('(' ':') | ':=' | ';' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 49) then                   (: ':=' :)
          let $state := p:shift(49, $input, $state)         (: ':=' :)
          let $state := p:lookahead1W(180, $input, $state)  (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
          let $state := p:whitespace($input, $state)
          let $state := p:parse-VarDefaultValue($input, $state)
          return $state
        else
          $state
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "VarDecl", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production AnnotatedDecl (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AnnotatedDecl-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(103, $input, $state)        (: S^WS | '%' | ('(' ':') | 'function' | 'variable' :)
    return
      if ($state[$p:l1] != 31) then                         (: '%' :)
        $state
      else
        let $state := p:whitespace($input, $state)
        let $state := p:parse-Annotation($input, $state)
        return p:parse-AnnotatedDecl-1($input, $state)
};

(:~
 : Parse AnnotatedDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AnnotatedDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(93, $input, $state)                 (: 'declare' :)
  let $state := p:parse-AnnotatedDecl-1($input, $state)
  let $state :=
    if ($state[$p:l1] = 186) then                           (: 'variable' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-VarDecl($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:whitespace($input, $state)
      let $state := p:parse-FunctionDecl($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "AnnotatedDecl", $count, $begin, $end)
};

(:~
 : Parse VarDefaultValue.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-VarDefaultValue($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-ExprSingle($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "VarDefaultValue", $count, $begin, $end)
};

(:~
 : Parse NodeComp.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-NodeComp($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 129) then                           (: 'is' :)
      let $state := p:shift(129, $input, $state)            (: 'is' :)
      return $state
    else if ($state[$p:l1] = 55) then                       (: '<<' :)
      let $state := p:shift(55, $input, $state)             (: '<<' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(61, $input, $state)             (: '>>' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "NodeComp", $count, $begin, $end)
};

(:~
 : Parse GeneralComp.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-GeneralComp($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 58) then                            (: '=' :)
      let $state := p:shift(58, $input, $state)             (: '=' :)
      return $state
    else if ($state[$p:l1] = 26) then                       (: '!=' :)
      let $state := p:shift(26, $input, $state)             (: '!=' :)
      return $state
    else if ($state[$p:l1] = 51) then                       (: '<' :)
      let $state := p:shift(51, $input, $state)             (: '<' :)
      return $state
    else if ($state[$p:l1] = 56) then                       (: '<=' :)
      let $state := p:shift(56, $input, $state)             (: '<=' :)
      return $state
    else if ($state[$p:l1] = 59) then                       (: '>' :)
      let $state := p:shift(59, $input, $state)             (: '>' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(60, $input, $state)             (: '>=' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "GeneralComp", $count, $begin, $end)
};

(:~
 : Parse ValueComp.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ValueComp($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 108) then                           (: 'eq' :)
      let $state := p:shift(108, $input, $state)            (: 'eq' :)
      return $state
    else if ($state[$p:l1] = 141) then                      (: 'ne' :)
      let $state := p:shift(141, $input, $state)            (: 'ne' :)
      return $state
    else if ($state[$p:l1] = 135) then                      (: 'lt' :)
      let $state := p:shift(135, $input, $state)            (: 'lt' :)
      return $state
    else if ($state[$p:l1] = 132) then                      (: 'le' :)
      let $state := p:shift(132, $input, $state)            (: 'le' :)
      return $state
    else if ($state[$p:l1] = 120) then                      (: 'gt' :)
      let $state := p:shift(120, $input, $state)            (: 'gt' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(116, $input, $state)            (: 'ge' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ValueComp", $count, $begin, $end)
};

(:~
 : Parse SimpleTypeName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SimpleTypeName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-TypeName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "SimpleTypeName", $count, $begin, $end)
};

(:~
 : Parse SingleType.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SingleType($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-SimpleTypeName($input, $state)
  let $state := p:lookahead1W(149, $input, $state)          (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                                               '?' | ']' | 'and' | 'ascending' | 'case' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '|' | '||' | '}' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 62) then                       (: '?' :)
      let $state := p:shift(62, $input, $state)             (: '?' :)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "SingleType", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production PredicateList (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-PredicateList-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(151, $input, $state)        (: S^WS | EOF | '!' | '!=' | ('(' ':') | ')' | '*' | '+' |
                                                               ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' |
                                                               '>' | '>=' | '>>' | '[' | ']' | 'and' | 'ascending' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                                               'default' | 'descending' | 'div' | 'else' | 'empty' |
                                                               'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                                               'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' |
                                                               'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                                               'treat' | 'union' | 'where' | '|' | '||' | '}' :)
    return
      if ($state[$p:l1] != 66) then                         (: '[' :)
        $state
      else
        let $state := p:whitespace($input, $state)
        let $state := p:parse-Predicate($input, $state)
        return p:parse-PredicateList-1($input, $state)
};

(:~
 : Parse PredicateList.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-PredicateList($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-PredicateList-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "PredicateList", $count, $begin, $end)
};

(:~
 : Parse AbbrevForwardStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AbbrevForwardStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 64) then                       (: '@' :)
      let $state := p:shift(64, $input, $state)             (: '@' :)
      return $state
    else
      $state
  let $state := p:lookahead1W(170, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | Wildcard |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-NodeTest($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "AbbrevForwardStep", $count, $begin, $end)
};

(:~
 : Parse ForwardAxis.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ForwardAxis($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 84) then                            (: 'child' :)
      let $state := p:shift(84, $input, $state)             (: 'child' :)
      let $state := p:lookahead1W(26, $input, $state)       (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(48, $input, $state)             (: '::' :)
      return $state
    else if ($state[$p:l1] = 95) then                       (: 'descendant' :)
      let $state := p:shift(95, $input, $state)             (: 'descendant' :)
      let $state := p:lookahead1W(26, $input, $state)       (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(48, $input, $state)             (: '::' :)
      return $state
    else if ($state[$p:l1] = 76) then                       (: 'attribute' :)
      let $state := p:shift(76, $input, $state)             (: 'attribute' :)
      let $state := p:lookahead1W(26, $input, $state)       (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(48, $input, $state)             (: '::' :)
      return $state
    else if ($state[$p:l1] = 167) then                      (: 'self' :)
      let $state := p:shift(167, $input, $state)            (: 'self' :)
      let $state := p:lookahead1W(26, $input, $state)       (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(48, $input, $state)             (: '::' :)
      return $state
    else if ($state[$p:l1] = 96) then                       (: 'descendant-or-self' :)
      let $state := p:shift(96, $input, $state)             (: 'descendant-or-self' :)
      let $state := p:lookahead1W(26, $input, $state)       (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(48, $input, $state)             (: '::' :)
      return $state
    else if ($state[$p:l1] = 113) then                      (: 'following-sibling' :)
      let $state := p:shift(113, $input, $state)            (: 'following-sibling' :)
      let $state := p:lookahead1W(26, $input, $state)       (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(48, $input, $state)             (: '::' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(112, $input, $state)            (: 'following' :)
      let $state := p:lookahead1W(26, $input, $state)       (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(48, $input, $state)             (: '::' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ForwardAxis", $count, $begin, $end)
};

(:~
 : Parse ForwardStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ForwardStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 76) then                            (: 'attribute' :)
      let $state := p:lookahead2W(158, $input, $state)      (: S^WS | EOF | '!' | '!=' | '(' | ('(' ':') | ')' | '*' |
                                                               '+' | ',' | '-' | '/' | '//' | '::' | ';' | '<' | '<<' |
                                                               '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '|' | '||' | '}' :)
      return $state
    else if ($state[$p:l1] = 84                             (: 'child' :)
          or $state[$p:l1] = 95                             (: 'descendant' :)
          or $state[$p:l1] = 96                             (: 'descendant-or-self' :)
          or $state[$p:l1] = 112                            (: 'following' :)
          or $state[$p:l1] = 113                            (: 'following-sibling' :)
          or $state[$p:l1] = 167) then                      (: 'self' :)
      let $state := p:lookahead2W(155, $input, $state)      (: S^WS | EOF | '!' | '!=' | ('(' ':') | ')' | '*' | '+' |
                                                               ',' | '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' |
                                                               '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '|' | '||' | '}' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 12364                               (: 'attribute' '::' :)
     or $state[$p:lk] = 12372                               (: 'child' '::' :)
     or $state[$p:lk] = 12383                               (: 'descendant' '::' :)
     or $state[$p:lk] = 12384                               (: 'descendant-or-self' '::' :)
     or $state[$p:lk] = 12400                               (: 'following' '::' :)
     or $state[$p:lk] = 12401                               (: 'following-sibling' '::' :)
     or $state[$p:lk] = 12455) then                         (: 'self' '::' :)
      let $state := p:parse-ForwardAxis($input, $state)
      let $state := p:lookahead1W(170, $input, $state)      (: URIQualifiedName | QName^Token | S^WS | Wildcard |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-NodeTest($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-AbbrevForwardStep($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ForwardStep", $count, $begin, $end)
};

(:~
 : Parse AbbrevReverseStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AbbrevReverseStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(43, $input, $state)                 (: '..' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "AbbrevReverseStep", $count, $begin, $end)
};

(:~
 : Parse NodeTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-NodeTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 76                                  (: 'attribute' :)
     or $state[$p:l1] = 86                                  (: 'comment' :)
     or $state[$p:l1] = 101                                 (: 'document-node' :)
     or $state[$p:l1] = 102                                 (: 'element' :)
     or $state[$p:l1] = 140                                 (: 'namespace-node' :)
     or $state[$p:l1] = 145                                 (: 'node' :)
     or $state[$p:l1] = 161                                 (: 'processing-instruction' :)
     or $state[$p:l1] = 165                                 (: 'schema-attribute' :)
     or $state[$p:l1] = 166                                 (: 'schema-element' :)
     or $state[$p:l1] = 175) then                           (: 'text' :)
      let $state := p:lookahead2W(154, $input, $state)      (: S^WS | EOF | '!' | '!=' | '(' | ('(' ':') | ')' | '*' |
                                                               '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' |
                                                               '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '|' | '||' | '}' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 8524                                (: 'attribute' '(' :)
     or $state[$p:lk] = 8534                                (: 'comment' '(' :)
     or $state[$p:lk] = 8549                                (: 'document-node' '(' :)
     or $state[$p:lk] = 8550                                (: 'element' '(' :)
     or $state[$p:lk] = 8588                                (: 'namespace-node' '(' :)
     or $state[$p:lk] = 8593                                (: 'node' '(' :)
     or $state[$p:lk] = 8609                                (: 'processing-instruction' '(' :)
     or $state[$p:lk] = 8613                                (: 'schema-attribute' '(' :)
     or $state[$p:lk] = 8614                                (: 'schema-element' '(' :)
     or $state[$p:lk] = 8623) then                          (: 'text' '(' :)
      let $state := p:parse-KindTest($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-NameTest($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "NodeTest", $count, $begin, $end)
};

(:~
 : Parse ReverseAxis.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ReverseAxis($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 153) then                           (: 'parent' :)
      let $state := p:shift(153, $input, $state)            (: 'parent' :)
      let $state := p:lookahead1W(26, $input, $state)       (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(48, $input, $state)             (: '::' :)
      return $state
    else if ($state[$p:l1] = 70) then                       (: 'ancestor' :)
      let $state := p:shift(70, $input, $state)             (: 'ancestor' :)
      let $state := p:lookahead1W(26, $input, $state)       (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(48, $input, $state)             (: '::' :)
      return $state
    else if ($state[$p:l1] = 158) then                      (: 'preceding-sibling' :)
      let $state := p:shift(158, $input, $state)            (: 'preceding-sibling' :)
      let $state := p:lookahead1W(26, $input, $state)       (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(48, $input, $state)             (: '::' :)
      return $state
    else if ($state[$p:l1] = 157) then                      (: 'preceding' :)
      let $state := p:shift(157, $input, $state)            (: 'preceding' :)
      let $state := p:lookahead1W(26, $input, $state)       (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(48, $input, $state)             (: '::' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(71, $input, $state)             (: 'ancestor-or-self' :)
      let $state := p:lookahead1W(26, $input, $state)       (: S^WS | ('(' ':') | '::' :)
      let $state := p:shift(48, $input, $state)             (: '::' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ReverseAxis", $count, $begin, $end)
};

(:~
 : Parse ReverseStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ReverseStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 43) then                            (: '..' :)
      let $state := p:parse-AbbrevReverseStep($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-ReverseAxis($input, $state)
      let $state := p:lookahead1W(170, $input, $state)      (: URIQualifiedName | QName^Token | S^WS | Wildcard |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-NodeTest($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ReverseStep", $count, $begin, $end)
};

(:~
 : Parse AxisStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AxisStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 70                                  (: 'ancestor' :)
     or $state[$p:l1] = 71                                  (: 'ancestor-or-self' :)
     or $state[$p:l1] = 153                                 (: 'parent' :)
     or $state[$p:l1] = 157                                 (: 'preceding' :)
     or $state[$p:l1] = 158) then                           (: 'preceding-sibling' :)
      let $state := p:lookahead2W(155, $input, $state)      (: S^WS | EOF | '!' | '!=' | ('(' ':') | ')' | '*' | '+' |
                                                               ',' | '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' |
                                                               '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '|' | '||' | '}' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 43                                  (: '..' :)
     or $state[$p:lk] = 12358                               (: 'ancestor' '::' :)
     or $state[$p:lk] = 12359                               (: 'ancestor-or-self' '::' :)
     or $state[$p:lk] = 12441                               (: 'parent' '::' :)
     or $state[$p:lk] = 12445                               (: 'preceding' '::' :)
     or $state[$p:lk] = 12446) then                         (: 'preceding-sibling' '::' :)
      let $state := p:parse-ReverseStep($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-ForwardStep($input, $state)
      return $state
  let $state := p:lookahead1W(151, $input, $state)          (: S^WS | EOF | '!' | '!=' | ('(' ':') | ')' | '*' | '+' |
                                                               ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' |
                                                               '>' | '>=' | '>>' | '[' | ']' | 'and' | 'ascending' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                                               'default' | 'descending' | 'div' | 'else' | 'empty' |
                                                               'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                                               'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' |
                                                               'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                                               'treat' | 'union' | 'where' | '|' | '||' | '}' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-PredicateList($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "AxisStep", $count, $begin, $end)
};

(:~
 : Parse Predicate.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Predicate($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(66, $input, $state)                 (: '[' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-Expr($input, $state)
  let $state := p:shift(67, $input, $state)                 (: ']' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "Predicate", $count, $begin, $end)
};

(:~
 : Parse FunctionBody.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-FunctionBody($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-EnclosedExpr($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "FunctionBody", $count, $begin, $end)
};

(:~
 : Parse Param.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Param($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(30, $input, $state)                 (: '$' :)
  let $state := p:lookahead1W(168, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-EQName($input, $state)
  let $state := p:lookahead1W(104, $input, $state)          (: S^WS | ('(' ':') | ')' | ',' | 'as' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 73) then                       (: 'as' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-TypeDeclaration($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "Param", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production ParamList (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ParamList-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(69, $input, $state)         (: S^WS | ('(' ':') | ')' | ',' :)
    return
      if ($state[$p:l1] != 39) then                         (: ',' :)
        $state
      else
        let $state := p:shift(39, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(21, $input, $state)     (: S^WS | '$' | ('(' ':') :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-Param($input, $state)
        return p:parse-ParamList-1($input, $state)
};

(:~
 : Parse ParamList.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ParamList($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-Param($input, $state)
  let $state := p:parse-ParamList-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "ParamList", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production InlineFunctionExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-InlineFunctionExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(67, $input, $state)         (: S^WS | '%' | ('(' ':') | 'function' :)
    return
      if ($state[$p:l1] != 31) then                         (: '%' :)
        $state
      else
        let $state := p:whitespace($input, $state)
        let $state := p:parse-Annotation($input, $state)
        return p:parse-InlineFunctionExpr-1($input, $state)
};

(:~
 : Parse InlineFunctionExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-InlineFunctionExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-InlineFunctionExpr-1($input, $state)
  let $state := p:shift(115, $input, $state)                (: 'function' :)
  let $state := p:lookahead1W(22, $input, $state)           (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(33, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(64, $input, $state)           (: S^WS | '$' | ('(' ':') | ')' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 30) then                       (: '$' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-ParamList($input, $state)
      return $state
    else
      $state
  let $state := p:shift(36, $input, $state)                 (: ')' :)
  let $state := p:lookahead1W(78, $input, $state)           (: S^WS | ('(' ':') | 'as' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 73) then                       (: 'as' :)
      let $state := p:shift(73, $input, $state)             (: 'as' :)
      let $state := p:lookahead1W(173, $input, $state)      (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-SequenceType($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(58, $input, $state)           (: S^WS | ('(' ':') | '{' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-FunctionBody($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "InlineFunctionExpr", $count, $begin, $end)
};

(:~
 : Parse NamedFunctionRef.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-NamedFunctionRef($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-EQName($input, $state)
  let $state := p:lookahead1W(20, $input, $state)           (: S^WS | '#' | ('(' ':') :)
  let $state := p:shift(28, $input, $state)                 (: '#' :)
  let $state := p:lookahead1W(16, $input, $state)           (: IntegerLiteral | S^WS | ('(' ':') :)
  let $state := p:shift(1, $input, $state)                  (: IntegerLiteral :)
  let $end := $state[$p:e0]
  return p:reduce($state, "NamedFunctionRef", $count, $begin, $end)
};

(:~
 : Parse FunctionItemExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-FunctionItemExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 115) then                           (: 'function' :)
      let $state := p:lookahead2W(62, $input, $state)       (: S^WS | '#' | '(' | ('(' ':') :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 31                                  (: '%' :)
     or $state[$p:lk] = 8563) then                          (: 'function' '(' :)
      let $state := p:parse-InlineFunctionExpr($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-NamedFunctionRef($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "FunctionItemExpr", $count, $begin, $end)
};

(:~
 : Parse CompPIConstructor.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CompPIConstructor($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(161, $input, $state)                (: 'processing-instruction' :)
  let $state := p:lookahead1W(136, $input, $state)          (: NCName^Token | S^WS | ('(' ':') | 'and' | 'ascending' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                                               'default' | 'descending' | 'div' | 'else' | 'empty' |
                                                               'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                                               'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' |
                                                               'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                                               'treat' | 'union' | 'where' | '{' :)
  let $state :=
    if ($state[$p:l1] = 193) then                           (: '{' :)
      let $state := p:shift(193, $input, $state)            (: '{' :)
      let $state := p:lookahead1W(180, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-Expr($input, $state)
      let $state := p:shift(197, $input, $state)            (: '}' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:whitespace($input, $state)
      let $state := p:parse-NCName($input, $state)
      return $state
  let $state := p:lookahead1W(58, $input, $state)           (: S^WS | ('(' ':') | '{' :)
  let $state := p:shift(193, $input, $state)                (: '{' :)
  let $state := p:lookahead1W(185, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' | '}' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 197) then                     (: '}' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-Expr($input, $state)
      return $state
    else
      $state
  let $state := p:shift(197, $input, $state)                (: '}' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "CompPIConstructor", $count, $begin, $end)
};

(:~
 : Parse CompCommentConstructor.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CompCommentConstructor($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(86, $input, $state)                 (: 'comment' :)
  let $state := p:lookahead1W(58, $input, $state)           (: S^WS | ('(' ':') | '{' :)
  let $state := p:shift(193, $input, $state)                (: '{' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-Expr($input, $state)
  let $state := p:shift(197, $input, $state)                (: '}' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "CompCommentConstructor", $count, $begin, $end)
};

(:~
 : Parse CompTextConstructor.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CompTextConstructor($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(175, $input, $state)                (: 'text' :)
  let $state := p:lookahead1W(58, $input, $state)           (: S^WS | ('(' ':') | '{' :)
  let $state := p:shift(193, $input, $state)                (: '{' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-Expr($input, $state)
  let $state := p:shift(197, $input, $state)                (: '}' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "CompTextConstructor", $count, $begin, $end)
};

(:~
 : Parse URIExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-URIExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-Expr($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "URIExpr", $count, $begin, $end)
};

(:~
 : Parse PrefixExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-PrefixExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-Expr($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "PrefixExpr", $count, $begin, $end)
};

(:~
 : Parse Prefix.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Prefix($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-NCName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "Prefix", $count, $begin, $end)
};

(:~
 : Parse CompNamespaceConstructor.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CompNamespaceConstructor($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(139, $input, $state)                (: 'namespace' :)
  let $state := p:lookahead1W(136, $input, $state)          (: NCName^Token | S^WS | ('(' ':') | 'and' | 'ascending' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                                               'default' | 'descending' | 'div' | 'else' | 'empty' |
                                                               'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                                               'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' |
                                                               'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                                               'treat' | 'union' | 'where' | '{' :)
  let $state :=
    if ($state[$p:l1] = 193) then                           (: '{' :)
      let $state := p:shift(193, $input, $state)            (: '{' :)
      let $state := p:lookahead1W(180, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-PrefixExpr($input, $state)
      let $state := p:shift(197, $input, $state)            (: '}' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:whitespace($input, $state)
      let $state := p:parse-Prefix($input, $state)
      return $state
  let $state := p:lookahead1W(58, $input, $state)           (: S^WS | ('(' ':') | '{' :)
  let $state := p:shift(193, $input, $state)                (: '{' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-URIExpr($input, $state)
  let $state := p:shift(197, $input, $state)                (: '}' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "CompNamespaceConstructor", $count, $begin, $end)
};

(:~
 : Parse CompAttrConstructor.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CompAttrConstructor($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(76, $input, $state)                 (: 'attribute' :)
  let $state := p:lookahead1W(171, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' | '{' :)
  let $state :=
    if ($state[$p:l1] = 193) then                           (: '{' :)
      let $state := p:shift(193, $input, $state)            (: '{' :)
      let $state := p:lookahead1W(180, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-Expr($input, $state)
      let $state := p:shift(197, $input, $state)            (: '}' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:whitespace($input, $state)
      let $state := p:parse-EQName($input, $state)
      return $state
  let $state := p:lookahead1W(58, $input, $state)           (: S^WS | ('(' ':') | '{' :)
  let $state := p:shift(193, $input, $state)                (: '{' :)
  let $state := p:lookahead1W(185, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' | '}' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 197) then                     (: '}' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-Expr($input, $state)
      return $state
    else
      $state
  let $state := p:shift(197, $input, $state)                (: '}' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "CompAttrConstructor", $count, $begin, $end)
};

(:~
 : Parse ContentExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ContentExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-Expr($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "ContentExpr", $count, $begin, $end)
};

(:~
 : Parse CompElemConstructor.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CompElemConstructor($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(102, $input, $state)                (: 'element' :)
  let $state := p:lookahead1W(171, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' | '{' :)
  let $state :=
    if ($state[$p:l1] = 193) then                           (: '{' :)
      let $state := p:shift(193, $input, $state)            (: '{' :)
      let $state := p:lookahead1W(180, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-Expr($input, $state)
      let $state := p:shift(197, $input, $state)            (: '}' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:whitespace($input, $state)
      let $state := p:parse-EQName($input, $state)
      return $state
  let $state := p:lookahead1W(58, $input, $state)           (: S^WS | ('(' ':') | '{' :)
  let $state := p:shift(193, $input, $state)                (: '{' :)
  let $state := p:lookahead1W(185, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' | '}' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 197) then                     (: '}' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-ContentExpr($input, $state)
      return $state
    else
      $state
  let $state := p:shift(197, $input, $state)                (: '}' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "CompElemConstructor", $count, $begin, $end)
};

(:~
 : Parse CompDocConstructor.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CompDocConstructor($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(100, $input, $state)                (: 'document' :)
  let $state := p:lookahead1W(58, $input, $state)           (: S^WS | ('(' ':') | '{' :)
  let $state := p:shift(193, $input, $state)                (: '{' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-Expr($input, $state)
  let $state := p:shift(197, $input, $state)                (: '}' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "CompDocConstructor", $count, $begin, $end)
};

(:~
 : Parse ComputedConstructor.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ComputedConstructor($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 100) then                           (: 'document' :)
      let $state := p:parse-CompDocConstructor($input, $state)
      return $state
    else if ($state[$p:l1] = 102) then                      (: 'element' :)
      let $state := p:parse-CompElemConstructor($input, $state)
      return $state
    else if ($state[$p:l1] = 76) then                       (: 'attribute' :)
      let $state := p:parse-CompAttrConstructor($input, $state)
      return $state
    else if ($state[$p:l1] = 139) then                      (: 'namespace' :)
      let $state := p:parse-CompNamespaceConstructor($input, $state)
      return $state
    else if ($state[$p:l1] = 175) then                      (: 'text' :)
      let $state := p:parse-CompTextConstructor($input, $state)
      return $state
    else if ($state[$p:l1] = 86) then                       (: 'comment' :)
      let $state := p:parse-CompCommentConstructor($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-CompPIConstructor($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ComputedConstructor", $count, $begin, $end)
};

(:~
 : Parse DirPIConstructor.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-DirPIConstructor($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(57, $input, $state)                 (: '<?' :)
  let $state := p:lookahead1(0, $input, $state)             (: PITarget :)
  let $state := p:shift(12, $input, $state)                 (: PITarget :)
  let $state := p:lookahead1(14, $input, $state)            (: S | '?>' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 16) then                       (: S :)
      let $state := p:shift(16, $input, $state)             (: S :)
      let $state := p:lookahead1(3, $input, $state)         (: DirPIContents :)
      let $state := p:shift(22, $input, $state)             (: DirPIContents :)
      return $state
    else
      $state
  let $state := p:lookahead1(9, $input, $state)             (: '?>' :)
  let $state := p:shift(63, $input, $state)                 (: '?>' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "DirPIConstructor", $count, $begin, $end)
};

(:~
 : Parse DirCommentConstructor.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-DirCommentConstructor($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(52, $input, $state)                 (: '<!--' :)
  let $state := p:lookahead1(2, $input, $state)             (: DirCommentContents :)
  let $state := p:shift(21, $input, $state)                 (: DirCommentContents :)
  let $state := p:lookahead1(6, $input, $state)             (: '-->' :)
  let $state := p:shift(41, $input, $state)                 (: '-->' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "DirCommentConstructor", $count, $begin, $end)
};

(:~
 : Parse CDataSection.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CDataSection($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(53, $input, $state)                 (: '<![CDATA[' :)
  let $state := p:lookahead1(4, $input, $state)             (: CDataSectionContents :)
  let $state := p:shift(23, $input, $state)                 (: CDataSectionContents :)
  let $state := p:lookahead1(10, $input, $state)            (: ']]>' :)
  let $state := p:shift(68, $input, $state)                 (: ']]>' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "CDataSection", $count, $begin, $end)
};

(:~
 : Parse DirElemContent.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-DirElemContent($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 51                                  (: '<' :)
     or $state[$p:l1] = 52                                  (: '<!--' :)
     or $state[$p:l1] = 57) then                            (: '<?' :)
      let $state := p:parse-DirectConstructor($input, $state)
      return $state
    else if ($state[$p:l1] = 53) then                       (: '<![CDATA[' :)
      let $state := p:parse-CDataSection($input, $state)
      return $state
    else if ($state[$p:l1] = 9) then                        (: ElementContentChar :)
      let $state := p:shift(9, $input, $state)              (: ElementContentChar :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-CommonContent($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "DirElemContent", $count, $begin, $end)
};

(:~
 : Parse AposAttrValueContent.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AposAttrValueContent($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 11) then                            (: AposAttrContentChar :)
      let $state := p:shift(11, $input, $state)             (: AposAttrContentChar :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-CommonContent($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "AposAttrValueContent", $count, $begin, $end)
};

(:~
 : Parse EnclosedExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-EnclosedExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(193, $input, $state)                (: '{' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-Expr($input, $state)
  let $state := p:shift(197, $input, $state)                (: '}' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "EnclosedExpr", $count, $begin, $end)
};

(:~
 : Parse CommonContent.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CommonContent($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 6) then                             (: PredefinedEntityRef :)
      let $state := p:shift(6, $input, $state)              (: PredefinedEntityRef :)
      return $state
    else if ($state[$p:l1] = 13) then                       (: CharRef :)
      let $state := p:shift(13, $input, $state)             (: CharRef :)
      return $state
    else if ($state[$p:l1] = 194) then                      (: '{{' :)
      let $state := p:shift(194, $input, $state)            (: '{{' :)
      return $state
    else if ($state[$p:l1] = 198) then                      (: '}}' :)
      let $state := p:shift(198, $input, $state)            (: '}}' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-EnclosedExpr($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "CommonContent", $count, $begin, $end)
};

(:~
 : Parse QuotAttrValueContent.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-QuotAttrValueContent($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 10) then                            (: QuotAttrContentChar :)
      let $state := p:shift(10, $input, $state)             (: QuotAttrContentChar :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-CommonContent($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "QuotAttrValueContent", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production DirAttributeValue (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-DirAttributeValue-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(121, $input, $state)         (: PredefinedEntityRef | EscapeQuot | QuotAttrContentChar |
                                                               CharRef | '"' | '{' | '{{' | '}}' :)
    return
      if ($state[$p:l1] = 27) then                          (: '"' :)
        $state
      else
        let $state :=
          if ($state[$p:l1] = 7) then                       (: EscapeQuot :)
            let $state := p:shift(7, $input, $state)        (: EscapeQuot :)
            return $state
          else if ($state[$p:error]) then
            $state
          else
            let $state := p:parse-QuotAttrValueContent($input, $state)
            return $state
        return p:parse-DirAttributeValue-1($input, $state)
};

(:~
 : Parse the 2nd loop of production DirAttributeValue (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-DirAttributeValue-2($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(122, $input, $state)         (: PredefinedEntityRef | EscapeApos | AposAttrContentChar |
                                                               CharRef | "'" | '{' | '{{' | '}}' :)
    return
      if ($state[$p:l1] = 32) then                          (: "'" :)
        $state
      else
        let $state :=
          if ($state[$p:l1] = 8) then                       (: EscapeApos :)
            let $state := p:shift(8, $input, $state)        (: EscapeApos :)
            return $state
          else if ($state[$p:error]) then
            $state
          else
            let $state := p:parse-AposAttrValueContent($input, $state)
            return $state
        return p:parse-DirAttributeValue-2($input, $state)
};

(:~
 : Parse DirAttributeValue.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-DirAttributeValue($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:lookahead1(15, $input, $state)            (: '"' | "'" :)
  let $state :=
    if ($state[$p:l1] = 27) then                            (: '"' :)
      let $state := p:shift(27, $input, $state)             (: '"' :)
      let $state := p:parse-DirAttributeValue-1($input, $state)
      let $state := p:shift(27, $input, $state)             (: '"' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(32, $input, $state)             (: "'" :)
      let $state := p:parse-DirAttributeValue-2($input, $state)
      let $state := p:shift(32, $input, $state)             (: "'" :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "DirAttributeValue", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production DirAttributeList (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-DirAttributeList-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(19, $input, $state)          (: S | '/>' | '>' :)
    return
      if ($state[$p:l1] != 16) then                         (: S :)
        $state
      else
        let $state := p:shift(16, $input, $state)           (: S :)
        let $state := p:lookahead1(169, $input, $state)     (: QName^Token | S | '/>' | '>' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'ascending' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'count' | 'declare' | 'default' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                                               'item' | 'le' | 'let' | 'lt' | 'mod' | 'module' |
                                                               'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' |
                                                               'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] != 16                      (: S :)
               and $state[$p:l1] != 46                      (: '/>' :)
               and $state[$p:l1] != 59) then                (: '>' :)
            let $state := p:parse-QName($input, $state)
            let $state := p:lookahead1(12, $input, $state)  (: S | '=' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] = 16) then             (: S :)
                let $state := p:shift(16, $input, $state)   (: S :)
                return $state
              else
                $state
            let $state := p:lookahead1(7, $input, $state)   (: '=' :)
            let $state := p:shift(58, $input, $state)       (: '=' :)
            let $state := p:lookahead1(18, $input, $state)  (: S | '"' | "'" :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] = 16) then             (: S :)
                let $state := p:shift(16, $input, $state)   (: S :)
                return $state
              else
                $state
            let $state := p:parse-DirAttributeValue($input, $state)
            return $state
          else
            $state
        return p:parse-DirAttributeList-1($input, $state)
};

(:~
 : Parse DirAttributeList.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-DirAttributeList($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-DirAttributeList-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "DirAttributeList", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production DirElemConstructor (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-DirElemConstructor-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(127, $input, $state)         (: PredefinedEntityRef | ElementContentChar | CharRef |
                                                               '<' | '<!--' | '<![CDATA[' | '</' | '<?' | '{' | '{{' |
                                                               '}}' :)
    return
      if ($state[$p:l1] = 54) then                          (: '</' :)
        $state
      else
        let $state := p:parse-DirElemContent($input, $state)
        return p:parse-DirElemConstructor-1($input, $state)
};

(:~
 : Parse DirElemConstructor.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-DirElemConstructor($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(51, $input, $state)                 (: '<' :)
  let $state := p:parse-QName($input, $state)
  let $state := p:parse-DirAttributeList($input, $state)
  let $state :=
    if ($state[$p:l1] = 46) then                            (: '/>' :)
      let $state := p:shift(46, $input, $state)             (: '/>' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(59, $input, $state)             (: '>' :)
      let $state := p:parse-DirElemConstructor-1($input, $state)
      let $state := p:shift(54, $input, $state)             (: '</' :)
      let $state := p:parse-QName($input, $state)
      let $state := p:lookahead1(13, $input, $state)        (: S | '>' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 16) then                   (: S :)
          let $state := p:shift(16, $input, $state)         (: S :)
          return $state
        else
          $state
      let $state := p:lookahead1(8, $input, $state)         (: '>' :)
      let $state := p:shift(59, $input, $state)             (: '>' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "DirElemConstructor", $count, $begin, $end)
};

(:~
 : Parse DirectConstructor.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-DirectConstructor($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 51) then                            (: '<' :)
      let $state := p:parse-DirElemConstructor($input, $state)
      return $state
    else if ($state[$p:l1] = 52) then                       (: '<!--' :)
      let $state := p:parse-DirCommentConstructor($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-DirPIConstructor($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "DirectConstructor", $count, $begin, $end)
};

(:~
 : Parse Constructor.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Constructor($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 51                                  (: '<' :)
     or $state[$p:l1] = 52                                  (: '<!--' :)
     or $state[$p:l1] = 57) then                            (: '<?' :)
      let $state := p:parse-DirectConstructor($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-ComputedConstructor($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "Constructor", $count, $begin, $end)
};

(:~
 : Parse UnorderedExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-UnorderedExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(184, $input, $state)                (: 'unordered' :)
  let $state := p:lookahead1W(58, $input, $state)           (: S^WS | ('(' ':') | '{' :)
  let $state := p:shift(193, $input, $state)                (: '{' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-Expr($input, $state)
  let $state := p:shift(197, $input, $state)                (: '}' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "UnorderedExpr", $count, $begin, $end)
};

(:~
 : Parse OrderedExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-OrderedExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(151, $input, $state)                (: 'ordered' :)
  let $state := p:lookahead1W(58, $input, $state)           (: S^WS | ('(' ':') | '{' :)
  let $state := p:shift(193, $input, $state)                (: '{' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-Expr($input, $state)
  let $state := p:shift(197, $input, $state)                (: '}' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "OrderedExpr", $count, $begin, $end)
};

(:~
 : Parse ArgumentPlaceholder.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ArgumentPlaceholder($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(62, $input, $state)                 (: '?' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "ArgumentPlaceholder", $count, $begin, $end)
};

(:~
 : Parse Argument.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Argument($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 62) then                            (: '?' :)
      let $state := p:parse-ArgumentPlaceholder($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-ExprSingle($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "Argument", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production ArgumentList (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ArgumentList-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(69, $input, $state)         (: S^WS | ('(' ':') | ')' | ',' :)
    return
      if ($state[$p:l1] != 39) then                         (: ',' :)
        $state
      else
        let $state := p:shift(39, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(183, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-Argument($input, $state)
        return p:parse-ArgumentList-1($input, $state)
};

(:~
 : Parse ArgumentList.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ArgumentList($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(33, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(186, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | ')' |
                                                               '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' |
                                                               '<?' | '?' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                               'and' | 'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 36) then                      (: ')' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-Argument($input, $state)
      let $state := p:parse-ArgumentList-1($input, $state)
      return $state
    else
      $state
  let $state := p:shift(36, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "ArgumentList", $count, $begin, $end)
};

(:~
 : Parse FunctionCall.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-FunctionCall($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-FunctionName($input, $state)
  let $state := p:lookahead1W(22, $input, $state)           (: S^WS | '(' | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ArgumentList($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "FunctionCall", $count, $begin, $end)
};

(:~
 : Parse ContextItemExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ContextItemExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(42, $input, $state)                 (: '.' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "ContextItemExpr", $count, $begin, $end)
};

(:~
 : Parse ParenthesizedExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ParenthesizedExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(33, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(182, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | ')' |
                                                               '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' |
                                                               '<?' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 36) then                      (: ')' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-Expr($input, $state)
      return $state
    else
      $state
  let $state := p:shift(36, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "ParenthesizedExpr", $count, $begin, $end)
};

(:~
 : Parse VarRef.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-VarRef($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(30, $input, $state)                 (: '$' :)
  let $state := p:lookahead1W(168, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-VarName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "VarRef", $count, $begin, $end)
};

(:~
 : Parse PrimaryExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-PrimaryExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 139) then                           (: 'namespace' :)
      let $state := p:lookahead2W(140, $input, $state)      (: NCName^Token | S^WS | '#' | '(' | ('(' ':') | 'and' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '{' :)
      return $state
    else if ($state[$p:l1] = 161) then                      (: 'processing-instruction' :)
      let $state := p:lookahead2W(138, $input, $state)      (: NCName^Token | S^WS | '#' | ('(' ':') | 'and' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '{' :)
      return $state
    else if ($state[$p:l1] = 76                             (: 'attribute' :)
          or $state[$p:l1] = 102) then                      (: 'element' :)
      let $state := p:lookahead2W(172, $input, $state)      (: URIQualifiedName | QName^Token | S^WS | '#' | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' | '{' :)
      return $state
    else if ($state[$p:l1] = 86                             (: 'comment' :)
          or $state[$p:l1] = 175) then                      (: 'text' :)
      let $state := p:lookahead2W(63, $input, $state)       (: S^WS | '#' | ('(' ':') | '{' :)
      return $state
    else if ($state[$p:l1] = 100                            (: 'document' :)
          or $state[$p:l1] = 151                            (: 'ordered' :)
          or $state[$p:l1] = 184) then                      (: 'unordered' :)
      let $state := p:lookahead2W(100, $input, $state)      (: S^WS | '#' | '(' | ('(' ':') | '{' :)
      return $state
    else if ($state[$p:l1] = 15                             (: QName^Token :)
          or $state[$p:l1] = 70                             (: 'ancestor' :)
          or $state[$p:l1] = 71                             (: 'ancestor-or-self' :)
          or $state[$p:l1] = 72                             (: 'and' :)
          or $state[$p:l1] = 74                             (: 'ascending' :)
          or $state[$p:l1] = 80                             (: 'case' :)
          or $state[$p:l1] = 81                             (: 'cast' :)
          or $state[$p:l1] = 82                             (: 'castable' :)
          or $state[$p:l1] = 84                             (: 'child' :)
          or $state[$p:l1] = 85                             (: 'collation' :)
          or $state[$p:l1] = 90                             (: 'count' :)
          or $state[$p:l1] = 93                             (: 'declare' :)
          or $state[$p:l1] = 94                             (: 'default' :)
          or $state[$p:l1] = 95                             (: 'descendant' :)
          or $state[$p:l1] = 96                             (: 'descendant-or-self' :)
          or $state[$p:l1] = 97                             (: 'descending' :)
          or $state[$p:l1] = 99                             (: 'div' :)
          or $state[$p:l1] = 103                            (: 'else' :)
          or $state[$p:l1] = 104                            (: 'empty' :)
          or $state[$p:l1] = 107                            (: 'end' :)
          or $state[$p:l1] = 108                            (: 'eq' :)
          or $state[$p:l1] = 109                            (: 'every' :)
          or $state[$p:l1] = 110                            (: 'except' :)
          or $state[$p:l1] = 112                            (: 'following' :)
          or $state[$p:l1] = 113                            (: 'following-sibling' :)
          or $state[$p:l1] = 114                            (: 'for' :)
          or $state[$p:l1] = 116                            (: 'ge' :)
          or $state[$p:l1] = 118                            (: 'group' :)
          or $state[$p:l1] = 120                            (: 'gt' :)
          or $state[$p:l1] = 121                            (: 'idiv' :)
          or $state[$p:l1] = 123                            (: 'import' :)
          or $state[$p:l1] = 127                            (: 'instance' :)
          or $state[$p:l1] = 128                            (: 'intersect' :)
          or $state[$p:l1] = 129                            (: 'is' :)
          or $state[$p:l1] = 132                            (: 'le' :)
          or $state[$p:l1] = 134                            (: 'let' :)
          or $state[$p:l1] = 135                            (: 'lt' :)
          or $state[$p:l1] = 137                            (: 'mod' :)
          or $state[$p:l1] = 138                            (: 'module' :)
          or $state[$p:l1] = 141                            (: 'ne' :)
          or $state[$p:l1] = 147                            (: 'only' :)
          or $state[$p:l1] = 149                            (: 'or' :)
          or $state[$p:l1] = 150                            (: 'order' :)
          or $state[$p:l1] = 153                            (: 'parent' :)
          or $state[$p:l1] = 157                            (: 'preceding' :)
          or $state[$p:l1] = 158                            (: 'preceding-sibling' :)
          or $state[$p:l1] = 162                            (: 'return' :)
          or $state[$p:l1] = 163                            (: 'satisfies' :)
          or $state[$p:l1] = 167                            (: 'self' :)
          or $state[$p:l1] = 169                            (: 'some' :)
          or $state[$p:l1] = 170                            (: 'stable' :)
          or $state[$p:l1] = 171                            (: 'start' :)
          or $state[$p:l1] = 177                            (: 'to' :)
          or $state[$p:l1] = 178                            (: 'treat' :)
          or $state[$p:l1] = 179                            (: 'try' :)
          or $state[$p:l1] = 183                            (: 'union' :)
          or $state[$p:l1] = 185                            (: 'validate' :)
          or $state[$p:l1] = 189                            (: 'where' :)
          or $state[$p:l1] = 191) then                      (: 'xquery' :)
      let $state := p:lookahead2W(62, $input, $state)       (: S^WS | '#' | '(' | ('(' ':') :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 1                                   (: IntegerLiteral :)
     or $state[$p:lk] = 2                                   (: DecimalLiteral :)
     or $state[$p:lk] = 3                                   (: DoubleLiteral :)
     or $state[$p:lk] = 4) then                             (: StringLiteral :)
      let $state := p:parse-Literal($input, $state)
      return $state
    else if ($state[$p:lk] = 30) then                       (: '$' :)
      let $state := p:parse-VarRef($input, $state)
      return $state
    else if ($state[$p:lk] = 33) then                       (: '(' :)
      let $state := p:parse-ParenthesizedExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 42) then                       (: '.' :)
      let $state := p:parse-ContextItemExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 8463                           (: QName^Token '(' :)
          or $state[$p:lk] = 8518                           (: 'ancestor' '(' :)
          or $state[$p:lk] = 8519                           (: 'ancestor-or-self' '(' :)
          or $state[$p:lk] = 8520                           (: 'and' '(' :)
          or $state[$p:lk] = 8522                           (: 'ascending' '(' :)
          or $state[$p:lk] = 8528                           (: 'case' '(' :)
          or $state[$p:lk] = 8529                           (: 'cast' '(' :)
          or $state[$p:lk] = 8530                           (: 'castable' '(' :)
          or $state[$p:lk] = 8532                           (: 'child' '(' :)
          or $state[$p:lk] = 8533                           (: 'collation' '(' :)
          or $state[$p:lk] = 8538                           (: 'count' '(' :)
          or $state[$p:lk] = 8541                           (: 'declare' '(' :)
          or $state[$p:lk] = 8542                           (: 'default' '(' :)
          or $state[$p:lk] = 8543                           (: 'descendant' '(' :)
          or $state[$p:lk] = 8544                           (: 'descendant-or-self' '(' :)
          or $state[$p:lk] = 8545                           (: 'descending' '(' :)
          or $state[$p:lk] = 8547                           (: 'div' '(' :)
          or $state[$p:lk] = 8548                           (: 'document' '(' :)
          or $state[$p:lk] = 8551                           (: 'else' '(' :)
          or $state[$p:lk] = 8552                           (: 'empty' '(' :)
          or $state[$p:lk] = 8555                           (: 'end' '(' :)
          or $state[$p:lk] = 8556                           (: 'eq' '(' :)
          or $state[$p:lk] = 8557                           (: 'every' '(' :)
          or $state[$p:lk] = 8558                           (: 'except' '(' :)
          or $state[$p:lk] = 8560                           (: 'following' '(' :)
          or $state[$p:lk] = 8561                           (: 'following-sibling' '(' :)
          or $state[$p:lk] = 8562                           (: 'for' '(' :)
          or $state[$p:lk] = 8564                           (: 'ge' '(' :)
          or $state[$p:lk] = 8566                           (: 'group' '(' :)
          or $state[$p:lk] = 8568                           (: 'gt' '(' :)
          or $state[$p:lk] = 8569                           (: 'idiv' '(' :)
          or $state[$p:lk] = 8571                           (: 'import' '(' :)
          or $state[$p:lk] = 8575                           (: 'instance' '(' :)
          or $state[$p:lk] = 8576                           (: 'intersect' '(' :)
          or $state[$p:lk] = 8577                           (: 'is' '(' :)
          or $state[$p:lk] = 8580                           (: 'le' '(' :)
          or $state[$p:lk] = 8582                           (: 'let' '(' :)
          or $state[$p:lk] = 8583                           (: 'lt' '(' :)
          or $state[$p:lk] = 8585                           (: 'mod' '(' :)
          or $state[$p:lk] = 8586                           (: 'module' '(' :)
          or $state[$p:lk] = 8587                           (: 'namespace' '(' :)
          or $state[$p:lk] = 8589                           (: 'ne' '(' :)
          or $state[$p:lk] = 8595                           (: 'only' '(' :)
          or $state[$p:lk] = 8597                           (: 'or' '(' :)
          or $state[$p:lk] = 8598                           (: 'order' '(' :)
          or $state[$p:lk] = 8599                           (: 'ordered' '(' :)
          or $state[$p:lk] = 8601                           (: 'parent' '(' :)
          or $state[$p:lk] = 8605                           (: 'preceding' '(' :)
          or $state[$p:lk] = 8606                           (: 'preceding-sibling' '(' :)
          or $state[$p:lk] = 8610                           (: 'return' '(' :)
          or $state[$p:lk] = 8611                           (: 'satisfies' '(' :)
          or $state[$p:lk] = 8615                           (: 'self' '(' :)
          or $state[$p:lk] = 8617                           (: 'some' '(' :)
          or $state[$p:lk] = 8618                           (: 'stable' '(' :)
          or $state[$p:lk] = 8619                           (: 'start' '(' :)
          or $state[$p:lk] = 8625                           (: 'to' '(' :)
          or $state[$p:lk] = 8626                           (: 'treat' '(' :)
          or $state[$p:lk] = 8627                           (: 'try' '(' :)
          or $state[$p:lk] = 8631                           (: 'union' '(' :)
          or $state[$p:lk] = 8632                           (: 'unordered' '(' :)
          or $state[$p:lk] = 8633                           (: 'validate' '(' :)
          or $state[$p:lk] = 8637                           (: 'where' '(' :)
          or $state[$p:lk] = 8639) then                     (: 'xquery' '(' :)
      let $state := p:parse-FunctionCall($input, $state)
      return $state
    else if ($state[$p:lk] = 49559) then                    (: 'ordered' '{' :)
      let $state := p:parse-OrderedExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 49592) then                    (: 'unordered' '{' :)
      let $state := p:parse-UnorderedExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 5                              (: URIQualifiedName :)
          or $state[$p:lk] = 31                             (: '%' :)
          or $state[$p:lk] = 101                            (: 'document-node' :)
          or $state[$p:lk] = 105                            (: 'empty-sequence' :)
          or $state[$p:lk] = 115                            (: 'function' :)
          or $state[$p:lk] = 122                            (: 'if' :)
          or $state[$p:lk] = 130                            (: 'item' :)
          or $state[$p:lk] = 140                            (: 'namespace-node' :)
          or $state[$p:lk] = 145                            (: 'node' :)
          or $state[$p:lk] = 165                            (: 'schema-attribute' :)
          or $state[$p:lk] = 166                            (: 'schema-element' :)
          or $state[$p:lk] = 174                            (: 'switch' :)
          or $state[$p:lk] = 182                            (: 'typeswitch' :)
          or $state[$p:lk] = 7183                           (: QName^Token '#' :)
          or $state[$p:lk] = 7238                           (: 'ancestor' '#' :)
          or $state[$p:lk] = 7239                           (: 'ancestor-or-self' '#' :)
          or $state[$p:lk] = 7240                           (: 'and' '#' :)
          or $state[$p:lk] = 7242                           (: 'ascending' '#' :)
          or $state[$p:lk] = 7244                           (: 'attribute' '#' :)
          or $state[$p:lk] = 7248                           (: 'case' '#' :)
          or $state[$p:lk] = 7249                           (: 'cast' '#' :)
          or $state[$p:lk] = 7250                           (: 'castable' '#' :)
          or $state[$p:lk] = 7252                           (: 'child' '#' :)
          or $state[$p:lk] = 7253                           (: 'collation' '#' :)
          or $state[$p:lk] = 7254                           (: 'comment' '#' :)
          or $state[$p:lk] = 7258                           (: 'count' '#' :)
          or $state[$p:lk] = 7261                           (: 'declare' '#' :)
          or $state[$p:lk] = 7262                           (: 'default' '#' :)
          or $state[$p:lk] = 7263                           (: 'descendant' '#' :)
          or $state[$p:lk] = 7264                           (: 'descendant-or-self' '#' :)
          or $state[$p:lk] = 7265                           (: 'descending' '#' :)
          or $state[$p:lk] = 7267                           (: 'div' '#' :)
          or $state[$p:lk] = 7268                           (: 'document' '#' :)
          or $state[$p:lk] = 7270                           (: 'element' '#' :)
          or $state[$p:lk] = 7271                           (: 'else' '#' :)
          or $state[$p:lk] = 7272                           (: 'empty' '#' :)
          or $state[$p:lk] = 7275                           (: 'end' '#' :)
          or $state[$p:lk] = 7276                           (: 'eq' '#' :)
          or $state[$p:lk] = 7277                           (: 'every' '#' :)
          or $state[$p:lk] = 7278                           (: 'except' '#' :)
          or $state[$p:lk] = 7280                           (: 'following' '#' :)
          or $state[$p:lk] = 7281                           (: 'following-sibling' '#' :)
          or $state[$p:lk] = 7282                           (: 'for' '#' :)
          or $state[$p:lk] = 7284                           (: 'ge' '#' :)
          or $state[$p:lk] = 7286                           (: 'group' '#' :)
          or $state[$p:lk] = 7288                           (: 'gt' '#' :)
          or $state[$p:lk] = 7289                           (: 'idiv' '#' :)
          or $state[$p:lk] = 7291                           (: 'import' '#' :)
          or $state[$p:lk] = 7295                           (: 'instance' '#' :)
          or $state[$p:lk] = 7296                           (: 'intersect' '#' :)
          or $state[$p:lk] = 7297                           (: 'is' '#' :)
          or $state[$p:lk] = 7300                           (: 'le' '#' :)
          or $state[$p:lk] = 7302                           (: 'let' '#' :)
          or $state[$p:lk] = 7303                           (: 'lt' '#' :)
          or $state[$p:lk] = 7305                           (: 'mod' '#' :)
          or $state[$p:lk] = 7306                           (: 'module' '#' :)
          or $state[$p:lk] = 7307                           (: 'namespace' '#' :)
          or $state[$p:lk] = 7309                           (: 'ne' '#' :)
          or $state[$p:lk] = 7315                           (: 'only' '#' :)
          or $state[$p:lk] = 7317                           (: 'or' '#' :)
          or $state[$p:lk] = 7318                           (: 'order' '#' :)
          or $state[$p:lk] = 7319                           (: 'ordered' '#' :)
          or $state[$p:lk] = 7321                           (: 'parent' '#' :)
          or $state[$p:lk] = 7325                           (: 'preceding' '#' :)
          or $state[$p:lk] = 7326                           (: 'preceding-sibling' '#' :)
          or $state[$p:lk] = 7329                           (: 'processing-instruction' '#' :)
          or $state[$p:lk] = 7330                           (: 'return' '#' :)
          or $state[$p:lk] = 7331                           (: 'satisfies' '#' :)
          or $state[$p:lk] = 7335                           (: 'self' '#' :)
          or $state[$p:lk] = 7337                           (: 'some' '#' :)
          or $state[$p:lk] = 7338                           (: 'stable' '#' :)
          or $state[$p:lk] = 7339                           (: 'start' '#' :)
          or $state[$p:lk] = 7343                           (: 'text' '#' :)
          or $state[$p:lk] = 7345                           (: 'to' '#' :)
          or $state[$p:lk] = 7346                           (: 'treat' '#' :)
          or $state[$p:lk] = 7347                           (: 'try' '#' :)
          or $state[$p:lk] = 7351                           (: 'union' '#' :)
          or $state[$p:lk] = 7352                           (: 'unordered' '#' :)
          or $state[$p:lk] = 7353                           (: 'validate' '#' :)
          or $state[$p:lk] = 7357                           (: 'where' '#' :)
          or $state[$p:lk] = 7359) then                     (: 'xquery' '#' :)
      let $state := p:parse-FunctionItemExpr($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-Constructor($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "PrimaryExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production PostfixExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-PostfixExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(154, $input, $state)        (: S^WS | EOF | '!' | '!=' | '(' | ('(' ':') | ')' | '*' |
                                                               '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' |
                                                               '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '|' | '||' | '}' :)
    return
      if ($state[$p:l1] != 33                               (: '(' :)
      and $state[$p:l1] != 66) then                         (: '[' :)
        $state
      else
        let $state :=
          if ($state[$p:l1] = 66) then                      (: '[' :)
            let $state := p:whitespace($input, $state)
            let $state := p:parse-Predicate($input, $state)
            return $state
          else if ($state[$p:error]) then
            $state
          else
            let $state := p:whitespace($input, $state)
            let $state := p:parse-ArgumentList($input, $state)
            return $state
        return p:parse-PostfixExpr-1($input, $state)
};

(:~
 : Parse PostfixExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-PostfixExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-PrimaryExpr($input, $state)
  let $state := p:parse-PostfixExpr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "PostfixExpr", $count, $begin, $end)
};

(:~
 : Parse StepExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-StepExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 76) then                            (: 'attribute' :)
      let $state := p:lookahead2W(188, $input, $state)      (: URIQualifiedName | QName^Token | S^WS | EOF | '!' |
                                                               '!=' | '#' | '(' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' |
                                                               '>' | '>=' | '>>' | '[' | ']' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'ascending' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'count' | 'declare' | 'default' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                                               'item' | 'le' | 'let' | 'lt' | 'mod' | 'module' |
                                                               'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' |
                                                               'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' | '{' | '|' | '||' | '}' :)
      let $state :=
        if ($state[$p:lk] = 21836) then                     (: 'attribute' 'collation' :)
          let $state := p:lookahead3W(61, $input, $state)   (: StringLiteral | S^WS | ('(' ':') | '{' :)
          return $state
        else if ($state[$p:lk] = 24140) then                (: 'attribute' 'default' :)
          let $state := p:lookahead3W(101, $input, $state)  (: S^WS | '$' | ('(' ':') | 'return' | '{' :)
          return $state
        else if ($state[$p:lk] = 26700) then                (: 'attribute' 'empty' :)
          let $state := p:lookahead3W(110, $input, $state)  (: S^WS | ('(' ':') | 'greatest' | 'least' | '{' :)
          return $state
        else if ($state[$p:lk] = 29260) then                (: 'attribute' 'for' :)
          let $state := p:lookahead3W(113, $input, $state)  (: S^WS | '$' | ('(' ':') | 'sliding' | 'tumbling' | '{' :)
          return $state
        else if ($state[$p:lk] = 32588) then                (: 'attribute' 'instance' :)
          let $state := p:lookahead3W(91, $input, $state)   (: S^WS | ('(' ':') | 'of' | '{' :)
          return $state
        else if ($state[$p:lk] = 37708) then                (: 'attribute' 'only' :)
          let $state := p:lookahead3W(84, $input, $state)   (: S^WS | ('(' ':') | 'end' | '{' :)
          return $state
        else if ($state[$p:lk] = 43596) then                (: 'attribute' 'stable' :)
          let $state := p:lookahead3W(92, $input, $state)   (: S^WS | ('(' ':') | 'order' | '{' :)
          return $state
        else if ($state[$p:lk] = 19020                      (: 'attribute' 'ascending' :)
              or $state[$p:lk] = 24908) then                (: 'attribute' 'descending' :)
          let $state := p:lookahead3W(133, $input, $state)  (: S^WS | ('(' ':') | ',' | 'collation' | 'count' |
                                                               'empty' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                                               'stable' | 'where' | '{' :)
          return $state
        else if ($state[$p:lk] = 23116                      (: 'attribute' 'count' :)
              or $state[$p:lk] = 34380) then                (: 'attribute' 'let' :)
          let $state := p:lookahead3W(66, $input, $state)   (: S^WS | '$' | ('(' ':') | '{' :)
          return $state
        else if ($state[$p:lk] = 27468                      (: 'attribute' 'end' :)
              or $state[$p:lk] = 43852) then                (: 'attribute' 'start' :)
          let $state := p:lookahead3W(123, $input, $state)  (: S^WS | '$' | ('(' ':') | 'at' | 'next' | 'previous' |
                                                               'when' | '{' :)
          return $state
        else if ($state[$p:lk] = 30284                      (: 'attribute' 'group' :)
              or $state[$p:lk] = 38476) then                (: 'attribute' 'order' :)
          let $state := p:lookahead3W(80, $input, $state)   (: S^WS | ('(' ':') | 'by' | '{' :)
          return $state
        else if ($state[$p:lk] = 20812                      (: 'attribute' 'cast' :)
              or $state[$p:lk] = 21068                      (: 'attribute' 'castable' :)
              or $state[$p:lk] = 45644) then                (: 'attribute' 'treat' :)
          let $state := p:lookahead3W(78, $input, $state)   (: S^WS | ('(' ':') | 'as' | '{' :)
          return $state
        else if ($state[$p:lk] = 18508                      (: 'attribute' 'and' :)
              or $state[$p:lk] = 20556                      (: 'attribute' 'case' :)
              or $state[$p:lk] = 25420                      (: 'attribute' 'div' :)
              or $state[$p:lk] = 26444                      (: 'attribute' 'else' :)
              or $state[$p:lk] = 27724                      (: 'attribute' 'eq' :)
              or $state[$p:lk] = 28236                      (: 'attribute' 'except' :)
              or $state[$p:lk] = 29772                      (: 'attribute' 'ge' :)
              or $state[$p:lk] = 30796                      (: 'attribute' 'gt' :)
              or $state[$p:lk] = 31052                      (: 'attribute' 'idiv' :)
              or $state[$p:lk] = 32844                      (: 'attribute' 'intersect' :)
              or $state[$p:lk] = 33100                      (: 'attribute' 'is' :)
              or $state[$p:lk] = 33868                      (: 'attribute' 'le' :)
              or $state[$p:lk] = 34636                      (: 'attribute' 'lt' :)
              or $state[$p:lk] = 35148                      (: 'attribute' 'mod' :)
              or $state[$p:lk] = 36172                      (: 'attribute' 'ne' :)
              or $state[$p:lk] = 38220                      (: 'attribute' 'or' :)
              or $state[$p:lk] = 41548                      (: 'attribute' 'return' :)
              or $state[$p:lk] = 41804                      (: 'attribute' 'satisfies' :)
              or $state[$p:lk] = 45388                      (: 'attribute' 'to' :)
              or $state[$p:lk] = 46924                      (: 'attribute' 'union' :)
              or $state[$p:lk] = 48460) then                (: 'attribute' 'where' :)
          let $state := p:lookahead3W(184, $input, $state)  (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' | '{' :)
          return $state
        else
          $state
      return $state
    else if ($state[$p:l1] = 102) then                      (: 'element' :)
      let $state := p:lookahead2W(187, $input, $state)      (: URIQualifiedName | QName^Token | S^WS | EOF | '!' |
                                                               '!=' | '#' | '(' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                                               '>=' | '>>' | '[' | ']' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'ascending' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'count' | 'declare' | 'default' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                                               'item' | 'le' | 'let' | 'lt' | 'mod' | 'module' |
                                                               'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' |
                                                               'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' | '{' | '|' | '||' | '}' :)
      let $state :=
        if ($state[$p:lk] = 21862) then                     (: 'element' 'collation' :)
          let $state := p:lookahead3W(61, $input, $state)   (: StringLiteral | S^WS | ('(' ':') | '{' :)
          return $state
        else if ($state[$p:lk] = 24166) then                (: 'element' 'default' :)
          let $state := p:lookahead3W(101, $input, $state)  (: S^WS | '$' | ('(' ':') | 'return' | '{' :)
          return $state
        else if ($state[$p:lk] = 26726) then                (: 'element' 'empty' :)
          let $state := p:lookahead3W(110, $input, $state)  (: S^WS | ('(' ':') | 'greatest' | 'least' | '{' :)
          return $state
        else if ($state[$p:lk] = 29286) then                (: 'element' 'for' :)
          let $state := p:lookahead3W(113, $input, $state)  (: S^WS | '$' | ('(' ':') | 'sliding' | 'tumbling' | '{' :)
          return $state
        else if ($state[$p:lk] = 32614) then                (: 'element' 'instance' :)
          let $state := p:lookahead3W(91, $input, $state)   (: S^WS | ('(' ':') | 'of' | '{' :)
          return $state
        else if ($state[$p:lk] = 37734) then                (: 'element' 'only' :)
          let $state := p:lookahead3W(84, $input, $state)   (: S^WS | ('(' ':') | 'end' | '{' :)
          return $state
        else if ($state[$p:lk] = 43622) then                (: 'element' 'stable' :)
          let $state := p:lookahead3W(92, $input, $state)   (: S^WS | ('(' ':') | 'order' | '{' :)
          return $state
        else if ($state[$p:lk] = 19046                      (: 'element' 'ascending' :)
              or $state[$p:lk] = 24934) then                (: 'element' 'descending' :)
          let $state := p:lookahead3W(133, $input, $state)  (: S^WS | ('(' ':') | ',' | 'collation' | 'count' |
                                                               'empty' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                                               'stable' | 'where' | '{' :)
          return $state
        else if ($state[$p:lk] = 23142                      (: 'element' 'count' :)
              or $state[$p:lk] = 34406) then                (: 'element' 'let' :)
          let $state := p:lookahead3W(66, $input, $state)   (: S^WS | '$' | ('(' ':') | '{' :)
          return $state
        else if ($state[$p:lk] = 27494                      (: 'element' 'end' :)
              or $state[$p:lk] = 43878) then                (: 'element' 'start' :)
          let $state := p:lookahead3W(123, $input, $state)  (: S^WS | '$' | ('(' ':') | 'at' | 'next' | 'previous' |
                                                               'when' | '{' :)
          return $state
        else if ($state[$p:lk] = 30310                      (: 'element' 'group' :)
              or $state[$p:lk] = 38502) then                (: 'element' 'order' :)
          let $state := p:lookahead3W(80, $input, $state)   (: S^WS | ('(' ':') | 'by' | '{' :)
          return $state
        else if ($state[$p:lk] = 20838                      (: 'element' 'cast' :)
              or $state[$p:lk] = 21094                      (: 'element' 'castable' :)
              or $state[$p:lk] = 45670) then                (: 'element' 'treat' :)
          let $state := p:lookahead3W(78, $input, $state)   (: S^WS | ('(' ':') | 'as' | '{' :)
          return $state
        else if ($state[$p:lk] = 18534                      (: 'element' 'and' :)
              or $state[$p:lk] = 20582                      (: 'element' 'case' :)
              or $state[$p:lk] = 25446                      (: 'element' 'div' :)
              or $state[$p:lk] = 26470                      (: 'element' 'else' :)
              or $state[$p:lk] = 27750                      (: 'element' 'eq' :)
              or $state[$p:lk] = 28262                      (: 'element' 'except' :)
              or $state[$p:lk] = 29798                      (: 'element' 'ge' :)
              or $state[$p:lk] = 30822                      (: 'element' 'gt' :)
              or $state[$p:lk] = 31078                      (: 'element' 'idiv' :)
              or $state[$p:lk] = 32870                      (: 'element' 'intersect' :)
              or $state[$p:lk] = 33126                      (: 'element' 'is' :)
              or $state[$p:lk] = 33894                      (: 'element' 'le' :)
              or $state[$p:lk] = 34662                      (: 'element' 'lt' :)
              or $state[$p:lk] = 35174                      (: 'element' 'mod' :)
              or $state[$p:lk] = 36198                      (: 'element' 'ne' :)
              or $state[$p:lk] = 38246                      (: 'element' 'or' :)
              or $state[$p:lk] = 41574                      (: 'element' 'return' :)
              or $state[$p:lk] = 41830                      (: 'element' 'satisfies' :)
              or $state[$p:lk] = 45414                      (: 'element' 'to' :)
              or $state[$p:lk] = 46950                      (: 'element' 'union' :)
              or $state[$p:lk] = 48486) then                (: 'element' 'where' :)
          let $state := p:lookahead3W(184, $input, $state)  (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' | '{' :)
          return $state
        else
          $state
      return $state
    else if ($state[$p:l1] = 139                            (: 'namespace' :)
          or $state[$p:l1] = 161) then                      (: 'processing-instruction' :)
      let $state := p:lookahead2W(162, $input, $state)      (: NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' |
                                                               ('(' ':') | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                                               ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                                               ']' | 'and' | 'ascending' | 'case' | 'cast' |
                                                               'castable' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                                               'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                                               'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                                               'union' | 'where' | '{' | '|' | '||' | '}' :)
      let $state :=
        if ($state[$p:lk] = 21899                           (: 'namespace' 'collation' :)
         or $state[$p:lk] = 21921) then                     (: 'processing-instruction' 'collation' :)
          let $state := p:lookahead3W(61, $input, $state)   (: StringLiteral | S^WS | ('(' ':') | '{' :)
          return $state
        else if ($state[$p:lk] = 24203                      (: 'namespace' 'default' :)
              or $state[$p:lk] = 24225) then                (: 'processing-instruction' 'default' :)
          let $state := p:lookahead3W(101, $input, $state)  (: S^WS | '$' | ('(' ':') | 'return' | '{' :)
          return $state
        else if ($state[$p:lk] = 26763                      (: 'namespace' 'empty' :)
              or $state[$p:lk] = 26785) then                (: 'processing-instruction' 'empty' :)
          let $state := p:lookahead3W(110, $input, $state)  (: S^WS | ('(' ':') | 'greatest' | 'least' | '{' :)
          return $state
        else if ($state[$p:lk] = 29323                      (: 'namespace' 'for' :)
              or $state[$p:lk] = 29345) then                (: 'processing-instruction' 'for' :)
          let $state := p:lookahead3W(113, $input, $state)  (: S^WS | '$' | ('(' ':') | 'sliding' | 'tumbling' | '{' :)
          return $state
        else if ($state[$p:lk] = 32651                      (: 'namespace' 'instance' :)
              or $state[$p:lk] = 32673) then                (: 'processing-instruction' 'instance' :)
          let $state := p:lookahead3W(91, $input, $state)   (: S^WS | ('(' ':') | 'of' | '{' :)
          return $state
        else if ($state[$p:lk] = 37771                      (: 'namespace' 'only' :)
              or $state[$p:lk] = 37793) then                (: 'processing-instruction' 'only' :)
          let $state := p:lookahead3W(84, $input, $state)   (: S^WS | ('(' ':') | 'end' | '{' :)
          return $state
        else if ($state[$p:lk] = 43659                      (: 'namespace' 'stable' :)
              or $state[$p:lk] = 43681) then                (: 'processing-instruction' 'stable' :)
          let $state := p:lookahead3W(92, $input, $state)   (: S^WS | ('(' ':') | 'order' | '{' :)
          return $state
        else if ($state[$p:lk] = 19083                      (: 'namespace' 'ascending' :)
              or $state[$p:lk] = 24971                      (: 'namespace' 'descending' :)
              or $state[$p:lk] = 19105                      (: 'processing-instruction' 'ascending' :)
              or $state[$p:lk] = 24993) then                (: 'processing-instruction' 'descending' :)
          let $state := p:lookahead3W(133, $input, $state)  (: S^WS | ('(' ':') | ',' | 'collation' | 'count' |
                                                               'empty' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                                               'stable' | 'where' | '{' :)
          return $state
        else if ($state[$p:lk] = 23179                      (: 'namespace' 'count' :)
              or $state[$p:lk] = 34443                      (: 'namespace' 'let' :)
              or $state[$p:lk] = 23201                      (: 'processing-instruction' 'count' :)
              or $state[$p:lk] = 34465) then                (: 'processing-instruction' 'let' :)
          let $state := p:lookahead3W(66, $input, $state)   (: S^WS | '$' | ('(' ':') | '{' :)
          return $state
        else if ($state[$p:lk] = 27531                      (: 'namespace' 'end' :)
              or $state[$p:lk] = 43915                      (: 'namespace' 'start' :)
              or $state[$p:lk] = 27553                      (: 'processing-instruction' 'end' :)
              or $state[$p:lk] = 43937) then                (: 'processing-instruction' 'start' :)
          let $state := p:lookahead3W(123, $input, $state)  (: S^WS | '$' | ('(' ':') | 'at' | 'next' | 'previous' |
                                                               'when' | '{' :)
          return $state
        else if ($state[$p:lk] = 30347                      (: 'namespace' 'group' :)
              or $state[$p:lk] = 38539                      (: 'namespace' 'order' :)
              or $state[$p:lk] = 30369                      (: 'processing-instruction' 'group' :)
              or $state[$p:lk] = 38561) then                (: 'processing-instruction' 'order' :)
          let $state := p:lookahead3W(80, $input, $state)   (: S^WS | ('(' ':') | 'by' | '{' :)
          return $state
        else if ($state[$p:lk] = 20875                      (: 'namespace' 'cast' :)
              or $state[$p:lk] = 21131                      (: 'namespace' 'castable' :)
              or $state[$p:lk] = 45707                      (: 'namespace' 'treat' :)
              or $state[$p:lk] = 20897                      (: 'processing-instruction' 'cast' :)
              or $state[$p:lk] = 21153                      (: 'processing-instruction' 'castable' :)
              or $state[$p:lk] = 45729) then                (: 'processing-instruction' 'treat' :)
          let $state := p:lookahead3W(78, $input, $state)   (: S^WS | ('(' ':') | 'as' | '{' :)
          return $state
        else if ($state[$p:lk] = 18571                      (: 'namespace' 'and' :)
              or $state[$p:lk] = 20619                      (: 'namespace' 'case' :)
              or $state[$p:lk] = 25483                      (: 'namespace' 'div' :)
              or $state[$p:lk] = 26507                      (: 'namespace' 'else' :)
              or $state[$p:lk] = 27787                      (: 'namespace' 'eq' :)
              or $state[$p:lk] = 28299                      (: 'namespace' 'except' :)
              or $state[$p:lk] = 29835                      (: 'namespace' 'ge' :)
              or $state[$p:lk] = 30859                      (: 'namespace' 'gt' :)
              or $state[$p:lk] = 31115                      (: 'namespace' 'idiv' :)
              or $state[$p:lk] = 32907                      (: 'namespace' 'intersect' :)
              or $state[$p:lk] = 33163                      (: 'namespace' 'is' :)
              or $state[$p:lk] = 33931                      (: 'namespace' 'le' :)
              or $state[$p:lk] = 34699                      (: 'namespace' 'lt' :)
              or $state[$p:lk] = 35211                      (: 'namespace' 'mod' :)
              or $state[$p:lk] = 36235                      (: 'namespace' 'ne' :)
              or $state[$p:lk] = 38283                      (: 'namespace' 'or' :)
              or $state[$p:lk] = 41611                      (: 'namespace' 'return' :)
              or $state[$p:lk] = 41867                      (: 'namespace' 'satisfies' :)
              or $state[$p:lk] = 45451                      (: 'namespace' 'to' :)
              or $state[$p:lk] = 46987                      (: 'namespace' 'union' :)
              or $state[$p:lk] = 48523                      (: 'namespace' 'where' :)
              or $state[$p:lk] = 18593                      (: 'processing-instruction' 'and' :)
              or $state[$p:lk] = 20641                      (: 'processing-instruction' 'case' :)
              or $state[$p:lk] = 25505                      (: 'processing-instruction' 'div' :)
              or $state[$p:lk] = 26529                      (: 'processing-instruction' 'else' :)
              or $state[$p:lk] = 27809                      (: 'processing-instruction' 'eq' :)
              or $state[$p:lk] = 28321                      (: 'processing-instruction' 'except' :)
              or $state[$p:lk] = 29857                      (: 'processing-instruction' 'ge' :)
              or $state[$p:lk] = 30881                      (: 'processing-instruction' 'gt' :)
              or $state[$p:lk] = 31137                      (: 'processing-instruction' 'idiv' :)
              or $state[$p:lk] = 32929                      (: 'processing-instruction' 'intersect' :)
              or $state[$p:lk] = 33185                      (: 'processing-instruction' 'is' :)
              or $state[$p:lk] = 33953                      (: 'processing-instruction' 'le' :)
              or $state[$p:lk] = 34721                      (: 'processing-instruction' 'lt' :)
              or $state[$p:lk] = 35233                      (: 'processing-instruction' 'mod' :)
              or $state[$p:lk] = 36257                      (: 'processing-instruction' 'ne' :)
              or $state[$p:lk] = 38305                      (: 'processing-instruction' 'or' :)
              or $state[$p:lk] = 41633                      (: 'processing-instruction' 'return' :)
              or $state[$p:lk] = 41889                      (: 'processing-instruction' 'satisfies' :)
              or $state[$p:lk] = 45473                      (: 'processing-instruction' 'to' :)
              or $state[$p:lk] = 47009                      (: 'processing-instruction' 'union' :)
              or $state[$p:lk] = 48545) then                (: 'processing-instruction' 'where' :)
          let $state := p:lookahead3W(184, $input, $state)  (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' | '{' :)
          return $state
        else
          $state
      return $state
    else if ($state[$p:l1] = 86                             (: 'comment' :)
          or $state[$p:l1] = 100                            (: 'document' :)
          or $state[$p:l1] = 151                            (: 'ordered' :)
          or $state[$p:l1] = 175                            (: 'text' :)
          or $state[$p:l1] = 184) then                      (: 'unordered' :)
      let $state := p:lookahead2W(161, $input, $state)      (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' |
                                                               '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '{' | '|' | '||' | '}' :)
      return $state
    else if ($state[$p:l1] = 5                              (: URIQualifiedName :)
          or $state[$p:l1] = 105                            (: 'empty-sequence' :)
          or $state[$p:l1] = 122                            (: 'if' :)
          or $state[$p:l1] = 130                            (: 'item' :)
          or $state[$p:l1] = 174                            (: 'switch' :)
          or $state[$p:l1] = 182) then                      (: 'typeswitch' :)
      let $state := p:lookahead2W(153, $input, $state)      (: S^WS | EOF | '!' | '!=' | '#' | ('(' ':') | ')' | '*' |
                                                               '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' |
                                                               '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '|' | '||' | '}' :)
      return $state
    else if ($state[$p:l1] = 70                             (: 'ancestor' :)
          or $state[$p:l1] = 71                             (: 'ancestor-or-self' :)
          or $state[$p:l1] = 84                             (: 'child' :)
          or $state[$p:l1] = 95                             (: 'descendant' :)
          or $state[$p:l1] = 96                             (: 'descendant-or-self' :)
          or $state[$p:l1] = 112                            (: 'following' :)
          or $state[$p:l1] = 113                            (: 'following-sibling' :)
          or $state[$p:l1] = 153                            (: 'parent' :)
          or $state[$p:l1] = 157                            (: 'preceding' :)
          or $state[$p:l1] = 158                            (: 'preceding-sibling' :)
          or $state[$p:l1] = 167) then                      (: 'self' :)
      let $state := p:lookahead2W(160, $input, $state)      (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | '::' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                                               'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '|' | '||' | '}' :)
      return $state
    else if ($state[$p:l1] = 15                             (: QName^Token :)
          or $state[$p:l1] = 72                             (: 'and' :)
          or $state[$p:l1] = 74                             (: 'ascending' :)
          or $state[$p:l1] = 80                             (: 'case' :)
          or $state[$p:l1] = 81                             (: 'cast' :)
          or $state[$p:l1] = 82                             (: 'castable' :)
          or $state[$p:l1] = 85                             (: 'collation' :)
          or $state[$p:l1] = 90                             (: 'count' :)
          or $state[$p:l1] = 93                             (: 'declare' :)
          or $state[$p:l1] = 94                             (: 'default' :)
          or $state[$p:l1] = 97                             (: 'descending' :)
          or $state[$p:l1] = 99                             (: 'div' :)
          or $state[$p:l1] = 101                            (: 'document-node' :)
          or $state[$p:l1] = 103                            (: 'else' :)
          or $state[$p:l1] = 104                            (: 'empty' :)
          or $state[$p:l1] = 107                            (: 'end' :)
          or $state[$p:l1] = 108                            (: 'eq' :)
          or $state[$p:l1] = 109                            (: 'every' :)
          or $state[$p:l1] = 110                            (: 'except' :)
          or $state[$p:l1] = 114                            (: 'for' :)
          or $state[$p:l1] = 115                            (: 'function' :)
          or $state[$p:l1] = 116                            (: 'ge' :)
          or $state[$p:l1] = 118                            (: 'group' :)
          or $state[$p:l1] = 120                            (: 'gt' :)
          or $state[$p:l1] = 121                            (: 'idiv' :)
          or $state[$p:l1] = 123                            (: 'import' :)
          or $state[$p:l1] = 127                            (: 'instance' :)
          or $state[$p:l1] = 128                            (: 'intersect' :)
          or $state[$p:l1] = 129                            (: 'is' :)
          or $state[$p:l1] = 132                            (: 'le' :)
          or $state[$p:l1] = 134                            (: 'let' :)
          or $state[$p:l1] = 135                            (: 'lt' :)
          or $state[$p:l1] = 137                            (: 'mod' :)
          or $state[$p:l1] = 138                            (: 'module' :)
          or $state[$p:l1] = 140                            (: 'namespace-node' :)
          or $state[$p:l1] = 141                            (: 'ne' :)
          or $state[$p:l1] = 145                            (: 'node' :)
          or $state[$p:l1] = 147                            (: 'only' :)
          or $state[$p:l1] = 149                            (: 'or' :)
          or $state[$p:l1] = 150                            (: 'order' :)
          or $state[$p:l1] = 162                            (: 'return' :)
          or $state[$p:l1] = 163                            (: 'satisfies' :)
          or $state[$p:l1] = 165                            (: 'schema-attribute' :)
          or $state[$p:l1] = 166                            (: 'schema-element' :)
          or $state[$p:l1] = 169                            (: 'some' :)
          or $state[$p:l1] = 170                            (: 'stable' :)
          or $state[$p:l1] = 171                            (: 'start' :)
          or $state[$p:l1] = 177                            (: 'to' :)
          or $state[$p:l1] = 178                            (: 'treat' :)
          or $state[$p:l1] = 179                            (: 'try' :)
          or $state[$p:l1] = 183                            (: 'union' :)
          or $state[$p:l1] = 185                            (: 'validate' :)
          or $state[$p:l1] = 189                            (: 'where' :)
          or $state[$p:l1] = 191) then                      (: 'xquery' :)
      let $state := p:lookahead2W(157, $input, $state)      (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' |
                                                               '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '|' | '||' | '}' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 1                                   (: IntegerLiteral :)
     or $state[$p:lk] = 2                                   (: DecimalLiteral :)
     or $state[$p:lk] = 3                                   (: DoubleLiteral :)
     or $state[$p:lk] = 4                                   (: StringLiteral :)
     or $state[$p:lk] = 30                                  (: '$' :)
     or $state[$p:lk] = 31                                  (: '%' :)
     or $state[$p:lk] = 33                                  (: '(' :)
     or $state[$p:lk] = 42                                  (: '.' :)
     or $state[$p:lk] = 51                                  (: '<' :)
     or $state[$p:lk] = 52                                  (: '<!--' :)
     or $state[$p:lk] = 57                                  (: '<?' :)
     or $state[$p:lk] = 1356                                (: 'attribute' URIQualifiedName :)
     or $state[$p:lk] = 1382                                (: 'element' URIQualifiedName :)
     or $state[$p:lk] = 3723                                (: 'namespace' NCName^Token :)
     or $state[$p:lk] = 3745                                (: 'processing-instruction' NCName^Token :)
     or $state[$p:lk] = 3916                                (: 'attribute' QName^Token :)
     or $state[$p:lk] = 3942                                (: 'element' QName^Token :)
     or $state[$p:lk] = 7173                                (: URIQualifiedName '#' :)
     or $state[$p:lk] = 7183                                (: QName^Token '#' :)
     or $state[$p:lk] = 7238                                (: 'ancestor' '#' :)
     or $state[$p:lk] = 7239                                (: 'ancestor-or-self' '#' :)
     or $state[$p:lk] = 7240                                (: 'and' '#' :)
     or $state[$p:lk] = 7242                                (: 'ascending' '#' :)
     or $state[$p:lk] = 7244                                (: 'attribute' '#' :)
     or $state[$p:lk] = 7248                                (: 'case' '#' :)
     or $state[$p:lk] = 7249                                (: 'cast' '#' :)
     or $state[$p:lk] = 7250                                (: 'castable' '#' :)
     or $state[$p:lk] = 7252                                (: 'child' '#' :)
     or $state[$p:lk] = 7253                                (: 'collation' '#' :)
     or $state[$p:lk] = 7254                                (: 'comment' '#' :)
     or $state[$p:lk] = 7258                                (: 'count' '#' :)
     or $state[$p:lk] = 7261                                (: 'declare' '#' :)
     or $state[$p:lk] = 7262                                (: 'default' '#' :)
     or $state[$p:lk] = 7263                                (: 'descendant' '#' :)
     or $state[$p:lk] = 7264                                (: 'descendant-or-self' '#' :)
     or $state[$p:lk] = 7265                                (: 'descending' '#' :)
     or $state[$p:lk] = 7267                                (: 'div' '#' :)
     or $state[$p:lk] = 7268                                (: 'document' '#' :)
     or $state[$p:lk] = 7269                                (: 'document-node' '#' :)
     or $state[$p:lk] = 7270                                (: 'element' '#' :)
     or $state[$p:lk] = 7271                                (: 'else' '#' :)
     or $state[$p:lk] = 7272                                (: 'empty' '#' :)
     or $state[$p:lk] = 7273                                (: 'empty-sequence' '#' :)
     or $state[$p:lk] = 7275                                (: 'end' '#' :)
     or $state[$p:lk] = 7276                                (: 'eq' '#' :)
     or $state[$p:lk] = 7277                                (: 'every' '#' :)
     or $state[$p:lk] = 7278                                (: 'except' '#' :)
     or $state[$p:lk] = 7280                                (: 'following' '#' :)
     or $state[$p:lk] = 7281                                (: 'following-sibling' '#' :)
     or $state[$p:lk] = 7282                                (: 'for' '#' :)
     or $state[$p:lk] = 7283                                (: 'function' '#' :)
     or $state[$p:lk] = 7284                                (: 'ge' '#' :)
     or $state[$p:lk] = 7286                                (: 'group' '#' :)
     or $state[$p:lk] = 7288                                (: 'gt' '#' :)
     or $state[$p:lk] = 7289                                (: 'idiv' '#' :)
     or $state[$p:lk] = 7290                                (: 'if' '#' :)
     or $state[$p:lk] = 7291                                (: 'import' '#' :)
     or $state[$p:lk] = 7295                                (: 'instance' '#' :)
     or $state[$p:lk] = 7296                                (: 'intersect' '#' :)
     or $state[$p:lk] = 7297                                (: 'is' '#' :)
     or $state[$p:lk] = 7298                                (: 'item' '#' :)
     or $state[$p:lk] = 7300                                (: 'le' '#' :)
     or $state[$p:lk] = 7302                                (: 'let' '#' :)
     or $state[$p:lk] = 7303                                (: 'lt' '#' :)
     or $state[$p:lk] = 7305                                (: 'mod' '#' :)
     or $state[$p:lk] = 7306                                (: 'module' '#' :)
     or $state[$p:lk] = 7307                                (: 'namespace' '#' :)
     or $state[$p:lk] = 7308                                (: 'namespace-node' '#' :)
     or $state[$p:lk] = 7309                                (: 'ne' '#' :)
     or $state[$p:lk] = 7313                                (: 'node' '#' :)
     or $state[$p:lk] = 7315                                (: 'only' '#' :)
     or $state[$p:lk] = 7317                                (: 'or' '#' :)
     or $state[$p:lk] = 7318                                (: 'order' '#' :)
     or $state[$p:lk] = 7319                                (: 'ordered' '#' :)
     or $state[$p:lk] = 7321                                (: 'parent' '#' :)
     or $state[$p:lk] = 7325                                (: 'preceding' '#' :)
     or $state[$p:lk] = 7326                                (: 'preceding-sibling' '#' :)
     or $state[$p:lk] = 7329                                (: 'processing-instruction' '#' :)
     or $state[$p:lk] = 7330                                (: 'return' '#' :)
     or $state[$p:lk] = 7331                                (: 'satisfies' '#' :)
     or $state[$p:lk] = 7333                                (: 'schema-attribute' '#' :)
     or $state[$p:lk] = 7334                                (: 'schema-element' '#' :)
     or $state[$p:lk] = 7335                                (: 'self' '#' :)
     or $state[$p:lk] = 7337                                (: 'some' '#' :)
     or $state[$p:lk] = 7338                                (: 'stable' '#' :)
     or $state[$p:lk] = 7339                                (: 'start' '#' :)
     or $state[$p:lk] = 7342                                (: 'switch' '#' :)
     or $state[$p:lk] = 7343                                (: 'text' '#' :)
     or $state[$p:lk] = 7345                                (: 'to' '#' :)
     or $state[$p:lk] = 7346                                (: 'treat' '#' :)
     or $state[$p:lk] = 7347                                (: 'try' '#' :)
     or $state[$p:lk] = 7350                                (: 'typeswitch' '#' :)
     or $state[$p:lk] = 7351                                (: 'union' '#' :)
     or $state[$p:lk] = 7352                                (: 'unordered' '#' :)
     or $state[$p:lk] = 7353                                (: 'validate' '#' :)
     or $state[$p:lk] = 7357                                (: 'where' '#' :)
     or $state[$p:lk] = 7359                                (: 'xquery' '#' :)
     or $state[$p:lk] = 8463                                (: QName^Token '(' :)
     or $state[$p:lk] = 8518                                (: 'ancestor' '(' :)
     or $state[$p:lk] = 8519                                (: 'ancestor-or-self' '(' :)
     or $state[$p:lk] = 8520                                (: 'and' '(' :)
     or $state[$p:lk] = 8522                                (: 'ascending' '(' :)
     or $state[$p:lk] = 8528                                (: 'case' '(' :)
     or $state[$p:lk] = 8529                                (: 'cast' '(' :)
     or $state[$p:lk] = 8530                                (: 'castable' '(' :)
     or $state[$p:lk] = 8532                                (: 'child' '(' :)
     or $state[$p:lk] = 8533                                (: 'collation' '(' :)
     or $state[$p:lk] = 8538                                (: 'count' '(' :)
     or $state[$p:lk] = 8541                                (: 'declare' '(' :)
     or $state[$p:lk] = 8542                                (: 'default' '(' :)
     or $state[$p:lk] = 8543                                (: 'descendant' '(' :)
     or $state[$p:lk] = 8544                                (: 'descendant-or-self' '(' :)
     or $state[$p:lk] = 8545                                (: 'descending' '(' :)
     or $state[$p:lk] = 8547                                (: 'div' '(' :)
     or $state[$p:lk] = 8548                                (: 'document' '(' :)
     or $state[$p:lk] = 8551                                (: 'else' '(' :)
     or $state[$p:lk] = 8552                                (: 'empty' '(' :)
     or $state[$p:lk] = 8555                                (: 'end' '(' :)
     or $state[$p:lk] = 8556                                (: 'eq' '(' :)
     or $state[$p:lk] = 8557                                (: 'every' '(' :)
     or $state[$p:lk] = 8558                                (: 'except' '(' :)
     or $state[$p:lk] = 8560                                (: 'following' '(' :)
     or $state[$p:lk] = 8561                                (: 'following-sibling' '(' :)
     or $state[$p:lk] = 8562                                (: 'for' '(' :)
     or $state[$p:lk] = 8563                                (: 'function' '(' :)
     or $state[$p:lk] = 8564                                (: 'ge' '(' :)
     or $state[$p:lk] = 8566                                (: 'group' '(' :)
     or $state[$p:lk] = 8568                                (: 'gt' '(' :)
     or $state[$p:lk] = 8569                                (: 'idiv' '(' :)
     or $state[$p:lk] = 8571                                (: 'import' '(' :)
     or $state[$p:lk] = 8575                                (: 'instance' '(' :)
     or $state[$p:lk] = 8576                                (: 'intersect' '(' :)
     or $state[$p:lk] = 8577                                (: 'is' '(' :)
     or $state[$p:lk] = 8580                                (: 'le' '(' :)
     or $state[$p:lk] = 8582                                (: 'let' '(' :)
     or $state[$p:lk] = 8583                                (: 'lt' '(' :)
     or $state[$p:lk] = 8585                                (: 'mod' '(' :)
     or $state[$p:lk] = 8586                                (: 'module' '(' :)
     or $state[$p:lk] = 8587                                (: 'namespace' '(' :)
     or $state[$p:lk] = 8589                                (: 'ne' '(' :)
     or $state[$p:lk] = 8595                                (: 'only' '(' :)
     or $state[$p:lk] = 8597                                (: 'or' '(' :)
     or $state[$p:lk] = 8598                                (: 'order' '(' :)
     or $state[$p:lk] = 8599                                (: 'ordered' '(' :)
     or $state[$p:lk] = 8601                                (: 'parent' '(' :)
     or $state[$p:lk] = 8605                                (: 'preceding' '(' :)
     or $state[$p:lk] = 8606                                (: 'preceding-sibling' '(' :)
     or $state[$p:lk] = 8610                                (: 'return' '(' :)
     or $state[$p:lk] = 8611                                (: 'satisfies' '(' :)
     or $state[$p:lk] = 8615                                (: 'self' '(' :)
     or $state[$p:lk] = 8617                                (: 'some' '(' :)
     or $state[$p:lk] = 8618                                (: 'stable' '(' :)
     or $state[$p:lk] = 8619                                (: 'start' '(' :)
     or $state[$p:lk] = 8625                                (: 'to' '(' :)
     or $state[$p:lk] = 8626                                (: 'treat' '(' :)
     or $state[$p:lk] = 8627                                (: 'try' '(' :)
     or $state[$p:lk] = 8631                                (: 'union' '(' :)
     or $state[$p:lk] = 8632                                (: 'unordered' '(' :)
     or $state[$p:lk] = 8633                                (: 'validate' '(' :)
     or $state[$p:lk] = 8637                                (: 'where' '(' :)
     or $state[$p:lk] = 8639                                (: 'xquery' '(' :)
     or $state[$p:lk] = 17996                               (: 'attribute' 'ancestor' :)
     or $state[$p:lk] = 18022                               (: 'element' 'ancestor' :)
     or $state[$p:lk] = 18252                               (: 'attribute' 'ancestor-or-self' :)
     or $state[$p:lk] = 18278                               (: 'element' 'ancestor-or-self' :)
     or $state[$p:lk] = 19532                               (: 'attribute' 'attribute' :)
     or $state[$p:lk] = 19558                               (: 'element' 'attribute' :)
     or $state[$p:lk] = 21580                               (: 'attribute' 'child' :)
     or $state[$p:lk] = 21606                               (: 'element' 'child' :)
     or $state[$p:lk] = 22092                               (: 'attribute' 'comment' :)
     or $state[$p:lk] = 22118                               (: 'element' 'comment' :)
     or $state[$p:lk] = 23884                               (: 'attribute' 'declare' :)
     or $state[$p:lk] = 23910                               (: 'element' 'declare' :)
     or $state[$p:lk] = 24396                               (: 'attribute' 'descendant' :)
     or $state[$p:lk] = 24422                               (: 'element' 'descendant' :)
     or $state[$p:lk] = 24652                               (: 'attribute' 'descendant-or-self' :)
     or $state[$p:lk] = 24678                               (: 'element' 'descendant-or-self' :)
     or $state[$p:lk] = 25676                               (: 'attribute' 'document' :)
     or $state[$p:lk] = 25702                               (: 'element' 'document' :)
     or $state[$p:lk] = 25932                               (: 'attribute' 'document-node' :)
     or $state[$p:lk] = 25958                               (: 'element' 'document-node' :)
     or $state[$p:lk] = 26188                               (: 'attribute' 'element' :)
     or $state[$p:lk] = 26214                               (: 'element' 'element' :)
     or $state[$p:lk] = 26956                               (: 'attribute' 'empty-sequence' :)
     or $state[$p:lk] = 26982                               (: 'element' 'empty-sequence' :)
     or $state[$p:lk] = 27980                               (: 'attribute' 'every' :)
     or $state[$p:lk] = 28006                               (: 'element' 'every' :)
     or $state[$p:lk] = 28748                               (: 'attribute' 'following' :)
     or $state[$p:lk] = 28774                               (: 'element' 'following' :)
     or $state[$p:lk] = 29004                               (: 'attribute' 'following-sibling' :)
     or $state[$p:lk] = 29030                               (: 'element' 'following-sibling' :)
     or $state[$p:lk] = 29516                               (: 'attribute' 'function' :)
     or $state[$p:lk] = 29542                               (: 'element' 'function' :)
     or $state[$p:lk] = 31308                               (: 'attribute' 'if' :)
     or $state[$p:lk] = 31334                               (: 'element' 'if' :)
     or $state[$p:lk] = 31564                               (: 'attribute' 'import' :)
     or $state[$p:lk] = 31590                               (: 'element' 'import' :)
     or $state[$p:lk] = 33356                               (: 'attribute' 'item' :)
     or $state[$p:lk] = 33382                               (: 'element' 'item' :)
     or $state[$p:lk] = 35404                               (: 'attribute' 'module' :)
     or $state[$p:lk] = 35430                               (: 'element' 'module' :)
     or $state[$p:lk] = 35660                               (: 'attribute' 'namespace' :)
     or $state[$p:lk] = 35686                               (: 'element' 'namespace' :)
     or $state[$p:lk] = 35916                               (: 'attribute' 'namespace-node' :)
     or $state[$p:lk] = 35942                               (: 'element' 'namespace-node' :)
     or $state[$p:lk] = 37196                               (: 'attribute' 'node' :)
     or $state[$p:lk] = 37222                               (: 'element' 'node' :)
     or $state[$p:lk] = 38732                               (: 'attribute' 'ordered' :)
     or $state[$p:lk] = 38758                               (: 'element' 'ordered' :)
     or $state[$p:lk] = 39244                               (: 'attribute' 'parent' :)
     or $state[$p:lk] = 39270                               (: 'element' 'parent' :)
     or $state[$p:lk] = 40268                               (: 'attribute' 'preceding' :)
     or $state[$p:lk] = 40294                               (: 'element' 'preceding' :)
     or $state[$p:lk] = 40524                               (: 'attribute' 'preceding-sibling' :)
     or $state[$p:lk] = 40550                               (: 'element' 'preceding-sibling' :)
     or $state[$p:lk] = 41292                               (: 'attribute' 'processing-instruction' :)
     or $state[$p:lk] = 41318                               (: 'element' 'processing-instruction' :)
     or $state[$p:lk] = 42316                               (: 'attribute' 'schema-attribute' :)
     or $state[$p:lk] = 42342                               (: 'element' 'schema-attribute' :)
     or $state[$p:lk] = 42572                               (: 'attribute' 'schema-element' :)
     or $state[$p:lk] = 42598                               (: 'element' 'schema-element' :)
     or $state[$p:lk] = 42828                               (: 'attribute' 'self' :)
     or $state[$p:lk] = 42854                               (: 'element' 'self' :)
     or $state[$p:lk] = 43340                               (: 'attribute' 'some' :)
     or $state[$p:lk] = 43366                               (: 'element' 'some' :)
     or $state[$p:lk] = 44620                               (: 'attribute' 'switch' :)
     or $state[$p:lk] = 44646                               (: 'element' 'switch' :)
     or $state[$p:lk] = 44876                               (: 'attribute' 'text' :)
     or $state[$p:lk] = 44902                               (: 'element' 'text' :)
     or $state[$p:lk] = 45900                               (: 'attribute' 'try' :)
     or $state[$p:lk] = 45926                               (: 'element' 'try' :)
     or $state[$p:lk] = 46668                               (: 'attribute' 'typeswitch' :)
     or $state[$p:lk] = 46694                               (: 'element' 'typeswitch' :)
     or $state[$p:lk] = 47180                               (: 'attribute' 'unordered' :)
     or $state[$p:lk] = 47206                               (: 'element' 'unordered' :)
     or $state[$p:lk] = 47436                               (: 'attribute' 'validate' :)
     or $state[$p:lk] = 47462                               (: 'element' 'validate' :)
     or $state[$p:lk] = 48972                               (: 'attribute' 'xquery' :)
     or $state[$p:lk] = 48998                               (: 'element' 'xquery' :)
     or $state[$p:lk] = 49484                               (: 'attribute' '{' :)
     or $state[$p:lk] = 49494                               (: 'comment' '{' :)
     or $state[$p:lk] = 49508                               (: 'document' '{' :)
     or $state[$p:lk] = 49510                               (: 'element' '{' :)
     or $state[$p:lk] = 49547                               (: 'namespace' '{' :)
     or $state[$p:lk] = 49559                               (: 'ordered' '{' :)
     or $state[$p:lk] = 49569                               (: 'processing-instruction' '{' :)
     or $state[$p:lk] = 49583                               (: 'text' '{' :)
     or $state[$p:lk] = 49592                               (: 'unordered' '{' :)
     or $state[$p:lk] = 12666956                            (: 'attribute' 'and' '{' :)
     or $state[$p:lk] = 12666982                            (: 'element' 'and' '{' :)
     or $state[$p:lk] = 12667019                            (: 'namespace' 'and' '{' :)
     or $state[$p:lk] = 12667041                            (: 'processing-instruction' 'and' '{' :)
     or $state[$p:lk] = 12667468                            (: 'attribute' 'ascending' '{' :)
     or $state[$p:lk] = 12667494                            (: 'element' 'ascending' '{' :)
     or $state[$p:lk] = 12667531                            (: 'namespace' 'ascending' '{' :)
     or $state[$p:lk] = 12667553                            (: 'processing-instruction' 'ascending' '{' :)
     or $state[$p:lk] = 12669004                            (: 'attribute' 'case' '{' :)
     or $state[$p:lk] = 12669030                            (: 'element' 'case' '{' :)
     or $state[$p:lk] = 12669067                            (: 'namespace' 'case' '{' :)
     or $state[$p:lk] = 12669089                            (: 'processing-instruction' 'case' '{' :)
     or $state[$p:lk] = 12669260                            (: 'attribute' 'cast' '{' :)
     or $state[$p:lk] = 12669286                            (: 'element' 'cast' '{' :)
     or $state[$p:lk] = 12669323                            (: 'namespace' 'cast' '{' :)
     or $state[$p:lk] = 12669345                            (: 'processing-instruction' 'cast' '{' :)
     or $state[$p:lk] = 12669516                            (: 'attribute' 'castable' '{' :)
     or $state[$p:lk] = 12669542                            (: 'element' 'castable' '{' :)
     or $state[$p:lk] = 12669579                            (: 'namespace' 'castable' '{' :)
     or $state[$p:lk] = 12669601                            (: 'processing-instruction' 'castable' '{' :)
     or $state[$p:lk] = 12670284                            (: 'attribute' 'collation' '{' :)
     or $state[$p:lk] = 12670310                            (: 'element' 'collation' '{' :)
     or $state[$p:lk] = 12670347                            (: 'namespace' 'collation' '{' :)
     or $state[$p:lk] = 12670369                            (: 'processing-instruction' 'collation' '{' :)
     or $state[$p:lk] = 12671564                            (: 'attribute' 'count' '{' :)
     or $state[$p:lk] = 12671590                            (: 'element' 'count' '{' :)
     or $state[$p:lk] = 12671627                            (: 'namespace' 'count' '{' :)
     or $state[$p:lk] = 12671649                            (: 'processing-instruction' 'count' '{' :)
     or $state[$p:lk] = 12672588                            (: 'attribute' 'default' '{' :)
     or $state[$p:lk] = 12672614                            (: 'element' 'default' '{' :)
     or $state[$p:lk] = 12672651                            (: 'namespace' 'default' '{' :)
     or $state[$p:lk] = 12672673                            (: 'processing-instruction' 'default' '{' :)
     or $state[$p:lk] = 12673356                            (: 'attribute' 'descending' '{' :)
     or $state[$p:lk] = 12673382                            (: 'element' 'descending' '{' :)
     or $state[$p:lk] = 12673419                            (: 'namespace' 'descending' '{' :)
     or $state[$p:lk] = 12673441                            (: 'processing-instruction' 'descending' '{' :)
     or $state[$p:lk] = 12673868                            (: 'attribute' 'div' '{' :)
     or $state[$p:lk] = 12673894                            (: 'element' 'div' '{' :)
     or $state[$p:lk] = 12673931                            (: 'namespace' 'div' '{' :)
     or $state[$p:lk] = 12673953                            (: 'processing-instruction' 'div' '{' :)
     or $state[$p:lk] = 12674892                            (: 'attribute' 'else' '{' :)
     or $state[$p:lk] = 12674918                            (: 'element' 'else' '{' :)
     or $state[$p:lk] = 12674955                            (: 'namespace' 'else' '{' :)
     or $state[$p:lk] = 12674977                            (: 'processing-instruction' 'else' '{' :)
     or $state[$p:lk] = 12675148                            (: 'attribute' 'empty' '{' :)
     or $state[$p:lk] = 12675174                            (: 'element' 'empty' '{' :)
     or $state[$p:lk] = 12675211                            (: 'namespace' 'empty' '{' :)
     or $state[$p:lk] = 12675233                            (: 'processing-instruction' 'empty' '{' :)
     or $state[$p:lk] = 12675916                            (: 'attribute' 'end' '{' :)
     or $state[$p:lk] = 12675942                            (: 'element' 'end' '{' :)
     or $state[$p:lk] = 12675979                            (: 'namespace' 'end' '{' :)
     or $state[$p:lk] = 12676001                            (: 'processing-instruction' 'end' '{' :)
     or $state[$p:lk] = 12676172                            (: 'attribute' 'eq' '{' :)
     or $state[$p:lk] = 12676198                            (: 'element' 'eq' '{' :)
     or $state[$p:lk] = 12676235                            (: 'namespace' 'eq' '{' :)
     or $state[$p:lk] = 12676257                            (: 'processing-instruction' 'eq' '{' :)
     or $state[$p:lk] = 12676684                            (: 'attribute' 'except' '{' :)
     or $state[$p:lk] = 12676710                            (: 'element' 'except' '{' :)
     or $state[$p:lk] = 12676747                            (: 'namespace' 'except' '{' :)
     or $state[$p:lk] = 12676769                            (: 'processing-instruction' 'except' '{' :)
     or $state[$p:lk] = 12677708                            (: 'attribute' 'for' '{' :)
     or $state[$p:lk] = 12677734                            (: 'element' 'for' '{' :)
     or $state[$p:lk] = 12677771                            (: 'namespace' 'for' '{' :)
     or $state[$p:lk] = 12677793                            (: 'processing-instruction' 'for' '{' :)
     or $state[$p:lk] = 12678220                            (: 'attribute' 'ge' '{' :)
     or $state[$p:lk] = 12678246                            (: 'element' 'ge' '{' :)
     or $state[$p:lk] = 12678283                            (: 'namespace' 'ge' '{' :)
     or $state[$p:lk] = 12678305                            (: 'processing-instruction' 'ge' '{' :)
     or $state[$p:lk] = 12678732                            (: 'attribute' 'group' '{' :)
     or $state[$p:lk] = 12678758                            (: 'element' 'group' '{' :)
     or $state[$p:lk] = 12678795                            (: 'namespace' 'group' '{' :)
     or $state[$p:lk] = 12678817                            (: 'processing-instruction' 'group' '{' :)
     or $state[$p:lk] = 12679244                            (: 'attribute' 'gt' '{' :)
     or $state[$p:lk] = 12679270                            (: 'element' 'gt' '{' :)
     or $state[$p:lk] = 12679307                            (: 'namespace' 'gt' '{' :)
     or $state[$p:lk] = 12679329                            (: 'processing-instruction' 'gt' '{' :)
     or $state[$p:lk] = 12679500                            (: 'attribute' 'idiv' '{' :)
     or $state[$p:lk] = 12679526                            (: 'element' 'idiv' '{' :)
     or $state[$p:lk] = 12679563                            (: 'namespace' 'idiv' '{' :)
     or $state[$p:lk] = 12679585                            (: 'processing-instruction' 'idiv' '{' :)
     or $state[$p:lk] = 12681036                            (: 'attribute' 'instance' '{' :)
     or $state[$p:lk] = 12681062                            (: 'element' 'instance' '{' :)
     or $state[$p:lk] = 12681099                            (: 'namespace' 'instance' '{' :)
     or $state[$p:lk] = 12681121                            (: 'processing-instruction' 'instance' '{' :)
     or $state[$p:lk] = 12681292                            (: 'attribute' 'intersect' '{' :)
     or $state[$p:lk] = 12681318                            (: 'element' 'intersect' '{' :)
     or $state[$p:lk] = 12681355                            (: 'namespace' 'intersect' '{' :)
     or $state[$p:lk] = 12681377                            (: 'processing-instruction' 'intersect' '{' :)
     or $state[$p:lk] = 12681548                            (: 'attribute' 'is' '{' :)
     or $state[$p:lk] = 12681574                            (: 'element' 'is' '{' :)
     or $state[$p:lk] = 12681611                            (: 'namespace' 'is' '{' :)
     or $state[$p:lk] = 12681633                            (: 'processing-instruction' 'is' '{' :)
     or $state[$p:lk] = 12682316                            (: 'attribute' 'le' '{' :)
     or $state[$p:lk] = 12682342                            (: 'element' 'le' '{' :)
     or $state[$p:lk] = 12682379                            (: 'namespace' 'le' '{' :)
     or $state[$p:lk] = 12682401                            (: 'processing-instruction' 'le' '{' :)
     or $state[$p:lk] = 12682828                            (: 'attribute' 'let' '{' :)
     or $state[$p:lk] = 12682854                            (: 'element' 'let' '{' :)
     or $state[$p:lk] = 12682891                            (: 'namespace' 'let' '{' :)
     or $state[$p:lk] = 12682913                            (: 'processing-instruction' 'let' '{' :)
     or $state[$p:lk] = 12683084                            (: 'attribute' 'lt' '{' :)
     or $state[$p:lk] = 12683110                            (: 'element' 'lt' '{' :)
     or $state[$p:lk] = 12683147                            (: 'namespace' 'lt' '{' :)
     or $state[$p:lk] = 12683169                            (: 'processing-instruction' 'lt' '{' :)
     or $state[$p:lk] = 12683596                            (: 'attribute' 'mod' '{' :)
     or $state[$p:lk] = 12683622                            (: 'element' 'mod' '{' :)
     or $state[$p:lk] = 12683659                            (: 'namespace' 'mod' '{' :)
     or $state[$p:lk] = 12683681                            (: 'processing-instruction' 'mod' '{' :)
     or $state[$p:lk] = 12684620                            (: 'attribute' 'ne' '{' :)
     or $state[$p:lk] = 12684646                            (: 'element' 'ne' '{' :)
     or $state[$p:lk] = 12684683                            (: 'namespace' 'ne' '{' :)
     or $state[$p:lk] = 12684705                            (: 'processing-instruction' 'ne' '{' :)
     or $state[$p:lk] = 12686156                            (: 'attribute' 'only' '{' :)
     or $state[$p:lk] = 12686182                            (: 'element' 'only' '{' :)
     or $state[$p:lk] = 12686219                            (: 'namespace' 'only' '{' :)
     or $state[$p:lk] = 12686241                            (: 'processing-instruction' 'only' '{' :)
     or $state[$p:lk] = 12686668                            (: 'attribute' 'or' '{' :)
     or $state[$p:lk] = 12686694                            (: 'element' 'or' '{' :)
     or $state[$p:lk] = 12686731                            (: 'namespace' 'or' '{' :)
     or $state[$p:lk] = 12686753                            (: 'processing-instruction' 'or' '{' :)
     or $state[$p:lk] = 12686924                            (: 'attribute' 'order' '{' :)
     or $state[$p:lk] = 12686950                            (: 'element' 'order' '{' :)
     or $state[$p:lk] = 12686987                            (: 'namespace' 'order' '{' :)
     or $state[$p:lk] = 12687009                            (: 'processing-instruction' 'order' '{' :)
     or $state[$p:lk] = 12689996                            (: 'attribute' 'return' '{' :)
     or $state[$p:lk] = 12690022                            (: 'element' 'return' '{' :)
     or $state[$p:lk] = 12690059                            (: 'namespace' 'return' '{' :)
     or $state[$p:lk] = 12690081                            (: 'processing-instruction' 'return' '{' :)
     or $state[$p:lk] = 12690252                            (: 'attribute' 'satisfies' '{' :)
     or $state[$p:lk] = 12690278                            (: 'element' 'satisfies' '{' :)
     or $state[$p:lk] = 12690315                            (: 'namespace' 'satisfies' '{' :)
     or $state[$p:lk] = 12690337                            (: 'processing-instruction' 'satisfies' '{' :)
     or $state[$p:lk] = 12692044                            (: 'attribute' 'stable' '{' :)
     or $state[$p:lk] = 12692070                            (: 'element' 'stable' '{' :)
     or $state[$p:lk] = 12692107                            (: 'namespace' 'stable' '{' :)
     or $state[$p:lk] = 12692129                            (: 'processing-instruction' 'stable' '{' :)
     or $state[$p:lk] = 12692300                            (: 'attribute' 'start' '{' :)
     or $state[$p:lk] = 12692326                            (: 'element' 'start' '{' :)
     or $state[$p:lk] = 12692363                            (: 'namespace' 'start' '{' :)
     or $state[$p:lk] = 12692385                            (: 'processing-instruction' 'start' '{' :)
     or $state[$p:lk] = 12693836                            (: 'attribute' 'to' '{' :)
     or $state[$p:lk] = 12693862                            (: 'element' 'to' '{' :)
     or $state[$p:lk] = 12693899                            (: 'namespace' 'to' '{' :)
     or $state[$p:lk] = 12693921                            (: 'processing-instruction' 'to' '{' :)
     or $state[$p:lk] = 12694092                            (: 'attribute' 'treat' '{' :)
     or $state[$p:lk] = 12694118                            (: 'element' 'treat' '{' :)
     or $state[$p:lk] = 12694155                            (: 'namespace' 'treat' '{' :)
     or $state[$p:lk] = 12694177                            (: 'processing-instruction' 'treat' '{' :)
     or $state[$p:lk] = 12695372                            (: 'attribute' 'union' '{' :)
     or $state[$p:lk] = 12695398                            (: 'element' 'union' '{' :)
     or $state[$p:lk] = 12695435                            (: 'namespace' 'union' '{' :)
     or $state[$p:lk] = 12695457                            (: 'processing-instruction' 'union' '{' :)
     or $state[$p:lk] = 12696908                            (: 'attribute' 'where' '{' :)
     or $state[$p:lk] = 12696934                            (: 'element' 'where' '{' :)
     or $state[$p:lk] = 12696971                            (: 'namespace' 'where' '{' :)
     or $state[$p:lk] = 12696993) then                      (: 'processing-instruction' 'where' '{' :)
      let $state := p:parse-PostfixExpr($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-AxisStep($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "StepExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production RelativePathExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-RelativePathExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 44                                 (: '/' :)
    and $state[$p:l1] != 45) then                           (: '//' :)
      $state
    else
      let $state :=
        if ($state[$p:l1] = 44) then                        (: '/' :)
          let $state := p:shift(44, $input, $state)         (: '/' :)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:shift(45, $input, $state)         (: '//' :)
          return $state
      let $state := p:lookahead1W(178, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | ('(' ':') | '.' | '..' |
                                                               '<' | '<!--' | '<?' | '@' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'ascending' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'count' | 'declare' | 'default' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                                               'item' | 'le' | 'let' | 'lt' | 'mod' | 'module' |
                                                               'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' |
                                                               'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-StepExpr($input, $state)
      return p:parse-RelativePathExpr-1($input, $state)
};

(:~
 : Parse RelativePathExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-RelativePathExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-StepExpr($input, $state)
  let $state := p:parse-RelativePathExpr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "RelativePathExpr", $count, $begin, $end)
};

(:~
 : Parse PathExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-PathExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 44) then                            (: '/' :)
      let $state := p:shift(44, $input, $state)             (: '/' :)
      let $state := p:lookahead1W(189, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | EOF | '!' | '!=' | '$' | '%' | '(' |
                                                               ('(' ':') | ')' | '*' | '+' | ',' | '-' | '.' | '..' |
                                                               ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' |
                                                               '>=' | '>>' | '@' | ']' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'ascending' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'count' | 'declare' | 'default' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                                               'item' | 'le' | 'let' | 'lt' | 'mod' | 'module' |
                                                               'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' |
                                                               'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' | '|' | '||' | '}' :)
      let $state :=
        if ($state[$p:l1] = 24                              (: EOF :)
         or $state[$p:l1] = 25                              (: '!' :)
         or $state[$p:l1] = 26                              (: '!=' :)
         or $state[$p:l1] = 36                              (: ')' :)
         or $state[$p:l1] = 37                              (: '*' :)
         or $state[$p:l1] = 38                              (: '+' :)
         or $state[$p:l1] = 39                              (: ',' :)
         or $state[$p:l1] = 40                              (: '-' :)
         or $state[$p:l1] = 50                              (: ';' :)
         or $state[$p:l1] = 55                              (: '<<' :)
         or $state[$p:l1] = 56                              (: '<=' :)
         or $state[$p:l1] = 58                              (: '=' :)
         or $state[$p:l1] = 59                              (: '>' :)
         or $state[$p:l1] = 60                              (: '>=' :)
         or $state[$p:l1] = 61                              (: '>>' :)
         or $state[$p:l1] = 67                              (: ']' :)
         or $state[$p:l1] = 195                             (: '|' :)
         or $state[$p:l1] = 196                             (: '||' :)
         or $state[$p:l1] = 197) then                       (: '}' :)
          $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:whitespace($input, $state)
          let $state := p:parse-RelativePathExpr($input, $state)
          return $state
      return $state
    else if ($state[$p:l1] = 45) then                       (: '//' :)
      let $state := p:shift(45, $input, $state)             (: '//' :)
      let $state := p:lookahead1W(178, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | ('(' ':') | '.' | '..' |
                                                               '<' | '<!--' | '<?' | '@' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'ascending' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'count' | 'declare' | 'default' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                                               'item' | 'le' | 'let' | 'lt' | 'mod' | 'module' |
                                                               'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' |
                                                               'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-RelativePathExpr($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-RelativePathExpr($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "PathExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production SimpleMapExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SimpleMapExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 25) then                           (: '!' :)
      $state
    else
      let $state := p:shift(25, $input, $state)             (: '!' :)
      let $state := p:lookahead1W(179, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | ('(' ':') | '.' | '..' |
                                                               '/' | '//' | '<' | '<!--' | '<?' | '@' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'ascending' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'count' | 'declare' | 'default' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                                               'item' | 'le' | 'let' | 'lt' | 'mod' | 'module' |
                                                               'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' |
                                                               'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-PathExpr($input, $state)
      return p:parse-SimpleMapExpr-1($input, $state)
};

(:~
 : Parse SimpleMapExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SimpleMapExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-PathExpr($input, $state)
  let $state := p:parse-SimpleMapExpr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "SimpleMapExpr", $count, $begin, $end)
};

(:~
 : Parse Pragma.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Pragma($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(34, $input, $state)                 (: '(#' :)
  let $state := p:lookahead1(167, $input, $state)           (: URIQualifiedName | QName^Token | S | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'ascending' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'count' | 'declare' | 'default' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                                               'item' | 'le' | 'let' | 'lt' | 'mod' | 'module' |
                                                               'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' |
                                                               'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 16) then                       (: S :)
      let $state := p:shift(16, $input, $state)             (: S :)
      return $state
    else
      $state
  let $state := p:parse-EQName($input, $state)
  let $state := p:lookahead1(11, $input, $state)            (: S | '#)' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 16) then                       (: S :)
      let $state := p:shift(16, $input, $state)             (: S :)
      let $state := p:lookahead1(1, $input, $state)         (: PragmaContents :)
      let $state := p:shift(19, $input, $state)             (: PragmaContents :)
      return $state
    else
      $state
  let $state := p:lookahead1(5, $input, $state)             (: '#)' :)
  let $state := p:shift(29, $input, $state)                 (: '#)' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "Pragma", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production ExtensionExpr (one or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ExtensionExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:whitespace($input, $state)
    let $state := p:parse-Pragma($input, $state)
    let $state := p:lookahead1W(68, $input, $state)         (: S^WS | '(#' | ('(' ':') | '{' :)
    return
      if ($state[$p:l1] != 34) then                         (: '(#' :)
        $state
      else
        p:parse-ExtensionExpr-1($input, $state)
};

(:~
 : Parse ExtensionExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ExtensionExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-ExtensionExpr-1($input, $state)
  let $state := p:shift(193, $input, $state)                (: '{' :)
  let $state := p:lookahead1W(185, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' | '}' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 197) then                     (: '}' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-Expr($input, $state)
      return $state
    else
      $state
  let $state := p:shift(197, $input, $state)                (: '}' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "ExtensionExpr", $count, $begin, $end)
};

(:~
 : Parse ValidationMode.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ValidationMode($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 131) then                           (: 'lax' :)
      let $state := p:shift(131, $input, $state)            (: 'lax' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(172, $input, $state)            (: 'strict' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ValidationMode", $count, $begin, $end)
};

(:~
 : Parse ValidateExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ValidateExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(185, $input, $state)                (: 'validate' :)
  let $state := p:lookahead1W(117, $input, $state)          (: S^WS | ('(' ':') | 'lax' | 'strict' | 'type' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 193) then                     (: '{' :)
      let $state :=
        if ($state[$p:l1] = 181) then                       (: 'type' :)
          let $state := p:shift(181, $input, $state)        (: 'type' :)
          let $state := p:lookahead1W(168, $input, $state)  (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
          let $state := p:whitespace($input, $state)
          let $state := p:parse-TypeName($input, $state)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:whitespace($input, $state)
          let $state := p:parse-ValidationMode($input, $state)
          return $state
      return $state
    else
      $state
  let $state := p:lookahead1W(58, $input, $state)           (: S^WS | ('(' ':') | '{' :)
  let $state := p:shift(193, $input, $state)                (: '{' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-Expr($input, $state)
  let $state := p:shift(197, $input, $state)                (: '}' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "ValidateExpr", $count, $begin, $end)
};

(:~
 : Parse ValueExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ValueExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 185) then                           (: 'validate' :)
      let $state := p:lookahead2W(164, $input, $state)      (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' |
                                                               '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'lax' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                                               'satisfies' | 'stable' | 'start' | 'strict' | 'to' |
                                                               'treat' | 'type' | 'union' | 'where' | '{' | '|' | '||' |
                                                               '}' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 33721                               (: 'validate' 'lax' :)
     or $state[$p:lk] = 44217                               (: 'validate' 'strict' :)
     or $state[$p:lk] = 46521                               (: 'validate' 'type' :)
     or $state[$p:lk] = 49593) then                         (: 'validate' '{' :)
      let $state := p:parse-ValidateExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 34) then                       (: '(#' :)
      let $state := p:parse-ExtensionExpr($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-SimpleMapExpr($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ValueExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production UnaryExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-UnaryExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(180, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
    return
      if ($state[$p:l1] != 38                               (: '+' :)
      and $state[$p:l1] != 40) then                         (: '-' :)
        $state
      else
        let $state :=
          if ($state[$p:l1] = 40) then                      (: '-' :)
            let $state := p:shift(40, $input, $state)       (: '-' :)
            return $state
          else if ($state[$p:error]) then
            $state
          else
            let $state := p:shift(38, $input, $state)       (: '+' :)
            return $state
        return p:parse-UnaryExpr-1($input, $state)
};

(:~
 : Parse UnaryExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-UnaryExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-UnaryExpr-1($input, $state)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ValueExpr($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "UnaryExpr", $count, $begin, $end)
};

(:~
 : Parse CastExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CastExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-UnaryExpr($input, $state)
  let $state := p:lookahead1W(150, $input, $state)          (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                                               ']' | 'and' | 'ascending' | 'case' | 'cast' |
                                                               'castable' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                                               'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                                               'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                                               'union' | 'where' | '|' | '||' | '}' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 81) then                       (: 'cast' :)
      let $state := p:shift(81, $input, $state)             (: 'cast' :)
      let $state := p:lookahead1W(30, $input, $state)       (: S^WS | ('(' ':') | 'as' :)
      let $state := p:shift(73, $input, $state)             (: 'as' :)
      let $state := p:lookahead1W(168, $input, $state)      (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-SingleType($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "CastExpr", $count, $begin, $end)
};

(:~
 : Parse CastableExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CastableExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-CastExpr($input, $state)
  let $state := p:lookahead1W(148, $input, $state)          (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                                               ']' | 'and' | 'ascending' | 'case' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '|' | '||' | '}' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 82) then                       (: 'castable' :)
      let $state := p:shift(82, $input, $state)             (: 'castable' :)
      let $state := p:lookahead1W(30, $input, $state)       (: S^WS | ('(' ':') | 'as' :)
      let $state := p:shift(73, $input, $state)             (: 'as' :)
      let $state := p:lookahead1W(168, $input, $state)      (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-SingleType($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "CastableExpr", $count, $begin, $end)
};

(:~
 : Parse TreatExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-TreatExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-CastableExpr($input, $state)
  let $state := p:lookahead1W(147, $input, $state)          (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                                               ']' | 'and' | 'ascending' | 'case' | 'collation' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                                               'or' | 'order' | 'return' | 'satisfies' | 'stable' |
                                                               'start' | 'to' | 'treat' | 'union' | 'where' | '|' |
                                                               '||' | '}' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 178) then                      (: 'treat' :)
      let $state := p:shift(178, $input, $state)            (: 'treat' :)
      let $state := p:lookahead1W(30, $input, $state)       (: S^WS | ('(' ':') | 'as' :)
      let $state := p:shift(73, $input, $state)             (: 'as' :)
      let $state := p:lookahead1W(173, $input, $state)      (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-SequenceType($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "TreatExpr", $count, $begin, $end)
};

(:~
 : Parse InstanceofExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-InstanceofExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-TreatExpr($input, $state)
  let $state := p:lookahead1W(146, $input, $state)          (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                                               ']' | 'and' | 'ascending' | 'case' | 'collation' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' | 'only' |
                                                               'or' | 'order' | 'return' | 'satisfies' | 'stable' |
                                                               'start' | 'to' | 'union' | 'where' | '|' | '||' | '}' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 127) then                      (: 'instance' :)
      let $state := p:shift(127, $input, $state)            (: 'instance' :)
      let $state := p:lookahead1W(49, $input, $state)       (: S^WS | ('(' ':') | 'of' :)
      let $state := p:shift(146, $input, $state)            (: 'of' :)
      let $state := p:lookahead1W(173, $input, $state)      (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-SequenceType($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "InstanceofExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production IntersectExceptExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-IntersectExceptExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(145, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                                               ']' | 'and' | 'ascending' | 'case' | 'collation' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'intersect' | 'is' | 'le' |
                                                               'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' |
                                                               'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                                               'union' | 'where' | '|' | '||' | '}' :)
    return
      if ($state[$p:l1] != 110                              (: 'except' :)
      and $state[$p:l1] != 128) then                        (: 'intersect' :)
        $state
      else
        let $state :=
          if ($state[$p:l1] = 128) then                     (: 'intersect' :)
            let $state := p:shift(128, $input, $state)      (: 'intersect' :)
            return $state
          else if ($state[$p:error]) then
            $state
          else
            let $state := p:shift(110, $input, $state)      (: 'except' :)
            return $state
        let $state := p:lookahead1W(180, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-InstanceofExpr($input, $state)
        return p:parse-IntersectExceptExpr-1($input, $state)
};

(:~
 : Parse IntersectExceptExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-IntersectExceptExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-InstanceofExpr($input, $state)
  let $state := p:parse-IntersectExceptExpr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "IntersectExceptExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production UnionExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-UnionExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 183                                (: 'union' :)
    and $state[$p:l1] != 195) then                          (: '|' :)
      $state
    else
      let $state :=
        if ($state[$p:l1] = 183) then                       (: 'union' :)
          let $state := p:shift(183, $input, $state)        (: 'union' :)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:shift(195, $input, $state)        (: '|' :)
          return $state
      let $state := p:lookahead1W(180, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-IntersectExceptExpr($input, $state)
      return p:parse-UnionExpr-1($input, $state)
};

(:~
 : Parse UnionExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-UnionExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-IntersectExceptExpr($input, $state)
  let $state := p:parse-UnionExpr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "UnionExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production MultiplicativeExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-MultiplicativeExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 37                                 (: '*' :)
    and $state[$p:l1] != 99                                 (: 'div' :)
    and $state[$p:l1] != 121                                (: 'idiv' :)
    and $state[$p:l1] != 137) then                          (: 'mod' :)
      $state
    else
      let $state :=
        if ($state[$p:l1] = 37) then                        (: '*' :)
          let $state := p:shift(37, $input, $state)         (: '*' :)
          return $state
        else if ($state[$p:l1] = 99) then                   (: 'div' :)
          let $state := p:shift(99, $input, $state)         (: 'div' :)
          return $state
        else if ($state[$p:l1] = 121) then                  (: 'idiv' :)
          let $state := p:shift(121, $input, $state)        (: 'idiv' :)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:shift(137, $input, $state)        (: 'mod' :)
          return $state
      let $state := p:lookahead1W(180, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-UnionExpr($input, $state)
      return p:parse-MultiplicativeExpr-1($input, $state)
};

(:~
 : Parse MultiplicativeExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-MultiplicativeExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-UnionExpr($input, $state)
  let $state := p:parse-MultiplicativeExpr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "MultiplicativeExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production AdditiveExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AdditiveExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 38                                 (: '+' :)
    and $state[$p:l1] != 40) then                           (: '-' :)
      $state
    else
      let $state :=
        if ($state[$p:l1] = 38) then                        (: '+' :)
          let $state := p:shift(38, $input, $state)         (: '+' :)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:shift(40, $input, $state)         (: '-' :)
          return $state
      let $state := p:lookahead1W(180, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-MultiplicativeExpr($input, $state)
      return p:parse-AdditiveExpr-1($input, $state)
};

(:~
 : Parse AdditiveExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AdditiveExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-MultiplicativeExpr($input, $state)
  let $state := p:parse-AdditiveExpr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "AdditiveExpr", $count, $begin, $end)
};

(:~
 : Parse RangeExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-RangeExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-AdditiveExpr($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 177) then                      (: 'to' :)
      let $state := p:shift(177, $input, $state)            (: 'to' :)
      let $state := p:lookahead1W(180, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-AdditiveExpr($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "RangeExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production StringConcatExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-StringConcatExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 196) then                          (: '||' :)
      $state
    else
      let $state := p:shift(196, $input, $state)            (: '||' :)
      let $state := p:lookahead1W(180, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-RangeExpr($input, $state)
      return p:parse-StringConcatExpr-1($input, $state)
};

(:~
 : Parse StringConcatExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-StringConcatExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-RangeExpr($input, $state)
  let $state := p:parse-StringConcatExpr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "StringConcatExpr", $count, $begin, $end)
};

(:~
 : Parse ComparisonExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ComparisonExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-StringConcatExpr($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 26                             (: '!=' :)
          or $state[$p:l1] = 51                             (: '<' :)
          or $state[$p:l1] = 55                             (: '<<' :)
          or $state[$p:l1] = 56                             (: '<=' :)
          or $state[$p:l1] = 58                             (: '=' :)
          or $state[$p:l1] = 59                             (: '>' :)
          or $state[$p:l1] = 60                             (: '>=' :)
          or $state[$p:l1] = 61                             (: '>>' :)
          or $state[$p:l1] = 108                            (: 'eq' :)
          or $state[$p:l1] = 116                            (: 'ge' :)
          or $state[$p:l1] = 120                            (: 'gt' :)
          or $state[$p:l1] = 129                            (: 'is' :)
          or $state[$p:l1] = 132                            (: 'le' :)
          or $state[$p:l1] = 135                            (: 'lt' :)
          or $state[$p:l1] = 141) then                      (: 'ne' :)
      let $state :=
        if ($state[$p:l1] = 108                             (: 'eq' :)
         or $state[$p:l1] = 116                             (: 'ge' :)
         or $state[$p:l1] = 120                             (: 'gt' :)
         or $state[$p:l1] = 132                             (: 'le' :)
         or $state[$p:l1] = 135                             (: 'lt' :)
         or $state[$p:l1] = 141) then                       (: 'ne' :)
          let $state := p:whitespace($input, $state)
          let $state := p:parse-ValueComp($input, $state)
          return $state
        else if ($state[$p:l1] = 55                         (: '<<' :)
              or $state[$p:l1] = 61                         (: '>>' :)
              or $state[$p:l1] = 129) then                  (: 'is' :)
          let $state := p:whitespace($input, $state)
          let $state := p:parse-NodeComp($input, $state)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:whitespace($input, $state)
          let $state := p:parse-GeneralComp($input, $state)
          return $state
      let $state := p:lookahead1W(180, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-StringConcatExpr($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ComparisonExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production AndExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AndExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 72) then                           (: 'and' :)
      $state
    else
      let $state := p:shift(72, $input, $state)             (: 'and' :)
      let $state := p:lookahead1W(180, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-ComparisonExpr($input, $state)
      return p:parse-AndExpr-1($input, $state)
};

(:~
 : Parse AndExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AndExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-ComparisonExpr($input, $state)
  let $state := p:parse-AndExpr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "AndExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production OrExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-OrExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 149) then                          (: 'or' :)
      $state
    else
      let $state := p:shift(149, $input, $state)            (: 'or' :)
      let $state := p:lookahead1W(180, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-AndExpr($input, $state)
      return p:parse-OrExpr-1($input, $state)
};

(:~
 : Parse OrExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-OrExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-AndExpr($input, $state)
  let $state := p:parse-OrExpr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "OrExpr", $count, $begin, $end)
};

(:~
 : Parse NameTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-NameTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 20) then                            (: Wildcard :)
      let $state := p:shift(20, $input, $state)             (: Wildcard :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-EQName($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "NameTest", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production CatchErrorList (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CatchErrorList-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(97, $input, $state)         (: S^WS | ('(' ':') | '{' | '|' :)
    return
      if ($state[$p:l1] != 195) then                        (: '|' :)
        $state
      else
        let $state := p:shift(195, $input, $state)          (: '|' :)
        let $state := p:lookahead1W(170, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | Wildcard |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-NameTest($input, $state)
        return p:parse-CatchErrorList-1($input, $state)
};

(:~
 : Parse CatchErrorList.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CatchErrorList($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-NameTest($input, $state)
  let $state := p:parse-CatchErrorList-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "CatchErrorList", $count, $begin, $end)
};

(:~
 : Parse CatchClause.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CatchClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(83, $input, $state)                 (: 'catch' :)
  let $state := p:lookahead1W(170, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | Wildcard |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-CatchErrorList($input, $state)
  let $state := p:shift(193, $input, $state)                (: '{' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-Expr($input, $state)
  let $state := p:shift(197, $input, $state)                (: '}' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "CatchClause", $count, $begin, $end)
};

(:~
 : Parse TryTargetExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-TryTargetExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-Expr($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "TryTargetExpr", $count, $begin, $end)
};

(:~
 : Parse TryClause.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-TryClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(179, $input, $state)                (: 'try' :)
  let $state := p:lookahead1W(58, $input, $state)           (: S^WS | ('(' ':') | '{' :)
  let $state := p:shift(193, $input, $state)                (: '{' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-TryTargetExpr($input, $state)
  let $state := p:shift(197, $input, $state)                (: '}' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "TryClause", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production TryCatchExpr (one or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-TryCatchExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(35, $input, $state)         (: S^WS | ('(' ':') | 'catch' :)
    let $state := p:whitespace($input, $state)
    let $state := p:parse-CatchClause($input, $state)
    let $state := p:lookahead1W(134, $input, $state)        (: S^WS | EOF | ('(' ':') | ')' | ',' | ';' | ']' |
                                                               'ascending' | 'case' | 'catch' | 'collation' | 'count' |
                                                               'default' | 'descending' | 'else' | 'empty' | 'end' |
                                                               'for' | 'group' | 'let' | 'only' | 'order' | 'return' |
                                                               'satisfies' | 'stable' | 'start' | 'where' | '}' :)
    return
      if ($state[$p:l1] != 83) then                         (: 'catch' :)
        $state
      else
        p:parse-TryCatchExpr-1($input, $state)
};

(:~
 : Parse TryCatchExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-TryCatchExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-TryClause($input, $state)
  let $state := p:parse-TryCatchExpr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "TryCatchExpr", $count, $begin, $end)
};

(:~
 : Parse IfExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-IfExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(122, $input, $state)                (: 'if' :)
  let $state := p:lookahead1W(22, $input, $state)           (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(33, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-Expr($input, $state)
  let $state := p:shift(36, $input, $state)                 (: ')' :)
  let $state := p:lookahead1W(55, $input, $state)           (: S^WS | ('(' ':') | 'then' :)
  let $state := p:shift(176, $input, $state)                (: 'then' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ExprSingle($input, $state)
  let $state := p:shift(103, $input, $state)                (: 'else' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ExprSingle($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "IfExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production SequenceTypeUnion (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SequenceTypeUnion-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(95, $input, $state)         (: S^WS | ('(' ':') | 'return' | '|' :)
    return
      if ($state[$p:l1] != 195) then                        (: '|' :)
        $state
      else
        let $state := p:shift(195, $input, $state)          (: '|' :)
        let $state := p:lookahead1W(173, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-SequenceType($input, $state)
        return p:parse-SequenceTypeUnion-1($input, $state)
};

(:~
 : Parse SequenceTypeUnion.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SequenceTypeUnion($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-SequenceType($input, $state)
  let $state := p:parse-SequenceTypeUnion-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "SequenceTypeUnion", $count, $begin, $end)
};

(:~
 : Parse CaseClause.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CaseClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(80, $input, $state)                 (: 'case' :)
  let $state := p:lookahead1W(175, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 30) then                       (: '$' :)
      let $state := p:shift(30, $input, $state)             (: '$' :)
      let $state := p:lookahead1W(168, $input, $state)      (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-VarName($input, $state)
      let $state := p:lookahead1W(30, $input, $state)       (: S^WS | ('(' ':') | 'as' :)
      let $state := p:shift(73, $input, $state)             (: 'as' :)
      return $state
    else
      $state
  let $state := p:lookahead1W(173, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-SequenceTypeUnion($input, $state)
  let $state := p:shift(162, $input, $state)                (: 'return' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ExprSingle($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "CaseClause", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production TypeswitchExpr (one or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-TypeswitchExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(34, $input, $state)         (: S^WS | ('(' ':') | 'case' :)
    let $state := p:whitespace($input, $state)
    let $state := p:parse-CaseClause($input, $state)
    return
      if ($state[$p:l1] != 80) then                         (: 'case' :)
        $state
      else
        p:parse-TypeswitchExpr-1($input, $state)
};

(:~
 : Parse TypeswitchExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-TypeswitchExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(182, $input, $state)                (: 'typeswitch' :)
  let $state := p:lookahead1W(22, $input, $state)           (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(33, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-Expr($input, $state)
  let $state := p:shift(36, $input, $state)                 (: ')' :)
  let $state := p:parse-TypeswitchExpr-1($input, $state)
  let $state := p:shift(94, $input, $state)                 (: 'default' :)
  let $state := p:lookahead1W(65, $input, $state)           (: S^WS | '$' | ('(' ':') | 'return' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 30) then                       (: '$' :)
      let $state := p:shift(30, $input, $state)             (: '$' :)
      let $state := p:lookahead1W(168, $input, $state)      (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-VarName($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(53, $input, $state)           (: S^WS | ('(' ':') | 'return' :)
  let $state := p:shift(162, $input, $state)                (: 'return' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ExprSingle($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "TypeswitchExpr", $count, $begin, $end)
};

(:~
 : Parse SwitchCaseOperand.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SwitchCaseOperand($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-ExprSingle($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "SwitchCaseOperand", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production SwitchCaseClause (one or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SwitchCaseClause-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:shift(80, $input, $state)               (: 'case' :)
    let $state := p:lookahead1W(180, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
    let $state := p:whitespace($input, $state)
    let $state := p:parse-SwitchCaseOperand($input, $state)
    return
      if ($state[$p:l1] != 80) then                         (: 'case' :)
        $state
      else
        p:parse-SwitchCaseClause-1($input, $state)
};

(:~
 : Parse SwitchCaseClause.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SwitchCaseClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-SwitchCaseClause-1($input, $state)
  let $state := p:shift(162, $input, $state)                (: 'return' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ExprSingle($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "SwitchCaseClause", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production Expr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Expr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 39) then                           (: ',' :)
      $state
    else
      let $state := p:shift(39, $input, $state)             (: ',' :)
      let $state := p:lookahead1W(180, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-ExprSingle($input, $state)
      return p:parse-Expr-1($input, $state)
};

(:~
 : Parse Expr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Expr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-ExprSingle($input, $state)
  let $state := p:parse-Expr-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "Expr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production SwitchExpr (one or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SwitchExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(34, $input, $state)         (: S^WS | ('(' ':') | 'case' :)
    let $state := p:whitespace($input, $state)
    let $state := p:parse-SwitchCaseClause($input, $state)
    return
      if ($state[$p:l1] != 80) then                         (: 'case' :)
        $state
      else
        p:parse-SwitchExpr-1($input, $state)
};

(:~
 : Parse SwitchExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SwitchExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(174, $input, $state)                (: 'switch' :)
  let $state := p:lookahead1W(22, $input, $state)           (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(33, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-Expr($input, $state)
  let $state := p:shift(36, $input, $state)                 (: ')' :)
  let $state := p:parse-SwitchExpr-1($input, $state)
  let $state := p:shift(94, $input, $state)                 (: 'default' :)
  let $state := p:lookahead1W(53, $input, $state)           (: S^WS | ('(' ':') | 'return' :)
  let $state := p:shift(162, $input, $state)                (: 'return' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ExprSingle($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "SwitchExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production QuantifiedExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-QuantifiedExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 39) then                           (: ',' :)
      $state
    else
      let $state := p:shift(39, $input, $state)             (: ',' :)
      let $state := p:lookahead1W(21, $input, $state)       (: S^WS | '$' | ('(' ':') :)
      let $state := p:shift(30, $input, $state)             (: '$' :)
      let $state := p:lookahead1W(168, $input, $state)      (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-VarName($input, $state)
      let $state := p:lookahead1W(77, $input, $state)       (: S^WS | ('(' ':') | 'as' | 'in' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 73) then                   (: 'as' :)
          let $state := p:whitespace($input, $state)
          let $state := p:parse-TypeDeclaration($input, $state)
          return $state
        else
          $state
      let $state := p:lookahead1W(45, $input, $state)       (: S^WS | ('(' ':') | 'in' :)
      let $state := p:shift(124, $input, $state)            (: 'in' :)
      let $state := p:lookahead1W(180, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-ExprSingle($input, $state)
      return p:parse-QuantifiedExpr-1($input, $state)
};

(:~
 : Parse QuantifiedExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-QuantifiedExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 169) then                           (: 'some' :)
      let $state := p:shift(169, $input, $state)            (: 'some' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(109, $input, $state)            (: 'every' :)
      return $state
  let $state := p:lookahead1W(21, $input, $state)           (: S^WS | '$' | ('(' ':') :)
  let $state := p:shift(30, $input, $state)                 (: '$' :)
  let $state := p:lookahead1W(168, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-VarName($input, $state)
  let $state := p:lookahead1W(77, $input, $state)           (: S^WS | ('(' ':') | 'as' | 'in' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 73) then                       (: 'as' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-TypeDeclaration($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(45, $input, $state)           (: S^WS | ('(' ':') | 'in' :)
  let $state := p:shift(124, $input, $state)                (: 'in' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ExprSingle($input, $state)
  let $state := p:parse-QuantifiedExpr-1($input, $state)
  let $state := p:shift(163, $input, $state)                (: 'satisfies' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ExprSingle($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "QuantifiedExpr", $count, $begin, $end)
};

(:~
 : Parse ReturnClause.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ReturnClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(162, $input, $state)                (: 'return' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ExprSingle($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "ReturnClause", $count, $begin, $end)
};

(:~
 : Parse CountClause.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CountClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(90, $input, $state)                 (: 'count' :)
  let $state := p:lookahead1W(21, $input, $state)           (: S^WS | '$' | ('(' ':') :)
  let $state := p:shift(30, $input, $state)                 (: '$' :)
  let $state := p:lookahead1W(168, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-VarName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "CountClause", $count, $begin, $end)
};

(:~
 : Parse OrderModifier.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-OrderModifier($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 74                             (: 'ascending' :)
          or $state[$p:l1] = 97) then                       (: 'descending' :)
      let $state :=
        if ($state[$p:l1] = 74) then                        (: 'ascending' :)
          let $state := p:shift(74, $input, $state)         (: 'ascending' :)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:shift(97, $input, $state)         (: 'descending' :)
          return $state
      return $state
    else
      $state
  let $state := p:lookahead1W(130, $input, $state)          (: S^WS | ('(' ':') | ',' | 'collation' | 'count' |
                                                               'empty' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                                               'stable' | 'where' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 104) then                      (: 'empty' :)
      let $state := p:shift(104, $input, $state)            (: 'empty' :)
      let $state := p:lookahead1W(86, $input, $state)       (: S^WS | ('(' ':') | 'greatest' | 'least' :)
      let $state :=
        if ($state[$p:l1] = 117) then                       (: 'greatest' :)
          let $state := p:shift(117, $input, $state)        (: 'greatest' :)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:shift(133, $input, $state)        (: 'least' :)
          return $state
      return $state
    else
      $state
  let $state := p:lookahead1W(129, $input, $state)          (: S^WS | ('(' ':') | ',' | 'collation' | 'count' | 'for' |
                                                               'group' | 'let' | 'order' | 'return' | 'stable' | 'where' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 85) then                       (: 'collation' :)
      let $state := p:shift(85, $input, $state)             (: 'collation' :)
      let $state := p:lookahead1W(17, $input, $state)       (: StringLiteral | S^WS | ('(' ':') :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-URILiteral($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "OrderModifier", $count, $begin, $end)
};

(:~
 : Parse OrderSpec.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-OrderSpec($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-ExprSingle($input, $state)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-OrderModifier($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "OrderSpec", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production OrderSpecList (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-OrderSpecList-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(128, $input, $state)        (: S^WS | ('(' ':') | ',' | 'count' | 'for' | 'group' |
                                                               'let' | 'order' | 'return' | 'stable' | 'where' :)
    return
      if ($state[$p:l1] != 39) then                         (: ',' :)
        $state
      else
        let $state := p:shift(39, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(180, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-OrderSpec($input, $state)
        return p:parse-OrderSpecList-1($input, $state)
};

(:~
 : Parse OrderSpecList.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-OrderSpecList($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-OrderSpec($input, $state)
  let $state := p:parse-OrderSpecList-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "OrderSpecList", $count, $begin, $end)
};

(:~
 : Parse OrderByClause.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-OrderByClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 150) then                           (: 'order' :)
      let $state := p:shift(150, $input, $state)            (: 'order' :)
      let $state := p:lookahead1W(33, $input, $state)       (: S^WS | ('(' ':') | 'by' :)
      let $state := p:shift(79, $input, $state)             (: 'by' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(170, $input, $state)            (: 'stable' :)
      let $state := p:lookahead1W(51, $input, $state)       (: S^WS | ('(' ':') | 'order' :)
      let $state := p:shift(150, $input, $state)            (: 'order' :)
      let $state := p:lookahead1W(33, $input, $state)       (: S^WS | ('(' ':') | 'by' :)
      let $state := p:shift(79, $input, $state)             (: 'by' :)
      return $state
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-OrderSpecList($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "OrderByClause", $count, $begin, $end)
};

(:~
 : Parse GroupingVariable.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-GroupingVariable($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(30, $input, $state)                 (: '$' :)
  let $state := p:lookahead1W(168, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-VarName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "GroupingVariable", $count, $begin, $end)
};

(:~
 : Parse GroupingSpec.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-GroupingSpec($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-GroupingVariable($input, $state)
  let $state := p:lookahead1W(132, $input, $state)          (: S^WS | ('(' ':') | ',' | ':=' | 'as' | 'collation' |
                                                               'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                                               'stable' | 'where' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 49                             (: ':=' :)
          or $state[$p:l1] = 73) then                       (: 'as' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 73) then                   (: 'as' :)
          let $state := p:whitespace($input, $state)
          let $state := p:parse-TypeDeclaration($input, $state)
          return $state
        else
          $state
      let $state := p:lookahead1W(27, $input, $state)       (: S^WS | ('(' ':') | ':=' :)
      let $state := p:shift(49, $input, $state)             (: ':=' :)
      let $state := p:lookahead1W(180, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-ExprSingle($input, $state)
      return $state
    else
      $state
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 85) then                       (: 'collation' :)
      let $state := p:shift(85, $input, $state)             (: 'collation' :)
      let $state := p:lookahead1W(17, $input, $state)       (: StringLiteral | S^WS | ('(' ':') :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-URILiteral($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "GroupingSpec", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production GroupingSpecList (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-GroupingSpecList-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(128, $input, $state)        (: S^WS | ('(' ':') | ',' | 'count' | 'for' | 'group' |
                                                               'let' | 'order' | 'return' | 'stable' | 'where' :)
    return
      if ($state[$p:l1] != 39) then                         (: ',' :)
        $state
      else
        let $state := p:shift(39, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(21, $input, $state)     (: S^WS | '$' | ('(' ':') :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-GroupingSpec($input, $state)
        return p:parse-GroupingSpecList-1($input, $state)
};

(:~
 : Parse GroupingSpecList.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-GroupingSpecList($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-GroupingSpec($input, $state)
  let $state := p:parse-GroupingSpecList-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "GroupingSpecList", $count, $begin, $end)
};

(:~
 : Parse GroupByClause.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-GroupByClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(118, $input, $state)                (: 'group' :)
  let $state := p:lookahead1W(33, $input, $state)           (: S^WS | ('(' ':') | 'by' :)
  let $state := p:shift(79, $input, $state)                 (: 'by' :)
  let $state := p:lookahead1W(21, $input, $state)           (: S^WS | '$' | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-GroupingSpecList($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "GroupByClause", $count, $begin, $end)
};

(:~
 : Parse WhereClause.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-WhereClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(189, $input, $state)                (: 'where' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ExprSingle($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "WhereClause", $count, $begin, $end)
};

(:~
 : Parse IntermediateClause.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-IntermediateClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 114                                 (: 'for' :)
     or $state[$p:l1] = 134) then                           (: 'let' :)
      let $state := p:parse-InitialClause($input, $state)
      return $state
    else if ($state[$p:l1] = 189) then                      (: 'where' :)
      let $state := p:parse-WhereClause($input, $state)
      return $state
    else if ($state[$p:l1] = 118) then                      (: 'group' :)
      let $state := p:parse-GroupByClause($input, $state)
      return $state
    else if ($state[$p:l1] = 90) then                       (: 'count' :)
      let $state := p:parse-CountClause($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-OrderByClause($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "IntermediateClause", $count, $begin, $end)
};

(:~
 : Parse SlidingWindowClause.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SlidingWindowClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(168, $input, $state)                (: 'sliding' :)
  let $state := p:lookahead1W(57, $input, $state)           (: S^WS | ('(' ':') | 'window' :)
  let $state := p:shift(190, $input, $state)                (: 'window' :)
  let $state := p:lookahead1W(21, $input, $state)           (: S^WS | '$' | ('(' ':') :)
  let $state := p:shift(30, $input, $state)                 (: '$' :)
  let $state := p:lookahead1W(168, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-VarName($input, $state)
  let $state := p:lookahead1W(77, $input, $state)           (: S^WS | ('(' ':') | 'as' | 'in' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 73) then                       (: 'as' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-TypeDeclaration($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(45, $input, $state)           (: S^WS | ('(' ':') | 'in' :)
  let $state := p:shift(124, $input, $state)                (: 'in' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ExprSingle($input, $state)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-WindowStartCondition($input, $state)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-WindowEndCondition($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "SlidingWindowClause", $count, $begin, $end)
};

(:~
 : Parse WindowEndCondition.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-WindowEndCondition($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 147) then                      (: 'only' :)
      let $state := p:shift(147, $input, $state)            (: 'only' :)
      return $state
    else
      $state
  let $state := p:lookahead1W(44, $input, $state)           (: S^WS | ('(' ':') | 'end' :)
  let $state := p:shift(107, $input, $state)                (: 'end' :)
  let $state := p:lookahead1W(118, $input, $state)          (: S^WS | '$' | ('(' ':') | 'at' | 'next' | 'previous' |
                                                               'when' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-WindowVars($input, $state)
  let $state := p:lookahead1W(56, $input, $state)           (: S^WS | ('(' ':') | 'when' :)
  let $state := p:shift(188, $input, $state)                (: 'when' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ExprSingle($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "WindowEndCondition", $count, $begin, $end)
};

(:~
 : Parse NextItem.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-NextItem($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-EQName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "NextItem", $count, $begin, $end)
};

(:~
 : Parse PreviousItem.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-PreviousItem($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-EQName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "PreviousItem", $count, $begin, $end)
};

(:~
 : Parse CurrentItem.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CurrentItem($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-EQName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "CurrentItem", $count, $begin, $end)
};

(:~
 : Parse WindowVars.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-WindowVars($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 30) then                       (: '$' :)
      let $state := p:shift(30, $input, $state)             (: '$' :)
      let $state := p:lookahead1W(168, $input, $state)      (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-CurrentItem($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(116, $input, $state)          (: S^WS | ('(' ':') | 'at' | 'next' | 'previous' | 'when' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 75) then                       (: 'at' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-PositionalVar($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(111, $input, $state)          (: S^WS | ('(' ':') | 'next' | 'previous' | 'when' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 160) then                      (: 'previous' :)
      let $state := p:shift(160, $input, $state)            (: 'previous' :)
      let $state := p:lookahead1W(21, $input, $state)       (: S^WS | '$' | ('(' ':') :)
      let $state := p:shift(30, $input, $state)             (: '$' :)
      let $state := p:lookahead1W(168, $input, $state)      (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-PreviousItem($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(89, $input, $state)           (: S^WS | ('(' ':') | 'next' | 'when' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 142) then                      (: 'next' :)
      let $state := p:shift(142, $input, $state)            (: 'next' :)
      let $state := p:lookahead1W(21, $input, $state)       (: S^WS | '$' | ('(' ':') :)
      let $state := p:shift(30, $input, $state)             (: '$' :)
      let $state := p:lookahead1W(168, $input, $state)      (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-NextItem($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "WindowVars", $count, $begin, $end)
};

(:~
 : Parse WindowStartCondition.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-WindowStartCondition($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(171, $input, $state)                (: 'start' :)
  let $state := p:lookahead1W(118, $input, $state)          (: S^WS | '$' | ('(' ':') | 'at' | 'next' | 'previous' |
                                                               'when' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-WindowVars($input, $state)
  let $state := p:lookahead1W(56, $input, $state)           (: S^WS | ('(' ':') | 'when' :)
  let $state := p:shift(188, $input, $state)                (: 'when' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ExprSingle($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "WindowStartCondition", $count, $begin, $end)
};

(:~
 : Parse TumblingWindowClause.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-TumblingWindowClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(180, $input, $state)                (: 'tumbling' :)
  let $state := p:lookahead1W(57, $input, $state)           (: S^WS | ('(' ':') | 'window' :)
  let $state := p:shift(190, $input, $state)                (: 'window' :)
  let $state := p:lookahead1W(21, $input, $state)           (: S^WS | '$' | ('(' ':') :)
  let $state := p:shift(30, $input, $state)                 (: '$' :)
  let $state := p:lookahead1W(168, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-VarName($input, $state)
  let $state := p:lookahead1W(77, $input, $state)           (: S^WS | ('(' ':') | 'as' | 'in' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 73) then                       (: 'as' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-TypeDeclaration($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(45, $input, $state)           (: S^WS | ('(' ':') | 'in' :)
  let $state := p:shift(124, $input, $state)                (: 'in' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ExprSingle($input, $state)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-WindowStartCondition($input, $state)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 107                            (: 'end' :)
          or $state[$p:l1] = 147) then                      (: 'only' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-WindowEndCondition($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "TumblingWindowClause", $count, $begin, $end)
};

(:~
 : Parse WindowClause.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-WindowClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(114, $input, $state)                (: 'for' :)
  let $state := p:lookahead1W(96, $input, $state)           (: S^WS | ('(' ':') | 'sliding' | 'tumbling' :)
  let $state :=
    if ($state[$p:l1] = 180) then                           (: 'tumbling' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-TumblingWindowClause($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:whitespace($input, $state)
      let $state := p:parse-SlidingWindowClause($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "WindowClause", $count, $begin, $end)
};

(:~
 : Parse LetBinding.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-LetBinding($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(30, $input, $state)                 (: '$' :)
  let $state := p:lookahead1W(168, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-VarName($input, $state)
  let $state := p:lookahead1W(73, $input, $state)           (: S^WS | ('(' ':') | ':=' | 'as' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 73) then                       (: 'as' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-TypeDeclaration($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(27, $input, $state)           (: S^WS | ('(' ':') | ':=' :)
  let $state := p:shift(49, $input, $state)                 (: ':=' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ExprSingle($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "LetBinding", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production LetClause (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-LetClause-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 39) then                           (: ',' :)
      $state
    else
      let $state := p:shift(39, $input, $state)             (: ',' :)
      let $state := p:lookahead1W(21, $input, $state)       (: S^WS | '$' | ('(' ':') :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-LetBinding($input, $state)
      return p:parse-LetClause-1($input, $state)
};

(:~
 : Parse LetClause.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-LetClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(134, $input, $state)                (: 'let' :)
  let $state := p:lookahead1W(21, $input, $state)           (: S^WS | '$' | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-LetBinding($input, $state)
  let $state := p:parse-LetClause-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "LetClause", $count, $begin, $end)
};

(:~
 : Parse PositionalVar.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-PositionalVar($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(75, $input, $state)                 (: 'at' :)
  let $state := p:lookahead1W(21, $input, $state)           (: S^WS | '$' | ('(' ':') :)
  let $state := p:shift(30, $input, $state)                 (: '$' :)
  let $state := p:lookahead1W(168, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-VarName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "PositionalVar", $count, $begin, $end)
};

(:~
 : Parse AllowingEmpty.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AllowingEmpty($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(69, $input, $state)                 (: 'allowing' :)
  let $state := p:lookahead1W(43, $input, $state)           (: S^WS | ('(' ':') | 'empty' :)
  let $state := p:shift(104, $input, $state)                (: 'empty' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "AllowingEmpty", $count, $begin, $end)
};

(:~
 : Parse TypeDeclaration.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-TypeDeclaration($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(73, $input, $state)                 (: 'as' :)
  let $state := p:lookahead1W(173, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-SequenceType($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "TypeDeclaration", $count, $begin, $end)
};

(:~
 : Parse VarName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-VarName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-EQName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "VarName", $count, $begin, $end)
};

(:~
 : Parse ForBinding.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ForBinding($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(30, $input, $state)                 (: '$' :)
  let $state := p:lookahead1W(168, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-VarName($input, $state)
  let $state := p:lookahead1W(115, $input, $state)          (: S^WS | ('(' ':') | 'allowing' | 'as' | 'at' | 'in' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 73) then                       (: 'as' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-TypeDeclaration($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(107, $input, $state)          (: S^WS | ('(' ':') | 'allowing' | 'at' | 'in' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 69) then                       (: 'allowing' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-AllowingEmpty($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(79, $input, $state)           (: S^WS | ('(' ':') | 'at' | 'in' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 75) then                       (: 'at' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-PositionalVar($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(45, $input, $state)           (: S^WS | ('(' ':') | 'in' :)
  let $state := p:shift(124, $input, $state)                (: 'in' :)
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ExprSingle($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "ForBinding", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production ForClause (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ForClause-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 39) then                           (: ',' :)
      $state
    else
      let $state := p:shift(39, $input, $state)             (: ',' :)
      let $state := p:lookahead1W(21, $input, $state)       (: S^WS | '$' | ('(' ':') :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-ForBinding($input, $state)
      return p:parse-ForClause-1($input, $state)
};

(:~
 : Parse ForClause.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ForClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(114, $input, $state)                (: 'for' :)
  let $state := p:lookahead1W(21, $input, $state)           (: S^WS | '$' | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ForBinding($input, $state)
  let $state := p:parse-ForClause-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "ForClause", $count, $begin, $end)
};

(:~
 : Parse InitialClause.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-InitialClause($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 114) then                           (: 'for' :)
      let $state := p:lookahead2W(102, $input, $state)      (: S^WS | '$' | ('(' ':') | 'sliding' | 'tumbling' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 7794) then                          (: 'for' '$' :)
      let $state := p:parse-ForClause($input, $state)
      return $state
    else if ($state[$p:lk] = 134) then                      (: 'let' :)
      let $state := p:parse-LetClause($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-WindowClause($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "InitialClause", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production FLWORExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-FLWORExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(126, $input, $state)        (: S^WS | ('(' ':') | 'count' | 'for' | 'group' | 'let' |
                                                               'order' | 'return' | 'stable' | 'where' :)
    return
      if ($state[$p:l1] = 162) then                         (: 'return' :)
        $state
      else
        let $state := p:whitespace($input, $state)
        let $state := p:parse-IntermediateClause($input, $state)
        return p:parse-FLWORExpr-1($input, $state)
};

(:~
 : Parse FLWORExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-FLWORExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-InitialClause($input, $state)
  let $state := p:parse-FLWORExpr-1($input, $state)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ReturnClause($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "FLWORExpr", $count, $begin, $end)
};

(:~
 : Parse ExprSingle.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ExprSingle($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 114) then                           (: 'for' :)
      let $state := p:lookahead2W(163, $input, $state)      (: S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | ('(' ':') |
                                                               ')' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                                               'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'sliding' | 'stable' | 'start' | 'to' | 'treat' |
                                                               'tumbling' | 'union' | 'where' | '|' | '||' | '}' :)
      return $state
    else if ($state[$p:l1] = 179) then                      (: 'try' :)
      let $state := p:lookahead2W(161, $input, $state)      (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' |
                                                               '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '{' | '|' | '||' | '}' :)
      return $state
    else if ($state[$p:l1] = 109                            (: 'every' :)
          or $state[$p:l1] = 134                            (: 'let' :)
          or $state[$p:l1] = 169) then                      (: 'some' :)
      let $state := p:lookahead2W(159, $input, $state)      (: S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | ('(' ':') |
                                                               ')' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                                               'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '|' | '||' | '}' :)
      return $state
    else if ($state[$p:l1] = 122                            (: 'if' :)
          or $state[$p:l1] = 174                            (: 'switch' :)
          or $state[$p:l1] = 182) then                      (: 'typeswitch' :)
      let $state := p:lookahead2W(157, $input, $state)      (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' |
                                                               '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'and' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '|' | '||' | '}' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 7794                                (: 'for' '$' :)
     or $state[$p:lk] = 7814                                (: 'let' '$' :)
     or $state[$p:lk] = 43122                               (: 'for' 'sliding' :)
     or $state[$p:lk] = 46194) then                         (: 'for' 'tumbling' :)
      let $state := p:parse-FLWORExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 7789                           (: 'every' '$' :)
          or $state[$p:lk] = 7849) then                     (: 'some' '$' :)
      let $state := p:parse-QuantifiedExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 8622) then                     (: 'switch' '(' :)
      let $state := p:parse-SwitchExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 8630) then                     (: 'typeswitch' '(' :)
      let $state := p:parse-TypeswitchExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 8570) then                     (: 'if' '(' :)
      let $state := p:parse-IfExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 49587) then                    (: 'try' '{' :)
      let $state := p:parse-TryCatchExpr($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-OrExpr($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ExprSingle", $count, $begin, $end)
};

(:~
 : Parse VarValue.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-VarValue($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-ExprSingle($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "VarValue", $count, $begin, $end)
};

(:~
 : Parse ParenthesizedItemType.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ParenthesizedItemType($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(33, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(173, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ItemType($input, $state)
  let $state := p:lookahead1W(23, $input, $state)           (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(36, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "ParenthesizedItemType", $count, $begin, $end)
};

(:~
 : Parse AtomicOrUnionType.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AtomicOrUnionType($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-EQName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "AtomicOrUnionType", $count, $begin, $end)
};

(:~
 : Parse OccurrenceIndicator.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-OccurrenceIndicator($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 62) then                            (: '?' :)
      let $state := p:shift(62, $input, $state)             (: '?' :)
      return $state
    else if ($state[$p:l1] = 37) then                       (: '*' :)
      let $state := p:shift(37, $input, $state)             (: '*' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(38, $input, $state)             (: '+' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "OccurrenceIndicator", $count, $begin, $end)
};

(:~
 : Parse SequenceType.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SequenceType($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 105) then                           (: 'empty-sequence' :)
      let $state := p:lookahead2W(156, $input, $state)      (: S^WS | EOF | '!=' | '(' | ('(' ':') | ')' | '*' | '+' |
                                                               ',' | '-' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                                               '>=' | '>>' | '?' | ']' | 'allowing' | 'and' |
                                                               'ascending' | 'at' | 'case' | 'collation' | 'count' |
                                                               'default' | 'descending' | 'div' | 'else' | 'empty' |
                                                               'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'in' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'union' | 'where' | '{' |
                                                               '|' | '||' | '}' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 8553) then                          (: 'empty-sequence' '(' :)
      let $state := p:shift(105, $input, $state)            (: 'empty-sequence' :)
      let $state := p:lookahead1W(22, $input, $state)       (: S^WS | '(' | ('(' ':') :)
      let $state := p:shift(33, $input, $state)             (: '(' :)
      let $state := p:lookahead1W(23, $input, $state)       (: S^WS | ('(' ':') | ')' :)
      let $state := p:shift(36, $input, $state)             (: ')' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-ItemType($input, $state)
      let $state := p:lookahead1W(152, $input, $state)      (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                                               '>>' | '?' | ']' | 'allowing' | 'and' | 'ascending' |
                                                               'at' | 'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                                               'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'in' | 'instance' | 'intersect' | 'is' | 'le' |
                                                               'let' | 'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' |
                                                               'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                                               'union' | 'where' | '{' | '|' | '||' | '}' :)
      let $state :=
        if ($state[$p:l1] = 37                              (: '*' :)
         or $state[$p:l1] = 38                              (: '+' :)
         or $state[$p:l1] = 62) then                        (: '?' :)
          let $state := p:whitespace($input, $state)
          let $state := p:parse-OccurrenceIndicator($input, $state)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          $state
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "SequenceType", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production TypedFunctionTest (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-TypedFunctionTest-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(69, $input, $state)         (: S^WS | ('(' ':') | ')' | ',' :)
    return
      if ($state[$p:l1] != 39) then                         (: ',' :)
        $state
      else
        let $state := p:shift(39, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(173, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-SequenceType($input, $state)
        return p:parse-TypedFunctionTest-1($input, $state)
};

(:~
 : Parse TypedFunctionTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-TypedFunctionTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(115, $input, $state)                (: 'function' :)
  let $state := p:lookahead1W(22, $input, $state)           (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(33, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(176, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | ')' | 'ancestor' | 'ancestor-or-self' |
                                                               'and' | 'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 36) then                      (: ')' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-SequenceType($input, $state)
      let $state := p:parse-TypedFunctionTest-1($input, $state)
      return $state
    else
      $state
  let $state := p:shift(36, $input, $state)                 (: ')' :)
  let $state := p:lookahead1W(30, $input, $state)           (: S^WS | ('(' ':') | 'as' :)
  let $state := p:shift(73, $input, $state)                 (: 'as' :)
  let $state := p:lookahead1W(173, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-SequenceType($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "TypedFunctionTest", $count, $begin, $end)
};

(:~
 : Parse AnyFunctionTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AnyFunctionTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(115, $input, $state)                (: 'function' :)
  let $state := p:lookahead1W(22, $input, $state)           (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(33, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(24, $input, $state)           (: S^WS | ('(' ':') | '*' :)
  let $state := p:shift(37, $input, $state)                 (: '*' :)
  let $state := p:lookahead1W(23, $input, $state)           (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(36, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "AnyFunctionTest", $count, $begin, $end)
};

(:~
 : Parse NumericLiteral.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-NumericLiteral($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 1) then                             (: IntegerLiteral :)
      let $state := p:shift(1, $input, $state)              (: IntegerLiteral :)
      return $state
    else if ($state[$p:l1] = 2) then                        (: DecimalLiteral :)
      let $state := p:shift(2, $input, $state)              (: DecimalLiteral :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(3, $input, $state)              (: DoubleLiteral :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "NumericLiteral", $count, $begin, $end)
};

(:~
 : Parse Literal.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Literal($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 4) then                             (: StringLiteral :)
      let $state := p:shift(4, $input, $state)              (: StringLiteral :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-NumericLiteral($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "Literal", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production Annotation (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Annotation-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(69, $input, $state)         (: S^WS | ('(' ':') | ')' | ',' :)
    return
      if ($state[$p:l1] != 39) then                         (: ',' :)
        $state
      else
        let $state := p:shift(39, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(112, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | S^WS | ('(' ':') :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-Literal($input, $state)
        return p:parse-Annotation-1($input, $state)
};

(:~
 : Parse Annotation.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Annotation($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(31, $input, $state)                 (: '%' :)
  let $state := p:lookahead1W(168, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-EQName($input, $state)
  let $state := p:lookahead1W(114, $input, $state)          (: S^WS | '%' | '(' | ('(' ':') | 'function' | 'variable' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 33) then                       (: '(' :)
      let $state := p:shift(33, $input, $state)             (: '(' :)
      let $state := p:lookahead1W(112, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | S^WS | ('(' ':') :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-Literal($input, $state)
      let $state := p:parse-Annotation-1($input, $state)
      let $state := p:shift(36, $input, $state)             (: ')' :)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "Annotation", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production FunctionTest (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-FunctionTest-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(67, $input, $state)         (: S^WS | '%' | ('(' ':') | 'function' :)
    return
      if ($state[$p:l1] != 31) then                         (: '%' :)
        $state
      else
        let $state := p:whitespace($input, $state)
        let $state := p:parse-Annotation($input, $state)
        return p:parse-FunctionTest-1($input, $state)
};

(:~
 : Parse FunctionTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-FunctionTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-FunctionTest-1($input, $state)
  let $state :=
    if ($state[$p:l1] = 115) then                           (: 'function' :)
      let $state := p:lookahead2W(22, $input, $state)       (: S^WS | '(' | ('(' ':') :)
      let $state :=
        if ($state[$p:lk] = 8563) then                      (: 'function' '(' :)
          let $state := p:lookahead3W(177, $input, $state)  (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | ')' | '*' | 'ancestor' | 'ancestor-or-self' |
                                                               'and' | 'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
          return $state
        else
          $state
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 2433395) then                       (: 'function' '(' '*' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-AnyFunctionTest($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:whitespace($input, $state)
      let $state := p:parse-TypedFunctionTest($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "FunctionTest", $count, $begin, $end)
};

(:~
 : Parse AnyKindTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AnyKindTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(145, $input, $state)                (: 'node' :)
  let $state := p:lookahead1W(22, $input, $state)           (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(33, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(23, $input, $state)           (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(36, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "AnyKindTest", $count, $begin, $end)
};

(:~
 : Parse NamespaceNodeTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-NamespaceNodeTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(140, $input, $state)                (: 'namespace-node' :)
  let $state := p:lookahead1W(22, $input, $state)           (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(33, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(23, $input, $state)           (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(36, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "NamespaceNodeTest", $count, $begin, $end)
};

(:~
 : Parse TextTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-TextTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(175, $input, $state)                (: 'text' :)
  let $state := p:lookahead1W(22, $input, $state)           (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(33, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(23, $input, $state)           (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(36, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "TextTest", $count, $begin, $end)
};

(:~
 : Parse CommentTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CommentTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(86, $input, $state)                 (: 'comment' :)
  let $state := p:lookahead1W(22, $input, $state)           (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(33, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(23, $input, $state)           (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(36, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "CommentTest", $count, $begin, $end)
};

(:~
 : Parse PITest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-PITest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(161, $input, $state)                (: 'processing-instruction' :)
  let $state := p:lookahead1W(22, $input, $state)           (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(33, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(137, $input, $state)          (: StringLiteral | NCName^Token | S^WS | ('(' ':') | ')' |
                                                               'and' | 'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 36) then                      (: ')' :)
      let $state :=
        if ($state[$p:l1] = 4) then                         (: StringLiteral :)
          let $state := p:shift(4, $input, $state)          (: StringLiteral :)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:whitespace($input, $state)
          let $state := p:parse-NCName($input, $state)
          return $state
      return $state
    else
      $state
  let $state := p:lookahead1W(23, $input, $state)           (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(36, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "PITest", $count, $begin, $end)
};

(:~
 : Parse AttributeDeclaration.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AttributeDeclaration($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-AttributeName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "AttributeDeclaration", $count, $begin, $end)
};

(:~
 : Parse SchemaAttributeTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SchemaAttributeTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(165, $input, $state)                (: 'schema-attribute' :)
  let $state := p:lookahead1W(22, $input, $state)           (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(33, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(168, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-AttributeDeclaration($input, $state)
  let $state := p:lookahead1W(23, $input, $state)           (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(36, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "SchemaAttributeTest", $count, $begin, $end)
};

(:~
 : Parse AttributeName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AttributeName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-EQName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "AttributeName", $count, $begin, $end)
};

(:~
 : Parse AttribNameOrWildcard.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AttribNameOrWildcard($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 37) then                            (: '*' :)
      let $state := p:shift(37, $input, $state)             (: '*' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-AttributeName($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "AttribNameOrWildcard", $count, $begin, $end)
};

(:~
 : Parse AttributeTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-AttributeTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(76, $input, $state)                 (: 'attribute' :)
  let $state := p:lookahead1W(22, $input, $state)           (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(33, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(174, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | ('(' ':') | ')' |
                                                               '*' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 36) then                      (: ')' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-AttribNameOrWildcard($input, $state)
      let $state := p:lookahead1W(69, $input, $state)       (: S^WS | ('(' ':') | ')' | ',' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 39) then                   (: ',' :)
          let $state := p:shift(39, $input, $state)         (: ',' :)
          let $state := p:lookahead1W(168, $input, $state)  (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
          let $state := p:whitespace($input, $state)
          let $state := p:parse-TypeName($input, $state)
          return $state
        else
          $state
      return $state
    else
      $state
  let $state := p:lookahead1W(23, $input, $state)           (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(36, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "AttributeTest", $count, $begin, $end)
};

(:~
 : Parse ElementDeclaration.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ElementDeclaration($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-ElementName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "ElementDeclaration", $count, $begin, $end)
};

(:~
 : Parse SchemaElementTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SchemaElementTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(166, $input, $state)                (: 'schema-element' :)
  let $state := p:lookahead1W(22, $input, $state)           (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(33, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(168, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-ElementDeclaration($input, $state)
  let $state := p:lookahead1W(23, $input, $state)           (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(36, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "SchemaElementTest", $count, $begin, $end)
};

(:~
 : Parse TypeName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-TypeName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-EQName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "TypeName", $count, $begin, $end)
};

(:~
 : Parse ElementName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ElementName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-EQName($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "ElementName", $count, $begin, $end)
};

(:~
 : Parse ElementNameOrWildcard.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ElementNameOrWildcard($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 37) then                            (: '*' :)
      let $state := p:shift(37, $input, $state)             (: '*' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-ElementName($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ElementNameOrWildcard", $count, $begin, $end)
};

(:~
 : Parse ElementTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ElementTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(102, $input, $state)                (: 'element' :)
  let $state := p:lookahead1W(22, $input, $state)           (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(33, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(174, $input, $state)          (: URIQualifiedName | QName^Token | S^WS | ('(' ':') | ')' |
                                                               '*' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 36) then                      (: ')' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-ElementNameOrWildcard($input, $state)
      let $state := p:lookahead1W(69, $input, $state)       (: S^WS | ('(' ':') | ')' | ',' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 39) then                   (: ',' :)
          let $state := p:shift(39, $input, $state)         (: ',' :)
          let $state := p:lookahead1W(168, $input, $state)  (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
          let $state := p:whitespace($input, $state)
          let $state := p:parse-TypeName($input, $state)
          let $state := p:lookahead1W(70, $input, $state)   (: S^WS | ('(' ':') | ')' | '?' :)
          let $state :=
            if ($state[$p:error]) then
              $state
            else if ($state[$p:l1] = 62) then               (: '?' :)
              let $state := p:shift(62, $input, $state)     (: '?' :)
              return $state
            else
              $state
          return $state
        else
          $state
      return $state
    else
      $state
  let $state := p:lookahead1W(23, $input, $state)           (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(36, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "ElementTest", $count, $begin, $end)
};

(:~
 : Parse DocumentTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-DocumentTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(101, $input, $state)                (: 'document-node' :)
  let $state := p:lookahead1W(22, $input, $state)           (: S^WS | '(' | ('(' ':') :)
  let $state := p:shift(33, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(105, $input, $state)          (: S^WS | ('(' ':') | ')' | 'element' | 'schema-element' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 36) then                      (: ')' :)
      let $state :=
        if ($state[$p:l1] = 102) then                       (: 'element' :)
          let $state := p:whitespace($input, $state)
          let $state := p:parse-ElementTest($input, $state)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:whitespace($input, $state)
          let $state := p:parse-SchemaElementTest($input, $state)
          return $state
      return $state
    else
      $state
  let $state := p:lookahead1W(23, $input, $state)           (: S^WS | ('(' ':') | ')' :)
  let $state := p:shift(36, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "DocumentTest", $count, $begin, $end)
};

(:~
 : Parse KindTest.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-KindTest($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 101) then                           (: 'document-node' :)
      let $state := p:parse-DocumentTest($input, $state)
      return $state
    else if ($state[$p:l1] = 102) then                      (: 'element' :)
      let $state := p:parse-ElementTest($input, $state)
      return $state
    else if ($state[$p:l1] = 76) then                       (: 'attribute' :)
      let $state := p:parse-AttributeTest($input, $state)
      return $state
    else if ($state[$p:l1] = 166) then                      (: 'schema-element' :)
      let $state := p:parse-SchemaElementTest($input, $state)
      return $state
    else if ($state[$p:l1] = 165) then                      (: 'schema-attribute' :)
      let $state := p:parse-SchemaAttributeTest($input, $state)
      return $state
    else if ($state[$p:l1] = 161) then                      (: 'processing-instruction' :)
      let $state := p:parse-PITest($input, $state)
      return $state
    else if ($state[$p:l1] = 86) then                       (: 'comment' :)
      let $state := p:parse-CommentTest($input, $state)
      return $state
    else if ($state[$p:l1] = 175) then                      (: 'text' :)
      let $state := p:parse-TextTest($input, $state)
      return $state
    else if ($state[$p:l1] = 140) then                      (: 'namespace-node' :)
      let $state := p:parse-NamespaceNodeTest($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-AnyKindTest($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "KindTest", $count, $begin, $end)
};

(:~
 : Parse ItemType.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ItemType($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 76                                  (: 'attribute' :)
     or $state[$p:l1] = 86                                  (: 'comment' :)
     or $state[$p:l1] = 101                                 (: 'document-node' :)
     or $state[$p:l1] = 102                                 (: 'element' :)
     or $state[$p:l1] = 115                                 (: 'function' :)
     or $state[$p:l1] = 130                                 (: 'item' :)
     or $state[$p:l1] = 140                                 (: 'namespace-node' :)
     or $state[$p:l1] = 145                                 (: 'node' :)
     or $state[$p:l1] = 161                                 (: 'processing-instruction' :)
     or $state[$p:l1] = 165                                 (: 'schema-attribute' :)
     or $state[$p:l1] = 166                                 (: 'schema-element' :)
     or $state[$p:l1] = 175) then                           (: 'text' :)
      let $state := p:lookahead2W(156, $input, $state)      (: S^WS | EOF | '!=' | '(' | ('(' ':') | ')' | '*' | '+' |
                                                               ',' | '-' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                                               '>=' | '>>' | '?' | ']' | 'allowing' | 'and' |
                                                               'ascending' | 'at' | 'case' | 'collation' | 'count' |
                                                               'default' | 'descending' | 'div' | 'else' | 'empty' |
                                                               'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'in' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'union' | 'where' | '{' |
                                                               '|' | '||' | '}' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 8524                                (: 'attribute' '(' :)
     or $state[$p:lk] = 8534                                (: 'comment' '(' :)
     or $state[$p:lk] = 8549                                (: 'document-node' '(' :)
     or $state[$p:lk] = 8550                                (: 'element' '(' :)
     or $state[$p:lk] = 8588                                (: 'namespace-node' '(' :)
     or $state[$p:lk] = 8593                                (: 'node' '(' :)
     or $state[$p:lk] = 8609                                (: 'processing-instruction' '(' :)
     or $state[$p:lk] = 8613                                (: 'schema-attribute' '(' :)
     or $state[$p:lk] = 8614                                (: 'schema-element' '(' :)
     or $state[$p:lk] = 8623) then                          (: 'text' '(' :)
      let $state := p:parse-KindTest($input, $state)
      return $state
    else if ($state[$p:lk] = 8578) then                     (: 'item' '(' :)
      let $state := p:shift(130, $input, $state)            (: 'item' :)
      let $state := p:lookahead1W(22, $input, $state)       (: S^WS | '(' | ('(' ':') :)
      let $state := p:shift(33, $input, $state)             (: '(' :)
      let $state := p:lookahead1W(23, $input, $state)       (: S^WS | ('(' ':') | ')' :)
      let $state := p:shift(36, $input, $state)             (: ')' :)
      return $state
    else if ($state[$p:lk] = 31                             (: '%' :)
          or $state[$p:lk] = 8563) then                     (: 'function' '(' :)
      let $state := p:parse-FunctionTest($input, $state)
      return $state
    else if ($state[$p:lk] = 33) then                       (: '(' :)
      let $state := p:parse-ParenthesizedItemType($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-AtomicOrUnionType($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ItemType", $count, $begin, $end)
};

(:~
 : Parse ContextItemDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ContextItemDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(93, $input, $state)                 (: 'declare' :)
  let $state := p:lookahead1W(38, $input, $state)           (: S^WS | ('(' ':') | 'context' :)
  let $state := p:shift(88, $input, $state)                 (: 'context' :)
  let $state := p:lookahead1W(46, $input, $state)           (: S^WS | ('(' ':') | 'item' :)
  let $state := p:shift(130, $input, $state)                (: 'item' :)
  let $state := p:lookahead1W(106, $input, $state)          (: S^WS | ('(' ':') | ':=' | 'as' | 'external' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 73) then                       (: 'as' :)
      let $state := p:shift(73, $input, $state)             (: 'as' :)
      let $state := p:lookahead1W(173, $input, $state)      (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-ItemType($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(74, $input, $state)           (: S^WS | ('(' ':') | ':=' | 'external' :)
  let $state :=
    if ($state[$p:l1] = 49) then                            (: ':=' :)
      let $state := p:shift(49, $input, $state)             (: ':=' :)
      let $state := p:lookahead1W(180, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-VarValue($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(111, $input, $state)            (: 'external' :)
      let $state := p:lookahead1W(72, $input, $state)       (: S^WS | ('(' ':') | ':=' | ';' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 49) then                   (: ':=' :)
          let $state := p:shift(49, $input, $state)         (: ':=' :)
          let $state := p:lookahead1W(180, $input, $state)  (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
          let $state := p:whitespace($input, $state)
          let $state := p:parse-VarDefaultValue($input, $state)
          return $state
        else
          $state
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ContextItemDecl", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production ModuleImport (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ModuleImport-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(71, $input, $state)         (: S^WS | ('(' ':') | ',' | ';' :)
    return
      if ($state[$p:l1] != 39) then                         (: ',' :)
        $state
      else
        let $state := p:shift(39, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(17, $input, $state)     (: StringLiteral | S^WS | ('(' ':') :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-URILiteral($input, $state)
        return p:parse-ModuleImport-1($input, $state)
};

(:~
 : Parse ModuleImport.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ModuleImport($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(123, $input, $state)                (: 'import' :)
  let $state := p:lookahead1W(47, $input, $state)           (: S^WS | ('(' ':') | 'module' :)
  let $state := p:shift(138, $input, $state)                (: 'module' :)
  let $state := p:lookahead1W(60, $input, $state)           (: StringLiteral | S^WS | ('(' ':') | 'namespace' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 139) then                      (: 'namespace' :)
      let $state := p:shift(139, $input, $state)            (: 'namespace' :)
      let $state := p:lookahead1W(135, $input, $state)      (: NCName^Token | S^WS | ('(' ':') | 'and' | 'ascending' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                                               'default' | 'descending' | 'div' | 'else' | 'empty' |
                                                               'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                                               'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' |
                                                               'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                                               'treat' | 'union' | 'where' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-NCName($input, $state)
      let $state := p:lookahead1W(29, $input, $state)       (: S^WS | ('(' ':') | '=' :)
      let $state := p:shift(58, $input, $state)             (: '=' :)
      return $state
    else
      $state
  let $state := p:lookahead1W(17, $input, $state)           (: StringLiteral | S^WS | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-URILiteral($input, $state)
  let $state := p:lookahead1W(75, $input, $state)           (: S^WS | ('(' ':') | ';' | 'at' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 75) then                       (: 'at' :)
      let $state := p:shift(75, $input, $state)             (: 'at' :)
      let $state := p:lookahead1W(17, $input, $state)       (: StringLiteral | S^WS | ('(' ':') :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-URILiteral($input, $state)
      let $state := p:parse-ModuleImport-1($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ModuleImport", $count, $begin, $end)
};

(:~
 : Parse SchemaPrefix.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SchemaPrefix($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 139) then                           (: 'namespace' :)
      let $state := p:shift(139, $input, $state)            (: 'namespace' :)
      let $state := p:lookahead1W(135, $input, $state)      (: NCName^Token | S^WS | ('(' ':') | 'and' | 'ascending' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                                               'default' | 'descending' | 'div' | 'else' | 'empty' |
                                                               'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                                               'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' |
                                                               'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                                               'treat' | 'union' | 'where' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-NCName($input, $state)
      let $state := p:lookahead1W(29, $input, $state)       (: S^WS | ('(' ':') | '=' :)
      let $state := p:shift(58, $input, $state)             (: '=' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(94, $input, $state)             (: 'default' :)
      let $state := p:lookahead1W(42, $input, $state)       (: S^WS | ('(' ':') | 'element' :)
      let $state := p:shift(102, $input, $state)            (: 'element' :)
      let $state := p:lookahead1W(48, $input, $state)       (: S^WS | ('(' ':') | 'namespace' :)
      let $state := p:shift(139, $input, $state)            (: 'namespace' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "SchemaPrefix", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production SchemaImport (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SchemaImport-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(71, $input, $state)         (: S^WS | ('(' ':') | ',' | ';' :)
    return
      if ($state[$p:l1] != 39) then                         (: ',' :)
        $state
      else
        let $state := p:shift(39, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(17, $input, $state)     (: StringLiteral | S^WS | ('(' ':') :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-URILiteral($input, $state)
        return p:parse-SchemaImport-1($input, $state)
};

(:~
 : Parse SchemaImport.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-SchemaImport($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(123, $input, $state)                (: 'import' :)
  let $state := p:lookahead1W(54, $input, $state)           (: S^WS | ('(' ':') | 'schema' :)
  let $state := p:shift(164, $input, $state)                (: 'schema' :)
  let $state := p:lookahead1W(98, $input, $state)           (: StringLiteral | S^WS | ('(' ':') | 'default' |
                                                               'namespace' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 4) then                       (: StringLiteral :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-SchemaPrefix($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(17, $input, $state)           (: StringLiteral | S^WS | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-URILiteral($input, $state)
  let $state := p:lookahead1W(75, $input, $state)           (: S^WS | ('(' ':') | ';' | 'at' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 75) then                       (: 'at' :)
      let $state := p:shift(75, $input, $state)             (: 'at' :)
      let $state := p:lookahead1W(17, $input, $state)       (: StringLiteral | S^WS | ('(' ':') :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-URILiteral($input, $state)
      let $state := p:parse-SchemaImport-1($input, $state)
      return $state
    else
      $state
  let $end := $state[$p:e0]
  return p:reduce($state, "SchemaImport", $count, $begin, $end)
};

(:~
 : Parse Import.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Import($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 123) then                           (: 'import' :)
      let $state := p:lookahead2W(88, $input, $state)       (: S^WS | ('(' ':') | 'module' | 'schema' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 42107) then                         (: 'import' 'schema' :)
      let $state := p:parse-SchemaImport($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-ModuleImport($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "Import", $count, $begin, $end)
};

(:~
 : Parse NamespaceDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-NamespaceDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(93, $input, $state)                 (: 'declare' :)
  let $state := p:lookahead1W(48, $input, $state)           (: S^WS | ('(' ':') | 'namespace' :)
  let $state := p:shift(139, $input, $state)                (: 'namespace' :)
  let $state := p:lookahead1W(135, $input, $state)          (: NCName^Token | S^WS | ('(' ':') | 'and' | 'ascending' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                                               'default' | 'descending' | 'div' | 'else' | 'empty' |
                                                               'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                                               'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' |
                                                               'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                                               'treat' | 'union' | 'where' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-NCName($input, $state)
  let $state := p:lookahead1W(29, $input, $state)           (: S^WS | ('(' ':') | '=' :)
  let $state := p:shift(58, $input, $state)                 (: '=' :)
  let $state := p:lookahead1W(17, $input, $state)           (: StringLiteral | S^WS | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-URILiteral($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "NamespaceDecl", $count, $begin, $end)
};

(:~
 : Parse DFPropertyName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-DFPropertyName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 92) then                            (: 'decimal-separator' :)
      let $state := p:shift(92, $input, $state)             (: 'decimal-separator' :)
      return $state
    else if ($state[$p:l1] = 119) then                      (: 'grouping-separator' :)
      let $state := p:shift(119, $input, $state)            (: 'grouping-separator' :)
      return $state
    else if ($state[$p:l1] = 125) then                      (: 'infinity' :)
      let $state := p:shift(125, $input, $state)            (: 'infinity' :)
      return $state
    else if ($state[$p:l1] = 136) then                      (: 'minus-sign' :)
      let $state := p:shift(136, $input, $state)            (: 'minus-sign' :)
      return $state
    else if ($state[$p:l1] = 65) then                       (: 'NaN' :)
      let $state := p:shift(65, $input, $state)             (: 'NaN' :)
      return $state
    else if ($state[$p:l1] = 156) then                      (: 'percent' :)
      let $state := p:shift(156, $input, $state)            (: 'percent' :)
      return $state
    else if ($state[$p:l1] = 155) then                      (: 'per-mille' :)
      let $state := p:shift(155, $input, $state)            (: 'per-mille' :)
      return $state
    else if ($state[$p:l1] = 192) then                      (: 'zero-digit' :)
      let $state := p:shift(192, $input, $state)            (: 'zero-digit' :)
      return $state
    else if ($state[$p:l1] = 98) then                       (: 'digit' :)
      let $state := p:shift(98, $input, $state)             (: 'digit' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(154, $input, $state)            (: 'pattern-separator' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "DFPropertyName", $count, $begin, $end)
};

(:~
 : Parse FunctionName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-FunctionName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 15) then                            (: QName^Token :)
      let $state := p:shift(15, $input, $state)             (: QName^Token :)
      return $state
    else if ($state[$p:l1] = 70) then                       (: 'ancestor' :)
      let $state := p:shift(70, $input, $state)             (: 'ancestor' :)
      return $state
    else if ($state[$p:l1] = 71) then                       (: 'ancestor-or-self' :)
      let $state := p:shift(71, $input, $state)             (: 'ancestor-or-self' :)
      return $state
    else if ($state[$p:l1] = 72) then                       (: 'and' :)
      let $state := p:shift(72, $input, $state)             (: 'and' :)
      return $state
    else if ($state[$p:l1] = 74) then                       (: 'ascending' :)
      let $state := p:shift(74, $input, $state)             (: 'ascending' :)
      return $state
    else if ($state[$p:l1] = 80) then                       (: 'case' :)
      let $state := p:shift(80, $input, $state)             (: 'case' :)
      return $state
    else if ($state[$p:l1] = 81) then                       (: 'cast' :)
      let $state := p:shift(81, $input, $state)             (: 'cast' :)
      return $state
    else if ($state[$p:l1] = 82) then                       (: 'castable' :)
      let $state := p:shift(82, $input, $state)             (: 'castable' :)
      return $state
    else if ($state[$p:l1] = 84) then                       (: 'child' :)
      let $state := p:shift(84, $input, $state)             (: 'child' :)
      return $state
    else if ($state[$p:l1] = 85) then                       (: 'collation' :)
      let $state := p:shift(85, $input, $state)             (: 'collation' :)
      return $state
    else if ($state[$p:l1] = 90) then                       (: 'count' :)
      let $state := p:shift(90, $input, $state)             (: 'count' :)
      return $state
    else if ($state[$p:l1] = 93) then                       (: 'declare' :)
      let $state := p:shift(93, $input, $state)             (: 'declare' :)
      return $state
    else if ($state[$p:l1] = 94) then                       (: 'default' :)
      let $state := p:shift(94, $input, $state)             (: 'default' :)
      return $state
    else if ($state[$p:l1] = 95) then                       (: 'descendant' :)
      let $state := p:shift(95, $input, $state)             (: 'descendant' :)
      return $state
    else if ($state[$p:l1] = 96) then                       (: 'descendant-or-self' :)
      let $state := p:shift(96, $input, $state)             (: 'descendant-or-self' :)
      return $state
    else if ($state[$p:l1] = 97) then                       (: 'descending' :)
      let $state := p:shift(97, $input, $state)             (: 'descending' :)
      return $state
    else if ($state[$p:l1] = 99) then                       (: 'div' :)
      let $state := p:shift(99, $input, $state)             (: 'div' :)
      return $state
    else if ($state[$p:l1] = 100) then                      (: 'document' :)
      let $state := p:shift(100, $input, $state)            (: 'document' :)
      return $state
    else if ($state[$p:l1] = 103) then                      (: 'else' :)
      let $state := p:shift(103, $input, $state)            (: 'else' :)
      return $state
    else if ($state[$p:l1] = 104) then                      (: 'empty' :)
      let $state := p:shift(104, $input, $state)            (: 'empty' :)
      return $state
    else if ($state[$p:l1] = 107) then                      (: 'end' :)
      let $state := p:shift(107, $input, $state)            (: 'end' :)
      return $state
    else if ($state[$p:l1] = 108) then                      (: 'eq' :)
      let $state := p:shift(108, $input, $state)            (: 'eq' :)
      return $state
    else if ($state[$p:l1] = 109) then                      (: 'every' :)
      let $state := p:shift(109, $input, $state)            (: 'every' :)
      return $state
    else if ($state[$p:l1] = 110) then                      (: 'except' :)
      let $state := p:shift(110, $input, $state)            (: 'except' :)
      return $state
    else if ($state[$p:l1] = 112) then                      (: 'following' :)
      let $state := p:shift(112, $input, $state)            (: 'following' :)
      return $state
    else if ($state[$p:l1] = 113) then                      (: 'following-sibling' :)
      let $state := p:shift(113, $input, $state)            (: 'following-sibling' :)
      return $state
    else if ($state[$p:l1] = 114) then                      (: 'for' :)
      let $state := p:shift(114, $input, $state)            (: 'for' :)
      return $state
    else if ($state[$p:l1] = 116) then                      (: 'ge' :)
      let $state := p:shift(116, $input, $state)            (: 'ge' :)
      return $state
    else if ($state[$p:l1] = 118) then                      (: 'group' :)
      let $state := p:shift(118, $input, $state)            (: 'group' :)
      return $state
    else if ($state[$p:l1] = 120) then                      (: 'gt' :)
      let $state := p:shift(120, $input, $state)            (: 'gt' :)
      return $state
    else if ($state[$p:l1] = 121) then                      (: 'idiv' :)
      let $state := p:shift(121, $input, $state)            (: 'idiv' :)
      return $state
    else if ($state[$p:l1] = 123) then                      (: 'import' :)
      let $state := p:shift(123, $input, $state)            (: 'import' :)
      return $state
    else if ($state[$p:l1] = 127) then                      (: 'instance' :)
      let $state := p:shift(127, $input, $state)            (: 'instance' :)
      return $state
    else if ($state[$p:l1] = 128) then                      (: 'intersect' :)
      let $state := p:shift(128, $input, $state)            (: 'intersect' :)
      return $state
    else if ($state[$p:l1] = 129) then                      (: 'is' :)
      let $state := p:shift(129, $input, $state)            (: 'is' :)
      return $state
    else if ($state[$p:l1] = 132) then                      (: 'le' :)
      let $state := p:shift(132, $input, $state)            (: 'le' :)
      return $state
    else if ($state[$p:l1] = 134) then                      (: 'let' :)
      let $state := p:shift(134, $input, $state)            (: 'let' :)
      return $state
    else if ($state[$p:l1] = 135) then                      (: 'lt' :)
      let $state := p:shift(135, $input, $state)            (: 'lt' :)
      return $state
    else if ($state[$p:l1] = 137) then                      (: 'mod' :)
      let $state := p:shift(137, $input, $state)            (: 'mod' :)
      return $state
    else if ($state[$p:l1] = 138) then                      (: 'module' :)
      let $state := p:shift(138, $input, $state)            (: 'module' :)
      return $state
    else if ($state[$p:l1] = 139) then                      (: 'namespace' :)
      let $state := p:shift(139, $input, $state)            (: 'namespace' :)
      return $state
    else if ($state[$p:l1] = 141) then                      (: 'ne' :)
      let $state := p:shift(141, $input, $state)            (: 'ne' :)
      return $state
    else if ($state[$p:l1] = 147) then                      (: 'only' :)
      let $state := p:shift(147, $input, $state)            (: 'only' :)
      return $state
    else if ($state[$p:l1] = 149) then                      (: 'or' :)
      let $state := p:shift(149, $input, $state)            (: 'or' :)
      return $state
    else if ($state[$p:l1] = 150) then                      (: 'order' :)
      let $state := p:shift(150, $input, $state)            (: 'order' :)
      return $state
    else if ($state[$p:l1] = 151) then                      (: 'ordered' :)
      let $state := p:shift(151, $input, $state)            (: 'ordered' :)
      return $state
    else if ($state[$p:l1] = 153) then                      (: 'parent' :)
      let $state := p:shift(153, $input, $state)            (: 'parent' :)
      return $state
    else if ($state[$p:l1] = 157) then                      (: 'preceding' :)
      let $state := p:shift(157, $input, $state)            (: 'preceding' :)
      return $state
    else if ($state[$p:l1] = 158) then                      (: 'preceding-sibling' :)
      let $state := p:shift(158, $input, $state)            (: 'preceding-sibling' :)
      return $state
    else if ($state[$p:l1] = 162) then                      (: 'return' :)
      let $state := p:shift(162, $input, $state)            (: 'return' :)
      return $state
    else if ($state[$p:l1] = 163) then                      (: 'satisfies' :)
      let $state := p:shift(163, $input, $state)            (: 'satisfies' :)
      return $state
    else if ($state[$p:l1] = 167) then                      (: 'self' :)
      let $state := p:shift(167, $input, $state)            (: 'self' :)
      return $state
    else if ($state[$p:l1] = 169) then                      (: 'some' :)
      let $state := p:shift(169, $input, $state)            (: 'some' :)
      return $state
    else if ($state[$p:l1] = 170) then                      (: 'stable' :)
      let $state := p:shift(170, $input, $state)            (: 'stable' :)
      return $state
    else if ($state[$p:l1] = 171) then                      (: 'start' :)
      let $state := p:shift(171, $input, $state)            (: 'start' :)
      return $state
    else if ($state[$p:l1] = 177) then                      (: 'to' :)
      let $state := p:shift(177, $input, $state)            (: 'to' :)
      return $state
    else if ($state[$p:l1] = 178) then                      (: 'treat' :)
      let $state := p:shift(178, $input, $state)            (: 'treat' :)
      return $state
    else if ($state[$p:l1] = 179) then                      (: 'try' :)
      let $state := p:shift(179, $input, $state)            (: 'try' :)
      return $state
    else if ($state[$p:l1] = 183) then                      (: 'union' :)
      let $state := p:shift(183, $input, $state)            (: 'union' :)
      return $state
    else if ($state[$p:l1] = 184) then                      (: 'unordered' :)
      let $state := p:shift(184, $input, $state)            (: 'unordered' :)
      return $state
    else if ($state[$p:l1] = 185) then                      (: 'validate' :)
      let $state := p:shift(185, $input, $state)            (: 'validate' :)
      return $state
    else if ($state[$p:l1] = 189) then                      (: 'where' :)
      let $state := p:shift(189, $input, $state)            (: 'where' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(191, $input, $state)            (: 'xquery' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "FunctionName", $count, $begin, $end)
};

(:~
 : Parse QName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-QName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:lookahead1(165, $input, $state)           (: QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state :=
    if ($state[$p:l1] = 76) then                            (: 'attribute' :)
      let $state := p:shift(76, $input, $state)             (: 'attribute' :)
      return $state
    else if ($state[$p:l1] = 86) then                       (: 'comment' :)
      let $state := p:shift(86, $input, $state)             (: 'comment' :)
      return $state
    else if ($state[$p:l1] = 101) then                      (: 'document-node' :)
      let $state := p:shift(101, $input, $state)            (: 'document-node' :)
      return $state
    else if ($state[$p:l1] = 102) then                      (: 'element' :)
      let $state := p:shift(102, $input, $state)            (: 'element' :)
      return $state
    else if ($state[$p:l1] = 105) then                      (: 'empty-sequence' :)
      let $state := p:shift(105, $input, $state)            (: 'empty-sequence' :)
      return $state
    else if ($state[$p:l1] = 115) then                      (: 'function' :)
      let $state := p:shift(115, $input, $state)            (: 'function' :)
      return $state
    else if ($state[$p:l1] = 122) then                      (: 'if' :)
      let $state := p:shift(122, $input, $state)            (: 'if' :)
      return $state
    else if ($state[$p:l1] = 130) then                      (: 'item' :)
      let $state := p:shift(130, $input, $state)            (: 'item' :)
      return $state
    else if ($state[$p:l1] = 140) then                      (: 'namespace-node' :)
      let $state := p:shift(140, $input, $state)            (: 'namespace-node' :)
      return $state
    else if ($state[$p:l1] = 145) then                      (: 'node' :)
      let $state := p:shift(145, $input, $state)            (: 'node' :)
      return $state
    else if ($state[$p:l1] = 161) then                      (: 'processing-instruction' :)
      let $state := p:shift(161, $input, $state)            (: 'processing-instruction' :)
      return $state
    else if ($state[$p:l1] = 165) then                      (: 'schema-attribute' :)
      let $state := p:shift(165, $input, $state)            (: 'schema-attribute' :)
      return $state
    else if ($state[$p:l1] = 166) then                      (: 'schema-element' :)
      let $state := p:shift(166, $input, $state)            (: 'schema-element' :)
      return $state
    else if ($state[$p:l1] = 174) then                      (: 'switch' :)
      let $state := p:shift(174, $input, $state)            (: 'switch' :)
      return $state
    else if ($state[$p:l1] = 175) then                      (: 'text' :)
      let $state := p:shift(175, $input, $state)            (: 'text' :)
      return $state
    else if ($state[$p:l1] = 182) then                      (: 'typeswitch' :)
      let $state := p:shift(182, $input, $state)            (: 'typeswitch' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-FunctionName($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "QName", $count, $begin, $end)
};

(:~
 : Parse EQName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-EQName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:lookahead1(166, $input, $state)           (: URIQualifiedName | QName^Token | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'ascending' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'count' | 'declare' | 'default' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'instance' | 'intersect' | 'is' |
                                                               'item' | 'le' | 'let' | 'lt' | 'mod' | 'module' |
                                                               'namespace' | 'namespace-node' | 'ne' | 'node' | 'only' |
                                                               'or' | 'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state :=
    if ($state[$p:l1] = 5) then                             (: URIQualifiedName :)
      let $state := p:shift(5, $input, $state)              (: URIQualifiedName :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-QName($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "EQName", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production DecimalFormatDecl (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-DecimalFormatDecl-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(131, $input, $state)        (: S^WS | ('(' ':') | ';' | 'NaN' | 'decimal-separator' |
                                                               'digit' | 'grouping-separator' | 'infinity' |
                                                               'minus-sign' | 'pattern-separator' | 'per-mille' |
                                                               'percent' | 'zero-digit' :)
    return
      if ($state[$p:l1] = 50) then                          (: ';' :)
        $state
      else
        let $state := p:whitespace($input, $state)
        let $state := p:parse-DFPropertyName($input, $state)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '=' :)
        let $state := p:shift(58, $input, $state)           (: '=' :)
        let $state := p:lookahead1W(17, $input, $state)     (: StringLiteral | S^WS | ('(' ':') :)
        let $state := p:shift(4, $input, $state)            (: StringLiteral :)
        return p:parse-DecimalFormatDecl-1($input, $state)
};

(:~
 : Parse DecimalFormatDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-DecimalFormatDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(93, $input, $state)                 (: 'declare' :)
  let $state := p:lookahead1W(81, $input, $state)           (: S^WS | ('(' ':') | 'decimal-format' | 'default' :)
  let $state :=
    if ($state[$p:l1] = 91) then                            (: 'decimal-format' :)
      let $state := p:shift(91, $input, $state)             (: 'decimal-format' :)
      let $state := p:lookahead1W(168, $input, $state)      (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'ascending' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'count' | 'declare' |
                                                               'default' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'instance' |
                                                               'intersect' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' |
                                                               'validate' | 'where' | 'xquery' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-EQName($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(94, $input, $state)             (: 'default' :)
      let $state := p:lookahead1W(40, $input, $state)       (: S^WS | ('(' ':') | 'decimal-format' :)
      let $state := p:shift(91, $input, $state)             (: 'decimal-format' :)
      return $state
  let $state := p:parse-DecimalFormatDecl-1($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "DecimalFormatDecl", $count, $begin, $end)
};

(:~
 : Parse InheritMode.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-InheritMode($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 126) then                           (: 'inherit' :)
      let $state := p:shift(126, $input, $state)            (: 'inherit' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(143, $input, $state)            (: 'no-inherit' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "InheritMode", $count, $begin, $end)
};

(:~
 : Parse PreserveMode.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-PreserveMode($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 159) then                           (: 'preserve' :)
      let $state := p:shift(159, $input, $state)            (: 'preserve' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(144, $input, $state)            (: 'no-preserve' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "PreserveMode", $count, $begin, $end)
};

(:~
 : Parse CopyNamespacesDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CopyNamespacesDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(93, $input, $state)                 (: 'declare' :)
  let $state := p:lookahead1W(39, $input, $state)           (: S^WS | ('(' ':') | 'copy-namespaces' :)
  let $state := p:shift(89, $input, $state)                 (: 'copy-namespaces' :)
  let $state := p:lookahead1W(90, $input, $state)           (: S^WS | ('(' ':') | 'no-preserve' | 'preserve' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-PreserveMode($input, $state)
  let $state := p:lookahead1W(25, $input, $state)           (: S^WS | ('(' ':') | ',' :)
  let $state := p:shift(39, $input, $state)                 (: ',' :)
  let $state := p:lookahead1W(87, $input, $state)           (: S^WS | ('(' ':') | 'inherit' | 'no-inherit' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-InheritMode($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "CopyNamespacesDecl", $count, $begin, $end)
};

(:~
 : Parse EmptyOrderDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-EmptyOrderDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(93, $input, $state)                 (: 'declare' :)
  let $state := p:lookahead1W(41, $input, $state)           (: S^WS | ('(' ':') | 'default' :)
  let $state := p:shift(94, $input, $state)                 (: 'default' :)
  let $state := p:lookahead1W(51, $input, $state)           (: S^WS | ('(' ':') | 'order' :)
  let $state := p:shift(150, $input, $state)                (: 'order' :)
  let $state := p:lookahead1W(43, $input, $state)           (: S^WS | ('(' ':') | 'empty' :)
  let $state := p:shift(104, $input, $state)                (: 'empty' :)
  let $state := p:lookahead1W(86, $input, $state)           (: S^WS | ('(' ':') | 'greatest' | 'least' :)
  let $state :=
    if ($state[$p:l1] = 117) then                           (: 'greatest' :)
      let $state := p:shift(117, $input, $state)            (: 'greatest' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(133, $input, $state)            (: 'least' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "EmptyOrderDecl", $count, $begin, $end)
};

(:~
 : Parse OrderingModeDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-OrderingModeDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(93, $input, $state)                 (: 'declare' :)
  let $state := p:lookahead1W(52, $input, $state)           (: S^WS | ('(' ':') | 'ordering' :)
  let $state := p:shift(152, $input, $state)                (: 'ordering' :)
  let $state := p:lookahead1W(93, $input, $state)           (: S^WS | ('(' ':') | 'ordered' | 'unordered' :)
  let $state :=
    if ($state[$p:l1] = 151) then                           (: 'ordered' :)
      let $state := p:shift(151, $input, $state)            (: 'ordered' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(184, $input, $state)            (: 'unordered' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "OrderingModeDecl", $count, $begin, $end)
};

(:~
 : Parse ConstructionDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ConstructionDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(93, $input, $state)                 (: 'declare' :)
  let $state := p:lookahead1W(37, $input, $state)           (: S^WS | ('(' ':') | 'construction' :)
  let $state := p:shift(87, $input, $state)                 (: 'construction' :)
  let $state := p:lookahead1W(94, $input, $state)           (: S^WS | ('(' ':') | 'preserve' | 'strip' :)
  let $state :=
    if ($state[$p:l1] = 173) then                           (: 'strip' :)
      let $state := p:shift(173, $input, $state)            (: 'strip' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(159, $input, $state)            (: 'preserve' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "ConstructionDecl", $count, $begin, $end)
};

(:~
 : Parse BaseURIDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-BaseURIDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(93, $input, $state)                 (: 'declare' :)
  let $state := p:lookahead1W(31, $input, $state)           (: S^WS | ('(' ':') | 'base-uri' :)
  let $state := p:shift(77, $input, $state)                 (: 'base-uri' :)
  let $state := p:lookahead1W(17, $input, $state)           (: StringLiteral | S^WS | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-URILiteral($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "BaseURIDecl", $count, $begin, $end)
};

(:~
 : Parse DefaultCollationDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-DefaultCollationDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(93, $input, $state)                 (: 'declare' :)
  let $state := p:lookahead1W(41, $input, $state)           (: S^WS | ('(' ':') | 'default' :)
  let $state := p:shift(94, $input, $state)                 (: 'default' :)
  let $state := p:lookahead1W(36, $input, $state)           (: S^WS | ('(' ':') | 'collation' :)
  let $state := p:shift(85, $input, $state)                 (: 'collation' :)
  let $state := p:lookahead1W(17, $input, $state)           (: StringLiteral | S^WS | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-URILiteral($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "DefaultCollationDecl", $count, $begin, $end)
};

(:~
 : Parse BoundarySpaceDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-BoundarySpaceDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(93, $input, $state)                 (: 'declare' :)
  let $state := p:lookahead1W(32, $input, $state)           (: S^WS | ('(' ':') | 'boundary-space' :)
  let $state := p:shift(78, $input, $state)                 (: 'boundary-space' :)
  let $state := p:lookahead1W(94, $input, $state)           (: S^WS | ('(' ':') | 'preserve' | 'strip' :)
  let $state :=
    if ($state[$p:l1] = 159) then                           (: 'preserve' :)
      let $state := p:shift(159, $input, $state)            (: 'preserve' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(173, $input, $state)            (: 'strip' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "BoundarySpaceDecl", $count, $begin, $end)
};

(:~
 : Parse Setter.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Setter($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 93) then                            (: 'declare' :)
      let $state := p:lookahead2W(124, $input, $state)      (: S^WS | ('(' ':') | 'base-uri' | 'boundary-space' |
                                                               'construction' | 'copy-namespaces' | 'decimal-format' |
                                                               'default' | 'ordering' :)
      let $state :=
        if ($state[$p:lk] = 24157) then                     (: 'declare' 'default' :)
          let $state := p:lookahead3W(109, $input, $state)  (: S^WS | ('(' ':') | 'collation' | 'decimal-format' |
                                                               'order' :)
          return $state
        else
          $state
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 20061) then                         (: 'declare' 'boundary-space' :)
      let $state := p:parse-BoundarySpaceDecl($input, $state)
      return $state
    else if ($state[$p:lk] = 5594717) then                  (: 'declare' 'default' 'collation' :)
      let $state := p:parse-DefaultCollationDecl($input, $state)
      return $state
    else if ($state[$p:lk] = 19805) then                    (: 'declare' 'base-uri' :)
      let $state := p:parse-BaseURIDecl($input, $state)
      return $state
    else if ($state[$p:lk] = 22365) then                    (: 'declare' 'construction' :)
      let $state := p:parse-ConstructionDecl($input, $state)
      return $state
    else if ($state[$p:lk] = 39005) then                    (: 'declare' 'ordering' :)
      let $state := p:parse-OrderingModeDecl($input, $state)
      return $state
    else if ($state[$p:lk] = 9854557) then                  (: 'declare' 'default' 'order' :)
      let $state := p:parse-EmptyOrderDecl($input, $state)
      return $state
    else if ($state[$p:lk] = 22877) then                    (: 'declare' 'copy-namespaces' :)
      let $state := p:parse-CopyNamespacesDecl($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-DecimalFormatDecl($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "Setter", $count, $begin, $end)
};

(:~
 : Parse DefaultNamespaceDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-DefaultNamespaceDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(93, $input, $state)                 (: 'declare' :)
  let $state := p:lookahead1W(41, $input, $state)           (: S^WS | ('(' ':') | 'default' :)
  let $state := p:shift(94, $input, $state)                 (: 'default' :)
  let $state := p:lookahead1W(82, $input, $state)           (: S^WS | ('(' ':') | 'element' | 'function' :)
  let $state :=
    if ($state[$p:l1] = 102) then                           (: 'element' :)
      let $state := p:shift(102, $input, $state)            (: 'element' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(115, $input, $state)            (: 'function' :)
      return $state
  let $state := p:lookahead1W(48, $input, $state)           (: S^WS | ('(' ':') | 'namespace' :)
  let $state := p:shift(139, $input, $state)                (: 'namespace' :)
  let $state := p:lookahead1W(17, $input, $state)           (: StringLiteral | S^WS | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-URILiteral($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "DefaultNamespaceDecl", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production Prolog (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Prolog-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(181, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | EOF | '$' | '%' | '(' | '(#' | ('(' ':') |
                                                               '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' |
                                                               '<?' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
    let $state :=
      if ($state[$p:l1] = 93) then                          (: 'declare' :)
        let $state := p:lookahead2W(144, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | ('(' ':') |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | '<' | '<<' | '<=' |
                                                               '=' | '>' | '>=' | '>>' | '[' | 'and' | 'base-uri' |
                                                               'boundary-space' | 'cast' | 'castable' | 'construction' |
                                                               'context' | 'copy-namespaces' | 'decimal-format' |
                                                               'default' | 'div' | 'eq' | 'except' | 'function' | 'ge' |
                                                               'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' |
                                                               'lt' | 'mod' | 'namespace' | 'ne' | 'option' | 'or' |
                                                               'ordering' | 'to' | 'treat' | 'union' | 'variable' |
                                                               '|' | '||' :)
        return $state
      else if ($state[$p:l1] = 123) then                    (: 'import' :)
        let $state := p:lookahead2W(142, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | '*' |
                                                               '+' | ',' | '-' | '/' | '//' | '<' | '<<' | '<=' | '=' |
                                                               '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                                               'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                                               'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' |
                                                               'module' | 'ne' | 'or' | 'schema' | 'to' | 'treat' |
                                                               'union' | '|' | '||' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] != 19805                            (: 'declare' 'base-uri' :)
      and $state[$p:lk] != 20061                            (: 'declare' 'boundary-space' :)
      and $state[$p:lk] != 22365                            (: 'declare' 'construction' :)
      and $state[$p:lk] != 22877                            (: 'declare' 'copy-namespaces' :)
      and $state[$p:lk] != 23389                            (: 'declare' 'decimal-format' :)
      and $state[$p:lk] != 24157                            (: 'declare' 'default' :)
      and $state[$p:lk] != 35451                            (: 'import' 'module' :)
      and $state[$p:lk] != 35677                            (: 'declare' 'namespace' :)
      and $state[$p:lk] != 39005                            (: 'declare' 'ordering' :)
      and $state[$p:lk] != 42107) then                      (: 'import' 'schema' :)
        $state
      else
        let $state :=
          if ($state[$p:l1] = 93) then                      (: 'declare' :)
            let $state := p:lookahead2W(125, $input, $state) (: S^WS | ('(' ':') | 'base-uri' | 'boundary-space' |
                                                                'construction' | 'copy-namespaces' | 'decimal-format' |
                                                                'default' | 'namespace' | 'ordering' :)
            let $state :=
              if ($state[$p:lk] = 24157) then               (: 'declare' 'default' :)
                let $state := p:lookahead3W(120, $input, $state) (: S^WS | ('(' ':') | 'collation' | 'decimal-format' |
                                                                    'element' | 'function' | 'order' :)
                return $state
              else
                $state
            return $state
          else
            ($state[$p:l1], subsequence($state, $p:lk + 1))
        let $state :=
          if ($state[$p:lk] = 6708829                       (: 'declare' 'default' 'element' :)
           or $state[$p:lk] = 7560797) then                 (: 'declare' 'default' 'function' :)
            let $state := p:whitespace($input, $state)
            let $state := p:parse-DefaultNamespaceDecl($input, $state)
            return $state
          else if ($state[$p:lk] = 35677) then              (: 'declare' 'namespace' :)
            let $state := p:whitespace($input, $state)
            let $state := p:parse-NamespaceDecl($input, $state)
            return $state
          else if ($state[$p:lk] = 123) then                (: 'import' :)
            let $state := p:whitespace($input, $state)
            let $state := p:parse-Import($input, $state)
            return $state
          else if ($state[$p:error]) then
            $state
          else
            let $state := p:whitespace($input, $state)
            let $state := p:parse-Setter($input, $state)
            return $state
        let $state := p:lookahead1W(28, $input, $state)     (: S^WS | ('(' ':') | ';' :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-Separator($input, $state)
        return p:parse-Prolog-1($input, $state)
};

(:~
 : Parse the 2nd loop of production Prolog (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Prolog-2($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(181, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | EOF | '$' | '%' | '(' | '(#' | ('(' ':') |
                                                               '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' |
                                                               '<?' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
    let $state :=
      if ($state[$p:l1] = 93) then                          (: 'declare' :)
        let $state := p:lookahead2W(143, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | ('(' ':') |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | '<' | '<<' | '<=' |
                                                               '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                                               'castable' | 'context' | 'div' | 'eq' | 'except' |
                                                               'function' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' |
                                                               'option' | 'or' | 'to' | 'treat' | 'union' | 'variable' |
                                                               '|' | '||' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] != 8029                             (: 'declare' '%' :)
      and $state[$p:lk] != 22621                            (: 'declare' 'context' :)
      and $state[$p:lk] != 29533                            (: 'declare' 'function' :)
      and $state[$p:lk] != 37981                            (: 'declare' 'option' :)
      and $state[$p:lk] != 47709) then                      (: 'declare' 'variable' :)
        $state
      else
        let $state :=
          if ($state[$p:l1] = 93) then                      (: 'declare' :)
            let $state := p:lookahead2W(119, $input, $state) (: S^WS | '%' | ('(' ':') | 'context' | 'function' |
                                                                'option' | 'variable' :)
            return $state
          else
            ($state[$p:l1], subsequence($state, $p:lk + 1))
        let $state :=
          if ($state[$p:lk] = 22621) then                   (: 'declare' 'context' :)
            let $state := p:whitespace($input, $state)
            let $state := p:parse-ContextItemDecl($input, $state)
            return $state
          else if ($state[$p:lk] = 37981) then              (: 'declare' 'option' :)
            let $state := p:whitespace($input, $state)
            let $state := p:parse-OptionDecl($input, $state)
            return $state
          else if ($state[$p:error]) then
            $state
          else
            let $state := p:whitespace($input, $state)
            let $state := p:parse-AnnotatedDecl($input, $state)
            return $state
        let $state := p:lookahead1W(28, $input, $state)     (: S^WS | ('(' ':') | ';' :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-Separator($input, $state)
        return p:parse-Prolog-2($input, $state)
};

(:~
 : Parse Prolog.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Prolog($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-Prolog-1($input, $state)
  let $state := p:parse-Prolog-2($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "Prolog", $count, $begin, $end)
};

(:~
 : Parse URILiteral.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-URILiteral($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(4, $input, $state)                  (: StringLiteral :)
  let $end := $state[$p:e0]
  return p:reduce($state, "URILiteral", $count, $begin, $end)
};

(:~
 : Parse NCName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-NCName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 14) then                            (: NCName^Token :)
      let $state := p:shift(14, $input, $state)             (: NCName^Token :)
      return $state
    else if ($state[$p:l1] = 72) then                       (: 'and' :)
      let $state := p:shift(72, $input, $state)             (: 'and' :)
      return $state
    else if ($state[$p:l1] = 74) then                       (: 'ascending' :)
      let $state := p:shift(74, $input, $state)             (: 'ascending' :)
      return $state
    else if ($state[$p:l1] = 80) then                       (: 'case' :)
      let $state := p:shift(80, $input, $state)             (: 'case' :)
      return $state
    else if ($state[$p:l1] = 81) then                       (: 'cast' :)
      let $state := p:shift(81, $input, $state)             (: 'cast' :)
      return $state
    else if ($state[$p:l1] = 82) then                       (: 'castable' :)
      let $state := p:shift(82, $input, $state)             (: 'castable' :)
      return $state
    else if ($state[$p:l1] = 85) then                       (: 'collation' :)
      let $state := p:shift(85, $input, $state)             (: 'collation' :)
      return $state
    else if ($state[$p:l1] = 90) then                       (: 'count' :)
      let $state := p:shift(90, $input, $state)             (: 'count' :)
      return $state
    else if ($state[$p:l1] = 94) then                       (: 'default' :)
      let $state := p:shift(94, $input, $state)             (: 'default' :)
      return $state
    else if ($state[$p:l1] = 97) then                       (: 'descending' :)
      let $state := p:shift(97, $input, $state)             (: 'descending' :)
      return $state
    else if ($state[$p:l1] = 99) then                       (: 'div' :)
      let $state := p:shift(99, $input, $state)             (: 'div' :)
      return $state
    else if ($state[$p:l1] = 103) then                      (: 'else' :)
      let $state := p:shift(103, $input, $state)            (: 'else' :)
      return $state
    else if ($state[$p:l1] = 104) then                      (: 'empty' :)
      let $state := p:shift(104, $input, $state)            (: 'empty' :)
      return $state
    else if ($state[$p:l1] = 107) then                      (: 'end' :)
      let $state := p:shift(107, $input, $state)            (: 'end' :)
      return $state
    else if ($state[$p:l1] = 108) then                      (: 'eq' :)
      let $state := p:shift(108, $input, $state)            (: 'eq' :)
      return $state
    else if ($state[$p:l1] = 110) then                      (: 'except' :)
      let $state := p:shift(110, $input, $state)            (: 'except' :)
      return $state
    else if ($state[$p:l1] = 114) then                      (: 'for' :)
      let $state := p:shift(114, $input, $state)            (: 'for' :)
      return $state
    else if ($state[$p:l1] = 116) then                      (: 'ge' :)
      let $state := p:shift(116, $input, $state)            (: 'ge' :)
      return $state
    else if ($state[$p:l1] = 118) then                      (: 'group' :)
      let $state := p:shift(118, $input, $state)            (: 'group' :)
      return $state
    else if ($state[$p:l1] = 120) then                      (: 'gt' :)
      let $state := p:shift(120, $input, $state)            (: 'gt' :)
      return $state
    else if ($state[$p:l1] = 121) then                      (: 'idiv' :)
      let $state := p:shift(121, $input, $state)            (: 'idiv' :)
      return $state
    else if ($state[$p:l1] = 127) then                      (: 'instance' :)
      let $state := p:shift(127, $input, $state)            (: 'instance' :)
      return $state
    else if ($state[$p:l1] = 128) then                      (: 'intersect' :)
      let $state := p:shift(128, $input, $state)            (: 'intersect' :)
      return $state
    else if ($state[$p:l1] = 129) then                      (: 'is' :)
      let $state := p:shift(129, $input, $state)            (: 'is' :)
      return $state
    else if ($state[$p:l1] = 132) then                      (: 'le' :)
      let $state := p:shift(132, $input, $state)            (: 'le' :)
      return $state
    else if ($state[$p:l1] = 134) then                      (: 'let' :)
      let $state := p:shift(134, $input, $state)            (: 'let' :)
      return $state
    else if ($state[$p:l1] = 135) then                      (: 'lt' :)
      let $state := p:shift(135, $input, $state)            (: 'lt' :)
      return $state
    else if ($state[$p:l1] = 137) then                      (: 'mod' :)
      let $state := p:shift(137, $input, $state)            (: 'mod' :)
      return $state
    else if ($state[$p:l1] = 141) then                      (: 'ne' :)
      let $state := p:shift(141, $input, $state)            (: 'ne' :)
      return $state
    else if ($state[$p:l1] = 147) then                      (: 'only' :)
      let $state := p:shift(147, $input, $state)            (: 'only' :)
      return $state
    else if ($state[$p:l1] = 149) then                      (: 'or' :)
      let $state := p:shift(149, $input, $state)            (: 'or' :)
      return $state
    else if ($state[$p:l1] = 150) then                      (: 'order' :)
      let $state := p:shift(150, $input, $state)            (: 'order' :)
      return $state
    else if ($state[$p:l1] = 162) then                      (: 'return' :)
      let $state := p:shift(162, $input, $state)            (: 'return' :)
      return $state
    else if ($state[$p:l1] = 163) then                      (: 'satisfies' :)
      let $state := p:shift(163, $input, $state)            (: 'satisfies' :)
      return $state
    else if ($state[$p:l1] = 170) then                      (: 'stable' :)
      let $state := p:shift(170, $input, $state)            (: 'stable' :)
      return $state
    else if ($state[$p:l1] = 171) then                      (: 'start' :)
      let $state := p:shift(171, $input, $state)            (: 'start' :)
      return $state
    else if ($state[$p:l1] = 177) then                      (: 'to' :)
      let $state := p:shift(177, $input, $state)            (: 'to' :)
      return $state
    else if ($state[$p:l1] = 178) then                      (: 'treat' :)
      let $state := p:shift(178, $input, $state)            (: 'treat' :)
      return $state
    else if ($state[$p:l1] = 183) then                      (: 'union' :)
      let $state := p:shift(183, $input, $state)            (: 'union' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(189, $input, $state)            (: 'where' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "NCName", $count, $begin, $end)
};

(:~
 : Parse ModuleDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-ModuleDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(138, $input, $state)                (: 'module' :)
  let $state := p:lookahead1W(48, $input, $state)           (: S^WS | ('(' ':') | 'namespace' :)
  let $state := p:shift(139, $input, $state)                (: 'namespace' :)
  let $state := p:lookahead1W(135, $input, $state)          (: NCName^Token | S^WS | ('(' ':') | 'and' | 'ascending' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'count' |
                                                               'default' | 'descending' | 'div' | 'else' | 'empty' |
                                                               'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'let' |
                                                               'lt' | 'mod' | 'ne' | 'only' | 'or' | 'order' |
                                                               'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                                               'treat' | 'union' | 'where' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-NCName($input, $state)
  let $state := p:lookahead1W(29, $input, $state)           (: S^WS | ('(' ':') | '=' :)
  let $state := p:shift(58, $input, $state)                 (: '=' :)
  let $state := p:lookahead1W(17, $input, $state)           (: StringLiteral | S^WS | ('(' ':') :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-URILiteral($input, $state)
  let $state := p:lookahead1W(28, $input, $state)           (: S^WS | ('(' ':') | ';' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-Separator($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "ModuleDecl", $count, $begin, $end)
};

(:~
 : Parse LibraryModule.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-LibraryModule($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-ModuleDecl($input, $state)
  let $state := p:lookahead1W(99, $input, $state)           (: S^WS | EOF | ('(' ':') | 'declare' | 'import' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-Prolog($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "LibraryModule", $count, $begin, $end)
};

(:~
 : Parse Separator.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Separator($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(50, $input, $state)                 (: ';' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "Separator", $count, $begin, $end)
};

(:~
 : Parse VersionDecl.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-VersionDecl($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(191, $input, $state)                (: 'xquery' :)
  let $state := p:lookahead1W(83, $input, $state)           (: S^WS | ('(' ':') | 'encoding' | 'version' :)
  let $state :=
    if ($state[$p:l1] = 106) then                           (: 'encoding' :)
      let $state := p:shift(106, $input, $state)            (: 'encoding' :)
      let $state := p:lookahead1W(17, $input, $state)       (: StringLiteral | S^WS | ('(' ':') :)
      let $state := p:shift(4, $input, $state)              (: StringLiteral :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(187, $input, $state)            (: 'version' :)
      let $state := p:lookahead1W(17, $input, $state)       (: StringLiteral | S^WS | ('(' ':') :)
      let $state := p:shift(4, $input, $state)              (: StringLiteral :)
      let $state := p:lookahead1W(76, $input, $state)       (: S^WS | ('(' ':') | ';' | 'encoding' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 106) then                  (: 'encoding' :)
          let $state := p:shift(106, $input, $state)        (: 'encoding' :)
          let $state := p:lookahead1W(17, $input, $state)   (: StringLiteral | S^WS | ('(' ':') :)
          let $state := p:shift(4, $input, $state)          (: StringLiteral :)
          return $state
        else
          $state
      return $state
  let $state := p:lookahead1W(28, $input, $state)           (: S^WS | ('(' ':') | ';' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-Separator($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "VersionDecl", $count, $begin, $end)
};

(:~
 : Parse Module.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-Module($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 191) then                           (: 'xquery' :)
      let $state := p:lookahead2W(141, $input, $state)      (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | '*' |
                                                               '+' | ',' | '-' | '/' | '//' | '<' | '<<' | '<=' | '=' |
                                                               '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                                               'div' | 'encoding' | 'eq' | 'except' | 'ge' | 'gt' |
                                                               'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' |
                                                               'mod' | 'ne' | 'or' | 'to' | 'treat' | 'union' |
                                                               'version' | '|' | '||' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 27327                          (: 'xquery' 'encoding' :)
          or $state[$p:lk] = 48063) then                    (: 'xquery' 'version' :)
      let $state := p:parse-VersionDecl($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state :=
    if ($state[$p:l1] = 138) then                           (: 'module' :)
      let $state := p:lookahead2W(139, $input, $state)      (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | '*' |
                                                               '+' | ',' | '-' | '/' | '//' | '<' | '<<' | '<=' | '=' |
                                                               '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                                               'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                                               'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' |
                                                               'namespace' | 'ne' | 'or' | 'to' | 'treat' | 'union' |
                                                               '|' | '||' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 35722) then                         (: 'module' 'namespace' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-LibraryModule($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:whitespace($input, $state)
      let $state := p:parse-MainModule($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "Module", $count, $begin, $end)
};

(:~
 : Parse XQuery.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-XQuery($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:lookahead1W(180, $input, $state)          (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '@' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'ascending' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' |
                                                               'count' | 'declare' | 'default' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'instance' | 'intersect' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'validate' |
                                                               'where' | 'xquery' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-Module($input, $state)
  let $state := p:shift(24, $input, $state)                 (: EOF :)
  let $end := $state[$p:e0]
  return p:reduce($state, "XQuery", $count, $begin, $end)
};

(:~
 : Create a textual error message from a parsing error.
 :
 : @param $input the input string.
 : @param $error the parsing error descriptor.
 : @return the error message.
 :)
declare function p:error-message($input as xs:string, $error as element(error)) as xs:string
{
  let $begin := xs:integer($error/@b)
  let $context := string-to-codepoints(substring($input, 1, $begin - 1))
  let $linefeeds := index-of($context, 10)
  let $line := count($linefeeds) + 1
  let $column := ($begin - $linefeeds[last()], $begin)[1]
  return
    if ($error/@o) then
      concat
      (
        "syntax error, found ", $p:TOKEN[$error/@o + 1], "&#10;",
        "while expecting ", $p:TOKEN[$error/@x + 1], "&#10;",
        if ($error/@e = $begin) then
          ""
        else
          concat("after successfully scanning ", string($error/@e - $begin), " characters "),
        "at line ", string($line), ", column ", string($column), "&#10;",
        "...", substring($input, $begin, 32), "..."
      )
    else
      let $expected := p:expected-token-set($error/@s)
      return
        concat
        (
          "lexical analysis failed&#10;",
          "while expecting ",
          "["[exists($expected[2])],
          string-join($expected, ", "),
          "]"[exists($expected[2])],
          "&#10;",
          if ($error/@e = $begin) then
            ""
          else
            concat("after successfully scanning ", string($error/@e - $begin), " characters "),
          "at line ", string($line), ", column ", string($column), "&#10;",
          "...", substring($input, $begin, 32), "..."
        )
};

(:~
 : Shift one token, i.e. compare lookahead token 1 with expected
 : token and in case of a match, shift lookahead tokens down such that
 : l1 becomes the current token, and higher lookahead tokens move down.
 : When lookahead token 1 does not match the expected token, raise an
 : error by saving the expected token code in the error field of the
 : parser state.
 :
 : @param $code the expected token.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:shift($code as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else if ($state[$p:l1] = $code) then
  (
    subsequence($state, $p:l1, $p:e3 - $p:l1 + 1),
    0,
    $state[$p:e3],
    subsequence($state, $p:e3),
    let $begin := $state[$p:e0]
    let $end := $state[$p:b1]
    where $begin ne $end
    return
      text
      {
        substring($input, $begin, $end - $begin)
      },
    let $token := $p:TOKEN[1 + $state[$p:l1]]
    let $name := if (starts-with($token, "'")) then "TOKEN" else $token
    let $begin := $state[$p:b1]
    let $end := $state[$p:e1]
    return
      element {$name}
      {
        substring($input, $begin, $end - $begin)
      }
  )
  else
  (
    subsequence($state, 1, $p:error - 1),
    element error
    {
      attribute b {$state[$p:b1]},
      attribute e {$state[$p:e1]},
      if ($state[$p:l1] < 0) then
        attribute s {- $state[$p:l1]}
      else
        (attribute o {$state[$p:l1]}, attribute x {$code})
    },
    subsequence($state, $p:error + 1)
  )
};

(:~
 : Shift one token, i.e. compare lookahead token 1 with expected
 : token and in case of a match, shift lookahead tokens down such that
 : l1 becomes the current token, and higher lookahead tokens move down.
 : When lookahead token 1 does not match the expected token, raise an
 : error by saving the expected token code in the error field of the
 : parser state. In contrast to p:shift, do not create any output.
 :
 : @param $code the expected token.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:shiftT($code as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else if ($state[$p:l1] = $code) then
  (
    subsequence($state, $p:l1, $p:e3 - $p:l1 + 1),
    0,
    $state[$p:e3],
    subsequence($state, $p:e3)
  )
  else
  (
    subsequence($state, 1, $p:error - 1),
    element error
    {
      attribute b {$state[$p:b1]},
      attribute e {$state[$p:e1]},
      if ($state[$p:l1] < 0) then
        attribute s {- $state[$p:l1]}
      else
        (attribute o {$state[$p:l1]}, attribute x {$code})
    },
    subsequence($state, $p:error + 1)
  )
};

(:~
 : Consume whitespace.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:whitespace($input as xs:string,
                              $state as item()+) as item()+
{
  if ($state[$p:e0] = $state[$p:b1]) then
    $state
  else
    let $begin := $state[$p:e0]
    let $end := $state[$p:b1]
    return
    (
      0,
      $begin,
      $end,
      subsequence($state, $p:e0 + 1),
      text
      {
        substring($input, $begin, $end - $begin)
      }
    )
};

(:~
 : Use p:match to fetch the next token, but skip any leading
 : whitespace.
 :
 : @param $input the input string.
 : @param $begin the index where to start.
 : @param $token-set the valid token set id.
 : @return a sequence of three values: the token code of the result
 : token, with input string positions of token begin and end.
 :)
declare function p:matchW($input as xs:string,
                          $begin as xs:integer,
                          $token-set as xs:integer) as xs:integer+
{
  let $match := p:match($input, $begin, $token-set)
  return
    if ($match[1] = 17) then                                (: S^WS :)
      p:matchW($input, $match[3], $token-set)
    else if ($match[1] = 35) then                           (: ('(' ':') :)
      let $state := p:try-Whitespace($input, (0, 0, 0, $match, 0, $match[3], 0, 0, 0, 0, false()))
      return p:matchW($input, $state[$p:e0], $token-set)
    else
      $match
};

(:~
 : Lookahead one token on level 1 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead1W($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:l1] != 0) then
    $state
  else
    let $match := p:matchW($input, $state[$p:b1], $set)
    return
    (
      $match[1],
      subsequence($state, $p:lk + 1, $p:l1 - $p:lk - 1),
      $match,
      0, $match[3], 0,
      subsequence($state, $p:e2 + 1)
    )
};

(:~
 : Lookahead one token on level 2 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead2W($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  let $match :=
    if ($state[$p:l2] != 0) then
      subsequence($state, $p:l2, $p:e2 - $p:l2 + 1)
    else
      p:matchW($input, $state[$p:b2], $set)
  return
  (
    $match[1] * 256 + $state[$p:l1],
    subsequence($state, $p:lk + 1, $p:l2 - $p:lk - 1),
    $match,
    0, $match[3], 0,
    subsequence($state, $p:e3 + 1)
  )
};

(:~
 : Lookahead one token on level 3 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead3W($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  let $match :=
    if ($state[$p:l3] != 0) then
      subsequence($state, $p:l3, $p:e3 - $p:l3 + 1)
    else
      p:matchW($input, $state[$p:b3], $set)
  return
  (
    $match[1] * 65536 + $state[$p:lk],
    subsequence($state, $p:lk + 1, $p:l3 - $p:lk - 1),
    $match,
    subsequence($state, $p:e3 + 1)
  )
};

(:~
 : Lookahead one token on level 1.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead1($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:l1] != 0) then
    $state
  else
    let $match := p:match($input, $state[$p:b1], $set)
    return
    (
      $match[1],
      subsequence($state, $p:lk + 1, $p:l1 - $p:lk - 1),
      $match,
      0, $match[3], 0,
      subsequence($state, $p:e2 + 1)
    )
};

(:~
 : Reduce the result stack, creating a nonterminal element. Pop
 : $count elements off the stack, wrap them in a new element
 : named $name, and push the new element.
 :
 : @param $state the parser state.
 : @param $name the name of the result node.
 : @param $count the number of child nodes.
 : @param $begin the input index where the nonterminal begins.
 : @param $end the input index where the nonterminal ends.
 : @return the updated parser state.
 :)
declare function p:reduce($state as item()+, $name as xs:string, $count as xs:integer, $begin as xs:integer, $end as xs:integer) as item()+
{
  subsequence($state, 1, $count),
  element {$name}
  {
    subsequence($state, $count + 1)
  }
};

(:~
 : Parse start symbol XQuery from given string.
 :
 : @param $s the string to be parsed.
 : @return the result as generated by parser actions.
 :)
declare function p:parse-XQuery($s as xs:string) as item()*
{
  let $state := p:parse-XQuery($s, (0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, false()))
  let $error := $state[$p:error]
  return
    if ($error) then
      element ERROR {$error/@*, p:error-message($s, $error)}
    else
      subsequence($state, $p:result)
};

(: End :)
