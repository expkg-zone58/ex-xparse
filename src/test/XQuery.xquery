xquery version "1.0" encoding "UTF-8";

(: This file was generated on Fri Sep 16, 2022 14:01 (UTC+01) by REx v5.55 which is Copyright (c) 1979-2022 by Gunther Rademacher <grd@gmx.net> :)
(: REx command line: BaseX.ebnf -xquery -ll 2 -backtrack -name XQuery -trace :)

(:~
 : The parser that was generated for the XQuery grammar.
 :)
module namespace p="XQuery";
declare default function namespace "http://www.w3.org/2005/xpath-functions";

(:~
 : The index of the lexer state for accessing the combined
 : (i.e. level > 1) lookahead code.
 :)
declare variable $p:lk as xs:integer := 1;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the begin of the token that has been consumed.
 :)
declare variable $p:b0 as xs:integer := 2;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the end of the token that has been consumed.
 :)
declare variable $p:e0 as xs:integer := 3;

(:~
 : The index of the lexer state for accessing the code of the
 : level-1-lookahead token.
 :)
declare variable $p:l1 as xs:integer := 4;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the begin of the level-1-lookahead token.
 :)
declare variable $p:b1 as xs:integer := 5;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the end of the level-1-lookahead token.
 :)
declare variable $p:e1 as xs:integer := 6;

(:~
 : The index of the lexer state for accessing the code of the
 : level-2-lookahead token.
 :)
declare variable $p:l2 as xs:integer := 7;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the begin of the level-2-lookahead token.
 :)
declare variable $p:b2 as xs:integer := 8;

(:~
 : The index of the lexer state for accessing the position in the
 : input string of the end of the level-2-lookahead token.
 :)
declare variable $p:e2 as xs:integer := 9;

(:~
 : The index of the lexer state for accessing the token code that
 : was expected when an error was found.
 :)
declare variable $p:error as xs:integer := 10;

(:~
 : The index of the lexer state for accessing the memoization
 : of backtracking results.
 :)
declare variable $p:memo as xs:integer := 11;

(:~
 : The index of the lexer state that points to the first entry
 : used for collecting action results.
 :)
declare variable $p:result as xs:integer := 12;

(:~
 : The codepoint to charclass mapping for 7 bit codepoints.
 :)
declare variable $p:MAP0 as xs:integer+ :=
(
  70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30, 40, 41,
  42, 43, 44, 45, 46, 47, 48, 49, 30, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 38,
  38
);

(:~
 : The codepoint to charclass mapping for codepoints below the surrogate block.
 :)
declare variable $p:MAP1 as xs:integer+ :=
(
  108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181, 181, 214,
  215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 247, 261, 277, 293, 309, 355, 371,
  387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  339, 339, 440, 440, 440, 440, 440, 440, 440, 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422,
  423, 423, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423,
  423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  423, 423, 423, 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
  0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32,
  33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
  30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
  30, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 38, 38, 38, 38, 38, 38, 38, 38, 38,
  38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 69, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
  69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69
);

(:~
 : The codepoint to charclass mapping for codepoints above the surrogate block.
 :)
declare variable $p:MAP2 as xs:integer+ :=
(
  57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30, 38
);

(:~
 : The token-set-id to DFA-initial-state mapping.
 :)
declare variable $p:INITIAL as xs:integer+ :=
(
  1, 2, 3, 94212, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
  61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
  90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
  115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
  138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
  161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
  184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
  207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
  230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
  253, 254
);

(:~
 : The DFA transition table.
 :)
declare variable $p:TRANSITION as xs:integer+ :=
(
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 18176, 18192, 18198, 18198, 18198, 18215, 18198, 18198, 18198, 18199, 18234, 18198, 18198, 18198, 18245, 18218,
  18261, 18277, 19313, 19313, 21152, 19313, 33321, 19313, 19313, 34619, 19134, 19313, 19313, 19313, 19313, 21565, 28537,
  18295, 42504, 19454, 20118, 23939, 27538, 18328, 31872, 19313, 27941, 19313, 19313, 28527, 18369, 18433, 18488, 18384,
  28219, 19142, 18592, 18504, 18527, 18583, 18599, 18511, 19948, 19848, 19313, 28613, 19313, 19313, 19313, 18615, 29078,
  22849, 18638, 18688, 18699, 41644, 18652, 18752, 18771, 18720, 19468, 18749, 18768, 42504, 18733, 19847, 22184, 24713,
  18353, 41213, 18787, 25665, 34618, 18807, 18837, 35086, 18863, 18879, 18945, 18966, 18895, 18874, 18940, 18961, 18982,
  19849, 19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237, 19256, 19834, 19221, 19240, 19259, 18310,
  19275, 19312, 19330, 21566, 19357, 19382, 18562, 19398, 28544, 18567, 19445, 19484, 30528, 19508, 19527, 42374, 19574,
  19563, 19579, 19595, 19621, 19637, 40503, 27193, 27209, 27202, 19673, 19709, 19745, 19774, 19820, 29327, 42487, 19865,
  19842, 19901, 19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 20157, 19313, 19313, 19313, 19313, 39975, 19313, 19313, 19313, 24587, 20179, 39103, 20201, 20215, 20226,
  19885, 20247, 18277, 19313, 19313, 21152, 19313, 33321, 19313, 26696, 34619, 19134, 19313, 19313, 19313, 19313, 21565,
  28537, 18295, 42504, 18993, 21437, 23939, 27538, 18328, 31872, 19313, 27941, 19313, 19313, 28527, 18369, 18433, 18488,
  18384, 28219, 19142, 18592, 18504, 18527, 18583, 18599, 18511, 19948, 19848, 19313, 28613, 19313, 19313, 19313, 18615,
  29078, 22849, 18638, 18688, 18699, 41644, 18652, 18752, 18771, 18720, 19468, 18749, 18768, 42504, 18733, 19847, 22184,
  24713, 18353, 41213, 18787, 25665, 34618, 18807, 18837, 35086, 18863, 18879, 18945, 18966, 18895, 18874, 18940, 18961,
  18982, 19849, 19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237, 19256, 19834, 19221, 19240, 19259,
  18310, 19275, 19312, 19330, 21566, 19357, 19382, 18562, 19398, 28544, 18567, 19445, 19484, 30528, 19508, 19527, 42374,
  19574, 19563, 19579, 19595, 19621, 19637, 40503, 27193, 27209, 27202, 19673, 19709, 19745, 19774, 19820, 29327, 42487,
  19865, 19842, 19901, 19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 20157, 20263, 19313, 19313, 19313, 20284, 19313, 19313, 21404, 20304, 20179, 21406, 19313, 19313,
  19313, 20320, 20247, 20375, 19313, 19313, 21152, 19313, 33321, 23957, 19313, 34619, 19134, 19313, 19313, 19313, 19313,
  21565, 28537, 18295, 42504, 19454, 20118, 20331, 27538, 18328, 31872, 19313, 27941, 19313, 19313, 28527, 18369, 18433,
  18488, 18384, 28219, 19142, 18592, 18504, 18527, 18583, 18599, 18511, 19948, 19848, 19313, 28613, 19313, 19313, 19313,
  18615, 29078, 22849, 18638, 18688, 18699, 41644, 18652, 18752, 18771, 18720, 19468, 18749, 18768, 42504, 18733, 19847,
  22184, 24713, 18353, 41213, 18787, 25665, 34618, 18807, 18837, 35086, 18863, 18879, 18945, 18966, 18895, 18874, 18940,
  18961, 18982, 19849, 19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237, 19256, 19834, 19221, 19240,
  19259, 18310, 19275, 19312, 19330, 21566, 19357, 19382, 18562, 19398, 28544, 18567, 19445, 19484, 30528, 19508, 19527,
  42374, 19574, 19563, 19579, 19595, 19621, 19637, 40503, 27193, 27209, 27202, 19673, 19709, 19745, 19774, 19820, 29327,
  42487, 19865, 19842, 19901, 19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 20393, 20523, 19313, 19313, 19313, 20422, 19313, 19313, 20523, 24587, 20179, 20444, 24947,
  20479, 20517, 19729, 20539, 18277, 19313, 19313, 23214, 19313, 33321, 24284, 19313, 34619, 19134, 19313, 19313, 19313,
  19313, 21565, 28537, 18295, 42504, 19454, 20118, 20555, 27538, 18328, 31872, 19313, 27941, 19313, 19313, 28527, 18369,
  18433, 18488, 18384, 28219, 19142, 18592, 18504, 18527, 18583, 18599, 18511, 19948, 19848, 19313, 28613, 19313, 19313,
  19313, 18615, 29078, 22849, 18638, 18688, 18699, 41644, 18652, 18752, 18771, 18720, 19002, 18749, 18768, 42504, 18733,
  19847, 22184, 24713, 18353, 41213, 18787, 25665, 34618, 18807, 18837, 35086, 18863, 18879, 18945, 18966, 18895, 18874,
  18940, 18961, 18982, 19849, 19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237, 19256, 19834, 19221,
  19240, 19259, 18310, 19275, 19312, 19330, 21566, 19357, 19382, 18562, 19398, 28544, 18567, 19445, 19484, 30528, 19508,
  19527, 42374, 19574, 19563, 19579, 19595, 19621, 19637, 40503, 27193, 27209, 27202, 19673, 19709, 19745, 19774, 19820,
  29327, 42487, 19865, 19842, 19901, 19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 20157, 39204, 19313, 19313, 19313, 20582, 19313, 19313, 39204, 30497, 20179, 19313,
  19313, 20627, 30495, 20615, 20247, 18277, 19313, 19313, 21152, 19313, 33321, 19313, 19313, 34619, 19134, 19313, 19313,
  19313, 19313, 21565, 28537, 18295, 42504, 19454, 20118, 23939, 27538, 18328, 31872, 19313, 27941, 19313, 19313, 28527,
  18369, 18433, 18488, 18384, 28219, 19142, 18592, 18504, 18527, 18583, 18599, 18511, 19948, 19848, 19313, 28613, 19313,
  19313, 19313, 18615, 29078, 22849, 18638, 18688, 18699, 41644, 18652, 18752, 18771, 18720, 19468, 18749, 18768, 42504,
  18733, 19847, 22184, 24713, 18353, 41213, 18787, 25665, 34618, 18807, 18837, 35086, 18863, 18879, 18945, 18966, 18895,
  18874, 18940, 18961, 18982, 19849, 19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237, 19256, 19834,
  19221, 19240, 19259, 18310, 19275, 19312, 19330, 21566, 19357, 19382, 18562, 19398, 28544, 18567, 19445, 19484, 30528,
  19508, 19527, 42374, 19574, 19563, 19579, 19595, 19621, 19637, 40503, 27193, 27209, 27202, 19673, 19709, 19745, 19774,
  19820, 29327, 42487, 19865, 19842, 19901, 19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 20157, 19313, 19313, 19313, 19313, 20660, 19313, 19313, 19313, 20666, 20682,
  20463, 19313, 19313, 28237, 20704, 20247, 18277, 19313, 19313, 21152, 19313, 33321, 19313, 19313, 34619, 19134, 19313,
  19313, 19313, 19313, 21565, 28537, 18295, 42504, 19454, 20118, 23939, 27538, 18328, 31872, 19313, 27941, 19313, 19313,
  28527, 18369, 18433, 18488, 18384, 28219, 19142, 18592, 18504, 18527, 18583, 18599, 18511, 19948, 19848, 19313, 28613,
  19313, 19313, 19313, 18615, 29078, 22849, 18638, 18688, 18699, 41644, 18652, 18752, 18771, 18720, 19468, 18749, 18768,
  42504, 18733, 19847, 22184, 24713, 18353, 41213, 18787, 25665, 34618, 18807, 18837, 35086, 18863, 18879, 18945, 18966,
  18895, 18874, 18940, 18961, 18982, 19849, 19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237, 19256,
  19834, 19221, 19240, 19259, 18310, 19275, 19312, 19330, 21566, 19357, 19382, 18562, 19398, 28544, 18567, 19445, 19484,
  30528, 19508, 19527, 42374, 19574, 19563, 19579, 19595, 19621, 19637, 40503, 27193, 27209, 27202, 19673, 19709, 19745,
  19774, 19820, 29327, 42487, 19865, 19842, 19901, 19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 20157, 19313, 19313, 19313, 19313, 39975, 19313, 19313, 19313, 24227,
  20734, 19313, 19313, 19313, 19313, 19313, 20247, 20756, 19313, 19313, 21152, 19313, 33321, 19313, 19313, 34619, 19134,
  19313, 19313, 19313, 19313, 21565, 28537, 18295, 42504, 19454, 20118, 23939, 27538, 18328, 31872, 19313, 27941, 19313,
  19313, 28527, 18369, 18433, 18488, 18384, 28219, 19142, 18592, 18504, 20774, 20832, 18599, 18511, 19948, 19848, 19313,
  28613, 19313, 19313, 19313, 18615, 29078, 22849, 18638, 18688, 18699, 41644, 18652, 18752, 18771, 18720, 19468, 18749,
  18768, 42504, 18733, 19847, 22184, 24713, 18353, 41213, 18787, 25665, 34618, 18807, 18837, 35086, 18863, 18879, 18945,
  18966, 18895, 18874, 18940, 18961, 18982, 19849, 19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237,
  19256, 19834, 19221, 19240, 19259, 18310, 19275, 19312, 19330, 21566, 19357, 19382, 18562, 19398, 28544, 18567, 19445,
  19484, 30528, 19508, 19527, 42374, 19574, 19563, 19579, 19595, 19621, 19637, 40503, 27193, 27209, 27202, 19673, 19709,
  19745, 19774, 19820, 29327, 42487, 19865, 19842, 19901, 19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 20157, 20883, 19313, 19313, 19313, 20904, 19313, 19313, 42439,
  20924, 20940, 42441, 19313, 19313, 19313, 20962, 20247, 20997, 19313, 19313, 21152, 19313, 33321, 35762, 19313, 34619,
  19134, 19313, 19313, 19313, 19313, 21565, 28537, 18295, 42504, 19454, 20118, 31925, 27538, 18328, 31872, 19313, 27941,
  19313, 19313, 28527, 18369, 18433, 18488, 18384, 28219, 19142, 18592, 18504, 18527, 18583, 18599, 18511, 19948, 19848,
  19313, 28613, 19313, 19313, 19313, 18615, 29078, 22849, 18638, 18688, 18699, 41644, 18652, 18752, 18771, 18720, 19468,
  18749, 18768, 42504, 18733, 19847, 22184, 24713, 18353, 41213, 18787, 25665, 34618, 18807, 18837, 35086, 18863, 18879,
  18945, 18966, 18895, 18874, 18940, 18961, 18982, 19849, 19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218,
  19237, 19256, 19834, 19221, 19240, 19259, 18310, 19275, 19312, 19330, 21566, 19357, 19382, 18562, 19398, 28544, 18567,
  19445, 19484, 30528, 19508, 19527, 42374, 19574, 19563, 19579, 19595, 19621, 19637, 40503, 27193, 27209, 27202, 19673,
  19709, 19745, 19774, 19820, 29327, 42487, 19865, 19842, 19901, 19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104,
  20134, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 20157, 21015, 21091, 21091, 21091, 21041, 21091, 21091,
  21025, 21069, 21085, 21053, 21092, 21108, 21122, 21138, 20247, 18277, 19313, 19313, 28155, 19313, 33321, 19313, 19313,
  34619, 19134, 19313, 19313, 19313, 19313, 21565, 28537, 18295, 42504, 19454, 20118, 23939, 27538, 18328, 41495, 19313,
  27941, 19313, 19313, 28527, 18369, 18433, 18488, 18384, 28219, 19142, 18592, 18504, 18527, 18583, 18599, 18511, 19948,
  19848, 19313, 28613, 19313, 19313, 19313, 18615, 29078, 22849, 18638, 18688, 18699, 41644, 18652, 18752, 18771, 18720,
  19468, 18749, 18768, 42504, 18733, 19847, 22184, 24713, 18353, 41213, 18787, 25665, 34618, 18807, 18837, 35086, 18863,
  18879, 18945, 18966, 18895, 18874, 18940, 18961, 18982, 19849, 19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193,
  19218, 19237, 19256, 19834, 19221, 19240, 19259, 18310, 19275, 19312, 19330, 21566, 19357, 19382, 18562, 19398, 28544,
  18567, 19445, 19484, 30528, 19508, 19527, 42374, 19574, 19563, 19579, 19595, 19621, 19637, 40503, 27193, 27209, 27202,
  19673, 19709, 19745, 19774, 19820, 29327, 42487, 19865, 19842, 19901, 19845, 18312, 19928, 19964, 20020, 19462, 20067,
  20104, 20134, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 20157, 21256, 19313, 19313, 19313, 21175, 19313,
  19313, 21211, 24587, 21205, 21227, 21240, 21240, 21251, 21272, 21314, 18277, 19313, 19313, 24163, 19313, 33321, 19313,
  19313, 34619, 19134, 19313, 19313, 19313, 19313, 21565, 28537, 18295, 42504, 19454, 20118, 23939, 27538, 18328, 39972,
  19313, 27941, 19313, 19313, 28527, 18369, 18433, 18488, 18384, 28219, 19142, 18592, 18504, 18527, 18583, 18599, 18511,
  19948, 19848, 19313, 28613, 19313, 19313, 19313, 18615, 29078, 22849, 18638, 18688, 18699, 41644, 18652, 18752, 18771,
  18720, 19468, 18749, 18768, 42504, 18733, 19847, 22184, 24713, 18353, 41213, 18787, 25665, 34618, 18807, 18837, 35086,
  18863, 18879, 18945, 18966, 18895, 18874, 18940, 18961, 18982, 19849, 19018, 19054, 19077, 19105, 24660, 19121, 19165,
  19193, 19218, 19237, 19256, 19834, 19221, 19240, 19259, 18310, 19275, 19312, 19330, 21566, 19357, 19382, 18562, 19398,
  28544, 18567, 19445, 19484, 30528, 19508, 19527, 42374, 19574, 19563, 19579, 19595, 19621, 19637, 40503, 27193, 27209,
  27202, 19673, 19709, 19745, 19774, 19820, 29327, 42487, 19865, 19842, 19901, 19845, 18312, 19928, 19964, 20020, 19462,
  20067, 20104, 20134, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 20157, 41524, 19313, 19313, 19313, 39975,
  19313, 19313, 19313, 24587, 20179, 24862, 35403, 35410, 21330, 21377, 20247, 18277, 19313, 19313, 21152, 19313, 33321,
  19313, 19313, 34619, 19134, 19313, 19313, 19313, 19313, 21565, 28537, 18295, 42504, 19454, 20118, 23939, 27538, 18328,
  31872, 19313, 27941, 19313, 19313, 28527, 18369, 18433, 18488, 18384, 28219, 19142, 18592, 18504, 18527, 21422, 18599,
  18511, 19948, 19848, 19313, 28613, 19313, 19313, 19313, 18615, 29078, 22849, 18638, 18688, 18699, 41644, 18652, 18752,
  18771, 18720, 42527, 18749, 18768, 42504, 18733, 19847, 22184, 24713, 18353, 41213, 18787, 25665, 34618, 18807, 18837,
  35086, 18863, 18879, 18945, 18966, 18895, 18874, 18940, 18961, 18982, 19849, 19018, 19054, 19077, 19105, 24660, 19121,
  19165, 19193, 19218, 19237, 19256, 19834, 19221, 19240, 19259, 18310, 19275, 19312, 19330, 21566, 19357, 19382, 18562,
  19398, 28544, 18567, 19445, 19484, 30528, 19508, 19527, 42374, 19574, 19563, 19579, 19595, 19621, 19637, 40503, 27193,
  27209, 27202, 19673, 19709, 19745, 19774, 19820, 29327, 42487, 19865, 19842, 19901, 19845, 18312, 19928, 19964, 20020,
  19462, 20067, 20104, 20134, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 20157, 19313, 19313, 19313, 19313,
  39975, 19313, 19313, 19313, 24587, 20179, 37251, 37297, 37304, 37482, 37473, 20247, 18277, 19313, 19313, 21152, 19313,
  33321, 19313, 19313, 34619, 19134, 19313, 19313, 19313, 19313, 21565, 28537, 18295, 42504, 19454, 20118, 23939, 27538,
  18328, 31872, 19313, 29261, 19313, 19313, 28527, 18369, 18433, 18488, 18384, 28219, 19142, 18592, 18504, 18527, 18583,
  18599, 18511, 19948, 19848, 19313, 28613, 19313, 19313, 19313, 18615, 29078, 22849, 18638, 18688, 18699, 41644, 18652,
  18752, 18771, 18720, 19468, 18749, 18768, 42504, 18733, 19847, 22184, 24713, 18353, 41213, 18787, 25665, 34618, 18807,
  18837, 35086, 18863, 18879, 18945, 18966, 18895, 18874, 18940, 18961, 18982, 19849, 19018, 19054, 19077, 19105, 24660,
  19121, 19165, 19193, 19218, 19237, 19256, 19834, 19221, 19240, 19259, 18310, 19275, 19312, 19330, 21566, 19357, 19382,
  18562, 19398, 28544, 18567, 19445, 19484, 30528, 19508, 19527, 42374, 19574, 19563, 19579, 19595, 19621, 19637, 40503,
  27193, 27209, 27202, 19673, 19709, 19745, 19774, 19820, 29327, 42487, 19865, 19842, 19901, 19845, 18312, 19928, 19964,
  20020, 19462, 20067, 20104, 20134, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 20157, 42603, 19313, 19313,
  19313, 21488, 21504, 19313, 42605, 24587, 21520, 20638, 20644, 20644, 21502, 42707, 20247, 18277, 19313, 19313, 21152,
  19313, 33321, 19313, 19313, 34619, 19134, 19313, 19313, 19313, 19313, 21565, 28537, 18295, 42504, 19454, 20118, 23939,
  27538, 18328, 31872, 19313, 27941, 19313, 19313, 28527, 18369, 18433, 18488, 18384, 28219, 19142, 18592, 18504, 18527,
  18583, 18599, 18511, 19948, 19848, 19313, 28613, 19313, 19313, 19313, 18615, 29078, 22849, 18638, 18688, 18699, 41644,
  18652, 18752, 18771, 18720, 19468, 18749, 18768, 42504, 18733, 19847, 22184, 24713, 18353, 41213, 18787, 25665, 34618,
  18807, 18837, 35086, 18863, 18879, 18945, 18966, 18895, 18874, 18940, 18961, 18982, 19849, 19018, 19054, 19077, 19105,
  24660, 19121, 19165, 19193, 19218, 19237, 19256, 19834, 19221, 19240, 19259, 18310, 19275, 19312, 19330, 21566, 19357,
  19382, 18562, 19398, 28544, 18567, 19445, 19484, 30528, 19508, 19527, 42374, 19574, 19563, 19579, 19595, 19621, 19637,
  40503, 27193, 27209, 27202, 19673, 19709, 19745, 19774, 19820, 29327, 42487, 19865, 19842, 19901, 19845, 18312, 19928,
  19964, 20020, 19462, 20067, 20104, 20134, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21536, 19313, 19313,
  19313, 19313, 39975, 19313, 19313, 19313, 24587, 20179, 39279, 21465, 21472, 21560, 38667, 21582, 18277, 19313, 19313,
  21152, 19313, 33321, 19313, 19313, 25282, 37359, 19313, 19313, 19313, 19313, 37089, 42752, 26629, 26228, 25496, 27162,
  19313, 35488, 19313, 31872, 24392, 29261, 19313, 21598, 33340, 37358, 29663, 19313, 19313, 37090, 31189, 27502, 27502,
  27574, 21617, 26228, 26228, 32654, 41394, 19313, 19313, 19313, 19313, 19313, 24403, 32927, 36261, 37358, 29663, 19313,
  37089, 35786, 27502, 27502, 27502, 25248, 26228, 26228, 26228, 40170, 41393, 33599, 21636, 19313, 19313, 19313, 19313,
  42582, 37358, 29664, 19313, 26471, 27502, 27502, 27502, 40347, 26228, 26228, 26228, 27412, 26842, 19313, 19313, 19313,
  19313, 35617, 37357, 32848, 33339, 36191, 27502, 27502, 32085, 33279, 26228, 21619, 27718, 19313, 19313, 22844, 37090,
  29664, 42056, 27502, 40340, 32096, 26228, 21655, 35532, 19313, 20231, 21677, 30379, 27502, 41391, 26228, 24115, 19313,
  20268, 40523, 29108, 41581, 40164, 25753, 19313, 31773, 21701, 21722, 25281, 21758, 21796, 34342, 23506, 41466, 27694,
  36800, 27744, 23503, 30441, 30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 20157, 19313,
  19313, 19313, 19313, 39975, 19313, 19313, 19313, 21873, 20179, 19313, 19313, 19313, 19313, 21889, 20247, 18277, 19313,
  19313, 21152, 19313, 34183, 19313, 19313, 25282, 37359, 19313, 19313, 19313, 19313, 37089, 42752, 26629, 26228, 29435,
  27162, 19313, 19313, 19313, 31872, 19313, 27941, 19313, 19313, 33340, 37358, 29663, 19313, 19313, 37090, 31189, 27502,
  27502, 27574, 21617, 26228, 26228, 37863, 41394, 19313, 19313, 19313, 19313, 19313, 24403, 19313, 37089, 37358, 29663,
  19313, 37089, 35786, 27502, 27502, 27502, 25248, 26228, 26228, 26228, 40170, 41393, 19313, 19313, 19313, 19313, 19313,
  19313, 25281, 37358, 29664, 19313, 26471, 27502, 27502, 27502, 40347, 26228, 26228, 26228, 27412, 26842, 19313, 19313,
  19313, 19313, 19313, 37357, 32848, 33339, 27502, 27502, 27502, 32085, 26228, 26228, 21619, 27718, 19313, 19313, 19313,
  37090, 29664, 42056, 27502, 26611, 32096, 26228, 39248, 19313, 19313, 19313, 33341, 30379, 27502, 41391, 26228, 21661,
  19313, 19313, 40523, 39798, 26792, 26228, 25753, 19313, 31773, 31199, 21620, 25281, 31197, 23506, 41463, 23506, 41466,
  23509, 41391, 27744, 23503, 30441, 30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 20157,
  41436, 19313, 19313, 19313, 39975, 19313, 19313, 19313, 24587, 20179, 39415, 28457, 21933, 25142, 25134, 20247, 18277,
  19313, 19313, 21152, 19313, 33321, 19313, 35366, 34619, 19134, 21949, 19313, 19313, 19313, 21565, 28537, 18295, 42504,
  19454, 20118, 23939, 27538, 18328, 31872, 19313, 27941, 19313, 19313, 28527, 18369, 18433, 18488, 18384, 28219, 19142,
  18592, 18504, 18527, 18583, 18599, 18511, 19948, 19848, 19313, 28613, 19313, 19313, 19313, 18615, 29078, 22849, 18638,
  18688, 18699, 41644, 18652, 18752, 18771, 18720, 19468, 18749, 18768, 42504, 18733, 19847, 22184, 24713, 18353, 41213,
  18787, 25665, 34618, 18807, 18837, 35086, 18863, 18879, 18945, 18966, 18895, 18874, 18940, 18961, 18982, 19849, 19018,
  19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237, 19256, 19834, 19221, 19240, 19259, 18310, 19275, 19312,
  19330, 21566, 19357, 19382, 18562, 19398, 28544, 18567, 19445, 19484, 30528, 19508, 19527, 42374, 19574, 19563, 19579,
  19595, 19621, 19637, 40503, 27193, 27209, 27202, 19673, 19709, 19745, 19774, 19820, 29327, 42487, 19865, 19842, 19901,
  19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  20157, 21966, 19313, 19313, 19313, 39975, 19313, 19313, 19313, 21985, 20179, 22028, 19313, 19313, 19313, 22001, 22017,
  18277, 19313, 19313, 21152, 19313, 37626, 19313, 19313, 25282, 37359, 19313, 19313, 19313, 19313, 37089, 42752, 26629,
  26228, 29692, 27162, 19313, 19313, 19313, 31872, 19313, 38118, 32707, 19313, 33340, 37358, 29663, 19313, 19313, 37090,
  31189, 27502, 27502, 27574, 21617, 26228, 26228, 37863, 29727, 22051, 19313, 19313, 19313, 19313, 23785, 19313, 37089,
  37358, 29663, 19313, 37089, 35786, 27502, 27502, 27502, 25248, 26228, 26228, 26228, 40170, 21706, 19290, 19313, 19313,
  19313, 19313, 28889, 25281, 37358, 29664, 19313, 26471, 27502, 27502, 27502, 33519, 26228, 26228, 26228, 27412, 35045,
  19313, 19313, 19313, 19313, 19313, 37357, 32848, 33339, 27502, 27502, 27502, 22070, 26228, 26228, 21619, 27718, 19313,
  19313, 19313, 37090, 29664, 42056, 27502, 41563, 22097, 26228, 39248, 19313, 19313, 19313, 33341, 30379, 27502, 41391,
  26228, 21661, 19313, 19313, 40523, 39798, 26792, 26228, 25753, 19313, 31773, 31199, 21620, 25281, 31197, 23506, 41463,
  23506, 41466, 23509, 41391, 27744, 23503, 30441, 30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 20157, 20888, 19313, 19313, 19313, 22115, 30647, 19313, 23377, 24587, 22134, 42831, 22149, 22165, 22179, 20163,
  22200, 22216, 19313, 19313, 28419, 19313, 33321, 19313, 19313, 34619, 19134, 19313, 19313, 19313, 19313, 21565, 41656,
  23077, 22987, 23066, 22646, 23939, 27538, 18328, 24126, 19313, 27941, 19313, 19313, 28527, 18369, 18433, 18488, 18384,
  28219, 19202, 22488, 22236, 22601, 22263, 22278, 22308, 22571, 22458, 19313, 28613, 19313, 19313, 19313, 18615, 29078,
  22849, 18638, 18688, 18699, 41644, 22339, 22350, 22366, 22247, 41665, 22993, 22548, 22987, 22393, 22457, 22184, 24713,
  18353, 41213, 18787, 25665, 34618, 18807, 18837, 35086, 22429, 22445, 22474, 22377, 27295, 22562, 22504, 22534, 22587,
  22407, 19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193, 22617, 22633, 23022, 22880, 22662, 22701, 22323, 22953,
  19275, 19312, 19330, 21566, 19357, 22727, 22743, 22759, 22891, 22813, 22829, 19484, 30528, 19508, 19527, 36325, 22865,
  22907, 23053, 22675, 19621, 19637, 40503, 27280, 22923, 22977, 22292, 19709, 23009, 23038, 22518, 29327, 23093, 23120,
  40791, 22711, 40794, 22413, 23109, 22938, 23136, 23171, 23200, 23266, 23280, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 20157, 30012, 19313, 19313, 19313, 23303, 23322, 19313, 19313, 24587, 23346, 23306, 23361, 23361, 23372,
  20185, 20247, 18277, 19313, 19313, 21152, 19313, 33321, 19313, 19313, 34619, 19134, 19313, 19313, 19313, 19313, 21565,
  28537, 18295, 42504, 19454, 20118, 23939, 27538, 18328, 31872, 19313, 27941, 19313, 19313, 28527, 18369, 18433, 18488,
  18384, 28219, 19142, 18592, 18504, 18527, 18583, 18599, 18511, 19948, 19848, 19313, 28613, 19313, 19313, 19313, 23393,
  23432, 22849, 18638, 18688, 18699, 41644, 18652, 18752, 18771, 18720, 19468, 18749, 18768, 42504, 18733, 23448, 23466,
  24713, 18353, 41213, 18787, 30693, 34618, 18807, 18837, 35086, 18863, 18879, 18945, 18966, 18895, 18874, 18940, 18961,
  18982, 23450, 19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237, 19256, 18540, 19221, 19240, 19259,
  18310, 19275, 19312, 19330, 21566, 19357, 19382, 18562, 23525, 18551, 18567, 19445, 19484, 30528, 19508, 19527, 42374,
  19574, 19563, 19579, 19595, 19621, 19637, 40503, 27193, 27209, 27202, 19673, 19709, 19745, 19774, 19820, 29327, 42487,
  19865, 19842, 19901, 19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 20157, 19313, 19313, 19313, 19313, 39975, 19313, 19313, 19313, 19313, 38755, 23243, 23250, 23250,
  23565, 23586, 20247, 18277, 19313, 19313, 21152, 19313, 33321, 19313, 19313, 34619, 19134, 23624, 19313, 19313, 19313,
  21565, 28537, 18295, 42504, 19454, 42790, 23939, 27538, 18328, 31872, 19313, 27941, 19313, 19313, 28527, 18369, 18433,
  18488, 18384, 28219, 19142, 18592, 18504, 18527, 18583, 18599, 18511, 19948, 19848, 19313, 28613, 19313, 19313, 19313,
  18615, 29078, 22849, 18638, 18688, 18699, 41644, 18652, 18752, 18771, 18720, 19468, 18749, 18768, 42504, 18733, 19847,
  22184, 24713, 18353, 41213, 18787, 25665, 34618, 18807, 18837, 35086, 18863, 18879, 18945, 18966, 18895, 18874, 18940,
  18961, 18982, 19849, 19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237, 19256, 19834, 19221, 19240,
  19259, 18310, 19275, 19312, 19330, 21566, 19357, 19382, 18562, 19398, 28544, 18567, 19445, 19484, 30528, 19508, 19527,
  42374, 19574, 19563, 19579, 19595, 19621, 19637, 40503, 27193, 27209, 27202, 19673, 19709, 19745, 19774, 19820, 29327,
  42487, 19865, 19842, 19901, 19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 23642, 19313, 23655, 19313, 19313, 39975, 19313, 19313, 19313, 24587, 20179, 40023, 23672,
  23685, 23696, 20428, 20247, 23717, 19313, 19313, 21152, 19313, 33321, 19313, 19313, 34619, 18821, 23738, 19313, 19313,
  19313, 21565, 28537, 18295, 42504, 19454, 23758, 23939, 27538, 18328, 31872, 19313, 27941, 19313, 19313, 28527, 18369,
  18433, 18488, 18384, 28219, 19142, 18592, 18504, 18527, 18583, 18599, 18511, 19948, 19848, 19313, 28613, 19313, 19313,
  19313, 18615, 29078, 22849, 18638, 18688, 18699, 41644, 18652, 18752, 18771, 18720, 19468, 18749, 18768, 42504, 18733,
  19847, 22184, 24713, 18353, 41213, 18787, 25665, 34618, 18807, 18837, 35086, 18863, 18879, 18945, 18966, 18895, 18874,
  18940, 18961, 18982, 19849, 19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237, 19256, 19834, 19221,
  19240, 19259, 18310, 19275, 19312, 19330, 21566, 19357, 19382, 18562, 19398, 28544, 18567, 19445, 19484, 30528, 19508,
  19527, 42374, 19574, 19563, 19579, 19595, 19621, 19637, 40503, 27193, 27209, 27202, 19673, 19709, 19745, 19774, 19820,
  29327, 42487, 19865, 19842, 19901, 19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 23801, 39342, 19313, 19313, 19313, 39975, 19313, 19313, 19313, 24587, 20179, 21354,
  21361, 21361, 23840, 20688, 23873, 23889, 19313, 19313, 21152, 19313, 33321, 19313, 19313, 34619, 19134, 23908, 19313,
  19313, 19313, 21565, 28537, 18295, 42504, 19454, 19758, 23928, 27538, 18328, 31872, 19313, 27941, 19313, 19313, 28527,
  18369, 18433, 18488, 18384, 28219, 19142, 18592, 18504, 18527, 18583, 18599, 18511, 19948, 19848, 19313, 28613, 19313,
  19313, 19313, 18615, 29078, 22849, 18638, 18688, 18699, 41644, 18652, 18752, 18771, 18720, 19468, 18749, 18768, 42504,
  18733, 19847, 22184, 24713, 18353, 41213, 18787, 25665, 34618, 18807, 18837, 35086, 18863, 18879, 18945, 18966, 18895,
  18874, 18940, 18961, 18982, 19849, 19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237, 19256, 19834,
  19221, 19240, 19259, 18310, 19275, 19312, 19330, 21566, 19357, 19382, 18562, 19398, 28544, 18567, 19445, 19484, 30528,
  19508, 19527, 42374, 19574, 19563, 19579, 19595, 19621, 19637, 40503, 27193, 27209, 27202, 19673, 19709, 19745, 19774,
  19820, 29327, 42487, 19865, 19842, 19901, 19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 23973, 19313, 19313, 19313, 19313, 23989, 19313, 19313, 19313, 24587, 20179,
  19313, 23992, 24021, 24026, 24008, 24043, 18277, 19313, 19313, 21152, 19313, 33321, 19313, 39734, 34619, 19134, 19313,
  19313, 19313, 19313, 21565, 28537, 18295, 42504, 19939, 24059, 23939, 27538, 18328, 31872, 19313, 27941, 19313, 19313,
  28527, 18369, 18433, 18488, 18384, 28219, 19142, 18592, 18504, 18527, 18583, 18599, 18511, 19948, 19848, 19313, 28613,
  19313, 19313, 19313, 18615, 29078, 22849, 18638, 18688, 18699, 41644, 18652, 18752, 18771, 18720, 19468, 18749, 18768,
  42504, 18733, 19847, 22184, 24713, 18353, 41213, 18787, 25665, 34618, 18807, 18837, 35086, 18863, 18879, 18945, 18966,
  18895, 18874, 18940, 18961, 18982, 19849, 19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237, 19256,
  19834, 19221, 19240, 19259, 18310, 19275, 19312, 19330, 21566, 19357, 19382, 18562, 19398, 28544, 18567, 19445, 19484,
  30528, 19508, 19527, 42374, 19574, 19563, 19579, 19595, 19621, 19637, 40503, 27193, 27209, 27202, 19673, 19709, 19745,
  19774, 19820, 29327, 42487, 19865, 19842, 19901, 19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 20157, 19313, 19313, 19313, 19313, 39975, 19313, 19313, 19313, 24587,
  20179, 19313, 19313, 19313, 19313, 24149, 20247, 18277, 19313, 19313, 21152, 19313, 33321, 19313, 19313, 34619, 19134,
  19313, 19313, 19313, 19313, 21565, 28537, 18295, 42504, 19454, 20118, 23939, 27538, 18328, 31872, 19313, 27941, 19313,
  19313, 28527, 18369, 18433, 18488, 18384, 28219, 19142, 18592, 18504, 18527, 18583, 18599, 18511, 19948, 19848, 19313,
  28613, 19313, 19313, 19313, 18615, 29078, 22849, 18638, 18688, 18699, 41644, 18652, 18752, 18771, 18720, 19468, 18749,
  18768, 42504, 18733, 19847, 22184, 24713, 18353, 41213, 18787, 25665, 34618, 18807, 18837, 35086, 18863, 18879, 18945,
  18966, 18895, 18874, 18940, 18961, 18982, 19849, 19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237,
  19256, 19834, 19221, 19240, 19259, 18310, 19275, 19312, 19330, 21566, 19357, 19382, 18562, 19398, 28544, 18567, 19445,
  19484, 30528, 19508, 19527, 42374, 19574, 19563, 19579, 19595, 19621, 19637, 40503, 27193, 27209, 27202, 19673, 19709,
  19745, 19774, 19820, 29327, 42487, 19865, 19842, 19901, 19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 19313, 19313, 19313, 39975, 19313, 19313, 19313,
  24587, 20179, 29663, 19313, 19313, 33942, 25967, 24186, 18277, 19313, 19313, 21152, 19313, 19313, 19313, 19313, 25282,
  37359, 19313, 19313, 19313, 19313, 37089, 42752, 26629, 26228, 25496, 27162, 19313, 19313, 19313, 31872, 19313, 19313,
  19313, 19313, 33340, 37358, 29663, 19313, 19313, 37090, 33119, 27502, 27502, 29047, 24208, 26228, 26228, 37863, 41394,
  19313, 19313, 19313, 19313, 19313, 39978, 19313, 37089, 37358, 29663, 19313, 37089, 35786, 27502, 27502, 27502, 25432,
  26228, 26228, 26228, 40170, 32231, 23149, 19313, 19313, 19313, 19313, 28889, 25281, 37358, 29664, 19313, 26471, 27502,
  27502, 27502, 40347, 26228, 26228, 26228, 27412, 35045, 19313, 19313, 19313, 19313, 24226, 37357, 32848, 33339, 27502,
  27502, 27502, 27019, 26228, 26228, 21619, 27718, 19313, 19313, 19313, 37090, 29664, 42056, 27502, 41563, 22097, 26228,
  39248, 19313, 19313, 38284, 33341, 30379, 27502, 41391, 26228, 21661, 19313, 19313, 40523, 39798, 26792, 26228, 25753,
  19313, 31773, 31199, 21620, 25281, 31197, 23506, 41463, 23506, 41466, 23509, 41391, 27744, 23503, 30441, 30441, 21821,
  25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 19313, 19313, 19313, 39975, 19313, 19313,
  19313, 24587, 20179, 29663, 19313, 19313, 33942, 25967, 24186, 18277, 19313, 19313, 21152, 19313, 19313, 19313, 19313,
  25282, 37359, 19313, 19313, 19313, 19313, 37089, 42752, 26629, 26228, 25496, 27162, 19313, 19313, 19313, 31872, 19313,
  19313, 19313, 19313, 33340, 37358, 29663, 19313, 19313, 37090, 33119, 27502, 27502, 29047, 24208, 26228, 26228, 37863,
  41394, 19313, 19313, 19313, 19313, 19313, 39978, 19313, 37089, 37358, 29663, 19313, 37089, 35786, 27502, 27502, 27502,
  25432, 26228, 26228, 26228, 40170, 32231, 23149, 19313, 19313, 19313, 19313, 28889, 25281, 37358, 29664, 19313, 26471,
  27502, 27502, 27502, 40347, 26228, 26228, 26228, 27412, 35045, 19313, 19313, 19313, 19313, 19313, 37357, 32848, 33339,
  27502, 27502, 27502, 27019, 26228, 26228, 21619, 27718, 19313, 19313, 19313, 37090, 29664, 42056, 27502, 41563, 22097,
  26228, 39248, 19313, 19313, 19313, 33341, 30379, 27502, 41391, 26228, 21661, 19313, 19313, 40523, 39798, 26792, 26228,
  25753, 19313, 31773, 31199, 21620, 25281, 31197, 23506, 41463, 23506, 41466, 23509, 41391, 27744, 23503, 30441, 30441,
  21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 19313, 19313, 19313, 39975, 19313,
  19313, 19313, 24587, 20179, 29663, 19313, 19313, 33942, 25967, 24186, 18277, 19313, 19313, 21152, 19313, 19313, 19313,
  19313, 25282, 37359, 19313, 19313, 19313, 19313, 37089, 42752, 26629, 26228, 25496, 27162, 19313, 19313, 19313, 31872,
  19313, 19313, 19313, 19313, 33340, 37358, 29663, 19313, 19313, 37090, 33119, 27502, 27502, 29047, 24208, 26228, 26228,
  37863, 41394, 19313, 19313, 19313, 19313, 19313, 39978, 31804, 37089, 37358, 29663, 19313, 37089, 35786, 27502, 27502,
  27502, 25432, 26228, 26228, 26228, 40170, 32231, 23149, 19313, 19313, 19313, 19313, 28889, 25281, 37358, 29664, 19313,
  26471, 27502, 27502, 27502, 40347, 26228, 26228, 26228, 27412, 35045, 19313, 19313, 19313, 19313, 19313, 37357, 32848,
  33339, 27502, 27502, 27502, 27019, 26228, 26228, 21619, 27718, 19313, 19313, 19313, 37090, 29664, 42056, 27502, 41563,
  22097, 26228, 39248, 19313, 19313, 19313, 33341, 30379, 27502, 41391, 26228, 21661, 19313, 19313, 40523, 39798, 26792,
  26228, 25753, 19313, 31773, 31199, 21620, 25281, 31197, 23506, 41463, 23506, 41466, 23509, 41391, 27744, 23503, 30441,
  30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 19313, 19313, 19313, 39975,
  19313, 19313, 19313, 24587, 20179, 29663, 19313, 19313, 33942, 25967, 24186, 18277, 19313, 19313, 21152, 19313, 19313,
  19313, 19313, 25282, 37359, 19313, 19313, 19313, 19313, 37089, 42752, 26629, 26228, 25496, 27162, 19313, 19313, 19313,
  31872, 19313, 19313, 19313, 19313, 33340, 37358, 29663, 19313, 19313, 37090, 33119, 27502, 27502, 29047, 24208, 26228,
  26228, 37863, 41394, 19313, 19313, 19313, 19313, 19313, 39978, 19313, 37089, 37358, 29663, 19313, 37089, 35786, 27502,
  27502, 27502, 25432, 26228, 26228, 26228, 40170, 32231, 23149, 19313, 19313, 19313, 19313, 30234, 25281, 37358, 29664,
  19313, 26471, 27502, 27502, 27502, 40347, 26228, 26228, 26228, 27412, 35045, 19313, 19313, 19313, 19313, 19313, 37357,
  32848, 33339, 27502, 27502, 27502, 27019, 26228, 26228, 21619, 27718, 19313, 19313, 19313, 37090, 29664, 42056, 27502,
  41563, 22097, 26228, 39248, 19313, 19313, 19313, 33341, 30379, 27502, 41391, 26228, 21661, 19313, 19313, 40523, 39798,
  26792, 26228, 25753, 19313, 31773, 31199, 21620, 25281, 31197, 23506, 41463, 23506, 41466, 23509, 41391, 27744, 23503,
  30441, 30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 19313, 19313, 19313,
  39975, 19313, 19313, 19313, 24587, 20179, 29663, 19313, 19313, 33942, 25967, 24186, 18277, 19313, 19313, 21152, 19313,
  28855, 19313, 19313, 25282, 37359, 19313, 19313, 19313, 19313, 37089, 42752, 26629, 26228, 25496, 27162, 19313, 19313,
  19313, 31872, 19313, 28856, 19313, 19313, 33340, 37358, 29663, 19313, 19313, 37090, 33119, 27502, 27502, 29047, 24208,
  26228, 26228, 37863, 41394, 19313, 19313, 19313, 19313, 19313, 39978, 19313, 37089, 37358, 29663, 19313, 37089, 35786,
  27502, 27502, 27502, 25432, 26228, 26228, 26228, 40170, 32231, 23149, 19313, 19313, 19313, 19313, 28889, 25281, 37358,
  29664, 19313, 26471, 27502, 27502, 27502, 40347, 26228, 26228, 26228, 27412, 35045, 19313, 19313, 19313, 19313, 19313,
  37357, 32848, 33339, 27502, 27502, 27502, 27019, 26228, 26228, 21619, 27718, 19313, 19313, 19313, 37090, 29664, 42056,
  27502, 41563, 22097, 26228, 39248, 19313, 19313, 19313, 33341, 30379, 27502, 41391, 26228, 21661, 19313, 19313, 40523,
  39798, 26792, 26228, 25753, 19313, 31773, 31199, 21620, 25281, 31197, 23506, 41463, 23506, 41466, 23509, 41391, 27744,
  23503, 30441, 30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 19313, 19313,
  19313, 39975, 19313, 19313, 19313, 24587, 20179, 29663, 19313, 19313, 33942, 25967, 24186, 18277, 19313, 19313, 21152,
  19313, 19313, 19313, 19313, 25282, 37359, 19313, 19313, 19313, 19313, 37089, 42752, 26629, 26228, 25496, 27162, 19313,
  19313, 19313, 31872, 19313, 19313, 19313, 19313, 33340, 37358, 29663, 19313, 19313, 37090, 33119, 27502, 27502, 29047,
  24208, 26228, 26228, 37863, 41394, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 37089, 37358, 29663, 19313, 37089,
  35786, 27502, 27502, 27502, 25432, 26228, 26228, 26228, 40170, 41393, 19313, 19313, 19313, 19313, 19313, 19313, 25281,
  37358, 29664, 19313, 26471, 27502, 27502, 27502, 40347, 26228, 26228, 26228, 27412, 26842, 19313, 19313, 19313, 19313,
  19313, 37357, 32848, 33339, 27502, 27502, 27502, 32085, 26228, 26228, 21619, 27718, 19313, 19313, 19313, 37090, 29664,
  42056, 27502, 26611, 32096, 26228, 39248, 19313, 19313, 19313, 33341, 30379, 27502, 41391, 26228, 21661, 19313, 19313,
  40523, 39798, 26792, 26228, 25753, 19313, 31773, 31199, 21620, 25281, 31197, 23506, 41463, 23506, 41466, 23509, 41391,
  27744, 23503, 30441, 30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 19313,
  19313, 19313, 39975, 19313, 19313, 19313, 24587, 20179, 29663, 19313, 19313, 33942, 25967, 24186, 18277, 19313, 19313,
  21152, 19313, 19313, 19313, 19313, 25282, 37359, 19313, 19313, 19313, 19313, 37089, 42752, 26629, 26228, 25496, 38510,
  19313, 19313, 19313, 31872, 19313, 19313, 19313, 19313, 33340, 37358, 29663, 19313, 19313, 37090, 33119, 27502, 27502,
  29047, 24208, 26228, 26228, 37863, 41394, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 37089, 37358, 29663, 19313,
  37089, 35786, 27502, 27502, 27502, 25432, 26228, 26228, 26228, 40170, 41393, 19313, 19313, 19313, 19313, 19313, 19313,
  25281, 37358, 29664, 19313, 26471, 27502, 27502, 27502, 40347, 26228, 26228, 26228, 27412, 26842, 19313, 19313, 19313,
  19313, 19313, 37357, 32848, 33339, 27502, 27502, 27502, 32085, 26228, 26228, 21619, 27718, 19313, 19313, 19313, 37090,
  29664, 42056, 27502, 26611, 32096, 26228, 39248, 19313, 19313, 19313, 33341, 30379, 27502, 41391, 26228, 21661, 19313,
  19313, 40523, 39798, 26792, 26228, 25753, 19313, 31773, 31199, 21620, 25281, 31197, 23506, 41463, 23506, 41466, 23509,
  41391, 27744, 23503, 30441, 30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313,
  19313, 19313, 19313, 39975, 19313, 19313, 19313, 24587, 20179, 29663, 19313, 19313, 33942, 22797, 24186, 18277, 19313,
  19313, 21152, 19313, 19313, 19313, 19313, 25282, 37359, 19313, 19313, 19313, 19313, 37089, 42752, 26629, 26228, 25496,
  27162, 19313, 19313, 19313, 31872, 19313, 19313, 19313, 19313, 33340, 37358, 29663, 19313, 19313, 37090, 33119, 27502,
  27502, 29047, 24208, 26228, 26228, 37863, 41394, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 37089, 37358, 29663,
  19313, 37089, 35786, 27502, 27502, 27502, 25432, 26228, 26228, 26228, 40170, 41393, 19313, 19313, 19313, 19313, 19313,
  19313, 25281, 37358, 29664, 19313, 26471, 27502, 27502, 27502, 40347, 26228, 26228, 26228, 27412, 26842, 19313, 19313,
  19313, 19313, 19313, 37357, 32848, 33339, 27502, 27502, 27502, 32085, 26228, 26228, 21619, 27718, 19313, 19313, 19313,
  37090, 29664, 42056, 27502, 26611, 32096, 26228, 39248, 19313, 19313, 19313, 33341, 30379, 27502, 41391, 26228, 21661,
  19313, 19313, 40523, 39798, 26792, 26228, 25753, 19313, 31773, 31199, 21620, 25281, 31197, 23506, 41463, 23506, 41466,
  23509, 41391, 27744, 23503, 30441, 30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904,
  19313, 19313, 19313, 19313, 39975, 19313, 19313, 19313, 24587, 24243, 29663, 19313, 19313, 33942, 25967, 24186, 18277,
  19313, 19313, 21152, 19313, 19313, 19313, 19313, 25282, 37359, 19313, 19313, 19313, 19313, 37089, 42752, 26629, 26228,
  25496, 27162, 19313, 19313, 19313, 31872, 19313, 19313, 19313, 20359, 33340, 37358, 29663, 19313, 19313, 37090, 33119,
  27502, 27502, 29047, 24208, 26228, 26228, 37863, 41394, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 37089, 37358,
  29663, 19313, 37089, 35786, 27502, 27502, 27502, 25432, 26228, 26228, 26228, 40170, 41393, 19313, 19313, 19313, 19313,
  19313, 19313, 25281, 37358, 29664, 19313, 26471, 27502, 27502, 27502, 40347, 26228, 26228, 26228, 27412, 26842, 19313,
  19313, 19313, 19313, 19313, 37357, 32848, 33339, 27502, 27502, 27502, 32085, 26228, 26228, 21619, 27718, 19313, 19313,
  19313, 37090, 29664, 42056, 27502, 26611, 32096, 26228, 39248, 19313, 19313, 19313, 33341, 30379, 27502, 41391, 26228,
  21661, 19313, 19313, 40523, 39798, 26792, 26228, 25753, 19313, 31773, 31199, 21620, 25281, 31197, 23506, 41463, 23506,
  41466, 23509, 41391, 27744, 23503, 30441, 30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  21904, 19313, 19313, 19313, 19313, 39975, 19313, 19313, 19313, 24587, 20179, 29663, 19313, 19313, 34410, 34423, 24186,
  18277, 19313, 19313, 21152, 19313, 19313, 19313, 19313, 25282, 37359, 19313, 19313, 19313, 19313, 37089, 42752, 26629,
  26228, 25496, 27162, 19313, 19313, 19313, 31872, 19313, 19313, 19313, 19313, 33340, 37358, 29663, 19313, 19313, 37090,
  33119, 27502, 27502, 29047, 24208, 26228, 26228, 37863, 41394, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 37089,
  37358, 29663, 19313, 37089, 35786, 27502, 27502, 27502, 25432, 26228, 26228, 26228, 40170, 41393, 19313, 19313, 19313,
  19313, 19313, 19313, 25281, 37358, 29664, 19313, 26471, 27502, 27502, 27502, 40347, 26228, 26228, 26228, 27412, 26842,
  19313, 19313, 19313, 19313, 19313, 37357, 32848, 33339, 27502, 27502, 27502, 32085, 26228, 26228, 21619, 27718, 19313,
  19313, 19313, 37090, 29664, 42056, 27502, 26611, 32096, 26228, 39248, 19313, 19313, 19313, 33341, 30379, 27502, 41391,
  26228, 21661, 19313, 19313, 40523, 39798, 26792, 26228, 25753, 19313, 31773, 31199, 21620, 25281, 31197, 23506, 41463,
  23506, 41466, 23509, 41391, 27744, 23503, 30441, 30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 21904, 19313, 19313, 19313, 19313, 39975, 19313, 19313, 19313, 24587, 20179, 29663, 19313, 19313, 33942, 25967,
  24186, 18277, 19313, 19313, 21152, 19313, 19313, 19313, 19313, 25282, 37359, 19313, 19313, 19313, 19313, 37089, 42752,
  26629, 26228, 25496, 27162, 19313, 19313, 19313, 31872, 19313, 19313, 19313, 19313, 33340, 37358, 29663, 19313, 19313,
  37090, 33119, 27502, 27502, 29047, 24208, 26228, 26228, 37863, 41394, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  37089, 37358, 29663, 19313, 37089, 35786, 27502, 27502, 27502, 25432, 26228, 26228, 26228, 40170, 41393, 19313, 19313,
  19313, 19313, 19313, 19313, 25281, 37358, 29664, 19313, 26471, 27502, 27502, 27502, 40347, 26228, 26228, 26228, 27412,
  26842, 19313, 19313, 19313, 19313, 19313, 37357, 32848, 33339, 27502, 27502, 27502, 32085, 26228, 26228, 21619, 27718,
  19313, 19313, 38057, 37090, 29664, 42056, 27502, 26611, 32096, 26228, 39248, 19313, 19313, 19313, 33341, 30379, 27502,
  41391, 26228, 21661, 19313, 19313, 40523, 39798, 26792, 26228, 25753, 19313, 31773, 31199, 21620, 25281, 31197, 23506,
  41463, 23506, 41466, 23509, 41391, 27744, 23503, 30441, 30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 24278, 19313, 19313, 19313, 19313, 39975, 19313, 19313, 19313, 24587, 20179, 29663, 19313, 19313, 33942,
  25967, 24186, 18277, 19313, 19313, 21152, 19313, 19313, 19313, 19313, 25282, 37359, 19313, 19313, 19313, 19313, 37089,
  42752, 26629, 26228, 25496, 27162, 19313, 19313, 19313, 31872, 19313, 19313, 19313, 19313, 33340, 37358, 29663, 19313,
  19313, 37090, 33119, 27502, 27502, 29047, 24208, 26228, 26228, 37863, 41394, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 37089, 37358, 29663, 19313, 37089, 35786, 27502, 27502, 27502, 25432, 26228, 26228, 26228, 40170, 41393, 19313,
  19313, 19313, 19313, 19313, 19313, 25281, 37358, 29664, 19313, 26471, 27502, 27502, 27502, 40347, 26228, 26228, 26228,
  27412, 26842, 19313, 19313, 19313, 19313, 19313, 37357, 32848, 33339, 27502, 27502, 27502, 32085, 26228, 26228, 21619,
  27718, 19313, 19313, 19313, 37090, 29664, 42056, 27502, 26611, 32096, 26228, 39248, 19313, 19313, 19313, 33341, 30379,
  27502, 41391, 26228, 21661, 19313, 19313, 40523, 39798, 26792, 26228, 25753, 19313, 31773, 31199, 21620, 25281, 31197,
  23506, 41463, 23506, 41466, 23509, 41391, 27744, 23503, 30441, 30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 20157, 19313, 19313, 19313, 19313, 39975, 19313, 19313, 19313, 24587, 20179, 37168, 30980, 24300,
  24325, 24316, 20247, 18277, 19313, 19313, 21152, 19313, 33321, 19313, 19313, 34619, 19134, 19313, 19313, 19313, 19313,
  21565, 28537, 18295, 42504, 19454, 20118, 23939, 27538, 18328, 31872, 19313, 27941, 19313, 24346, 28527, 18369, 18433,
  18488, 18384, 28219, 19142, 18592, 18504, 18527, 18583, 18599, 18511, 18672, 19848, 19313, 28613, 19313, 19313, 19313,
  18615, 29078, 22849, 18638, 18688, 18699, 41644, 18652, 18752, 18771, 18720, 19468, 18749, 18768, 42504, 18733, 19847,
  22184, 24713, 18353, 41213, 18787, 25665, 34618, 18807, 18837, 35086, 18863, 18879, 18945, 18966, 18895, 18874, 18940,
  18961, 18982, 19849, 19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237, 19256, 19834, 19221, 19240,
  19259, 18310, 19275, 19312, 19330, 21566, 19357, 19382, 18562, 19398, 28544, 18567, 19445, 19484, 30528, 19508, 19527,
  42374, 19574, 19563, 19579, 19595, 19621, 24365, 40503, 27193, 27209, 27202, 19673, 19709, 19745, 19774, 19820, 29327,
  42487, 19865, 19842, 19901, 19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 20157, 19313, 19313, 19313, 19313, 39975, 19313, 19313, 19313, 24587, 20179, 19313, 19313,
  19313, 19313, 19313, 20247, 18277, 19313, 19313, 21152, 19313, 33321, 19313, 19313, 34619, 19134, 19313, 19313, 19313,
  19313, 21565, 28537, 18295, 42504, 19454, 20118, 23939, 27538, 18328, 31872, 19313, 27941, 19313, 19313, 28527, 18369,
  18433, 18488, 18384, 28219, 19142, 18592, 18504, 18527, 18583, 18599, 18511, 19948, 19848, 19313, 28613, 19313, 19313,
  19313, 18615, 29078, 22849, 18638, 18688, 18699, 41644, 18652, 18752, 18771, 18720, 19468, 18749, 18768, 42504, 18733,
  19847, 22184, 24713, 18353, 41213, 18787, 25665, 34618, 18807, 18837, 35086, 18863, 18879, 18945, 18966, 18895, 18874,
  18940, 18961, 18982, 19849, 19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237, 19256, 19834, 19221,
  19240, 19259, 18310, 19275, 19312, 19330, 21566, 19357, 19382, 18562, 19398, 28544, 18567, 19445, 19484, 30528, 19508,
  19527, 42374, 19574, 19563, 19579, 19595, 19621, 19637, 40503, 27193, 27209, 27202, 19673, 19709, 19745, 19774, 19820,
  29327, 42487, 19865, 19842, 19901, 19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 24426, 24454, 19313, 19313, 19313, 24472, 19313, 19313, 19313, 24587, 24492, 24476,
  24515, 24515, 24526, 24499, 24547, 18277, 19313, 19313, 21152, 19313, 33321, 19313, 19313, 34619, 19134, 19313, 19313,
  19313, 19313, 21565, 28537, 18295, 42504, 19454, 19789, 23939, 27538, 18328, 31872, 19313, 27941, 19313, 19313, 28527,
  18369, 18433, 18488, 18384, 28219, 19142, 18592, 18504, 18527, 18583, 18599, 18511, 19948, 19848, 19313, 28613, 19313,
  19313, 19313, 18615, 29078, 22849, 18638, 18688, 18699, 41644, 18652, 18752, 18771, 18720, 19468, 18749, 18768, 42504,
  18733, 19847, 22184, 24713, 18353, 41213, 18787, 25665, 34618, 18807, 18837, 35086, 18863, 18879, 18945, 18966, 18895,
  18874, 18940, 18961, 18982, 19849, 19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237, 19256, 19834,
  19221, 19240, 19259, 18310, 19275, 19312, 19330, 21566, 19357, 19382, 18562, 19398, 28544, 18567, 19445, 19484, 30528,
  19508, 19527, 42374, 19574, 19563, 19579, 19595, 19621, 19637, 40503, 27193, 27209, 27202, 19673, 19709, 19745, 19774,
  19820, 29327, 42487, 19865, 19842, 19901, 19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 24563, 24585, 19313, 19313, 19313, 39975, 19313, 19313, 19313, 24587, 20179,
  19313, 19313, 19313, 19313, 24603, 24633, 18277, 19313, 19313, 21152, 19313, 33321, 27782, 19313, 34619, 19134, 19313,
  19313, 19313, 19313, 21565, 28537, 18295, 42504, 18663, 19979, 24649, 27538, 18328, 31872, 19313, 27941, 19313, 19313,
  28527, 18369, 18433, 18488, 18384, 28219, 19142, 18592, 18504, 18527, 18583, 18599, 18511, 19948, 19848, 19313, 28613,
  19313, 19313, 19313, 18615, 29078, 22849, 18638, 18688, 18699, 41644, 18652, 18752, 18771, 18720, 19468, 18749, 18768,
  42504, 18733, 19847, 22184, 24713, 18353, 41213, 18787, 25665, 34618, 18807, 18837, 35086, 18863, 18879, 18945, 18966,
  18895, 18874, 18940, 18961, 18982, 19849, 19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237, 19256,
  19834, 19221, 19240, 19259, 18310, 19275, 19312, 19330, 21566, 19357, 19382, 18562, 19398, 28544, 18567, 19445, 19484,
  30528, 19508, 19527, 42374, 19574, 19563, 19579, 19595, 19621, 19637, 40503, 27193, 27209, 27202, 19673, 19709, 19745,
  19774, 19820, 29327, 42487, 19865, 19842, 19901, 19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 24683, 19313, 19313, 24702, 18342, 19313, 19492, 24617,
  24729, 24745, 24758, 24787, 24771, 24803, 24186, 24819, 32830, 19313, 22773, 24847, 24891, 24929, 26191, 29802, 25002,
  36569, 37656, 24945, 24963, 24988, 25018, 38499, 25055, 25103, 25119, 25158, 19313, 28057, 31872, 25179, 23608, 19313,
  25199, 32351, 37358, 25220, 32205, 39307, 37090, 25239, 27502, 27502, 25264, 24208, 26228, 41372, 37863, 41394, 19313,
  25280, 25298, 28185, 35480, 39978, 19313, 37089, 25323, 25341, 25364, 25387, 25423, 37929, 27502, 25448, 25484, 38833,
  26228, 33054, 25531, 25567, 23184, 19313, 25600, 19313, 41114, 25583, 25281, 25616, 25654, 25688, 25704, 25720, 31530,
  39870, 40347, 25742, 34052, 29492, 27412, 25778, 25809, 30682, 19313, 31565, 25838, 37357, 32848, 33339, 27502, 27502,
  37608, 27019, 26228, 26228, 25860, 39179, 21737, 25900, 23892, 37090, 29664, 25939, 42102, 41563, 22097, 37854, 32792,
  39659, 19313, 19313, 33341, 30379, 25462, 25962, 25983, 21661, 19313, 19313, 40523, 39798, 26792, 26228, 25753, 19313,
  31773, 31199, 21620, 25281, 31197, 41615, 26046, 31501, 26069, 33082, 41391, 30432, 23503, 30441, 30441, 21821, 25873,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 30733, 19313, 19313, 39975, 19313, 19313, 19313,
  26100, 26089, 27135, 26116, 26116, 26129, 40133, 24186, 18277, 19313, 19313, 21152, 19313, 19313, 19313, 19313, 25282,
  37359, 19313, 19313, 19313, 19313, 37089, 42752, 26629, 26228, 25496, 27162, 19313, 19313, 19313, 31872, 19313, 19313,
  19313, 19313, 33340, 37358, 29663, 19313, 19313, 37090, 33119, 27502, 27502, 29047, 24208, 26228, 26228, 37863, 41394,
  19313, 19313, 19313, 19313, 35446, 39978, 36165, 35128, 37358, 26163, 19313, 37089, 35786, 27502, 27502, 41267, 25432,
  26228, 26228, 34584, 40170, 32231, 23149, 19313, 19313, 19313, 19313, 28889, 25281, 37358, 29664, 19313, 26471, 27502,
  27502, 27502, 40347, 26228, 26228, 26228, 27412, 35045, 19313, 19313, 19313, 31644, 19313, 36773, 26186, 33339, 26207,
  27502, 27502, 27605, 26227, 26228, 21619, 27718, 19313, 19313, 19313, 37090, 29664, 42056, 27502, 41563, 22097, 26228,
  39248, 19313, 19313, 19313, 33341, 30379, 27502, 41391, 26228, 21661, 19313, 19313, 40523, 39798, 26792, 26228, 25753,
  19313, 31773, 31199, 21620, 25281, 31197, 23506, 41463, 23506, 26245, 26273, 41391, 27744, 23503, 30441, 30441, 21821,
  25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 18847, 19313, 19313, 39975, 23570, 19313,
  19313, 24587, 26298, 26314, 26327, 26369, 26340, 26353, 24186, 18277, 19313, 27900, 23600, 19313, 22961, 19313, 19313,
  25282, 37359, 19313, 19313, 28065, 19313, 28429, 42752, 34448, 32672, 25496, 26385, 19313, 26421, 19313, 40313, 19313,
  28660, 19313, 23287, 26440, 26466, 32302, 19313, 25087, 25348, 26487, 26503, 27502, 29047, 26527, 26554, 26228, 37863,
  41394, 26170, 19313, 19313, 26571, 36342, 39978, 42562, 36286, 26588, 29663, 19313, 37089, 35786, 29022, 26609, 26627,
  25432, 36743, 26645, 26666, 40170, 32231, 23149, 19313, 39450, 19313, 19313, 26687, 25281, 37358, 29664, 19313, 26471,
  27502, 27502, 25551, 40347, 26228, 26228, 26228, 26720, 35045, 19313, 19313, 19313, 19313, 26769, 37357, 32848, 33339,
  27502, 27502, 26790, 27019, 26228, 34313, 21619, 27718, 19313, 20377, 19313, 37090, 26808, 26864, 34269, 41563, 22097,
  26887, 32121, 26908, 19313, 19313, 42083, 26934, 30832, 41391, 38629, 21661, 19313, 36669, 40523, 39798, 42063, 26228,
  26963, 19313, 31773, 31199, 21620, 25281, 31197, 23506, 41463, 33303, 26988, 23509, 41391, 27744, 23503, 30441, 30441,
  27004, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 30078, 19313, 19313, 39975, 19296,
  19313, 19412, 24587, 27046, 27062, 27075, 27082, 27098, 27111, 24186, 18277, 19313, 19313, 21152, 19313, 19313, 19313,
  19313, 25282, 27127, 38545, 19313, 19313, 38540, 38549, 42752, 27151, 37752, 26257, 28108, 19313, 27675, 27178, 18907,
  36515, 19313, 19313, 19313, 33023, 27225, 27241, 18448, 27265, 27329, 27345, 30827, 30767, 39154, 27371, 36118, 27408,
  27428, 41394, 19313, 19313, 42271, 19313, 28933, 39978, 19313, 37089, 37358, 29663, 19313, 27457, 27476, 27502, 27502,
  27502, 25432, 26228, 26228, 26228, 40170, 31291, 23479, 19313, 19313, 28962, 41956, 28889, 25281, 37358, 29664, 20351,
  26471, 27501, 27502, 27502, 27519, 33273, 26228, 26228, 37964, 35045, 19313, 19313, 19313, 19313, 22118, 27554, 32848,
  33339, 27572, 36720, 27502, 28779, 26228, 26030, 21619, 27718, 34855, 28618, 19313, 30547, 29664, 42056, 27590, 41563,
  27621, 40624, 39248, 20758, 19313, 19313, 33341, 30379, 27502, 41391, 26228, 21661, 19313, 27649, 40523, 39798, 39011,
  26228, 27666, 19313, 31773, 31199, 21620, 25281, 31197, 23506, 24903, 27691, 27710, 27740, 41391, 27744, 23503, 30441,
  30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 19314, 27760, 19313, 39975,
  19177, 27779, 30653, 19366, 27798, 27814, 27830, 27872, 27843, 27856, 24186, 18277, 27888, 37121, 21189, 35075, 27922,
  27938, 36016, 36388, 27957, 39742, 27984, 28032, 28048, 29394, 28081, 28097, 28124, 28748, 28140, 19313, 40200, 36173,
  28178, 28201, 38686, 34539, 28235, 33340, 37358, 28253, 33015, 19313, 42047, 28276, 28301, 28324, 30778, 28353, 39895,
  39549, 28369, 41394, 20799, 28404, 28455, 28473, 28512, 31982, 18791, 32034, 28560, 28598, 32056, 19804, 28634, 38789,
  30962, 30149, 30406, 28682, 28720, 28736, 28764, 28816, 23149, 28832, 19313, 28854, 28872, 33682, 31147, 28905, 28927,
  28949, 28984, 29011, 27502, 29045, 35599, 32149, 26228, 35683, 29861, 29063, 21969, 19313, 29094, 34217, 37537, 40474,
  27968, 29124, 31003, 34294, 29140, 27019, 32271, 29170, 29200, 29236, 19313, 25079, 29258, 37090, 29277, 18472, 33649,
  29312, 29343, 39534, 39248, 19313, 29368, 29384, 30702, 29410, 29472, 29508, 29536, 29573, 29610, 29220, 29658, 27998,
  38871, 29680, 25753, 36557, 31773, 31696, 34977, 39787, 29719, 29743, 26282, 32698, 29759, 25998, 29840, 27744, 23503,
  29877, 30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 19313, 30863, 19313,
  29906, 36081, 31376, 32001, 29912, 29928, 29971, 29987, 29994, 29942, 29955, 24186, 18277, 27650, 19313, 21152, 19313,
  19313, 30010, 19313, 30032, 37359, 19313, 25818, 19313, 30028, 25822, 42752, 30048, 41607, 29520, 28337, 19313, 35758,
  19313, 35748, 19313, 19313, 30075, 40813, 25638, 37358, 29663, 41930, 19313, 37692, 36824, 27502, 27502, 29047, 30094,
  26228, 26228, 30103, 24913, 19313, 19313, 19313, 19313, 19313, 39978, 19313, 37089, 37358, 29663, 36694, 37089, 35786,
  27502, 27502, 41988, 25432, 26228, 26228, 39503, 40170, 32231, 23149, 19313, 19313, 30119, 19313, 28889, 25281, 37358,
  29664, 19313, 30138, 27502, 26511, 27502, 40347, 26228, 40762, 26228, 27412, 35045, 19313, 22054, 19313, 19313, 19313,
  25923, 25628, 27460, 27502, 27502, 40965, 27019, 26228, 26228, 30165, 27718, 19313, 19313, 19313, 37090, 29664, 42056,
  27502, 41563, 22097, 26228, 39248, 19313, 19313, 19313, 33341, 30379, 27502, 41391, 26228, 39254, 19313, 19313, 40523,
  39798, 26792, 26228, 25753, 19313, 31773, 31199, 21620, 25281, 31197, 23506, 41463, 23506, 41466, 23509, 41391, 27744,
  23503, 30202, 30441, 30250, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 19313, 19313,
  19313, 39975, 19313, 24257, 19313, 24587, 30281, 30297, 30339, 30339, 30310, 30323, 24186, 18277, 19313, 19313, 21152,
  19313, 19313, 24569, 19313, 25282, 37359, 19313, 19313, 19313, 19313, 37089, 42752, 26629, 26228, 25496, 27162, 30355,
  19313, 19313, 31872, 19313, 19313, 19313, 28968, 33340, 37358, 29663, 19313, 19313, 37090, 33119, 27502, 27502, 29047,
  24208, 26228, 26228, 37863, 41394, 19313, 19313, 19313, 19313, 19313, 19313, 38706, 37089, 37358, 29663, 19313, 30376,
  35786, 27502, 27502, 27502, 25407, 26228, 26228, 26228, 40170, 41393, 19313, 19313, 29296, 19313, 31974, 19313, 25281,
  37358, 29664, 34775, 30395, 27502, 27502, 27502, 40347, 26228, 26228, 26228, 27412, 30422, 19313, 19313, 19313, 19313,
  19313, 37357, 32848, 33339, 27502, 27502, 27502, 32085, 26228, 26228, 21619, 27718, 19313, 19313, 30457, 37090, 29664,
  42056, 27502, 26611, 32096, 26228, 39248, 40218, 30491, 30513, 23816, 30379, 27502, 41391, 26228, 21661, 19313, 23626,
  30563, 28487, 30585, 24102, 25753, 24456, 30601, 26836, 30632, 25281, 31197, 23506, 41463, 23506, 41466, 23509, 41391,
  27744, 23503, 30441, 30669, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 19313,
  19313, 19313, 39975, 19313, 19313, 19313, 24587, 20179, 29663, 19313, 19313, 33942, 25967, 24186, 18277, 19313, 24192,
  21152, 19313, 19313, 19313, 23850, 32946, 25325, 19313, 19313, 30718, 21742, 37089, 30755, 34668, 30794, 30813, 30848,
  19313, 19313, 32027, 31872, 42266, 28881, 19313, 19313, 33340, 37358, 29663, 19313, 19313, 37090, 33119, 27502, 27503,
  29047, 24208, 26228, 38399, 37863, 41394, 19313, 19313, 42641, 19313, 19313, 19313, 19313, 37089, 37358, 29663, 38726,
  37089, 30883, 27502, 27502, 27502, 29423, 26228, 26228, 26228, 41138, 41393, 20288, 19313, 19313, 19313, 19313, 19313,
  25281, 37358, 29664, 33847, 26471, 27502, 27502, 27502, 40347, 26228, 26228, 26228, 27412, 26842, 19313, 19313, 42334,
  19313, 19313, 37357, 32848, 33339, 27502, 27502, 25507, 32085, 26228, 26228, 30908, 27718, 19313, 19313, 19313, 37090,
  29664, 42056, 27502, 26611, 32096, 26228, 39248, 19313, 19313, 19313, 33341, 30379, 27502, 41391, 26228, 21661, 19313,
  30978, 40523, 30996, 26792, 26228, 31019, 19313, 32877, 28496, 30186, 25281, 31197, 23506, 41463, 23506, 41466, 23509,
  41391, 27744, 23503, 30441, 30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313,
  19313, 20081, 19313, 39975, 27313, 30226, 27307, 20718, 31053, 31069, 31082, 31124, 31095, 31108, 24186, 18277, 19313,
  19313, 31140, 31163, 19313, 19313, 31571, 42738, 31181, 18917, 24170, 31215, 31246, 31259, 31278, 25726, 31307, 31327,
  31361, 19313, 19313, 33493, 31872, 19313, 31396, 19313, 19313, 33340, 31424, 31448, 37545, 33674, 37090, 31464, 31898,
  27502, 30265, 31494, 39241, 32517, 31517, 41394, 34913, 36863, 19313, 31552, 28260, 31587, 19313, 31611, 37358, 31637,
  42341, 20033, 31660, 27502, 25946, 28382, 39595, 26228, 31311, 33961, 37915, 41393, 19313, 19313, 19313, 42410, 38259,
  31712, 25281, 37358, 29664, 19313, 26593, 27502, 27502, 27502, 40347, 31730, 26228, 26228, 27412, 26842, 19313, 31749,
  31798, 31820, 31848, 37357, 35229, 31762, 27502, 31895, 27502, 32085, 22099, 26228, 21619, 31914, 31998, 32017, 19313,
  18417, 32050, 31621, 39040, 32072, 32114, 32137, 32165, 19313, 19313, 34809, 32181, 30379, 25545, 32229, 32247, 21661,
  19693, 19313, 32297, 39798, 26792, 26228, 34714, 19313, 31773, 31199, 21620, 25281, 32318, 23506, 35153, 32342, 41466,
  23509, 41391, 27724, 40455, 30441, 30441, 32375, 32391, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904,
  19313, 19313, 19313, 19313, 39975, 19313, 19313, 19313, 24587, 20179, 29663, 19313, 19313, 33942, 25967, 24186, 18277,
  19313, 19313, 21152, 19313, 33476, 19313, 19313, 25282, 37359, 19313, 19313, 19313, 19313, 37089, 42752, 26629, 26228,
  25496, 27162, 19313, 19313, 19313, 31872, 19313, 19313, 19313, 19313, 33340, 37358, 29663, 19313, 19313, 37090, 33119,
  27502, 27502, 29047, 24208, 26228, 26228, 37863, 41394, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 37089, 37358,
  29663, 19313, 37089, 35786, 27502, 27502, 27502, 25432, 26228, 26228, 26228, 40170, 41393, 19313, 19313, 19313, 19313,
  19313, 19313, 25281, 37358, 29664, 19313, 26471, 27502, 28008, 27502, 40347, 26228, 36063, 26228, 27412, 26842, 19313,
  19313, 19313, 19313, 19313, 37357, 32848, 33339, 27502, 27502, 27502, 32085, 26228, 26228, 21619, 27718, 19313, 19313,
  19313, 37090, 29664, 42056, 27502, 26611, 32096, 26228, 39248, 19313, 19313, 19313, 33341, 30379, 27502, 41391, 26228,
  21661, 19313, 19313, 40523, 39798, 26792, 26228, 25753, 19313, 31773, 31199, 21620, 25281, 31197, 23506, 41463, 23506,
  41466, 23509, 41391, 27744, 23503, 30441, 30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  21904, 19313, 19313, 20591, 19313, 39975, 19313, 32196, 24027, 25762, 32414, 32430, 32472, 32472, 32443, 32456, 24186,
  18277, 35441, 19313, 21152, 19313, 35123, 41425, 19313, 24531, 32488, 19313, 39348, 18622, 35519, 41818, 34247, 26629,
  32512, 25496, 38510, 32533, 19313, 19313, 32563, 37071, 19313, 32579, 32543, 20501, 27556, 29663, 19313, 34545, 32599,
  38316, 32886, 38375, 32629, 32645, 32670, 32688, 32731, 32747, 28838, 19313, 19313, 19313, 37780, 19313, 19313, 41866,
  37358, 29663, 19313, 37089, 40270, 33372, 27502, 35648, 25407, 32785, 32808, 34970, 40170, 41393, 19313, 39693, 32827,
  19313, 42810, 41685, 25281, 37358, 32846, 19313, 26471, 27502, 26871, 41996, 40347, 26228, 42140, 31733, 27412, 26842,
  18924, 19313, 19313, 23950, 19313, 29635, 32848, 33339, 25515, 27502, 27502, 32085, 21850, 26228, 21619, 36236, 19313,
  19313, 19038, 32864, 32920, 28439, 27502, 26611, 26024, 26228, 39248, 19313, 32943, 19313, 32962, 30379, 27502, 41391,
  26228, 21661, 19313, 32986, 40523, 39798, 40974, 26228, 33006, 19313, 31773, 31199, 21620, 25281, 31197, 23506, 41463,
  23506, 41466, 23509, 33039, 29242, 33076, 30441, 33098, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 21904, 19313, 19313, 26704, 19313, 39975, 33150, 39212, 19313, 21805, 33135, 33167, 33180, 33187, 33203, 33218,
  24186, 18277, 21915, 19313, 21152, 19313, 25592, 19313, 19313, 25163, 33234, 19313, 21910, 25672, 21917, 29624, 34649,
  33258, 33295, 27633, 30059, 19313, 19429, 19313, 31872, 19313, 42557, 27249, 19313, 33340, 37358, 29663, 19313, 33319,
  33337, 33357, 27502, 26140, 33388, 33404, 26555, 29557, 38638, 30616, 33428, 33448, 33472, 19313, 19313, 33492, 19313,
  37089, 37358, 29663, 19313, 37089, 35786, 33509, 31678, 27502, 25432, 33535, 41911, 26228, 40170, 41393, 19313, 33573,
  33593, 19313, 21639, 19313, 33615, 37358, 29664, 19313, 26471, 31345, 27502, 33642, 27485, 37423, 26228, 32259, 27412,
  26842, 19313, 19313, 19313, 19313, 19313, 37357, 32848, 33339, 27502, 27502, 27502, 32085, 26228, 26228, 21619, 27718,
  19313, 19313, 19313, 37090, 29664, 42056, 27502, 26611, 32096, 26228, 39248, 42805, 19313, 19313, 33341, 30379, 27502,
  41391, 26228, 21661, 19313, 19313, 41351, 29587, 29594, 26228, 33665, 19313, 31773, 31199, 21620, 35892, 36468, 36544,
  41463, 23506, 41466, 23509, 41391, 27744, 23503, 30441, 30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 21904, 19313, 19313, 21159, 19313, 33698, 19313, 19605, 20976, 33718, 33734, 33768, 33781, 33823, 33794,
  33807, 24186, 18277, 23224, 19313, 21286, 33839, 33863, 19313, 35093, 33880, 33896, 37334, 21298, 32715, 33927, 33977,
  33993, 34031, 34068, 34096, 26947, 40680, 34131, 19313, 34148, 20808, 34181, 36042, 39131, 33340, 37358, 32496, 24262,
  34199, 34233, 34285, 34878, 34467, 29047, 24208, 34310, 42212, 29352, 34329, 34157, 19313, 37806, 19313, 19313, 19313,
  34358, 37089, 34378, 29663, 34395, 37089, 34439, 34464, 27502, 38945, 25432, 30180, 26228, 38806, 40170, 41393, 19313,
  19313, 19313, 22220, 19313, 19313, 29890, 37358, 34483, 19313, 37380, 27502, 40364, 27502, 34527, 34561, 26228, 34579,
  38992, 26842, 30215, 34600, 42622, 34616, 23912, 34635, 38020, 38100, 36911, 37719, 34684, 32085, 34703, 34730, 21619,
  34746, 19912, 34770, 34791, 34825, 34847, 34871, 34894, 26611, 22081, 26228, 38841, 19313, 34912, 19313, 33111, 24074,
  34015, 26053, 34929, 36140, 19313, 19313, 24380, 26822, 25030, 34956, 25753, 41160, 40051, 31199, 34993, 25281, 35037,
  35061, 22785, 35109, 42759, 35144, 41391, 27744, 23503, 35169, 30441, 21821, 29213, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 21904, 19313, 19313, 23701, 19313, 39975, 19313, 35202, 19313, 24587, 35245, 35261, 35274, 35281,
  35297, 35310, 24186, 35326, 35342, 33432, 37231, 22685, 19313, 26572, 35390, 20141, 35426, 31408, 35462, 35504, 35554,
  35570, 35633, 35668, 35706, 39607, 35722, 19313, 19313, 25880, 19030, 33864, 24133, 25884, 36605, 33340, 35778, 29663,
  19313, 39687, 37090, 33119, 31536, 26211, 32904, 24208, 35802, 29551, 35823, 41394, 19313, 41002, 19313, 19652, 42660,
  23857, 35852, 35871, 37358, 35916, 35939, 25793, 35786, 27502, 34261, 27502, 35958, 26228, 40651, 26228, 35986, 36002,
  36032, 21601, 20908, 19313, 19313, 19313, 25281, 37358, 29664, 42367, 26471, 38601, 27502, 27502, 40347, 26228, 36058,
  26228, 27412, 26842, 19313, 19313, 36079, 34754, 19313, 37357, 32848, 33339, 27502, 27502, 27502, 24089, 26228, 26228,
  21619, 27718, 18279, 19313, 19313, 37090, 36402, 20043, 38368, 20051, 36097, 36116, 36134, 36156, 19313, 19313, 35900,
  30379, 36189, 26073, 26228, 21661, 19313, 19313, 40523, 39798, 26792, 26228, 26538, 19313, 40093, 39805, 21620, 36207,
  36227, 36252, 23491, 36277, 41466, 23509, 41391, 27744, 29788, 36302, 30441, 21821, 36318, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 21904, 19313, 19313, 19313, 19313, 39975, 19313, 24330, 36341, 36358, 36374, 29663, 24438,
  36418, 36431, 36444, 24186, 18277, 19313, 30475, 21152, 19313, 19313, 19313, 35855, 25282, 37359, 33151, 27531, 30471,
  19313, 37089, 36460, 37726, 26228, 36484, 27162, 19313, 18409, 19313, 31872, 19313, 34801, 18399, 31037, 41233, 37358,
  29663, 19313, 36511, 37090, 41890, 40725, 34687, 28582, 36531, 33412, 27385, 36585, 38880, 36601, 19313, 26400, 19313,
  36621, 36639, 19313, 37089, 37358, 29663, 19313, 37089, 35786, 27502, 27502, 27502, 25432, 26228, 26228, 26228, 40170,
  41393, 36661, 20599, 19313, 19313, 20088, 20981, 40418, 42164, 36685, 19313, 26471, 34896, 36718, 27502, 28285, 26228,
  36736, 26228, 27412, 26842, 42236, 19313, 19313, 19313, 19313, 37357, 32848, 33339, 27502, 39839, 27502, 26013, 26228,
  37845, 21619, 27718, 19313, 19313, 19313, 37090, 29664, 42056, 27502, 26611, 32096, 26228, 39248, 19313, 24349, 19313,
  33341, 38454, 27502, 41391, 26228, 33548, 19313, 19313, 40523, 39798, 26792, 26228, 25753, 19313, 31773, 31199, 30797,
  36759, 31197, 23506, 36793, 23506, 41466, 23509, 41391, 27744, 23503, 30441, 30441, 21821, 25873, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 21904, 19313, 19313, 19313, 19313, 39975, 19313, 19313, 19313, 24587, 20179, 29663,
  19313, 19313, 33942, 25967, 24186, 18277, 19313, 19313, 21152, 19313, 19313, 39313, 19313, 25282, 36816, 36843, 36840,
  28162, 36859, 38008, 35585, 39874, 36879, 36900, 27162, 36927, 19313, 19313, 31872, 19313, 19313, 19313, 19313, 33340,
  37358, 29663, 19313, 19313, 37090, 33119, 27502, 27502, 29047, 24208, 26228, 26228, 37863, 41394, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 37089, 37358, 29663, 19313, 37089, 35786, 27502, 27502, 27502, 27355, 26228, 26228, 26228,
  40170, 41393, 19313, 19313, 19313, 19313, 19313, 19313, 25281, 37358, 29664, 19313, 26471, 27502, 27502, 27502, 40347,
  26228, 26228, 26228, 27412, 26842, 19313, 19313, 19313, 19313, 19313, 37357, 32848, 33339, 27502, 27502, 27502, 32085,
  26228, 26228, 21619, 27718, 19313, 19313, 19313, 37090, 29664, 42056, 27502, 26611, 32096, 26228, 39248, 19313, 19313,
  19313, 33341, 30379, 27502, 41391, 26228, 21661, 19313, 19313, 40523, 33626, 26792, 21773, 25753, 19313, 31773, 31199,
  21620, 25281, 31197, 23506, 41463, 23506, 41466, 23509, 41391, 27744, 23503, 30441, 30441, 21821, 25873, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 19313, 21950, 36948, 36965, 32990, 19313, 36971, 24587, 36991,
  37034, 37047, 37052, 37005, 37018, 24186, 18277, 19313, 37068, 21152, 39638, 23155, 19313, 42027, 37087, 37106, 35942,
  31832, 39961, 37131, 37147, 37184, 29154, 38925, 37200, 37216, 19313, 19313, 19313, 40892, 37267, 37284, 37320, 19313,
  37350, 37375, 29663, 19313, 25371, 18463, 37396, 32895, 25468, 29047, 24208, 37421, 37439, 40662, 37460, 19313, 19313,
  37503, 19313, 31956, 19313, 31595, 30360, 37358, 37519, 31165, 37089, 41314, 40744, 27502, 40836, 37561, 26228, 37577,
  35807, 37594, 41393, 19313, 37268, 37624, 21452, 37642, 37672, 37688, 36777, 26450, 20789, 37708, 27502, 39580, 39006,
  36495, 26228, 26753, 37742, 33060, 28648, 20862, 19313, 33752, 37776, 26405, 37357, 25223, 19341, 31687, 27502, 27502,
  32085, 39497, 26228, 21619, 37796, 36932, 25183, 19313, 37090, 29664, 42056, 27502, 40545, 32096, 26228, 30937, 19313,
  38091, 19313, 33341, 37822, 27502, 37836, 24210, 21661, 24686, 19313, 40523, 39798, 26792, 26228, 25753, 19313, 31773,
  31199, 21620, 37879, 37901, 25070, 41463, 35690, 37950, 26848, 41391, 27744, 23503, 37994, 38036, 21821, 25873, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 19313, 19313, 38052, 38073, 38116, 38134, 38150, 19089,
  38166, 38182, 38195, 38211, 38224, 38237, 24186, 38253, 19313, 36973, 21152, 19313, 19313, 38275, 19313, 26918, 38308,
  41502, 26972, 36975, 38332, 38341, 38357, 38429, 38391, 38415, 27441, 32213, 33746, 19313, 31872, 38445, 19313, 19313,
  19313, 38470, 32359, 33242, 38526, 19313, 40587, 38565, 38581, 38600, 29047, 38617, 21857, 26228, 37863, 38654, 41021,
  19313, 35471, 20406, 38683, 19313, 19313, 37089, 37358, 29663, 41019, 37089, 35786, 27502, 27502, 27502, 25432, 26228,
  26228, 26228, 40170, 41393, 19313, 39998, 31714, 38702, 38722, 36645, 33456, 37358, 38742, 32547, 38777, 27502, 39046,
  35836, 40347, 38805, 26228, 38822, 38857, 38896, 32583, 19313, 37528, 19313, 19313, 41829, 35883, 25915, 27502, 40918,
  27502, 32085, 26228, 38912, 21619, 27718, 19313, 31861, 19313, 23540, 29664, 42056, 38941, 38961, 38977, 37444, 39248,
  19313, 19313, 23773, 33341, 39027, 27502, 41391, 26228, 39062, 39094, 19547, 39119, 39147, 29446, 36100, 34940, 31936,
  28573, 31199, 26892, 25281, 39170, 39195, 41463, 23506, 39228, 23509, 37978, 30950, 40575, 30441, 30441, 21821, 25873,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 19313, 19313, 37242, 39975, 19313, 19313, 39270,
  35374, 39295, 39329, 24831, 39364, 39377, 39390, 24186, 39406, 25307, 23234, 21152, 19313, 40395, 35357, 35611, 33577,
  39431, 38292, 24972, 35737, 23330, 35217, 39466, 39482, 39519, 39565, 39623, 33702, 25844, 39654, 39675, 19313, 19313,
  39709, 34132, 40467, 31432, 39725, 39758, 39774, 40246, 39821, 27502, 39855, 35652, 39890, 42219, 28696, 29774, 39911,
  39947, 39994, 30541, 36702, 40014, 19313, 19313, 20004, 40039, 40067, 24875, 33557, 40119, 28388, 39833, 29029, 25432,
  40149, 28704, 26650, 40170, 40186, 36949, 19313, 19994, 40234, 41331, 32769, 20494, 40262, 40286, 40302, 40329, 34007,
  40363, 28308, 40380, 21780, 34046, 32098, 40441, 26842, 40490, 19313, 34165, 21345, 19313, 29815, 37159, 40519, 40539,
  40561, 27502, 21836, 40603, 40640, 21619, 29456, 40678, 20342, 18704, 40696, 30569, 23549, 40741, 37934, 27030, 26228,
  35970, 19313, 32760, 31380, 33341, 31262, 41260, 26734, 40760, 40778, 40810, 19313, 34831, 40829, 40852, 28800, 25753,
  40878, 41188, 29703, 37760, 25281, 31197, 23506, 41463, 23506, 41466, 32281, 33953, 40908, 40934, 30441, 30441, 40950,
  25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 19313, 19313, 31879, 39975, 19313, 36623,
  19313, 31230, 40990, 41037, 41052, 41094, 41065, 41078, 24186, 18277, 19313, 19313, 23407, 19313, 40212, 19313, 19313,
  25282, 37359, 19313, 19313, 39446, 19313, 25204, 32613, 26629, 28794, 25496, 27162, 24410, 19313, 19313, 31872, 19313,
  19313, 28666, 41110, 41290, 37358, 29663, 19313, 26774, 36211, 29824, 27502, 27502, 38584, 41130, 26228, 26228, 29184,
  25039, 41154, 41963, 19313, 19313, 19688, 19313, 20457, 41176, 29642, 41204, 19542, 41229, 35786, 31669, 41249, 34663,
  25432, 41545, 30923, 26745, 40170, 41393, 19313, 19880, 19313, 19313, 19313, 19313, 41283, 41306, 29664, 19313, 26471,
  31338, 27502, 27502, 31782, 42123, 26228, 26228, 27412, 26842, 41330, 20816, 19313, 19313, 19313, 37357, 32848, 41347,
  27502, 27502, 27502, 32085, 26228, 26228, 21619, 40862, 19313, 19313, 38082, 37090, 29664, 25397, 27502, 26611, 41367,
  26228, 39248, 30867, 19313, 19313, 33341, 30379, 27502, 41391, 26228, 21661, 19313, 19313, 40523, 39798, 26792, 26228,
  25753, 19313, 31773, 41388, 41410, 25281, 31197, 23506, 41463, 23506, 41466, 23509, 29484, 41458, 23503, 30441, 41482,
  21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 19313, 19313, 19313, 39975, 23656,
  30122, 19313, 33911, 41518, 32970, 19313, 21544, 34498, 34511, 24186, 18277, 19313, 19313, 21152, 19313, 19313, 19313,
  19313, 25282, 37359, 19313, 19313, 19313, 19313, 37089, 38485, 26629, 41540, 25496, 27162, 19313, 34362, 34211, 31872,
  19313, 19313, 19313, 19313, 40425, 37358, 23824, 19313, 19313, 37090, 33119, 41561, 41579, 29047, 41597, 27392, 26228,
  37863, 41631, 19313, 19313, 19313, 19313, 19313, 19724, 19313, 37089, 28911, 21685, 19313, 37089, 35786, 27502, 34111,
  27502, 25432, 26228, 29854, 26228, 40170, 41393, 19313, 19313, 19313, 19313, 19313, 19313, 25281, 37358, 29664, 19313,
  26471, 27502, 27502, 27502, 40347, 26228, 26228, 26228, 27412, 26842, 19313, 19313, 19313, 19313, 19313, 37357, 32848,
  33339, 27502, 27502, 27502, 32085, 26228, 26228, 21619, 27718, 19313, 20867, 19313, 37090, 29664, 42056, 27502, 26611,
  32096, 26228, 39248, 19313, 32398, 19313, 33341, 30379, 27502, 41391, 26228, 21661, 19313, 19313, 40523, 39798, 26792,
  26228, 25753, 41681, 31773, 31199, 21620, 25281, 31197, 23506, 41463, 23506, 41466, 23509, 41391, 27744, 23503, 30441,
  30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 19313, 19313, 23722, 39975,
  19313, 38761, 19313, 41701, 41717, 41733, 41747, 41761, 41774, 41787, 24186, 18277, 19313, 19313, 21152, 19313, 19313,
  19313, 19313, 25282, 37359, 19313, 19313, 19313, 19313, 37089, 42752, 37405, 34563, 25496, 41803, 19313, 19313, 19313,
  31872, 19313, 19313, 19313, 42037, 33340, 37358, 29663, 19313, 19313, 37090, 33119, 27502, 27502, 29047, 24208, 26228,
  26228, 37863, 41394, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 37089, 37358, 29663, 19313, 37089, 35786, 27502,
  27502, 27502, 25432, 26228, 26228, 26228, 40170, 41393, 19313, 19313, 19313, 19313, 19313, 29290, 25281, 37358, 29664,
  19313, 26471, 27502, 27502, 27502, 40347, 26228, 26228, 26228, 27412, 26842, 19313, 19657, 19313, 19313, 19313, 37357,
  32848, 33339, 27502, 41845, 26147, 32085, 32811, 26228, 34080, 27718, 19313, 19313, 19313, 37090, 29664, 42056, 27502,
  26611, 32096, 26228, 39248, 19313, 19313, 19313, 33341, 30379, 27502, 41391, 26228, 21661, 19313, 19313, 40523, 39798,
  26792, 26228, 25753, 19313, 31773, 31199, 21620, 25281, 31197, 23506, 41463, 23506, 41466, 23509, 41391, 27744, 23503,
  30441, 30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 24278, 19313, 19313, 19313, 19313,
  39975, 19313, 19313, 19313, 24587, 20179, 29663, 19313, 19313, 35008, 35021, 24186, 18277, 19313, 19313, 21391, 19313,
  19061, 19313, 19313, 41864, 41882, 19421, 19427, 24667, 19425, 40081, 40711, 26629, 41906, 25496, 27162, 19313, 19313,
  30739, 31872, 22035, 27906, 31028, 19313, 33340, 37358, 29663, 19313, 19313, 37090, 33119, 27502, 27502, 31478, 24208,
  26228, 42183, 37863, 32326, 41927, 19313, 19313, 19313, 19313, 19313, 19313, 37089, 37358, 29663, 19313, 37089, 35786,
  27502, 27502, 27502, 25432, 26228, 26228, 26228, 40170, 41393, 19313, 19313, 19313, 19313, 19313, 19313, 25281, 37358,
  29664, 19313, 26471, 27502, 27502, 27502, 40103, 26228, 26228, 26228, 27412, 26842, 42400, 19313, 19313, 19313, 19313,
  37357, 32848, 33339, 27502, 27502, 27502, 32085, 26228, 26228, 21619, 27718, 19313, 19313, 19313, 37090, 29664, 42056,
  27502, 26611, 32096, 26228, 39248, 19313, 19313, 19313, 33341, 30379, 27502, 41391, 26228, 21661, 19313, 19313, 40523,
  39798, 26792, 26228, 25753, 19313, 31773, 31199, 21620, 25281, 31197, 23506, 41463, 23506, 41466, 23509, 41391, 27744,
  23503, 30441, 30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 19313, 19313,
  19313, 39975, 19313, 19313, 19313, 24587, 20179, 29663, 19313, 19313, 33942, 25967, 24186, 41946, 19313, 19313, 21152,
  19313, 19313, 28213, 19313, 25282, 37359, 19313, 19313, 19313, 19313, 37089, 41979, 30892, 26229, 25496, 42012, 19313,
  19313, 19313, 31872, 19313, 19313, 19313, 19313, 33340, 37358, 29663, 19313, 19313, 42079, 33119, 27502, 27502, 28995,
  24208, 26228, 37578, 37863, 41394, 19511, 19313, 19313, 31946, 19313, 19313, 19313, 37089, 34379, 29663, 19313, 37089,
  35786, 42099, 41848, 27502, 25432, 42118, 26228, 42139, 40170, 41393, 19313, 31965, 19313, 19313, 19313, 19313, 25281,
  42156, 29664, 19313, 26471, 34115, 27502, 27502, 40347, 26228, 42180, 26228, 36884, 26842, 19313, 23742, 19313, 19313,
  19313, 37357, 32848, 37885, 27502, 28016, 27502, 42199, 26228, 40617, 26671, 27718, 19313, 19313, 40408, 37090, 29664,
  42056, 27502, 26611, 32096, 26228, 39248, 42235, 19313, 20999, 33341, 30379, 27502, 41391, 26228, 21661, 19313, 19313,
  40523, 39798, 26792, 26228, 25753, 19313, 31773, 31199, 21620, 25281, 31197, 23506, 41463, 23506, 41466, 23509, 41391,
  27744, 23503, 30441, 30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 21904, 19313, 19313,
  19313, 19313, 39975, 19313, 19313, 19313, 24587, 42252, 29663, 19313, 19313, 33942, 25967, 24186, 18277, 19313, 19313,
  21152, 19313, 19313, 19313, 19313, 25282, 37359, 19313, 19313, 19313, 19313, 37089, 42752, 26629, 26228, 25496, 27162,
  19313, 19313, 19313, 31872, 19313, 19313, 19313, 19313, 33340, 37358, 29663, 19313, 19313, 37090, 33119, 27502, 27502,
  29047, 24208, 26228, 26228, 37863, 41394, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 37089, 37358, 29663, 19313,
  37089, 35786, 27502, 27502, 27502, 25432, 26228, 26228, 26228, 40170, 41393, 19313, 19313, 19313, 19313, 19313, 19313,
  25281, 37358, 29664, 19313, 26471, 27502, 27502, 27502, 40347, 26228, 26228, 26228, 27412, 26842, 19313, 19313, 19313,
  19313, 19313, 37357, 32848, 33339, 27502, 27502, 27502, 32085, 26228, 26228, 21619, 27718, 19313, 19313, 19313, 37090,
  29664, 42056, 27502, 26611, 32096, 26228, 39248, 19313, 19313, 19313, 33341, 30379, 27502, 41391, 26228, 21661, 19313,
  19313, 40523, 39798, 26792, 26228, 25753, 19313, 31773, 31199, 21620, 25281, 31197, 23506, 41463, 23506, 41466, 23509,
  41391, 27744, 23503, 30441, 30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 20157, 19313,
  19313, 19313, 19313, 42287, 41009, 41016, 42312, 42296, 42357, 42390, 19313, 42324, 42426, 20740, 42457, 18277, 19313,
  19313, 21152, 19313, 33321, 20946, 19313, 34619, 19134, 19313, 19313, 19313, 19313, 21565, 28537, 42473, 42503, 19454,
  20847, 23939, 27538, 18328, 31872, 19313, 27941, 19313, 19313, 28527, 18369, 18433, 18488, 18384, 28219, 19142, 18592,
  18504, 42520, 19149, 18599, 18511, 19948, 42543, 19313, 28613, 19313, 19313, 19313, 18615, 29078, 22849, 18638, 18688,
  18699, 41644, 18652, 18752, 18771, 18720, 19468, 18749, 18768, 42504, 18733, 19847, 22184, 24713, 18353, 41213, 18787,
  25665, 34618, 18807, 18837, 35086, 18863, 18879, 18945, 18966, 18895, 18874, 18940, 18961, 18982, 19849, 19018, 19054,
  19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237, 19256, 19834, 19221, 19240, 19259, 18310, 19275, 19312, 19330,
  21566, 19357, 19382, 18562, 19398, 28544, 18567, 19445, 19484, 30528, 19508, 19527, 42374, 19574, 19563, 19579, 19595,
  19621, 19637, 40503, 27193, 27209, 27202, 19673, 19709, 19745, 19774, 19820, 29327, 42487, 19865, 19842, 19901, 19845,
  18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 20157,
  19313, 19313, 19313, 19313, 39975, 19313, 19313, 42578, 24587, 20179, 23416, 39924, 39931, 42598, 35538, 20247, 18277,
  19313, 19313, 21152, 19313, 33321, 19313, 19313, 34619, 19134, 19313, 42621, 19313, 19313, 21565, 28537, 18295, 42504,
  19454, 20118, 23939, 27538, 18328, 31872, 19313, 27941, 19313, 19313, 28527, 18369, 18433, 18488, 18384, 28219, 19142,
  18592, 18504, 18527, 18583, 18599, 18511, 19948, 19848, 19313, 28613, 19313, 19313, 19313, 18615, 29078, 22849, 18638,
  18688, 18699, 41644, 18652, 18752, 18771, 18720, 19468, 18749, 18768, 42504, 18733, 19847, 22184, 24713, 18353, 41213,
  18787, 25665, 34618, 18807, 18837, 35086, 18863, 18879, 18945, 18966, 18895, 18874, 18940, 18961, 18982, 19849, 19018,
  19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237, 19256, 19834, 19221, 19240, 19259, 18310, 19275, 19312,
  19330, 21566, 19357, 19382, 18562, 19398, 28544, 18567, 19445, 19484, 30528, 19508, 19527, 42374, 19574, 19563, 19579,
  19595, 19621, 19637, 40503, 27193, 27209, 27202, 19673, 19709, 19745, 19774, 19820, 29327, 42487, 19865, 19842, 19901,
  19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  20157, 19313, 19313, 19313, 19313, 42638, 42657, 19313, 19313, 27763, 42676, 41442, 42691, 42691, 42702, 35923, 20247,
  18277, 19313, 19313, 21152, 19313, 33321, 37487, 19313, 34619, 19134, 19313, 19313, 19313, 19313, 21565, 28537, 18295,
  42504, 19454, 20118, 23939, 27538, 18328, 31872, 19313, 27941, 19313, 19313, 28527, 18369, 18433, 18488, 18384, 28219,
  19142, 18592, 18504, 42723, 42775, 18599, 18511, 19948, 19848, 19313, 28613, 19313, 19313, 19313, 18615, 29078, 22849,
  18638, 18688, 18699, 41644, 18652, 18752, 18771, 18720, 19468, 18749, 18768, 42504, 18733, 19847, 22184, 24713, 18353,
  41213, 18787, 25665, 34618, 18807, 18837, 35086, 18863, 18879, 18945, 18966, 18895, 18874, 18940, 18961, 18982, 19849,
  19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237, 19256, 19834, 19221, 19240, 19259, 18310, 19275,
  19312, 19330, 21566, 19357, 19382, 18562, 19398, 28544, 18567, 19445, 19484, 30528, 19508, 19527, 42374, 19574, 19563,
  19579, 19595, 19621, 19637, 40503, 27193, 27209, 27202, 19673, 19709, 19745, 19774, 19820, 29327, 42487, 19865, 19842,
  19901, 19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 20157, 19313, 19313, 19313, 19313, 39975, 19313, 19313, 19313, 24587, 20179, 19313, 19313, 19313, 19313, 26424,
  24186, 18277, 19313, 19313, 21152, 19313, 19313, 19313, 19313, 25282, 37359, 19313, 19313, 19313, 19313, 37089, 42752,
  26629, 26228, 25496, 27162, 19313, 19313, 19313, 31872, 19313, 19313, 19313, 19313, 33340, 37358, 29663, 19313, 19313,
  37090, 31189, 27502, 27502, 27574, 21617, 26228, 26228, 37863, 41394, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  37089, 37358, 29663, 19313, 37089, 35786, 27502, 27502, 27502, 25248, 26228, 26228, 26228, 40170, 41393, 19313, 19313,
  19313, 19313, 19313, 19313, 25281, 37358, 29664, 19313, 26471, 27502, 27502, 27502, 40347, 26228, 26228, 26228, 27412,
  26842, 19313, 19313, 19313, 19313, 19313, 37357, 32848, 33339, 27502, 27502, 27502, 32085, 26228, 26228, 21619, 27718,
  19313, 19313, 19313, 37090, 29664, 42056, 27502, 26611, 32096, 26228, 39248, 19313, 19313, 19313, 33341, 30379, 27502,
  41391, 26228, 21661, 19313, 19313, 40523, 39798, 26792, 26228, 25753, 19313, 31773, 31199, 21620, 25281, 31197, 23506,
  41463, 23506, 41466, 23509, 41391, 27744, 23503, 30441, 30441, 21821, 25873, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 35182, 19313, 35186, 39071, 39078, 39078, 42826,
  20566, 33321, 19313, 19313, 19313, 19313, 19313, 33321, 19313, 19313, 34619, 19134, 19313, 19313, 19313, 19313, 21565,
  28537, 18295, 42504, 19454, 18306, 23939, 27538, 18328, 19313, 19313, 27941, 19313, 19313, 28527, 18369, 18433, 18488,
  18384, 28219, 19142, 18592, 18504, 42520, 19149, 18599, 18511, 19948, 19848, 19313, 28613, 19313, 19313, 19313, 18615,
  29078, 22849, 18638, 18688, 18699, 41644, 18652, 18752, 18771, 18720, 19468, 18749, 18768, 42504, 18733, 19847, 22184,
  24713, 18353, 41213, 18787, 25665, 34618, 18807, 18837, 35086, 18863, 18879, 18945, 18966, 18895, 18874, 18940, 18961,
  18982, 19849, 19018, 19054, 19077, 19105, 24660, 19121, 19165, 19193, 19218, 19237, 19256, 19834, 19221, 19240, 19259,
  18310, 19275, 19312, 19330, 21566, 19357, 19382, 18562, 19398, 28544, 18567, 19445, 19484, 30528, 19508, 19527, 42374,
  19574, 19563, 19579, 19595, 19621, 19637, 40503, 27193, 27209, 27202, 19673, 19709, 19745, 19774, 19820, 29327, 42487,
  19865, 19842, 19901, 19845, 18312, 19928, 19964, 20020, 19462, 20067, 20104, 20134, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313, 19313,
  19313, 19313, 19313, 0, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 73995, 73995, 73995, 73995, 0, 0, 78094, 78094, 73995,
  73995, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094,
  45056, 78094, 78094, 325, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094,
  78094, 0, 0, 49152, 78094, 78094, 78094, 78094, 40960, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094, 78094,
  78094, 0, 0, 73995, 78094, 73995, 78094, 78094, 78094, 78094, 78094, 78094, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 73995,
  0, 0, 78094, 0, 2105344, 273, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2081, 2162688, 2162688, 2162688,
  2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2162688,
  2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0, 0, 0, 0, 0, 2162688, 2162688, 2871296, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3067904, 0, 0, 0, 0, 278, 0, 279, 0, 278, 278, 279, 0, 0, 0, 0, 0, 0, 3051520,
  3055616, 0, 0, 0, 3141632, 0, 0, 3158016, 0, 2158592, 2621440, 2158592, 2158592, 2686976, 2158592, 2703360, 2158592,
  2158592, 2756608, 2777088, 2797568, 2158592, 2834432, 2158592, 2883584, 0, 0, 0, 2883584, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  2883584, 0, 0, 0, 0, 1052, 0, 0, 0, 1057, 0, 0, 975, 0, 0, 0, 0, 980, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2117, 2118, 0, 2120,
  415, 2122, 415, 415, 2158592, 2158592, 2158592, 3067904, 2158592, 2158592, 2158592, 0, 0, 0, 0, 2621440, 0, 2686976,
  2703360, 0, 0, 0, 0, 1120, 0, 0, 0, 0, 1124, 1125, 0, 1127, 0, 981, 0, 0, 0, 0, 1146, 0, 0, 0, 0, 0, 0, 415, 415, 415,
  415, 415, 522, 522, 522, 522, 522, 522, 2148, 522, 522, 0, 2756608, 2777088, 2797568, 0, 2834432, 2883584, 0, 0, 0, 0,
  0, 0, 0, 0, 2777088, 2162688, 2756608, 2162688, 2777088, 2797568, 2162688, 2162688, 2834432, 2162688, 2162688,
  2883584, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3067904, 2162688,
  2162688, 2162688, 2162688, 2162688, 2162688, 3067904, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  2162688, 879, 0, 0, 0, 879, 0, 882, 0, 0, 0, 882, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  2162688, 2547712, 2162688, 2162688, 2162688, 2162688, 2633728, 2162688, 2162688, 2715648, 2736128, 2162688, 2162688,
  2813952, 2818048, 2162688, 2162688, 2908160, 2162688, 2162688, 2953216, 2162688, 2961408, 0, 882, 2162688, 2441216,
  2449408, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2621440, 2162688, 2162688,
  2162688, 2162688, 2686976, 2162688, 2703360, 2162688, 2711552, 2162688, 2162688, 2756608, 2162688, 2777088, 2797568,
  2162688, 2162688, 0, 2772992, 0, 0, 0, 0, 2113536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 614, 0, 614, 0, 0, 0, 0, 2158592,
  2158592, 2158592, 2580480, 2158592, 2158592, 2613248, 2158592, 2658304, 2158592, 2158592, 2158592, 2158592, 2785280,
  2809856, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2162688, 2162688, 2428928, 2162688, 2162688,
  2162688, 2162688, 2162688, 2162688, 0, 939, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  2162688, 0, 303104, 2162688, 2162688, 2162688, 2162688, 2162688, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592,
  2158592, 2428928, 0, 0, 2580480, 0, 0, 0, 0, 2809856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2105, 0, 0, 0, 2162688,
  2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  3080192, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2801664, 2162688, 2801664,
  2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2580480,
  2162688, 2162688, 2162688, 2162688, 2613248, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2658304, 2162688,
  2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2785280, 2809856, 2162688, 2162688, 2162688, 2162688,
  2162688, 2838528, 0, 0, 2854912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1410, 1411, 0, 2473984, 2478080, 2158592,
  2158592, 2158592, 2158592, 2596864, 2158592, 2158592, 2158592, 2707456, 2158592, 2158592, 2875392, 2158592, 2158592,
  2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592,
  114688, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2478080, 0, 0, 2707456, 0, 0, 0, 0, 0, 0, 283, 284, 285,
  286, 287, 288, 289, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 3158016,
  2158592, 2162688, 2162688, 2162688, 2473984, 2478080, 2162688, 2162688, 2162688, 2519040, 2162688, 2162688, 2162688,
  2162688, 2162688, 2162688, 2162688, 2596864, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  2162688, 3158016, 2162688, 0, 0, 0, 0, 2121728, 0, 0, 0, 0, 0, 325, 325, 0, 0, 1010, 0, 0, 0, 0, 0, 0, 763, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1889, 0, 0, 0, 0, 0, 0, 2596864, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2707456,
  2162688, 2162688, 2162688, 2162688, 2162688, 2760704, 2162688, 2162688, 2162688, 2854912, 2875392, 2162688, 2162688,
  2162688, 2854912, 2875392, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2994176,
  3018752, 2162688, 2162688, 2162688, 3051520, 2162688, 2162688, 2162688, 2162688, 3051520, 2162688, 2162688, 2162688,
  2162688, 2162688, 2162688, 2162688, 2162688, 3158016, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 938, 0, 0,
  2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 1544, 0, 0, 1549, 0, 2162688, 2428928, 2162688,
  2162688, 0, 0, 2486272, 0, 0, 0, 0, 0, 0, 0, 0, 2600960, 0, 0, 0, 0, 0, 325, 325, 1008, 0, 0, 0, 0, 0, 0, 0, 0, 2102,
  0, 0, 0, 0, 0, 0, 0, 0, 2887680, 0, 0, 0, 0, 3026944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 681, 0, 0, 0, 0, 0, 0, 0, 0, 2646016,
  0, 2781184, 0, 0, 0, 0, 0, 0, 3125248, 0, 0, 0, 0, 0, 328, 0, 311, 373, 375, 0, 0, 0, 328, 0, 45056, 3043328, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 2527232, 2695168, 0, 3145728, 0, 2158592, 2158592, 2158592, 2527232, 2158592, 2158592,
  2600960, 2158592, 2695168, 2158592, 2158592, 2887680, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592,
  2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 0, 0, 2162688, 2441216, 2449408, 2162688,
  2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2621440, 2162688, 3026944, 3076096, 3096576,
  3145728, 0, 0, 0, 0, 0, 0, 3076096, 3096576, 0, 0, 0, 0, 0, 333, 0, 334, 0, 0, 0, 0, 0, 0, 292, 334, 0, 2887680, 0, 0,
  0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 0, 0, 2163513, 2442041, 2450233,
  2163513, 2163513, 2163513, 2163513, 2162688, 2162688, 2162688, 2162688, 2490368, 2162688, 2162688, 2527232, 2162688,
  2162688, 2162688, 2162688, 2162688, 2162688, 2600960, 2625536, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  2695168, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2887680, 2162688, 2162688, 2162688,
  2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3026944, 2162688, 2162688, 3076096,
  2162688, 3096576, 2162688, 2162688, 2162688, 3145728, 2162688, 2437120, 2437120, 0, 0, 0, 2818048, 0, 2879488, 0,
  2961408, 0, 2977792, 0, 0, 0, 0, 3153920, 0, 0, 0, 0, 1317, 1631, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 291, 291, 0, 335, 0,
  0, 2813952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 0, 0, 0, 2715648, 0, 0, 3039232, 0, 0, 0, 3022848, 0,
  0, 0, 0, 0, 0, 1969, 0, 0, 415, 415, 415, 1973, 415, 415, 415, 2633728, 2158592, 2158592, 2961408, 2158592, 3022848,
  0, 0, 2633728, 0, 0, 0, 0, 0, 0, 0, 295, 0, 0, 0, 0, 0, 0, 0, 45056, 0, 0, 2158592, 2813952, 2158592, 2158592,
  2158592, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2547712, 2162688, 2162688, 2953216,
  2162688, 2961408, 2162688, 2162688, 3022848, 3047424, 2162688, 2162688, 2162688, 2162688, 3174400, 0, 0, 0, 0, 291,
  359, 0, 0, 291, 0, 0, 0, 0, 0, 0, 0, 765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 987, 0, 2162688, 2162688, 3022848,
  3047424, 2162688, 2162688, 2162688, 2162688, 3174400, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0,
  2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0,
  0, 0, 2162688, 2428928, 2162688, 2162688, 0, 0, 0, 2514944, 0, 0, 2543616, 2592768, 0, 0, 0, 0, 0, 0, 0, 0, 279, 278,
  0, 278, 278, 279, 279, 0, 3014656, 0, 2539520, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1331, 0, 0, 0, 0, 2920448, 0,
  0, 0, 2158592, 2158592, 2158592, 2543616, 2158592, 2158592, 2158592, 2158592, 0, 0, 0, 0, 1340, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 2328, 0, 0, 0, 0, 2162688, 2957312, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  2162688, 2162688, 2162688, 2162688, 2498560, 2539520, 2543616, 2162688, 2162688, 2592768, 2162688, 2162688, 2162688,
  2162688, 2162688, 2162688, 2891776, 2162688, 2162688, 2957312, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2457600, 0, 0, 0, 0, 0, 0, 343, 0, 0, 0, 347, 348, 350, 303, 0,
  0, 0, 2895872, 0, 0, 3108864, 0, 2682880, 0, 2641920, 2609152, 2691072, 0, 0, 0, 0, 2936832, 0, 0, 3084288, 0,
  2940928, 3129344, 2416640, 0, 0, 0, 0, 0, 0, 0, 2723840, 0, 0, 0, 0, 1366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1903, 0,
  0, 0, 0, 2162688, 2162688, 2162688, 2162688, 3121152, 2162688, 2162688, 2162688, 2162688, 0, 2494464, 0, 0, 0,
  2826240, 0, 0, 0, 0, 1381, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2322, 2323, 0, 0, 0, 2973696, 0, 0, 0, 3100672, 0, 0, 0,
  0, 0, 0, 0, 2916352, 0, 2445312, 0, 0, 0, 0, 1394, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 122880, 0, 0, 0, 2445312,
  2494464, 2158592, 2744320, 2973696, 2744320, 0, 0, 2158592, 2162688, 2445312, 2453504, 2494464, 2162688, 2162688,
  2162688, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2, 0, 176128, 2162688, 2650112,
  2744320, 2826240, 2928640, 2162688, 2973696, 2162688, 2162688, 2162688, 3100672, 2162688, 2445312, 2453504, 2494464,
  2162688, 2162688, 2162688, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 257, 4297295,
  0, 0, 0, 0, 1452, 0, 0, 0, 1470, 0, 1325, 1325, 1473, 415, 415, 1437, 2162688, 2162688, 2162688, 2650112, 2744320,
  2826240, 2928640, 2162688, 2973696, 2162688, 2162688, 2162688, 3100672, 2162688, 2162688, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  2162688, 2162688, 0, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3092480, 0, 0,
  0, 0, 0, 2850816, 0, 0, 0, 0, 1642, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111024, 111024, 111024, 0, 0, 2162688, 2162688,
  2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2502656, 0, 0, 0, 0, 0, 0, 2075, 0, 0, 0, 2077, 0,
  2079, 0, 0, 0, 2588672, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2588672,
  2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 245760, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688,
  2162688, 2162688, 2162688, 2162688, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2465792, 0,
  2531328, 2985984, 0, 0, 0, 0, 2162688, 2162688, 2605056, 2162688, 2830336, 2162688, 2162688, 2162688, 0, 2162688,
  2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 958, 6, 0, 0, 0, 0, 1655, 0, 0, 0, 0, 1658, 0, 0, 0,
  0, 0, 0, 1418, 0, 0, 0, 0, 0, 415, 415, 1426, 415, 2162688, 2162688, 2985984, 2162688, 2162688, 2605056, 2162688,
  2830336, 2162688, 2162688, 2162688, 2985984, 2523136, 0, 0, 0, 0, 0, 1363, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 2141,
  2142, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2165, 522, 522, 522, 522, 0, 0, 0, 2424832, 2162688, 2162688,
  2162688, 2162688, 2981888, 2424832, 2162688, 2162688, 2162688, 2162688, 2981888, 2535424, 0, 0, 0, 0, 297, 298, 299,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1681, 0, 0, 0, 0, 0, 0, 2912256, 2162688, 2654208, 2932736, 2162688, 2162688, 2654208,
  2932736, 2162688, 2637824, 2699264, 2555904, 2162688, 2555904, 2162688, 2162688, 2162688, 0, 2162688, 2162688,
  2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2, 6, 0, 2162688, 2162688, 2162688, 2162688, 2162688,
  2945024, 2945024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 708, 0, 0, 0, 0, 415, 415, 0, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 200704, 200980, 200704, 0, 0, 49152, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 217088,
  217088, 0, 0, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 111024, 111024, 111024,
  111024, 432, 111024, 111024, 111024, 111024, 111024, 111024, 111024, 111024, 111024, 111024, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 2236, 0, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2105344, 118784, 0, 0, 273, 118784, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2329, 2330, 0, 0, 0, 0, 325, 273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1635, 0, 0, 0,
  273, 273, 0, 0, 0, 0, 0, 0, 0, 273, 0, 0, 0, 273, 119162, 0, 0, 273, 273, 273, 273, 273, 273, 273, 273, 273, 0, 0,
  273, 0, 0, 0, 2441216, 2449408, 0, 0, 2469888, 0, 0, 0, 0, 0, 0, 2087, 0, 0, 0, 0, 0, 0, 0, 0, 0, 573440, 0, 0, 0, 0,
  0, 0, 0, 0, 1072, 0, 0, 0, 0, 0, 0, 0, 21075, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2096, 0, 2, 2183427,
  94212, 5, 6, 263, 0, 0, 0, 0, 0, 263, 0, 0, 0, 0, 0, 1367, 0, 1369, 0, 0, 1372, 0, 0, 0, 1376, 0, 0, 0, 325, 0,
  122880, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250291, 250291, 250291, 0, 0, 0, 0, 0, 122880, 0, 122880, 0, 122880,
  122880, 122880, 122880, 0, 122880, 0, 0, 0, 0, 0, 1404, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 135168, 0, 0, 0, 0,
  122880, 122880, 122880, 122880, 0, 122880, 122880, 122880, 0, 122880, 122880, 0, 0, 122880, 0, 0, 0, 0, 1703, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 1088, 415, 415, 415, 415, 0, 122880, 122880, 122880, 122880, 0, 0, 0, 0, 0, 0, 0,
  122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2183427, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2105344, 0, 0, 0, 959, 963,
  0, 2441216, 2449408, 0, 0, 2469888, 0, 0, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 106496, 106496, 106496, 0, 0, 0, 0, 325, 0,
  0, 0, 131072, 131072, 131072, 0, 0, 0, 0, 0, 0, 0, 300, 0, 0, 0, 0, 0, 0, 0, 0, 1645, 0, 0, 0, 0, 0, 0, 0, 131072, 0,
  131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 0, 0, 131072, 0, 0, 0, 0, 131072, 0, 0, 0,
  131072, 0, 0, 0, 0, 0, 0, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936,
  167936, 167936, 167936, 167936, 167936, 0, 0, 325, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 0,
  45056, 49152, 0, 135168, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 258484, 258484, 258484, 0, 0, 135168, 135168,
  135168, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 0, 0, 135168, 0, 0, 0, 0, 298, 297, 0, 0, 0,
  0, 0, 0, 0, 297, 0, 45056, 379, 0, 0, 0, 0, 379, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1085440, 1085440, 0, 0, 0, 596, 597,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2214, 2162688, 2162688, 2162688, 2162688, 2162688, 3067904, 2162688,
  2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 1224, 0, 0, 0, 0, 1745, 1746, 0, 0, 0, 1749, 0, 0, 0,
  0, 0, 0, 1323, 0, 1325, 0, 0, 0, 0, 0, 0, 0, 1023, 0, 0, 0, 0, 0, 0, 0, 0, 1900, 0, 0, 0, 0, 0, 0, 0, 0, 1227,
  2162688, 2441216, 2449408, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2621440,
  2162688, 2162688, 2162688, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 4263936, 6,
  0, 0, 0, 0, 1884, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2092, 0, 0, 0, 0, 139264, 0, 0, 274, 139264, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 200704, 276, 277, 0, 0, 0, 325, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1660, 0, 0, 0, 274, 274, 0,
  0, 0, 0, 0, 0, 0, 274, 0, 0, 0, 274, 45056, 139646, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1089536, 0, 0,
  0, 0, 0, 0, 274, 274, 274, 274, 274, 274, 274, 274, 274, 0, 0, 274, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1694, 0, 0, 0, 0, 273, 21078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2239, 0, 0, 271, 271, 0, 0, 271, 271,
  143631, 271, 271, 271, 271, 271, 271, 271, 143631, 271, 143631, 271, 271, 271, 271, 271, 271, 271, 271, 271, 326, 271,
  143631, 271, 271, 271, 271, 271, 143631, 330, 271, 271, 271, 271, 143631, 143631, 143631, 143631, 143631, 143631,
  143631, 271, 143631, 271, 271, 271, 271, 271, 143690, 271, 271, 271, 271, 271, 271, 271, 143690, 271, 143631, 271,
  143690, 45056, 49152, 271, 271, 271, 271, 40960, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
  271, 271, 143631, 271, 143631, 143631, 143631, 143631, 143631, 143631, 143631, 143631, 271, 143631, 271, 143631, 271,
  143631, 143631, 143631, 143631, 143631, 0, 0, 0, 271, 0, 271, 271, 271, 143631, 271, 143631, 143631, 143631, 143631,
  143631, 143631, 143690, 143690, 143690, 143690, 143690, 143690, 143631, 143631, 143631, 0, 0, 0, 0, 325, 325, 325, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 302, 303, 0, 0, 0, 0, 0, 0, 0, 325, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 155648, 155648, 0, 0, 0,
  0, 325, 325, 325, 0, 0, 0, 0, 0, 0, 0, 654, 655, 49152, 155648, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648,
  155648, 0, 0, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 155648, 0, 0, 0, 0, 155648, 0, 155648, 155648, 155648, 155648, 155648,
  155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  155648, 0, 0, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 155648, 155648, 155648, 0, 0, 0, 0, 325, 325,
  325, 0, 0, 0, 0, 0, 0, 653, 0, 0, 0, 0, 777, 760, 0, 0, 783, 0, 619, 0, 656, 0, 2, 2, 0, 94212, 5, 6, 126976, 0, 0, 0,
  0, 0, 0, 0, 0, 2105344, 159744, 159744, 159744, 159744, 159744, 0, 0, 0, 0, 0, 90655, 0, 0, 0, 159744, 0, 0, 0, 0,
  1924, 0, 0, 1927, 0, 0, 0, 0, 0, 0, 0, 0, 258484, 258484, 258484, 258484, 258484, 258484, 258484, 258484, 258484,
  258484, 258484, 258484, 258484, 258484, 258484, 258484, 0, 0, 0, 90655, 90655, 90655, 90655, 90655, 90655, 90655,
  90655, 159744, 159744, 90655, 0, 0, 0, 0, 325, 325, 325, 0, 0, 0, 0, 0, 652, 0, 0, 0, 0, 273, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 90112, 882, 2162688, 2441216, 2449408, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  2162688, 2162688, 2621440, 2162688, 2162688, 2162688, 938, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  2162688, 2162688, 0, 2, 6, 0, 0, 0, 0, 1664, 0, 0, 0, 0, 0, 0, 0, 1670, 0, 0, 0, 0, 0, 172032, 0, 172032, 172032,
  172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 0, 0,
  325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 167936, 167936, 167936, 167936, 167936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 49152, 167936, 0, 0, 0, 40960, 167936, 167936, 0, 0, 167936, 0, 167936, 0, 167936, 167936, 0, 2, 3, 260, 5, 6, 0,
  264, 0, 0, 0, 0, 0, 0, 0, 0, 351, 0, 0, 0, 0, 0, 0, 0, 172032, 172032, 172032, 172032, 172032, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 2158592, 2, 2, 3, 0, 5, 6, 0, 592, 0, 0, 0, 0, 0, 0, 0, 2105344, 0, 0,
  1066, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1649, 0, 0, 882, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  544, 544, 544, 544, 522, 544, 0, 0, 0, 1640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1686, 0, 544, 2191, 544, 544,
  544, 544, 544, 544, 544, 522, 522, 522, 544, 544, 544, 0, 0, 0, 0, 0, 0, 0, 0, 2241, 0, 0, 0, 0, 0, 415, 415, 415,
  415, 415, 415, 415, 415, 0, 0, 0, 0, 0, 1450, 0, 0, 0, 522, 2407, 522, 2408, 2409, 522, 522, 522, 522, 522, 522, 544,
  544, 544, 544, 544, 544, 544, 544, 1311, 1629, 544, 544, 544, 2419, 544, 2420, 2421, 544, 544, 544, 544, 544, 544,
  522, 544, 0, 0, 0, 0, 2074, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 706, 0, 805, 0, 0, 0, 522, 2439, 522, 522, 522, 522, 522,
  522, 2445, 522, 522, 522, 544, 2449, 544, 544, 544, 544, 544, 544, 2371, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  1829, 544, 544, 1832, 544, 544, 544, 544, 544, 544, 544, 544, 2455, 544, 544, 544, 0, 0, 0, 0, 0, 0, 0, 346, 0, 0, 0,
  0, 0, 0, 0, 45056, 0, 522, 522, 522, 522, 544, 544, 544, 544, 0, 0, 522, 522, 544, 544, 522, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 2019, 544, 544, 544, 544, 544, 544, 2026, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1257, 544, 544,
  544, 544, 544, 544, 0, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 0, 0, 180591, 180793, 180793, 180793,
  180793, 180793, 180793, 180793, 180793, 0, 0, 180793, 53503, 53503, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  615, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188849, 188849, 188849, 188849, 0, 188849, 188849, 188849, 188849, 188849,
  188849, 188849, 188849, 188849, 188849, 192512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 308, 0, 0, 272, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1892, 0, 0, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 0, 0, 368, 368, 368,
  368, 368, 368, 368, 368, 368, 0, 0, 368, 53503, 53503, 2, 2, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 272, 0, 272,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1025, 0, 0, 0, 0, 0, 0, 0, 0, 1317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1906, 0, 522,
  1810, 2015, 0, 0, 0, 0, 1816, 2017, 0, 0, 0, 0, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2178, 544, 544, 544,
  2017, 0, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2034, 0, 0, 327, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 1945, 1946, 49152, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 277, 0, 0, 200704, 200704, 200704,
  200704, 200704, 200704, 200704, 200704, 200704, 200704, 200704, 200704, 200704, 200704, 200704, 200704, 200981,
  200704, 200704, 200704, 200704, 200981, 200704, 200704, 200704, 200704, 200704, 200704, 200704, 200980, 200704,
  200980, 200704, 200704, 200704, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2473984, 0, 0, 0, 2, 2, 3, 94212, 5, 6, 0, 0, 0,
  0, 0, 0, 0, 0, 151552, 2105344, 273, 274, 0, 208896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1671, 1672, 0, 2163513,
  2757433, 2163513, 2777913, 2798393, 2163513, 2163513, 2835257, 2163513, 2163513, 2884409, 2163513, 2163513, 2163513,
  2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 3081017, 2163513,
  0, 882, 2163569, 2442097, 2450289, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569,
  2622321, 2163569, 2163569, 2163569, 2687857, 2163569, 2704241, 2163569, 2712433, 2163569, 2163569, 2757489, 2163569,
  2777969, 2798449, 2163569, 2163569, 2163569, 2163569, 3122033, 2163513, 2163513, 2163569, 2163569, 0, 2494464, 0, 0,
  0, 2826240, 0, 2835313, 2163569, 2163569, 2884465, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569,
  2163569, 2163569, 2163569, 3068785, 2163569, 2163569, 2163569, 3027825, 2163569, 2163569, 3076977, 2163569, 3097457,
  2163569, 2163569, 2163569, 3146609, 2163569, 2437945, 2438001, 2809856, 2158592, 2158592, 2158592, 2158592, 2158592,
  2158592, 2158592, 2162688, 2163513, 2429753, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 2581305,
  2163513, 2163513, 2163513, 2163513, 2614073, 2163513, 2163513, 2163513, 2659129, 2163513, 2163513, 2163513, 2163513,
  2163513, 2163513, 2163513, 2163513, 2786105, 2810681, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513,
  2995001, 3019577, 2163513, 2163513, 2163513, 3052345, 2163513, 2163513, 2163513, 2163569, 3081073, 2163569, 2163569,
  2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2163513, 2802489, 2163569, 2802545, 2163513, 2163513, 2163513,
  2163513, 2163513, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 0, 0, 0, 0, 0, 0, 0, 0, 2163513,
  2163513, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 3158016, 2158592, 2163513,
  2163513, 2163513, 2474809, 2478905, 2163513, 2163513, 2163513, 2519865, 2163513, 2163513, 2163513, 2163513, 2163513,
  2163513, 2163513, 2597689, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 2163569, 2163569, 2163569, 2163569,
  2163569, 2163569, 2163569, 2163569, 0, 0, 0, 2163513, 2163513, 2708281, 2163513, 2163513, 2163513, 2163513, 2163513,
  2761529, 2163513, 2163513, 2163513, 2855737, 2876217, 2163513, 2163513, 2163513, 2163513, 2163513, 2622265, 2163513,
  2163513, 2163513, 2163513, 2687801, 2163513, 2704185, 2163513, 2712377, 2163513, 2597745, 2163569, 2163569, 2163569,
  2163569, 2163569, 2163569, 2708337, 2163569, 2163569, 2163569, 2163569, 2163569, 2761585, 2163569, 2163569, 2163569,
  2650993, 2745201, 2827121, 2929521, 2163569, 2974577, 2163569, 2163569, 2163569, 3101553, 2163513, 2163569, 0,
  2163569, 2855793, 2876273, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2995057,
  3019633, 2163569, 2163569, 2163569, 2659185, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569,
  2786161, 2810737, 2163569, 2163569, 2163569, 2474865, 2478961, 2163569, 2163569, 2163569, 2519921, 2163569, 2163569,
  2163569, 2163569, 2163569, 2163569, 2163569, 2163513, 2163513, 0, 0, 2163569, 2163569, 2163513, 2163513, 2163513,
  2163569, 3052401, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 3158897, 2163569, 2163513,
  2163569, 2163513, 2163513, 2163513, 2163513, 2163513, 3068729, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513,
  2163513, 2163513, 879, 0, 2163513, 2163513, 2163513, 2163513, 2491193, 2163513, 2163513, 2528057, 2163513, 2163513,
  2163513, 2163513, 2163513, 2163513, 2601785, 2626361, 2163513, 2163513, 2163513, 2695993, 2163513, 2163513, 2163513,
  2163513, 2163513, 2163513, 2163513, 2163513, 2888505, 2163513, 2163513, 2163513, 0, 2163569, 2163569, 2163569,
  2163569, 2163569, 2163569, 2163569, 2163569, 0, 2, 6, 0, 2163569, 2491249, 2163569, 2163569, 2528113, 2163569,
  2163569, 2163569, 2163569, 2163569, 2163569, 2601841, 2626417, 2163569, 2163569, 2163569, 2163513, 2163513, 2163513,
  2163569, 2163569, 2163569, 2457600, 0, 0, 0, 0, 0, 0, 662, 0, 0, 665, 0, 667, 0, 669, 0, 0, 2696049, 2163569, 2163569,
  2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2888561, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569,
  2163569, 2163569, 2163569, 0, 2502656, 0, 0, 0, 0, 0, 0, 0, 2158592, 2813952, 2158592, 2158592, 2158592, 2163513,
  2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 2548537, 2163513, 2163513, 2163513, 2163513, 2634553,
  2163513, 2163513, 2716473, 2736953, 2163513, 2163513, 2814777, 2818873, 2163513, 2163513, 2908985, 2163513, 2163513,
  2954041, 2163513, 2962233, 2163513, 2163513, 3023673, 3048249, 2163513, 2163513, 2163513, 2163513, 3175225, 0, 0, 0,
  0, 325, 325, 325, 0, 0, 0, 0, 651, 0, 0, 0, 0, 0, 522, 522, 522, 2470, 522, 522, 522, 522, 522, 522, 544, 544, 544,
  544, 544, 544, 544, 544, 522, 522, 544, 53503, 53837, 2163569, 2163569, 2716529, 2737009, 2163569, 2163569, 2814833,
  2818929, 2163569, 2163569, 2909041, 2163569, 2163569, 2954097, 2163569, 2962289, 2163569, 2163569, 3023729, 3048305,
  2163569, 2163569, 2163569, 2163569, 3175281, 2163513, 2163513, 2163513, 2163569, 2163569, 2163569, 0, 0, 0, 0, 2100,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2428928, 2158592, 2158592, 2158592, 2163513, 2163513, 2499385, 2540345, 2544441,
  2163513, 2163513, 2593593, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 2892601, 2163513, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2548593, 2163569, 2163569,
  2163569, 2163569, 2634609, 2163513, 2958137, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 2163569, 2163569,
  2163569, 2163569, 2163569, 2499441, 2540401, 2544497, 2163513, 2683705, 2741049, 2163513, 2163513, 2163513, 2163513,
  2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 3121977, 2421617, 2163569, 2163569, 2465792, 0, 2531328,
  2985984, 0, 0, 0, 0, 2163513, 2163513, 2605881, 2163513, 2831161, 2163513, 2163513, 2163513, 2163513, 2163569,
  2163569, 2163569, 2163569, 0, 0, 0, 0, 0, 0, 0, 0, 680, 0, 0, 0, 0, 0, 0, 0, 2163569, 2483057, 2163569, 2163569,
  2163569, 2585457, 2163569, 2163569, 2683761, 2741105, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569,
  2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2581361, 2163569, 2163569, 2163569,
  2163569, 2614129, 2445312, 2494464, 2158592, 2744320, 2973696, 2744320, 0, 0, 2158592, 2163513, 2446137, 2454329,
  2495289, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 3027769, 2163513, 2163513, 3076921, 2163513, 3097401,
  2163513, 2163513, 2163513, 3146553, 2163513, 2650937, 2745145, 2827065, 2929465, 2163513, 2974521, 2163513, 2163513,
  2163513, 3101497, 2163569, 2446193, 2454385, 2495345, 2163569, 2163569, 2593649, 2163569, 2163569, 2163569, 2163569,
  2163569, 2163569, 2892657, 2163569, 2163569, 2958193, 2163569, 2163569, 2163569, 2163569, 2163513, 2163513, 0, 0, 0,
  2163569, 2163569, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513,
  2163513, 2163513, 2163513, 880, 2163569, 0, 2163513, 2552633, 2560825, 2163513, 2163513, 2163513, 2163513, 2163513,
  2163513, 2163513, 2163513, 3093305, 2163569, 2552689, 2560881, 2589497, 2163513, 2163513, 2163513, 2163513, 2163513,
  2163513, 2163513, 2163569, 2163569, 2589553, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569,
  3093361, 0, 0, 0, 0, 0, 2850816, 0, 2163513, 2163513, 2986809, 2163569, 2163569, 2605937, 2163569, 2831217, 2163569,
  2163569, 2163569, 2986865, 2523136, 0, 0, 0, 0, 0, 1631, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 682, 0, 0, 686, 0, 0, 0,
  2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 2163569, 2163569, 2163569, 2163569, 2163569, 2163569, 0, 0, 0,
  0, 0, 1631, 0, 0, 0, 0, 0, 0, 0, 0, 1636, 0, 0, 2425657, 2163513, 2163513, 2163513, 2163513, 2982713, 2425713,
  2163569, 2163569, 2163569, 2163569, 2982769, 2535424, 0, 0, 0, 0, 325, 325, 325, 0, 0, 147456, 0, 0, 0, 0, 0, 0, 616,
  0, 618, 619, 0, 0, 0, 0, 0, 0, 632, 633, 634, 0, 0, 0, 0, 0, 0, 0, 221618, 221618, 221618, 221618, 221618, 221618,
  221618, 221618, 221618, 221618, 221618, 221618, 221618, 221618, 221618, 221618, 2912256, 2163513, 2655033, 2933561,
  2163513, 2163569, 2655089, 2933617, 2163569, 2637824, 2699264, 2556729, 2163513, 2556785, 2163569, 2163513, 2163569,
  2163513, 2163569, 2945849, 2945905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073, 0, 0, 0, 0, 0, 0, 0, 0, 325, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 217088, 0, 217088, 217088, 217088, 0, 0, 0, 217088, 0, 0, 217088, 217088, 0, 0, 0, 0, 0, 0, 0, 0, 728, 0,
  0, 0, 600, 0, 0, 0, 49152, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 217088, 0, 217088, 217088, 217088, 217088, 217088,
  217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 217088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 277, 0, 0, 0, 0, 0, 2772992, 0, 0, 0, 0, 2113536, 0, 0, 0, 0, 0, 0, 57344, 0, 0, 0, 0, 325, 325, 325, 0, 649, 0, 0,
  0, 0, 0, 0, 0, 1094081, 1094081, 1094081, 1094081, 0, 1094081, 0, 0, 0, 0, 28672, 0, 0, 2658304, 0, 2785280, 0, 0, 0,
  0, 0, 0, 0, 0, 2379776, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  2162688, 2162688, 2162688, 2162688, 273, 0, 274, 0, 0, 0, 273, 0, 274, 0, 0, 0, 274, 0, 0, 0, 2473984, 0, 0, 0, 0, 0,
  1631, 0, 0, 0, 0, 0, 1634, 0, 0, 0, 0, 0, 522, 2468, 522, 522, 522, 2472, 522, 522, 522, 522, 544, 544, 544, 544, 544,
  544, 544, 544, 544, 0, 0, 0, 0, 0, 0, 0, 0, 522, 522, 2162688, 2162688, 2953216, 2162688, 2961408, 2162688, 2162688,
  3022848, 3047424, 2162688, 2162688, 2162688, 2162688, 3174400, 879, 0, 0, 0, 0, 2113, 0, 0, 0, 0, 0, 0, 415, 415, 415,
  415, 415, 522, 522, 522, 522, 522, 2147, 522, 2149, 522, 221618, 221618, 221618, 221618, 221618, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 283, 283, 0, 0, 0, 0, 0, 221751, 221751, 221751, 221751, 221751, 221751, 221751, 221751, 221751, 221618,
  221618, 221764, 0, 0, 0, 0, 325, 325, 325, 648, 0, 0, 0, 0, 0, 0, 0, 0, 1040, 0, 0, 0, 0, 0, 0, 0, 0, 237568, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2331, 0, 2, 3, 94212, 5, 6, 0, 0, 249856, 0, 0, 0, 0, 249856, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 336, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856,
  249856, 249856, 249856, 250291, 250291, 250291, 250291, 249856, 250291, 250291, 250291, 250291, 250291, 250291,
  250291, 250291, 250291, 250291, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 304, 305, 306, 307, 0, 273, 274, 0, 0, 212992, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 320, 321, 322, 323, 324, 0, 241664, 0, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1905,
  0, 0, 2162688, 2162688, 2162688, 241664, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2,
  6, 0, 0, 0, 0, 2229, 0, 0, 0, 0, 0, 2234, 2235, 0, 0, 0, 0, 0, 1047, 1047, 0, 0, 0, 0, 0, 0, 1054, 1401, 0, 0, 2, 3,
  94212, 5, 6, 0, 0, 0, 258048, 0, 0, 0, 0, 258048, 0, 0, 0, 0, 2243, 0, 0, 415, 415, 415, 415, 415, 415, 415, 415, 0,
  0, 0, 1115, 0, 0, 0, 0, 0, 258484, 258484, 258484, 258484, 258484, 0, 0, 0, 0, 258048, 0, 0, 0, 0, 0, 0, 706, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1397, 1398, 0, 1400, 0, 0, 0, 2, 2, 3, 94212, 0, 6, 0, 0, 274432, 0, 0, 0, 0, 0, 0, 2105344, 273,
  274, 196608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2107, 2108, 0, 0, 253952, 266240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 1944, 0, 0, 294912, 0, 0, 0, 0, 0, 2441216, 2449408, 0, 0, 2469888, 0, 0, 0, 0, 0, 0, 2441216, 2449408, 0, 0,
  2469888, 0, 0, 0, 0, 0, 0, 1926, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32768, 0, 0, 0, 0, 0, 0, 0, 2, 3, 94212, 2195717, 6, 0, 0,
  0, 0, 265, 0, 0, 0, 0, 265, 0, 0, 325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 270336, 0, 0, 0, 0, 0, 0, 0, 270336, 270336,
  270336, 270336, 270336, 270336, 270336, 270336, 270336, 0, 0, 270336, 0, 0, 0, 0, 270336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 364, 2, 2, 3, 94212, 2195717, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2105344, 2162688, 2162688, 2162688,
  245760, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 0, 2, 6, 0, 0, 0, 0, 2257, 0, 2258, 0,
  0, 415, 415, 415, 415, 522, 2265, 522, 0, 0, 0, 2016, 0, 1546, 0, 0, 0, 2018, 0, 1551, 544, 544, 544, 544, 544, 544,
  544, 2372, 544, 544, 544, 544, 2375, 544, 544, 544, 522, 522, 522, 544, 544, 544, 0, 2314, 0, 0, 0, 0, 0, 0, 2179719,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1041, 0, 0, 0, 0, 0, 0, 0, 0, 0, 278528, 278528, 278528, 278528, 278528, 278528, 278528,
  278528, 0, 0, 278528, 0, 0, 0, 0, 325, 325, 204800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 782, 0, 0, 0, 0, 0, 0, 2, 2, 3, 94212,
  5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 636, 637, 0, 0, 0, 641, 1161, 882, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  544, 544, 544, 544, 544, 544, 2306, 1932, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 379, 49152, 0, 0, 0, 0, 40960,
  0, 0, 0, 0, 0, 0, 0, 399, 0, 0, 0, 0, 340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1126, 0, 0, 0, 0, 53504, 2, 3, 94212, 5,
  6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 696, 0, 0, 0, 0, 0, 0, 286720, 286720, 286720, 286720, 0, 286720, 286720, 286720,
  286720, 286720, 286720, 286720, 286720, 286720, 286720, 0, 0, 286720, 286720, 286720, 286720, 286720, 286720, 286720,
  286720, 286720, 286720, 286720, 286720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 349, 0, 0, 0, 354, 0, 0, 1067, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 2226, 0, 0, 0, 3084288, 0, 2940928, 3129344, 2416640, 229376, 0, 0, 0, 0, 0, 0, 2723840, 0,
  0, 0, 0, 2336, 415, 415, 2338, 2339, 415, 415, 415, 0, 0, 0, 0, 0, 1021, 0, 0, 0, 0, 1026, 0, 0, 0, 0, 0, 0, 2113536,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 968, 0, 0, 0, 0, 0, 0, 0, 257, 3, 94212, 5, 262, 0, 0, 0, 0, 0, 266, 0, 0, 0, 0, 0, 488,
  494, 488, 488, 488, 488, 488, 488, 488, 488, 0, 0, 268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2399, 0, 0, 325,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290816, 0, 290816, 290816, 290816, 49152, 290816, 0, 0, 0, 40960, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 290816, 0, 0, 290816, 290816, 290816, 0, 0, 290816, 290816, 290816, 290816, 290816, 290816, 290816,
  290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
  415, 415, 257, 257, 3, 94212, 5, 4297295, 0, 0, 0, 593, 0, 0, 0, 0, 0, 2105344, 0, 258, 3, 94212, 5, 6, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 698, 0, 0, 0, 0, 0, 0, 269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 0, 0, 568, 568, 568,
  568, 568, 568, 568, 568, 568, 0, 0, 568, 0, 0, 0, 0, 370, 372, 279, 0, 0, 0, 0, 279, 0, 377, 0, 45056, 4264526, 258,
  3, 94212, 5, 6, 0, 0, 0, 0, 0, 594, 0, 0, 0, 2105344, 0, 299008, 0, 0, 0, 0, 2441216, 2449408, 0, 0, 2469888, 0, 0, 0,
  0, 0, 0, 2572288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 681, 0, 765, 0, 0, 0, 0, 0, 278, 279, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 2324, 0, 0, 0, 325, 0, 0, 0, 0, 0, 0, 0, 279, 0, 0, 0, 0, 0, 0, 2596864, 0, 0, 2760704, 0, 0, 0, 2854912, 0, 0,
  49152, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 278, 0, 407, 409, 416, 416, 416, 416, 416, 416, 416, 437, 437, 437, 437,
  456, 437, 456, 456, 456, 456, 456, 481, 493, 481, 481, 481, 481, 481, 481, 481, 481, 481, 509, 481, 523, 523, 523,
  523, 523, 546, 523, 523, 523, 523, 565, 500, 481, 481, 481, 481, 500, 481, 481, 481, 481, 481, 481, 481, 481, 481,
  481, 565, 565, 565, 570, 570, 570, 570, 570, 570, 570, 570, 572, 572, 581, 53503, 53503, 273, 274, 0, 0, 0, 0, 0, 601,
  0, 0, 604, 605, 0, 0, 0, 0, 0, 490, 0, 490, 496, 496, 496, 496, 499, 499, 499, 447, 0, 0, 658, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 670, 0, 0, 0, 0, 159744, 0, 159744, 159744, 159744, 159744, 159744, 0, 159744, 0, 0, 0, 0, 0, 1457, 0, 0,
  1460, 0, 0, 0, 0, 1457, 0, 0, 0, 673, 0, 0, 0, 0, 0, 0, 0, 0, 0, 683, 0, 0, 0, 0, 0, 522, 522, 2469, 522, 522, 522,
  522, 522, 522, 522, 544, 1304, 544, 544, 544, 544, 544, 544, 0, 0, 0, 689, 0, 0, 0, 0, 0, 0, 0, 0, 0, 697, 0, 0, 0, 0,
  601, 0, 761, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 604, 0, 0, 0, 0, 0, 800, 651, 0, 0, 0, 0, 0, 0,
  0, 600, 0, 0, 0, 767, 0, 772, 0, 728, 808, 809, 0, 0, 0, 0, 651, 0, 651, 0, 651, 0, 415, 415, 731, 415, 415, 415, 415,
  415, 415, 415, 415, 415, 415, 754, 415, 415, 415, 0, 415, 817, 754, 415, 415, 415, 683, 651, 0, 522, 522, 829, 522,
  522, 522, 522, 522, 522, 2358, 522, 522, 522, 522, 522, 522, 522, 544, 544, 1238, 544, 544, 544, 544, 544, 0, 0, 0,
  544, 544, 886, 544, 544, 544, 544, 544, 544, 544, 912, 544, 917, 544, 920, 544, 544, 544, 544, 544, 544, 2456, 544,
  544, 0, 0, 0, 0, 0, 0, 0, 2088, 0, 0, 0, 0, 0, 0, 0, 0, 1138, 0, 0, 0, 0, 0, 0, 0, 544, 932, 544, 544, 522, 937, 0, 0,
  0, 544, 941, 522, 522, 829, 522, 946, 863, 522, 522, 0, 544, 544, 886, 544, 954, 920, 544, 544, 53503, 2, 6, 0, 0, 0,
  0, 188849, 188849, 188849, 188849, 188849, 188849, 188849, 188849, 188849, 0, 0, 0, 0, 275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  960, 964, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 615, 0, 0, 415, 415, 0, 0, 0, 1019, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  2094, 0, 0, 1064, 0, 0, 0, 1068, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 677, 415, 415, 415, 415, 415, 415, 1108, 415, 415,
  415, 415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1965, 0, 415, 415, 415, 1157, 415, 415, 415, 1084, 1161, 522, 522, 522, 522,
  522, 522, 522, 0, 0, 91338, 0, 0, 544, 544, 544, 544, 522, 522, 1210, 522, 522, 522, 1213, 522, 522, 522, 522, 522,
  522, 522, 879, 91338, 1333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 1347, 0, 0, 0, 0, 0, 0, 0, 1354, 0,
  0, 0, 0, 0, 0, 0, 617, 0, 0, 620, 0, 0, 0, 0, 0, 415, 1429, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  415, 415, 415, 759, 0, 415, 415, 415, 415, 1444, 415, 415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1116, 0, 415, 415, 415, 415,
  415, 0, 1454, 0, 1456, 0, 0, 1458, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1139, 0, 0, 0, 0, 0, 1143, 0, 0, 0, 1467, 0, 0, 1468, 0,
  0, 1471, 0, 0, 415, 415, 415, 415, 415, 522, 522, 2144, 522, 522, 522, 522, 522, 522, 522, 1546, 1548, 91338, 1551,
  1548, 544, 544, 544, 544, 415, 1477, 415, 415, 415, 1481, 415, 415, 1161, 522, 522, 522, 522, 522, 522, 522, 0, 1548,
  91338, 0, 1548, 544, 544, 544, 544, 522, 522, 1523, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1535, 522, 522,
  522, 522, 522, 2269, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1200, 522, 522, 522, 522, 522, 522, 1539,
  522, 522, 522, 522, 1545, 1548, 91338, 1550, 1548, 544, 544, 544, 544, 522, 522, 0, 0, 0, 544, 544, 522, 522, 522,
  522, 522, 522, 522, 2009, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1983, 522, 522, 522, 522, 522, 522, 1604, 544,
  544, 544, 544, 1608, 544, 544, 544, 544, 1613, 522, 1614, 544, 522, 522, 522, 522, 522, 2270, 522, 522, 522, 522, 522,
  522, 522, 522, 522, 522, 522, 1800, 522, 522, 522, 522, 522, 522, 1618, 522, 522, 522, 544, 544, 544, 544, 1625, 544,
  544, 544, 0, 1629, 0, 0, 1690, 0, 0, 0, 0, 0, 1401, 0, 0, 0, 0, 0, 0, 0, 679, 0, 0, 0, 0, 0, 0, 0, 0, 1657, 0, 0, 0,
  0, 0, 0, 0, 415, 1715, 1716, 415, 415, 415, 415, 415, 415, 415, 415, 1723, 415, 415, 415, 415, 0, 0, 0, 0, 0, 1964, 0,
  0, 0, 0, 0, 0, 977, 0, 415, 415, 415, 415, 1090, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1733, 1734, 0, 0, 1736,
  0, 0, 0, 0, 0, 0, 3088384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 615, 0, 615, 0, 0, 0, 0, 1734, 0, 0, 1744, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 1733, 415, 415, 1755, 415, 415, 415, 415, 415, 415, 415, 415, 522, 522, 522, 522, 1764, 522, 1766, 522,
  522, 522, 1769, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 877, 522, 522, 0, 544, 544, 544, 544, 544,
  1825, 544, 1827, 544, 544, 544, 1830, 544, 544, 544, 544, 544, 522, 522, 544, 544, 0, 0, 0, 0, 0, 0, 0, 341, 364, 0,
  0, 0, 0, 0, 0, 45056, 1874, 522, 522, 522, 522, 544, 544, 1878, 544, 544, 544, 544, 1629, 0, 1631, 0, 0, 0, 0, 651264,
  0, 0, 0, 0, 0, 0, 0, 415, 1474, 415, 651679, 0, 1882, 0, 0, 0, 0, 0, 0, 1888, 0, 0, 0, 0, 0, 0, 0, 690, 0, 0, 0, 0, 0,
  0, 0, 0, 812, 415, 415, 415, 0, 0, 1934, 0, 0, 1937, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 983, 0, 0, 0, 0, 0, 544, 2050, 544,
  544, 544, 544, 544, 544, 544, 544, 544, 2056, 544, 544, 522, 544, 522, 544, 522, 544, 0, 0, 0, 0, 0, 0, 0, 0, 0, 997,
  0, 0, 0, 0, 0, 0, 0, 0, 1062, 0, 0, 0, 2083, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2095, 0, 0, 0, 0, 770048, 0, 0, 0, 0,
  415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1957, 415, 2136, 0, 415, 415, 2139, 415, 415, 522,
  522, 522, 522, 522, 522, 522, 522, 522, 522, 1514, 522, 522, 522, 522, 522, 522, 522, 522, 2281, 522, 522, 522, 522,
  544, 544, 544, 544, 544, 544, 544, 544, 522, 522, 544, 53503, 53503, 2292, 544, 544, 544, 544, 544, 544, 544, 544,
  544, 544, 544, 544, 544, 2304, 544, 544, 544, 544, 544, 544, 2515, 2516, 0, 0, 0, 0, 0, 0, 2523, 522, 0, 0, 1814, 0,
  0, 0, 0, 0, 1820, 0, 0, 0, 544, 544, 544, 2172, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2044, 544, 544,
  544, 544, 2463, 0, 0, 2466, 0, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 544, 2288, 544, 544, 544, 544, 544,
  544, 2493, 0, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 544, 544, 544, 544, 2291, 544, 544, 544, 49152, 0, 0,
  384, 0, 40960, 0, 0, 384, 0, 0, 0, 0, 0, 0, 371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45056, 371, 371, 371, 371, 371, 371,
  371, 371, 371, 371, 371, 371, 371, 371, 371, 371, 510, 371, 522, 522, 522, 522, 522, 544, 522, 522, 522, 522, 522,
  522, 1196, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2011, 522, 522, 522, 522, 522, 415, 415, 415, 1442, 415,
  415, 415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1326, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 1959, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 710, 0, 0, 713, 0, 522, 522, 1978, 1979, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1202, 522,
  522, 522, 2022, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 929, 0, 0, 522, 522,
  522, 522, 2499, 522, 2501, 522, 2503, 522, 544, 544, 544, 544, 522, 522, 0, 0, 0, 544, 544, 522, 522, 522, 846, 522,
  2509, 544, 2511, 544, 2513, 544, 0, 0, 0, 0, 0, 0, 0, 0, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2476, 544,
  49152, 0, 288, 385, 386, 40960, 386, 393, 385, 386, 393, 283, 393, 0, 393, 410, 417, 417, 417, 417, 417, 417, 417,
  438, 438, 438, 453, 457, 466, 457, 457, 457, 457, 457, 482, 457, 482, 482, 497, 497, 498, 498, 498, 498, 498, 511,
  498, 524, 524, 524, 524, 524, 547, 524, 524, 524, 524, 524, 547, 547, 547, 547, 547, 547, 547, 547, 574, 574, 583,
  53503, 53503, 482, 498, 498, 498, 498, 482, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 864, 522, 522, 0, 544,
  544, 544, 544, 544, 921, 544, 544, 53503, 2, 6, 0, 0, 0, 0, 937984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1942, 0, 0, 0, 0,
  0, 0, 976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53503, 53503, 0, 0, 1082, 0, 1082, 0, 0, 0, 415, 1086, 415, 415,
  415, 415, 415, 415, 0, 0, 0, 0, 0, 1737, 0, 0, 0, 0, 415, 415, 1096, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  415, 415, 415, 522, 522, 522, 522, 522, 415, 415, 415, 415, 415, 415, 415, 0, 1161, 1162, 1164, 522, 522, 522, 522,
  1172, 522, 1177, 522, 522, 522, 522, 522, 1183, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1786, 522, 522, 522, 522,
  522, 522, 1161, 882, 1229, 1231, 544, 544, 544, 544, 1239, 544, 1244, 544, 544, 544, 544, 544, 522, 522, 544, 544, 0,
  0, 0, 0, 2387, 0, 0, 1250, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1263, 1362, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 602, 415, 415, 1430, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  415, 415, 522, 522, 1763, 522, 522, 522, 1505, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  0, 0, 1521, 1522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 544, 544, 544, 544, 544,
  1574, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1601, 1602, 544, 544, 544, 544, 1590, 1591,
  544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2057, 522, 544, 1688, 0, 0, 0, 0, 0, 0, 0, 1401, 0,
  0, 0, 0, 0, 0, 0, 707, 0, 0, 0, 0, 0, 0, 0, 0, 301, 0, 0, 0, 0, 0, 0, 0, 1861, 544, 544, 544, 544, 544, 544, 544, 544,
  544, 544, 544, 522, 544, 522, 522, 522, 522, 522, 2284, 522, 522, 544, 544, 2289, 544, 544, 544, 544, 544, 544, 544,
  1594, 544, 544, 544, 544, 544, 544, 544, 544, 1842, 1843, 544, 1845, 544, 544, 544, 544, 0, 0, 0, 1935, 1936, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 1060, 0, 0, 0, 0, 522, 2004, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  522, 544, 544, 415, 2125, 415, 415, 415, 415, 0, 0, 0, 2130, 0, 0, 0, 2134, 0, 0, 0, 0, 415, 415, 415, 522, 522, 522,
  522, 2349, 2350, 2351, 522, 522, 522, 522, 522, 2410, 522, 522, 522, 522, 522, 544, 544, 544, 544, 544, 544, 544, 0,
  0, 0, 0, 0, 2520, 2521, 0, 522, 522, 0, 2137, 415, 415, 415, 2140, 415, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  522, 1787, 522, 522, 522, 522, 522, 544, 544, 544, 544, 2183, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  544, 544, 807434, 807456, 0, 0, 0, 2205, 0, 0, 0, 0, 0, 0, 2209, 0, 0, 0, 0, 0, 0, 723, 0, 725, 0, 0, 0, 0, 0, 415,
  730, 0, 0, 2255, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 522, 522, 522, 0, 883, 544, 544, 953, 544, 544, 544, 544,
  53503, 2, 6, 0, 544, 544, 2380, 544, 544, 522, 522, 544, 544, 0, 0, 0, 0, 0, 0, 0, 725, 0, 0, 0, 0, 770, 0, 0, 0, 0,
  0, 522, 522, 522, 2498, 522, 522, 522, 522, 522, 522, 544, 544, 544, 2508, 0, 522, 522, 522, 2589, 544, 544, 544,
  2591, 0, 0, 522, 522, 544, 544, 522, 0, 2015, 0, 0, 0, 0, 0, 2017, 0, 0, 0, 0, 544, 544, 544, 544, 544, 2174, 544,
  2176, 544, 544, 544, 2179, 544, 544, 49152, 0, 0, 335, 0, 40960, 0, 0, 335, 0, 0, 395, 0, 400, 408, 411, 418, 418,
  418, 418, 418, 418, 418, 439, 439, 439, 439, 458, 467, 458, 458, 458, 458, 458, 483, 458, 483, 483, 483, 483, 483,
  483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 483, 418, 483, 525, 525, 525, 525, 525, 548, 525,
  525, 525, 525, 525, 548, 548, 548, 548, 548, 548, 548, 548, 525, 525, 548, 53503, 53503, 415, 415, 415, 415, 415, 744,
  415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 371, 384, 371, 371, 371, 846, 522, 522, 522, 522, 522, 522,
  522, 522, 522, 522, 522, 522, 522, 0, 544, 544, 544, 544, 544, 544, 544, 544, 53503, 2, 6, 0, 0, 0, 990, 991, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 1001, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2420736, 2162688, 2162688, 2482176, 2162688,
  2162688, 2162688, 2584576, 2162688, 2162688, 2682880, 2740224, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  2162688, 2162688, 2162688, 2162688, 3121152, 2420736, 2162688, 1095, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  415, 1103, 415, 415, 1105, 415, 415, 415, 415, 415, 415, 415, 1112, 0, 0, 0, 0, 0, 0, 0, 0, 1056, 0, 0, 0, 0, 0, 0, 0,
  1131, 0, 0, 0, 991, 0, 0, 0, 0, 0, 0, 0, 0, 1142, 990, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2421561, 2163513,
  2163513, 2483001, 2163513, 2163513, 2163513, 2585401, 2163513, 2163513, 2163513, 2163513, 2163513, 3158841, 2163513,
  0, 0, 0, 0, 2121728, 0, 0, 0, 0, 0, 360, 0, 0, 0, 0, 0, 0, 0, 0, 297, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1112, 0, 0, 0, 0,
  0, 0, 0, 415, 415, 415, 415, 1153, 415, 415, 415, 415, 1158, 415, 415, 0, 1161, 1163, 522, 522, 522, 522, 522, 522,
  522, 1547, 1548, 91338, 1552, 1548, 544, 544, 544, 544, 1161, 882, 1230, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  544, 1248, 544, 544, 544, 544, 544, 544, 1271, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1259, 544, 544, 544, 544,
  544, 544, 544, 1264, 544, 1266, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 522, 544, 522, 522, 544,
  544, 1286, 544, 544, 544, 544, 522, 522, 0, 0, 544, 544, 522, 522, 522, 0, 884, 544, 544, 907, 544, 544, 544, 544,
  53503, 2, 6, 0, 0, 0, 1069056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 1975, 415, 415, 415, 415, 415, 415,
  415, 415, 1483, 1161, 522, 522, 522, 522, 522, 522, 522, 0, 1812, 0, 0, 1548, 0, 1818, 0, 0, 1765, 522, 522, 522, 522,
  522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1207, 522, 1805, 522, 1807, 522, 522, 522, 0, 0, 0, 0,
  1548, 0, 0, 0, 0, 0, 626, 781, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2719744, 0, 0, 0, 0, 0, 0, 0, 1948, 415, 415, 415, 415, 415,
  415, 415, 415, 415, 415, 415, 415, 415, 415, 1104, 415, 522, 1977, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  522, 522, 522, 522, 879, 0, 2150, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2159, 522, 0, 2015,
  0, 0, 0, 0, 0, 2017, 0, 0, 0, 0, 544, 544, 2021, 2017, 0, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2177, 544, 544,
  544, 544, 522, 522, 0, 0, 0, 544, 544, 522, 522, 522, 848, 522, 2325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  625, 544, 544, 544, 2381, 544, 522, 522, 544, 544, 0, 0, 0, 0, 0, 0, 0, 981, 0, 0, 0, 0, 0, 986, 0, 988, 544, 2479,
  544, 544, 544, 544, 544, 544, 544, 0, 0, 0, 0, 0, 0, 0, 0, 522, 2524, 0, 0, 522, 522, 522, 522, 522, 2500, 522, 522,
  522, 522, 544, 544, 544, 544, 0, 0, 0, 0, 0, 0, 0, 0, 522, 522, 522, 2548, 522, 2549, 544, 2510, 544, 544, 544, 544,
  0, 0, 0, 0, 0, 0, 0, 0, 522, 522, 522, 522, 522, 522, 293, 294, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1101824, 381, 295, 295, 333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105920, 0, 49152, 0, 0, 0, 0, 40960, 0, 0, 0,
  295, 294, 0, 0, 401, 294, 412, 419, 419, 419, 419, 419, 419, 419, 440, 450, 440, 440, 459, 440, 459, 459, 459, 474,
  476, 459, 459, 474, 484, 459, 484, 484, 484, 484, 484, 484, 484, 484, 484, 419, 484, 526, 526, 526, 526, 526, 549,
  526, 526, 526, 526, 526, 549, 549, 549, 549, 549, 549, 549, 549, 526, 526, 549, 53503, 53503, 501, 484, 484, 484, 484,
  501, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 0, 611, 612, 0, 0, 0, 0, 0, 0, 0, 0, 621, 0, 0, 0, 0, 0, 631,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1042, 0, 0, 0, 0, 0, 0, 0, 674, 0, 0, 0, 678, 0, 0, 0, 0, 0, 0, 0, 0, 688, 0, 0, 691, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2109440, 0, 415, 733, 415, 415, 741, 415, 747, 415, 750, 415, 753, 415, 415,
  415, 415, 0, 0, 0, 0, 0, 0, 0, 0, 1007616, 1007616, 0, 0, 0, 0, 774, 0, 0, 0, 0, 0, 0, 727, 0, 766, 0, 784, 0, 0, 0,
  0, 415, 415, 415, 522, 522, 2348, 522, 522, 522, 522, 522, 522, 522, 1785, 522, 522, 522, 522, 522, 522, 522, 522,
  522, 1996, 522, 522, 522, 522, 522, 522, 0, 0, 654, 0, 0, 0, 774, 792, 0, 0, 0, 0, 0, 792, 792, 795, 0, 0, 727, 0, 0,
  0, 0, 0, 801, 0, 0, 0, 0, 0, 0, 0, 995, 0, 0, 0, 0, 0, 0, 0, 0, 793, 0, 0, 0, 0, 0, 0, 0, 415, 415, 818, 415, 415,
  415, 784, 801, 0, 522, 522, 522, 832, 522, 522, 843, 522, 852, 522, 856, 522, 522, 862, 865, 869, 522, 522, 522, 522,
  522, 0, 544, 544, 544, 903, 544, 544, 544, 544, 53503, 2, 6, 0, 544, 544, 544, 889, 544, 544, 900, 544, 909, 544, 913,
  544, 544, 919, 922, 926, 947, 869, 522, 0, 544, 951, 544, 544, 544, 955, 926, 544, 53503, 2, 6, 0, 0, 0, 0, 2179718,
  2179718, 2179718, 0, 0, 0, 0, 0, 0, 0, 0, 0, 764, 0, 764, 0, 0, 0, 0, 1003, 0, 0, 0, 0, 325, 325, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 1371, 0, 0, 0, 0, 0, 0, 0, 0, 1018, 0, 0, 0, 0, 0, 0, 0, 0, 1027, 0, 0, 0, 0, 0, 693, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 2719744, 2158592, 2158592, 2158592, 2158592, 2158592, 0, 1065, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135168,
  415, 415, 415, 415, 1109, 415, 1111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1386, 0, 0, 0, 0, 0, 0, 415, 415, 415, 1109, 415, 415,
  415, 0, 1161, 522, 522, 522, 522, 522, 522, 522, 0, 1813, 0, 0, 1548, 0, 1819, 0, 0, 522, 522, 1178, 522, 522, 522,
  1182, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1799, 522, 522, 522, 1802, 522, 522, 522, 1193, 522, 522, 522,
  522, 522, 522, 522, 522, 522, 1201, 522, 522, 522, 0, 950, 544, 544, 904, 544, 544, 544, 544, 53503, 2, 6, 0, 1161,
  882, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1245, 544, 544, 544, 1249, 544, 544, 544, 544, 1288, 544, 544, 522,
  522, 0, 0, 544, 544, 522, 522, 522, 522, 522, 1526, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1501, 522,
  522, 522, 522, 0, 0, 1335, 0, 0, 0, 0, 0, 1339, 0, 1341, 1342, 0, 1344, 1345, 0, 0, 0, 0, 2179719, 151552, 2179719, 0,
  0, 151552, 0, 0, 0, 0, 0, 0, 648, 0, 648, 0, 0, 0, 415, 415, 415, 415, 415, 522, 522, 522, 2145, 522, 522, 522, 522,
  522, 0, 1348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188849, 0, 0, 0, 1365, 0, 0, 0, 0, 0, 0, 0, 1373, 0, 1375,
  0, 0, 0, 0, 415, 415, 415, 522, 2347, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2413, 522, 544, 544, 544, 544, 544,
  0, 0, 0, 1380, 0, 1382, 0, 0, 0, 0, 0, 0, 0, 0, 1391, 0, 0, 0, 0, 2441216, 0, 0, 0, 2158592, 2441216, 2158592,
  2158592, 2158592, 2158592, 2158592, 2158592, 0, 0, 0, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  2162688, 2547712, 2162688, 2162688, 2162688, 2162688, 2633728, 415, 415, 415, 415, 1431, 415, 415, 1433, 415, 415,
  415, 415, 1437, 415, 415, 415, 415, 415, 0, 0, 806912, 807327, 522, 522, 522, 522, 522, 522, 522, 1216, 522, 522, 522,
  522, 522, 522, 879, 91338, 1439, 415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 1449, 0, 0, 1452, 0, 0, 0, 0, 2613248, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2093, 0, 0, 0, 415, 415, 415, 1479, 415, 415, 415, 415, 1161, 1484, 522, 1485, 522,
  1487, 522, 522, 522, 522, 522, 311840, 1877, 544, 544, 544, 544, 544, 0, 0, 0, 0, 0, 1037, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 1059, 0, 1060, 0, 0, 0, 1556, 544, 544, 544, 544, 544, 544, 544, 1565, 544, 544, 544, 544, 1569, 544, 544, 544,
  544, 544, 544, 1272, 1273, 544, 544, 544, 544, 544, 544, 544, 544, 1579, 544, 544, 544, 544, 544, 544, 544, 544, 1572,
  544, 544, 544, 544, 544, 544, 1578, 1580, 544, 544, 544, 544, 1585, 1586, 544, 1588, 1589, 544, 544, 544, 544, 544,
  544, 1596, 544, 1598, 544, 544, 544, 544, 522, 522, 0, 0, 0, 544, 544, 522, 943, 522, 522, 522, 544, 544, 1605, 544,
  544, 544, 544, 544, 544, 1612, 522, 522, 544, 544, 1615, 522, 0, 2015, 0, 0, 0, 0, 0, 2017, 0, 0, 0, 0, 544, 2020,
  544, 544, 544, 544, 544, 899, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2373, 544, 544, 544, 544, 2378, 522,
  1511, 1520, 522, 1620, 522, 1622, 544, 544, 1580, 1589, 544, 1627, 544, 0, 1629, 1638, 1639, 0, 0, 0, 1643, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 1327, 0, 0, 0, 0, 0, 892928, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 688, 0, 0, 0, 1675, 0,
  1676, 0, 0, 0, 1680, 0, 0, 0, 0, 0, 0, 0, 1039, 0, 0, 0, 0, 0, 0, 0, 0, 1401, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415,
  415, 1719, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1435, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  1732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1387, 0, 0, 0, 0, 0, 1639, 0, 1743, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1752, 0, 0, 0, 0,
  0, 1665, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1074, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 1758, 415, 415, 415, 415, 415,
  522, 522, 522, 522, 522, 522, 1215, 522, 522, 522, 522, 522, 522, 522, 879, 91338, 522, 522, 1767, 522, 522, 522, 522,
  522, 1772, 522, 1774, 522, 522, 522, 522, 522, 522, 1497, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1532,
  1533, 522, 522, 522, 522, 1791, 1792, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 879,
  91338, 522, 522, 1876, 522, 522, 544, 544, 544, 544, 1880, 544, 544, 1629, 0, 1631, 0, 0, 0, 0, 2658304, 0, 2785280,
  0, 0, 0, 0, 0, 0, 0, 0, 2379776, 0, 0, 0, 1910, 0, 0, 0, 0, 0, 1915, 0, 0, 1917, 1918, 0, 0, 0, 0, 415, 415, 415,
  2346, 522, 522, 522, 522, 522, 522, 2352, 522, 520192, 1917, 0, 0, 0, 0, 0, 0, 827392, 364959, 415, 415, 415, 415,
  415, 1008031, 2003, 522, 522, 522, 522, 2008, 522, 522, 522, 522, 522, 522, 2012, 1008138, 522, 522, 522, 522, 859,
  861, 522, 522, 871, 522, 522, 522, 522, 522, 0, 544, 544, 544, 544, 544, 544, 655904, 544, 2040, 544, 2042, 544, 544,
  544, 2046, 544, 544, 544, 544, 544, 544, 1290, 522, 522, 0, 0, 544, 544, 522, 522, 1171, 544, 544, 2051, 544, 544,
  544, 544, 544, 544, 2055, 1008160, 544, 544, 544, 522, 544, 2598, 2599, 522, 544, 0, 0, 0, 0, 0, 0, 0, 0, 0, 696320,
  1015808, 0, 0, 0, 0, 0, 365066, 522, 522, 522, 365088, 544, 544, 544, 0, 0, 0, 0, 0, 0, 0, 0, 2546, 522, 522, 522,
  522, 522, 0, 0, 2099, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2109440, 1046, 415, 415, 2126, 415, 415, 415, 0, 0, 0,
  0, 2131, 0, 2133, 0, 0, 0, 0, 0, 1692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1019904, 0, 0, 0, 0, 0, 522, 522, 522, 2162, 522,
  522, 522, 522, 522, 522, 522, 522, 522, 522, 2015, 0, 0, 0, 0, 2846720, 0, 0, 0, 0, 0, 0, 2805760, 0, 3178496,
  2560000, 2560000, 2017, 0, 544, 544, 544, 544, 544, 544, 2175, 544, 544, 544, 544, 544, 544, 544, 522, 522, 0, 0, 544,
  544, 522, 522, 1297, 0, 2216, 0, 0, 0, 0, 0, 0, 0, 0, 2223, 2224, 0, 2225, 0, 905216, 0, 0, 0, 2228, 0, 2230, 0, 0, 0,
  667648, 0, 0, 0, 0, 0, 0, 801, 774, 0, 774, 0, 0, 415, 813, 415, 415, 0, 2254, 0, 0, 0, 479232, 0, 0, 2260, 415, 415,
  2262, 415, 522, 522, 522, 522, 522, 1542, 522, 0, 1548, 91338, 0, 1548, 544, 544, 544, 544, 522, 522, 0, 0, 184320,
  544, 544, 522, 522, 522, 522, 522, 522, 522, 2359, 522, 522, 522, 522, 522, 522, 544, 544, 544, 544, 0, 0, 0, 0,
  413696, 2068, 0, 0, 2267, 522, 522, 522, 522, 522, 522, 522, 2272, 522, 522, 2275, 522, 522, 522, 522, 522, 522, 2530,
  522, 544, 544, 544, 544, 544, 544, 544, 544, 1855, 544, 544, 544, 544, 544, 544, 544, 522, 522, 2280, 2282, 522, 522,
  2285, 2286, 544, 544, 544, 2290, 544, 544, 544, 544, 522, 522, 0, 0, 0, 544, 544, 942, 522, 522, 847, 522, 544, 544,
  544, 2295, 544, 544, 2298, 544, 544, 544, 544, 544, 544, 2303, 2305, 544, 544, 544, 544, 544, 1269, 544, 544, 544,
  544, 544, 544, 544, 544, 544, 544, 1276, 544, 544, 544, 544, 544, 544, 2308, 2309, 522, 522, 2311, 544, 544, 2313, 0,
  0, 0, 0, 2317, 0, 0, 0, 0, 415, 415, 975263, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 975370, 522, 522, 522,
  544, 544, 2319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 901120, 0, 0, 0, 0, 615, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415,
  1951, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1434, 415, 415, 415, 415, 415, 415, 0, 2333, 0, 0, 0, 415,
  415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2366, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  2374, 544, 544, 544, 544, 522, 522, 0, 0, 687, 544, 544, 522, 522, 522, 522, 522, 522, 522, 2411, 522, 522, 522, 544,
  544, 544, 544, 2415, 0, 522, 522, 522, 522, 2441, 522, 522, 522, 522, 522, 522, 522, 544, 544, 544, 544, 544, 544,
  544, 544, 0, 1311, 0, 544, 2451, 544, 544, 544, 544, 544, 544, 544, 0, 0, 0, 0, 0, 0, 2462, 0, 0, 522, 522, 2497, 522,
  522, 522, 522, 522, 522, 522, 544, 544, 2507, 544, 544, 544, 544, 544, 1289, 544, 522, 522, 0, 0, 544, 544, 1295, 522,
  522, 522, 544, 544, 544, 544, 544, 544, 544, 544, 544, 0, 2558, 0, 0, 0, 0, 720, 0, 0, 0, 0, 726, 0, 0, 651, 0, 415,
  415, 1950, 415, 415, 415, 415, 1953, 415, 415, 415, 415, 415, 415, 415, 0, 1161, 522, 522, 522, 522, 522, 1171, 522,
  522, 2525, 522, 2527, 522, 522, 522, 522, 2532, 544, 544, 2534, 544, 2536, 544, 544, 544, 544, 544, 544, 1576, 544,
  544, 544, 544, 544, 544, 544, 544, 544, 1869, 544, 544, 522, 544, 522, 522, 0, 522, 2563, 522, 522, 522, 2567, 544,
  2569, 544, 544, 544, 2573, 0, 0, 0, 0, 0, 1704, 0, 1706, 0, 0, 0, 0, 0, 1712, 0, 1714, 0, 0, 325, 0, 0, 0, 0, 0, 0,
  329, 0, 0, 0, 0, 0, 0, 376, 0, 329, 0, 376, 45056, 49152, 0, 329, 0, 387, 40960, 387, 387, 296, 387, 387, 0, 387, 0,
  387, 387, 387, 420, 387, 527, 527, 527, 527, 527, 550, 527, 527, 527, 527, 527, 550, 550, 550, 550, 550, 550, 550,
  550, 527, 527, 550, 53503, 53503, 420, 420, 420, 420, 420, 420, 420, 0, 0, 0, 329, 387, 468, 470, 470, 470, 475, 470,
  470, 470, 475, 387, 470, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 0, 690, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217088, 690, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 690, 0, 0, 0, 0, 0, 415, 415,
  847, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 544, 544, 544, 905, 544, 544, 544, 544,
  53503, 2, 6, 0, 0, 0, 1050, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290, 291, 0, 1161, 882, 544, 544, 544, 544, 544,
  544, 1240, 544, 544, 544, 544, 544, 544, 544, 522, 522, 0, 0, 544, 544, 522, 1296, 522, 0, 0, 1662, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 351, 0, 0, 415, 415, 415, 1756, 415, 415, 415, 415, 415, 415, 415, 522, 522, 522, 522, 522, 522,
  1527, 522, 1529, 522, 522, 522, 522, 522, 522, 1536, 2049, 544, 544, 544, 544, 2053, 544, 544, 544, 544, 544, 544,
  544, 544, 522, 544, 544, 544, 544, 544, 1562, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2425, 544, 522,
  544, 0, 0, 2562, 522, 522, 522, 522, 522, 2568, 544, 544, 544, 544, 544, 0, 0, 0, 0, 0, 1885, 0, 1887, 0, 0, 1890, 0,
  0, 0, 0, 0, 297, 342, 344, 0, 0, 0, 0, 0, 0, 0, 0, 1401, 0, 0, 0, 0, 0, 1697, 0, 0, 2588, 522, 522, 522, 2590, 544,
  544, 544, 0, 0, 522, 522, 544, 544, 522, 522, 522, 1211, 522, 522, 522, 522, 1217, 522, 522, 522, 522, 522, 879,
  91338, 49152, 0, 0, 0, 388, 40960, 388, 388, 0, 388, 388, 0, 388, 402, 388, 388, 421, 421, 421, 421, 421, 421, 421,
  441, 441, 441, 441, 460, 441, 460, 460, 460, 421, 460, 528, 528, 528, 528, 528, 551, 528, 528, 528, 528, 528, 551,
  551, 551, 551, 551, 551, 551, 551, 528, 528, 551, 53503, 53503, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
  460, 460, 460, 460, 460, 0, 0, 0, 961, 965, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1349, 415, 415, 415, 415, 1465, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 522, 522, 522, 415, 415, 415, 415, 1757, 415, 415, 415, 415, 415, 415,
  522, 522, 522, 522, 522, 522, 1543, 0, 1548, 91338, 0, 1548, 1553, 544, 1554, 544, 522, 1875, 522, 522, 522, 544, 544,
  544, 1879, 544, 544, 544, 0, 0, 0, 0, 0, 2543, 2544, 0, 522, 522, 522, 522, 522, 522, 544, 544, 544, 544, 544, 544, 0,
  0, 0, 2097, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2106, 0, 0, 0, 0, 626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 639, 0, 0,
  0, 0, 0, 2218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 45056, 0, 2227, 0, 0, 0, 0, 2231, 0, 0, 0, 0,
  0, 0, 0, 2238, 0, 0, 0, 0, 3133440, 0, 2727936, 0, 0, 0, 0, 0, 2891776, 0, 0, 0, 0, 0, 1351, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 2119, 415, 415, 415, 415, 2124, 0, 0, 0, 2335, 0, 2337, 415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 0, 0, 0, 0,
  1064960, 0, 2354, 522, 522, 522, 522, 2357, 522, 522, 522, 522, 522, 522, 522, 522, 544, 2365, 415, 415, 2400, 415,
  415, 0, 0, 0, 415, 522, 522, 522, 522, 522, 2404, 522, 522, 522, 1301, 522, 544, 544, 1236, 544, 544, 544, 1309, 544,
  0, 0, 1313, 2416, 544, 544, 544, 544, 544, 544, 2422, 544, 544, 544, 544, 544, 522, 544, 0, 0, 0, 277, 277, 277, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 292, 333, 333, 362, 0, 0, 0, 522, 522, 2579, 2580, 522, 522, 544, 544, 2583, 2584, 544, 544,
  0, 0, 0, 0, 0, 1898, 0, 0, 0, 0, 1902, 0, 0, 0, 0, 0, 0, 3088384, 0, 57344, 0, 0, 0, 0, 0, 0, 0, 415, 2247, 415, 415,
  415, 2250, 415, 2252, 2253, 706, 0, 0, 0, 0, 0, 0, 706, 0, 0, 0, 0, 0, 706, 706, 0, 0, 0, 280, 281, 282, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 998, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 759, 0, 0, 0, 522, 522, 830, 522, 522, 522, 522, 522,
  1195, 522, 522, 1197, 522, 1199, 522, 522, 522, 522, 522, 522, 1214, 522, 522, 522, 522, 1221, 522, 522, 879, 91338,
  544, 544, 887, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 522, 544, 2426, 544, 544, 933, 544,
  522, 522, 0, 0, 0, 544, 544, 522, 522, 830, 522, 522, 522, 522, 1181, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  522, 522, 522, 2276, 2277, 522, 522, 522, 522, 876, 0, 544, 544, 887, 544, 544, 544, 544, 933, 53503, 2, 6, 0, 0, 0,
  296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2212, 0, 0, 415, 415, 415, 415, 415, 415, 1482, 415, 1161, 522, 522, 522,
  522, 522, 522, 522, 522, 872, 522, 522, 522, 522, 522, 0, 544, 544, 544, 544, 544, 2052, 544, 544, 544, 544, 544, 544,
  544, 544, 544, 522, 544, 544, 544, 544, 544, 1575, 544, 544, 544, 544, 544, 544, 544, 1584, 544, 544, 544, 544, 544,
  544, 2194, 544, 544, 522, 522, 522, 544, 544, 544, 0, 2541, 0, 0, 0, 0, 0, 0, 522, 2547, 522, 522, 522, 522, 522,
  1509, 1511, 522, 522, 522, 522, 1516, 1517, 522, 1519, 1520, 0, 802816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  286720, 0, 0, 2344, 0, 2345, 415, 415, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1984, 522, 1986, 522, 522,
  522, 544, 544, 544, 544, 544, 2382, 522, 2383, 544, 0, 0, 0, 0, 0, 0, 0, 1055, 0, 0, 0, 0, 0, 0, 0, 0, 1071, 0, 0, 0,
  1075, 0, 0, 0, 0, 49152, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 403, 0, 298, 422, 422, 422, 422, 422, 422, 422, 442,
  442, 442, 442, 461, 442, 461, 461, 461, 461, 461, 485, 461, 495, 495, 495, 495, 495, 495, 495, 495, 495, 512, 495,
  529, 529, 529, 529, 529, 552, 529, 529, 529, 529, 529, 552, 552, 552, 552, 552, 552, 552, 552, 575, 575, 584, 53503,
  53503, 502, 495, 495, 495, 495, 502, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 642, 643, 644, 0, 325, 325,
  325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1708, 0, 1710, 0, 0, 1713, 415, 0, 657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  581632, 415, 734, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 0, 522, 522, 522, 522, 522, 522,
  522, 522, 522, 522, 522, 522, 544, 544, 544, 544, 544, 787, 0, 763, 0, 0, 0, 0, 787, 0, 0, 0, 0, 0, 787, 787, 0, 0, 0,
  318, 0, 0, 0, 0, 0, 0, 0, 0, 318, 0, 0, 45056, 0, 0, 763, 0, 0, 0, 0, 0, 0, 802, 0, 644, 0, 0, 0, 802, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 415, 415, 415, 415, 522, 522, 2266, 415, 415, 415, 819, 415, 822, 0, 0, 802, 522, 522, 522, 833, 522, 522,
  522, 522, 522, 1621, 544, 544, 544, 544, 544, 544, 544, 1628, 0, 1629, 544, 544, 544, 890, 544, 544, 544, 544, 544,
  544, 544, 544, 544, 544, 544, 544, 544, 1583, 544, 544, 544, 544, 934, 544, 522, 522, 0, 0, 0, 544, 544, 522, 522,
  522, 522, 522, 522, 1770, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1773, 522, 522, 522, 522, 522, 522, 522, 948,
  877, 0, 544, 544, 544, 544, 544, 544, 956, 934, 53503, 2, 6, 0, 0, 0, 338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  2237, 0, 0, 0, 0, 0, 1035, 0, 0, 0, 0, 0, 0, 0, 1043, 0, 0, 0, 0, 0, 762, 0, 0, 0, 0, 0, 773, 0, 0, 638, 0, 415, 415,
  415, 415, 415, 415, 415, 1099, 415, 415, 415, 415, 415, 415, 415, 415, 1101, 415, 1102, 415, 415, 415, 415, 415, 415,
  415, 415, 415, 415, 1110, 415, 0, 0, 0, 0, 0, 0, 0, 0, 1117, 415, 415, 415, 415, 415, 415, 415, 0, 1161, 522, 522,
  522, 522, 1167, 522, 522, 522, 522, 1212, 522, 522, 522, 522, 522, 522, 522, 522, 522, 879, 91338, 1161, 882, 544,
  544, 544, 544, 1234, 544, 544, 544, 544, 544, 544, 544, 544, 544, 0, 0, 0, 2489, 0, 0, 2492, 544, 1284, 544, 544, 544,
  544, 544, 522, 522, 0, 0, 544, 544, 522, 522, 522, 522, 522, 1783, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  522, 1187, 522, 522, 522, 522, 0, 1363, 1364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1374, 0, 0, 0, 0, 0, 1925, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 709, 0, 0, 0, 0, 715, 0, 0, 0, 1393, 0, 0, 0, 1395, 0, 0, 0, 0, 0, 0, 0, 0, 1406, 0, 0, 0, 0, 0, 0, 0,
  1412, 1413, 0, 0, 1416, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 522, 2143, 522, 522, 2146, 522, 522, 522, 522,
  415, 415, 1441, 415, 415, 415, 415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1929, 0, 0, 0, 0, 0, 0, 1476, 415, 415, 415, 415, 415,
  415, 415, 1161, 522, 522, 522, 522, 522, 522, 522, 522, 1498, 522, 522, 522, 522, 522, 522, 522, 522, 1513, 522, 522,
  522, 522, 522, 522, 522, 522, 1982, 522, 522, 522, 522, 522, 522, 522, 522, 2412, 522, 522, 544, 544, 544, 544, 544,
  0, 1689, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073152, 544, 544, 1824, 544, 544, 544, 544, 544, 544, 544, 544,
  544, 544, 544, 544, 544, 544, 1859, 544, 0, 0, 1895, 0, 1897, 0, 0, 1899, 0, 1901, 0, 0, 1904, 0, 0, 0, 0, 0, 1968, 0,
  0, 0, 415, 1971, 415, 415, 415, 415, 415, 0, 0, 0, 415, 522, 522, 522, 522, 522, 522, 522, 0, 0, 0, 1815, 1548, 0, 0,
  0, 1821, 1908, 0, 0, 0, 0, 1911, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1407, 0, 0, 0, 0, 0, 0, 0, 1922, 0, 0, 0, 0, 0, 0, 0,
  0, 1930, 0, 0, 0, 0, 0, 775, 0, 0, 0, 0, 0, 703, 0, 0, 785, 0, 0, 1933, 0, 0, 0, 0, 0, 0, 1939, 1940, 0, 0, 1943, 0,
  0, 0, 0, 0, 2086, 0, 0, 0, 0, 2091, 0, 0, 0, 0, 0, 325, 325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318, 319, 0, 0, 0, 0, 0, 522,
  522, 1991, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1188, 522, 522, 522, 2058, 522, 522, 544,
  2061, 544, 544, 0, 0, 2066, 0, 0, 0, 0, 0, 274, 2441216, 2449408, 0, 0, 2469888, 0, 0, 0, 0, 0, 0, 466944, 0, 2394,
  2395, 0, 0, 0, 0, 0, 0, 1368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1644, 0, 0, 0, 0, 0, 0, 0,
  0, 1679, 0, 0, 0, 0, 0, 0, 0, 0, 1396, 0, 0, 1399, 0, 0, 1401, 0, 0, 0, 2073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  363, 0, 0, 0, 2082, 0, 0, 0, 0, 0, 0, 2089, 2090, 0, 0, 0, 0, 0, 0, 994, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1422, 0, 0, 415,
  1424, 1425, 415, 415, 415, 415, 415, 2127, 415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1462, 872448, 0, 0, 0, 0, 2160, 522,
  522, 522, 522, 2163, 522, 522, 522, 522, 2166, 522, 522, 522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 544, 544, 544, 544,
  544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1860, 0, 0, 544, 2170, 544, 544, 2173, 544, 544, 544, 544, 544,
  544, 544, 544, 544, 522, 522, 2198, 544, 544, 2201, 0, 2181, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2187,
  544, 544, 544, 544, 544, 544, 544, 1828, 544, 544, 544, 544, 544, 1833, 544, 1835, 2190, 544, 544, 544, 544, 2193,
  544, 544, 544, 522, 522, 522, 544, 544, 544, 2202, 2240, 0, 0, 0, 0, 0, 2245, 415, 415, 415, 415, 2249, 415, 415, 415,
  0, 0, 0, 339, 341, 0, 0, 0, 341, 0, 0, 0, 0, 0, 0, 0, 1121, 0, 0, 0, 0, 0, 0, 0, 0, 967, 0, 0, 969, 0, 0, 0, 0, 2279,
  522, 522, 522, 522, 522, 522, 522, 544, 544, 544, 544, 544, 544, 544, 544, 0, 1629, 2293, 544, 544, 544, 544, 544,
  544, 544, 544, 544, 544, 2302, 544, 544, 544, 544, 544, 544, 544, 1854, 544, 544, 544, 1858, 544, 544, 544, 544, 544,
  544, 544, 2027, 544, 2029, 544, 544, 544, 544, 544, 544, 0, 0, 2517, 2518, 0, 0, 0, 0, 522, 522, 0, 0, 2334, 0, 0,
  415, 415, 415, 415, 415, 415, 415, 0, 0, 0, 0, 0, 1116, 0, 0, 0, 2437, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  522, 522, 522, 544, 544, 544, 544, 544, 544, 544, 544, 0, 1312, 0, 544, 544, 544, 2481, 544, 2483, 2484, 2485, 544, 0,
  0, 0, 0, 0, 0, 0, 1084, 415, 415, 415, 415, 415, 415, 415, 415, 1100, 415, 415, 415, 415, 415, 415, 415, 0, 522, 522,
  522, 522, 544, 544, 544, 544, 0, 0, 522, 522, 544, 544, 2594, 2595, 522, 544, 522, 544, 522, 544, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 2222, 0, 0, 0, 0, 0, 0, 49152, 0, 0, 0, 389, 40960, 389, 389, 0, 389, 389, 396, 389, 0, 389, 389, 423, 423, 423,
  423, 423, 423, 423, 443, 443, 443, 443, 462, 443, 462, 462, 462, 423, 519, 530, 530, 530, 530, 530, 553, 530, 530,
  530, 530, 530, 553, 553, 553, 553, 553, 553, 553, 553, 530, 530, 553, 53503, 53503, 462, 462, 462, 462, 462, 462, 462,
  462, 462, 462, 462, 462, 462, 462, 462, 462, 415, 415, 735, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  415, 0, 0, 1114, 0, 0, 0, 0, 0, 0, 544, 544, 544, 544, 892, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  544, 1278, 544, 544, 544, 0, 0, 0, 961, 965, 0, 0, 0, 0, 0, 0, 0, 0, 971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  966656, 1753, 0, 0, 1004, 0, 0, 0, 325, 325, 0, 0, 0, 0, 0, 0, 0, 0, 1015, 0, 0, 0, 1051, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 692224, 0, 0, 0, 0, 315392, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 1088, 415, 415, 415, 415, 415, 415, 0, 0, 0,
  522, 522, 522, 522, 522, 842, 522, 1208, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1220, 522, 522, 522, 879, 91338,
  1161, 882, 544, 544, 544, 544, 544, 1235, 1241, 544, 544, 544, 544, 544, 544, 544, 522, 522, 1066, 0, 544, 544, 522,
  522, 522, 544, 1251, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 921, 544, 544, 544, 1265,
  544, 544, 544, 544, 544, 544, 1275, 544, 544, 544, 544, 544, 544, 544, 544, 2486, 0, 0, 0, 0, 0, 0, 0, 1054, 0, 0, 0,
  0, 0, 0, 0, 0, 656, 783, 0, 783, 777, 0, 0, 0, 544, 544, 544, 1287, 544, 544, 544, 522, 522, 0, 0, 544, 544, 522, 522,
  1168, 522, 522, 1208, 522, 522, 544, 544, 1235, 544, 544, 1275, 544, 544, 0, 0, 0, 0, 0, 2219, 0, 0, 2221, 0, 0, 0, 0,
  0, 0, 0, 577536, 0, 0, 1693, 0, 0, 0, 0, 0, 544, 1558, 1559, 544, 544, 544, 1563, 544, 544, 544, 544, 544, 544, 544,
  544, 544, 522, 2197, 522, 544, 2200, 544, 0, 544, 544, 1573, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  544, 544, 544, 2033, 544, 0, 0, 1653, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 623, 0, 0, 415, 1728, 415, 415, 415, 415,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2109, 0, 0, 0, 0, 0, 2115, 0, 0, 0, 0, 415, 2121, 415, 415, 415, 415, 415, 0,
  2401, 0, 415, 522, 522, 522, 522, 522, 522, 522, 522, 1184, 522, 522, 522, 522, 522, 522, 522, 522, 1185, 522, 522,
  522, 522, 522, 522, 522, 522, 1218, 522, 522, 522, 522, 522, 879, 91338, 415, 415, 415, 415, 415, 415, 2128, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 225280, 0, 0, 0, 0, 0, 0, 0, 0, 2217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 706, 415, 415, 0, 0,
  2242, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 415, 415, 0, 336, 0, 369, 0, 369, 0, 0, 0, 0, 0, 0, 2326, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 308, 0, 0, 0, 2379, 544, 544, 544, 544, 522, 522, 544, 544, 0, 0, 0, 0, 0, 0, 0, 1122, 0, 0,
  0, 0, 0, 0, 0, 0, 1085, 415, 415, 415, 415, 415, 415, 415, 522, 522, 2526, 522, 2528, 522, 522, 522, 544, 544, 544,
  544, 2535, 544, 2537, 544, 544, 544, 544, 544, 1592, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1870, 522,
  544, 311818, 1873, 522, 522, 522, 2552, 544, 544, 544, 544, 544, 544, 544, 544, 0, 0, 0, 0, 2519, 0, 0, 2522, 522,
  522, 0, 522, 2578, 522, 522, 522, 522, 544, 2582, 544, 544, 544, 544, 0, 0, 0, 0, 0, 2244, 0, 2246, 415, 415, 415,
  415, 415, 415, 415, 0, 1161, 522, 522, 522, 522, 522, 522, 522, 49152, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 404, 0,
  331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 778, 424, 424, 424, 424, 424, 424, 424, 444, 444, 452, 444, 331,
  444, 331, 331, 331, 331, 331, 486, 331, 486, 486, 486, 486, 486, 486, 486, 486, 486, 486, 486, 486, 486, 486, 486,
  486, 486, 486, 486, 513, 486, 531, 531, 531, 531, 531, 554, 531, 531, 531, 531, 566, 566, 566, 571, 571, 571, 571,
  571, 571, 571, 571, 531, 531, 571, 53503, 53837, 415, 415, 736, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  415, 0, 1113, 0, 0, 0, 0, 0, 0, 0, 848, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 544, 544,
  544, 544, 544, 1826, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2031, 544, 544, 544, 544, 544, 544, 544,
  544, 893, 544, 544, 905, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2487, 0, 2488, 0, 0, 0, 0, 0, 1132, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2105344, 0, 1145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 415, 415,
  0, 415, 415, 1156, 415, 415, 415, 415, 0, 1161, 522, 522, 522, 522, 522, 1169, 522, 522, 522, 1494, 522, 522, 522,
  522, 522, 522, 522, 522, 522, 522, 522, 1504, 522, 1209, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  879, 91338, 1161, 882, 544, 544, 544, 544, 544, 1236, 544, 544, 544, 544, 544, 544, 544, 544, 1256, 544, 544, 544,
  544, 544, 544, 544, 0, 0, 0, 1319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 638, 0, 0, 0, 0, 1334, 0, 0, 0, 0, 0, 1338, 0,
  0, 0, 0, 0, 0, 0, 0, 1707, 0, 0, 0, 0, 0, 0, 415, 0, 0, 0, 1350, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 684, 0, 0, 0,
  565248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1002, 1491, 522, 522, 522, 522, 522, 522, 522, 522, 1499, 522,
  522, 522, 522, 522, 522, 522, 1810, 0, 0, 0, 1548, 1816, 0, 0, 0, 544, 544, 544, 1560, 544, 544, 544, 544, 544, 544,
  544, 544, 1568, 544, 544, 544, 522, 2310, 522, 544, 2312, 544, 0, 0, 0, 0, 0, 0, 0, 1469, 0, 0, 1472, 1447, 415, 415,
  1475, 415, 0, 0, 0, 1641, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 728, 0, 415, 415, 0, 0, 0, 1654, 0, 1656, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 1633, 0, 0, 0, 0, 0, 0, 0, 0, 1702, 0, 0, 0, 0, 0, 0, 1709, 0, 0, 0, 0, 415, 415, 415, 522, 522, 522,
  522, 522, 522, 522, 522, 2353, 522, 522, 1793, 522, 522, 522, 1797, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  2157, 522, 522, 522, 522, 522, 544, 975392, 544, 544, 544, 522, 522, 544, 544, 0, 0, 0, 0, 0, 0, 0, 1137, 0, 0, 0, 0,
  0, 0, 0, 0, 1401, 0, 0, 0, 0, 1696, 0, 0, 0, 0, 325, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 970, 0, 0, 0, 347, 0, 0,
  0, 0, 0, 347, 0, 0, 0, 0, 347, 0, 0, 0, 45056, 49152, 0, 0, 0, 0, 40960, 0, 0, 302, 0, 0, 397, 0, 0, 0, 0, 0, 979, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1916, 0, 0, 0, 1919, 0, 425, 425, 425, 425, 425, 425, 425, 445, 451, 451, 451, 451, 445,
  471, 471, 471, 471, 471, 451, 471, 451, 451, 451, 451, 451, 451, 451, 451, 451, 425, 451, 532, 532, 532, 532, 532,
  555, 532, 532, 532, 532, 532, 555, 555, 555, 555, 555, 555, 555, 555, 532, 532, 555, 53503, 53503, 451, 451, 504, 451,
  451, 451, 451, 506, 504, 451, 451, 451, 451, 451, 451, 451, 656, 0, 0, 0, 0, 661, 0, 663, 0, 0, 0, 0, 0, 0, 0, 0,
  1748, 0, 0, 0, 0, 0, 0, 0, 672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1031, 0, 0, 718, 0, 0, 0, 0, 0, 0, 0, 0,
  616, 0, 0, 415, 729, 415, 415, 737, 415, 415, 745, 415, 415, 415, 751, 415, 415, 415, 758, 415, 0, 0, 0, 369, 0, 0, 0,
  0, 0, 0, 0, 0, 369, 0, 0, 45056, 760, 0, 0, 616, 797, 0, 656, 0, 0, 0, 777, 0, 804, 0, 806, 0, 0, 0, 415, 0, 522, 522,
  522, 522, 522, 544, 522, 522, 522, 522, 522, 522, 522, 2531, 544, 544, 544, 544, 544, 544, 544, 544, 1595, 544, 544,
  544, 544, 544, 544, 544, 0, 0, 0, 760, 616, 811, 0, 0, 0, 0, 0, 0, 729, 415, 415, 815, 415, 415, 415, 415, 758, 415,
  0, 0, 0, 522, 826, 522, 522, 837, 522, 522, 522, 522, 1768, 522, 522, 1771, 522, 522, 522, 522, 522, 522, 522, 522,
  522, 2273, 2274, 522, 522, 522, 522, 2278, 849, 522, 522, 522, 858, 522, 522, 522, 522, 873, 522, 522, 522, 522, 0,
  544, 544, 544, 544, 544, 1840, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1844, 544, 544, 544, 544, 544, 544,
  883, 544, 544, 894, 544, 544, 906, 544, 544, 544, 915, 544, 544, 544, 544, 544, 544, 544, 2054, 544, 544, 544, 544,
  544, 544, 522, 544, 930, 544, 544, 544, 826, 522, 0, 0, 0, 883, 544, 826, 522, 522, 945, 522, 522, 522, 1507, 522,
  522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1775, 1776, 522, 522, 974, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 1079, 0, 0, 1005, 0, 0, 325, 325, 0, 1009, 0, 0, 0, 0, 0, 0, 0, 1324, 0, 0, 0, 0, 0, 0, 0, 0, 1914, 0, 0, 0,
  0, 0, 0, 0, 0, 1033, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2106031, 0, 0, 1005, 1134, 0, 0, 0, 0, 0, 0, 0,
  1114, 0, 0, 0, 0, 0, 993, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364544, 0, 0, 0, 1931, 0, 1144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  415, 415, 1151, 415, 415, 415, 415, 415, 415, 0, 0, 0, 522, 522, 522, 522, 835, 522, 522, 522, 522, 1508, 522, 522,
  1512, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2156, 522, 522, 522, 522, 522, 522, 415, 1155, 415, 415, 415, 415,
  415, 0, 1161, 522, 522, 522, 522, 522, 522, 522, 522, 655882, 522, 1997, 522, 1999, 522, 522, 522, 544, 544, 1253,
  544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2047, 544, 522, 522, 1300, 522, 522, 544, 544,
  1305, 544, 544, 1308, 544, 544, 0, 0, 0, 0, 0, 2467, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2477, 0, 0, 0, 1403,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 985, 0, 0, 0, 1428, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  415, 415, 415, 1438, 1453, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1464, 0, 0, 0, 415, 0, 522, 542, 542, 542, 522, 545,
  542, 542, 542, 542, 542, 545, 545, 545, 545, 545, 545, 545, 545, 542, 542, 545, 53503, 53503, 415, 415, 415, 415,
  1480, 415, 415, 415, 1161, 522, 522, 522, 522, 522, 522, 522, 864, 522, 522, 522, 522, 522, 522, 0, 544, 522, 522,
  1493, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1203, 522, 522, 415, 415, 415, 415, 1731, 415,
  0, 0, 0, 0, 0, 0, 0, 0, 1740, 0, 0, 0, 415, 0, 539, 539, 539, 539, 539, 562, 539, 539, 539, 539, 539, 562, 562, 562,
  562, 562, 562, 562, 562, 539, 539, 562, 53503, 53503, 1804, 522, 522, 522, 522, 522, 522, 0, 0, 0, 0, 1548, 0, 0, 0,
  0, 0, 996, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1140, 971, 0, 0, 0, 0, 544, 1823, 544, 544, 544, 544, 544, 544, 544, 544,
  544, 544, 544, 544, 544, 544, 925, 544, 544, 544, 544, 544, 1851, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  544, 544, 1599, 544, 544, 544, 1894, 0, 0, 1896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1907, 0, 1921, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 1947, 415, 415, 415, 415, 415, 1952, 415, 415, 415, 1954, 415, 415, 1956,
  415, 415, 415, 415, 415, 415, 0, 0, 0, 522, 522, 522, 522, 836, 522, 522, 522, 522, 1525, 522, 522, 522, 522, 522,
  522, 522, 522, 522, 522, 522, 876, 522, 522, 0, 544, 522, 522, 2005, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  522, 522, 522, 1204, 522, 522, 544, 544, 544, 2024, 544, 544, 544, 544, 2028, 544, 2030, 544, 544, 544, 544, 544, 522,
  522, 544, 544, 0, 0, 2385, 0, 0, 0, 2388, 544, 544, 544, 2037, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  2048, 522, 522, 522, 2060, 544, 544, 544, 2063, 0, 0, 0, 0, 0, 0, 0, 0, 1928, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2084,
  2085, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1751, 0, 0, 0, 0, 0, 2098, 0, 0, 0, 0, 0, 0, 0, 2103, 0, 0, 0, 0, 0, 0, 1038,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 2233, 0, 0, 0, 0, 0, 0, 0, 0, 2110, 2111, 0, 0, 2114, 0, 0, 0, 0, 0, 415, 415, 415, 415,
  415, 2340, 415, 0, 0, 2342, 0, 415, 415, 415, 415, 415, 415, 0, 2129, 0, 0, 0, 0, 0, 0, 0, 0, 2076, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 2138, 415, 415, 415, 415, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1186, 522, 522, 522, 522, 522, 522,
  522, 2151, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1777, 522, 2215, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 1332, 544, 544, 544, 544, 2296, 2297, 544, 544, 544, 544, 2301, 544, 544, 544, 544, 544, 522,
  909834, 544, 909856, 2384, 0, 0, 2386, 0, 0, 0, 544, 544, 2367, 2368, 2369, 544, 544, 544, 544, 544, 544, 544, 544,
  2376, 544, 544, 544, 544, 544, 544, 1593, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2424, 544, 544, 522, 544,
  0, 544, 2417, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 522, 544, 0, 0, 0, 415, 0, 541, 541, 541, 541,
  541, 564, 541, 541, 541, 541, 541, 564, 564, 564, 564, 564, 564, 564, 564, 541, 541, 564, 53503, 53503, 0, 522, 522,
  522, 522, 522, 522, 2443, 522, 522, 522, 522, 522, 544, 544, 544, 544, 544, 544, 544, 1629, 0, 1631, 0, 544, 544, 544,
  2453, 544, 544, 544, 544, 544, 0, 2459, 0, 0, 868352, 0, 0, 0, 0, 660, 0, 0, 0, 664, 0, 666, 0, 0, 0, 0, 0, 0,
  3158016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 656, 0, 0, 0, 0, 0, 0, 544, 544, 2480, 544, 544, 544, 544, 544, 544, 0, 0, 0, 0,
  2490, 0, 0, 0, 0, 676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1405, 415, 415, 415, 415, 544, 544, 544, 2512, 544, 2514, 0,
  0, 0, 0, 0, 0, 0, 0, 522, 522, 522, 522, 2471, 522, 2473, 2474, 2475, 522, 544, 0, 522, 522, 2564, 2565, 522, 522,
  544, 544, 2570, 2571, 544, 544, 0, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106496, 337, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 352, 0, 0, 0, 600, 0, 0, 728, 0, 728, 0, 728, 0, 415, 415, 415, 415, 0, 1960, 0, 0, 0, 0,
  0, 0, 0, 1901, 0, 0, 49152, 0, 305, 307, 306, 40960, 306, 306, 307, 394, 306, 305, 306, 0, 306, 394, 426, 426, 426,
  426, 426, 426, 426, 446, 446, 446, 454, 463, 469, 463, 463, 473, 473, 463, 487, 473, 487, 487, 487, 487, 487, 487,
  487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 487, 426, 487, 533, 533, 533, 533, 533, 556, 533, 533,
  533, 533, 533, 556, 556, 556, 556, 556, 556, 556, 556, 533, 533, 556, 53503, 53503, 273, 274, 0, 0, 0, 0, 0, 0, 602,
  0, 0, 0, 606, 607, 608, 609, 610, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 622, 0, 624, 0, 0, 0, 600, 685, 0, 694, 695, 600,
  0, 0, 0, 0, 0, 0, 0, 233472, 0, 0, 0, 0, 0, 0, 0, 0, 374, 316, 0, 0, 0, 0, 0, 45056, 700, 701, 702, 0, 0, 0, 0, 0,
  708, 0, 0, 711, 745472, 0, 0, 0, 0, 0, 159744, 0, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744,
  159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 732, 415, 415, 740, 415, 415, 415, 749, 415, 415, 415,
  415, 756, 415, 415, 0, 0, 0, 613, 614, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1388, 0, 0, 0, 0, 0, 0, 0, 779, 780, 0, 0, 0,
  708, 0, 0, 0, 0, 0, 0, 0, 1353, 0, 0, 0, 0, 0, 0, 0, 0, 1384, 0, 0, 0, 0, 0, 0, 0, 0, 982, 0, 0, 0, 0, 0, 0, 0, 0,
  788, 0, 0, 0, 702, 791, 0, 0, 0, 702, 0, 0, 794, 645, 0, 0, 0, 614, 0, 0, 0, 0, 0, 0, 0, 0, 803, 0, 0, 0, 0, 0, 2207,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1094081, 1094081, 1094081, 0, 0, 0, 796, 0, 0, 0, 798, 0, 0, 0, 638, 0, 645, 0, 0, 0,
  638, 796, 796, 638, 0, 0, 0, 0, 624, 0, 669, 0, 638, 415, 415, 814, 415, 415, 415, 415, 415, 415, 0, 0, 0, 522, 522,
  522, 522, 838, 522, 522, 522, 522, 1808, 522, 522, 0, 0, 0, 0, 1548, 0, 0, 0, 0, 0, 705, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1941, 0, 0, 0, 0, 0, 816, 415, 415, 756, 415, 823, 0, 0, 638, 522, 522, 831, 834, 522, 841, 522, 522, 522, 1524, 522,
  522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1222, 522, 879, 91338, 522, 522, 854, 857, 522, 522, 522, 866,
  870, 522, 522, 522, 522, 522, 0, 544, 544, 544, 544, 544, 1852, 1853, 544, 544, 544, 544, 544, 544, 544, 544, 544, 0,
  0, 0, 0, 0, 2491, 0, 544, 544, 888, 891, 544, 898, 544, 544, 544, 911, 914, 544, 544, 544, 923, 927, 866, 870, 949, 0,
  544, 544, 952, 544, 544, 923, 927, 957, 53503, 2, 6, 0, 0, 0, 617, 0, 790, 0, 0, 0, 0, 790, 0, 0, 0, 0, 0, 325, 325,
  0, 0, 0, 0, 0, 0, 977, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36864, 0, 0, 415, 415, 415, 415, 415, 1098, 415, 415,
  415, 415, 415, 415, 415, 415, 415, 415, 1161, 522, 522, 522, 522, 522, 522, 522, 544, 544, 544, 544, 1254, 544, 544,
  544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1600, 544, 544, 544, 544, 1285, 544, 544, 544, 544, 544, 522, 522,
  0, 0, 544, 544, 522, 522, 522, 522, 522, 1796, 522, 522, 522, 522, 522, 522, 522, 1801, 522, 1803, 1402, 0, 698, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 712, 0, 0, 0, 0, 1414, 0, 0, 0, 0, 0, 1421, 0, 0, 0, 415, 415, 415, 415, 0, 0, 0, 0,
  1963, 0, 0, 0, 0, 0, 0, 0, 2432, 0, 0, 0, 0, 0, 0, 0, 415, 415, 2248, 415, 415, 415, 415, 415, 0, 415, 415, 415, 415,
  415, 1445, 415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1101824, 383, 1102207, 1102207, 1102207, 0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 775, 776, 0, 1537, 522, 522, 522, 522, 522, 522, 0, 1548, 91338, 0, 1548, 544, 544, 544, 544,
  544, 544, 544, 2195, 544, 522, 522, 522, 544, 544, 544, 0, 544, 544, 544, 1606, 544, 544, 544, 544, 544, 544, 522,
  522, 544, 544, 522, 1616, 522, 651786, 522, 522, 522, 522, 544, 1623, 544, 651808, 544, 544, 544, 544, 0, 0, 0, 0,
  704, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 714, 0, 1630, 0, 961, 0, 0, 0, 1632, 0, 965, 0, 0, 0, 0, 0, 0, 1053, 0, 0, 0, 0,
  972, 0, 0, 0, 0, 544, 544, 544, 544, 1839, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1846, 544, 544,
  544, 0, 1909, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 329, 0, 0, 0, 2169, 544, 544, 544, 544, 544, 544, 544, 544,
  544, 544, 544, 544, 544, 544, 2377, 544, 544, 2182, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  544, 1262, 544, 544, 544, 544, 544, 2192, 544, 544, 544, 544, 522, 522, 522, 544, 544, 544, 0, 0, 2315, 0, 0, 0,
  569344, 0, 2204, 0, 0, 0, 0, 0, 0, 2208, 0, 0, 0, 0, 0, 0, 0, 1405, 0, 0, 0, 0, 0, 0, 0, 0, 996, 0, 0, 999, 1000, 0,
  0, 0, 522, 2268, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1988, 522, 2427, 0, 0, 2430, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 1089, 415, 415, 0, 522, 522, 522, 2440, 522, 522, 522, 522, 522, 522, 522,
  522, 544, 544, 544, 544, 0, 0, 0, 0, 0, 0, 0, 2070, 2450, 544, 544, 544, 544, 544, 544, 544, 544, 0, 0, 0, 0, 0, 0, 0,
  1419, 0, 0, 0, 0, 415, 415, 415, 415, 2478, 544, 544, 544, 2482, 544, 544, 544, 544, 0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
  1423, 0, 415, 415, 415, 415, 2561, 522, 522, 522, 522, 522, 522, 544, 544, 544, 544, 544, 544, 0, 2575, 2576, 544,
  2596, 2597, 522, 544, 522, 544, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 2163513, 2163513,
  2163513, 349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1392, 366, 0, 0, 0, 0, 0, 366, 0, 0, 0, 0, 366, 0, 0, 0,
  45056, 49152, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 405, 0, 0, 0, 0, 721, 722, 0, 724, 0, 0, 727, 0, 0, 0, 415, 415,
  415, 415, 415, 415, 0, 0, 0, 0, 0, 2132, 0, 0, 0, 2135, 488, 0, 0, 0, 0, 488, 0, 0, 0, 488, 0, 488, 488, 488, 488,
  488, 514, 488, 534, 534, 534, 534, 534, 557, 534, 534, 534, 534, 534, 557, 557, 557, 557, 557, 557, 557, 557, 576,
  576, 585, 53503, 53503, 415, 415, 415, 415, 821, 415, 0, 0, 0, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2447,
  522, 544, 544, 544, 931, 544, 544, 544, 522, 522, 0, 0, 0, 544, 544, 522, 522, 522, 522, 522, 522, 1809, 0, 0, 0, 0,
  1548, 0, 0, 0, 0, 0, 0, 0, 975, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1028, 0, 1030, 0, 1161, 882, 544, 544, 544, 544,
  544, 1237, 544, 544, 544, 544, 1247, 544, 544, 544, 544, 544, 544, 544, 2457, 544, 0, 0, 0, 2461, 0, 0, 0, 0, 0, 2392,
  0, 2393, 0, 0, 0, 2397, 0, 0, 0, 0, 0, 761, 0, 0, 0, 0, 0, 0, 623, 0, 0, 0, 1283, 544, 544, 544, 544, 544, 544, 522,
  1292, 0, 0, 544, 1294, 522, 522, 1170, 0, 0, 0, 1320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1076, 0, 0, 0, 0, 1378, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 353, 0, 0, 0, 913408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1058, 0, 0, 0, 0, 0,
  0, 1315, 0, 0, 0, 0, 0, 1321, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2327, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 0,
  0, 1735, 0, 0, 0, 0, 0, 0, 0, 1459, 0, 0, 0, 0, 0, 0, 0, 0, 1370, 0, 0, 0, 0, 0, 0, 724992, 522, 1780, 522, 522, 522,
  522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2001, 522, 544, 544, 544, 1838, 544, 544, 1841, 544, 544, 544,
  544, 544, 544, 544, 544, 544, 1566, 544, 544, 544, 544, 544, 544, 0, 2428, 0, 0, 0, 0, 0, 0, 2433, 0, 0, 0, 2436, 0,
  0, 415, 1949, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1724, 415, 1725, 1726, 0, 2464, 2465,
  0, 851968, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 544, 2533, 544, 544, 544, 544, 544, 544, 415, 415, 738,
  415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 1161, 522, 522, 522, 522, 522, 522, 1173, 0, 764, 0, 0,
  0, 0, 0, 0, 0, 0, 764, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 764, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1343, 0, 0, 0, 544,
  544, 544, 544, 895, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1871, 1872, 522, 522, 544, 544, 544,
  935, 522, 522, 0, 0, 0, 544, 544, 522, 522, 522, 522, 522, 522, 1981, 522, 522, 522, 522, 1985, 522, 1987, 522, 522,
  0, 0, 0, 962, 966, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2078, 0, 2080, 0, 0, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 1637, 0, 0, 325, 0, 0, 0, 0, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 640, 0, 0, 0, 49152, 0, 0, 309, 308,
  40960, 308, 308, 309, 308, 308, 0, 308, 0, 308, 308, 308, 427, 308, 535, 535, 535, 535, 535, 558, 535, 535, 535, 535,
  535, 558, 558, 558, 558, 558, 558, 558, 558, 535, 535, 558, 53503, 53503, 427, 427, 427, 427, 427, 427, 427, 0, 0, 0,
  0, 308, 309, 308, 308, 308, 308, 480, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
  0, 627, 628, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1029, 0, 0, 0, 717, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415,
  415, 415, 415, 415, 415, 415, 415, 742, 415, 415, 415, 415, 752, 415, 415, 757, 415, 415, 0, 0, 0, 629, 630, 0, 0, 0,
  0, 635, 0, 0, 0, 0, 0, 0, 799, 0, 0, 0, 0, 0, 0, 0, 0, 807, 0, 0, 776, 0, 0, 0, 0, 0, 0, 0, 0, 776, 415, 415, 415,
  415, 0, 0, 1961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 286720, 286720, 286720, 286720, 0, 286720, 0, 0, 0, 415, 415, 415, 820,
  415, 415, 0, 0, 776, 522, 522, 522, 522, 522, 522, 844, 544, 544, 544, 544, 936, 522, 0, 0, 0, 940, 544, 522, 522,
  522, 522, 861, 522, 871, 522, 0, 940, 544, 544, 544, 918, 544, 928, 544, 53503, 2, 6, 0, 0, 0, 645, 325, 325, 325, 0,
  0, 0, 650, 0, 0, 0, 0, 0, 314, 315, 316, 317, 0, 0, 0, 0, 0, 0, 0, 163840, 163840, 163840, 163840, 0, 163840, 0, 0, 0,
  1016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1650, 1032, 0, 1034, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1044, 0, 0, 0, 0,
  0, 163840, 0, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840,
  163840, 163840, 163840, 1048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1061, 0, 0, 0, 0, 760, 0, 0, 0, 0, 769, 0, 0, 0, 0,
  0, 777, 1080, 1081, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  0, 415, 415, 415, 1097, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 522, 1762, 522, 522, 522, 1154,
  415, 415, 415, 415, 415, 1160, 1044, 1161, 522, 522, 522, 522, 522, 522, 522, 868, 522, 522, 522, 522, 522, 522, 0,
  544, 544, 1252, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1834, 544, 544, 544, 544, 544,
  1267, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 2188, 544, 544, 544, 522, 1299, 522, 522, 1302, 544,
  544, 544, 544, 1307, 544, 544, 1310, 0, 0, 0, 0, 0, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840,
  163840, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1110016, 0, 0, 0, 0, 0, 1349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1361,
  415, 415, 415, 1443, 415, 415, 1446, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1913, 0, 0, 0, 0, 0, 0, 0, 0, 1938, 0, 0, 0, 0, 0, 0,
  0, 0, 1123, 0, 0, 0, 0, 0, 0, 0, 522, 1538, 522, 522, 1541, 522, 522, 0, 1548, 91338, 0, 1548, 544, 544, 544, 1555,
  1571, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1282, 544, 544, 544, 544, 1607, 544,
  544, 1610, 544, 544, 522, 522, 544, 544, 522, 522, 522, 522, 2007, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2013,
  522, 1651, 1652, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 687, 368, 0, 1674, 0, 0, 0, 1677, 0, 0, 0, 0, 0, 0, 0,
  1685, 0, 0, 0, 0, 761, 0, 0, 0, 604, 0, 0, 0, 0, 0, 0, 786, 0, 0, 0, 311296, 1691, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1698,
  0, 1700, 1701, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 1150, 415, 415, 415, 311711, 1754, 415, 415, 415, 415, 415,
  415, 415, 415, 415, 522, 522, 522, 522, 522, 522, 1994, 522, 522, 522, 522, 522, 522, 522, 522, 522, 874, 522, 522,
  522, 522, 0, 544, 544, 544, 544, 1850, 544, 544, 544, 544, 544, 1856, 544, 544, 544, 544, 544, 544, 544, 903, 544,
  544, 544, 544, 544, 544, 544, 544, 544, 2423, 544, 544, 544, 522, 544, 0, 0, 0, 0, 1923, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 1389, 0, 0, 0, 522, 522, 2059, 522, 544, 544, 2062, 544, 2064, 2065, 0, 0, 0, 0, 0, 0, 1352, 0, 0, 1355, 1356,
  0, 0, 0, 0, 0, 0, 0, 0, 2256, 0, 0, 0, 0, 0, 415, 415, 415, 2263, 2264, 522, 522, 522, 522, 2283, 522, 522, 522, 2287,
  544, 544, 544, 544, 544, 544, 544, 544, 2041, 544, 544, 544, 544, 544, 544, 544, 544, 2185, 544, 544, 544, 544, 544,
  544, 544, 522, 522, 0, 0, 544, 544, 522, 522, 522, 0, 0, 2429, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 1972,
  415, 415, 415, 415, 0, 2438, 522, 522, 522, 522, 522, 522, 522, 522, 2446, 522, 522, 2448, 544, 544, 544, 544, 544,
  544, 1609, 544, 544, 544, 522, 522, 544, 544, 522, 522, 522, 522, 1495, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  522, 522, 522, 2168, 522, 0, 0, 0, 2494, 522, 2496, 522, 522, 522, 522, 522, 522, 522, 522, 544, 2506, 544, 544, 544,
  544, 544, 544, 1866, 544, 1868, 544, 544, 544, 522, 544, 522, 522, 522, 522, 522, 2529, 522, 522, 544, 544, 544, 544,
  544, 544, 544, 2538, 0, 522, 522, 522, 522, 2566, 522, 544, 544, 544, 544, 2572, 544, 2574, 0, 0, 0, 0, 764, 0, 0, 0,
  0, 0, 0, 0, 415, 415, 415, 415, 0, 0, 0, 1962, 0, 0, 0, 0, 0, 0, 0, 1966, 2577, 522, 522, 522, 522, 522, 522, 544,
  544, 544, 544, 544, 544, 0, 2586, 2587, 0, 310, 311, 312, 313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2104, 0, 0, 0, 0, 0,
  0, 325, 0, 0, 0, 0, 0, 328, 0, 0, 0, 0, 0, 0, 0, 2101, 0, 0, 0, 0, 0, 0, 0, 0, 2220, 0, 0, 0, 0, 0, 0, 0, 0, 1970, 0,
  415, 415, 415, 415, 1974, 415, 415, 0, 332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 687, 1047, 0, 311, 0, 0, 0, 328,
  0, 345, 0, 310, 0, 0, 0, 0, 0, 355, 356, 0, 357, 0, 0, 0, 0, 357, 0, 0, 361, 0, 0, 0, 328, 365, 49152, 0, 0, 0, 390,
  40960, 390, 390, 0, 390, 390, 375, 390, 0, 390, 413, 428, 428, 428, 428, 428, 428, 428, 0, 0, 310, 0, 464, 0, 464,
  464, 464, 464, 464, 489, 464, 489, 489, 489, 489, 489, 489, 489, 489, 413, 503, 413, 413, 413, 413, 503, 505, 413,
  413, 489, 507, 489, 489, 489, 489, 489, 515, 520, 536, 536, 536, 536, 536, 559, 536, 536, 536, 536, 536, 559, 559,
  559, 559, 559, 559, 559, 559, 577, 577, 586, 53503, 53503, 273, 274, 0, 0, 0, 599, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1682,
  0, 0, 0, 0, 0, 0, 599, 0, 0, 0, 0, 0, 0, 599, 0, 0, 0, 0, 0, 0, 0, 2232, 0, 0, 0, 0, 0, 0, 0, 0, 767, 0, 772, 0, 0, 0,
  0, 0, 415, 415, 415, 415, 415, 746, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 1161, 522, 522, 522, 522, 522,
  1168, 1174, 725, 0, 0, 0, 770, 0, 0, 0, 0, 0, 0, 0, 725, 0, 770, 0, 0, 0, 0, 0, 0, 730, 415, 415, 746, 415, 415, 415,
  415, 415, 415, 0, 0, 0, 522, 827, 522, 522, 522, 522, 522, 522, 2155, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  1198, 522, 522, 522, 522, 522, 522, 544, 884, 544, 544, 544, 544, 544, 907, 544, 544, 544, 544, 544, 544, 544, 544,
  1274, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 827, 522, 0, 0, 0, 884, 544, 827, 522, 522, 850, 522,
  522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 544, 0, 1017, 0, 0, 0, 0, 1022, 0, 1024, 0, 0, 0, 0, 0,
  0, 0, 2259, 0, 415, 2261, 415, 415, 522, 522, 522, 0, 0, 0, 1083, 0, 969, 1083, 0, 415, 415, 1087, 415, 1091, 415,
  1093, 415, 415, 415, 415, 415, 415, 0, 0, 0, 522, 522, 522, 522, 839, 522, 522, 522, 855, 522, 860, 522, 863, 522,
  522, 875, 522, 522, 522, 0, 544, 544, 544, 544, 544, 544, 544, 544, 255, 2, 6, 0, 1118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 1129, 0, 0, 0, 0, 768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 768, 0, 0, 0, 0, 0, 0, 415, 415, 415, 744, 415, 415, 415, 415,
  415, 415, 415, 0, 1161, 522, 522, 522, 1166, 522, 522, 1175, 522, 522, 1179, 522, 522, 522, 522, 522, 522, 522, 522,
  522, 522, 522, 522, 522, 1223, 879, 91338, 1190, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  522, 1778, 1161, 882, 544, 544, 544, 1233, 544, 544, 1242, 544, 544, 1246, 544, 544, 544, 544, 544, 544, 544, 2299,
  2300, 544, 544, 544, 544, 544, 544, 544, 522, 522, 0, 0, 544, 544, 522, 522, 1169, 1190, 522, 522, 522, 522, 544, 544,
  544, 1257, 544, 544, 544, 544, 0, 0, 0, 0, 0, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
  53503, 53503, 0, 0, 1379, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1045, 688, 0, 0, 0, 0, 1663, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 1409, 0, 0, 0, 0, 0, 0, 761856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1463, 0, 0, 0, 1727, 415, 415, 415,
  415, 415, 0, 0, 0, 0, 0, 0, 1738, 0, 0, 0, 0, 0, 221576, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 320, 0, 0, 0, 0, 0, 415, 415,
  415, 415, 415, 415, 967071, 1759, 415, 415, 1073567, 1761, 522, 522, 522, 522, 522, 1496, 522, 522, 522, 522, 1500,
  522, 522, 522, 1503, 522, 1822, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1603, 1849,
  544, 544, 544, 544, 544, 544, 544, 544, 544, 1857, 544, 544, 544, 544, 544, 544, 544, 1564, 544, 544, 544, 544, 544,
  544, 544, 544, 544, 2196, 522, 522, 2199, 544, 544, 0, 544, 544, 1862, 544, 1864, 544, 544, 544, 544, 544, 544, 544,
  522, 544, 522, 522, 522, 522, 2356, 522, 522, 522, 522, 522, 522, 522, 522, 522, 544, 544, 1237, 544, 544, 544, 544,
  544, 0, 0, 1314, 522, 522, 522, 967178, 1073674, 544, 544, 544, 544, 544, 967200, 1073696, 0, 1315, 0, 1321, 544, 544,
  544, 544, 2038, 544, 544, 544, 544, 544, 544, 544, 2045, 544, 544, 544, 544, 544, 544, 901, 544, 544, 544, 544, 916,
  918, 544, 544, 928, 522, 522, 522, 2153, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1534, 522, 522,
  522, 522, 2161, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 0, 1814, 0, 1820, 544, 544, 544, 544, 544,
  544, 544, 544, 544, 544, 544, 544, 2180, 544, 544, 544, 544, 544, 1865, 544, 544, 544, 544, 544, 544, 522, 544, 522,
  522, 522, 522, 1795, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2363, 522, 544, 544, 409600, 0, 0, 0,
  0, 0, 0, 0, 0, 410015, 415, 415, 415, 522, 522, 522, 522, 522, 2154, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  522, 1788, 522, 522, 522, 522, 544, 544, 544, 410122, 522, 522, 410144, 544, 544, 0, 0, 0, 0, 0, 0, 0, 106496, 106496,
  106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 0, 0,
  0, 962560, 0, 1052672, 0, 2321, 0, 0, 0, 0, 0, 0, 0, 0, 111024, 111024, 111024, 111024, 432, 111024, 432, 432, 432,
  2332, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 2341, 0, 0, 0, 0, 0, 1069, 0, 0, 0, 0, 0, 0, 0, 0, 1078, 0, 0, 2343,
  0, 909312, 415, 909727, 415, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1219, 522, 522, 522, 522, 879, 91338, 0,
  522, 522, 522, 522, 522, 2442, 522, 2444, 522, 522, 522, 522, 544, 544, 544, 544, 0, 0, 0, 0, 0, 0, 2069, 0, 544, 544,
  2452, 544, 2454, 544, 544, 544, 544, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 346, 301, 0, 0, 0, 0, 0, 0,
  0, 0, 2495, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2505, 544, 544, 544, 544, 544, 544, 1255, 544, 544, 544, 544,
  544, 544, 544, 544, 544, 522, 522, 522, 544, 544, 544, 0, 0, 0, 0, 0, 2318, 0, 0, 0, 358, 0, 0, 0, 0, 358, 0, 0, 0, 0,
  0, 0, 0, 0, 172032, 172032, 172032, 172032, 0, 172032, 0, 0, 0, 49152, 0, 0, 0, 0, 40960, 0, 0, 0, 0, 0, 316, 0, 0, 0,
  0, 0, 1135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 699, 0, 0, 0, 0, 0, 429, 429, 429, 429, 429, 429, 429, 447, 447, 447, 447,
  0, 447, 0, 0, 0, 0, 0, 258048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 614, 0, 0, 0, 0, 0, 490, 447, 447, 447, 447, 490, 447,
  447, 447, 499, 508, 499, 499, 499, 499, 499, 516, 521, 537, 537, 537, 537, 537, 560, 537, 537, 537, 537, 537, 560,
  560, 560, 560, 560, 560, 560, 560, 578, 578, 587, 53503, 53503, 273, 274, 0, 0, 0, 0, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  188849, 188849, 188849, 188849, 0, 188849, 0, 0, 0, 415, 415, 415, 415, 743, 415, 748, 415, 415, 415, 415, 755, 415,
  415, 415, 0, 0, 0, 649, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1659, 0, 0, 0, 415, 415, 755, 415, 415, 415, 772, 824, 0,
  522, 828, 522, 522, 522, 522, 845, 851, 853, 522, 522, 522, 522, 522, 867, 522, 522, 522, 522, 522, 522, 0, 544, 544,
  544, 544, 544, 2025, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1597, 544, 544, 544, 544, 544, 544, 885, 544,
  544, 544, 544, 902, 908, 910, 544, 544, 544, 544, 544, 924, 544, 544, 544, 544, 544, 2184, 544, 544, 544, 544, 544,
  544, 544, 544, 2189, 544, 544, 544, 544, 544, 1268, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1281, 544, 544, 544,
  544, 828, 522, 0, 0, 0, 885, 544, 828, 522, 522, 851, 522, 522, 522, 1781, 1782, 522, 1784, 522, 522, 522, 522, 522,
  522, 522, 1789, 522, 522, 522, 1540, 522, 522, 522, 0, 1548, 91338, 0, 1548, 544, 544, 544, 544, 522, 854, 0, 0, 0,
  544, 911, 522, 522, 944, 522, 522, 867, 522, 522, 0, 885, 544, 544, 908, 544, 924, 544, 544, 53503, 2, 6, 0, 0, 0,
  659, 0, 0, 0, 0, 0, 0, 0, 0, 668, 0, 0, 671, 0, 989, 0, 0, 992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2211, 0, 0, 0, 0, 0,
  0, 0, 1006, 0, 325, 325, 0, 0, 0, 1011, 1012, 0, 0, 0, 0, 0, 1136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1646, 1647, 0, 0, 0,
  0, 0, 1049, 0, 0, 0, 0, 0, 0, 0, 1058, 0, 0, 0, 0, 0, 1063, 1106, 1107, 415, 415, 415, 415, 415, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 245760, 0, 0, 0, 0, 0, 0, 0, 0, 766, 0, 771, 0, 774, 0, 0, 0, 1119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1130,
  1063, 0, 1011, 1133, 0, 0, 0, 765952, 0, 0, 0, 992, 0, 1141, 0, 0, 0, 0, 0, 634880, 2431, 0, 0, 2434, 2435, 0, 0, 0,
  0, 415, 415, 415, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2414, 544, 544, 544, 544, 415, 415, 415, 415,
  415, 1159, 415, 0, 1161, 522, 522, 1165, 522, 522, 522, 522, 522, 1510, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  522, 522, 1998, 522, 522, 522, 522, 1191, 522, 522, 1194, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1205, 1206,
  522, 522, 522, 1794, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 878, 522, 0, 544, 1161, 882, 544,
  544, 1232, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1260, 544, 544, 544, 544, 1298, 522, 522, 522, 522,
  1303, 544, 544, 1306, 544, 544, 544, 544, 0, 0, 0, 0, 0, 1094081, 0, 1094081, 1094081, 1094081, 1094081, 1094081,
  1094081, 1094081, 1094081, 1094081, 1094081, 1094081, 1094081, 1094081, 1094081, 1094081, 1094081, 1315, 0, 0, 0,
  1321, 0, 0, 0, 0, 0, 0, 0, 1329, 1330, 0, 0, 0, 0, 789, 0, 0, 0, 785, 0, 682, 0, 0, 0, 0, 0, 325, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 1401, 0, 0, 0, 0, 1336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1648, 0, 0, 0, 1377, 0, 0, 0, 0, 0,
  0, 0, 1385, 0, 0, 0, 0, 0, 0, 0, 250291, 250291, 250291, 250291, 249856, 250291, 249856, 249856, 249856, 415, 415,
  415, 415, 415, 1432, 415, 415, 415, 415, 415, 1436, 415, 415, 415, 415, 415, 0, 0, 0, 415, 522, 522, 522, 522, 522,
  522, 2405, 415, 415, 415, 415, 415, 415, 415, 0, 1447, 1448, 0, 0, 0, 1451, 0, 0, 0, 0, 810, 0, 0, 0, 0, 0, 0, 0, 415,
  415, 415, 415, 415, 0, 0, 0, 415, 2402, 522, 522, 522, 522, 522, 522, 522, 1811, 0, 0, 0, 1548, 1817, 0, 0, 0, 415,
  415, 1478, 415, 415, 415, 415, 415, 1161, 522, 522, 522, 522, 1488, 522, 522, 522, 544, 544, 544, 544, 544, 544, 544,
  544, 573, 573, 582, 53503, 53503, 1557, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1570, 544,
  544, 544, 544, 544, 2370, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 522, 522, 544, 544, 522, 522, 1617, 522,
  522, 1619, 522, 522, 544, 544, 1624, 544, 544, 1626, 544, 544, 0, 0, 0, 0, 978, 0, 0, 0, 0, 0, 0, 984, 0, 0, 0, 0, 0,
  677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2210, 0, 933888, 0, 2213, 0, 0, 1661, 0, 0, 0, 0, 0, 0, 1667, 0, 1668, 1669, 0, 0,
  0, 0, 0, 1141, 0, 0, 0, 1012, 1141, 1149, 415, 415, 1152, 415, 415, 415, 415, 1717, 415, 415, 415, 415, 415, 415, 415,
  415, 415, 415, 415, 415, 1161, 522, 522, 522, 522, 522, 1489, 1490, 415, 415, 1729, 1730, 415, 415, 0, 0, 0, 0, 0, 0,
  0, 1739, 0, 1741, 0, 1742, 0, 0, 0, 0, 0, 0, 0, 0, 1750, 0, 0, 0, 0, 0, 325, 325, 0, 0, 0, 0, 0, 1013, 976, 0, 0, 415,
  415, 415, 415, 415, 415, 415, 415, 1760, 415, 415, 522, 522, 522, 522, 522, 522, 2164, 522, 522, 522, 522, 522, 522,
  522, 0, 0, 0, 0, 1548, 0, 0, 0, 0, 1779, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  1790, 522, 522, 1806, 522, 522, 522, 522, 0, 0, 1814, 0, 1548, 0, 0, 1820, 0, 0, 0, 675, 0, 0, 0, 0, 0, 0, 0, 0, 685,
  0, 0, 0, 0, 0, 532480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1705, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 1092, 415,
  415, 544, 544, 544, 1863, 544, 544, 544, 1867, 544, 544, 544, 544, 522, 544, 522, 522, 522, 544, 544, 544, 2554, 544,
  2555, 544, 544, 544, 0, 0, 0, 0, 0, 970, 0, 0, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
  1958, 0, 0, 0, 1883, 0, 0, 0, 0, 0, 0, 0, 0, 1891, 0, 0, 0, 0, 0, 2158592, 2482176, 2158592, 2158592, 2740224,
  2158592, 2158592, 2482176, 2740224, 0, 0, 0, 0, 0, 1040384, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 415, 0, 0, 0,
  0, 1976, 522, 522, 522, 522, 1980, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2167, 522, 522, 0, 0, 1989,
  522, 522, 522, 1992, 1993, 522, 522, 522, 522, 522, 522, 522, 2000, 522, 522, 522, 544, 2553, 544, 544, 544, 544, 544,
  544, 544, 0, 0, 0, 0, 0, 1118, 0, 1147, 1148, 0, 1118, 415, 415, 415, 1100, 415, 544, 544, 2023, 544, 544, 544, 544,
  544, 544, 544, 544, 544, 544, 2032, 544, 544, 544, 544, 544, 544, 2039, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  2186, 544, 544, 544, 544, 544, 544, 544, 2035, 2036, 544, 544, 544, 544, 544, 544, 544, 2043, 544, 544, 544, 544, 544,
  544, 544, 1577, 544, 544, 1581, 544, 544, 544, 544, 544, 544, 544, 1291, 522, 0, 0, 1293, 544, 522, 522, 522, 2071,
  2072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 972, 973, 0, 0, 0, 2112, 0, 0, 0, 2116, 0, 0, 0, 415, 415, 415, 2123,
  415, 415, 415, 415, 415, 415, 0, 0, 0, 522, 522, 522, 522, 840, 522, 522, 522, 1180, 522, 522, 522, 522, 522, 522,
  522, 522, 522, 522, 522, 1189, 522, 522, 2152, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1502,
  522, 522, 544, 2294, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1847, 544, 2307, 544, 544,
  522, 522, 522, 544, 544, 544, 0, 0, 0, 2316, 0, 0, 0, 0, 0, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513,
  2163513, 2163513, 2163513, 2163513, 2163569, 2163569, 2163569, 2163569, 0, 0, 2320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 1077, 0, 0, 471040, 0, 0, 0, 415, 415, 415, 522, 522, 522, 522, 522, 522, 522, 522, 522, 1531, 522, 522, 522,
  522, 522, 522, 522, 522, 522, 2355, 522, 522, 522, 522, 2360, 522, 522, 522, 522, 522, 544, 544, 544, 544, 0, 0, 0,
  2067, 0, 0, 0, 0, 0, 2389, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2398, 0, 0, 0, 0, 1007, 325, 325, 0, 0, 0, 0, 0, 0, 0,
  1014, 0, 544, 2540, 0, 0, 0, 0, 2542, 0, 0, 2545, 522, 522, 522, 522, 522, 522, 522, 1995, 522, 522, 522, 522, 522,
  522, 522, 2002, 2550, 2551, 522, 544, 544, 544, 544, 544, 544, 2556, 2557, 544, 0, 0, 2559, 2560, 0, 522, 522, 522,
  522, 544, 544, 544, 544, 0, 0, 522, 2592, 544, 2593, 522, 522, 522, 2006, 522, 522, 522, 522, 2010, 522, 522, 522,
  522, 522, 522, 522, 522, 522, 2361, 522, 522, 522, 522, 544, 544, 49152, 0, 318, 0, 0, 40960, 0, 0, 0, 0, 0, 398, 0,
  0, 0, 0, 0, 1337, 651264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1085440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1328, 0, 0, 0, 0,
  430, 430, 430, 430, 430, 430, 430, 448, 448, 448, 455, 0, 455, 0, 319, 319, 477, 319, 319, 319, 491, 319, 491, 491,
  491, 491, 491, 491, 448, 448, 448, 517, 448, 538, 538, 538, 538, 538, 561, 538, 538, 538, 538, 538, 561, 561, 561,
  561, 561, 561, 561, 561, 538, 538, 561, 53503, 53503, 491, 448, 448, 455, 448, 491, 448, 448, 448, 448, 448, 448, 448,
  448, 448, 448, 0, 0, 0, 1060, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1684, 0, 0, 0, 1161, 882, 544, 544, 544, 544, 544,
  1238, 544, 544, 544, 544, 544, 544, 544, 544, 1611, 544, 522, 522, 544, 544, 522, 522, 0, 1316, 0, 0, 0, 1322, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 2396, 0, 0, 0, 0, 0, 0, 0, 0, 1415, 0, 1417, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 0, 0,
  0, 415, 522, 522, 522, 522, 2403, 522, 522, 415, 1440, 415, 415, 415, 415, 415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2875392, 0,
  2768896, 0, 0, 0, 0, 0, 0, 0, 1466, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 415, 1094, 522, 522,
  1506, 522, 522, 522, 522, 522, 522, 522, 1515, 522, 522, 522, 522, 522, 522, 2271, 522, 522, 522, 522, 522, 522, 522,
  522, 522, 1530, 522, 522, 522, 522, 522, 522, 1699, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 1089,
  415, 415, 415, 415, 415, 415, 415, 415, 1718, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 1161, 522, 522,
  522, 1486, 522, 522, 522, 1881, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1687, 0, 0, 1967, 0, 0, 0, 0, 0, 0, 415,
  415, 415, 415, 415, 415, 415, 0, 0, 0, 974848, 0, 0, 544, 544, 2171, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  544, 1277, 544, 544, 544, 1280, 2406, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 544, 544, 544, 544, 544, 544,
  544, 544, 0, 0, 0, 544, 544, 2418, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 522, 544, 0, 0, 0, 692, 0, 0, 0,
  0, 692, 0, 698, 0, 0, 0, 0, 0, 275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1102207, 0, 1102207, 1102207, 1102207, 2539, 544,
  0, 0, 0, 0, 0, 0, 0, 0, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 544, 544, 544, 544, 0, 522, 522, 522, 522,
  2581, 522, 544, 544, 544, 544, 2585, 544, 0, 0, 0, 0, 0, 2179718, 2179718, 0, 0, 0, 0, 0, 0, 0, 0, 0, 770, 0, 0, 0, 0,
  0, 0, 49152, 0, 369, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 0, 0, 0, 0, 0, 544, 544, 544, 544, 896, 544,
  544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1567, 544, 544, 544, 544, 1176, 522, 522, 522, 522, 522, 522, 522,
  522, 522, 522, 522, 522, 522, 522, 522, 2015, 0, 1192, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  522, 522, 522, 2364, 544, 1161, 882, 544, 544, 544, 544, 544, 544, 544, 1243, 544, 544, 544, 544, 544, 544, 544, 904,
  544, 544, 544, 544, 544, 544, 544, 544, 544, 2458, 0, 2460, 0, 0, 0, 0, 1192, 522, 522, 522, 522, 544, 544, 544, 1259,
  544, 544, 544, 544, 0, 0, 0, 0, 0, 2809856, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 2158592, 2158592, 0,
  0, 0, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 2163513, 0, 0, 0, 0, 0, 2163569, 2429809, 2163569,
  2163569, 0, 0, 2390, 2391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1695, 0, 0, 0, 320, 0, 0, 0, 0, 0, 320, 0, 0, 321, 0,
  320, 0, 0, 0, 45056, 49152, 0, 0, 0, 391, 40960, 391, 391, 0, 391, 391, 321, 391, 0, 391, 414, 431, 431, 431, 431,
  431, 431, 431, 0, 0, 0, 0, 465, 0, 465, 472, 472, 478, 479, 472, 492, 472, 492, 492, 492, 492, 492, 492, 492, 492,
  414, 414, 414, 414, 492, 414, 414, 414, 492, 414, 492, 492, 492, 492, 492, 518, 492, 540, 540, 540, 540, 540, 563,
  540, 540, 540, 540, 540, 563, 563, 563, 563, 563, 563, 563, 563, 579, 579, 588, 53503, 53503, 868, 522, 522, 0, 544,
  544, 544, 544, 544, 925, 544, 544, 53503, 2, 6, 0, 0, 0, 692, 614, 0, 0, 0, 0, 0, 676, 0, 415, 415, 415, 415, 415,
  415, 415, 415, 415, 415, 1955, 415, 415, 415, 415, 522, 1990, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
  522, 522, 522, 1518, 522, 522, 716, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 1427, 415, 415, 739, 415,
  415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 0, 1161, 522, 522, 522, 522, 522, 1170, 522, 544, 544, 544,
  544, 897, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1582, 544, 544, 544, 544, 0, 0, 1318, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 1128, 0, 0, 273, 274, 0, 0, 0, 0, 0, 0, 0, 603, 0, 0, 0, 0, 0, 0, 1678, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 1340, 0, 0, 0, 0, 0, 1346, 415, 415, 415, 415, 415, 415, 0, 0, 693, 522, 522, 522, 522, 522, 522, 522, 1528,
  522, 522, 522, 522, 522, 522, 522, 522, 522, 1798, 522, 522, 522, 522, 522, 522, 522, 872, 522, 0, 544, 544, 544, 544,
  544, 544, 929, 544, 53503, 2, 6, 0, 0, 0, 703, 0, 0, 0, 0, 0, 627, 0, 0, 0, 0, 0, 0, 1070, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1122, 0, 0, 0, 0, 415, 415, 415, 415, 415, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2362, 522, 522, 544,
  544, 0, 0, 0, 335872, 0, 0, 0, 0, 0, 0, 0, 415, 415, 415, 415, 415, 415, 2251, 415, 0, 522, 1492, 522, 522, 522, 522,
  522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 2158, 522, 522, 544, 544, 544, 544, 1561, 544, 544, 544, 544, 544,
  544, 544, 544, 544, 544, 544, 1831, 544, 544, 544, 544, 1587, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
  544, 544, 544, 544, 1848, 415, 415, 415, 415, 415, 415, 415, 1720, 415, 415, 415, 415, 415, 415, 415, 415, 1721, 1722,
  415, 415, 415, 415, 415, 415, 544, 1836, 1837, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 1279,
  544, 544, 2014, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 544, 544, 544, 544, 544, 544, 1270, 544, 544, 544, 544, 544, 544,
  544, 544, 544, 1258, 544, 544, 1261, 544, 544, 544, 2203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1893, 49152, 0,
  0, 0, 0, 40960, 0, 0, 0, 0, 0, 0, 0, 406, 0, 0, 0, 0, 1020, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1357, 1358, 0, 1360, 0,
  1085440, 0, 325, 0, 0, 1085440, 0, 0, 0, 0, 0, 1085440, 0, 0, 0, 0, 0, 1085440, 0, 1085440, 0, 0, 0, 1085440, 1085820,
  0, 0, 0, 1085440, 0, 0, 1085440, 0, 0, 0, 0, 0, 1085440, 0, 0, 0, 1085440, 1085440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1461, 0, 0, 0, 0, 0, 0, 1085820, 0, 0, 0, 0, 1085820, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1747, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2158592, 2158592, 2158592, 2158592, 2162688, 2162688, 2162688, 0, 1085440, 0,
  1085440, 0, 1085440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1886, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1666, 0, 0, 0, 0, 0, 0, 0, 0,
  1673, 0, 0, 1085440, 1085440, 1085440, 0, 0, 0, 0, 0, 0, 1085440, 1085440, 0, 0, 0, 0, 274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 2, 4263936, 3, 94212, 5, 6, 0, 0, 0, 0, 0, 0, 307200, 0, 0, 2105344, 2162688, 2162688, 2162688, 2162688,
  2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2163567, 0, 2162688, 2551808,
  2560000, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3092480, 2162688, 2551808, 2560000,
  2163570, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 3067904, 2162688, 2162688, 2162688,
  2162688, 2162688, 2162688, 2162688, 2162688, 0, 0, 0, 0, 90112, 2162688, 2428928, 2162688, 2162688, 2162688, 2162688,
  2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 4263936, 0, 0, 0,
  0, 1036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1408, 0, 0, 0, 0, 0, 1093632, 0, 1093632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 1711, 0, 0, 415, 1094081, 1094081, 1094081, 1094081, 1094081, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 0, 0, 0,
  0, 0, 1097728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1920, 0, 1101824, 325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 1359, 0, 0, 0, 0, 1101824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1390, 0, 0, 381, 1102207, 0, 0, 0, 381, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1102207, 1102207, 1102207, 1102207, 1102207, 1102207, 1102207, 1102207, 1102207, 1102207, 1102207,
  1102207, 1102207, 1102207, 1102207, 1102207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 167936, 167936, 0, 0, 2162688,
  2162688, 2162688, 2162688, 2162688, 3067904, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688, 2162688,
  1225, 0, 0, 0, 719, 0, 0, 0, 0, 0, 0, 0, 0, 0, 644, 415, 415, 415, 415, 415, 415, 0, 0, 0, 522, 522, 522, 522, 522,
  522, 522, 2502, 522, 2504, 544, 544, 544, 544, 0, 1228, 2162688, 2441216, 2449408, 2162688, 2162688, 2162688, 2162688,
  2162688, 2162688, 2162688, 2162688, 2162688, 2621440, 2162688, 2162688, 2162688, 237568, 2162688, 2162688, 2162688,
  2162688, 2162688, 2162688, 2162688, 2162688, 0, 2, 6, 0, 0, 0, 0, 2206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1683, 0, 0,
  0, 0, 106496, 106496, 106496, 106496, 106496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200704, 0, 200704, 200704, 200704
);

(:~
 : The DFA-state to expected-token-set mapping.
 :)
declare variable $p:EXPECTED as xs:integer+ :=
(
  731, 734, 736, 734, 740, 744, 748, 752, 756, 1046, 768, 2055, 2038, 773, 1046, 2064, 779, 783, 787, 1046, 796, 1966,
  1593, 894, 1046, 1399, 882, 851, 865, 801, 805, 1046, 1030, 1969, 894, 2064, 810, 882, 815, 865, 821, 933, 1046, 797,
  892, 825, 830, 882, 836, 865, 839, 1046, 1046, 844, 843, 882, 832, 865, 854, 1046, 1573, 848, 883, 864, 869, 1046,
  875, 811, 817, 1046, 879, 887, 898, 904, 890, 913, 917, 1405, 1402, 907, 909, 921, 925, 926, 930, 939, 943, 947, 951,
  955, 1046, 1712, 1046, 1302, 1247, 1046, 1046, 1046, 1378, 1947, 1046, 1046, 1046, 1724, 1046, 1046, 1046, 1046, 1046,
  1046, 1542, 1046, 1046, 1046, 900, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 959, 1046, 1046, 1046,
  1046, 1046, 1046, 1046, 1046, 964, 1046, 1046, 1046, 1046, 1046, 1046, 1515, 1046, 1046, 1046, 1046, 1598, 1046, 1046,
  1046, 1598, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 960, 1272, 1046, 1275, 1127, 969, 973,
  977, 981, 985, 1046, 1528, 991, 995, 1003, 1620, 1007, 2262, 1011, 1015, 1046, 1047, 1021, 1028, 1034, 1203, 1039,
  1046, 1045, 1626, 1051, 1046, 1046, 1061, 1069, 1034, 2335, 1046, 2030, 1046, 1344, 1076, 1046, 1046, 1080, 1562,
  1462, 1046, 1826, 1084, 1483, 1089, 1046, 1116, 1891, 1098, 1046, 1201, 2398, 1108, 2291, 1113, 1120, 1241, 1835,
  1046, 2211, 1605, 1125, 1131, 1137, 1141, 2253, 2466, 1916, 2505, 1910, 2255, 1145, 2271, 1913, 1046, 2008, 1152,
  1647, 1157, 1426, 1161, 1165, 1169, 1757, 1046, 1176, 1607, 1180, 1187, 1191, 1195, 1207, 2381, 1024, 1046, 1211,
  1287, 1614, 1218, 1215, 1225, 1046, 1617, 1046, 1229, 1239, 1245, 1251, 1255, 1221, 1259, 1266, 1046, 1232, 1046,
  1279, 1285, 1325, 1291, 1295, 1299, 1308, 1046, 1311, 1046, 1318, 1322, 999, 1331, 1339, 1343, 1783, 1348, 1353, 1384,
  1363, 1367, 1533, 1374, 1382, 1388, 1392, 1335, 1356, 1104, 1396, 1409, 1416, 1423, 1430, 1434, 1438, 1442, 1370,
  1446, 1450, 1046, 1101, 1281, 1459, 1466, 1470, 1474, 1478, 1046, 1482, 1487, 1493, 2315, 1497, 1501, 1519, 1513,
  1523, 1527, 1532, 1537, 1548, 1552, 1556, 2432, 1560, 1566, 1841, 1572, 1944, 1673, 1808, 1577, 1581, 1588, 1642,
  1856, 1592, 1085, 1597, 1602, 1041, 1148, 1639, 1667, 1611, 1937, 1624, 2445, 1630, 1046, 1057, 1489, 1636, 1646,
  2424, 1046, 2427, 1153, 1183, 1651, 1654, 1659, 2421, 1065, 1664, 2430, 1671, 1677, 1681, 1685, 1133, 1262, 1689,
  1959, 1693, 1697, 1701, 860, 1705, 1709, 1046, 2025, 775, 1730, 1734, 1738, 1742, 1746, 1750, 2312, 1172, 1755, 1761,
  1777, 1770, 1412, 1774, 1790, 1781, 1510, 2488, 1063, 1787, 1794, 1801, 1805, 2350, 1046, 2332, 1815, 1660, 2356,
  1812, 1987, 1873, 1821, 1825, 1889, 1046, 1984, 2265, 1655, 1830, 1834, 1839, 1121, 1855, 1957, 1046, 1903, 1046,
  2000, 1845, 1851, 1897, 987, 1046, 2390, 1046, 1860, 2044, 1853, 1864, 2390, 769, 1419, 1840, 2070, 1871, 1877, 2397,
  1881, 2217, 1882, 2237, 790, 1886, 857, 792, 1895, 1046, 1046, 1046, 1901, 1907, 1920, 1924, 1928, 1932, 1936, 2455,
  2227, 1941, 1304, 1954, 2476, 1963, 1973, 1977, 2234, 2450, 1544, 1981, 965, 2471, 2481, 1991, 1046, 1998, 1751, 2004,
  2007, 2012, 1867, 1046, 2016, 764, 2020, 2493, 2029, 2294, 2034, 2037, 2149, 2301, 1071, 2278, 2042, 2493, 2029, 2091,
  2048, 1994, 2285, 2052, 2059, 2063, 2068, 1046, 2074, 2078, 2082, 2086, 2498, 2090, 2095, 2099, 1072, 2103, 2321,
  2107, 2375, 759, 2114, 2111, 2118, 2122, 2126, 2130, 2134, 2138, 2142, 2146, 1046, 2362, 1046, 2153, 2157, 2161, 2165,
  2168, 1046, 1504, 2174, 2178, 1584, 1198, 2182, 2186, 2190, 2194, 1046, 2198, 1235, 2205, 2215, 2221, 1507, 2225,
  1847, 1046, 2231, 2241, 2368, 1359, 2247, 2251, 2259, 2275, 1046, 2282, 1046, 1797, 2289, 1568, 2201, 2298, 1455,
  2305, 1046, 2309, 1046, 1950, 2319, 2325, 2329, 1766, 2339, 2170, 1631, 2344, 1109, 1094, 2208, 2293, 2348, 2268,
  1092, 2354, 2360, 2366, 2372, 2379, 2385, 1054, 2389, 1314, 1625, 1453, 1046, 1046, 1046, 1046, 1046, 1046, 1046,
  2394, 2402, 2406, 2410, 2414, 2418, 1046, 1726, 1046, 2243, 1715, 997, 1721, 2436, 1327, 2440, 2444, 1017, 1046, 1046,
  1764, 1046, 1718, 1540, 1046, 2449, 1349, 1269, 1046, 2454, 1046, 935, 1046, 2459, 1046, 1349, 1046, 1046, 2463, 1046,
  2470, 1046, 2475, 2342, 2480, 1349, 1046, 1046, 2485, 1817, 1046, 2492, 1333, 1046, 762, 1046, 2024, 2497, 935, 1377,
  2022, 1046, 2502, 806, 1046, 1046, 1035, 826, 1046, 1046, 871, 1046, 871, 1046, 1046, 1046, 1046, 1046, 1632, 2509,
  2584, 2513, 2522, 2522, 2522, 2522, 2517, 2521, 2529, 2522, 2527, 2536, 2533, 2523, 2540, 2544, 2547, 2548, 2552,
  2556, 2560, 2564, 2568, 2572, 2576, 2605, 2634, 2917, 2628, 4443, 2917, 2641, 2917, 2917, 4889, 4507, 4340, 2917,
  2917, 2917, 2636, 3370, 2588, 2917, 2917, 2635, 2917, 3371, 3191, 3192, 2592, 2596, 2654, 2602, 2613, 2663, 2619,
  2632, 2917, 2679, 2677, 2917, 4123, 2917, 3242, 2917, 2917, 2917, 2676, 2597, 2660, 2725, 2669, 2775, 2917, 2917,
  2917, 2681, 3370, 3192, 3192, 3192, 2654, 3271, 2695, 2654, 2654, 2741, 2732, 2654, 2689, 3193, 2706, 3371, 2917,
  2917, 2917, 2682, 3370, 2722, 3192, 3192, 2717, 2713, 3271, 2711, 2654, 2654, 2656, 2725, 2707, 3372, 2917, 2917,
  3369, 3370, 3371, 2917, 3986, 3192, 2692, 2653, 2654, 2655, 3194, 2917, 2679, 2678, 2917, 2683, 3802, 3806, 2696,
  2654, 2654, 2654, 2654, 2654, 2742, 2917, 2917, 2734, 2917, 3097, 2648, 2917, 2721, 3367, 3372, 4522, 3192, 3192,
  3192, 3192, 2615, 3192, 3193, 2654, 2654, 2665, 2917, 3097, 3370, 3370, 2648, 2917, 2598, 2732, 2917, 2917, 2864,
  2917, 2649, 2723, 3192, 2726, 2698, 4429, 2730, 2738, 2746, 3191, 2725, 2654, 2732, 4656, 2724, 2654, 2732, 2749,
  4328, 4928, 2753, 2757, 2774, 2774, 2774, 2761, 2765, 2768, 2774, 2774, 2634, 2917, 2917, 2683, 2917, 2774, 2781,
  2772, 2779, 2785, 2789, 2793, 2797, 2801, 2803, 2807, 2811, 2815, 2818, 2825, 2829, 2833, 2988, 3483, 2841, 4754,
  2917, 2917, 2917, 2870, 3665, 2917, 2917, 2917, 2912, 3943, 2909, 3603, 2923, 2926, 2930, 2933, 2937, 2941, 2943,
  2947, 2949, 2953, 2957, 3181, 2966, 4137, 3066, 2917, 2917, 2917, 4749, 2976, 3601, 2917, 2701, 3378, 3472, 2917,
  2917, 2917, 4816, 4732, 3211, 2980, 2917, 4646, 4220, 2987, 4095, 2917, 2994, 4983, 3003, 4146, 4359, 3581, 3010,
  2917, 2917, 2917, 5000, 3072, 2917, 2700, 2917, 2917, 4911, 3185, 3015, 4097, 2917, 2917, 2919, 2673, 3454, 2917,
  2917, 2917, 2914, 3913, 3023, 2917, 2917, 2989, 2917, 3029, 2917, 2917, 2917, 2917, 2624, 4020, 2917, 3701, 2917,
  2917, 4920, 2917, 2967, 2917, 3510, 4767, 4327, 2917, 3483, 2917, 2917, 2989, 4528, 3547, 3434, 2917, 2917, 3006,
  2917, 4295, 4768, 2917, 2917, 3065, 3071, 2917, 2917, 4792, 4495, 2917, 2917, 2917, 2962, 4020, 3700, 3692, 2917,
  2982, 4764, 4510, 4879, 4887, 4289, 3651, 3077, 2917, 2995, 3293, 2917, 3038, 2967, 3382, 3972, 2917, 2917, 2917,
  2983, 3547, 3551, 3447, 2917, 3072, 2917, 3548, 3169, 3552, 2917, 2917, 4038, 3651, 3085, 2917, 2917, 3041, 2895,
  3665, 4129, 2917, 2917, 3080, 2917, 3090, 2917, 3550, 3448, 3169, 3552, 2917, 3652, 3964, 2969, 2968, 2917, 3098,
  3725, 3771, 3247, 2917, 2917, 2917, 2988, 3103, 2917, 2917, 3107, 3120, 3123, 3127, 3130, 3132, 3132, 3132, 3136,
  3137, 3137, 3141, 2917, 3098, 3877, 3882, 4688, 2917, 2917, 2626, 3707, 3908, 3150, 2917, 3099, 3770, 2905, 2917,
  4663, 3299, 3154, 3294, 3773, 3158, 3162, 3439, 3167, 3437, 2917, 3163, 4603, 2917, 3170, 2917, 2917, 3019, 3036,
  3174, 2917, 2972, 3180, 3198, 2917, 2917, 4815, 3221, 3227, 3059, 2917, 3213, 2853, 2917, 3213, 2917, 3418, 3058,
  2917, 3281, 3233, 4668, 4668, 2917, 3931, 3305, 3288, 2917, 3228, 3832, 3694, 3246, 3255, 2917, 2917, 3084, 2917,
  2917, 4766, 2917, 2917, 3097, 2852, 2627, 2917, 2917, 4007, 3395, 3453, 3823, 4834, 4943, 2917, 2960, 2917, 3228,
  3978, 3494, 2860, 3251, 3260, 2917, 3235, 3235, 2917, 3241, 4139, 2917, 2874, 2883, 2887, 2959, 2959, 2917, 2917,
  3098, 2917, 3895, 3267, 2917, 2917, 3204, 3209, 2627, 3411, 2636, 3212, 4783, 3275, 2917, 2643, 4945, 4071, 2918,
  2917, 3256, 2917, 2917, 2915, 3807, 2859, 3285, 3298, 2917, 3303, 2901, 2917, 3312, 2917, 3311, 2959, 2643, 2917,
  4912, 3772, 2917, 4764, 2917, 3323, 2917, 2917, 3263, 2917, 3765, 3825, 2917, 2644, 2917, 2917, 3361, 2888, 4069,
  2918, 2917, 2898, 3309, 2917, 2917, 2917, 3055, 2904, 2917, 2917, 2917, 3262, 2642, 3349, 3897, 2917, 3365, 3376,
  3553, 2917, 3873, 3751, 3320, 3453, 3329, 2643, 3335, 2917, 3339, 2888, 3445, 3452, 3458, 3357, 2917, 2917, 2642,
  2917, 2917, 2917, 4456, 2961, 3898, 2917, 3324, 2624, 2917, 2624, 3038, 2998, 3766, 3331, 3347, 2859, 3356, 3491,
  2917, 3391, 2917, 3368, 2648, 3192, 2654, 2699, 3270, 3194, 2697, 3073, 3931, 3399, 2917, 3931, 3912, 2916, 3917,
  3405, 3415, 3926, 2917, 3428, 2917, 4652, 3352, 2917, 3351, 2917, 3447, 3693, 3116, 3625, 2996, 4739, 4849, 4847,
  3261, 3422, 4470, 4469, 3261, 3445, 3660, 3659, 3443, 3658, 3657, 3464, 4507, 3188, 4507, 2990, 2970, 3470, 2917,
  3493, 2917, 2917, 4796, 4801, 4483, 4540, 3476, 2917, 3495, 2917, 4742, 3482, 3487, 3499, 3507, 3514, 3518, 3521,
  3525, 3529, 3531, 3535, 3536, 3540, 3541, 3542, 3546, 3291, 2917, 2917, 2917, 3278, 4539, 3558, 4156, 2917, 3746,
  3040, 4710, 2917, 4261, 3586, 3563, 2917, 4621, 3619, 3797, 3011, 3568, 3261, 4553, 3692, 2917, 3552, 2891, 2917,
  3573, 4926, 2917, 3596, 2917, 2917, 3409, 2917, 3572, 3579, 3585, 3590, 3607, 2917, 2917, 3613, 3623, 2917, 2917,
  2917, 3325, 4034, 2917, 2917, 2917, 3343, 3993, 3223, 3771, 2917, 3615, 2917, 2917, 4856, 2917, 4423, 2917, 3431,
  2917, 3501, 3629, 2918, 3650, 2917, 3736, 3635, 2917, 2917, 3642, 3670, 3674, 2917, 2917, 3460, 2917, 4923, 4844,
  2917, 2917, 3631, 4789, 3684, 2917, 2917, 2917, 3368, 2917, 4711, 2917, 3502, 3699, 3791, 3790, 2917, 3676, 2917,
  4989, 4396, 3552, 3261, 4399, 3715, 2917, 2917, 2917, 3370, 3721, 2917, 2917, 2917, 3407, 2917, 4823, 4823, 2917,
  3687, 2917, 2917, 3025, 4690, 4256, 2917, 2626, 2917, 3728, 3217, 2917, 3176, 3239, 2917, 3205, 2917, 4000, 3763,
  2917, 2917, 2917, 3491, 3035, 3740, 2853, 2917, 2917, 2917, 3503, 3648, 2917, 4703, 2917, 3734, 4110, 2917, 3705,
  3664, 4824, 4627, 2917, 2917, 2917, 3554, 3735, 3647, 2917, 4626, 2917, 2917, 2917, 3574, 3777, 2917, 2917, 2917,
  3575, 3770, 2917, 2917, 3649, 2917, 4104, 3552, 3079, 3552, 2917, 2917, 3691, 2917, 4080, 2917, 2917, 2997, 4529,
  3772, 2917, 3789, 3051, 3783, 2917, 4078, 3796, 2866, 2917, 2865, 2682, 2848, 2917, 2843, 2734, 2733, 2917, 3802,
  2682, 2681, 2918, 2680, 2682, 3979, 2734, 3979, 2734, 3811, 3813, 2917, 3785, 2847, 2917, 2734, 3619, 2917, 2836,
  4987, 2917, 2837, 3200, 2917, 2858, 2917, 2917, 2917, 4499, 3489, 2917, 4718, 3817, 3037, 2917, 3821, 3829, 4809,
  3837, 3841, 3844, 3848, 3852, 3859, 3857, 3853, 3863, 3866, 3867, 3871, 2917, 2917, 2917, 3592, 4057, 2700, 2917,
  2917, 3896, 3254, 2733, 4851, 2999, 2917, 3806, 2917, 2917, 4797, 4867, 3031, 3893, 3902, 3906, 3924, 3930, 4233,
  2917, 3887, 2917, 4439, 3953, 4310, 2917, 2917, 3931, 3316, 2682, 4654, 4262, 2917, 3936, 2917, 3940, 2917, 4675,
  3962, 2917, 3948, 4831, 2853, 4681, 4643, 3968, 3976, 3983, 2917, 3990, 2917, 3993, 3559, 4157, 3883, 2917, 2701,
  2917, 4018, 2917, 2917, 3946, 2917, 3091, 2917, 4038, 3991, 3599, 2917, 2917, 2917, 3651, 4747, 2917, 3098, 3638,
  4054, 2917, 2917, 2917, 3666, 4028, 4261, 2917, 2917, 2917, 3680, 4086, 4092, 2917, 2917, 3949, 4722, 4027, 4109,
  2917, 2917, 3992, 2917, 2917, 2917, 3711, 3564, 3692, 3489, 3428, 2917, 4748, 4114, 2917, 4040, 2609, 4022, 2917,
  4701, 2917, 2917, 4032, 2917, 3039, 4130, 3049, 3143, 4072, 2917, 2917, 4817, 2917, 3049, 3491, 3060, 2917, 4044,
  3552, 2917, 3448, 2917, 3493, 2679, 2917, 2917, 4058, 3992, 3931, 4200, 2917, 2917, 4066, 2917, 4128, 4205, 2677,
  4249, 2917, 4508, 4507, 4655, 4507, 2917, 3095, 2917, 4250, 4134, 4143, 3971, 4153, 4420, 4401, 4163, 4167, 4171,
  4175, 4179, 4184, 4188, 4180, 4192, 4192, 4194, 2917, 2917, 2917, 3756, 4039, 2608, 4354, 2917, 4050, 4050, 2917,
  3645, 2988, 2917, 2859, 4841, 4723, 3067, 2917, 4210, 2917, 4062, 3552, 2917, 3801, 2917, 4310, 4219, 4224, 2917,
  4098, 4296, 2640, 2917, 2917, 3985, 4230, 4450, 4237, 4238, 4242, 2917, 3609, 4248, 4260, 4347, 4267, 2917, 4124,
  4048, 2917, 4026, 3406, 3502, 3717, 4275, 2917, 4411, 2917, 2917, 4198, 4244, 4322, 2917, 2917, 4076, 2917, 4279,
  2917, 2917, 3425, 2917, 2917, 2917, 3894, 3931, 4200, 2917, 4423, 4288, 2917, 2917, 4293, 4369, 2820, 2917, 2917,
  4087, 2917, 2917, 2917, 4336, 4280, 2917, 2917, 2917, 3920, 4321, 2917, 2917, 3401, 2917, 2917, 2917, 3984, 4609,
  3145, 2917, 2917, 4108, 2917, 4320, 2917, 2917, 2820, 4326, 2917, 3005, 2917, 4149, 2917, 2580, 4413, 4295, 2917,
  4426, 4366, 2917, 2917, 2917, 3985, 4243, 4303, 2917, 2917, 4114, 2917, 4010, 4332, 2917, 4410, 4412, 2917, 4200,
  4205, 4344, 4352, 2623, 2684, 4358, 3061, 2917, 4363, 4379, 2917, 2917, 2917, 4009, 4863, 4332, 3146, 3552, 3387,
  4205, 4344, 4385, 4611, 2917, 2917, 4393, 2821, 4618, 4206, 4417, 2685, 3067, 4467, 3086, 4448, 4454, 4460, 4474,
  2917, 4480, 4489, 3110, 2970, 4283, 4281, 4444, 4463, 4476, 4475, 4516, 4088, 4283, 4282, 4462, 4281, 4505, 4284,
  4088, 4515, 4283, 3112, 4485, 3112, 4485, 2877, 2879, 3370, 4520, 2917, 4199, 2917, 4307, 4526, 4533, 3833, 4537,
  4544, 4548, 4559, 4563, 4567, 4571, 4575, 4579, 4583, 4587, 4589, 4593, 4595, 2917, 2917, 4115, 4871, 3324, 3872,
  3750, 3694, 4599, 2917, 3954, 3407, 4607, 3889, 2917, 4615, 4631, 4637, 4633, 4650, 2917, 4660, 2917, 2854, 4673,
  2917, 4679, 4685, 2917, 4694, 4747, 3050, 2917, 3873, 3751, 4883, 2917, 4437, 3410, 2917, 4857, 3090, 2917, 3549,
  4717, 2917, 4762, 2917, 2917, 4119, 4109, 4640, 2917, 2917, 4698, 4707, 4715, 2917, 2917, 4204, 2917, 2917, 4727,
  4736, 2917, 4254, 4624, 2917, 4114, 2905, 4756, 2890, 2890, 2917, 2917, 4226, 2917, 3235, 3393, 2917, 4753, 2917,
  4760, 2917, 2917, 4249, 2917, 2971, 2970, 4772, 2917, 4803, 2917, 4263, 4148, 2917, 2889, 4816, 2917, 2917, 4898,
  4129, 2971, 4509, 4655, 3796, 2627, 4312, 2917, 4294, 2917, 4008, 2917, 4776, 4780, 2917, 4295, 4904, 4348, 2625,
  2625, 2917, 2917, 4296, 2917, 2917, 2917, 4010, 4882, 4435, 4755, 2917, 4316, 2609, 2622, 4807, 4813, 2624, 4821,
  2917, 4828, 4780, 2917, 4334, 4338, 2917, 3792, 2917, 3736, 2890, 2626, 2917, 2917, 4405, 4409, 3261, 4855, 3323,
  3229, 3833, 4861, 3047, 2917, 4371, 4014, 2917, 4003, 3168, 3045, 3447, 4296, 4295, 2917, 4380, 2917, 2917, 4875,
  4780, 2917, 4893, 2917, 2917, 4501, 3997, 4902, 3408, 2917, 2917, 4539, 3878, 3090, 4389, 2917, 2917, 4551, 4555,
  4297, 4129, 2917, 2917, 4551, 4746, 4894, 2917, 4908, 2917, 4433, 3478, 3466, 4916, 4755, 2917, 2917, 4669, 4666,
  4388, 2917, 2917, 4298, 3748, 2917, 2917, 2917, 4102, 4497, 4730, 4731, 3501, 2917, 2917, 2917, 3730, 2582, 4006,
  2917, 4932, 4005, 4006, 4936, 4940, 4785, 4949, 4953, 4956, 4966, 4960, 4964, 4970, 4976, 4973, 4980, 2917, 4492,
  4081, 2917, 3755, 3742, 2917, 3760, 3240, 2917, 3781, 2917, 2917, 3656, 3664, 4837, 2917, 2917, 4836, 2917, 4994,
  2917, 3385, 4837, 2917, 2917, 2917, 4158, 4993, 2917, 2917, 2917, 4159, 4999, 2917, 2917, 2917, 4198, 4381, 2702,
  2917, 4082, 4995, 3694, 3694, 2917, 4511, 4655, 3096, 4497, 2917, 2917, 2917, 4211, 2681, 2917, 2917, 2917, 4215,
  3617, 2917, 2917, 2917, 4271, 4994, 3235, 3695, 2917, 4539, 3638, 3958, 2848, 2917, 2917, 2917, 4302, 3932, 2917,
  2917, 2917, 4375, 2641, 2917, 3931, 2917, 4655, 2917, 4508, 5498, 5686, 5430, 5356, 5157, 5015, 5033, 5051, 5151,
  5149, 5050, 5017, 5018, 5151, 5151, 5151, 5151, 5566, 5330, 5150, 5151, 5151, 5053, 5051, 5057, 5151, 5152, 5151,
  5016, 5151, 5055, 5059, 5061, 5063, 5065, 5086, 5087, 5087, 5084, 5084, 5084, 5084, 5085, 5088, 5086, 5087, 5089,
  5090, 5089, 5091, 5090, 5092, 5093, 5066, 5126, 5096, 5095, 5098, 5100, 5099, 5102, 5103, 5107, 5103, 5104, 5105,
  5951, 5134, 5686, 5430, 5356, 5022, 5111, 5044, 5693, 5693, 5693, 5004, 5136, 5713, 5713, 5713, 5937, 5124, 5124,
  5125, 5829, 5122, 5132, 5132, 5132, 5123, 5154, 5132, 5132, 5124, 5693, 5005, 5329, 5696, 5006, 5157, 5501, 5693,
  5128, 5123, 5124, 5124, 5124, 5709, 5132, 5132, 5498, 5581, 5939, 5693, 5693, 5693, 5949, 5693, 5693, 5693, 5112,
  5693, 5719, 5719, 5693, 5693, 5693, 5005, 5693, 5941, 5021, 5693, 5693, 5693, 5007, 5693, 5693, 5713, 5713, 5713,
  5714, 5693, 5129, 5132, 5132, 5132, 5132, 5154, 5124, 5067, 5491, 5123, 5124, 5067, 5132, 5132, 5123, 5830, 5132,
  5132, 5133, 5719, 5693, 5693, 5939, 5940, 5693, 5693, 5693, 5019, 5693, 5693, 5023, 5693, 5693, 5693, 5020, 5023,
  5132, 5124, 5132, 5124, 5124, 5124, 5828, 5130, 5132, 5132, 5132, 5693, 5693, 5693, 5011, 5693, 5693, 5132, 5132,
  5132, 5719, 5719, 5709, 5709, 5130, 5130, 5131, 5132, 5708, 5709, 5709, 5848, 5181, 5713, 5717, 5124, 5124, 5124,
  5154, 5132, 5132, 5132, 5132, 5830, 5693, 5693, 5693, 5022, 5693, 5707, 5124, 5154, 5132, 5123, 5124, 5132, 5830,
  5830, 5707, 5154, 5123, 5123, 5123, 5830, 5010, 5720, 5167, 5724, 5165, 5223, 5170, 5187, 5456, 5724, 5195, 5719,
  5189, 5192, 5196, 5215, 5198, 5199, 5200, 5210, 5171, 5719, 5719, 5719, 5719, 5693, 5168, 5194, 5719, 5719, 5724,
  5724, 5168, 5340, 5168, 5696, 5193, 5719, 5214, 5216, 5222, 5801, 5219, 5221, 5195, 5217, 5725, 5225, 5226, 5231,
  5230, 5230, 5229, 5228, 5228, 5228, 5233, 5237, 5236, 5236, 5235, 5236, 5239, 5239, 5243, 5241, 5236, 5693, 5010,
  5263, 5693, 5693, 5167, 5719, 5013, 5341, 5245, 5247, 5250, 5249, 5250, 5240, 5252, 5693, 5009, 5693, 5693, 5008,
  5707, 5947, 5693, 5693, 5006, 5019, 5138, 5693, 5693, 5693, 5023, 5262, 5501, 5693, 5693, 5693, 5027, 5579, 5693,
  5693, 5693, 5038, 5143, 5424, 5693, 5693, 5693, 5040, 5263, 5274, 5693, 5359, 5957, 5073, 5696, 5020, 5693, 5021,
  5949, 5714, 5693, 5714, 5693, 5948, 5073, 5451, 5404, 5938, 5693, 5693, 5693, 5046, 5693, 5181, 5338, 5335, 5073,
  5693, 5038, 5045, 5955, 5514, 5589, 5683, 5693, 5693, 5693, 5423, 5325, 5389, 5693, 5020, 5488, 5693, 5693, 5694,
  5693, 5693, 5693, 5693, 5006, 5007, 5670, 5339, 5621, 5282, 5282, 5283, 5288, 5284, 5290, 5291, 5291, 5285, 5293,
  5286, 5295, 5296, 5297, 5303, 5307, 5304, 5307, 5307, 5307, 5306, 5307, 5298, 5299, 5299, 5300, 5301, 5309, 5310,
  5310, 5314, 5311, 5312, 5693, 5693, 5006, 5693, 5693, 5454, 5041, 5044, 5078, 5693, 5693, 5693, 5067, 5693, 5693,
  5693, 5070, 5344, 5693, 5693, 5390, 5694, 5318, 5693, 5693, 5006, 5933, 5693, 5419, 5693, 5693, 5693, 5078, 5693,
  5067, 5475, 5693, 5693, 5693, 5079, 5693, 5693, 5693, 5081, 5484, 5431, 5693, 5693, 5020, 5953, 5693, 5834, 5356,
  5693, 5693, 5253, 5184, 5272, 5693, 5271, 5346, 5693, 5807, 5443, 5205, 5809, 5693, 5693, 5024, 5026, 5146, 5442,
  5501, 5693, 5338, 5268, 5587, 5949, 5581, 5693, 5693, 5684, 5693, 5693, 5693, 5148, 5183, 5934, 5501, 5693, 5532,
  5693, 5693, 5693, 5745, 5263, 5019, 5019, 5348, 5693, 5069, 5693, 5693, 5693, 5329, 5073, 5533, 5671, 5693, 5693,
  5693, 5073, 5949, 5333, 5693, 5693, 5693, 5124, 5920, 5501, 5693, 5693, 5040, 5625, 5263, 5521, 5920, 5693, 5693,
  5693, 5174, 5693, 5693, 5956, 5693, 5267, 5707, 5686, 5693, 5693, 5693, 5181, 5693, 5011, 5081, 5353, 5523, 5263,
  5715, 5046, 5715, 5865, 5693, 5693, 5021, 5693, 5855, 5036, 5044, 5035, 5369, 5034, 5371, 5373, 5374, 5374, 5376,
  5378, 5383, 5382, 5382, 5382, 5381, 5380, 5380, 5380, 5380, 5380, 5385, 5385, 5385, 5385, 5387, 5388, 5693, 5693,
  5043, 5693, 5693, 5825, 5010, 5400, 5693, 5047, 5436, 5162, 5693, 5047, 5421, 5422, 5693, 5693, 5435, 5506, 5693,
  5693, 5693, 5264, 5505, 5693, 5693, 5693, 5269, 5686, 5212, 5438, 5440, 5693, 5693, 5071, 5680, 5439, 5693, 5693,
  5693, 5274, 5458, 5327, 5263, 5693, 5078, 5693, 5707, 5124, 5124, 5124, 5124, 5132, 5132, 5745, 5407, 5693, 5693,
  5139, 5981, 5025, 5693, 5693, 5693, 5322, 5461, 5693, 5693, 5464, 5693, 5693, 5693, 5403, 5048, 5326, 5351, 5501,
  5163, 5469, 5693, 5693, 5159, 5499, 5473, 5693, 5693, 5693, 5328, 5184, 5447, 5501, 5693, 5693, 5159, 5693, 5682,
  5212, 5693, 5693, 5693, 5338, 5948, 5455, 5710, 5944, 5589, 5351, 5950, 5145, 5680, 5589, 5351, 5693, 5693, 5693,
  5255, 5447, 5693, 5693, 5693, 5359, 5021, 5693, 5944, 5589, 5328, 5693, 5124, 5124, 5124, 5708, 5954, 5742, 5328,
  5693, 5151, 5348, 5693, 5070, 5072, 5681, 5143, 5950, 5145, 5580, 5446, 5263, 5693, 5079, 5592, 5693, 5693, 5693,
  5433, 5446, 5693, 5693, 5693, 5418, 5693, 5694, 5486, 5045, 5955, 5679, 5514, 5866, 5693, 5693, 5177, 5693, 5693,
  5493, 5950, 5145, 5580, 5684, 5693, 5079, 5693, 5157, 5693, 5693, 5693, 5394, 5693, 5497, 5499, 5693, 5006, 5693,
  5329, 5184, 5693, 5006, 5038, 5950, 5145, 5580, 5693, 5694, 5509, 5955, 5329, 5184, 5693, 5007, 5693, 5694, 5270,
  5414, 5693, 5950, 5514, 5349, 5693, 5693, 5694, 5509, 5513, 5580, 5007, 5006, 5693, 5693, 5181, 5713, 5713, 5713,
  5713, 5693, 5693, 5454, 5943, 5693, 5693, 5184, 5316, 5428, 5693, 5517, 5693, 5161, 5693, 5693, 5850, 5693, 5520,
  5518, 5938, 5693, 5005, 5693, 5079, 5948, 5270, 5515, 5693, 5693, 5211, 5693, 5274, 5043, 5693, 5693, 5693, 5425,
  5693, 5693, 5693, 5044, 5693, 5684, 5078, 5693, 5163, 5177, 5356, 5943, 5693, 5079, 5693, 5164, 5836, 5693, 5180,
  5532, 5693, 5180, 5586, 5693, 5183, 5443, 5693, 5068, 5693, 5693, 5068, 5069, 5693, 5693, 5943, 5079, 5693, 5693,
  5263, 5693, 5693, 5527, 5693, 5693, 5693, 5428, 5319, 5707, 5938, 5693, 5693, 5319, 5693, 5022, 5078, 5693, 5707,
  5825, 5825, 5067, 5067, 5693, 5693, 5320, 5443, 5429, 5327, 5693, 5693, 5325, 5693, 5423, 5693, 5693, 5010, 5693,
  5537, 5425, 5693, 5181, 5693, 5693, 5329, 5693, 5693, 5693, 5776, 5348, 5591, 5693, 5693, 5081, 5693, 5693, 5693,
  5500, 5856, 5081, 5693, 5714, 5010, 5693, 5741, 5531, 5530, 5529, 5531, 5539, 5541, 5543, 5543, 5544, 5545, 5547,
  5549, 5550, 5557, 5550, 5559, 5551, 5561, 5561, 5563, 5561, 5562, 5561, 5561, 5561, 5561, 5552, 5553, 5553, 5553,
  5553, 5554, 5555, 5693, 5693, 5693, 5444, 5444, 5263, 5693, 5693, 5693, 5157, 5715, 5011, 5693, 5158, 5428, 5841,
  5602, 5693, 5693, 5693, 5479, 5582, 5693, 5696, 5572, 5578, 5693, 5693, 5693, 5493, 5479, 5467, 5693, 5864, 5693,
  5693, 5335, 5533, 5190, 5693, 5693, 5693, 5494, 5693, 5863, 5693, 5693, 5357, 5574, 5361, 5363, 5365, 5693, 5259,
  5693, 5693, 5599, 5693, 5693, 5600, 5362, 5364, 5693, 5693, 5357, 5818, 5693, 5692, 5693, 5693, 5359, 5159, 5693,
  5693, 5359, 5693, 5693, 5691, 5693, 5693, 5359, 5943, 5044, 5005, 5693, 5693, 5359, 5959, 5479, 5412, 5319, 5693,
  5263, 5007, 5021, 5595, 5412, 5319, 5693, 5266, 5693, 5693, 5006, 5588, 5693, 5693, 5693, 5521, 5920, 5831, 5693,
  5693, 5693, 5525, 5938, 5693, 5693, 5470, 5693, 5693, 5693, 5532, 5534, 5837, 5693, 5012, 5598, 5693, 5838, 5693,
  5693, 5366, 5501, 5693, 5694, 5604, 5717, 5450, 5178, 5687, 5693, 5269, 5686, 5263, 5079, 5356, 5693, 5693, 5693,
  5158, 5693, 5693, 5494, 5693, 5693, 5693, 5533, 5671, 5693, 5510, 5693, 5693, 5396, 5693, 5694, 5613, 5202, 5685,
  5756, 5212, 5693, 5693, 5409, 5693, 5175, 5686, 5757, 5501, 5011, 5693, 5159, 5499, 5278, 5693, 5693, 5151, 5581,
  5423, 5696, 5693, 5693, 5693, 5568, 5614, 5685, 5481, 5523, 5501, 5693, 5180, 5039, 5693, 5693, 5444, 5693, 5021,
  5499, 5693, 5693, 5694, 5613, 5175, 5686, 5454, 5614, 5480, 5405, 5212, 5693, 5693, 5428, 5693, 5497, 5428, 5534,
  5328, 5693, 5693, 5693, 5422, 5613, 5755, 5405, 5263, 5523, 5693, 5745, 5263, 5693, 5693, 5449, 5693, 5565, 5581,
  5693, 5693, 5693, 5565, 5581, 5776, 5693, 5693, 5693, 5601, 5609, 5693, 5006, 5019, 5693, 5022, 5693, 5693, 5693,
  5605, 5693, 5565, 5693, 5023, 5006, 5019, 5423, 5535, 5627, 5676, 5693, 5629, 5693, 5693, 5477, 5498, 5328, 5693,
  5444, 5536, 5693, 5184, 5020, 5428, 5693, 5693, 5022, 5632, 5631, 5634, 5952, 5636, 5637, 5637, 5639, 5641, 5643,
  5645, 5647, 5646, 5647, 5649, 5651, 5651, 5651, 5652, 5651, 5656, 5651, 5651, 5654, 5651, 5658, 5658, 5658, 5658,
  5660, 5660, 5660, 5658, 5661, 5693, 5693, 5693, 5609, 5444, 5693, 5776, 5006, 5020, 5423, 5423, 5693, 5183, 5425,
  5677, 5666, 5334, 5669, 5693, 5839, 5668, 5690, 5693, 5693, 5694, 5455, 5710, 5944, 5581, 5693, 5667, 5693, 5693,
  5689, 5662, 5507, 5693, 5693, 5499, 5048, 5728, 5693, 5693, 5693, 5678, 5695, 5840, 5701, 5693, 5270, 5686, 5809,
  5693, 5727, 5693, 5693, 5499, 5517, 5082, 5693, 5693, 5693, 5694, 5039, 5693, 5730, 5732, 5669, 5427, 5693, 5426,
  5693, 5280, 5073, 5693, 5038, 5693, 5693, 5928, 5953, 5945, 5357, 5693, 5693, 5693, 5697, 5180, 5428, 5413, 5606,
  5851, 5501, 5693, 5693, 5534, 5693, 5693, 5738, 5693, 5500, 5693, 5581, 5693, 5533, 5609, 5670, 5693, 5693, 5565,
  5693, 5022, 5260, 5693, 5693, 5693, 5713, 5713, 5717, 5693, 5744, 5693, 5693, 5693, 5714, 5010, 5276, 5772, 5212,
  5693, 5324, 5693, 5808, 5348, 5693, 5693, 5026, 5693, 5693, 5693, 5357, 5173, 5182, 5962, 5411, 5459, 5501, 5693,
  5949, 5693, 5949, 5581, 5693, 5356, 5956, 5022, 5693, 5693, 5359, 5043, 5693, 5711, 5263, 5693, 5693, 5584, 5356,
  5693, 5693, 5938, 5693, 5081, 5696, 5693, 5696, 5275, 5760, 5276, 5459, 5693, 5693, 5608, 5693, 5180, 5444, 5425,
  5677, 5693, 5693, 5693, 5670, 5693, 5696, 5717, 5760, 5754, 5759, 5459, 5693, 5329, 5611, 5693, 5693, 5693, 5410,
  5478, 5618, 5693, 5693, 5614, 5523, 5693, 5693, 5693, 5573, 5714, 5693, 5693, 5020, 5693, 5693, 5423, 5693, 5425,
  5693, 5332, 5443, 5693, 5693, 5693, 5141, 5181, 5759, 5693, 5693, 5617, 5522, 5735, 5693, 5693, 5715, 5693, 5684,
  5277, 5693, 5693, 5693, 5721, 5684, 5693, 5180, 5425, 5019, 5693, 5693, 5693, 5752, 5329, 5534, 5693, 5693, 5693,
  5180, 5670, 5423, 5715, 5693, 5338, 5675, 5327, 5671, 5693, 5764, 5766, 5501, 5693, 5343, 5688, 5693, 5693, 5693,
  5109, 5590, 5956, 5693, 5841, 5609, 5693, 5693, 5693, 5454, 5947, 5768, 5392, 5393, 5769, 5774, 5790, 5790, 5790,
  5775, 5423, 5397, 5778, 5398, 5398, 5398, 5780, 5786, 5787, 5787, 5787, 5781, 5792, 5794, 5790, 5793, 5789, 5791,
  5796, 5787, 5782, 5782, 5782, 5782, 5783, 5784, 5693, 5694, 5762, 5465, 5693, 5693, 5841, 5693, 5325, 5693, 5693,
  5670, 5693, 5694, 5674, 5693, 5693, 5798, 5693, 5693, 5360, 5408, 5693, 5693, 5693, 5812, 5800, 5803, 5693, 5076,
  5714, 5956, 5806, 5811, 5814, 5693, 5357, 5731, 5733, 5804, 5693, 5693, 5693, 5817, 5819, 5693, 5693, 5693, 5827,
  5575, 5820, 5693, 5693, 5693, 5841, 5693, 5256, 5258, 5693, 5693, 5620, 5523, 5670, 5693, 5715, 5693, 5693, 5693,
  5474, 5865, 5693, 5815, 5939, 5693, 5798, 5693, 5360, 5800, 5263, 5693, 5043, 5576, 5833, 5693, 5693, 5693, 5855,
  5430, 5693, 5865, 5487, 5693, 5693, 5693, 5865, 5693, 5843, 5073, 5693, 5693, 5693, 5939, 5177, 5534, 5827, 5174,
  5135, 5674, 5337, 5693, 5534, 5325, 5693, 5358, 5693, 5693, 5510, 5073, 5670, 5693, 5081, 5696, 5182, 5176, 5336,
  5328, 5693, 5693, 5693, 5956, 5693, 5693, 5693, 5156, 5176, 5336, 5693, 5693, 5696, 5478, 5495, 5355, 5693, 5693,
  5451, 5948, 5693, 5670, 5715, 5039, 5823, 5500, 5693, 5865, 5823, 5501, 5693, 5581, 5693, 5672, 5953, 5693, 5693,
  5693, 5953, 5707, 5825, 5693, 5825, 5043, 5693, 5825, 5076, 5693, 5693, 5694, 5747, 5847, 5174, 5135, 5674, 5337,
  5693, 5693, 5693, 5985, 5693, 5823, 5501, 5865, 5956, 5693, 5693, 5939, 5693, 5853, 5175, 5336, 5693, 5359, 5494,
  5522, 5263, 5693, 5693, 5391, 5393, 5693, 5696, 5174, 5462, 5337, 5693, 5693, 5825, 5693, 5693, 5693, 5843, 5715,
  5006, 5865, 5956, 5693, 5939, 5841, 5693, 5073, 5693, 5357, 5693, 5707, 5124, 5124, 5154, 5693, 5942, 5693, 5693,
  5696, 5501, 5693, 5693, 5699, 5511, 5615, 5430, 5693, 5693, 5338, 5675, 5581, 5693, 5010, 5803, 5693, 5448, 5263,
  5693, 5693, 5702, 5715, 5338, 5073, 5693, 5865, 5693, 5020, 5067, 5718, 5011, 5693, 5693, 5707, 5414, 5693, 5675,
  5581, 5693, 5693, 5949, 5856, 5174, 5675, 5581, 5010, 5693, 5425, 5693, 5855, 5425, 5011, 5693, 5338, 5693, 5359,
  5614, 5481, 5416, 5693, 5693, 5038, 5573, 5693, 5693, 5038, 5748, 5430, 5693, 5693, 5693, 5707, 5693, 5693, 5693,
  5184, 5184, 5949, 5856, 5581, 5693, 5865, 5714, 5693, 5693, 5693, 5713, 5717, 5157, 5360, 5693, 5693, 5714, 5011,
  5499, 5693, 5815, 5693, 5610, 5499, 5693, 5693, 5693, 5714, 5693, 5172, 5858, 5693, 5703, 5815, 5860, 5862, 5593,
  5693, 5359, 5723, 5042, 5080, 5466, 5356, 5693, 5693, 5702, 5502, 5502, 5504, 5503, 5868, 5502, 5870, 5871, 5871,
  5871, 5873, 5875, 5877, 5879, 5880, 5882, 5880, 5884, 5892, 5893, 5894, 5886, 5891, 5890, 5889, 5896, 5897, 5887,
  5886, 5886, 5899, 5901, 5901, 5901, 5901, 5901, 5903, 5904, 5670, 5693, 5158, 5137, 5706, 5693, 5693, 5471, 5367,
  5693, 5693, 5693, 5718, 5263, 5825, 5693, 5366, 5908, 5501, 5693, 5359, 5948, 5693, 5359, 5570, 5693, 5257, 5693,
  5693, 5623, 5263, 5693, 5910, 5704, 5693, 5366, 5705, 5501, 5366, 5366, 5912, 5693, 5366, 5716, 5452, 5693, 5267,
  5693, 5319, 5401, 5938, 5914, 5693, 5693, 5693, 5735, 5693, 5693, 5693, 5707, 5124, 5028, 5030, 5501, 5693, 5403,
  5501, 5693, 5074, 5693, 5693, 5075, 5693, 5693, 5029, 5031, 5693, 5693, 5737, 5749, 5027, 5917, 5693, 5693, 5740,
  5749, 5693, 5916, 5501, 5693, 5406, 5693, 5693, 5047, 5684, 5722, 5201, 5077, 5919, 5922, 5073, 5441, 5693, 5410,
  5693, 5693, 5617, 5523, 5693, 5949, 5924, 5693, 5423, 5696, 5043, 5693, 5926, 5693, 5693, 5693, 5776, 5693, 5142,
  5204, 5326, 5501, 5693, 5693, 5693, 5694, 5931, 5954, 5693, 5044, 5693, 5693, 5005, 5946, 5147, 5031, 5693, 5428,
  5499, 5269, 5686, 5415, 5501, 5933, 5467, 5693, 5693, 5693, 5717, 5277, 5697, 5693, 5693, 5532, 5693, 5693, 5081,
  5693, 5693, 5929, 5693, 5693, 5693, 5745, 5693, 5693, 5693, 5348, 5693, 5693, 5693, 5936, 5452, 5694, 5931, 5144,
  5717, 5947, 5178, 5031, 5693, 5428, 5693, 5694, 5022, 5185, 5077, 5466, 5356, 5693, 5444, 5444, 5415, 5693, 5721,
  5771, 5501, 5693, 5693, 5693, 5939, 5771, 5073, 5441, 5073, 5206, 5693, 5693, 5815, 5022, 5776, 5693, 5693, 5046,
  5693, 5693, 5693, 5277, 5750, 5693, 5693, 5693, 5821, 5693, 5693, 5694, 5721, 5953, 5712, 5596, 5412, 5326, 5351,
  5693, 5693, 5160, 5693, 5693, 5274, 5144, 5203, 5412, 5179, 5688, 5693, 5269, 5429, 5938, 5693, 5693, 5263, 5664,
  5961, 5180, 5693, 5693, 5693, 5039, 5159, 5938, 5693, 5696, 5173, 5182, 5693, 5712, 5335, 5206, 5711, 5203, 5412,
  5326, 5693, 5696, 5274, 5712, 5693, 5499, 5693, 5158, 5670, 5693, 5684, 5138, 5670, 5696, 5693, 5693, 5845, 5693,
  5752, 5673, 5445, 5693, 5693, 5693, 5696, 5711, 5177, 5693, 5499, 5693, 5938, 5081, 5039, 5693, 5693, 5933, 5693,
  5454, 5172, 5943, 5458, 5444, 5428, 5693, 5938, 5693, 5673, 5445, 5693, 5454, 5770, 5479, 5354, 5356, 5693, 5355,
  5696, 5079, 5957, 5693, 5026, 5037, 5026, 5693, 5964, 5208, 5693, 5207, 5693, 5483, 5693, 5693, 5162, 5329, 5044,
  5044, 5044, 5112, 5113, 5114, 5114, 5115, 5966, 5116, 5116, 5976, 5118, 5968, 5118, 5119, 5119, 5120, 5120, 5120,
  5117, 5120, 5975, 5969, 5970, 5970, 5970, 5970, 5971, 5972, 5970, 5973, 5978, 5979, 5693, 5490, 5076, 5489, 5010,
  5693, 5693, 5693, 5906, 5452, 5693, 5693, 5983, 5693, 5693, 5693, 5693, 5694, 5721, 5159, 5693, 1073872896, 131072, 0,
  8, 0, 14, 0, 16, 0, 20, 112, 262146, 262160, -2147221504, -2147221504, 262144, 0, 64, 0, 128, 0, 132, 256, 0, 135,
  323840, 3670016, 33554432, -2147483648, 268566528, 131072, 257, 4740, 256, 1, 2, 0, 192, 256, 512, 0, 256, 2048, 0,
  257, 69632, 537133056, 537133056, -2147221504, 262160, 33816576, 262160, 268444864, 10560, 33816576, 278528, 278528,
  278544, 537149440, 278530, 537149440, 278530, 772014080, 32768, 0, 265, 0, 323, 129024, 2097152, 0, 331, 0, 512, 1024,
  0, 1024, 4096, 0, 1200, 168034304, 168034304, 772014080, 772014080, 168034304, -1375469568, 772014080, 235143168,
  235143168, 772014080, 772030464, 2392096, 294944, 163840, 537165856, -2147188704, 294944, 294944, -2147188674,
  -2145091522, -2145091522, 772046880, -1910210498, -2111537090, -2145091522, 12, 14, 8256, 0, 3072, 3072, 12302, 12302,
  15396, 15364, 15364, 15396, 15396, 2129952, 2129920, 32768, 32768, 32800, 163872, 12, 2129920, 2097184, 2097184,
  2129920, 2129920, 65536, 65536, 131072, 131072, 24, 0, 30, 12, 8, 64, 256, 8192, 114688, 1572864, 2097152, 524288,
  262160, 262144, 262144, 8768, 32768, 2129920, 1024, 268435456, 0, 32, 0, 36, 0, 40, 0, 48, 80, 1073774592, 16, 28,
  262160, 524304, 16, 32, 3072, 16384, 131072, 262144, 1048576, 2097152, 4194304, 0, 16384, 65536, 1048576, 0, 12292,
  1048592, 268435472, 17, 20, 1888485376, 24, 304, 17, 16, 48, 1048848, 1572880, 524304, 1048592, 16, 256, 16384,
  262144, 1572864, 6291456, 0, 17152, 12288, 304, 48, 536870912, -2147483648, 165675008, 272, 272, 16, 84, 1048592, 272,
  1114416, 16, 272, 65552, -165649452, -165649452, -165649451, -701430800, -701430800, -701431504, -701431504,
  -165649451, -701430800, -164559888, -700906508, -164535308, -164535308, -700906512, -164535312, -164535308,
  -164273164, -164535308, -164273168, -164535308, 53, 140511253, 140515349, 140539925, 140540605, 140540573, 140540573,
  -26141771, 0, 17408, 163577856, 0, 19504, 631242752, 0, 24576, -2147483648, 100663296, 536870912, 0, 28672, 239075328,
  0, 40960, 0, 49152, 65536, 1572864, 1207959552, 4, 128, 57344, 393216, 0, 69632, 17303552, 2105344, 941162496,
  941162496, 805371937, 154732609, 152635457, 689506369, 805371937, 805371937, 847314977, 154732609, 154732609,
  154867777, 152635457, 689506371, 957941825, 957941825, 957941857, -1199980544, -1199980544, -1199718400, -1199718400,
  154740803, 957941857, 154740803, 957941859, 957941857, 957941857, -1199717854, -1199717846, -1199717846, -1183201183,
  -1182938517, -1199717782, -1199717846, 1574912, 1207959552, 65536, 805306368, 0, 1638400, 1640448, 134217728, 3872768,
  0, 2097152, 33554432, 67108864, 0, 262144, 262174, 1640448, 16777216, 8192, 524288, 2097152, 25165824, 0, 524288, 16,
  21, 21, 8243200, 16777216, 2105344, 4096, 196608, 2048, 16777216, 134217728, 67108864, 536870912, 4608, 16777216,
  268435456, 1073741824, 0, 3, 0, 4, 0, 5, 16832, 688128, -1200619520, 0, 6, -2147483648, 536871168, 67109121, 525312,
  67174657, 637604097, -1507782399, -1507782399, -2145386488, -1876951032, -2145386488, -2145386456, -1507782391,
  -1507782391, -434827007, -434827007, -2145381716, -1344145085, -1344145085, -1344145077, -1344145077, 0, 2629632, 0,
  524292, 262145, 0, 526336, 525312, 0, 3407875, 3407875, 637534208, 0, 3737600, 8, 2097152, 134217728, 268435456, 4608,
  0, 294912, 0, 393216, 524288, 1048576, 8388608, 134217728, 805306368, -2147483648, -1879048192, 0, 3745792, 1380352,
  -436207616, 0, 4194304, 8388608, 0, 59392, 0, 65536, 8388608, 16777216, -1207959552, 172, 2101760, 265, 2166784,
  -1509949440, 323, 14809088, -1358954496, 0, 6291456, 939524096, 0, 1048576, 33554432, 201326592, 536870912, 16,
  131072, 524288, 524288, -2147483648, 1, 4, 16, 131088, 4096, 16777216, 536870912, 257, 131072, 2097152, 1024, 524288,
  4194304, 16777216, 1073741824, 1310720, 1610612736, 0, 6815744, 172, 0, 7979008, -1207959552, 1, 256, 32768, 131072,
  4194304, 134217728, 44, 0, 7981056, 2, 64, 384, 0, 8241152, 0, 2129920, 2, 256, 131072, 16777216, 1, 4096, 65536, 0,
  -2147483648, 0, -2147483646, -2147483646, 0, -1509949440, 0, -1476395008, 2, 2048, 8192, 655360, 4096, 114688,
  12582912, 134217728, 1, 65536, 12582912, 1, 49152, 1048576, 268435456, 536870912, 32768, 8388608, 32768, 134217728,
  1024, 131328, 131328, 0, 8388608, 33554432, 0, 65600, 16, 514, 131328, 17039368, 131328, 1073873152, 807043332,
  807043332, 806912004, 806912004, 806928388, 1074430208, 806929412, 1074440448, 1074440448, 1880785156, -1199914555,
  -1199914555, -126172731, -126172731, 1074440962, 1074440452, 1074440962, 1612349700, 1880785156, 1880785156,
  1889173780, 1880785156, 8, 262144, 33816576, 4, 256, 557056, 806354944, 11008, 4, 32, 19456, 458752, 2097152,
  1611661312, 0, 12582912, 16777216, 0, 10496, 1024, 8388608, 2, 512, 262144, 16777216, 33554432, 1073741824, 8388608,
  1073741824, 138412032, 4, 32768, 262144, 1887436800, 0, 41943040, 0, 688128, 806354944, 4, 448, 0, 50331648,
  -134217728, 0, 67108864, 1048576, 1073741824, 4, 192, 16384, 2097152, 4, 131072, 1073741824, 4, 1048576, 1226311744,
  4, 268435456, 16384, 268435456, 32768, 1048576, 16, 1048576, 536871040, 128, 131072, 1075839492, 128, 536887424,
  -1610079071, -1610079071, -2146819039, -2146950111, -2146917343, -1073208287, -1610070879, -1073077215, -1542962015,
  -1542962015, -1408744287, -1542962015, -1610062687, -1408744287, -1610062687, -1610062687, -1610062671, -1610062687,
  -1593285471, -1559731039, -1593285471, -1592859485, -1592859485, -1592857437, -1592857437, 0, 67633152, 516, 2097152,
  1, 1184, -1610612736, -1610612736, 0, 134217728, 1073741824, 8192, 262144, 2097152, 8388608, 50331648, 0, 114688,
  2097152, 12582912, 50331648, 201326592, 0, 131072, 1048576, 4194304, -1207959552, 0, -1073741824, 0, -126877696, 0, 0,
  1, 0, 2, -2147483648, 1, 1056, 50855936, 0, 138412032, 0, 30720, 2621440, 0, 32768, 32, 32, 128, 8192, 16384, 16384,
  0, 4096, 16384, 32768, 16, 16, 2, 4, 8, 16, 20, 372, 1, 24576, -1610612736, 3, 1184, 57344, 17694720, -1610612736, 4,
  512, 1, 160, -2147483648, 1, 32, 65536, 33554432, 24576, 0, 268435456, 2, 160, 1024, 8192, 2097152, 2, 128, 2, 16384,
  4194304, 402653184, 536870912, 32768, 393216, 16777216, 4, 262144, 2, 268435464, 4096, 262144, 262145, 262145, 448,
  16384, 524288, 16777216, 262145, 2359297, 0, 536870912, 524292, 3407875, 3440643, 539230225, 94850083, 94850083,
  631721011, 631721011, 3408387, 539230225, 539230225, 35913729, 2359297, 2359297, 539230225, 2359297, 572784657,
  2359297, -2145124351, 539230225, 3, 3145728, 1, 16, 524560, 538968064, 0, 538968064, 572522496, 0, 671088640,
  939524096, -2147483648, 35651584, 0, 805306368, -2145386496, 0, 1073741824, 3, 19488, 458752, 94371840, 0, 1610612736,
  8, 268435456, 16, 536870912, 3, 32, 2097152, 2129920, 0, 10240, 25165824, 67108864, 134217728, 603979776, 0,
  1879048192, 0, 17301504, 0, 33554432, 1, 262144, 3, 1048576, 2, 32, 2097184, 4, 524288, 536870912, 2, 3072, 2048,
  16384, 8388608, 32, 1073741824, 4, 131104, 1048, 0, 1880096768, 0, 16777216, 201326592, 8389656, -2147483646,
  -2147483642, -2146938874, -2146938874, 2650112, 271085568, 2650112, 141062144, -2147483642, 141062144, -2147483642,
  -1593835514, -1593835514, -1593311226, -1593835514, -2146953210, -1593835514, -2144831482, -2144831482, -2144767994,
  -2140639226, -2144833530, -2144833530, -2146953210, -2146936826, -2146936826, -2146928634, -2146953210, -2144833530,
  -2077724666, -2144831482, -2144700378, -2109935225, -2109935225, -2109933177, -2109933177, 0, 6, 20480, 6144, 524288,
  22528, 0, 94208, 0, 38, 161792, 135, 325888, -2147483648, 4096, 4194304, 536870912, 24576, 524288, 24576, 2097152, 38,
  0, 1, 6, 0, 6, 128, 1024, 4194304, 939524096, 6, 16384, 134217728, 0, 8192, 64, 64, 128, 512, 4096, 57344, 262144,
  524288, 0, 2048, 4096, 4096, 128, 256, 4096, 8192, 0, 1280, 8, 256, 8, 1024, 57344, 4352, 17152, 12318, 12334, 15620,
  15652, 68, 68, 324, 68, 4164, 15652, 15652, 15364, 8260, 15716, 15460, 46, 0, 4, 64, 12, 0
);

(:~
 : The token-string table.
 :)
declare variable $p:TOKEN as xs:string+ :=
(
  "(0)",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "URIQualifiedName",
  "PredefinedEntityRef",
  "'""""'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "CharRef",
  "NCName",
  "QName",
  "StringConstructorChars",
  "S",
  "S",
  "CommentContents",
  "PragmaContents",
  "Wildcard",
  "DirCommentContents",
  "DirPIContents",
  "CDataSectionContents",
  "EOF",
  "'!'",
  "'!='",
  "'""'",
  "'#'",
  "'#)'",
  "'$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "'/>'",
  "':'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'<![CDATA['",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'=>'",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'['",
  "']'",
  "']]>'",
  "']``'",
  "'``['",
  "'`{'",
  "'after'",
  "'all'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'any'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'child'",
  "'collation'",
  "'comment'",
  "'construction'",
  "'contains'",
  "'content'",
  "'context'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'diacritics'",
  "'different'",
  "'digit'",
  "'distance'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'entire'",
  "'eq'",
  "'every'",
  "'exactly'",
  "'except'",
  "'exponent-separator'",
  "'external'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'from'",
  "'ft-option'",
  "'ftand'",
  "'ftnot'",
  "'ftor'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'infinity'",
  "'inherit'",
  "'insensitive'",
  "'insert'",
  "'instance'",
  "'intersect'",
  "'into'",
  "'invoke'",
  "'is'",
  "'item'",
  "'language'",
  "'last'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'levels'",
  "'lowercase'",
  "'lt'",
  "'map'",
  "'minus-sign'",
  "'mod'",
  "'modify'",
  "'module'",
  "'most'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'nodes'",
  "'not'",
  "'occurs'",
  "'of'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'paragraph'",
  "'paragraphs'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'phrase'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'relationship'",
  "'rename'",
  "'replace'",
  "'return'",
  "'revalidation'",
  "'same'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'score'",
  "'self'",
  "'sensitive'",
  "'sentence'",
  "'sentences'",
  "'skip'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'stemming'",
  "'stop'",
  "'strict'",
  "'strip'",
  "'switch'",
  "'text'",
  "'then'",
  "'thesaurus'",
  "'times'",
  "'to'",
  "'transform'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unordered'",
  "'update'",
  "'updating'",
  "'uppercase'",
  "'using'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'weight'",
  "'when'",
  "'where'",
  "'wildcards'",
  "'window'",
  "'with'",
  "'without'",
  "'word'",
  "'words'",
  "'xquery'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'|'",
  "'||'",
  "'}'",
  "'}`'",
  "'}}'"
);

(:~
 : Pass a line to fn:trace, without generating a result. Actually,
 : create an empty result, but make it somehow dependent on trace,
 : so the optimizer does not eliminate the trace call.
 :
 : @param $line the line to be traced.
 : @return the empty sequence.
 :)
declare function p:trace($line as xs:string) as empty-sequence()
{
  if (trace($line, "trace")) then () else ""[.]
};

(:~
 : Add escaping to a string for being placed in serialized
 : XML attribute or element content.
 :
 : @param $s the string to be escaped.
 : @return the escaped string.
 :)
declare function p:xml-escape($s as xs:string) as xs:string
{
  replace(
  replace(
  replace($s, "&amp;", "&amp;amp;"),
              "<", "&amp;lt;"),
              '"', "&amp;quot;")
};

(:~
 : Match next token in input string, starting at given index, using
 : the DFA entry state for the set of tokens that are expected in
 : the current context.
 :
 : @param $input the input string.
 : @param $begin the index where to start in input string.
 : @param $token-set the expected token set id.
 : @return a sequence of three: the token code of the result token,
 : with input string begin and end positions. If there is no valid
 : token, return the negative id of the DFA state that failed, along
 : with begin and end positions of the longest viable prefix.
 :)
declare function p:match($input as xs:string,
                         $begin as xs:integer,
                         $token-set as xs:integer) as xs:integer+
{
  p:trace(concat("  <tokenize tokenset=""", $token-set, """>")),
  let $result := $p:INITIAL[1 + $token-set]
  return p:transition($input,
                      $begin,
                      $begin,
                      $begin,
                      $result,
                      $result mod 4096,
                      0)
};

(:~
 : The DFA state transition function. If we are in a valid DFA state, save
 : it's result annotation, consume one input codepoint, calculate the next
 : state, and use tail recursion to do the same again. Otherwise, return
 : any valid result or a negative DFA state id in case of an error.
 :
 : @param $input the input string.
 : @param $begin the begin index of the current token in the input string.
 : @param $current the index of the current position in the input string.
 : @param $end the end index of the result in the input string.
 : @param $result the result code.
 : @param $current-state the current DFA state.
 : @param $previous-state the  previous DFA state.
 : @return a sequence of three: the token code of the result token,
 : with input string begin and end positions. If there is no valid
 : token, return the negative id of the DFA state that failed, along
 : with begin and end positions of the longest viable prefix.
 :)
declare function p:transition($input as xs:string,
                              $begin as xs:integer,
                              $current as xs:integer,
                              $end as xs:integer,
                              $result as xs:integer,
                              $current-state as xs:integer,
                              $previous-state as xs:integer)
{
  if ($current-state eq 0) then
    let $result := $result idiv 4096
    let $end := $end - $result idiv 512
    let $end := if ($end gt string-length($input)) then string-length($input) + 1 else $end
    return
      if ($result ne 0) then
      (
        p:trace(concat("    <done result=""", p:xml-escape($p:TOKEN[$result mod 512]), """ begin=""", $begin, """ end=""", $end, """/>")),
        p:trace("  </tokenize>"),
        $result mod 512 - 1,
        $begin,
        $end
      )
      else
      (
        p:trace(concat("    <fail begin=""", $begin, """ end=""", $current - 1, """ state=""", $previous-state, """/>")),
        p:trace("  </tokenize>"),
        - $previous-state,
        $begin,
        $current - 1
      )
  else
    let $c0 := (string-to-codepoints(substring($input, $current, 1)), 0)[1]
    let $c1 :=
      if ($c0 < 128) then
        $p:MAP0[1 + $c0]
      else if ($c0 < 55296) then
        let $c1 := $c0 idiv 16
        let $c2 := $c1 idiv 32
        return $p:MAP1[1 + $c0 mod 16 + $p:MAP1[1 + $c1 mod 32 + $p:MAP1[1 + $c2]]]
      else
        p:map2($c0, 1, 6)
    let $current := $current + 1
    let $i0 := 4096 * $c1 + $current-state - 1
    let $i1 := $i0 idiv 16
    let $next-state := $p:TRANSITION[$i0 mod 16 + $p:TRANSITION[$i1 + 1] + 1]
    return
    (
      p:trace
      (
        string-join
        (
          (
            "    <next state=""", string($current-state), """",
            " offset=""", string($current - 1), """",
            if ($c0 lt 32 or $c0 gt 126) then
              ()
            else
              (" char=""", p:xml-escape(substring($input, $current - 1, 1)), """"),
            " codepoint=""", string($c0), """",
            " class=""", string($c1), """",
            if ($next-state lt 4096) then
              ()
            else
            (
              " result=""",
              p:xml-escape($p:TOKEN[$next-state idiv 4096 mod 512]),
              if ($next-state lt 2097152) then
                ()
              else
                (""" trailing-context-size=""", string($next-state idiv 2097152)),
              """"
            ),
            "/>"
          ),
          ""
        )
      ),
      if ($next-state > 4095) then
        p:transition($input, $begin, $current, $current, $next-state, $next-state mod 4096, $current-state)
      else
        p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
    )
};

(:~
 : Recursively translate one 32-bit chunk of an expected token bitset
 : to the corresponding sequence of token strings.
 :
 : @param $result the result of previous recursion levels.
 : @param $chunk the 32-bit chunk of the expected token bitset.
 : @param $base-token-code the token code of bit 0 in the current chunk.
 : @return the set of token strings.
 :)
declare function p:token($result as xs:string*,
                         $chunk as xs:integer,
                         $base-token-code as xs:integer)
{
  if ($chunk = 0) then
    $result
  else
    p:token
    (
      ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
      if ($chunk < 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
      $base-token-code + 1
    )
};

(:~
 : Calculate expected token set for a given DFA state as a sequence
 : of strings.
 :
 : @param $state the DFA state.
 : @return the set of token strings.
 :)
declare function p:expected-token-set($state as xs:integer) as xs:string*
{
  if ($state > 0) then
    for $t in 0 to 8
    let $i0 := $t * 2599 + $state - 1
    let $i1 := $i0 idiv 2
    let $i2 := $i1 idiv 4
    let $i3 := $i2 idiv 4
    return p:token((), $p:EXPECTED[$i0 mod 2 + $p:EXPECTED[$i1 mod 4 + $p:EXPECTED[$i2 mod 4 + $p:EXPECTED[$i3 + 1] + 1] + 1] + 1], $t * 32 + 1)
  else
    ()
};

(:~
 : Classify codepoint by doing a tail recursive binary search for a
 : matching codepoint range entry in MAP2, the codepoint to charclass
 : map for codepoints above the surrogate block.
 :
 : @param $c the codepoint.
 : @param $lo the binary search lower bound map index.
 : @param $hi the binary search upper bound map index.
 : @return the character class.
 :)
declare function p:map2($c as xs:integer, $lo as xs:integer, $hi as xs:integer) as xs:integer
{
  if ($lo > $hi) then
    0
  else
    let $m := ($hi + $lo) idiv 2
    return
      if ($p:MAP2[$m] > $c) then
        p:map2($c, $lo, $m - 1)
      else if ($p:MAP2[6 + $m] < $c) then
        p:map2($c, $m + 1, $hi)
      else
        $p:MAP2[12 + $m]
};

(:~
 : Try parsing the 1st loop of production Comment (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-Comment-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(82, $input, $state)          (: CommentContents | ('(' ':') | (':' ')') :)
    return
      if ($state[$p:l1] = 49) then                          (: (':' ')') :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 19) then                 (: CommentContents :)
            let $state := p:consume(19, $input, $state)     (: CommentContents :)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-Comment($input, $state)
            return $state
        return p:try-Comment-1($input, $state)
};

(:~
 : Try parsing Comment.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-Comment($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "Comment"),
  let $state :=
    let $state := p:consume(36, $input, $state)             (: ('(' ':') :)
    let $state := p:try-Comment-1($input, $state)
    let $state := p:consume(49, $input, $state)             (: (':' ')') :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "Comment"),
    $state
  )
};

(:~
 : Try parsing Whitespace.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-Whitespace($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "Whitespace"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 18) then                     (: S^WS :)
        let $state := p:consume(18, $input, $state)         (: S^WS :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-Comment($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "Whitespace"),
    $state
  )
};

(:~
 : Parse QueryBody.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-QueryBody($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "QueryBody"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Expr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "QueryBody"),
    $state
  )
};

(:~
 : Parse MainModule.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-MainModule($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "MainModule"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Prolog($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-QueryBody($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "MainModule"),
    $state
  )
};

(:~
 : Parse OptionDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-OptionDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "OptionDecl"),
  let $state :=
    let $state := p:consume(107, $input, $state)            (: 'declare' :)
    let $state := p:lookahead1W(60, $input, $state)         (: S^WS | ('(' ':') | 'option' :)
    let $state := p:consume(190, $input, $state)            (: 'option' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EQName($input, $state)
    let $state := p:lookahead1W(19, $input, $state)         (: StringLiteral | S^WS | ('(' ':') :)
    let $state := p:consume(4, $input, $state)              (: StringLiteral :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "OptionDecl"),
    $state
  )
};

(:~
 : Parse FunctionDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FunctionDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FunctionDecl"),
  let $state :=
    let $state := p:consume(142, $input, $state)            (: 'function' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EQName($input, $state)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(86, $input, $state)         (: S^WS | '$' | ('(' ':') | ')' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 31) then                     (: '$' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ParamList($input, $state)
        return $state
      else
        $state
    let $state := p:consume(37, $input, $state)             (: ')' :)
    let $state := p:lookahead1W(140, $input, $state)        (: S^WS | ('(' ':') | 'as' | 'external' | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 83) then                     (: 'as' :)
        let $state := p:consume(83, $input, $state)         (: 'as' :)
        let $state := p:lookahead1W(239, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-SequenceType($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(114, $input, $state)        (: S^WS | ('(' ':') | 'external' | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 264) then                    (: '{' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FunctionBody($input, $state)
        return $state
      else
        let $state := p:consume(132, $input, $state)        (: 'external' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FunctionDecl"),
    $state
  )
};

(:~
 : Parse VarDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-VarDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "VarDecl"),
  let $state :=
    let $state := p:consume(251, $input, $state)            (: 'variable' :)
    let $state := p:lookahead1W(23, $input, $state)         (: S^WS | '$' | ('(' ':') :)
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-VarName($input, $state)
    let $state := p:lookahead1W(139, $input, $state)        (: S^WS | ('(' ':') | ':=' | 'as' | 'external' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 83) then                     (: 'as' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-TypeDeclaration($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(101, $input, $state)        (: S^WS | ('(' ':') | ':=' | 'external' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 51) then                     (: ':=' :)
        let $state := p:consume(51, $input, $state)         (: ':=' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-VarValue($input, $state)
        return $state
      else
        let $state := p:consume(132, $input, $state)        (: 'external' :)
        let $state := p:lookahead1W(99, $input, $state)     (: S^WS | ('(' ':') | ':=' | ';' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 51) then                 (: ':=' :)
            let $state := p:consume(51, $input, $state)     (: ':=' :)
            let $state := p:lookahead1W(245, $input, $state) (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                                StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                                Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                                '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                                '?' | '@' | '[' | '``[' | 'ancestor' |
                                                                'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                                'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                                'castable' | 'child' | 'collation' | 'comment' |
                                                                'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                                'descendant' | 'descendant-or-self' | 'descending' |
                                                                'div' | 'document' | 'document-node' | 'element' |
                                                                'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                                'every' | 'except' | 'following' | 'following-sibling' |
                                                                'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                                'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                                'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                                'mod' | 'modify' | 'module' | 'namespace' |
                                                                'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                                'order' | 'ordered' | 'parent' | 'preceding' |
                                                                'preceding-sibling' | 'processing-instruction' |
                                                                'rename' | 'replace' | 'return' | 'satisfies' |
                                                                'schema-attribute' | 'schema-element' | 'self' |
                                                                'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                                'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                                'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                                'xquery' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-VarDefaultValue($input, $state)
            return $state
          else
            $state
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "VarDecl"),
    $state
  )
};

(:~
 : Parse CompatibilityAnnotation.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CompatibilityAnnotation($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CompatibilityAnnotation"),
  let $state :=
    let $state := p:consume(246, $input, $state)            (: 'updating' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CompatibilityAnnotation"),
    $state
  )
};

(:~
 : Parse the 1st loop of production AnnotatedDecl (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AnnotatedDecl-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(147, $input, $state)        (: S^WS | '%' | ('(' ':') | 'function' | 'updating' |
                                                               'variable' :)
    return
      if ($state[$p:l1] != 32                               (: '%' :)
      and $state[$p:l1] != 246) then                        (: 'updating' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 246) then                (: 'updating' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-CompatibilityAnnotation($input, $state)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-Annotation($input, $state)
            return $state
        return p:parse-AnnotatedDecl-1($input, $state)
};

(:~
 : Parse AnnotatedDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AnnotatedDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "AnnotatedDecl"),
  let $state :=
    let $state := p:consume(107, $input, $state)            (: 'declare' :)
    let $state := p:parse-AnnotatedDecl-1($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 251) then                    (: 'variable' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-VarDecl($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FunctionDecl($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "AnnotatedDecl"),
    $state
  )
};

(:~
 : Parse VarDefaultValue.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-VarDefaultValue($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "VarDefaultValue"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "VarDefaultValue"),
    $state
  )
};

(:~
 : Parse NodeComp.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-NodeComp($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "NodeComp"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 160) then                    (: 'is' :)
        let $state := p:consume(160, $input, $state)        (: 'is' :)
        return $state
      else if ($state[$p:l1] = 57) then                     (: '<<' :)
        let $state := p:consume(57, $input, $state)         (: '<<' :)
        return $state
      else
        let $state := p:consume(64, $input, $state)         (: '>>' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "NodeComp"),
    $state
  )
};

(:~
 : Try parsing NodeComp.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-NodeComp($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "NodeComp"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 160) then                    (: 'is' :)
        let $state := p:consume(160, $input, $state)        (: 'is' :)
        return $state
      else if ($state[$p:l1] = 57) then                     (: '<<' :)
        let $state := p:consume(57, $input, $state)         (: '<<' :)
        return $state
      else
        let $state := p:consume(64, $input, $state)         (: '>>' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "NodeComp"),
    $state
  )
};

(:~
 : Parse GeneralComp.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-GeneralComp($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "GeneralComp"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 60) then                     (: '=' :)
        let $state := p:consume(60, $input, $state)         (: '=' :)
        return $state
      else if ($state[$p:l1] = 27) then                     (: '!=' :)
        let $state := p:consume(27, $input, $state)         (: '!=' :)
        return $state
      else if ($state[$p:l1] = 53) then                     (: '<' :)
        let $state := p:consume(53, $input, $state)         (: '<' :)
        return $state
      else if ($state[$p:l1] = 58) then                     (: '<=' :)
        let $state := p:consume(58, $input, $state)         (: '<=' :)
        return $state
      else if ($state[$p:l1] = 62) then                     (: '>' :)
        let $state := p:consume(62, $input, $state)         (: '>' :)
        return $state
      else
        let $state := p:consume(63, $input, $state)         (: '>=' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "GeneralComp"),
    $state
  )
};

(:~
 : Try parsing GeneralComp.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-GeneralComp($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "GeneralComp"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 60) then                     (: '=' :)
        let $state := p:consume(60, $input, $state)         (: '=' :)
        return $state
      else if ($state[$p:l1] = 27) then                     (: '!=' :)
        let $state := p:consume(27, $input, $state)         (: '!=' :)
        return $state
      else if ($state[$p:l1] = 53) then                     (: '<' :)
        let $state := p:consume(53, $input, $state)         (: '<' :)
        return $state
      else if ($state[$p:l1] = 58) then                     (: '<=' :)
        let $state := p:consume(58, $input, $state)         (: '<=' :)
        return $state
      else if ($state[$p:l1] = 62) then                     (: '>' :)
        let $state := p:consume(62, $input, $state)         (: '>' :)
        return $state
      else
        let $state := p:consume(63, $input, $state)         (: '>=' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "GeneralComp"),
    $state
  )
};

(:~
 : Parse ValueComp.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ValueComp($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ValueComp"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 127) then                    (: 'eq' :)
        let $state := p:consume(127, $input, $state)        (: 'eq' :)
        return $state
      else if ($state[$p:l1] = 179) then                    (: 'ne' :)
        let $state := p:consume(179, $input, $state)        (: 'ne' :)
        return $state
      else if ($state[$p:l1] = 170) then                    (: 'lt' :)
        let $state := p:consume(170, $input, $state)        (: 'lt' :)
        return $state
      else if ($state[$p:l1] = 165) then                    (: 'le' :)
        let $state := p:consume(165, $input, $state)        (: 'le' :)
        return $state
      else if ($state[$p:l1] = 147) then                    (: 'gt' :)
        let $state := p:consume(147, $input, $state)        (: 'gt' :)
        return $state
      else
        let $state := p:consume(143, $input, $state)        (: 'ge' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ValueComp"),
    $state
  )
};

(:~
 : Try parsing ValueComp.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ValueComp($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ValueComp"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 127) then                    (: 'eq' :)
        let $state := p:consume(127, $input, $state)        (: 'eq' :)
        return $state
      else if ($state[$p:l1] = 179) then                    (: 'ne' :)
        let $state := p:consume(179, $input, $state)        (: 'ne' :)
        return $state
      else if ($state[$p:l1] = 170) then                    (: 'lt' :)
        let $state := p:consume(170, $input, $state)        (: 'lt' :)
        return $state
      else if ($state[$p:l1] = 165) then                    (: 'le' :)
        let $state := p:consume(165, $input, $state)        (: 'le' :)
        return $state
      else if ($state[$p:l1] = 147) then                    (: 'gt' :)
        let $state := p:consume(147, $input, $state)        (: 'gt' :)
        return $state
      else
        let $state := p:consume(143, $input, $state)        (: 'ge' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ValueComp"),
    $state
  )
};

(:~
 : Parse FTIgnoreOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTIgnoreOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTIgnoreOption"),
  let $state :=
    let $state := p:consume(259, $input, $state)            (: 'without' :)
    let $state := p:lookahead1W(42, $input, $state)         (: S^WS | ('(' ':') | 'content' :)
    let $state := p:consume(100, $input, $state)            (: 'content' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-UnionExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTIgnoreOption"),
    $state
  )
};

(:~
 : Try parsing FTIgnoreOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTIgnoreOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTIgnoreOption"),
  let $state :=
    let $state := p:consume(259, $input, $state)            (: 'without' :)
    let $state := p:lookahead1W(42, $input, $state)         (: S^WS | ('(' ':') | 'content' :)
    let $state := p:consume(100, $input, $state)            (: 'content' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-UnionExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTIgnoreOption"),
    $state
  )
};

(:~
 : Parse FTContent.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTContent($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTContent"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 85) then                     (: 'at' :)
        let $state := p:consume(85, $input, $state)         (: 'at' :)
        let $state := p:lookahead1W(113, $input, $state)    (: S^WS | ('(' ':') | 'end' | 'start' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 226) then                (: 'start' :)
            let $state := p:consume(226, $input, $state)    (: 'start' :)
            return $state
          else
            let $state := p:consume(125, $input, $state)    (: 'end' :)
            return $state
        return $state
      else
        let $state := p:consume(126, $input, $state)        (: 'entire' :)
        let $state := p:lookahead1W(42, $input, $state)     (: S^WS | ('(' ':') | 'content' :)
        let $state := p:consume(100, $input, $state)        (: 'content' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTContent"),
    $state
  )
};

(:~
 : Try parsing FTContent.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTContent($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTContent"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 85) then                     (: 'at' :)
        let $state := p:consume(85, $input, $state)         (: 'at' :)
        let $state := p:lookahead1W(113, $input, $state)    (: S^WS | ('(' ':') | 'end' | 'start' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 226) then                (: 'start' :)
            let $state := p:consume(226, $input, $state)    (: 'start' :)
            return $state
          else
            let $state := p:consume(125, $input, $state)    (: 'end' :)
            return $state
        return $state
      else
        let $state := p:consume(126, $input, $state)        (: 'entire' :)
        let $state := p:lookahead1W(42, $input, $state)     (: S^WS | ('(' ':') | 'content' :)
        let $state := p:consume(100, $input, $state)        (: 'content' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTContent"),
    $state
  )
};

(:~
 : Parse FTBigUnit.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTBigUnit($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTBigUnit"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 220) then                    (: 'sentence' :)
        let $state := p:consume(220, $input, $state)        (: 'sentence' :)
        return $state
      else
        let $state := p:consume(195, $input, $state)        (: 'paragraph' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTBigUnit"),
    $state
  )
};

(:~
 : Try parsing FTBigUnit.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTBigUnit($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTBigUnit"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 220) then                    (: 'sentence' :)
        let $state := p:consume(220, $input, $state)        (: 'sentence' :)
        return $state
      else
        let $state := p:consume(195, $input, $state)        (: 'paragraph' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTBigUnit"),
    $state
  )
};

(:~
 : Parse FTScope.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTScope($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTScope"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 212) then                    (: 'same' :)
        let $state := p:consume(212, $input, $state)        (: 'same' :)
        return $state
      else
        let $state := p:consume(114, $input, $state)        (: 'different' :)
        return $state
    let $state := p:lookahead1W(127, $input, $state)        (: S^WS | ('(' ':') | 'paragraph' | 'sentence' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-FTBigUnit($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTScope"),
    $state
  )
};

(:~
 : Try parsing FTScope.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTScope($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTScope"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 212) then                    (: 'same' :)
        let $state := p:consume(212, $input, $state)        (: 'same' :)
        return $state
      else
        let $state := p:consume(114, $input, $state)        (: 'different' :)
        return $state
    let $state := p:lookahead1W(127, $input, $state)        (: S^WS | ('(' ':') | 'paragraph' | 'sentence' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-FTBigUnit($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTScope"),
    $state
  )
};

(:~
 : Parse FTDistance.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTDistance($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTDistance"),
  let $state :=
    let $state := p:consume(116, $input, $state)            (: 'distance' :)
    let $state := p:lookahead1W(141, $input, $state)        (: S^WS | ('(' ':') | 'at' | 'exactly' | 'from' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-FTRange($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-FTUnit($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTDistance"),
    $state
  )
};

(:~
 : Try parsing FTDistance.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTDistance($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTDistance"),
  let $state :=
    let $state := p:consume(116, $input, $state)            (: 'distance' :)
    let $state := p:lookahead1W(141, $input, $state)        (: S^WS | ('(' ':') | 'at' | 'exactly' | 'from' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-FTRange($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-FTUnit($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTDistance"),
    $state
  )
};

(:~
 : Parse FTUnit.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTUnit($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTUnit"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 261) then                    (: 'words' :)
        let $state := p:consume(261, $input, $state)        (: 'words' :)
        return $state
      else if ($state[$p:l1] = 221) then                    (: 'sentences' :)
        let $state := p:consume(221, $input, $state)        (: 'sentences' :)
        return $state
      else
        let $state := p:consume(196, $input, $state)        (: 'paragraphs' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTUnit"),
    $state
  )
};

(:~
 : Try parsing FTUnit.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTUnit($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTUnit"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 261) then                    (: 'words' :)
        let $state := p:consume(261, $input, $state)        (: 'words' :)
        return $state
      else if ($state[$p:l1] = 221) then                    (: 'sentences' :)
        let $state := p:consume(221, $input, $state)        (: 'sentences' :)
        return $state
      else
        let $state := p:consume(196, $input, $state)        (: 'paragraphs' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTUnit"),
    $state
  )
};

(:~
 : Parse FTWindow.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTWindow($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTWindow"),
  let $state :=
    let $state := p:consume(257, $input, $state)            (: 'window' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-AdditiveExpr($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-FTUnit($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTWindow"),
    $state
  )
};

(:~
 : Try parsing FTWindow.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTWindow($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTWindow"),
  let $state :=
    let $state := p:consume(257, $input, $state)            (: 'window' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-AdditiveExpr($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-FTUnit($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTWindow"),
    $state
  )
};

(:~
 : Parse FTOrder.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTOrder($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTOrder"),
  let $state :=
    let $state := p:consume(193, $input, $state)            (: 'ordered' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTOrder"),
    $state
  )
};

(:~
 : Try parsing FTOrder.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTOrder($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTOrder"),
  let $state :=
    let $state := p:consume(193, $input, $state)            (: 'ordered' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTOrder"),
    $state
  )
};

(:~
 : Parse FTPosFilter.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTPosFilter($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTPosFilter"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 193) then                    (: 'ordered' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTOrder($input, $state)
        return $state
      else if ($state[$p:l1] = 257) then                    (: 'window' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTWindow($input, $state)
        return $state
      else if ($state[$p:l1] = 116) then                    (: 'distance' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTDistance($input, $state)
        return $state
      else if ($state[$p:l1] = 114                          (: 'different' :)
            or $state[$p:l1] = 212) then                    (: 'same' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTScope($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTContent($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTPosFilter"),
    $state
  )
};

(:~
 : Try parsing FTPosFilter.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTPosFilter($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTPosFilter"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 193) then                    (: 'ordered' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTOrder($input, $state)
        return $state
      else if ($state[$p:l1] = 257) then                    (: 'window' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTWindow($input, $state)
        return $state
      else if ($state[$p:l1] = 116) then                    (: 'distance' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTDistance($input, $state)
        return $state
      else if ($state[$p:l1] = 114                          (: 'different' :)
            or $state[$p:l1] = 212) then                    (: 'same' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTScope($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTContent($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTPosFilter"),
    $state
  )
};

(:~
 : Parse FTWeight.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTWeight($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTWeight"),
  let $state :=
    let $state := p:consume(253, $input, $state)            (: 'weight' :)
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state := p:consume(264, $input, $state)            (: '{' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Expr($input, $state)
    let $state := p:consume(268, $input, $state)            (: '}' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTWeight"),
    $state
  )
};

(:~
 : Try parsing FTWeight.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTWeight($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTWeight"),
  let $state :=
    let $state := p:consume(253, $input, $state)            (: 'weight' :)
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state := p:consume(264, $input, $state)            (: '{' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-Expr($input, $state)
    let $state := p:consume(268, $input, $state)            (: '}' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTWeight"),
    $state
  )
};

(:~
 : Parse the 1st loop of production FTExtensionSelection (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTExtensionSelection-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Pragma($input, $state)
    let $state := p:lookahead1W(91, $input, $state)         (: S^WS | '(#' | ('(' ':') | '{' :)
    return
      if ($state[$p:l1] != 35) then                         (: '(#' :)
        $state
      else
        p:parse-FTExtensionSelection-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production FTExtensionSelection (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTExtensionSelection-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-Pragma($input, $state)
    let $state := p:lookahead1W(91, $input, $state)         (: S^WS | '(#' | ('(' ':') | '{' :)
    return
      if ($state[$p:l1] != 35) then                         (: '(#' :)
        $state
      else
        p:try-FTExtensionSelection-1($input, $state)
};

(:~
 : Parse FTExtensionSelection.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTExtensionSelection($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTExtensionSelection"),
  let $state :=
    let $state := p:parse-FTExtensionSelection-1($input, $state)
    let $state := p:consume(264, $input, $state)            (: '{' :)
    let $state := p:lookahead1W(158, $input, $state)        (: StringLiteral | S^WS | '(' | '(#' | ('(' ':') | 'ftnot' |
                                                               '{' | '}' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 268) then                   (: '}' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTSelection($input, $state)
        return $state
      else
        $state
    let $state := p:consume(268, $input, $state)            (: '}' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTExtensionSelection"),
    $state
  )
};

(:~
 : Try parsing FTExtensionSelection.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTExtensionSelection($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTExtensionSelection"),
  let $state :=
    let $state := p:try-FTExtensionSelection-1($input, $state)
    let $state := p:consume(264, $input, $state)            (: '{' :)
    let $state := p:lookahead1W(158, $input, $state)        (: StringLiteral | S^WS | '(' | '(#' | ('(' ':') | 'ftnot' |
                                                               '{' | '}' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 268) then                   (: '}' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTSelection($input, $state)
        return $state
      else
        $state
    let $state := p:consume(268, $input, $state)            (: '}' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTExtensionSelection"),
    $state
  )
};

(:~
 : Parse FTRange.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTRange($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTRange"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 129) then                    (: 'exactly' :)
        let $state := p:consume(129, $input, $state)        (: 'exactly' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-AdditiveExpr($input, $state)
        return $state
      else if ($state[$p:l1] = 85) then                     (: 'at' :)
        let $state := p:consume(85, $input, $state)         (: 'at' :)
        let $state := p:lookahead1W(120, $input, $state)    (: S^WS | ('(' ':') | 'least' | 'most' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 166) then                (: 'least' :)
            let $state := p:consume(166, $input, $state)    (: 'least' :)
            let $state := p:lookahead1W(245, $input, $state) (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                                StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                                Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                                '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                                '?' | '@' | '[' | '``[' | 'ancestor' |
                                                                'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                                'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                                'castable' | 'child' | 'collation' | 'comment' |
                                                                'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                                'descendant' | 'descendant-or-self' | 'descending' |
                                                                'div' | 'document' | 'document-node' | 'element' |
                                                                'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                                'every' | 'except' | 'following' | 'following-sibling' |
                                                                'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                                'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                                'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                                'mod' | 'modify' | 'module' | 'namespace' |
                                                                'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                                'order' | 'ordered' | 'parent' | 'preceding' |
                                                                'preceding-sibling' | 'processing-instruction' |
                                                                'rename' | 'replace' | 'return' | 'satisfies' |
                                                                'schema-attribute' | 'schema-element' | 'self' |
                                                                'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                                'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                                'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                                'xquery' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-AdditiveExpr($input, $state)
            return $state
          else
            let $state := p:consume(176, $input, $state)    (: 'most' :)
            let $state := p:lookahead1W(245, $input, $state) (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                                StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                                Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                                '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                                '?' | '@' | '[' | '``[' | 'ancestor' |
                                                                'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                                'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                                'castable' | 'child' | 'collation' | 'comment' |
                                                                'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                                'descendant' | 'descendant-or-self' | 'descending' |
                                                                'div' | 'document' | 'document-node' | 'element' |
                                                                'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                                'every' | 'except' | 'following' | 'following-sibling' |
                                                                'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                                'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                                'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                                'mod' | 'modify' | 'module' | 'namespace' |
                                                                'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                                'order' | 'ordered' | 'parent' | 'preceding' |
                                                                'preceding-sibling' | 'processing-instruction' |
                                                                'rename' | 'replace' | 'return' | 'satisfies' |
                                                                'schema-attribute' | 'schema-element' | 'self' |
                                                                'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                                'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                                'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                                'xquery' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-AdditiveExpr($input, $state)
            return $state
        return $state
      else
        let $state := p:consume(137, $input, $state)        (: 'from' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-AdditiveExpr($input, $state)
        let $state := p:consume(236, $input, $state)        (: 'to' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-AdditiveExpr($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTRange"),
    $state
  )
};

(:~
 : Try parsing FTRange.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTRange($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTRange"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 129) then                    (: 'exactly' :)
        let $state := p:consume(129, $input, $state)        (: 'exactly' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-AdditiveExpr($input, $state)
        return $state
      else if ($state[$p:l1] = 85) then                     (: 'at' :)
        let $state := p:consume(85, $input, $state)         (: 'at' :)
        let $state := p:lookahead1W(120, $input, $state)    (: S^WS | ('(' ':') | 'least' | 'most' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 166) then                (: 'least' :)
            let $state := p:consume(166, $input, $state)    (: 'least' :)
            let $state := p:lookahead1W(245, $input, $state) (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                                StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                                Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                                '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                                '?' | '@' | '[' | '``[' | 'ancestor' |
                                                                'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                                'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                                'castable' | 'child' | 'collation' | 'comment' |
                                                                'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                                'descendant' | 'descendant-or-self' | 'descending' |
                                                                'div' | 'document' | 'document-node' | 'element' |
                                                                'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                                'every' | 'except' | 'following' | 'following-sibling' |
                                                                'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                                'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                                'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                                'mod' | 'modify' | 'module' | 'namespace' |
                                                                'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                                'order' | 'ordered' | 'parent' | 'preceding' |
                                                                'preceding-sibling' | 'processing-instruction' |
                                                                'rename' | 'replace' | 'return' | 'satisfies' |
                                                                'schema-attribute' | 'schema-element' | 'self' |
                                                                'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                                'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                                'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                                'xquery' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-AdditiveExpr($input, $state)
            return $state
          else
            let $state := p:consume(176, $input, $state)    (: 'most' :)
            let $state := p:lookahead1W(245, $input, $state) (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                                StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                                Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                                '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                                '?' | '@' | '[' | '``[' | 'ancestor' |
                                                                'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                                'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                                'castable' | 'child' | 'collation' | 'comment' |
                                                                'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                                'descendant' | 'descendant-or-self' | 'descending' |
                                                                'div' | 'document' | 'document-node' | 'element' |
                                                                'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                                'every' | 'except' | 'following' | 'following-sibling' |
                                                                'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                                'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                                'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                                'mod' | 'modify' | 'module' | 'namespace' |
                                                                'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                                'order' | 'ordered' | 'parent' | 'preceding' |
                                                                'preceding-sibling' | 'processing-instruction' |
                                                                'rename' | 'replace' | 'return' | 'satisfies' |
                                                                'schema-attribute' | 'schema-element' | 'self' |
                                                                'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                                'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                                'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                                'xquery' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-AdditiveExpr($input, $state)
            return $state
        return $state
      else
        let $state := p:consume(137, $input, $state)        (: 'from' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-AdditiveExpr($input, $state)
        let $state := p:consume(236, $input, $state)        (: 'to' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-AdditiveExpr($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTRange"),
    $state
  )
};

(:~
 : Parse FTTimes.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTTimes($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTTimes"),
  let $state :=
    let $state := p:consume(187, $input, $state)            (: 'occurs' :)
    let $state := p:lookahead1W(141, $input, $state)        (: S^WS | ('(' ':') | 'at' | 'exactly' | 'from' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-FTRange($input, $state)
    let $state := p:consume(235, $input, $state)            (: 'times' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTTimes"),
    $state
  )
};

(:~
 : Try parsing FTTimes.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTTimes($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTTimes"),
  let $state :=
    let $state := p:consume(187, $input, $state)            (: 'occurs' :)
    let $state := p:lookahead1W(141, $input, $state)        (: S^WS | ('(' ':') | 'at' | 'exactly' | 'from' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-FTRange($input, $state)
    let $state := p:consume(235, $input, $state)            (: 'times' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTTimes"),
    $state
  )
};

(:~
 : Parse FTAnyallOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTAnyallOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTAnyallOption"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 81) then                     (: 'any' :)
        let $state := p:consume(81, $input, $state)         (: 'any' :)
        let $state := p:lookahead1W(194, $input, $state)    (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                                               'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                                               'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' |
                                                               'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' |
                                                               'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                                               'where' | 'window' | 'with' | 'without' | 'word' | '}' |
                                                               '}`' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 260) then                (: 'word' :)
            let $state := p:consume(260, $input, $state)    (: 'word' :)
            return $state
          else
            $state
        return $state
      else if ($state[$p:l1] = 76) then                     (: 'all' :)
        let $state := p:consume(76, $input, $state)         (: 'all' :)
        let $state := p:lookahead1W(195, $input, $state)    (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                                               'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                                               'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' |
                                                               'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' |
                                                               'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                                               'where' | 'window' | 'with' | 'without' | 'words' | '}' |
                                                               '}`' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 261) then                (: 'words' :)
            let $state := p:consume(261, $input, $state)    (: 'words' :)
            return $state
          else
            $state
        return $state
      else
        let $state := p:consume(201, $input, $state)        (: 'phrase' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTAnyallOption"),
    $state
  )
};

(:~
 : Try parsing FTAnyallOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTAnyallOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTAnyallOption"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 81) then                     (: 'any' :)
        let $state := p:consume(81, $input, $state)         (: 'any' :)
        let $state := p:lookahead1W(194, $input, $state)    (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                                               'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                                               'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' |
                                                               'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' |
                                                               'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                                               'where' | 'window' | 'with' | 'without' | 'word' | '}' |
                                                               '}`' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 260) then                (: 'word' :)
            let $state := p:consume(260, $input, $state)    (: 'word' :)
            return $state
          else
            $state
        return $state
      else if ($state[$p:l1] = 76) then                     (: 'all' :)
        let $state := p:consume(76, $input, $state)         (: 'all' :)
        let $state := p:lookahead1W(195, $input, $state)    (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                                               'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                                               'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' |
                                                               'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' |
                                                               'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                                               'where' | 'window' | 'with' | 'without' | 'words' | '}' |
                                                               '}`' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 261) then                (: 'words' :)
            let $state := p:consume(261, $input, $state)    (: 'words' :)
            return $state
          else
            $state
        return $state
      else
        let $state := p:consume(201, $input, $state)        (: 'phrase' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTAnyallOption"),
    $state
  )
};

(:~
 : Parse FTWordsValue.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTWordsValue($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTWordsValue"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 4) then                      (: StringLiteral :)
        let $state := p:consume(4, $input, $state)          (: StringLiteral :)
        return $state
      else
        let $state := p:consume(264, $input, $state)        (: '{' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Expr($input, $state)
        let $state := p:consume(268, $input, $state)        (: '}' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTWordsValue"),
    $state
  )
};

(:~
 : Try parsing FTWordsValue.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTWordsValue($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTWordsValue"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 4) then                      (: StringLiteral :)
        let $state := p:consume(4, $input, $state)          (: StringLiteral :)
        return $state
      else
        let $state := p:consume(264, $input, $state)        (: '{' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-Expr($input, $state)
        let $state := p:consume(268, $input, $state)        (: '}' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTWordsValue"),
    $state
  )
};

(:~
 : Parse FTWords.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTWords($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTWords"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-FTWordsValue($input, $state)
    let $state := p:lookahead1W(198, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                                               'at' | 'before' | 'case' | 'collation' | 'count' |
                                                               'default' | 'descending' | 'different' | 'distance' |
                                                               'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                                               'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                                               'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' |
                                                               'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'phrase' | 'return' | 'same' | 'satisfies' | 'stable' |
                                                               'start' | 'using' | 'weight' | 'where' | 'window' |
                                                               'with' | 'without' | '}' | '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 76                           (: 'all' :)
            or $state[$p:l1] = 81                           (: 'any' :)
            or $state[$p:l1] = 201) then                    (: 'phrase' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTAnyallOption($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTWords"),
    $state
  )
};

(:~
 : Try parsing FTWords.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTWords($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTWords"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-FTWordsValue($input, $state)
    let $state := p:lookahead1W(198, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                                               'at' | 'before' | 'case' | 'collation' | 'count' |
                                                               'default' | 'descending' | 'different' | 'distance' |
                                                               'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                                               'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                                               'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' |
                                                               'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'phrase' | 'return' | 'same' | 'satisfies' | 'stable' |
                                                               'start' | 'using' | 'weight' | 'where' | 'window' |
                                                               'with' | 'without' | '}' | '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 76                           (: 'all' :)
            or $state[$p:l1] = 81                           (: 'any' :)
            or $state[$p:l1] = 201) then                    (: 'phrase' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTAnyallOption($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTWords"),
    $state
  )
};

(:~
 : Parse FTPrimary.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTPrimary($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTPrimary"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 34) then                     (: '(' :)
        let $state := p:consume(34, $input, $state)         (: '(' :)
        let $state := p:lookahead1W(154, $input, $state)    (: StringLiteral | S^WS | '(' | '(#' | ('(' ':') | 'ftnot' |
                                                               '{' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTSelection($input, $state)
        let $state := p:consume(37, $input, $state)         (: ')' :)
        return $state
      else if ($state[$p:l1] = 35) then                     (: '(#' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTExtensionSelection($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTWords($input, $state)
        let $state := p:lookahead1W(191, $input, $state)    (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                                               'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                                               'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' |
                                                               'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' |
                                                               'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                                               'where' | 'window' | 'with' | 'without' | '}' | '}`' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 187) then                (: 'occurs' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-FTTimes($input, $state)
            return $state
          else
            $state
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTPrimary"),
    $state
  )
};

(:~
 : Try parsing FTPrimary.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTPrimary($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTPrimary"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 34) then                     (: '(' :)
        let $state := p:consume(34, $input, $state)         (: '(' :)
        let $state := p:lookahead1W(154, $input, $state)    (: StringLiteral | S^WS | '(' | '(#' | ('(' ':') | 'ftnot' |
                                                               '{' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTSelection($input, $state)
        let $state := p:consume(37, $input, $state)         (: ')' :)
        return $state
      else if ($state[$p:l1] = 35) then                     (: '(#' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTExtensionSelection($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTWords($input, $state)
        let $state := p:lookahead1W(191, $input, $state)    (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                                               'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                                               'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' |
                                                               'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' |
                                                               'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                                               'where' | 'window' | 'with' | 'without' | '}' | '}`' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 187) then                (: 'occurs' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-FTTimes($input, $state)
            return $state
          else
            $state
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTPrimary"),
    $state
  )
};

(:~
 : Parse FTPrimaryWithOptions.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTPrimaryWithOptions($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTPrimaryWithOptions"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-FTPrimary($input, $state)
    let $state := p:lookahead1W(190, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                                               'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                                               'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                                               'stable' | 'start' | 'using' | 'weight' | 'where' |
                                                               'window' | 'with' | 'without' | '}' | '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 248) then                    (: 'using' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTMatchOptions($input, $state)
        return $state
      else
        $state
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 253) then                    (: 'weight' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTWeight($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTPrimaryWithOptions"),
    $state
  )
};

(:~
 : Try parsing FTPrimaryWithOptions.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTPrimaryWithOptions($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTPrimaryWithOptions"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-FTPrimary($input, $state)
    let $state := p:lookahead1W(190, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                                               'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                                               'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                                               'stable' | 'start' | 'using' | 'weight' | 'where' |
                                                               'window' | 'with' | 'without' | '}' | '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 248) then                    (: 'using' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTMatchOptions($input, $state)
        return $state
      else
        $state
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 253) then                    (: 'weight' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTWeight($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTPrimaryWithOptions"),
    $state
  )
};

(:~
 : Parse FTUnaryNot.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTUnaryNot($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTUnaryNot"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 140) then                    (: 'ftnot' :)
        let $state := p:consume(140, $input, $state)        (: 'ftnot' :)
        return $state
      else
        $state
    let $state := p:lookahead1W(146, $input, $state)        (: StringLiteral | S^WS | '(' | '(#' | ('(' ':') | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-FTPrimaryWithOptions($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTUnaryNot"),
    $state
  )
};

(:~
 : Try parsing FTUnaryNot.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTUnaryNot($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTUnaryNot"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 140) then                    (: 'ftnot' :)
        let $state := p:consume(140, $input, $state)        (: 'ftnot' :)
        return $state
      else
        $state
    let $state := p:lookahead1W(146, $input, $state)        (: StringLiteral | S^WS | '(' | '(#' | ('(' ':') | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-FTPrimaryWithOptions($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTUnaryNot"),
    $state
  )
};

(:~
 : Parse the 1st loop of production FTMildNot (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTMildNot-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(189, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                                               'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                                               'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                                               'stable' | 'start' | 'where' | 'window' | 'with' |
                                                               'without' | '}' | '}`' :)
    return
      if ($state[$p:l1] != 186) then                        (: 'not' :)
        $state
      else
        let $state := p:consume(186, $input, $state)        (: 'not' :)
        let $state := p:lookahead1W(52, $input, $state)     (: S^WS | ('(' ':') | 'in' :)
        let $state := p:consume(151, $input, $state)        (: 'in' :)
        let $state := p:lookahead1W(154, $input, $state)    (: StringLiteral | S^WS | '(' | '(#' | ('(' ':') | 'ftnot' |
                                                               '{' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTUnaryNot($input, $state)
        return p:parse-FTMildNot-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production FTMildNot (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTMildNot-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(189, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                                               'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                                               'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                                               'stable' | 'start' | 'where' | 'window' | 'with' |
                                                               'without' | '}' | '}`' :)
    return
      if ($state[$p:l1] != 186) then                        (: 'not' :)
        $state
      else
        let $state := p:consume(186, $input, $state)        (: 'not' :)
        let $state := p:lookahead1W(52, $input, $state)     (: S^WS | ('(' ':') | 'in' :)
        let $state := p:consume(151, $input, $state)        (: 'in' :)
        let $state := p:lookahead1W(154, $input, $state)    (: StringLiteral | S^WS | '(' | '(#' | ('(' ':') | 'ftnot' |
                                                               '{' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTUnaryNot($input, $state)
        return p:try-FTMildNot-1($input, $state)
};

(:~
 : Parse FTMildNot.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTMildNot($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTMildNot"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-FTUnaryNot($input, $state)
    let $state := p:parse-FTMildNot-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTMildNot"),
    $state
  )
};

(:~
 : Try parsing FTMildNot.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTMildNot($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTMildNot"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-FTUnaryNot($input, $state)
    let $state := p:try-FTMildNot-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTMildNot"),
    $state
  )
};

(:~
 : Parse the 1st loop of production FTAnd (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTAnd-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 139) then                          (: 'ftand' :)
      $state
    else
      let $state := p:consume(139, $input, $state)          (: 'ftand' :)
      let $state := p:lookahead1W(154, $input, $state)      (: StringLiteral | S^WS | '(' | '(#' | ('(' ':') | 'ftnot' |
                                                               '{' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-FTMildNot($input, $state)
      return p:parse-FTAnd-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production FTAnd (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTAnd-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 139) then                          (: 'ftand' :)
      $state
    else
      let $state := p:consume(139, $input, $state)          (: 'ftand' :)
      let $state := p:lookahead1W(154, $input, $state)      (: StringLiteral | S^WS | '(' | '(#' | ('(' ':') | 'ftnot' |
                                                               '{' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:try-FTMildNot($input, $state)
      return p:try-FTAnd-1($input, $state)
};

(:~
 : Parse FTAnd.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTAnd($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTAnd"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-FTMildNot($input, $state)
    let $state := p:parse-FTAnd-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTAnd"),
    $state
  )
};

(:~
 : Try parsing FTAnd.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTAnd($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTAnd"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-FTMildNot($input, $state)
    let $state := p:try-FTAnd-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTAnd"),
    $state
  )
};

(:~
 : Parse the 1st loop of production FTOr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTOr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 141) then                          (: 'ftor' :)
      $state
    else
      let $state := p:consume(141, $input, $state)          (: 'ftor' :)
      let $state := p:lookahead1W(154, $input, $state)      (: StringLiteral | S^WS | '(' | '(#' | ('(' ':') | 'ftnot' |
                                                               '{' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-FTAnd($input, $state)
      return p:parse-FTOr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production FTOr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTOr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 141) then                          (: 'ftor' :)
      $state
    else
      let $state := p:consume(141, $input, $state)          (: 'ftor' :)
      let $state := p:lookahead1W(154, $input, $state)      (: StringLiteral | S^WS | '(' | '(#' | ('(' ':') | 'ftnot' |
                                                               '{' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:try-FTAnd($input, $state)
      return p:try-FTOr-1($input, $state)
};

(:~
 : Parse FTOr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTOr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTOr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-FTAnd($input, $state)
    let $state := p:parse-FTOr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTOr"),
    $state
  )
};

(:~
 : Try parsing FTOr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTOr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTOr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-FTAnd($input, $state)
    let $state := p:try-FTOr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTOr"),
    $state
  )
};

(:~
 : Parse the 1st loop of production FTSelection (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTSelection-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(187, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'modify' | 'ne' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'return' | 'same' | 'satisfies' | 'stable' | 'start' |
                                                               'where' | 'window' | 'with' | 'without' | '}' | '}`' :)
    return
      if ($state[$p:l1] != 85                               (: 'at' :)
      and $state[$p:l1] != 114                              (: 'different' :)
      and $state[$p:l1] != 116                              (: 'distance' :)
      and $state[$p:l1] != 126                              (: 'entire' :)
      and $state[$p:l1] != 193                              (: 'ordered' :)
      and $state[$p:l1] != 212                              (: 'same' :)
      and $state[$p:l1] != 257) then                        (: 'window' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTPosFilter($input, $state)
        return p:parse-FTSelection-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production FTSelection (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTSelection-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(187, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'modify' | 'ne' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'return' | 'same' | 'satisfies' | 'stable' | 'start' |
                                                               'where' | 'window' | 'with' | 'without' | '}' | '}`' :)
    return
      if ($state[$p:l1] != 85                               (: 'at' :)
      and $state[$p:l1] != 114                              (: 'different' :)
      and $state[$p:l1] != 116                              (: 'distance' :)
      and $state[$p:l1] != 126                              (: 'entire' :)
      and $state[$p:l1] != 193                              (: 'ordered' :)
      and $state[$p:l1] != 212                              (: 'same' :)
      and $state[$p:l1] != 257) then                        (: 'window' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTPosFilter($input, $state)
        return p:try-FTSelection-1($input, $state)
};

(:~
 : Parse FTSelection.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTSelection($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTSelection"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-FTOr($input, $state)
    let $state := p:parse-FTSelection-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTSelection"),
    $state
  )
};

(:~
 : Try parsing FTSelection.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTSelection($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTSelection"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-FTOr($input, $state)
    let $state := p:try-FTSelection-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTSelection"),
    $state
  )
};

(:~
 : Parse SimpleTypeName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SimpleTypeName($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "SimpleTypeName"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-TypeName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "SimpleTypeName"),
    $state
  )
};

(:~
 : Try parsing SimpleTypeName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-SimpleTypeName($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "SimpleTypeName"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-TypeName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "SimpleTypeName"),
    $state
  )
};

(:~
 : Parse SingleType.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SingleType($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "SingleType"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-SimpleTypeName($input, $state)
    let $state := p:lookahead1W(202, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                                               '>>' | '?' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'castable' | 'collation' |
                                                               'contains' | 'count' | 'default' | 'descending' | 'div' |
                                                               'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                                               'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                                               'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' |
                                                               'where' | 'with' | 'words' | '|' | '||' | '}' | '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 65) then                     (: '?' :)
        let $state := p:consume(65, $input, $state)         (: '?' :)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "SingleType"),
    $state
  )
};

(:~
 : Try parsing SingleType.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-SingleType($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "SingleType"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-SimpleTypeName($input, $state)
    let $state := p:lookahead1W(202, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                                               '>>' | '?' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'castable' | 'collation' |
                                                               'contains' | 'count' | 'default' | 'descending' | 'div' |
                                                               'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                                               'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                                               'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' |
                                                               'where' | 'with' | 'words' | '|' | '||' | '}' | '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 65) then                     (: '?' :)
        let $state := p:consume(65, $input, $state)         (: '?' :)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "SingleType"),
    $state
  )
};

(:~
 : Parse ArrowFunctionSpecifier.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ArrowFunctionSpecifier($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ArrowFunctionSpecifier"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 31) then                     (: '$' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-VarRef($input, $state)
        return $state
      else if ($state[$p:l1] = 34) then                     (: '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ParenthesizedExpr($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-EQName($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ArrowFunctionSpecifier"),
    $state
  )
};

(:~
 : Try parsing ArrowFunctionSpecifier.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ArrowFunctionSpecifier($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ArrowFunctionSpecifier"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 31) then                     (: '$' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-VarRef($input, $state)
        return $state
      else if ($state[$p:l1] = 34) then                     (: '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ParenthesizedExpr($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-EQName($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ArrowFunctionSpecifier"),
    $state
  )
};

(:~
 : Parse Pragma.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Pragma($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "Pragma"),
  let $state :=
    let $state := p:consume(35, $input, $state)             (: '(#' :)
    let $state := p:lookahead1(231, $input, $state)         (: URIQualifiedName | QName^Token | S | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                                               'default' | 'delete' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 17) then                     (: S :)
        let $state := p:consume(17, $input, $state)         (: S :)
        return $state
      else
        $state
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EQName($input, $state)
    let $state := p:lookahead1(12, $input, $state)          (: S | '#)' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 17) then                     (: S :)
        let $state := p:consume(17, $input, $state)         (: S :)
        let $state := p:lookahead1(2, $input, $state)       (: PragmaContents :)
        let $state := p:consume(20, $input, $state)         (: PragmaContents :)
        return $state
      else
        $state
    let $state := p:lookahead1(6, $input, $state)           (: '#)' :)
    let $state := p:consume(30, $input, $state)             (: '#)' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "Pragma"),
    $state
  )
};

(:~
 : Try parsing Pragma.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-Pragma($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "Pragma"),
  let $state :=
    let $state := p:consume(35, $input, $state)             (: '(#' :)
    let $state := p:lookahead1(231, $input, $state)         (: URIQualifiedName | QName^Token | S | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                                               'default' | 'delete' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 17) then                     (: S :)
        let $state := p:consume(17, $input, $state)         (: S :)
        return $state
      else
        $state
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EQName($input, $state)
    let $state := p:lookahead1(12, $input, $state)          (: S | '#)' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 17) then                     (: S :)
        let $state := p:consume(17, $input, $state)         (: S :)
        let $state := p:lookahead1(2, $input, $state)       (: PragmaContents :)
        let $state := p:consume(20, $input, $state)         (: PragmaContents :)
        return $state
      else
        $state
    let $state := p:lookahead1(6, $input, $state)           (: '#)' :)
    let $state := p:consume(30, $input, $state)             (: '#)' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "Pragma"),
    $state
  )
};

(:~
 : Parse the 1st loop of production ExtensionExpr (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ExtensionExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Pragma($input, $state)
    let $state := p:lookahead1W(91, $input, $state)         (: S^WS | '(#' | ('(' ':') | '{' :)
    return
      if ($state[$p:l1] != 35) then                         (: '(#' :)
        $state
      else
        p:parse-ExtensionExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production ExtensionExpr (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ExtensionExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-Pragma($input, $state)
    let $state := p:lookahead1W(91, $input, $state)         (: S^WS | '(#' | ('(' ':') | '{' :)
    return
      if ($state[$p:l1] != 35) then                         (: '(#' :)
        $state
      else
        p:try-ExtensionExpr-1($input, $state)
};

(:~
 : Parse ExtensionExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ExtensionExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ExtensionExpr"),
  let $state :=
    let $state := p:parse-ExtensionExpr-1($input, $state)
    let $state := p:consume(264, $input, $state)            (: '{' :)
    let $state := p:lookahead1W(249, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' | '}' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 268) then                   (: '}' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Expr($input, $state)
        return $state
      else
        $state
    let $state := p:consume(268, $input, $state)            (: '}' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ExtensionExpr"),
    $state
  )
};

(:~
 : Try parsing ExtensionExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ExtensionExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ExtensionExpr"),
  let $state :=
    let $state := p:try-ExtensionExpr-1($input, $state)
    let $state := p:consume(264, $input, $state)            (: '{' :)
    let $state := p:lookahead1W(249, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' | '}' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 268) then                   (: '}' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-Expr($input, $state)
        return $state
      else
        $state
    let $state := p:consume(268, $input, $state)            (: '}' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ExtensionExpr"),
    $state
  )
};

(:~
 : Parse the 1st loop of production PredicateList (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-PredicateList-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(217, $input, $state)        (: S^WS | EOF | '!' | '!=' | ('(' ':') | ')' | '*' | '+' |
                                                               ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' |
                                                               '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                                               'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                                               'castable' | 'collation' | 'contains' | 'count' |
                                                               'default' | 'descending' | 'div' | 'else' | 'empty' |
                                                               'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' |
                                                               'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' |
                                                               'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                                               'transform' | 'treat' | 'union' | 'update' | 'where' |
                                                               'with' | 'words' | '|' | '||' | '}' | '}`' :)
    return
      if ($state[$p:l1] != 69) then                         (: '[' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Predicate($input, $state)
        return p:parse-PredicateList-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production PredicateList (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-PredicateList-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(217, $input, $state)        (: S^WS | EOF | '!' | '!=' | ('(' ':') | ')' | '*' | '+' |
                                                               ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' |
                                                               '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                                               'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                                               'castable' | 'collation' | 'contains' | 'count' |
                                                               'default' | 'descending' | 'div' | 'else' | 'empty' |
                                                               'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' |
                                                               'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' |
                                                               'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                                               'transform' | 'treat' | 'union' | 'update' | 'where' |
                                                               'with' | 'words' | '|' | '||' | '}' | '}`' :)
    return
      if ($state[$p:l1] != 69) then                         (: '[' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-Predicate($input, $state)
        return p:try-PredicateList-1($input, $state)
};

(:~
 : Parse PredicateList.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-PredicateList($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "PredicateList"),
  let $state :=
    let $state := p:parse-PredicateList-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "PredicateList"),
    $state
  )
};

(:~
 : Try parsing PredicateList.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-PredicateList($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "PredicateList"),
  let $state :=
    let $state := p:try-PredicateList-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "PredicateList"),
    $state
  )
};

(:~
 : Parse AbbrevForwardStep.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AbbrevForwardStep($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "AbbrevForwardStep"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 67) then                     (: '@' :)
        let $state := p:consume(67, $input, $state)         (: '@' :)
        return $state
      else
        $state
    let $state := p:lookahead1W(234, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | Wildcard |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-NodeTest($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "AbbrevForwardStep"),
    $state
  )
};

(:~
 : Try parsing AbbrevForwardStep.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-AbbrevForwardStep($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "AbbrevForwardStep"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 67) then                     (: '@' :)
        let $state := p:consume(67, $input, $state)         (: '@' :)
        return $state
      else
        $state
    let $state := p:lookahead1W(234, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | Wildcard |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-NodeTest($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "AbbrevForwardStep"),
    $state
  )
};

(:~
 : Parse ForwardAxis.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ForwardAxis($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ForwardAxis"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 95) then                     (: 'child' :)
        let $state := p:consume(95, $input, $state)         (: 'child' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
      else if ($state[$p:l1] = 110) then                    (: 'descendant' :)
        let $state := p:consume(110, $input, $state)        (: 'descendant' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
      else if ($state[$p:l1] = 86) then                     (: 'attribute' :)
        let $state := p:consume(86, $input, $state)         (: 'attribute' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
      else if ($state[$p:l1] = 218) then                    (: 'self' :)
        let $state := p:consume(218, $input, $state)        (: 'self' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
      else if ($state[$p:l1] = 111) then                    (: 'descendant-or-self' :)
        let $state := p:consume(111, $input, $state)        (: 'descendant-or-self' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
      else if ($state[$p:l1] = 135) then                    (: 'following-sibling' :)
        let $state := p:consume(135, $input, $state)        (: 'following-sibling' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
      else
        let $state := p:consume(134, $input, $state)        (: 'following' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ForwardAxis"),
    $state
  )
};

(:~
 : Try parsing ForwardAxis.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ForwardAxis($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ForwardAxis"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 95) then                     (: 'child' :)
        let $state := p:consume(95, $input, $state)         (: 'child' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
      else if ($state[$p:l1] = 110) then                    (: 'descendant' :)
        let $state := p:consume(110, $input, $state)        (: 'descendant' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
      else if ($state[$p:l1] = 86) then                     (: 'attribute' :)
        let $state := p:consume(86, $input, $state)         (: 'attribute' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
      else if ($state[$p:l1] = 218) then                    (: 'self' :)
        let $state := p:consume(218, $input, $state)        (: 'self' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
      else if ($state[$p:l1] = 111) then                    (: 'descendant-or-self' :)
        let $state := p:consume(111, $input, $state)        (: 'descendant-or-self' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
      else if ($state[$p:l1] = 135) then                    (: 'following-sibling' :)
        let $state := p:consume(135, $input, $state)        (: 'following-sibling' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
      else
        let $state := p:consume(134, $input, $state)        (: 'following' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ForwardAxis"),
    $state
  )
};

(:~
 : Parse ForwardStep.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ForwardStep($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ForwardStep"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 86) then                         (: 'attribute' :)
        let $state := p:lookahead2W(223, $input, $state)    (: S^WS | EOF | '!' | '!=' | '(' | ('(' ':') | ')' | '*' |
                                                               '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                                               ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                                               'return' | 'satisfies' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                                               '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] = (95,                         (: 'child' :)
                                110,                        (: 'descendant' :)
                                111,                        (: 'descendant-or-self' :)
                                134,                        (: 'following' :)
                                135,                        (: 'following-sibling' :)
                                218)) then                  (: 'self' :)
        let $state := p:lookahead2W(221, $input, $state)    (: S^WS | EOF | '!' | '!=' | ('(' ':') | ')' | '*' | '+' |
                                                               ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' |
                                                               '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                                               'return' | 'satisfies' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                                               '||' | '}' | '}`' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 25686                        (: 'attribute' '::' :)
            or $state[$p:lk] = 25695                        (: 'child' '::' :)
            or $state[$p:lk] = 25710                        (: 'descendant' '::' :)
            or $state[$p:lk] = 25711                        (: 'descendant-or-self' '::' :)
            or $state[$p:lk] = 25734                        (: 'following' '::' :)
            or $state[$p:lk] = 25735                        (: 'following-sibling' '::' :)
            or $state[$p:lk] = 25818) then                  (: 'self' '::' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ForwardAxis($input, $state)
        let $state := p:lookahead1W(234, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | Wildcard |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-NodeTest($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-AbbrevForwardStep($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ForwardStep"),
    $state
  )
};

(:~
 : Try parsing ForwardStep.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ForwardStep($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ForwardStep"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 86) then                         (: 'attribute' :)
        let $state := p:lookahead2W(223, $input, $state)    (: S^WS | EOF | '!' | '!=' | '(' | ('(' ':') | ')' | '*' |
                                                               '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                                               ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                                               'return' | 'satisfies' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                                               '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] = (95,                         (: 'child' :)
                                110,                        (: 'descendant' :)
                                111,                        (: 'descendant-or-self' :)
                                134,                        (: 'following' :)
                                135,                        (: 'following-sibling' :)
                                218)) then                  (: 'self' :)
        let $state := p:lookahead2W(221, $input, $state)    (: S^WS | EOF | '!' | '!=' | ('(' ':') | ')' | '*' | '+' |
                                                               ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' |
                                                               '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                                               'return' | 'satisfies' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                                               '||' | '}' | '}`' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 25686                        (: 'attribute' '::' :)
            or $state[$p:lk] = 25695                        (: 'child' '::' :)
            or $state[$p:lk] = 25710                        (: 'descendant' '::' :)
            or $state[$p:lk] = 25711                        (: 'descendant-or-self' '::' :)
            or $state[$p:lk] = 25734                        (: 'following' '::' :)
            or $state[$p:lk] = 25735                        (: 'following-sibling' '::' :)
            or $state[$p:lk] = 25818) then                  (: 'self' '::' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ForwardAxis($input, $state)
        let $state := p:lookahead1W(234, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | Wildcard |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-NodeTest($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-AbbrevForwardStep($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ForwardStep"),
    $state
  )
};

(:~
 : Parse AbbrevReverseStep.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AbbrevReverseStep($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "AbbrevReverseStep"),
  let $state :=
    let $state := p:consume(44, $input, $state)             (: '..' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "AbbrevReverseStep"),
    $state
  )
};

(:~
 : Try parsing AbbrevReverseStep.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-AbbrevReverseStep($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "AbbrevReverseStep"),
  let $state :=
    let $state := p:consume(44, $input, $state)             (: '..' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "AbbrevReverseStep"),
    $state
  )
};

(:~
 : Parse NodeTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-NodeTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "NodeTest"),
  let $state :=
    let $state :=
      if ($state[$p:l1] = (86,                              (: 'attribute' :)
                           97,                              (: 'comment' :)
                           119,                             (: 'document-node' :)
                           120,                             (: 'element' :)
                           178,                             (: 'namespace-node' :)
                           184,                             (: 'node' :)
                           206,                             (: 'processing-instruction' :)
                           215,                             (: 'schema-attribute' :)
                           216,                             (: 'schema-element' :)
                           232)) then                       (: 'text' :)
        let $state := p:lookahead2W(220, $input, $state)    (: S^WS | EOF | '!' | '!=' | '(' | ('(' ':') | ')' | '*' |
                                                               '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' |
                                                               '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                                               'return' | 'satisfies' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                                               '||' | '}' | '}`' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 17494                        (: 'attribute' '(' :)
            or $state[$p:lk] = 17505                        (: 'comment' '(' :)
            or $state[$p:lk] = 17527                        (: 'document-node' '(' :)
            or $state[$p:lk] = 17528                        (: 'element' '(' :)
            or $state[$p:lk] = 17586                        (: 'namespace-node' '(' :)
            or $state[$p:lk] = 17592                        (: 'node' '(' :)
            or $state[$p:lk] = 17614                        (: 'processing-instruction' '(' :)
            or $state[$p:lk] = 17623                        (: 'schema-attribute' '(' :)
            or $state[$p:lk] = 17624                        (: 'schema-element' '(' :)
            or $state[$p:lk] = 17640) then                  (: 'text' '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-KindTest($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-NameTest($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "NodeTest"),
    $state
  )
};

(:~
 : Try parsing NodeTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-NodeTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "NodeTest"),
  let $state :=
    let $state :=
      if ($state[$p:l1] = (86,                              (: 'attribute' :)
                           97,                              (: 'comment' :)
                           119,                             (: 'document-node' :)
                           120,                             (: 'element' :)
                           178,                             (: 'namespace-node' :)
                           184,                             (: 'node' :)
                           206,                             (: 'processing-instruction' :)
                           215,                             (: 'schema-attribute' :)
                           216,                             (: 'schema-element' :)
                           232)) then                       (: 'text' :)
        let $state := p:lookahead2W(220, $input, $state)    (: S^WS | EOF | '!' | '!=' | '(' | ('(' ':') | ')' | '*' |
                                                               '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' |
                                                               '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                                               'return' | 'satisfies' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                                               '||' | '}' | '}`' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 17494                        (: 'attribute' '(' :)
            or $state[$p:lk] = 17505                        (: 'comment' '(' :)
            or $state[$p:lk] = 17527                        (: 'document-node' '(' :)
            or $state[$p:lk] = 17528                        (: 'element' '(' :)
            or $state[$p:lk] = 17586                        (: 'namespace-node' '(' :)
            or $state[$p:lk] = 17592                        (: 'node' '(' :)
            or $state[$p:lk] = 17614                        (: 'processing-instruction' '(' :)
            or $state[$p:lk] = 17623                        (: 'schema-attribute' '(' :)
            or $state[$p:lk] = 17624                        (: 'schema-element' '(' :)
            or $state[$p:lk] = 17640) then                  (: 'text' '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-KindTest($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-NameTest($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "NodeTest"),
    $state
  )
};

(:~
 : Parse ReverseAxis.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ReverseAxis($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ReverseAxis"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 197) then                    (: 'parent' :)
        let $state := p:consume(197, $input, $state)        (: 'parent' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
      else if ($state[$p:l1] = 78) then                     (: 'ancestor' :)
        let $state := p:consume(78, $input, $state)         (: 'ancestor' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
      else if ($state[$p:l1] = 203) then                    (: 'preceding-sibling' :)
        let $state := p:consume(203, $input, $state)        (: 'preceding-sibling' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
      else if ($state[$p:l1] = 202) then                    (: 'preceding' :)
        let $state := p:consume(202, $input, $state)        (: 'preceding' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
      else
        let $state := p:consume(79, $input, $state)         (: 'ancestor-or-self' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ReverseAxis"),
    $state
  )
};

(:~
 : Try parsing ReverseAxis.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ReverseAxis($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ReverseAxis"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 197) then                    (: 'parent' :)
        let $state := p:consume(197, $input, $state)        (: 'parent' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
      else if ($state[$p:l1] = 78) then                     (: 'ancestor' :)
        let $state := p:consume(78, $input, $state)         (: 'ancestor' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
      else if ($state[$p:l1] = 203) then                    (: 'preceding-sibling' :)
        let $state := p:consume(203, $input, $state)        (: 'preceding-sibling' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
      else if ($state[$p:l1] = 202) then                    (: 'preceding' :)
        let $state := p:consume(202, $input, $state)        (: 'preceding' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
      else
        let $state := p:consume(79, $input, $state)         (: 'ancestor-or-self' :)
        let $state := p:lookahead1W(29, $input, $state)     (: S^WS | ('(' ':') | '::' :)
        let $state := p:consume(50, $input, $state)         (: '::' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ReverseAxis"),
    $state
  )
};

(:~
 : Parse ReverseStep.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ReverseStep($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ReverseStep"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 44) then                     (: '..' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-AbbrevReverseStep($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ReverseAxis($input, $state)
        let $state := p:lookahead1W(234, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | Wildcard |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-NodeTest($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ReverseStep"),
    $state
  )
};

(:~
 : Try parsing ReverseStep.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ReverseStep($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ReverseStep"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 44) then                     (: '..' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-AbbrevReverseStep($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ReverseAxis($input, $state)
        let $state := p:lookahead1W(234, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | Wildcard |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-NodeTest($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ReverseStep"),
    $state
  )
};

(:~
 : Parse AxisStep.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AxisStep($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "AxisStep"),
  let $state :=
    let $state :=
      if ($state[$p:l1] = (78,                              (: 'ancestor' :)
                           79,                              (: 'ancestor-or-self' :)
                           197,                             (: 'parent' :)
                           202,                             (: 'preceding' :)
                           203)) then                       (: 'preceding-sibling' :)
        let $state := p:lookahead2W(221, $input, $state)    (: S^WS | EOF | '!' | '!=' | ('(' ':') | ')' | '*' | '+' |
                                                               ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' |
                                                               '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                                               'return' | 'satisfies' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                                               '||' | '}' | '}`' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 44                           (: '..' :)
            or $state[$p:lk] = 25678                        (: 'ancestor' '::' :)
            or $state[$p:lk] = 25679                        (: 'ancestor-or-self' '::' :)
            or $state[$p:lk] = 25797                        (: 'parent' '::' :)
            or $state[$p:lk] = 25802                        (: 'preceding' '::' :)
            or $state[$p:lk] = 25803) then                  (: 'preceding-sibling' '::' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ReverseStep($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ForwardStep($input, $state)
        return $state
    let $state := p:lookahead1W(217, $input, $state)        (: S^WS | EOF | '!' | '!=' | ('(' ':') | ')' | '*' | '+' |
                                                               ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' |
                                                               '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                                               'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                                               'castable' | 'collation' | 'contains' | 'count' |
                                                               'default' | 'descending' | 'div' | 'else' | 'empty' |
                                                               'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' |
                                                               'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' |
                                                               'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                                               'transform' | 'treat' | 'union' | 'update' | 'where' |
                                                               'with' | 'words' | '|' | '||' | '}' | '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-PredicateList($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "AxisStep"),
    $state
  )
};

(:~
 : Try parsing AxisStep.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-AxisStep($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "AxisStep"),
  let $state :=
    let $state :=
      if ($state[$p:l1] = (78,                              (: 'ancestor' :)
                           79,                              (: 'ancestor-or-self' :)
                           197,                             (: 'parent' :)
                           202,                             (: 'preceding' :)
                           203)) then                       (: 'preceding-sibling' :)
        let $state := p:lookahead2W(221, $input, $state)    (: S^WS | EOF | '!' | '!=' | ('(' ':') | ')' | '*' | '+' |
                                                               ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' |
                                                               '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                                               'return' | 'satisfies' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                                               '||' | '}' | '}`' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 44                           (: '..' :)
            or $state[$p:lk] = 25678                        (: 'ancestor' '::' :)
            or $state[$p:lk] = 25679                        (: 'ancestor-or-self' '::' :)
            or $state[$p:lk] = 25797                        (: 'parent' '::' :)
            or $state[$p:lk] = 25802                        (: 'preceding' '::' :)
            or $state[$p:lk] = 25803) then                  (: 'preceding-sibling' '::' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ReverseStep($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ForwardStep($input, $state)
        return $state
    let $state := p:lookahead1W(217, $input, $state)        (: S^WS | EOF | '!' | '!=' | ('(' ':') | ')' | '*' | '+' |
                                                               ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' |
                                                               '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                                               'and' | 'as' | 'ascending' | 'before' | 'case' | 'cast' |
                                                               'castable' | 'collation' | 'contains' | 'count' |
                                                               'default' | 'descending' | 'div' | 'else' | 'empty' |
                                                               'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' |
                                                               'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' |
                                                               'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                                               'transform' | 'treat' | 'union' | 'update' | 'where' |
                                                               'with' | 'words' | '|' | '||' | '}' | '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-PredicateList($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "AxisStep"),
    $state
  )
};

(:~
 : Parse Lookup.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Lookup($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "Lookup"),
  let $state :=
    let $state := p:consume(65, $input, $state)             (: '?' :)
    let $state := p:lookahead1W(180, $input, $state)        (: IntegerLiteral | NCName^Token | S^WS | '(' | ('(' ':') |
                                                               '*' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                                               'castable' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                                               'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                                               'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                                               'union' | 'where' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-KeySpecifier($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "Lookup"),
    $state
  )
};

(:~
 : Try parsing Lookup.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-Lookup($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "Lookup"),
  let $state :=
    let $state := p:consume(65, $input, $state)             (: '?' :)
    let $state := p:lookahead1W(180, $input, $state)        (: IntegerLiteral | NCName^Token | S^WS | '(' | ('(' ':') |
                                                               '*' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                                               'castable' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                                               'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                                               'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                                               'union' | 'where' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-KeySpecifier($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "Lookup"),
    $state
  )
};

(:~
 : Parse Predicate.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Predicate($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "Predicate"),
  let $state :=
    let $state := p:consume(69, $input, $state)             (: '[' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Expr($input, $state)
    let $state := p:consume(70, $input, $state)             (: ']' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "Predicate"),
    $state
  )
};

(:~
 : Try parsing Predicate.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-Predicate($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "Predicate"),
  let $state :=
    let $state := p:consume(69, $input, $state)             (: '[' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-Expr($input, $state)
    let $state := p:consume(70, $input, $state)             (: ']' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "Predicate"),
    $state
  )
};

(:~
 : Parse the 1st loop of production PostfixExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-PostfixExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(224, $input, $state)        (: S^WS | EOF | '!' | '!=' | '(' | ('(' ':') | ')' | '*' |
                                                               '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' |
                                                               '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                                               'return' | 'satisfies' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                                               '||' | '}' | '}`' :)
    return
      if ($state[$p:l1] != 34                               (: '(' :)
      and $state[$p:l1] != 65                               (: '?' :)
      and $state[$p:l1] != 69) then                         (: '[' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 69) then                 (: '[' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-Predicate($input, $state)
            return $state
          else if ($state[$p:l1] = 34) then                 (: '(' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-ArgumentList($input, $state)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-Lookup($input, $state)
            return $state
        return p:parse-PostfixExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production PostfixExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-PostfixExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(224, $input, $state)        (: S^WS | EOF | '!' | '!=' | '(' | ('(' ':') | ')' | '*' |
                                                               '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' |
                                                               '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                                               'return' | 'satisfies' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                                               '||' | '}' | '}`' :)
    return
      if ($state[$p:l1] != 34                               (: '(' :)
      and $state[$p:l1] != 65                               (: '?' :)
      and $state[$p:l1] != 69) then                         (: '[' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 69) then                 (: '[' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-Predicate($input, $state)
            return $state
          else if ($state[$p:l1] = 34) then                 (: '(' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-ArgumentList($input, $state)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-Lookup($input, $state)
            return $state
        return p:try-PostfixExpr-1($input, $state)
};

(:~
 : Parse PostfixExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-PostfixExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "PostfixExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-PrimaryExpr($input, $state)
    let $state := p:parse-PostfixExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "PostfixExpr"),
    $state
  )
};

(:~
 : Try parsing PostfixExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-PostfixExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "PostfixExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-PrimaryExpr($input, $state)
    let $state := p:try-PostfixExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "PostfixExpr"),
    $state
  )
};

(:~
 : Parse StepExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-StepExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "StepExpr"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 86) then                         (: 'attribute' :)
        let $state := p:lookahead2W(252, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | EOF | '!' |
                                                               '!=' | '#' | '(' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' |
                                                               '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'before' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'contains' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'into' | 'invoke' | 'is' |
                                                               'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'paragraphs' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' |
                                                               'sentences' | 'some' | 'stable' | 'start' | 'switch' |
                                                               'text' | 'times' | 'to' | 'transform' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'words' | 'xquery' |
                                                               '{' | '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] eq 120) then                   (: 'element' :)
        let $state := p:lookahead2W(251, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | EOF | '!' |
                                                               '!=' | '#' | '(' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                                               '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'before' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'contains' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'into' | 'invoke' | 'is' |
                                                               'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'paragraphs' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' |
                                                               'sentences' | 'some' | 'stable' | 'start' | 'switch' |
                                                               'text' | 'times' | 'to' | 'transform' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'words' | 'xquery' |
                                                               '{' | '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] = (177,                        (: 'namespace' :)
                                206)) then                  (: 'processing-instruction' :)
        let $state := p:lookahead2W(227, $input, $state)    (: NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' |
                                                               ('(' ':') | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                                               ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' |
                                                               '>>' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                                               'contains' | 'count' | 'default' | 'descending' | 'div' |
                                                               'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                                               'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                                               'stable' | 'start' | 'times' | 'to' | 'transform' |
                                                               'treat' | 'union' | 'update' | 'where' | 'with' |
                                                               'words' | '{' | '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] = (97,                         (: 'comment' :)
                                118,                        (: 'document' :)
                                193,                        (: 'ordered' :)
                                232,                        (: 'text' :)
                                244)) then                  (: 'unordered' :)
        let $state := p:lookahead2W(226, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                                               ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                                               'return' | 'satisfies' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'where' | 'with' | 'words' | '{' |
                                                               '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] = (123,                        (: 'empty-sequence' :)
                                149,                        (: 'if' :)
                                161,                        (: 'item' :)
                                231,                        (: 'switch' :)
                                242)) then                  (: 'typeswitch' :)
        let $state := p:lookahead2W(219, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | ('(' ':') | ')' | '*' |
                                                               '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' |
                                                               '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                                               'return' | 'satisfies' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                                               '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] = (78,                         (: 'ancestor' :)
                                79,                         (: 'ancestor-or-self' :)
                                95,                         (: 'child' :)
                                110,                        (: 'descendant' :)
                                111,                        (: 'descendant-or-self' :)
                                134,                        (: 'following' :)
                                135,                        (: 'following-sibling' :)
                                197,                        (: 'parent' :)
                                202,                        (: 'preceding' :)
                                203,                        (: 'preceding-sibling' :)
                                218)) then                  (: 'self' :)
        let $state := p:lookahead2W(225, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                                               '[' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                                               'contains' | 'count' | 'default' | 'descending' | 'div' |
                                                               'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                                               'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                                               'stable' | 'start' | 'times' | 'to' | 'transform' |
                                                               'treat' | 'union' | 'update' | 'where' | 'with' |
                                                               'words' | '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] = (5,                          (: URIQualifiedName :)
                                15,                         (: QName^Token :)
                                80,                         (: 'and' :)
                                83,                         (: 'as' :)
                                84,                         (: 'ascending' :)
                                85,                         (: 'at' :)
                                91,                         (: 'case' :)
                                92,                         (: 'cast' :)
                                93,                         (: 'castable' :)
                                96,                         (: 'collation' :)
                                102,                        (: 'copy' :)
                                104,                        (: 'count' :)
                                107,                        (: 'declare' :)
                                108,                        (: 'default' :)
                                109,                        (: 'delete' :)
                                112,                        (: 'descending' :)
                                117,                        (: 'div' :)
                                119,                        (: 'document-node' :)
                                121,                        (: 'else' :)
                                122,                        (: 'empty' :)
                                125,                        (: 'end' :)
                                127,                        (: 'eq' :)
                                128,                        (: 'every' :)
                                130,                        (: 'except' :)
                                136,                        (: 'for' :)
                                142,                        (: 'function' :)
                                143,                        (: 'ge' :)
                                145,                        (: 'group' :)
                                147,                        (: 'gt' :)
                                148,                        (: 'idiv' :)
                                150,                        (: 'import' :)
                                155,                        (: 'insert' :)
                                156,                        (: 'instance' :)
                                157,                        (: 'intersect' :)
                                159,                        (: 'invoke' :)
                                160,                        (: 'is' :)
                                165,                        (: 'le' :)
                                167,                        (: 'let' :)
                                170,                        (: 'lt' :)
                                173,                        (: 'mod' :)
                                174,                        (: 'modify' :)
                                175,                        (: 'module' :)
                                178,                        (: 'namespace-node' :)
                                179,                        (: 'ne' :)
                                184,                        (: 'node' :)
                                189,                        (: 'only' :)
                                191,                        (: 'or' :)
                                192,                        (: 'order' :)
                                208,                        (: 'rename' :)
                                209,                        (: 'replace' :)
                                210,                        (: 'return' :)
                                213,                        (: 'satisfies' :)
                                215,                        (: 'schema-attribute' :)
                                216,                        (: 'schema-element' :)
                                224,                        (: 'some' :)
                                225,                        (: 'stable' :)
                                226,                        (: 'start' :)
                                236,                        (: 'to' :)
                                237,                        (: 'transform' :)
                                238,                        (: 'treat' :)
                                239,                        (: 'try' :)
                                243,                        (: 'union' :)
                                245,                        (: 'update' :)
                                249,                        (: 'validate' :)
                                255,                        (: 'where' :)
                                258,                        (: 'with' :)
                                262)) then                  (: 'xquery' :)
        let $state := p:lookahead2W(222, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                                               ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                                               'return' | 'satisfies' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                                               '||' | '}' | '}`' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 41046                        (: 'attribute' 'and' :)
            or $state[$p:lk] = 41080                        (: 'element' 'and' :)
            or $state[$p:lk] = 41137                        (: 'namespace' 'and' :)
            or $state[$p:lk] = 41166                        (: 'processing-instruction' 'and' :)
            or $state[$p:lk] = 42582                        (: 'attribute' 'as' :)
            or $state[$p:lk] = 42616                        (: 'element' 'as' :)
            or $state[$p:lk] = 42673                        (: 'namespace' 'as' :)
            or $state[$p:lk] = 42702                        (: 'processing-instruction' 'as' :)
            or $state[$p:lk] = 43094                        (: 'attribute' 'ascending' :)
            or $state[$p:lk] = 43128                        (: 'element' 'ascending' :)
            or $state[$p:lk] = 43185                        (: 'namespace' 'ascending' :)
            or $state[$p:lk] = 43214                        (: 'processing-instruction' 'ascending' :)
            or $state[$p:lk] = 46678                        (: 'attribute' 'case' :)
            or $state[$p:lk] = 46712                        (: 'element' 'case' :)
            or $state[$p:lk] = 46769                        (: 'namespace' 'case' :)
            or $state[$p:lk] = 46798                        (: 'processing-instruction' 'case' :)
            or $state[$p:lk] = 47190                        (: 'attribute' 'cast' :)
            or $state[$p:lk] = 47224                        (: 'element' 'cast' :)
            or $state[$p:lk] = 47281                        (: 'namespace' 'cast' :)
            or $state[$p:lk] = 47310                        (: 'processing-instruction' 'cast' :)
            or $state[$p:lk] = 47702                        (: 'attribute' 'castable' :)
            or $state[$p:lk] = 47736                        (: 'element' 'castable' :)
            or $state[$p:lk] = 47793                        (: 'namespace' 'castable' :)
            or $state[$p:lk] = 47822                        (: 'processing-instruction' 'castable' :)
            or $state[$p:lk] = 49238                        (: 'attribute' 'collation' :)
            or $state[$p:lk] = 49272                        (: 'element' 'collation' :)
            or $state[$p:lk] = 49329                        (: 'namespace' 'collation' :)
            or $state[$p:lk] = 49358                        (: 'processing-instruction' 'collation' :)
            or $state[$p:lk] = 53334                        (: 'attribute' 'count' :)
            or $state[$p:lk] = 53368                        (: 'element' 'count' :)
            or $state[$p:lk] = 53425                        (: 'namespace' 'count' :)
            or $state[$p:lk] = 53454                        (: 'processing-instruction' 'count' :)
            or $state[$p:lk] = 55382                        (: 'attribute' 'default' :)
            or $state[$p:lk] = 55416                        (: 'element' 'default' :)
            or $state[$p:lk] = 55473                        (: 'namespace' 'default' :)
            or $state[$p:lk] = 55502                        (: 'processing-instruction' 'default' :)
            or $state[$p:lk] = 57430                        (: 'attribute' 'descending' :)
            or $state[$p:lk] = 57464                        (: 'element' 'descending' :)
            or $state[$p:lk] = 57521                        (: 'namespace' 'descending' :)
            or $state[$p:lk] = 57550                        (: 'processing-instruction' 'descending' :)
            or $state[$p:lk] = 59990                        (: 'attribute' 'div' :)
            or $state[$p:lk] = 60024                        (: 'element' 'div' :)
            or $state[$p:lk] = 60081                        (: 'namespace' 'div' :)
            or $state[$p:lk] = 60110                        (: 'processing-instruction' 'div' :)
            or $state[$p:lk] = 62038                        (: 'attribute' 'else' :)
            or $state[$p:lk] = 62072                        (: 'element' 'else' :)
            or $state[$p:lk] = 62129                        (: 'namespace' 'else' :)
            or $state[$p:lk] = 62158                        (: 'processing-instruction' 'else' :)
            or $state[$p:lk] = 62550                        (: 'attribute' 'empty' :)
            or $state[$p:lk] = 62584                        (: 'element' 'empty' :)
            or $state[$p:lk] = 62641                        (: 'namespace' 'empty' :)
            or $state[$p:lk] = 62670                        (: 'processing-instruction' 'empty' :)
            or $state[$p:lk] = 64086                        (: 'attribute' 'end' :)
            or $state[$p:lk] = 64120                        (: 'element' 'end' :)
            or $state[$p:lk] = 64177                        (: 'namespace' 'end' :)
            or $state[$p:lk] = 64206                        (: 'processing-instruction' 'end' :)
            or $state[$p:lk] = 65110                        (: 'attribute' 'eq' :)
            or $state[$p:lk] = 65144                        (: 'element' 'eq' :)
            or $state[$p:lk] = 65201                        (: 'namespace' 'eq' :)
            or $state[$p:lk] = 65230                        (: 'processing-instruction' 'eq' :)
            or $state[$p:lk] = 66646                        (: 'attribute' 'except' :)
            or $state[$p:lk] = 66680                        (: 'element' 'except' :)
            or $state[$p:lk] = 66737                        (: 'namespace' 'except' :)
            or $state[$p:lk] = 66766                        (: 'processing-instruction' 'except' :)
            or $state[$p:lk] = 69718                        (: 'attribute' 'for' :)
            or $state[$p:lk] = 69752                        (: 'element' 'for' :)
            or $state[$p:lk] = 69809                        (: 'namespace' 'for' :)
            or $state[$p:lk] = 69838                        (: 'processing-instruction' 'for' :)
            or $state[$p:lk] = 73302                        (: 'attribute' 'ge' :)
            or $state[$p:lk] = 73336                        (: 'element' 'ge' :)
            or $state[$p:lk] = 73393                        (: 'namespace' 'ge' :)
            or $state[$p:lk] = 73422                        (: 'processing-instruction' 'ge' :)
            or $state[$p:lk] = 74326                        (: 'attribute' 'group' :)
            or $state[$p:lk] = 74360                        (: 'element' 'group' :)
            or $state[$p:lk] = 74417                        (: 'namespace' 'group' :)
            or $state[$p:lk] = 74446                        (: 'processing-instruction' 'group' :)
            or $state[$p:lk] = 75350                        (: 'attribute' 'gt' :)
            or $state[$p:lk] = 75384                        (: 'element' 'gt' :)
            or $state[$p:lk] = 75441                        (: 'namespace' 'gt' :)
            or $state[$p:lk] = 75470                        (: 'processing-instruction' 'gt' :)
            or $state[$p:lk] = 75862                        (: 'attribute' 'idiv' :)
            or $state[$p:lk] = 75896                        (: 'element' 'idiv' :)
            or $state[$p:lk] = 75953                        (: 'namespace' 'idiv' :)
            or $state[$p:lk] = 75982                        (: 'processing-instruction' 'idiv' :)
            or $state[$p:lk] = 79958                        (: 'attribute' 'instance' :)
            or $state[$p:lk] = 79992                        (: 'element' 'instance' :)
            or $state[$p:lk] = 80049                        (: 'namespace' 'instance' :)
            or $state[$p:lk] = 80078                        (: 'processing-instruction' 'instance' :)
            or $state[$p:lk] = 80470                        (: 'attribute' 'intersect' :)
            or $state[$p:lk] = 80504                        (: 'element' 'intersect' :)
            or $state[$p:lk] = 80561                        (: 'namespace' 'intersect' :)
            or $state[$p:lk] = 80590                        (: 'processing-instruction' 'intersect' :)
            or $state[$p:lk] = 82006                        (: 'attribute' 'is' :)
            or $state[$p:lk] = 82040                        (: 'element' 'is' :)
            or $state[$p:lk] = 82097                        (: 'namespace' 'is' :)
            or $state[$p:lk] = 82126                        (: 'processing-instruction' 'is' :)
            or $state[$p:lk] = 84566                        (: 'attribute' 'le' :)
            or $state[$p:lk] = 84600                        (: 'element' 'le' :)
            or $state[$p:lk] = 84657                        (: 'namespace' 'le' :)
            or $state[$p:lk] = 84686                        (: 'processing-instruction' 'le' :)
            or $state[$p:lk] = 85590                        (: 'attribute' 'let' :)
            or $state[$p:lk] = 85624                        (: 'element' 'let' :)
            or $state[$p:lk] = 85681                        (: 'namespace' 'let' :)
            or $state[$p:lk] = 85710                        (: 'processing-instruction' 'let' :)
            or $state[$p:lk] = 87126                        (: 'attribute' 'lt' :)
            or $state[$p:lk] = 87160                        (: 'element' 'lt' :)
            or $state[$p:lk] = 87217                        (: 'namespace' 'lt' :)
            or $state[$p:lk] = 87246                        (: 'processing-instruction' 'lt' :)
            or $state[$p:lk] = 88662                        (: 'attribute' 'mod' :)
            or $state[$p:lk] = 88696                        (: 'element' 'mod' :)
            or $state[$p:lk] = 88753                        (: 'namespace' 'mod' :)
            or $state[$p:lk] = 88782                        (: 'processing-instruction' 'mod' :)
            or $state[$p:lk] = 89174                        (: 'attribute' 'modify' :)
            or $state[$p:lk] = 89208                        (: 'element' 'modify' :)
            or $state[$p:lk] = 91734                        (: 'attribute' 'ne' :)
            or $state[$p:lk] = 91768                        (: 'element' 'ne' :)
            or $state[$p:lk] = 91825                        (: 'namespace' 'ne' :)
            or $state[$p:lk] = 91854                        (: 'processing-instruction' 'ne' :)
            or $state[$p:lk] = 96854                        (: 'attribute' 'only' :)
            or $state[$p:lk] = 96888                        (: 'element' 'only' :)
            or $state[$p:lk] = 96945                        (: 'namespace' 'only' :)
            or $state[$p:lk] = 96974                        (: 'processing-instruction' 'only' :)
            or $state[$p:lk] = 97878                        (: 'attribute' 'or' :)
            or $state[$p:lk] = 97912                        (: 'element' 'or' :)
            or $state[$p:lk] = 97969                        (: 'namespace' 'or' :)
            or $state[$p:lk] = 97998                        (: 'processing-instruction' 'or' :)
            or $state[$p:lk] = 98390                        (: 'attribute' 'order' :)
            or $state[$p:lk] = 98424                        (: 'element' 'order' :)
            or $state[$p:lk] = 98481                        (: 'namespace' 'order' :)
            or $state[$p:lk] = 98510                        (: 'processing-instruction' 'order' :)
            or $state[$p:lk] = 107606                       (: 'attribute' 'return' :)
            or $state[$p:lk] = 107640                       (: 'element' 'return' :)
            or $state[$p:lk] = 107697                       (: 'namespace' 'return' :)
            or $state[$p:lk] = 107726                       (: 'processing-instruction' 'return' :)
            or $state[$p:lk] = 109142                       (: 'attribute' 'satisfies' :)
            or $state[$p:lk] = 109176                       (: 'element' 'satisfies' :)
            or $state[$p:lk] = 109233                       (: 'namespace' 'satisfies' :)
            or $state[$p:lk] = 109262                       (: 'processing-instruction' 'satisfies' :)
            or $state[$p:lk] = 115286                       (: 'attribute' 'stable' :)
            or $state[$p:lk] = 115320                       (: 'element' 'stable' :)
            or $state[$p:lk] = 115377                       (: 'namespace' 'stable' :)
            or $state[$p:lk] = 115406                       (: 'processing-instruction' 'stable' :)
            or $state[$p:lk] = 115798                       (: 'attribute' 'start' :)
            or $state[$p:lk] = 115832                       (: 'element' 'start' :)
            or $state[$p:lk] = 115889                       (: 'namespace' 'start' :)
            or $state[$p:lk] = 115918                       (: 'processing-instruction' 'start' :)
            or $state[$p:lk] = 120918                       (: 'attribute' 'to' :)
            or $state[$p:lk] = 120952                       (: 'element' 'to' :)
            or $state[$p:lk] = 121009                       (: 'namespace' 'to' :)
            or $state[$p:lk] = 121038                       (: 'processing-instruction' 'to' :)
            or $state[$p:lk] = 121430                       (: 'attribute' 'transform' :)
            or $state[$p:lk] = 121464                       (: 'element' 'transform' :)
            or $state[$p:lk] = 121942                       (: 'attribute' 'treat' :)
            or $state[$p:lk] = 121976                       (: 'element' 'treat' :)
            or $state[$p:lk] = 122033                       (: 'namespace' 'treat' :)
            or $state[$p:lk] = 122062                       (: 'processing-instruction' 'treat' :)
            or $state[$p:lk] = 124502                       (: 'attribute' 'union' :)
            or $state[$p:lk] = 124536                       (: 'element' 'union' :)
            or $state[$p:lk] = 124593                       (: 'namespace' 'union' :)
            or $state[$p:lk] = 124622                       (: 'processing-instruction' 'union' :)
            or $state[$p:lk] = 125526                       (: 'attribute' 'update' :)
            or $state[$p:lk] = 125560                       (: 'element' 'update' :)
            or $state[$p:lk] = 130646                       (: 'attribute' 'where' :)
            or $state[$p:lk] = 130680                       (: 'element' 'where' :)
            or $state[$p:lk] = 130737                       (: 'namespace' 'where' :)
            or $state[$p:lk] = 130766                       (: 'processing-instruction' 'where' :)
            or $state[$p:lk] = 132182                       (: 'attribute' 'with' :)
            or $state[$p:lk] = 132216) then                 (: 'element' 'with' :)
        let $state := p:memoized($state, 5)
        return
          if ($state[$p:lk] != 0) then
            $state
          else
            let $backtrack := $state
            let $state := p:strip-result($state)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-PostfixExpr($input, $state)
            return
              if (not($state[$p:error])) then
                p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -1, -1)
              else
                p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -2, -2)
      else
        $state
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = -1
       or $state[$p:lk] = 1                                 (: IntegerLiteral :)
       or $state[$p:lk] = 2                                 (: DecimalLiteral :)
       or $state[$p:lk] = 3                                 (: DoubleLiteral :)
       or $state[$p:lk] = 4                                 (: StringLiteral :)
       or $state[$p:lk] = 31                                (: '$' :)
       or $state[$p:lk] = 32                                (: '%' :)
       or $state[$p:lk] = 34                                (: '(' :)
       or $state[$p:lk] = 43                                (: '.' :)
       or $state[$p:lk] = 53                                (: '<' :)
       or $state[$p:lk] = 54                                (: '<!--' :)
       or $state[$p:lk] = 59                                (: '<?' :)
       or $state[$p:lk] = 65                                (: '?' :)
       or $state[$p:lk] = 69                                (: '[' :)
       or $state[$p:lk] = 73                                (: '``[' :)
       or $state[$p:lk] = 82                                (: 'array' :)
       or $state[$p:lk] = 171                               (: 'map' :)
       or $state[$p:lk] = 2646                              (: 'attribute' URIQualifiedName :)
       or $state[$p:lk] = 2680                              (: 'element' URIQualifiedName :)
       or $state[$p:lk] = 7345                              (: 'namespace' NCName^Token :)
       or $state[$p:lk] = 7374                              (: 'processing-instruction' NCName^Token :)
       or $state[$p:lk] = 7766                              (: 'attribute' QName^Token :)
       or $state[$p:lk] = 7800                              (: 'element' QName^Token :)
       or $state[$p:lk] = 14853                             (: URIQualifiedName '#' :)
       or $state[$p:lk] = 14863                             (: QName^Token '#' :)
       or $state[$p:lk] = 14926                             (: 'ancestor' '#' :)
       or $state[$p:lk] = 14927                             (: 'ancestor-or-self' '#' :)
       or $state[$p:lk] = 14928                             (: 'and' '#' :)
       or $state[$p:lk] = 14931                             (: 'as' '#' :)
       or $state[$p:lk] = 14932                             (: 'ascending' '#' :)
       or $state[$p:lk] = 14933                             (: 'at' '#' :)
       or $state[$p:lk] = 14934                             (: 'attribute' '#' :)
       or $state[$p:lk] = 14939                             (: 'case' '#' :)
       or $state[$p:lk] = 14940                             (: 'cast' '#' :)
       or $state[$p:lk] = 14941                             (: 'castable' '#' :)
       or $state[$p:lk] = 14943                             (: 'child' '#' :)
       or $state[$p:lk] = 14944                             (: 'collation' '#' :)
       or $state[$p:lk] = 14945                             (: 'comment' '#' :)
       or $state[$p:lk] = 14950                             (: 'copy' '#' :)
       or $state[$p:lk] = 14952                             (: 'count' '#' :)
       or $state[$p:lk] = 14955                             (: 'declare' '#' :)
       or $state[$p:lk] = 14956                             (: 'default' '#' :)
       or $state[$p:lk] = 14957                             (: 'delete' '#' :)
       or $state[$p:lk] = 14958                             (: 'descendant' '#' :)
       or $state[$p:lk] = 14959                             (: 'descendant-or-self' '#' :)
       or $state[$p:lk] = 14960                             (: 'descending' '#' :)
       or $state[$p:lk] = 14965                             (: 'div' '#' :)
       or $state[$p:lk] = 14966                             (: 'document' '#' :)
       or $state[$p:lk] = 14967                             (: 'document-node' '#' :)
       or $state[$p:lk] = 14968                             (: 'element' '#' :)
       or $state[$p:lk] = 14969                             (: 'else' '#' :)
       or $state[$p:lk] = 14970                             (: 'empty' '#' :)
       or $state[$p:lk] = 14971                             (: 'empty-sequence' '#' :)
       or $state[$p:lk] = 14973                             (: 'end' '#' :)
       or $state[$p:lk] = 14975                             (: 'eq' '#' :)
       or $state[$p:lk] = 14976                             (: 'every' '#' :)
       or $state[$p:lk] = 14978                             (: 'except' '#' :)
       or $state[$p:lk] = 14982                             (: 'following' '#' :)
       or $state[$p:lk] = 14983                             (: 'following-sibling' '#' :)
       or $state[$p:lk] = 14984                             (: 'for' '#' :)
       or $state[$p:lk] = 14990                             (: 'function' '#' :)
       or $state[$p:lk] = 14991                             (: 'ge' '#' :)
       or $state[$p:lk] = 14993                             (: 'group' '#' :)
       or $state[$p:lk] = 14995                             (: 'gt' '#' :)
       or $state[$p:lk] = 14996                             (: 'idiv' '#' :)
       or $state[$p:lk] = 14997                             (: 'if' '#' :)
       or $state[$p:lk] = 14998                             (: 'import' '#' :)
       or $state[$p:lk] = 15003                             (: 'insert' '#' :)
       or $state[$p:lk] = 15004                             (: 'instance' '#' :)
       or $state[$p:lk] = 15005                             (: 'intersect' '#' :)
       or $state[$p:lk] = 15007                             (: 'invoke' '#' :)
       or $state[$p:lk] = 15008                             (: 'is' '#' :)
       or $state[$p:lk] = 15009                             (: 'item' '#' :)
       or $state[$p:lk] = 15013                             (: 'le' '#' :)
       or $state[$p:lk] = 15015                             (: 'let' '#' :)
       or $state[$p:lk] = 15018                             (: 'lt' '#' :)
       or $state[$p:lk] = 15021                             (: 'mod' '#' :)
       or $state[$p:lk] = 15022                             (: 'modify' '#' :)
       or $state[$p:lk] = 15023                             (: 'module' '#' :)
       or $state[$p:lk] = 15025                             (: 'namespace' '#' :)
       or $state[$p:lk] = 15026                             (: 'namespace-node' '#' :)
       or $state[$p:lk] = 15027                             (: 'ne' '#' :)
       or $state[$p:lk] = 15032                             (: 'node' '#' :)
       or $state[$p:lk] = 15037                             (: 'only' '#' :)
       or $state[$p:lk] = 15039                             (: 'or' '#' :)
       or $state[$p:lk] = 15040                             (: 'order' '#' :)
       or $state[$p:lk] = 15041                             (: 'ordered' '#' :)
       or $state[$p:lk] = 15045                             (: 'parent' '#' :)
       or $state[$p:lk] = 15050                             (: 'preceding' '#' :)
       or $state[$p:lk] = 15051                             (: 'preceding-sibling' '#' :)
       or $state[$p:lk] = 15054                             (: 'processing-instruction' '#' :)
       or $state[$p:lk] = 15056                             (: 'rename' '#' :)
       or $state[$p:lk] = 15057                             (: 'replace' '#' :)
       or $state[$p:lk] = 15058                             (: 'return' '#' :)
       or $state[$p:lk] = 15061                             (: 'satisfies' '#' :)
       or $state[$p:lk] = 15063                             (: 'schema-attribute' '#' :)
       or $state[$p:lk] = 15064                             (: 'schema-element' '#' :)
       or $state[$p:lk] = 15066                             (: 'self' '#' :)
       or $state[$p:lk] = 15072                             (: 'some' '#' :)
       or $state[$p:lk] = 15073                             (: 'stable' '#' :)
       or $state[$p:lk] = 15074                             (: 'start' '#' :)
       or $state[$p:lk] = 15079                             (: 'switch' '#' :)
       or $state[$p:lk] = 15080                             (: 'text' '#' :)
       or $state[$p:lk] = 15084                             (: 'to' '#' :)
       or $state[$p:lk] = 15085                             (: 'transform' '#' :)
       or $state[$p:lk] = 15086                             (: 'treat' '#' :)
       or $state[$p:lk] = 15087                             (: 'try' '#' :)
       or $state[$p:lk] = 15090                             (: 'typeswitch' '#' :)
       or $state[$p:lk] = 15091                             (: 'union' '#' :)
       or $state[$p:lk] = 15092                             (: 'unordered' '#' :)
       or $state[$p:lk] = 15093                             (: 'update' '#' :)
       or $state[$p:lk] = 15097                             (: 'validate' '#' :)
       or $state[$p:lk] = 15103                             (: 'where' '#' :)
       or $state[$p:lk] = 15106                             (: 'with' '#' :)
       or $state[$p:lk] = 15110                             (: 'xquery' '#' :)
       or $state[$p:lk] = 17413                             (: URIQualifiedName '(' :)
       or $state[$p:lk] = 17423                             (: QName^Token '(' :)
       or $state[$p:lk] = 17486                             (: 'ancestor' '(' :)
       or $state[$p:lk] = 17487                             (: 'ancestor-or-self' '(' :)
       or $state[$p:lk] = 17488                             (: 'and' '(' :)
       or $state[$p:lk] = 17491                             (: 'as' '(' :)
       or $state[$p:lk] = 17492                             (: 'ascending' '(' :)
       or $state[$p:lk] = 17493                             (: 'at' '(' :)
       or $state[$p:lk] = 17499                             (: 'case' '(' :)
       or $state[$p:lk] = 17500                             (: 'cast' '(' :)
       or $state[$p:lk] = 17501                             (: 'castable' '(' :)
       or $state[$p:lk] = 17503                             (: 'child' '(' :)
       or $state[$p:lk] = 17504                             (: 'collation' '(' :)
       or $state[$p:lk] = 17510                             (: 'copy' '(' :)
       or $state[$p:lk] = 17512                             (: 'count' '(' :)
       or $state[$p:lk] = 17515                             (: 'declare' '(' :)
       or $state[$p:lk] = 17516                             (: 'default' '(' :)
       or $state[$p:lk] = 17517                             (: 'delete' '(' :)
       or $state[$p:lk] = 17518                             (: 'descendant' '(' :)
       or $state[$p:lk] = 17519                             (: 'descendant-or-self' '(' :)
       or $state[$p:lk] = 17520                             (: 'descending' '(' :)
       or $state[$p:lk] = 17525                             (: 'div' '(' :)
       or $state[$p:lk] = 17526                             (: 'document' '(' :)
       or $state[$p:lk] = 17529                             (: 'else' '(' :)
       or $state[$p:lk] = 17530                             (: 'empty' '(' :)
       or $state[$p:lk] = 17533                             (: 'end' '(' :)
       or $state[$p:lk] = 17535                             (: 'eq' '(' :)
       or $state[$p:lk] = 17536                             (: 'every' '(' :)
       or $state[$p:lk] = 17538                             (: 'except' '(' :)
       or $state[$p:lk] = 17542                             (: 'following' '(' :)
       or $state[$p:lk] = 17543                             (: 'following-sibling' '(' :)
       or $state[$p:lk] = 17544                             (: 'for' '(' :)
       or $state[$p:lk] = 17550                             (: 'function' '(' :)
       or $state[$p:lk] = 17551                             (: 'ge' '(' :)
       or $state[$p:lk] = 17553                             (: 'group' '(' :)
       or $state[$p:lk] = 17555                             (: 'gt' '(' :)
       or $state[$p:lk] = 17556                             (: 'idiv' '(' :)
       or $state[$p:lk] = 17558                             (: 'import' '(' :)
       or $state[$p:lk] = 17563                             (: 'insert' '(' :)
       or $state[$p:lk] = 17564                             (: 'instance' '(' :)
       or $state[$p:lk] = 17565                             (: 'intersect' '(' :)
       or $state[$p:lk] = 17567                             (: 'invoke' '(' :)
       or $state[$p:lk] = 17568                             (: 'is' '(' :)
       or $state[$p:lk] = 17573                             (: 'le' '(' :)
       or $state[$p:lk] = 17575                             (: 'let' '(' :)
       or $state[$p:lk] = 17578                             (: 'lt' '(' :)
       or $state[$p:lk] = 17581                             (: 'mod' '(' :)
       or $state[$p:lk] = 17582                             (: 'modify' '(' :)
       or $state[$p:lk] = 17583                             (: 'module' '(' :)
       or $state[$p:lk] = 17585                             (: 'namespace' '(' :)
       or $state[$p:lk] = 17587                             (: 'ne' '(' :)
       or $state[$p:lk] = 17597                             (: 'only' '(' :)
       or $state[$p:lk] = 17599                             (: 'or' '(' :)
       or $state[$p:lk] = 17600                             (: 'order' '(' :)
       or $state[$p:lk] = 17601                             (: 'ordered' '(' :)
       or $state[$p:lk] = 17605                             (: 'parent' '(' :)
       or $state[$p:lk] = 17610                             (: 'preceding' '(' :)
       or $state[$p:lk] = 17611                             (: 'preceding-sibling' '(' :)
       or $state[$p:lk] = 17616                             (: 'rename' '(' :)
       or $state[$p:lk] = 17617                             (: 'replace' '(' :)
       or $state[$p:lk] = 17618                             (: 'return' '(' :)
       or $state[$p:lk] = 17621                             (: 'satisfies' '(' :)
       or $state[$p:lk] = 17626                             (: 'self' '(' :)
       or $state[$p:lk] = 17632                             (: 'some' '(' :)
       or $state[$p:lk] = 17633                             (: 'stable' '(' :)
       or $state[$p:lk] = 17634                             (: 'start' '(' :)
       or $state[$p:lk] = 17644                             (: 'to' '(' :)
       or $state[$p:lk] = 17645                             (: 'transform' '(' :)
       or $state[$p:lk] = 17646                             (: 'treat' '(' :)
       or $state[$p:lk] = 17647                             (: 'try' '(' :)
       or $state[$p:lk] = 17651                             (: 'union' '(' :)
       or $state[$p:lk] = 17652                             (: 'unordered' '(' :)
       or $state[$p:lk] = 17653                             (: 'update' '(' :)
       or $state[$p:lk] = 17657                             (: 'validate' '(' :)
       or $state[$p:lk] = 17663                             (: 'where' '(' :)
       or $state[$p:lk] = 17666                             (: 'with' '(' :)
       or $state[$p:lk] = 17670                             (: 'xquery' '(' :)
       or $state[$p:lk] = 40022                             (: 'attribute' 'ancestor' :)
       or $state[$p:lk] = 40056                             (: 'element' 'ancestor' :)
       or $state[$p:lk] = 40534                             (: 'attribute' 'ancestor-or-self' :)
       or $state[$p:lk] = 40568                             (: 'element' 'ancestor-or-self' :)
       or $state[$p:lk] = 43606                             (: 'attribute' 'at' :)
       or $state[$p:lk] = 43640                             (: 'element' 'at' :)
       or $state[$p:lk] = 44118                             (: 'attribute' 'attribute' :)
       or $state[$p:lk] = 44152                             (: 'element' 'attribute' :)
       or $state[$p:lk] = 48726                             (: 'attribute' 'child' :)
       or $state[$p:lk] = 48760                             (: 'element' 'child' :)
       or $state[$p:lk] = 49750                             (: 'attribute' 'comment' :)
       or $state[$p:lk] = 49784                             (: 'element' 'comment' :)
       or $state[$p:lk] = 52310                             (: 'attribute' 'copy' :)
       or $state[$p:lk] = 52344                             (: 'element' 'copy' :)
       or $state[$p:lk] = 54870                             (: 'attribute' 'declare' :)
       or $state[$p:lk] = 54904                             (: 'element' 'declare' :)
       or $state[$p:lk] = 55894                             (: 'attribute' 'delete' :)
       or $state[$p:lk] = 55928                             (: 'element' 'delete' :)
       or $state[$p:lk] = 56406                             (: 'attribute' 'descendant' :)
       or $state[$p:lk] = 56440                             (: 'element' 'descendant' :)
       or $state[$p:lk] = 56918                             (: 'attribute' 'descendant-or-self' :)
       or $state[$p:lk] = 56952                             (: 'element' 'descendant-or-self' :)
       or $state[$p:lk] = 60502                             (: 'attribute' 'document' :)
       or $state[$p:lk] = 60536                             (: 'element' 'document' :)
       or $state[$p:lk] = 61014                             (: 'attribute' 'document-node' :)
       or $state[$p:lk] = 61048                             (: 'element' 'document-node' :)
       or $state[$p:lk] = 61526                             (: 'attribute' 'element' :)
       or $state[$p:lk] = 61560                             (: 'element' 'element' :)
       or $state[$p:lk] = 63062                             (: 'attribute' 'empty-sequence' :)
       or $state[$p:lk] = 63096                             (: 'element' 'empty-sequence' :)
       or $state[$p:lk] = 65622                             (: 'attribute' 'every' :)
       or $state[$p:lk] = 65656                             (: 'element' 'every' :)
       or $state[$p:lk] = 68694                             (: 'attribute' 'following' :)
       or $state[$p:lk] = 68728                             (: 'element' 'following' :)
       or $state[$p:lk] = 69206                             (: 'attribute' 'following-sibling' :)
       or $state[$p:lk] = 69240                             (: 'element' 'following-sibling' :)
       or $state[$p:lk] = 72790                             (: 'attribute' 'function' :)
       or $state[$p:lk] = 72824                             (: 'element' 'function' :)
       or $state[$p:lk] = 76374                             (: 'attribute' 'if' :)
       or $state[$p:lk] = 76408                             (: 'element' 'if' :)
       or $state[$p:lk] = 76886                             (: 'attribute' 'import' :)
       or $state[$p:lk] = 76920                             (: 'element' 'import' :)
       or $state[$p:lk] = 79446                             (: 'attribute' 'insert' :)
       or $state[$p:lk] = 79480                             (: 'element' 'insert' :)
       or $state[$p:lk] = 81494                             (: 'attribute' 'invoke' :)
       or $state[$p:lk] = 81528                             (: 'element' 'invoke' :)
       or $state[$p:lk] = 82518                             (: 'attribute' 'item' :)
       or $state[$p:lk] = 82552                             (: 'element' 'item' :)
       or $state[$p:lk] = 89686                             (: 'attribute' 'module' :)
       or $state[$p:lk] = 89720                             (: 'element' 'module' :)
       or $state[$p:lk] = 90710                             (: 'attribute' 'namespace' :)
       or $state[$p:lk] = 90744                             (: 'element' 'namespace' :)
       or $state[$p:lk] = 91222                             (: 'attribute' 'namespace-node' :)
       or $state[$p:lk] = 91256                             (: 'element' 'namespace-node' :)
       or $state[$p:lk] = 94294                             (: 'attribute' 'node' :)
       or $state[$p:lk] = 94328                             (: 'element' 'node' :)
       or $state[$p:lk] = 98902                             (: 'attribute' 'ordered' :)
       or $state[$p:lk] = 98936                             (: 'element' 'ordered' :)
       or $state[$p:lk] = 100950                            (: 'attribute' 'parent' :)
       or $state[$p:lk] = 100984                            (: 'element' 'parent' :)
       or $state[$p:lk] = 103510                            (: 'attribute' 'preceding' :)
       or $state[$p:lk] = 103544                            (: 'element' 'preceding' :)
       or $state[$p:lk] = 104022                            (: 'attribute' 'preceding-sibling' :)
       or $state[$p:lk] = 104056                            (: 'element' 'preceding-sibling' :)
       or $state[$p:lk] = 105558                            (: 'attribute' 'processing-instruction' :)
       or $state[$p:lk] = 105592                            (: 'element' 'processing-instruction' :)
       or $state[$p:lk] = 106582                            (: 'attribute' 'rename' :)
       or $state[$p:lk] = 106616                            (: 'element' 'rename' :)
       or $state[$p:lk] = 107094                            (: 'attribute' 'replace' :)
       or $state[$p:lk] = 107128                            (: 'element' 'replace' :)
       or $state[$p:lk] = 110166                            (: 'attribute' 'schema-attribute' :)
       or $state[$p:lk] = 110200                            (: 'element' 'schema-attribute' :)
       or $state[$p:lk] = 110678                            (: 'attribute' 'schema-element' :)
       or $state[$p:lk] = 110712                            (: 'element' 'schema-element' :)
       or $state[$p:lk] = 111702                            (: 'attribute' 'self' :)
       or $state[$p:lk] = 111736                            (: 'element' 'self' :)
       or $state[$p:lk] = 114774                            (: 'attribute' 'some' :)
       or $state[$p:lk] = 114808                            (: 'element' 'some' :)
       or $state[$p:lk] = 118358                            (: 'attribute' 'switch' :)
       or $state[$p:lk] = 118392                            (: 'element' 'switch' :)
       or $state[$p:lk] = 118870                            (: 'attribute' 'text' :)
       or $state[$p:lk] = 118904                            (: 'element' 'text' :)
       or $state[$p:lk] = 122454                            (: 'attribute' 'try' :)
       or $state[$p:lk] = 122488                            (: 'element' 'try' :)
       or $state[$p:lk] = 123990                            (: 'attribute' 'typeswitch' :)
       or $state[$p:lk] = 124024                            (: 'element' 'typeswitch' :)
       or $state[$p:lk] = 125014                            (: 'attribute' 'unordered' :)
       or $state[$p:lk] = 125048                            (: 'element' 'unordered' :)
       or $state[$p:lk] = 127574                            (: 'attribute' 'validate' :)
       or $state[$p:lk] = 127608                            (: 'element' 'validate' :)
       or $state[$p:lk] = 134230                            (: 'attribute' 'xquery' :)
       or $state[$p:lk] = 134264                            (: 'element' 'xquery' :)
       or $state[$p:lk] = 135254                            (: 'attribute' '{' :)
       or $state[$p:lk] = 135265                            (: 'comment' '{' :)
       or $state[$p:lk] = 135286                            (: 'document' '{' :)
       or $state[$p:lk] = 135288                            (: 'element' '{' :)
       or $state[$p:lk] = 135345                            (: 'namespace' '{' :)
       or $state[$p:lk] = 135361                            (: 'ordered' '{' :)
       or $state[$p:lk] = 135374                            (: 'processing-instruction' '{' :)
       or $state[$p:lk] = 135400                            (: 'text' '{' :)
       or $state[$p:lk] = 135412) then                      (: 'unordered' '{' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-PostfixExpr($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-AxisStep($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "StepExpr"),
    $state
  )
};

(:~
 : Try parsing StepExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-StepExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "StepExpr"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 86) then                         (: 'attribute' :)
        let $state := p:lookahead2W(252, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | EOF | '!' |
                                                               '!=' | '#' | '(' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' |
                                                               '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'before' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'contains' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'into' | 'invoke' | 'is' |
                                                               'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'paragraphs' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' |
                                                               'sentences' | 'some' | 'stable' | 'start' | 'switch' |
                                                               'text' | 'times' | 'to' | 'transform' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'words' | 'xquery' |
                                                               '{' | '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] eq 120) then                   (: 'element' :)
        let $state := p:lookahead2W(251, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | EOF | '!' |
                                                               '!=' | '#' | '(' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                                               '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'before' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'contains' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'into' | 'invoke' | 'is' |
                                                               'item' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'paragraphs' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' |
                                                               'sentences' | 'some' | 'stable' | 'start' | 'switch' |
                                                               'text' | 'times' | 'to' | 'transform' | 'treat' | 'try' |
                                                               'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'words' | 'xquery' |
                                                               '{' | '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] = (177,                        (: 'namespace' :)
                                206)) then                  (: 'processing-instruction' :)
        let $state := p:lookahead2W(227, $input, $state)    (: NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' |
                                                               ('(' ':') | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                                               ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' |
                                                               '>>' | '[' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                                               'contains' | 'count' | 'default' | 'descending' | 'div' |
                                                               'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                                               'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                                               'stable' | 'start' | 'times' | 'to' | 'transform' |
                                                               'treat' | 'union' | 'update' | 'where' | 'with' |
                                                               'words' | '{' | '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] = (97,                         (: 'comment' :)
                                118,                        (: 'document' :)
                                193,                        (: 'ordered' :)
                                232,                        (: 'text' :)
                                244)) then                  (: 'unordered' :)
        let $state := p:lookahead2W(226, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                                               ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                                               'return' | 'satisfies' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'where' | 'with' | 'words' | '{' |
                                                               '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] = (123,                        (: 'empty-sequence' :)
                                149,                        (: 'if' :)
                                161,                        (: 'item' :)
                                231,                        (: 'switch' :)
                                242)) then                  (: 'typeswitch' :)
        let $state := p:lookahead2W(219, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | ('(' ':') | ')' | '*' |
                                                               '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' |
                                                               '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                                               'return' | 'satisfies' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                                               '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] = (78,                         (: 'ancestor' :)
                                79,                         (: 'ancestor-or-self' :)
                                95,                         (: 'child' :)
                                110,                        (: 'descendant' :)
                                111,                        (: 'descendant-or-self' :)
                                134,                        (: 'following' :)
                                135,                        (: 'following-sibling' :)
                                197,                        (: 'parent' :)
                                202,                        (: 'preceding' :)
                                203,                        (: 'preceding-sibling' :)
                                218)) then                  (: 'self' :)
        let $state := p:lookahead2W(225, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ':' | '::' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                                               '[' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                                               'contains' | 'count' | 'default' | 'descending' | 'div' |
                                                               'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                                               'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                                               'stable' | 'start' | 'times' | 'to' | 'transform' |
                                                               'treat' | 'union' | 'update' | 'where' | 'with' |
                                                               'words' | '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] = (5,                          (: URIQualifiedName :)
                                15,                         (: QName^Token :)
                                80,                         (: 'and' :)
                                83,                         (: 'as' :)
                                84,                         (: 'ascending' :)
                                85,                         (: 'at' :)
                                91,                         (: 'case' :)
                                92,                         (: 'cast' :)
                                93,                         (: 'castable' :)
                                96,                         (: 'collation' :)
                                102,                        (: 'copy' :)
                                104,                        (: 'count' :)
                                107,                        (: 'declare' :)
                                108,                        (: 'default' :)
                                109,                        (: 'delete' :)
                                112,                        (: 'descending' :)
                                117,                        (: 'div' :)
                                119,                        (: 'document-node' :)
                                121,                        (: 'else' :)
                                122,                        (: 'empty' :)
                                125,                        (: 'end' :)
                                127,                        (: 'eq' :)
                                128,                        (: 'every' :)
                                130,                        (: 'except' :)
                                136,                        (: 'for' :)
                                142,                        (: 'function' :)
                                143,                        (: 'ge' :)
                                145,                        (: 'group' :)
                                147,                        (: 'gt' :)
                                148,                        (: 'idiv' :)
                                150,                        (: 'import' :)
                                155,                        (: 'insert' :)
                                156,                        (: 'instance' :)
                                157,                        (: 'intersect' :)
                                159,                        (: 'invoke' :)
                                160,                        (: 'is' :)
                                165,                        (: 'le' :)
                                167,                        (: 'let' :)
                                170,                        (: 'lt' :)
                                173,                        (: 'mod' :)
                                174,                        (: 'modify' :)
                                175,                        (: 'module' :)
                                178,                        (: 'namespace-node' :)
                                179,                        (: 'ne' :)
                                184,                        (: 'node' :)
                                189,                        (: 'only' :)
                                191,                        (: 'or' :)
                                192,                        (: 'order' :)
                                208,                        (: 'rename' :)
                                209,                        (: 'replace' :)
                                210,                        (: 'return' :)
                                213,                        (: 'satisfies' :)
                                215,                        (: 'schema-attribute' :)
                                216,                        (: 'schema-element' :)
                                224,                        (: 'some' :)
                                225,                        (: 'stable' :)
                                226,                        (: 'start' :)
                                236,                        (: 'to' :)
                                237,                        (: 'transform' :)
                                238,                        (: 'treat' :)
                                239,                        (: 'try' :)
                                243,                        (: 'union' :)
                                245,                        (: 'update' :)
                                249,                        (: 'validate' :)
                                255,                        (: 'where' :)
                                258,                        (: 'with' :)
                                262)) then                  (: 'xquery' :)
        let $state := p:lookahead2W(222, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                                               ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                                               'return' | 'satisfies' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'where' | 'with' | 'words' | '|' |
                                                               '||' | '}' | '}`' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 41046                        (: 'attribute' 'and' :)
            or $state[$p:lk] = 41080                        (: 'element' 'and' :)
            or $state[$p:lk] = 41137                        (: 'namespace' 'and' :)
            or $state[$p:lk] = 41166                        (: 'processing-instruction' 'and' :)
            or $state[$p:lk] = 42582                        (: 'attribute' 'as' :)
            or $state[$p:lk] = 42616                        (: 'element' 'as' :)
            or $state[$p:lk] = 42673                        (: 'namespace' 'as' :)
            or $state[$p:lk] = 42702                        (: 'processing-instruction' 'as' :)
            or $state[$p:lk] = 43094                        (: 'attribute' 'ascending' :)
            or $state[$p:lk] = 43128                        (: 'element' 'ascending' :)
            or $state[$p:lk] = 43185                        (: 'namespace' 'ascending' :)
            or $state[$p:lk] = 43214                        (: 'processing-instruction' 'ascending' :)
            or $state[$p:lk] = 46678                        (: 'attribute' 'case' :)
            or $state[$p:lk] = 46712                        (: 'element' 'case' :)
            or $state[$p:lk] = 46769                        (: 'namespace' 'case' :)
            or $state[$p:lk] = 46798                        (: 'processing-instruction' 'case' :)
            or $state[$p:lk] = 47190                        (: 'attribute' 'cast' :)
            or $state[$p:lk] = 47224                        (: 'element' 'cast' :)
            or $state[$p:lk] = 47281                        (: 'namespace' 'cast' :)
            or $state[$p:lk] = 47310                        (: 'processing-instruction' 'cast' :)
            or $state[$p:lk] = 47702                        (: 'attribute' 'castable' :)
            or $state[$p:lk] = 47736                        (: 'element' 'castable' :)
            or $state[$p:lk] = 47793                        (: 'namespace' 'castable' :)
            or $state[$p:lk] = 47822                        (: 'processing-instruction' 'castable' :)
            or $state[$p:lk] = 49238                        (: 'attribute' 'collation' :)
            or $state[$p:lk] = 49272                        (: 'element' 'collation' :)
            or $state[$p:lk] = 49329                        (: 'namespace' 'collation' :)
            or $state[$p:lk] = 49358                        (: 'processing-instruction' 'collation' :)
            or $state[$p:lk] = 53334                        (: 'attribute' 'count' :)
            or $state[$p:lk] = 53368                        (: 'element' 'count' :)
            or $state[$p:lk] = 53425                        (: 'namespace' 'count' :)
            or $state[$p:lk] = 53454                        (: 'processing-instruction' 'count' :)
            or $state[$p:lk] = 55382                        (: 'attribute' 'default' :)
            or $state[$p:lk] = 55416                        (: 'element' 'default' :)
            or $state[$p:lk] = 55473                        (: 'namespace' 'default' :)
            or $state[$p:lk] = 55502                        (: 'processing-instruction' 'default' :)
            or $state[$p:lk] = 57430                        (: 'attribute' 'descending' :)
            or $state[$p:lk] = 57464                        (: 'element' 'descending' :)
            or $state[$p:lk] = 57521                        (: 'namespace' 'descending' :)
            or $state[$p:lk] = 57550                        (: 'processing-instruction' 'descending' :)
            or $state[$p:lk] = 59990                        (: 'attribute' 'div' :)
            or $state[$p:lk] = 60024                        (: 'element' 'div' :)
            or $state[$p:lk] = 60081                        (: 'namespace' 'div' :)
            or $state[$p:lk] = 60110                        (: 'processing-instruction' 'div' :)
            or $state[$p:lk] = 62038                        (: 'attribute' 'else' :)
            or $state[$p:lk] = 62072                        (: 'element' 'else' :)
            or $state[$p:lk] = 62129                        (: 'namespace' 'else' :)
            or $state[$p:lk] = 62158                        (: 'processing-instruction' 'else' :)
            or $state[$p:lk] = 62550                        (: 'attribute' 'empty' :)
            or $state[$p:lk] = 62584                        (: 'element' 'empty' :)
            or $state[$p:lk] = 62641                        (: 'namespace' 'empty' :)
            or $state[$p:lk] = 62670                        (: 'processing-instruction' 'empty' :)
            or $state[$p:lk] = 64086                        (: 'attribute' 'end' :)
            or $state[$p:lk] = 64120                        (: 'element' 'end' :)
            or $state[$p:lk] = 64177                        (: 'namespace' 'end' :)
            or $state[$p:lk] = 64206                        (: 'processing-instruction' 'end' :)
            or $state[$p:lk] = 65110                        (: 'attribute' 'eq' :)
            or $state[$p:lk] = 65144                        (: 'element' 'eq' :)
            or $state[$p:lk] = 65201                        (: 'namespace' 'eq' :)
            or $state[$p:lk] = 65230                        (: 'processing-instruction' 'eq' :)
            or $state[$p:lk] = 66646                        (: 'attribute' 'except' :)
            or $state[$p:lk] = 66680                        (: 'element' 'except' :)
            or $state[$p:lk] = 66737                        (: 'namespace' 'except' :)
            or $state[$p:lk] = 66766                        (: 'processing-instruction' 'except' :)
            or $state[$p:lk] = 69718                        (: 'attribute' 'for' :)
            or $state[$p:lk] = 69752                        (: 'element' 'for' :)
            or $state[$p:lk] = 69809                        (: 'namespace' 'for' :)
            or $state[$p:lk] = 69838                        (: 'processing-instruction' 'for' :)
            or $state[$p:lk] = 73302                        (: 'attribute' 'ge' :)
            or $state[$p:lk] = 73336                        (: 'element' 'ge' :)
            or $state[$p:lk] = 73393                        (: 'namespace' 'ge' :)
            or $state[$p:lk] = 73422                        (: 'processing-instruction' 'ge' :)
            or $state[$p:lk] = 74326                        (: 'attribute' 'group' :)
            or $state[$p:lk] = 74360                        (: 'element' 'group' :)
            or $state[$p:lk] = 74417                        (: 'namespace' 'group' :)
            or $state[$p:lk] = 74446                        (: 'processing-instruction' 'group' :)
            or $state[$p:lk] = 75350                        (: 'attribute' 'gt' :)
            or $state[$p:lk] = 75384                        (: 'element' 'gt' :)
            or $state[$p:lk] = 75441                        (: 'namespace' 'gt' :)
            or $state[$p:lk] = 75470                        (: 'processing-instruction' 'gt' :)
            or $state[$p:lk] = 75862                        (: 'attribute' 'idiv' :)
            or $state[$p:lk] = 75896                        (: 'element' 'idiv' :)
            or $state[$p:lk] = 75953                        (: 'namespace' 'idiv' :)
            or $state[$p:lk] = 75982                        (: 'processing-instruction' 'idiv' :)
            or $state[$p:lk] = 79958                        (: 'attribute' 'instance' :)
            or $state[$p:lk] = 79992                        (: 'element' 'instance' :)
            or $state[$p:lk] = 80049                        (: 'namespace' 'instance' :)
            or $state[$p:lk] = 80078                        (: 'processing-instruction' 'instance' :)
            or $state[$p:lk] = 80470                        (: 'attribute' 'intersect' :)
            or $state[$p:lk] = 80504                        (: 'element' 'intersect' :)
            or $state[$p:lk] = 80561                        (: 'namespace' 'intersect' :)
            or $state[$p:lk] = 80590                        (: 'processing-instruction' 'intersect' :)
            or $state[$p:lk] = 82006                        (: 'attribute' 'is' :)
            or $state[$p:lk] = 82040                        (: 'element' 'is' :)
            or $state[$p:lk] = 82097                        (: 'namespace' 'is' :)
            or $state[$p:lk] = 82126                        (: 'processing-instruction' 'is' :)
            or $state[$p:lk] = 84566                        (: 'attribute' 'le' :)
            or $state[$p:lk] = 84600                        (: 'element' 'le' :)
            or $state[$p:lk] = 84657                        (: 'namespace' 'le' :)
            or $state[$p:lk] = 84686                        (: 'processing-instruction' 'le' :)
            or $state[$p:lk] = 85590                        (: 'attribute' 'let' :)
            or $state[$p:lk] = 85624                        (: 'element' 'let' :)
            or $state[$p:lk] = 85681                        (: 'namespace' 'let' :)
            or $state[$p:lk] = 85710                        (: 'processing-instruction' 'let' :)
            or $state[$p:lk] = 87126                        (: 'attribute' 'lt' :)
            or $state[$p:lk] = 87160                        (: 'element' 'lt' :)
            or $state[$p:lk] = 87217                        (: 'namespace' 'lt' :)
            or $state[$p:lk] = 87246                        (: 'processing-instruction' 'lt' :)
            or $state[$p:lk] = 88662                        (: 'attribute' 'mod' :)
            or $state[$p:lk] = 88696                        (: 'element' 'mod' :)
            or $state[$p:lk] = 88753                        (: 'namespace' 'mod' :)
            or $state[$p:lk] = 88782                        (: 'processing-instruction' 'mod' :)
            or $state[$p:lk] = 89174                        (: 'attribute' 'modify' :)
            or $state[$p:lk] = 89208                        (: 'element' 'modify' :)
            or $state[$p:lk] = 91734                        (: 'attribute' 'ne' :)
            or $state[$p:lk] = 91768                        (: 'element' 'ne' :)
            or $state[$p:lk] = 91825                        (: 'namespace' 'ne' :)
            or $state[$p:lk] = 91854                        (: 'processing-instruction' 'ne' :)
            or $state[$p:lk] = 96854                        (: 'attribute' 'only' :)
            or $state[$p:lk] = 96888                        (: 'element' 'only' :)
            or $state[$p:lk] = 96945                        (: 'namespace' 'only' :)
            or $state[$p:lk] = 96974                        (: 'processing-instruction' 'only' :)
            or $state[$p:lk] = 97878                        (: 'attribute' 'or' :)
            or $state[$p:lk] = 97912                        (: 'element' 'or' :)
            or $state[$p:lk] = 97969                        (: 'namespace' 'or' :)
            or $state[$p:lk] = 97998                        (: 'processing-instruction' 'or' :)
            or $state[$p:lk] = 98390                        (: 'attribute' 'order' :)
            or $state[$p:lk] = 98424                        (: 'element' 'order' :)
            or $state[$p:lk] = 98481                        (: 'namespace' 'order' :)
            or $state[$p:lk] = 98510                        (: 'processing-instruction' 'order' :)
            or $state[$p:lk] = 107606                       (: 'attribute' 'return' :)
            or $state[$p:lk] = 107640                       (: 'element' 'return' :)
            or $state[$p:lk] = 107697                       (: 'namespace' 'return' :)
            or $state[$p:lk] = 107726                       (: 'processing-instruction' 'return' :)
            or $state[$p:lk] = 109142                       (: 'attribute' 'satisfies' :)
            or $state[$p:lk] = 109176                       (: 'element' 'satisfies' :)
            or $state[$p:lk] = 109233                       (: 'namespace' 'satisfies' :)
            or $state[$p:lk] = 109262                       (: 'processing-instruction' 'satisfies' :)
            or $state[$p:lk] = 115286                       (: 'attribute' 'stable' :)
            or $state[$p:lk] = 115320                       (: 'element' 'stable' :)
            or $state[$p:lk] = 115377                       (: 'namespace' 'stable' :)
            or $state[$p:lk] = 115406                       (: 'processing-instruction' 'stable' :)
            or $state[$p:lk] = 115798                       (: 'attribute' 'start' :)
            or $state[$p:lk] = 115832                       (: 'element' 'start' :)
            or $state[$p:lk] = 115889                       (: 'namespace' 'start' :)
            or $state[$p:lk] = 115918                       (: 'processing-instruction' 'start' :)
            or $state[$p:lk] = 120918                       (: 'attribute' 'to' :)
            or $state[$p:lk] = 120952                       (: 'element' 'to' :)
            or $state[$p:lk] = 121009                       (: 'namespace' 'to' :)
            or $state[$p:lk] = 121038                       (: 'processing-instruction' 'to' :)
            or $state[$p:lk] = 121430                       (: 'attribute' 'transform' :)
            or $state[$p:lk] = 121464                       (: 'element' 'transform' :)
            or $state[$p:lk] = 121942                       (: 'attribute' 'treat' :)
            or $state[$p:lk] = 121976                       (: 'element' 'treat' :)
            or $state[$p:lk] = 122033                       (: 'namespace' 'treat' :)
            or $state[$p:lk] = 122062                       (: 'processing-instruction' 'treat' :)
            or $state[$p:lk] = 124502                       (: 'attribute' 'union' :)
            or $state[$p:lk] = 124536                       (: 'element' 'union' :)
            or $state[$p:lk] = 124593                       (: 'namespace' 'union' :)
            or $state[$p:lk] = 124622                       (: 'processing-instruction' 'union' :)
            or $state[$p:lk] = 125526                       (: 'attribute' 'update' :)
            or $state[$p:lk] = 125560                       (: 'element' 'update' :)
            or $state[$p:lk] = 130646                       (: 'attribute' 'where' :)
            or $state[$p:lk] = 130680                       (: 'element' 'where' :)
            or $state[$p:lk] = 130737                       (: 'namespace' 'where' :)
            or $state[$p:lk] = 130766                       (: 'processing-instruction' 'where' :)
            or $state[$p:lk] = 132182                       (: 'attribute' 'with' :)
            or $state[$p:lk] = 132216) then                 (: 'element' 'with' :)
        let $state := p:memoized($state, 5)
        return
          if ($state[$p:lk] != 0) then
            $state
          else
            let $backtrack := $state
            let $state := p:strip-result($state)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-PostfixExpr($input, $state)
            return
              if (not($state[$p:error])) then
                p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -1, -1)
              else
                p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -2, -2)
      else
        $state
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = -1
       or $state[$p:lk] = 1                                 (: IntegerLiteral :)
       or $state[$p:lk] = 2                                 (: DecimalLiteral :)
       or $state[$p:lk] = 3                                 (: DoubleLiteral :)
       or $state[$p:lk] = 4                                 (: StringLiteral :)
       or $state[$p:lk] = 31                                (: '$' :)
       or $state[$p:lk] = 32                                (: '%' :)
       or $state[$p:lk] = 34                                (: '(' :)
       or $state[$p:lk] = 43                                (: '.' :)
       or $state[$p:lk] = 53                                (: '<' :)
       or $state[$p:lk] = 54                                (: '<!--' :)
       or $state[$p:lk] = 59                                (: '<?' :)
       or $state[$p:lk] = 65                                (: '?' :)
       or $state[$p:lk] = 69                                (: '[' :)
       or $state[$p:lk] = 73                                (: '``[' :)
       or $state[$p:lk] = 82                                (: 'array' :)
       or $state[$p:lk] = 171                               (: 'map' :)
       or $state[$p:lk] = 2646                              (: 'attribute' URIQualifiedName :)
       or $state[$p:lk] = 2680                              (: 'element' URIQualifiedName :)
       or $state[$p:lk] = 7345                              (: 'namespace' NCName^Token :)
       or $state[$p:lk] = 7374                              (: 'processing-instruction' NCName^Token :)
       or $state[$p:lk] = 7766                              (: 'attribute' QName^Token :)
       or $state[$p:lk] = 7800                              (: 'element' QName^Token :)
       or $state[$p:lk] = 14853                             (: URIQualifiedName '#' :)
       or $state[$p:lk] = 14863                             (: QName^Token '#' :)
       or $state[$p:lk] = 14926                             (: 'ancestor' '#' :)
       or $state[$p:lk] = 14927                             (: 'ancestor-or-self' '#' :)
       or $state[$p:lk] = 14928                             (: 'and' '#' :)
       or $state[$p:lk] = 14931                             (: 'as' '#' :)
       or $state[$p:lk] = 14932                             (: 'ascending' '#' :)
       or $state[$p:lk] = 14933                             (: 'at' '#' :)
       or $state[$p:lk] = 14934                             (: 'attribute' '#' :)
       or $state[$p:lk] = 14939                             (: 'case' '#' :)
       or $state[$p:lk] = 14940                             (: 'cast' '#' :)
       or $state[$p:lk] = 14941                             (: 'castable' '#' :)
       or $state[$p:lk] = 14943                             (: 'child' '#' :)
       or $state[$p:lk] = 14944                             (: 'collation' '#' :)
       or $state[$p:lk] = 14945                             (: 'comment' '#' :)
       or $state[$p:lk] = 14950                             (: 'copy' '#' :)
       or $state[$p:lk] = 14952                             (: 'count' '#' :)
       or $state[$p:lk] = 14955                             (: 'declare' '#' :)
       or $state[$p:lk] = 14956                             (: 'default' '#' :)
       or $state[$p:lk] = 14957                             (: 'delete' '#' :)
       or $state[$p:lk] = 14958                             (: 'descendant' '#' :)
       or $state[$p:lk] = 14959                             (: 'descendant-or-self' '#' :)
       or $state[$p:lk] = 14960                             (: 'descending' '#' :)
       or $state[$p:lk] = 14965                             (: 'div' '#' :)
       or $state[$p:lk] = 14966                             (: 'document' '#' :)
       or $state[$p:lk] = 14967                             (: 'document-node' '#' :)
       or $state[$p:lk] = 14968                             (: 'element' '#' :)
       or $state[$p:lk] = 14969                             (: 'else' '#' :)
       or $state[$p:lk] = 14970                             (: 'empty' '#' :)
       or $state[$p:lk] = 14971                             (: 'empty-sequence' '#' :)
       or $state[$p:lk] = 14973                             (: 'end' '#' :)
       or $state[$p:lk] = 14975                             (: 'eq' '#' :)
       or $state[$p:lk] = 14976                             (: 'every' '#' :)
       or $state[$p:lk] = 14978                             (: 'except' '#' :)
       or $state[$p:lk] = 14982                             (: 'following' '#' :)
       or $state[$p:lk] = 14983                             (: 'following-sibling' '#' :)
       or $state[$p:lk] = 14984                             (: 'for' '#' :)
       or $state[$p:lk] = 14990                             (: 'function' '#' :)
       or $state[$p:lk] = 14991                             (: 'ge' '#' :)
       or $state[$p:lk] = 14993                             (: 'group' '#' :)
       or $state[$p:lk] = 14995                             (: 'gt' '#' :)
       or $state[$p:lk] = 14996                             (: 'idiv' '#' :)
       or $state[$p:lk] = 14997                             (: 'if' '#' :)
       or $state[$p:lk] = 14998                             (: 'import' '#' :)
       or $state[$p:lk] = 15003                             (: 'insert' '#' :)
       or $state[$p:lk] = 15004                             (: 'instance' '#' :)
       or $state[$p:lk] = 15005                             (: 'intersect' '#' :)
       or $state[$p:lk] = 15007                             (: 'invoke' '#' :)
       or $state[$p:lk] = 15008                             (: 'is' '#' :)
       or $state[$p:lk] = 15009                             (: 'item' '#' :)
       or $state[$p:lk] = 15013                             (: 'le' '#' :)
       or $state[$p:lk] = 15015                             (: 'let' '#' :)
       or $state[$p:lk] = 15018                             (: 'lt' '#' :)
       or $state[$p:lk] = 15021                             (: 'mod' '#' :)
       or $state[$p:lk] = 15022                             (: 'modify' '#' :)
       or $state[$p:lk] = 15023                             (: 'module' '#' :)
       or $state[$p:lk] = 15025                             (: 'namespace' '#' :)
       or $state[$p:lk] = 15026                             (: 'namespace-node' '#' :)
       or $state[$p:lk] = 15027                             (: 'ne' '#' :)
       or $state[$p:lk] = 15032                             (: 'node' '#' :)
       or $state[$p:lk] = 15037                             (: 'only' '#' :)
       or $state[$p:lk] = 15039                             (: 'or' '#' :)
       or $state[$p:lk] = 15040                             (: 'order' '#' :)
       or $state[$p:lk] = 15041                             (: 'ordered' '#' :)
       or $state[$p:lk] = 15045                             (: 'parent' '#' :)
       or $state[$p:lk] = 15050                             (: 'preceding' '#' :)
       or $state[$p:lk] = 15051                             (: 'preceding-sibling' '#' :)
       or $state[$p:lk] = 15054                             (: 'processing-instruction' '#' :)
       or $state[$p:lk] = 15056                             (: 'rename' '#' :)
       or $state[$p:lk] = 15057                             (: 'replace' '#' :)
       or $state[$p:lk] = 15058                             (: 'return' '#' :)
       or $state[$p:lk] = 15061                             (: 'satisfies' '#' :)
       or $state[$p:lk] = 15063                             (: 'schema-attribute' '#' :)
       or $state[$p:lk] = 15064                             (: 'schema-element' '#' :)
       or $state[$p:lk] = 15066                             (: 'self' '#' :)
       or $state[$p:lk] = 15072                             (: 'some' '#' :)
       or $state[$p:lk] = 15073                             (: 'stable' '#' :)
       or $state[$p:lk] = 15074                             (: 'start' '#' :)
       or $state[$p:lk] = 15079                             (: 'switch' '#' :)
       or $state[$p:lk] = 15080                             (: 'text' '#' :)
       or $state[$p:lk] = 15084                             (: 'to' '#' :)
       or $state[$p:lk] = 15085                             (: 'transform' '#' :)
       or $state[$p:lk] = 15086                             (: 'treat' '#' :)
       or $state[$p:lk] = 15087                             (: 'try' '#' :)
       or $state[$p:lk] = 15090                             (: 'typeswitch' '#' :)
       or $state[$p:lk] = 15091                             (: 'union' '#' :)
       or $state[$p:lk] = 15092                             (: 'unordered' '#' :)
       or $state[$p:lk] = 15093                             (: 'update' '#' :)
       or $state[$p:lk] = 15097                             (: 'validate' '#' :)
       or $state[$p:lk] = 15103                             (: 'where' '#' :)
       or $state[$p:lk] = 15106                             (: 'with' '#' :)
       or $state[$p:lk] = 15110                             (: 'xquery' '#' :)
       or $state[$p:lk] = 17413                             (: URIQualifiedName '(' :)
       or $state[$p:lk] = 17423                             (: QName^Token '(' :)
       or $state[$p:lk] = 17486                             (: 'ancestor' '(' :)
       or $state[$p:lk] = 17487                             (: 'ancestor-or-self' '(' :)
       or $state[$p:lk] = 17488                             (: 'and' '(' :)
       or $state[$p:lk] = 17491                             (: 'as' '(' :)
       or $state[$p:lk] = 17492                             (: 'ascending' '(' :)
       or $state[$p:lk] = 17493                             (: 'at' '(' :)
       or $state[$p:lk] = 17499                             (: 'case' '(' :)
       or $state[$p:lk] = 17500                             (: 'cast' '(' :)
       or $state[$p:lk] = 17501                             (: 'castable' '(' :)
       or $state[$p:lk] = 17503                             (: 'child' '(' :)
       or $state[$p:lk] = 17504                             (: 'collation' '(' :)
       or $state[$p:lk] = 17510                             (: 'copy' '(' :)
       or $state[$p:lk] = 17512                             (: 'count' '(' :)
       or $state[$p:lk] = 17515                             (: 'declare' '(' :)
       or $state[$p:lk] = 17516                             (: 'default' '(' :)
       or $state[$p:lk] = 17517                             (: 'delete' '(' :)
       or $state[$p:lk] = 17518                             (: 'descendant' '(' :)
       or $state[$p:lk] = 17519                             (: 'descendant-or-self' '(' :)
       or $state[$p:lk] = 17520                             (: 'descending' '(' :)
       or $state[$p:lk] = 17525                             (: 'div' '(' :)
       or $state[$p:lk] = 17526                             (: 'document' '(' :)
       or $state[$p:lk] = 17529                             (: 'else' '(' :)
       or $state[$p:lk] = 17530                             (: 'empty' '(' :)
       or $state[$p:lk] = 17533                             (: 'end' '(' :)
       or $state[$p:lk] = 17535                             (: 'eq' '(' :)
       or $state[$p:lk] = 17536                             (: 'every' '(' :)
       or $state[$p:lk] = 17538                             (: 'except' '(' :)
       or $state[$p:lk] = 17542                             (: 'following' '(' :)
       or $state[$p:lk] = 17543                             (: 'following-sibling' '(' :)
       or $state[$p:lk] = 17544                             (: 'for' '(' :)
       or $state[$p:lk] = 17550                             (: 'function' '(' :)
       or $state[$p:lk] = 17551                             (: 'ge' '(' :)
       or $state[$p:lk] = 17553                             (: 'group' '(' :)
       or $state[$p:lk] = 17555                             (: 'gt' '(' :)
       or $state[$p:lk] = 17556                             (: 'idiv' '(' :)
       or $state[$p:lk] = 17558                             (: 'import' '(' :)
       or $state[$p:lk] = 17563                             (: 'insert' '(' :)
       or $state[$p:lk] = 17564                             (: 'instance' '(' :)
       or $state[$p:lk] = 17565                             (: 'intersect' '(' :)
       or $state[$p:lk] = 17567                             (: 'invoke' '(' :)
       or $state[$p:lk] = 17568                             (: 'is' '(' :)
       or $state[$p:lk] = 17573                             (: 'le' '(' :)
       or $state[$p:lk] = 17575                             (: 'let' '(' :)
       or $state[$p:lk] = 17578                             (: 'lt' '(' :)
       or $state[$p:lk] = 17581                             (: 'mod' '(' :)
       or $state[$p:lk] = 17582                             (: 'modify' '(' :)
       or $state[$p:lk] = 17583                             (: 'module' '(' :)
       or $state[$p:lk] = 17585                             (: 'namespace' '(' :)
       or $state[$p:lk] = 17587                             (: 'ne' '(' :)
       or $state[$p:lk] = 17597                             (: 'only' '(' :)
       or $state[$p:lk] = 17599                             (: 'or' '(' :)
       or $state[$p:lk] = 17600                             (: 'order' '(' :)
       or $state[$p:lk] = 17601                             (: 'ordered' '(' :)
       or $state[$p:lk] = 17605                             (: 'parent' '(' :)
       or $state[$p:lk] = 17610                             (: 'preceding' '(' :)
       or $state[$p:lk] = 17611                             (: 'preceding-sibling' '(' :)
       or $state[$p:lk] = 17616                             (: 'rename' '(' :)
       or $state[$p:lk] = 17617                             (: 'replace' '(' :)
       or $state[$p:lk] = 17618                             (: 'return' '(' :)
       or $state[$p:lk] = 17621                             (: 'satisfies' '(' :)
       or $state[$p:lk] = 17626                             (: 'self' '(' :)
       or $state[$p:lk] = 17632                             (: 'some' '(' :)
       or $state[$p:lk] = 17633                             (: 'stable' '(' :)
       or $state[$p:lk] = 17634                             (: 'start' '(' :)
       or $state[$p:lk] = 17644                             (: 'to' '(' :)
       or $state[$p:lk] = 17645                             (: 'transform' '(' :)
       or $state[$p:lk] = 17646                             (: 'treat' '(' :)
       or $state[$p:lk] = 17647                             (: 'try' '(' :)
       or $state[$p:lk] = 17651                             (: 'union' '(' :)
       or $state[$p:lk] = 17652                             (: 'unordered' '(' :)
       or $state[$p:lk] = 17653                             (: 'update' '(' :)
       or $state[$p:lk] = 17657                             (: 'validate' '(' :)
       or $state[$p:lk] = 17663                             (: 'where' '(' :)
       or $state[$p:lk] = 17666                             (: 'with' '(' :)
       or $state[$p:lk] = 17670                             (: 'xquery' '(' :)
       or $state[$p:lk] = 40022                             (: 'attribute' 'ancestor' :)
       or $state[$p:lk] = 40056                             (: 'element' 'ancestor' :)
       or $state[$p:lk] = 40534                             (: 'attribute' 'ancestor-or-self' :)
       or $state[$p:lk] = 40568                             (: 'element' 'ancestor-or-self' :)
       or $state[$p:lk] = 43606                             (: 'attribute' 'at' :)
       or $state[$p:lk] = 43640                             (: 'element' 'at' :)
       or $state[$p:lk] = 44118                             (: 'attribute' 'attribute' :)
       or $state[$p:lk] = 44152                             (: 'element' 'attribute' :)
       or $state[$p:lk] = 48726                             (: 'attribute' 'child' :)
       or $state[$p:lk] = 48760                             (: 'element' 'child' :)
       or $state[$p:lk] = 49750                             (: 'attribute' 'comment' :)
       or $state[$p:lk] = 49784                             (: 'element' 'comment' :)
       or $state[$p:lk] = 52310                             (: 'attribute' 'copy' :)
       or $state[$p:lk] = 52344                             (: 'element' 'copy' :)
       or $state[$p:lk] = 54870                             (: 'attribute' 'declare' :)
       or $state[$p:lk] = 54904                             (: 'element' 'declare' :)
       or $state[$p:lk] = 55894                             (: 'attribute' 'delete' :)
       or $state[$p:lk] = 55928                             (: 'element' 'delete' :)
       or $state[$p:lk] = 56406                             (: 'attribute' 'descendant' :)
       or $state[$p:lk] = 56440                             (: 'element' 'descendant' :)
       or $state[$p:lk] = 56918                             (: 'attribute' 'descendant-or-self' :)
       or $state[$p:lk] = 56952                             (: 'element' 'descendant-or-self' :)
       or $state[$p:lk] = 60502                             (: 'attribute' 'document' :)
       or $state[$p:lk] = 60536                             (: 'element' 'document' :)
       or $state[$p:lk] = 61014                             (: 'attribute' 'document-node' :)
       or $state[$p:lk] = 61048                             (: 'element' 'document-node' :)
       or $state[$p:lk] = 61526                             (: 'attribute' 'element' :)
       or $state[$p:lk] = 61560                             (: 'element' 'element' :)
       or $state[$p:lk] = 63062                             (: 'attribute' 'empty-sequence' :)
       or $state[$p:lk] = 63096                             (: 'element' 'empty-sequence' :)
       or $state[$p:lk] = 65622                             (: 'attribute' 'every' :)
       or $state[$p:lk] = 65656                             (: 'element' 'every' :)
       or $state[$p:lk] = 68694                             (: 'attribute' 'following' :)
       or $state[$p:lk] = 68728                             (: 'element' 'following' :)
       or $state[$p:lk] = 69206                             (: 'attribute' 'following-sibling' :)
       or $state[$p:lk] = 69240                             (: 'element' 'following-sibling' :)
       or $state[$p:lk] = 72790                             (: 'attribute' 'function' :)
       or $state[$p:lk] = 72824                             (: 'element' 'function' :)
       or $state[$p:lk] = 76374                             (: 'attribute' 'if' :)
       or $state[$p:lk] = 76408                             (: 'element' 'if' :)
       or $state[$p:lk] = 76886                             (: 'attribute' 'import' :)
       or $state[$p:lk] = 76920                             (: 'element' 'import' :)
       or $state[$p:lk] = 79446                             (: 'attribute' 'insert' :)
       or $state[$p:lk] = 79480                             (: 'element' 'insert' :)
       or $state[$p:lk] = 81494                             (: 'attribute' 'invoke' :)
       or $state[$p:lk] = 81528                             (: 'element' 'invoke' :)
       or $state[$p:lk] = 82518                             (: 'attribute' 'item' :)
       or $state[$p:lk] = 82552                             (: 'element' 'item' :)
       or $state[$p:lk] = 89686                             (: 'attribute' 'module' :)
       or $state[$p:lk] = 89720                             (: 'element' 'module' :)
       or $state[$p:lk] = 90710                             (: 'attribute' 'namespace' :)
       or $state[$p:lk] = 90744                             (: 'element' 'namespace' :)
       or $state[$p:lk] = 91222                             (: 'attribute' 'namespace-node' :)
       or $state[$p:lk] = 91256                             (: 'element' 'namespace-node' :)
       or $state[$p:lk] = 94294                             (: 'attribute' 'node' :)
       or $state[$p:lk] = 94328                             (: 'element' 'node' :)
       or $state[$p:lk] = 98902                             (: 'attribute' 'ordered' :)
       or $state[$p:lk] = 98936                             (: 'element' 'ordered' :)
       or $state[$p:lk] = 100950                            (: 'attribute' 'parent' :)
       or $state[$p:lk] = 100984                            (: 'element' 'parent' :)
       or $state[$p:lk] = 103510                            (: 'attribute' 'preceding' :)
       or $state[$p:lk] = 103544                            (: 'element' 'preceding' :)
       or $state[$p:lk] = 104022                            (: 'attribute' 'preceding-sibling' :)
       or $state[$p:lk] = 104056                            (: 'element' 'preceding-sibling' :)
       or $state[$p:lk] = 105558                            (: 'attribute' 'processing-instruction' :)
       or $state[$p:lk] = 105592                            (: 'element' 'processing-instruction' :)
       or $state[$p:lk] = 106582                            (: 'attribute' 'rename' :)
       or $state[$p:lk] = 106616                            (: 'element' 'rename' :)
       or $state[$p:lk] = 107094                            (: 'attribute' 'replace' :)
       or $state[$p:lk] = 107128                            (: 'element' 'replace' :)
       or $state[$p:lk] = 110166                            (: 'attribute' 'schema-attribute' :)
       or $state[$p:lk] = 110200                            (: 'element' 'schema-attribute' :)
       or $state[$p:lk] = 110678                            (: 'attribute' 'schema-element' :)
       or $state[$p:lk] = 110712                            (: 'element' 'schema-element' :)
       or $state[$p:lk] = 111702                            (: 'attribute' 'self' :)
       or $state[$p:lk] = 111736                            (: 'element' 'self' :)
       or $state[$p:lk] = 114774                            (: 'attribute' 'some' :)
       or $state[$p:lk] = 114808                            (: 'element' 'some' :)
       or $state[$p:lk] = 118358                            (: 'attribute' 'switch' :)
       or $state[$p:lk] = 118392                            (: 'element' 'switch' :)
       or $state[$p:lk] = 118870                            (: 'attribute' 'text' :)
       or $state[$p:lk] = 118904                            (: 'element' 'text' :)
       or $state[$p:lk] = 122454                            (: 'attribute' 'try' :)
       or $state[$p:lk] = 122488                            (: 'element' 'try' :)
       or $state[$p:lk] = 123990                            (: 'attribute' 'typeswitch' :)
       or $state[$p:lk] = 124024                            (: 'element' 'typeswitch' :)
       or $state[$p:lk] = 125014                            (: 'attribute' 'unordered' :)
       or $state[$p:lk] = 125048                            (: 'element' 'unordered' :)
       or $state[$p:lk] = 127574                            (: 'attribute' 'validate' :)
       or $state[$p:lk] = 127608                            (: 'element' 'validate' :)
       or $state[$p:lk] = 134230                            (: 'attribute' 'xquery' :)
       or $state[$p:lk] = 134264                            (: 'element' 'xquery' :)
       or $state[$p:lk] = 135254                            (: 'attribute' '{' :)
       or $state[$p:lk] = 135265                            (: 'comment' '{' :)
       or $state[$p:lk] = 135286                            (: 'document' '{' :)
       or $state[$p:lk] = 135288                            (: 'element' '{' :)
       or $state[$p:lk] = 135345                            (: 'namespace' '{' :)
       or $state[$p:lk] = 135361                            (: 'ordered' '{' :)
       or $state[$p:lk] = 135374                            (: 'processing-instruction' '{' :)
       or $state[$p:lk] = 135400                            (: 'text' '{' :)
       or $state[$p:lk] = 135412) then                      (: 'unordered' '{' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-PostfixExpr($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-AxisStep($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "StepExpr"),
    $state
  )
};

(:~
 : Parse the 1st loop of production RelativePathExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-RelativePathExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state :=
      if ($state[$p:l1] eq 26) then                         (: '!' :)
        let $state := p:lookahead2W(244, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | ('(' ':') | '.' | '..' |
                                                               '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' |
                                                               '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] != 25                          (: EOF :)
           and $state[$p:lk] != 27                          (: '!=' :)
           and $state[$p:lk] != 37                          (: ')' :)
           and $state[$p:lk] != 38                          (: '*' :)
           and $state[$p:lk] != 39                          (: '+' :)
           and $state[$p:lk] != 40                          (: ',' :)
           and $state[$p:lk] != 41                          (: '-' :)
           and $state[$p:lk] != 45                          (: '/' :)
           and $state[$p:lk] != 46                          (: '//' :)
           and $state[$p:lk] != 48                          (: ':' :)
           and $state[$p:lk] != 52                          (: ';' :)
           and $state[$p:lk] != 53                          (: '<' :)
           and $state[$p:lk] != 57                          (: '<<' :)
           and $state[$p:lk] != 58                          (: '<=' :)
           and $state[$p:lk] != 60                          (: '=' :)
           and $state[$p:lk] != 61                          (: '=>' :)
           and $state[$p:lk] != 62                          (: '>' :)
           and $state[$p:lk] != 63                          (: '>=' :)
           and $state[$p:lk] != 64                          (: '>>' :)
           and $state[$p:lk] != 70                          (: ']' :)
           and $state[$p:lk] != 75                          (: 'after' :)
           and $state[$p:lk] != 80                          (: 'and' :)
           and $state[$p:lk] != 83                          (: 'as' :)
           and $state[$p:lk] != 84                          (: 'ascending' :)
           and $state[$p:lk] != 88                          (: 'before' :)
           and $state[$p:lk] != 91                          (: 'case' :)
           and $state[$p:lk] != 92                          (: 'cast' :)
           and $state[$p:lk] != 93                          (: 'castable' :)
           and $state[$p:lk] != 96                          (: 'collation' :)
           and $state[$p:lk] != 99                          (: 'contains' :)
           and $state[$p:lk] != 104                         (: 'count' :)
           and $state[$p:lk] != 108                         (: 'default' :)
           and $state[$p:lk] != 112                         (: 'descending' :)
           and $state[$p:lk] != 117                         (: 'div' :)
           and $state[$p:lk] != 121                         (: 'else' :)
           and $state[$p:lk] != 122                         (: 'empty' :)
           and $state[$p:lk] != 125                         (: 'end' :)
           and $state[$p:lk] != 127                         (: 'eq' :)
           and $state[$p:lk] != 130                         (: 'except' :)
           and $state[$p:lk] != 136                         (: 'for' :)
           and $state[$p:lk] != 143                         (: 'ge' :)
           and $state[$p:lk] != 145                         (: 'group' :)
           and $state[$p:lk] != 147                         (: 'gt' :)
           and $state[$p:lk] != 148                         (: 'idiv' :)
           and $state[$p:lk] != 156                         (: 'instance' :)
           and $state[$p:lk] != 157                         (: 'intersect' :)
           and $state[$p:lk] != 158                         (: 'into' :)
           and $state[$p:lk] != 160                         (: 'is' :)
           and $state[$p:lk] != 165                         (: 'le' :)
           and $state[$p:lk] != 167                         (: 'let' :)
           and $state[$p:lk] != 170                         (: 'lt' :)
           and $state[$p:lk] != 173                         (: 'mod' :)
           and $state[$p:lk] != 174                         (: 'modify' :)
           and $state[$p:lk] != 179                         (: 'ne' :)
           and $state[$p:lk] != 189                         (: 'only' :)
           and $state[$p:lk] != 191                         (: 'or' :)
           and $state[$p:lk] != 192                         (: 'order' :)
           and $state[$p:lk] != 196                         (: 'paragraphs' :)
           and $state[$p:lk] != 210                         (: 'return' :)
           and $state[$p:lk] != 213                         (: 'satisfies' :)
           and $state[$p:lk] != 221                         (: 'sentences' :)
           and $state[$p:lk] != 225                         (: 'stable' :)
           and $state[$p:lk] != 226                         (: 'start' :)
           and $state[$p:lk] != 235                         (: 'times' :)
           and $state[$p:lk] != 236                         (: 'to' :)
           and $state[$p:lk] != 237                         (: 'transform' :)
           and $state[$p:lk] != 238                         (: 'treat' :)
           and $state[$p:lk] != 243                         (: 'union' :)
           and $state[$p:lk] != 245                         (: 'update' :)
           and $state[$p:lk] != 255                         (: 'where' :)
           and $state[$p:lk] != 258                         (: 'with' :)
           and $state[$p:lk] != 261                         (: 'words' :)
           and $state[$p:lk] != 266                         (: '|' :)
           and $state[$p:lk] != 267                         (: '||' :)
           and $state[$p:lk] != 268                         (: '}' :)
           and $state[$p:lk] != 269                         (: '}`' :)
           and $state[$p:lk] != 23066                       (: '!' '/' :)
           and $state[$p:lk] != 23578) then                 (: '!' '//' :)
        let $state := p:memoized($state, 4)
        return
          if ($state[$p:lk] != 0) then
            $state
          else
            let $backtrack := $state
            let $state := p:strip-result($state)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] = 45) then             (: '/' :)
                let $state := p:consume(45, $input, $state) (: '/' :)
                return $state
              else if ($state[$p:l1] = 46) then             (: '//' :)
                let $state := p:consume(46, $input, $state) (: '//' :)
                return $state
              else
                let $state := p:consume(26, $input, $state) (: '!' :)
                return $state
            let $state := p:lookahead1W(243, $input, $state) (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                                StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                                Wildcard | '$' | '%' | '(' | ('(' ':') | '.' | '..' |
                                                                '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' |
                                                                'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                                                'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                                'cast' | 'castable' | 'child' | 'collation' |
                                                                'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                                'delete' | 'descendant' | 'descendant-or-self' |
                                                                'descending' | 'div' | 'document' | 'document-node' |
                                                                'element' | 'else' | 'empty' | 'empty-sequence' |
                                                                'end' | 'eq' | 'every' | 'except' | 'following' |
                                                                'following-sibling' | 'for' | 'function' | 'ge' |
                                                                'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                                'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                                'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                                'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                                'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                                'parent' | 'preceding' | 'preceding-sibling' |
                                                                'processing-instruction' | 'rename' | 'replace' |
                                                                'return' | 'satisfies' | 'schema-attribute' |
                                                                'schema-element' | 'self' | 'some' | 'stable' |
                                                                'start' | 'switch' | 'text' | 'to' | 'transform' |
                                                                'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                                                'update' | 'validate' | 'where' | 'with' | 'xquery' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-StepExpr($input, $state)
            return
              if (not($state[$p:error])) then
                p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -1, -1)
              else
                p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -2, -2)
      else
        $state
    return
      if ($state[$p:lk] != -1
      and $state[$p:lk] != 45                               (: '/' :)
      and $state[$p:lk] != 46) then                         (: '//' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 45) then                 (: '/' :)
            let $state := p:consume(45, $input, $state)     (: '/' :)
            return $state
          else if ($state[$p:l1] = 46) then                 (: '//' :)
            let $state := p:consume(46, $input, $state)     (: '//' :)
            return $state
          else
            let $state := p:consume(26, $input, $state)     (: '!' :)
            return $state
        let $state := p:lookahead1W(243, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | ('(' ':') | '.' | '..' |
                                                               '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                                               'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-StepExpr($input, $state)
        return p:parse-RelativePathExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production RelativePathExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-RelativePathExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state :=
      if ($state[$p:l1] eq 26) then                         (: '!' :)
        let $state := p:lookahead2W(244, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | ('(' ':') | '.' | '..' |
                                                               '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' |
                                                               '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] != 25                          (: EOF :)
           and $state[$p:lk] != 27                          (: '!=' :)
           and $state[$p:lk] != 37                          (: ')' :)
           and $state[$p:lk] != 38                          (: '*' :)
           and $state[$p:lk] != 39                          (: '+' :)
           and $state[$p:lk] != 40                          (: ',' :)
           and $state[$p:lk] != 41                          (: '-' :)
           and $state[$p:lk] != 45                          (: '/' :)
           and $state[$p:lk] != 46                          (: '//' :)
           and $state[$p:lk] != 48                          (: ':' :)
           and $state[$p:lk] != 52                          (: ';' :)
           and $state[$p:lk] != 53                          (: '<' :)
           and $state[$p:lk] != 57                          (: '<<' :)
           and $state[$p:lk] != 58                          (: '<=' :)
           and $state[$p:lk] != 60                          (: '=' :)
           and $state[$p:lk] != 61                          (: '=>' :)
           and $state[$p:lk] != 62                          (: '>' :)
           and $state[$p:lk] != 63                          (: '>=' :)
           and $state[$p:lk] != 64                          (: '>>' :)
           and $state[$p:lk] != 70                          (: ']' :)
           and $state[$p:lk] != 75                          (: 'after' :)
           and $state[$p:lk] != 80                          (: 'and' :)
           and $state[$p:lk] != 83                          (: 'as' :)
           and $state[$p:lk] != 84                          (: 'ascending' :)
           and $state[$p:lk] != 88                          (: 'before' :)
           and $state[$p:lk] != 91                          (: 'case' :)
           and $state[$p:lk] != 92                          (: 'cast' :)
           and $state[$p:lk] != 93                          (: 'castable' :)
           and $state[$p:lk] != 96                          (: 'collation' :)
           and $state[$p:lk] != 99                          (: 'contains' :)
           and $state[$p:lk] != 104                         (: 'count' :)
           and $state[$p:lk] != 108                         (: 'default' :)
           and $state[$p:lk] != 112                         (: 'descending' :)
           and $state[$p:lk] != 117                         (: 'div' :)
           and $state[$p:lk] != 121                         (: 'else' :)
           and $state[$p:lk] != 122                         (: 'empty' :)
           and $state[$p:lk] != 125                         (: 'end' :)
           and $state[$p:lk] != 127                         (: 'eq' :)
           and $state[$p:lk] != 130                         (: 'except' :)
           and $state[$p:lk] != 136                         (: 'for' :)
           and $state[$p:lk] != 143                         (: 'ge' :)
           and $state[$p:lk] != 145                         (: 'group' :)
           and $state[$p:lk] != 147                         (: 'gt' :)
           and $state[$p:lk] != 148                         (: 'idiv' :)
           and $state[$p:lk] != 156                         (: 'instance' :)
           and $state[$p:lk] != 157                         (: 'intersect' :)
           and $state[$p:lk] != 158                         (: 'into' :)
           and $state[$p:lk] != 160                         (: 'is' :)
           and $state[$p:lk] != 165                         (: 'le' :)
           and $state[$p:lk] != 167                         (: 'let' :)
           and $state[$p:lk] != 170                         (: 'lt' :)
           and $state[$p:lk] != 173                         (: 'mod' :)
           and $state[$p:lk] != 174                         (: 'modify' :)
           and $state[$p:lk] != 179                         (: 'ne' :)
           and $state[$p:lk] != 189                         (: 'only' :)
           and $state[$p:lk] != 191                         (: 'or' :)
           and $state[$p:lk] != 192                         (: 'order' :)
           and $state[$p:lk] != 196                         (: 'paragraphs' :)
           and $state[$p:lk] != 210                         (: 'return' :)
           and $state[$p:lk] != 213                         (: 'satisfies' :)
           and $state[$p:lk] != 221                         (: 'sentences' :)
           and $state[$p:lk] != 225                         (: 'stable' :)
           and $state[$p:lk] != 226                         (: 'start' :)
           and $state[$p:lk] != 235                         (: 'times' :)
           and $state[$p:lk] != 236                         (: 'to' :)
           and $state[$p:lk] != 237                         (: 'transform' :)
           and $state[$p:lk] != 238                         (: 'treat' :)
           and $state[$p:lk] != 243                         (: 'union' :)
           and $state[$p:lk] != 245                         (: 'update' :)
           and $state[$p:lk] != 255                         (: 'where' :)
           and $state[$p:lk] != 258                         (: 'with' :)
           and $state[$p:lk] != 261                         (: 'words' :)
           and $state[$p:lk] != 266                         (: '|' :)
           and $state[$p:lk] != 267                         (: '||' :)
           and $state[$p:lk] != 268                         (: '}' :)
           and $state[$p:lk] != 269                         (: '}`' :)
           and $state[$p:lk] != 23066                       (: '!' '/' :)
           and $state[$p:lk] != 23578) then                 (: '!' '//' :)
        let $state := p:memoized($state, 4)
        return
          if ($state[$p:lk] != 0) then
            $state
          else
            let $backtrack := $state
            let $state := p:strip-result($state)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] = 45) then             (: '/' :)
                let $state := p:consume(45, $input, $state) (: '/' :)
                return $state
              else if ($state[$p:l1] = 46) then             (: '//' :)
                let $state := p:consume(46, $input, $state) (: '//' :)
                return $state
              else
                let $state := p:consume(26, $input, $state) (: '!' :)
                return $state
            let $state := p:lookahead1W(243, $input, $state) (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                                StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                                Wildcard | '$' | '%' | '(' | ('(' ':') | '.' | '..' |
                                                                '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' |
                                                                'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                                                'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                                'cast' | 'castable' | 'child' | 'collation' |
                                                                'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                                'delete' | 'descendant' | 'descendant-or-self' |
                                                                'descending' | 'div' | 'document' | 'document-node' |
                                                                'element' | 'else' | 'empty' | 'empty-sequence' |
                                                                'end' | 'eq' | 'every' | 'except' | 'following' |
                                                                'following-sibling' | 'for' | 'function' | 'ge' |
                                                                'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                                'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                                'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                                'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                                'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                                'parent' | 'preceding' | 'preceding-sibling' |
                                                                'processing-instruction' | 'rename' | 'replace' |
                                                                'return' | 'satisfies' | 'schema-attribute' |
                                                                'schema-element' | 'self' | 'some' | 'stable' |
                                                                'start' | 'switch' | 'text' | 'to' | 'transform' |
                                                                'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                                                'update' | 'validate' | 'where' | 'with' | 'xquery' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-StepExpr($input, $state)
            return
              if (not($state[$p:error])) then
                p:memoize($state, $state, 4, $backtrack[$p:e0], -1, -3)
              else
                p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -2, -2)
      else
        $state
    return
      if ($state[$p:lk] = -3) then
        p:try-RelativePathExpr-1($input, $state)
      else if ($state[$p:lk] != -1
           and $state[$p:lk] != 45                          (: '/' :)
           and $state[$p:lk] != 46) then                    (: '//' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 45) then                 (: '/' :)
            let $state := p:consume(45, $input, $state)     (: '/' :)
            return $state
          else if ($state[$p:l1] = 46) then                 (: '//' :)
            let $state := p:consume(46, $input, $state)     (: '//' :)
            return $state
          else
            let $state := p:consume(26, $input, $state)     (: '!' :)
            return $state
        let $state := p:lookahead1W(243, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | ('(' ':') | '.' | '..' |
                                                               '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                                               'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-StepExpr($input, $state)
        return p:try-RelativePathExpr-1($input, $state)
};

(:~
 : Parse RelativePathExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-RelativePathExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "RelativePathExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-StepExpr($input, $state)
    let $state := p:parse-RelativePathExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "RelativePathExpr"),
    $state
  )
};

(:~
 : Try parsing RelativePathExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-RelativePathExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "RelativePathExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-StepExpr($input, $state)
    let $state := p:try-RelativePathExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "RelativePathExpr"),
    $state
  )
};

(:~
 : Parse PathExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-PathExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "PathExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 45) then                     (: '/' :)
        let $state := p:consume(45, $input, $state)         (: '/' :)
        let $state := p:lookahead1W(253, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | EOF | '!' | '!=' | '$' | '%' | '(' |
                                                               ('(' ':') | ')' | '*' | '+' | ',' | '-' | '.' | '..' |
                                                               ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' |
                                                               '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' | ']' |
                                                               '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                                               'and' | 'array' | 'as' | 'ascending' | 'at' |
                                                               'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                                               'child' | 'collation' | 'comment' | 'contains' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'paragraphs' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'sentences' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'words' | 'xquery' | '|' | '||' | '}' | '}`' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 25                       (: EOF :)
                or $state[$p:l1] = 26                       (: '!' :)
                or $state[$p:l1] = 27                       (: '!=' :)
                or $state[$p:l1] = 37                       (: ')' :)
                or $state[$p:l1] = 38                       (: '*' :)
                or $state[$p:l1] = 39                       (: '+' :)
                or $state[$p:l1] = 40                       (: ',' :)
                or $state[$p:l1] = 41                       (: '-' :)
                or $state[$p:l1] = 48                       (: ':' :)
                or $state[$p:l1] = 52                       (: ';' :)
                or $state[$p:l1] = 57                       (: '<<' :)
                or $state[$p:l1] = 58                       (: '<=' :)
                or $state[$p:l1] = 60                       (: '=' :)
                or $state[$p:l1] = 61                       (: '=>' :)
                or $state[$p:l1] = 62                       (: '>' :)
                or $state[$p:l1] = 63                       (: '>=' :)
                or $state[$p:l1] = 64                       (: '>>' :)
                or $state[$p:l1] = 70                       (: ']' :)
                or $state[$p:l1] = 75                       (: 'after' :)
                or $state[$p:l1] = 88                       (: 'before' :)
                or $state[$p:l1] = 99                       (: 'contains' :)
                or $state[$p:l1] = 158                      (: 'into' :)
                or $state[$p:l1] = 196                      (: 'paragraphs' :)
                or $state[$p:l1] = 221                      (: 'sentences' :)
                or $state[$p:l1] = 235                      (: 'times' :)
                or $state[$p:l1] = 261                      (: 'words' :)
                or $state[$p:l1] = 266                      (: '|' :)
                or $state[$p:l1] = 267                      (: '||' :)
                or $state[$p:l1] = 268                      (: '}' :)
                or $state[$p:l1] = 269) then                (: '}`' :)
            $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-RelativePathExpr($input, $state)
            return $state
        return $state
      else if ($state[$p:l1] = 46) then                     (: '//' :)
        let $state := p:consume(46, $input, $state)         (: '//' :)
        let $state := p:lookahead1W(243, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | ('(' ':') | '.' | '..' |
                                                               '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                                               'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-RelativePathExpr($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-RelativePathExpr($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "PathExpr"),
    $state
  )
};

(:~
 : Try parsing PathExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-PathExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "PathExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 45) then                     (: '/' :)
        let $state := p:consume(45, $input, $state)         (: '/' :)
        let $state := p:lookahead1W(253, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | EOF | '!' | '!=' | '$' | '%' | '(' |
                                                               ('(' ':') | ')' | '*' | '+' | ',' | '-' | '.' | '..' |
                                                               ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' |
                                                               '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' | ']' |
                                                               '``[' | 'after' | 'ancestor' | 'ancestor-or-self' |
                                                               'and' | 'array' | 'as' | 'ascending' | 'at' |
                                                               'attribute' | 'before' | 'case' | 'cast' | 'castable' |
                                                               'child' | 'collation' | 'comment' | 'contains' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'into' | 'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' |
                                                               'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'paragraphs' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'sentences' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'times' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'words' | 'xquery' | '|' | '||' | '}' | '}`' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 25                       (: EOF :)
                or $state[$p:l1] = 26                       (: '!' :)
                or $state[$p:l1] = 27                       (: '!=' :)
                or $state[$p:l1] = 37                       (: ')' :)
                or $state[$p:l1] = 38                       (: '*' :)
                or $state[$p:l1] = 39                       (: '+' :)
                or $state[$p:l1] = 40                       (: ',' :)
                or $state[$p:l1] = 41                       (: '-' :)
                or $state[$p:l1] = 48                       (: ':' :)
                or $state[$p:l1] = 52                       (: ';' :)
                or $state[$p:l1] = 57                       (: '<<' :)
                or $state[$p:l1] = 58                       (: '<=' :)
                or $state[$p:l1] = 60                       (: '=' :)
                or $state[$p:l1] = 61                       (: '=>' :)
                or $state[$p:l1] = 62                       (: '>' :)
                or $state[$p:l1] = 63                       (: '>=' :)
                or $state[$p:l1] = 64                       (: '>>' :)
                or $state[$p:l1] = 70                       (: ']' :)
                or $state[$p:l1] = 75                       (: 'after' :)
                or $state[$p:l1] = 88                       (: 'before' :)
                or $state[$p:l1] = 99                       (: 'contains' :)
                or $state[$p:l1] = 158                      (: 'into' :)
                or $state[$p:l1] = 196                      (: 'paragraphs' :)
                or $state[$p:l1] = 221                      (: 'sentences' :)
                or $state[$p:l1] = 235                      (: 'times' :)
                or $state[$p:l1] = 261                      (: 'words' :)
                or $state[$p:l1] = 266                      (: '|' :)
                or $state[$p:l1] = 267                      (: '||' :)
                or $state[$p:l1] = 268                      (: '}' :)
                or $state[$p:l1] = 269) then                (: '}`' :)
            $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-RelativePathExpr($input, $state)
            return $state
        return $state
      else if ($state[$p:l1] = 46) then                     (: '//' :)
        let $state := p:consume(46, $input, $state)         (: '//' :)
        let $state := p:lookahead1W(243, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | ('(' ':') | '.' | '..' |
                                                               '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                                               'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-RelativePathExpr($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-RelativePathExpr($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "PathExpr"),
    $state
  )
};

(:~
 : Parse the 1st loop of production SimpleMapExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SimpleMapExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 26) then                           (: '!' :)
      $state
    else
      let $state := p:consume(26, $input, $state)           (: '!' :)
      let $state := p:lookahead1W(244, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | ('(' ':') | '.' | '..' |
                                                               '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' |
                                                               '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-PathExpr($input, $state)
      return p:parse-SimpleMapExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production SimpleMapExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-SimpleMapExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 26) then                           (: '!' :)
      $state
    else
      let $state := p:consume(26, $input, $state)           (: '!' :)
      let $state := p:lookahead1W(244, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | ('(' ':') | '.' | '..' |
                                                               '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' |
                                                               '``[' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:try-PathExpr($input, $state)
      return p:try-SimpleMapExpr-1($input, $state)
};

(:~
 : Parse SimpleMapExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SimpleMapExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "SimpleMapExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-PathExpr($input, $state)
    let $state := p:parse-SimpleMapExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "SimpleMapExpr"),
    $state
  )
};

(:~
 : Try parsing SimpleMapExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-SimpleMapExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "SimpleMapExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-PathExpr($input, $state)
    let $state := p:try-SimpleMapExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "SimpleMapExpr"),
    $state
  )
};

(:~
 : Parse ValidationMode.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ValidationMode($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ValidationMode"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 164) then                    (: 'lax' :)
        let $state := p:consume(164, $input, $state)        (: 'lax' :)
        return $state
      else
        let $state := p:consume(229, $input, $state)        (: 'strict' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ValidationMode"),
    $state
  )
};

(:~
 : Try parsing ValidationMode.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ValidationMode($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ValidationMode"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 164) then                    (: 'lax' :)
        let $state := p:consume(164, $input, $state)        (: 'lax' :)
        return $state
      else
        let $state := p:consume(229, $input, $state)        (: 'strict' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ValidationMode"),
    $state
  )
};

(:~
 : Parse ValidateExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ValidateExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ValidateExpr"),
  let $state :=
    let $state := p:consume(249, $input, $state)            (: 'validate' :)
    let $state := p:lookahead1W(152, $input, $state)        (: S^WS | ('(' ':') | 'lax' | 'strict' | 'type' | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 264) then                   (: '{' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 241) then                (: 'type' :)
            let $state := p:consume(241, $input, $state)    (: 'type' :)
            let $state := p:lookahead1W(232, $input, $state) (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                                'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                                'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                                'castable' | 'child' | 'collation' | 'comment' |
                                                                'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                                'descendant' | 'descendant-or-self' | 'descending' |
                                                                'div' | 'document' | 'document-node' | 'element' |
                                                                'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                                'every' | 'except' | 'following' | 'following-sibling' |
                                                                'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                                'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                                'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                                'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                                'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                                'parent' | 'preceding' | 'preceding-sibling' |
                                                                'processing-instruction' | 'rename' | 'replace' |
                                                                'return' | 'satisfies' | 'schema-attribute' |
                                                                'schema-element' | 'self' | 'some' | 'stable' |
                                                                'start' | 'switch' | 'text' | 'to' | 'transform' |
                                                                'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                                                'update' | 'validate' | 'where' | 'with' | 'xquery' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-TypeName($input, $state)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-ValidationMode($input, $state)
            return $state
        return $state
      else
        $state
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state := p:consume(264, $input, $state)            (: '{' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Expr($input, $state)
    let $state := p:consume(268, $input, $state)            (: '}' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ValidateExpr"),
    $state
  )
};

(:~
 : Try parsing ValidateExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ValidateExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ValidateExpr"),
  let $state :=
    let $state := p:consume(249, $input, $state)            (: 'validate' :)
    let $state := p:lookahead1W(152, $input, $state)        (: S^WS | ('(' ':') | 'lax' | 'strict' | 'type' | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 264) then                   (: '{' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 241) then                (: 'type' :)
            let $state := p:consume(241, $input, $state)    (: 'type' :)
            let $state := p:lookahead1W(232, $input, $state) (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                                'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                                'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                                'castable' | 'child' | 'collation' | 'comment' |
                                                                'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                                'descendant' | 'descendant-or-self' | 'descending' |
                                                                'div' | 'document' | 'document-node' | 'element' |
                                                                'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                                'every' | 'except' | 'following' | 'following-sibling' |
                                                                'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                                'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                                'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                                'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                                'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                                'parent' | 'preceding' | 'preceding-sibling' |
                                                                'processing-instruction' | 'rename' | 'replace' |
                                                                'return' | 'satisfies' | 'schema-attribute' |
                                                                'schema-element' | 'self' | 'some' | 'stable' |
                                                                'start' | 'switch' | 'text' | 'to' | 'transform' |
                                                                'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                                                'update' | 'validate' | 'where' | 'with' | 'xquery' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-TypeName($input, $state)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-ValidationMode($input, $state)
            return $state
        return $state
      else
        $state
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state := p:consume(264, $input, $state)            (: '{' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-Expr($input, $state)
    let $state := p:consume(268, $input, $state)            (: '}' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ValidateExpr"),
    $state
  )
};

(:~
 : Parse ValueExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ValueExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ValueExpr"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 249) then                        (: 'validate' :)
        let $state := p:lookahead2W(228, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                                               ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'lax' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                                               'stable' | 'start' | 'strict' | 'times' | 'to' |
                                                               'transform' | 'treat' | 'type' | 'union' | 'update' |
                                                               'where' | 'with' | 'words' | '{' | '|' | '||' | '}' |
                                                               '}`' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 84217                        (: 'validate' 'lax' :)
            or $state[$p:lk] = 117497                       (: 'validate' 'strict' :)
            or $state[$p:lk] = 123641                       (: 'validate' 'type' :)
            or $state[$p:lk] = 135417) then                 (: 'validate' '{' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ValidateExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 35) then                     (: '(#' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ExtensionExpr($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-SimpleMapExpr($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ValueExpr"),
    $state
  )
};

(:~
 : Try parsing ValueExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ValueExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ValueExpr"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 249) then                        (: 'validate' :)
        let $state := p:lookahead2W(228, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                                               ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'lax' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                                               'stable' | 'start' | 'strict' | 'times' | 'to' |
                                                               'transform' | 'treat' | 'type' | 'union' | 'update' |
                                                               'where' | 'with' | 'words' | '{' | '|' | '||' | '}' |
                                                               '}`' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 84217                        (: 'validate' 'lax' :)
            or $state[$p:lk] = 117497                       (: 'validate' 'strict' :)
            or $state[$p:lk] = 123641                       (: 'validate' 'type' :)
            or $state[$p:lk] = 135417) then                 (: 'validate' '{' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ValidateExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 35) then                     (: '(#' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ExtensionExpr($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-SimpleMapExpr($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ValueExpr"),
    $state
  )
};

(:~
 : Parse the 1st loop of production UnaryExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-UnaryExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    return
      if ($state[$p:l1] != 39                               (: '+' :)
      and $state[$p:l1] != 41) then                         (: '-' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 41) then                 (: '-' :)
            let $state := p:consume(41, $input, $state)     (: '-' :)
            return $state
          else
            let $state := p:consume(39, $input, $state)     (: '+' :)
            return $state
        return p:parse-UnaryExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production UnaryExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-UnaryExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    return
      if ($state[$p:l1] != 39                               (: '+' :)
      and $state[$p:l1] != 41) then                         (: '-' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 41) then                 (: '-' :)
            let $state := p:consume(41, $input, $state)     (: '-' :)
            return $state
          else
            let $state := p:consume(39, $input, $state)     (: '+' :)
            return $state
        return p:try-UnaryExpr-1($input, $state)
};

(:~
 : Parse UnaryExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-UnaryExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "UnaryExpr"),
  let $state :=
    let $state := p:parse-UnaryExpr-1($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ValueExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "UnaryExpr"),
    $state
  )
};

(:~
 : Try parsing UnaryExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-UnaryExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "UnaryExpr"),
  let $state :=
    let $state := p:try-UnaryExpr-1($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ValueExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "UnaryExpr"),
    $state
  )
};

(:~
 : Parse the 1st loop of production ArrowExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ArrowExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(206, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                                               '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                                               'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'contains' | 'count' | 'default' |
                                                               'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                                               'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                                               'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                                               'order' | 'paragraphs' | 'return' | 'satisfies' |
                                                               'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                                               'transform' | 'treat' | 'union' | 'update' | 'where' |
                                                               'with' | 'words' | '|' | '||' | '}' | '}`' :)
    return
      if ($state[$p:l1] != 61) then                         (: '=>' :)
        $state
      else
        let $state := p:consume(61, $input, $state)         (: '=>' :)
        let $state := p:lookahead1W(237, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | '$' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ArrowFunctionSpecifier($input, $state)
        let $state := p:lookahead1W(24, $input, $state)     (: S^WS | '(' | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ArgumentList($input, $state)
        return p:parse-ArrowExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production ArrowExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ArrowExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(206, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                                               '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                                               'ascending' | 'before' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'contains' | 'count' | 'default' |
                                                               'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                                               'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                                               'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                                               'order' | 'paragraphs' | 'return' | 'satisfies' |
                                                               'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                                               'transform' | 'treat' | 'union' | 'update' | 'where' |
                                                               'with' | 'words' | '|' | '||' | '}' | '}`' :)
    return
      if ($state[$p:l1] != 61) then                         (: '=>' :)
        $state
      else
        let $state := p:consume(61, $input, $state)         (: '=>' :)
        let $state := p:lookahead1W(237, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | '$' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ArrowFunctionSpecifier($input, $state)
        let $state := p:lookahead1W(24, $input, $state)     (: S^WS | '(' | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ArgumentList($input, $state)
        return p:try-ArrowExpr-1($input, $state)
};

(:~
 : Parse ArrowExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ArrowExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ArrowExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-UnaryExpr($input, $state)
    let $state := p:parse-ArrowExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ArrowExpr"),
    $state
  )
};

(:~
 : Try parsing ArrowExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ArrowExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ArrowExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-UnaryExpr($input, $state)
    let $state := p:try-ArrowExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ArrowExpr"),
    $state
  )
};

(:~
 : Parse the 1st loop of production BasexUpdateExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-BasexUpdateExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(205, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                                               '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                                               'contains' | 'count' | 'default' | 'descending' | 'div' |
                                                               'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                                               'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                                               'stable' | 'start' | 'times' | 'to' | 'transform' |
                                                               'treat' | 'union' | 'update' | 'where' | 'with' |
                                                               'words' | '|' | '||' | '}' | '}`' :)
    let $state :=
      if ($state[$p:l1] eq 245) then                        (: 'update' :)
        let $state := p:lookahead2W(80, $input, $state)     (: S^WS | ('(' ':') | '{' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 135413) then                 (: 'update' '{' :)
        let $state := p:memoized($state, 3)
        return
          if ($state[$p:lk] != 0) then
            $state
          else
            let $backtrack := $state
            let $state := p:strip-result($state)
            let $state := p:consume(245, $input, $state)    (: 'update' :)
            let $state := p:lookahead1W(80, $input, $state) (: S^WS | ('(' ':') | '{' :)
            let $state := p:consume(264, $input, $state)    (: '{' :)
            let $state := p:lookahead1W(249, $input, $state) (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                                StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                                Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                                '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                                '?' | '@' | '[' | '``[' | 'ancestor' |
                                                                'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                                'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                                'castable' | 'child' | 'collation' | 'comment' |
                                                                'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                                'descendant' | 'descendant-or-self' | 'descending' |
                                                                'div' | 'document' | 'document-node' | 'element' |
                                                                'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                                'every' | 'except' | 'following' | 'following-sibling' |
                                                                'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                                'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                                'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                                'mod' | 'modify' | 'module' | 'namespace' |
                                                                'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                                'order' | 'ordered' | 'parent' | 'preceding' |
                                                                'preceding-sibling' | 'processing-instruction' |
                                                                'rename' | 'replace' | 'return' | 'satisfies' |
                                                                'schema-attribute' | 'schema-element' | 'self' |
                                                                'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                                'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                                'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                                'xquery' | '}' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] != 268) then           (: '}' :)
                let $state :=
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-Expr($input, $state)
                return $state
              else
                $state
            let $state := p:consume(268, $input, $state)    (: '}' :)
            return
              if (not($state[$p:error])) then
                p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -1, -1)
              else
                p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -2, -2)
      else
        $state
    return
      if ($state[$p:lk] != -1) then
        $state
      else
        let $state := p:consume(245, $input, $state)        (: 'update' :)
        let $state := p:lookahead1W(80, $input, $state)     (: S^WS | ('(' ':') | '{' :)
        let $state := p:consume(264, $input, $state)        (: '{' :)
        let $state := p:lookahead1W(249, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' | '}' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] != 268) then               (: '}' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-Expr($input, $state)
            return $state
          else
            $state
        let $state := p:consume(268, $input, $state)        (: '}' :)
        return p:parse-BasexUpdateExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production BasexUpdateExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-BasexUpdateExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(205, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                                               '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                                               'contains' | 'count' | 'default' | 'descending' | 'div' |
                                                               'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                                               'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                                               'stable' | 'start' | 'times' | 'to' | 'transform' |
                                                               'treat' | 'union' | 'update' | 'where' | 'with' |
                                                               'words' | '|' | '||' | '}' | '}`' :)
    let $state :=
      if ($state[$p:l1] eq 245) then                        (: 'update' :)
        let $state := p:lookahead2W(80, $input, $state)     (: S^WS | ('(' ':') | '{' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 135413) then                 (: 'update' '{' :)
        let $state := p:memoized($state, 3)
        return
          if ($state[$p:lk] != 0) then
            $state
          else
            let $backtrack := $state
            let $state := p:strip-result($state)
            let $state := p:consume(245, $input, $state)    (: 'update' :)
            let $state := p:lookahead1W(80, $input, $state) (: S^WS | ('(' ':') | '{' :)
            let $state := p:consume(264, $input, $state)    (: '{' :)
            let $state := p:lookahead1W(249, $input, $state) (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                                StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                                Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                                '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                                '?' | '@' | '[' | '``[' | 'ancestor' |
                                                                'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                                'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                                'castable' | 'child' | 'collation' | 'comment' |
                                                                'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                                'descendant' | 'descendant-or-self' | 'descending' |
                                                                'div' | 'document' | 'document-node' | 'element' |
                                                                'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                                'every' | 'except' | 'following' | 'following-sibling' |
                                                                'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                                'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                                'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                                'mod' | 'modify' | 'module' | 'namespace' |
                                                                'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                                'order' | 'ordered' | 'parent' | 'preceding' |
                                                                'preceding-sibling' | 'processing-instruction' |
                                                                'rename' | 'replace' | 'return' | 'satisfies' |
                                                                'schema-attribute' | 'schema-element' | 'self' |
                                                                'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                                'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                                'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                                'xquery' | '}' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] != 268) then           (: '}' :)
                let $state :=
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-Expr($input, $state)
                return $state
              else
                $state
            let $state := p:consume(268, $input, $state)    (: '}' :)
            return
              if (not($state[$p:error])) then
                p:memoize($state, $state, 3, $backtrack[$p:e0], -1, -3)
              else
                p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -2, -2)
      else
        $state
    return
      if ($state[$p:lk] = -3) then
        p:try-BasexUpdateExpr-1($input, $state)
      else if ($state[$p:lk] != -1) then
        $state
      else
        let $state := p:consume(245, $input, $state)        (: 'update' :)
        let $state := p:lookahead1W(80, $input, $state)     (: S^WS | ('(' ':') | '{' :)
        let $state := p:consume(264, $input, $state)        (: '{' :)
        let $state := p:lookahead1W(249, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' | '}' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] != 268) then               (: '}' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-Expr($input, $state)
            return $state
          else
            $state
        let $state := p:consume(268, $input, $state)        (: '}' :)
        return p:try-BasexUpdateExpr-1($input, $state)
};

(:~
 : Parse BasexUpdateExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-BasexUpdateExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "BasexUpdateExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ArrowExpr($input, $state)
    let $state := p:parse-BasexUpdateExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "BasexUpdateExpr"),
    $state
  )
};

(:~
 : Try parsing BasexUpdateExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-BasexUpdateExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "BasexUpdateExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ArrowExpr($input, $state)
    let $state := p:try-BasexUpdateExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "BasexUpdateExpr"),
    $state
  )
};

(:~
 : Parse BasexUpdate1Expr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-BasexUpdate1Expr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "BasexUpdate1Expr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-BasexUpdateExpr($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 245) then                    (: 'update' :)
        let $state := p:consume(245, $input, $state)        (: 'update' :)
        let $state := p:lookahead1W(80, $input, $state)     (: S^WS | ('(' ':') | '{' :)
        let $state := p:consume(264, $input, $state)        (: '{' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ExprSingle($input, $state)
        let $state := p:lookahead1W(81, $input, $state)     (: S^WS | ('(' ':') | '}' :)
        let $state := p:consume(268, $input, $state)        (: '}' :)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "BasexUpdate1Expr"),
    $state
  )
};

(:~
 : Try parsing BasexUpdate1Expr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-BasexUpdate1Expr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "BasexUpdate1Expr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-BasexUpdateExpr($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 245) then                    (: 'update' :)
        let $state := p:consume(245, $input, $state)        (: 'update' :)
        let $state := p:lookahead1W(80, $input, $state)     (: S^WS | ('(' ':') | '{' :)
        let $state := p:consume(264, $input, $state)        (: '{' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ExprSingle($input, $state)
        let $state := p:lookahead1W(81, $input, $state)     (: S^WS | ('(' ':') | '}' :)
        let $state := p:consume(268, $input, $state)        (: '}' :)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "BasexUpdate1Expr"),
    $state
  )
};

(:~
 : Parse TransformWithExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-TransformWithExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "TransformWithExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-BasexUpdate1Expr($input, $state)
    let $state := p:lookahead1W(204, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                                               '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                                               'contains' | 'count' | 'default' | 'descending' | 'div' |
                                                               'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                                               'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                                               'stable' | 'start' | 'times' | 'to' | 'transform' |
                                                               'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                                               '||' | '}' | '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 237) then                    (: 'transform' :)
        let $state := p:consume(237, $input, $state)        (: 'transform' :)
        let $state := p:lookahead1W(78, $input, $state)     (: S^WS | ('(' ':') | 'with' :)
        let $state := p:consume(258, $input, $state)        (: 'with' :)
        let $state := p:lookahead1W(80, $input, $state)     (: S^WS | ('(' ':') | '{' :)
        let $state := p:consume(264, $input, $state)        (: '{' :)
        let $state := p:lookahead1W(249, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' | '}' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] != 268) then               (: '}' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-Expr($input, $state)
            return $state
          else
            $state
        let $state := p:consume(268, $input, $state)        (: '}' :)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "TransformWithExpr"),
    $state
  )
};

(:~
 : Try parsing TransformWithExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-TransformWithExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "TransformWithExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-BasexUpdate1Expr($input, $state)
    let $state := p:lookahead1W(204, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                                               '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                                               'contains' | 'count' | 'default' | 'descending' | 'div' |
                                                               'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                                               'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                                               'stable' | 'start' | 'times' | 'to' | 'transform' |
                                                               'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                                               '||' | '}' | '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 237) then                    (: 'transform' :)
        let $state := p:consume(237, $input, $state)        (: 'transform' :)
        let $state := p:lookahead1W(78, $input, $state)     (: S^WS | ('(' ':') | 'with' :)
        let $state := p:consume(258, $input, $state)        (: 'with' :)
        let $state := p:lookahead1W(80, $input, $state)     (: S^WS | ('(' ':') | '{' :)
        let $state := p:consume(264, $input, $state)        (: '{' :)
        let $state := p:lookahead1W(249, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' | '}' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] != 268) then               (: '}' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-Expr($input, $state)
            return $state
          else
            $state
        let $state := p:consume(268, $input, $state)        (: '}' :)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "TransformWithExpr"),
    $state
  )
};

(:~
 : Parse CastExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CastExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CastExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-TransformWithExpr($input, $state)
    let $state := p:lookahead1W(203, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                                               '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                                               'contains' | 'count' | 'default' | 'descending' | 'div' |
                                                               'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                                               'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                                               'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' |
                                                               'where' | 'with' | 'words' | '|' | '||' | '}' | '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 92) then                     (: 'cast' :)
        let $state := p:consume(92, $input, $state)         (: 'cast' :)
        let $state := p:lookahead1W(33, $input, $state)     (: S^WS | ('(' ':') | 'as' :)
        let $state := p:consume(83, $input, $state)         (: 'as' :)
        let $state := p:lookahead1W(232, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-SingleType($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CastExpr"),
    $state
  )
};

(:~
 : Try parsing CastExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CastExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "CastExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-TransformWithExpr($input, $state)
    let $state := p:lookahead1W(203, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                                               '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                                               'contains' | 'count' | 'default' | 'descending' | 'div' |
                                                               'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                                               'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                                               'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' |
                                                               'where' | 'with' | 'words' | '|' | '||' | '}' | '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 92) then                     (: 'cast' :)
        let $state := p:consume(92, $input, $state)         (: 'cast' :)
        let $state := p:lookahead1W(33, $input, $state)     (: S^WS | ('(' ':') | 'as' :)
        let $state := p:consume(83, $input, $state)         (: 'as' :)
        let $state := p:lookahead1W(232, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-SingleType($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "CastExpr"),
    $state
  )
};

(:~
 : Parse CastableExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CastableExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CastableExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-CastExpr($input, $state)
    let $state := p:lookahead1W(201, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                                               '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'castable' | 'collation' |
                                                               'contains' | 'count' | 'default' | 'descending' | 'div' |
                                                               'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                                               'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                                               'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' |
                                                               'where' | 'with' | 'words' | '|' | '||' | '}' | '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 93) then                     (: 'castable' :)
        let $state := p:consume(93, $input, $state)         (: 'castable' :)
        let $state := p:lookahead1W(33, $input, $state)     (: S^WS | ('(' ':') | 'as' :)
        let $state := p:consume(83, $input, $state)         (: 'as' :)
        let $state := p:lookahead1W(232, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-SingleType($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CastableExpr"),
    $state
  )
};

(:~
 : Try parsing CastableExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CastableExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "CastableExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-CastExpr($input, $state)
    let $state := p:lookahead1W(201, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                                               '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'castable' | 'collation' |
                                                               'contains' | 'count' | 'default' | 'descending' | 'div' |
                                                               'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                                               'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                                               'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' |
                                                               'where' | 'with' | 'words' | '|' | '||' | '}' | '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 93) then                     (: 'castable' :)
        let $state := p:consume(93, $input, $state)         (: 'castable' :)
        let $state := p:lookahead1W(33, $input, $state)     (: S^WS | ('(' ':') | 'as' :)
        let $state := p:consume(83, $input, $state)         (: 'as' :)
        let $state := p:lookahead1W(232, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-SingleType($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "CastableExpr"),
    $state
  )
};

(:~
 : Parse TreatExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-TreatExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "TreatExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-CastableExpr($input, $state)
    let $state := p:lookahead1W(200, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                                               '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'collation' | 'contains' | 'count' |
                                                               'default' | 'descending' | 'div' | 'else' | 'empty' |
                                                               'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' |
                                                               'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' |
                                                               'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                                               'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                                               '||' | '}' | '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 238) then                    (: 'treat' :)
        let $state := p:consume(238, $input, $state)        (: 'treat' :)
        let $state := p:lookahead1W(33, $input, $state)     (: S^WS | ('(' ':') | 'as' :)
        let $state := p:consume(83, $input, $state)         (: 'as' :)
        let $state := p:lookahead1W(239, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-SequenceType($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "TreatExpr"),
    $state
  )
};

(:~
 : Try parsing TreatExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-TreatExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "TreatExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-CastableExpr($input, $state)
    let $state := p:lookahead1W(200, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                                               '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'collation' | 'contains' | 'count' |
                                                               'default' | 'descending' | 'div' | 'else' | 'empty' |
                                                               'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' |
                                                               'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' |
                                                               'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                                               'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                                               '||' | '}' | '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 238) then                    (: 'treat' :)
        let $state := p:consume(238, $input, $state)        (: 'treat' :)
        let $state := p:lookahead1W(33, $input, $state)     (: S^WS | ('(' ':') | 'as' :)
        let $state := p:consume(83, $input, $state)         (: 'as' :)
        let $state := p:lookahead1W(239, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-SequenceType($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "TreatExpr"),
    $state
  )
};

(:~
 : Parse InstanceofExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-InstanceofExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "InstanceofExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-TreatExpr($input, $state)
    let $state := p:lookahead1W(199, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                                               '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'collation' | 'contains' | 'count' |
                                                               'default' | 'descending' | 'div' | 'else' | 'empty' |
                                                               'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' |
                                                               'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' |
                                                               'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                                               'union' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                                               '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 156) then                    (: 'instance' :)
        let $state := p:consume(156, $input, $state)        (: 'instance' :)
        let $state := p:lookahead1W(59, $input, $state)     (: S^WS | ('(' ':') | 'of' :)
        let $state := p:consume(188, $input, $state)        (: 'of' :)
        let $state := p:lookahead1W(239, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-SequenceType($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "InstanceofExpr"),
    $state
  )
};

(:~
 : Try parsing InstanceofExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-InstanceofExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "InstanceofExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-TreatExpr($input, $state)
    let $state := p:lookahead1W(199, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                                               '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'collation' | 'contains' | 'count' |
                                                               'default' | 'descending' | 'div' | 'else' | 'empty' |
                                                               'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                                               'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' |
                                                               'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' |
                                                               'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                                               'union' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                                               '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 156) then                    (: 'instance' :)
        let $state := p:consume(156, $input, $state)        (: 'instance' :)
        let $state := p:lookahead1W(59, $input, $state)     (: S^WS | ('(' ':') | 'of' :)
        let $state := p:consume(188, $input, $state)        (: 'of' :)
        let $state := p:lookahead1W(239, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-SequenceType($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "InstanceofExpr"),
    $state
  )
};

(:~
 : Parse the 1st loop of production IntersectExceptExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-IntersectExceptExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(197, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                                               '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'collation' | 'contains' | 'count' |
                                                               'default' | 'descending' | 'div' | 'else' | 'empty' |
                                                               'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                                               'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                                               'order' | 'paragraphs' | 'return' | 'satisfies' |
                                                               'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                                               'union' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                                               '}`' :)
    return
      if ($state[$p:l1] != 130                              (: 'except' :)
      and $state[$p:l1] != 157) then                        (: 'intersect' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 157) then                (: 'intersect' :)
            let $state := p:consume(157, $input, $state)    (: 'intersect' :)
            return $state
          else
            let $state := p:consume(130, $input, $state)    (: 'except' :)
            return $state
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-InstanceofExpr($input, $state)
        return p:parse-IntersectExceptExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production IntersectExceptExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-IntersectExceptExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(197, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                                               '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'collation' | 'contains' | 'count' |
                                                               'default' | 'descending' | 'div' | 'else' | 'empty' |
                                                               'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                                               'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                                               'order' | 'paragraphs' | 'return' | 'satisfies' |
                                                               'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                                               'union' | 'where' | 'with' | 'words' | '|' | '||' | '}' |
                                                               '}`' :)
    return
      if ($state[$p:l1] != 130                              (: 'except' :)
      and $state[$p:l1] != 157) then                        (: 'intersect' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 157) then                (: 'intersect' :)
            let $state := p:consume(157, $input, $state)    (: 'intersect' :)
            return $state
          else
            let $state := p:consume(130, $input, $state)    (: 'except' :)
            return $state
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-InstanceofExpr($input, $state)
        return p:try-IntersectExceptExpr-1($input, $state)
};

(:~
 : Parse IntersectExceptExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-IntersectExceptExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "IntersectExceptExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-InstanceofExpr($input, $state)
    let $state := p:parse-IntersectExceptExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "IntersectExceptExpr"),
    $state
  )
};

(:~
 : Try parsing IntersectExceptExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-IntersectExceptExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "IntersectExceptExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-InstanceofExpr($input, $state)
    let $state := p:try-IntersectExceptExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "IntersectExceptExpr"),
    $state
  )
};

(:~
 : Parse the 1st loop of production UnionExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-UnionExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 243                                (: 'union' :)
    and $state[$p:l1] != 266) then                          (: '|' :)
      $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 243) then                  (: 'union' :)
          let $state := p:consume(243, $input, $state)      (: 'union' :)
          return $state
        else
          let $state := p:consume(266, $input, $state)      (: '|' :)
          return $state
      let $state := p:lookahead1W(245, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-IntersectExceptExpr($input, $state)
      return p:parse-UnionExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production UnionExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-UnionExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 243                                (: 'union' :)
    and $state[$p:l1] != 266) then                          (: '|' :)
      $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 243) then                  (: 'union' :)
          let $state := p:consume(243, $input, $state)      (: 'union' :)
          return $state
        else
          let $state := p:consume(266, $input, $state)      (: '|' :)
          return $state
      let $state := p:lookahead1W(245, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:try-IntersectExceptExpr($input, $state)
      return p:try-UnionExpr-1($input, $state)
};

(:~
 : Parse UnionExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-UnionExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "UnionExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-IntersectExceptExpr($input, $state)
    let $state := p:parse-UnionExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "UnionExpr"),
    $state
  )
};

(:~
 : Try parsing UnionExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-UnionExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "UnionExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-IntersectExceptExpr($input, $state)
    let $state := p:try-UnionExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "UnionExpr"),
    $state
  )
};

(:~
 : Parse the 1st loop of production MultiplicativeExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-MultiplicativeExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 38                                 (: '*' :)
    and $state[$p:l1] != 117                                (: 'div' :)
    and $state[$p:l1] != 148                                (: 'idiv' :)
    and $state[$p:l1] != 173) then                          (: 'mod' :)
      $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 38) then                   (: '*' :)
          let $state := p:consume(38, $input, $state)       (: '*' :)
          return $state
        else if ($state[$p:l1] = 117) then                  (: 'div' :)
          let $state := p:consume(117, $input, $state)      (: 'div' :)
          return $state
        else if ($state[$p:l1] = 148) then                  (: 'idiv' :)
          let $state := p:consume(148, $input, $state)      (: 'idiv' :)
          return $state
        else
          let $state := p:consume(173, $input, $state)      (: 'mod' :)
          return $state
      let $state := p:lookahead1W(245, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-UnionExpr($input, $state)
      return p:parse-MultiplicativeExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production MultiplicativeExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-MultiplicativeExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 38                                 (: '*' :)
    and $state[$p:l1] != 117                                (: 'div' :)
    and $state[$p:l1] != 148                                (: 'idiv' :)
    and $state[$p:l1] != 173) then                          (: 'mod' :)
      $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 38) then                   (: '*' :)
          let $state := p:consume(38, $input, $state)       (: '*' :)
          return $state
        else if ($state[$p:l1] = 117) then                  (: 'div' :)
          let $state := p:consume(117, $input, $state)      (: 'div' :)
          return $state
        else if ($state[$p:l1] = 148) then                  (: 'idiv' :)
          let $state := p:consume(148, $input, $state)      (: 'idiv' :)
          return $state
        else
          let $state := p:consume(173, $input, $state)      (: 'mod' :)
          return $state
      let $state := p:lookahead1W(245, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:try-UnionExpr($input, $state)
      return p:try-MultiplicativeExpr-1($input, $state)
};

(:~
 : Parse MultiplicativeExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-MultiplicativeExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "MultiplicativeExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-UnionExpr($input, $state)
    let $state := p:parse-MultiplicativeExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "MultiplicativeExpr"),
    $state
  )
};

(:~
 : Try parsing MultiplicativeExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-MultiplicativeExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "MultiplicativeExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-UnionExpr($input, $state)
    let $state := p:try-MultiplicativeExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "MultiplicativeExpr"),
    $state
  )
};

(:~
 : Parse the 1st loop of production AdditiveExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AdditiveExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 39                                 (: '+' :)
    and $state[$p:l1] != 41) then                           (: '-' :)
      $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 39) then                   (: '+' :)
          let $state := p:consume(39, $input, $state)       (: '+' :)
          return $state
        else
          let $state := p:consume(41, $input, $state)       (: '-' :)
          return $state
      let $state := p:lookahead1W(245, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-MultiplicativeExpr($input, $state)
      return p:parse-AdditiveExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production AdditiveExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-AdditiveExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 39                                 (: '+' :)
    and $state[$p:l1] != 41) then                           (: '-' :)
      $state
    else
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 39) then                   (: '+' :)
          let $state := p:consume(39, $input, $state)       (: '+' :)
          return $state
        else
          let $state := p:consume(41, $input, $state)       (: '-' :)
          return $state
      let $state := p:lookahead1W(245, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:try-MultiplicativeExpr($input, $state)
      return p:try-AdditiveExpr-1($input, $state)
};

(:~
 : Parse AdditiveExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AdditiveExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "AdditiveExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-MultiplicativeExpr($input, $state)
    let $state := p:parse-AdditiveExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "AdditiveExpr"),
    $state
  )
};

(:~
 : Try parsing AdditiveExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-AdditiveExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "AdditiveExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-MultiplicativeExpr($input, $state)
    let $state := p:try-AdditiveExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "AdditiveExpr"),
    $state
  )
};

(:~
 : Parse RangeExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-RangeExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "RangeExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-AdditiveExpr($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 236) then                    (: 'to' :)
        let $state := p:consume(236, $input, $state)        (: 'to' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-AdditiveExpr($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "RangeExpr"),
    $state
  )
};

(:~
 : Try parsing RangeExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-RangeExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "RangeExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-AdditiveExpr($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 236) then                    (: 'to' :)
        let $state := p:consume(236, $input, $state)        (: 'to' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-AdditiveExpr($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "RangeExpr"),
    $state
  )
};

(:~
 : Parse the 1st loop of production StringConcatExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-StringConcatExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 267) then                          (: '||' :)
      $state
    else
      let $state := p:consume(267, $input, $state)          (: '||' :)
      let $state := p:lookahead1W(245, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-RangeExpr($input, $state)
      return p:parse-StringConcatExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production StringConcatExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-StringConcatExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 267) then                          (: '||' :)
      $state
    else
      let $state := p:consume(267, $input, $state)          (: '||' :)
      let $state := p:lookahead1W(245, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:try-RangeExpr($input, $state)
      return p:try-StringConcatExpr-1($input, $state)
};

(:~
 : Parse StringConcatExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-StringConcatExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "StringConcatExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-RangeExpr($input, $state)
    let $state := p:parse-StringConcatExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "StringConcatExpr"),
    $state
  )
};

(:~
 : Try parsing StringConcatExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-StringConcatExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "StringConcatExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-RangeExpr($input, $state)
    let $state := p:try-StringConcatExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "StringConcatExpr"),
    $state
  )
};

(:~
 : Parse FTContainsExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTContainsExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTContainsExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-StringConcatExpr($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 99) then                     (: 'contains' :)
        let $state := p:consume(99, $input, $state)         (: 'contains' :)
        let $state := p:lookahead1W(69, $input, $state)     (: S^WS | ('(' ':') | 'text' :)
        let $state := p:consume(232, $input, $state)        (: 'text' :)
        let $state := p:lookahead1W(154, $input, $state)    (: StringLiteral | S^WS | '(' | '(#' | ('(' ':') | 'ftnot' |
                                                               '{' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTSelection($input, $state)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 259) then                (: 'without' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-FTIgnoreOption($input, $state)
            return $state
          else
            $state
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTContainsExpr"),
    $state
  )
};

(:~
 : Try parsing FTContainsExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTContainsExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTContainsExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-StringConcatExpr($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 99) then                     (: 'contains' :)
        let $state := p:consume(99, $input, $state)         (: 'contains' :)
        let $state := p:lookahead1W(69, $input, $state)     (: S^WS | ('(' ':') | 'text' :)
        let $state := p:consume(232, $input, $state)        (: 'text' :)
        let $state := p:lookahead1W(154, $input, $state)    (: StringLiteral | S^WS | '(' | '(#' | ('(' ':') | 'ftnot' |
                                                               '{' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTSelection($input, $state)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 259) then                (: 'without' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-FTIgnoreOption($input, $state)
            return $state
          else
            $state
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTContainsExpr"),
    $state
  )
};

(:~
 : Parse ComparisonExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ComparisonExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ComparisonExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-FTContainsExpr($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 27                           (: '!=' :)
            or $state[$p:l1] = 53                           (: '<' :)
            or $state[$p:l1] = 57                           (: '<<' :)
            or $state[$p:l1] = 58                           (: '<=' :)
            or $state[$p:l1] = 60                           (: '=' :)
            or $state[$p:l1] = 62                           (: '>' :)
            or $state[$p:l1] = 63                           (: '>=' :)
            or $state[$p:l1] = 64                           (: '>>' :)
            or $state[$p:l1] = 127                          (: 'eq' :)
            or $state[$p:l1] = 143                          (: 'ge' :)
            or $state[$p:l1] = 147                          (: 'gt' :)
            or $state[$p:l1] = 160                          (: 'is' :)
            or $state[$p:l1] = 165                          (: 'le' :)
            or $state[$p:l1] = 170                          (: 'lt' :)
            or $state[$p:l1] = 179) then                    (: 'ne' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 127                      (: 'eq' :)
                or $state[$p:l1] = 143                      (: 'ge' :)
                or $state[$p:l1] = 147                      (: 'gt' :)
                or $state[$p:l1] = 165                      (: 'le' :)
                or $state[$p:l1] = 170                      (: 'lt' :)
                or $state[$p:l1] = 179) then                (: 'ne' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-ValueComp($input, $state)
            return $state
          else if ($state[$p:l1] = 57                       (: '<<' :)
                or $state[$p:l1] = 64                       (: '>>' :)
                or $state[$p:l1] = 160) then                (: 'is' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-NodeComp($input, $state)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-GeneralComp($input, $state)
            return $state
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTContainsExpr($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ComparisonExpr"),
    $state
  )
};

(:~
 : Try parsing ComparisonExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ComparisonExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ComparisonExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-FTContainsExpr($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 27                           (: '!=' :)
            or $state[$p:l1] = 53                           (: '<' :)
            or $state[$p:l1] = 57                           (: '<<' :)
            or $state[$p:l1] = 58                           (: '<=' :)
            or $state[$p:l1] = 60                           (: '=' :)
            or $state[$p:l1] = 62                           (: '>' :)
            or $state[$p:l1] = 63                           (: '>=' :)
            or $state[$p:l1] = 64                           (: '>>' :)
            or $state[$p:l1] = 127                          (: 'eq' :)
            or $state[$p:l1] = 143                          (: 'ge' :)
            or $state[$p:l1] = 147                          (: 'gt' :)
            or $state[$p:l1] = 160                          (: 'is' :)
            or $state[$p:l1] = 165                          (: 'le' :)
            or $state[$p:l1] = 170                          (: 'lt' :)
            or $state[$p:l1] = 179) then                    (: 'ne' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 127                      (: 'eq' :)
                or $state[$p:l1] = 143                      (: 'ge' :)
                or $state[$p:l1] = 147                      (: 'gt' :)
                or $state[$p:l1] = 165                      (: 'le' :)
                or $state[$p:l1] = 170                      (: 'lt' :)
                or $state[$p:l1] = 179) then                (: 'ne' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-ValueComp($input, $state)
            return $state
          else if ($state[$p:l1] = 57                       (: '<<' :)
                or $state[$p:l1] = 64                       (: '>>' :)
                or $state[$p:l1] = 160) then                (: 'is' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-NodeComp($input, $state)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-GeneralComp($input, $state)
            return $state
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTContainsExpr($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ComparisonExpr"),
    $state
  )
};

(:~
 : Parse the 1st loop of production AndExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AndExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 80) then                           (: 'and' :)
      $state
    else
      let $state := p:consume(80, $input, $state)           (: 'and' :)
      let $state := p:lookahead1W(245, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-ComparisonExpr($input, $state)
      return p:parse-AndExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production AndExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-AndExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 80) then                           (: 'and' :)
      $state
    else
      let $state := p:consume(80, $input, $state)           (: 'and' :)
      let $state := p:lookahead1W(245, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:try-ComparisonExpr($input, $state)
      return p:try-AndExpr-1($input, $state)
};

(:~
 : Parse AndExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AndExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "AndExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ComparisonExpr($input, $state)
    let $state := p:parse-AndExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "AndExpr"),
    $state
  )
};

(:~
 : Try parsing AndExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-AndExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "AndExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ComparisonExpr($input, $state)
    let $state := p:try-AndExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "AndExpr"),
    $state
  )
};

(:~
 : Parse the 1st loop of production OrExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-OrExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 191) then                          (: 'or' :)
      $state
    else
      let $state := p:consume(191, $input, $state)          (: 'or' :)
      let $state := p:lookahead1W(245, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:parse-AndExpr($input, $state)
      return p:parse-OrExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production OrExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-OrExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    if ($state[$p:l1] != 191) then                          (: 'or' :)
      $state
    else
      let $state := p:consume(191, $input, $state)          (: 'or' :)
      let $state := p:lookahead1W(245, $input, $state)      (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else
          p:try-AndExpr($input, $state)
      return p:try-OrExpr-1($input, $state)
};

(:~
 : Parse OrExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-OrExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "OrExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-AndExpr($input, $state)
    let $state := p:parse-OrExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "OrExpr"),
    $state
  )
};

(:~
 : Try parsing OrExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-OrExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "OrExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-AndExpr($input, $state)
    let $state := p:try-OrExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "OrExpr"),
    $state
  )
};

(:~
 : Parse CopyModifySpec.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CopyModifySpec($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CopyModifySpec"),
  let $state :=
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-VarName($input, $state)
    let $state := p:lookahead1W(30, $input, $state)         (: S^WS | ('(' ':') | ':=' :)
    let $state := p:consume(51, $input, $state)             (: ':=' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CopyModifySpec"),
    $state
  )
};

(:~
 : Try parsing CopyModifySpec.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CopyModifySpec($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "CopyModifySpec"),
  let $state :=
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-VarName($input, $state)
    let $state := p:lookahead1W(30, $input, $state)         (: S^WS | ('(' ':') | ':=' :)
    let $state := p:consume(51, $input, $state)             (: ':=' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "CopyModifySpec"),
    $state
  )
};

(:~
 : Parse the 1st loop of production CopyModifyExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CopyModifyExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(96, $input, $state)         (: S^WS | ('(' ':') | ',' | 'modify' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(23, $input, $state)     (: S^WS | '$' | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-CopyModifySpec($input, $state)
        return p:parse-CopyModifyExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production CopyModifyExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CopyModifyExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(96, $input, $state)         (: S^WS | ('(' ':') | ',' | 'modify' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(23, $input, $state)     (: S^WS | '$' | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-CopyModifySpec($input, $state)
        return p:try-CopyModifyExpr-1($input, $state)
};

(:~
 : Parse CopyModifyExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CopyModifyExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CopyModifyExpr"),
  let $state :=
    let $state := p:consume(102, $input, $state)            (: 'copy' :)
    let $state := p:lookahead1W(23, $input, $state)         (: S^WS | '$' | ('(' ':') :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-CopyModifySpec($input, $state)
    let $state := p:parse-CopyModifyExpr-1($input, $state)
    let $state := p:consume(174, $input, $state)            (: 'modify' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    let $state := p:lookahead1W(63, $input, $state)         (: S^WS | ('(' ':') | 'return' :)
    let $state := p:consume(210, $input, $state)            (: 'return' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CopyModifyExpr"),
    $state
  )
};

(:~
 : Try parsing CopyModifyExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CopyModifyExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "CopyModifyExpr"),
  let $state :=
    let $state := p:consume(102, $input, $state)            (: 'copy' :)
    let $state := p:lookahead1W(23, $input, $state)         (: S^WS | '$' | ('(' ':') :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-CopyModifySpec($input, $state)
    let $state := p:try-CopyModifyExpr-1($input, $state)
    let $state := p:consume(174, $input, $state)            (: 'modify' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    let $state := p:lookahead1W(63, $input, $state)         (: S^WS | ('(' ':') | 'return' :)
    let $state := p:consume(210, $input, $state)            (: 'return' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "CopyModifyExpr"),
    $state
  )
};

(:~
 : Parse KeySpecifier.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-KeySpecifier($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "KeySpecifier"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 1) then                      (: IntegerLiteral :)
        let $state := p:consume(1, $input, $state)          (: IntegerLiteral :)
        return $state
      else if ($state[$p:l1] = 34) then                     (: '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ParenthesizedExpr($input, $state)
        return $state
      else if ($state[$p:l1] = 38) then                     (: '*' :)
        let $state := p:consume(38, $input, $state)         (: '*' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-NCName($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "KeySpecifier"),
    $state
  )
};

(:~
 : Try parsing KeySpecifier.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-KeySpecifier($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "KeySpecifier"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 1) then                      (: IntegerLiteral :)
        let $state := p:consume(1, $input, $state)          (: IntegerLiteral :)
        return $state
      else if ($state[$p:l1] = 34) then                     (: '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ParenthesizedExpr($input, $state)
        return $state
      else if ($state[$p:l1] = 38) then                     (: '*' :)
        let $state := p:consume(38, $input, $state)         (: '*' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-NCName($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "KeySpecifier"),
    $state
  )
};

(:~
 : Parse UnaryLookup.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-UnaryLookup($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "UnaryLookup"),
  let $state :=
    let $state := p:consume(65, $input, $state)             (: '?' :)
    let $state := p:lookahead1W(180, $input, $state)        (: IntegerLiteral | NCName^Token | S^WS | '(' | ('(' ':') |
                                                               '*' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                                               'castable' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                                               'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                                               'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                                               'union' | 'where' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-KeySpecifier($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "UnaryLookup"),
    $state
  )
};

(:~
 : Try parsing UnaryLookup.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-UnaryLookup($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "UnaryLookup"),
  let $state :=
    let $state := p:consume(65, $input, $state)             (: '?' :)
    let $state := p:lookahead1W(180, $input, $state)        (: IntegerLiteral | NCName^Token | S^WS | '(' | ('(' ':') |
                                                               '*' | 'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                                               'castable' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                                               'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                                               'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                                               'union' | 'where' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-KeySpecifier($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "UnaryLookup"),
    $state
  )
};

(:~
 : Parse StringConstructorInterpolation.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-StringConstructorInterpolation($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "StringConstructorInterpolation"),
  let $state :=
    let $state := p:consume(74, $input, $state)             (: '`{' :)
    let $state := p:lookahead1W(250, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' | '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 269) then                   (: '}`' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Expr($input, $state)
        return $state
      else
        $state
    let $state := p:consume(269, $input, $state)            (: '}`' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "StringConstructorInterpolation"),
    $state
  )
};

(:~
 : Try parsing StringConstructorInterpolation.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-StringConstructorInterpolation($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "StringConstructorInterpolation"),
  let $state :=
    let $state := p:consume(74, $input, $state)             (: '`{' :)
    let $state := p:lookahead1W(250, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' | '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 269) then                   (: '}`' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-Expr($input, $state)
        return $state
      else
        $state
    let $state := p:consume(269, $input, $state)            (: '}`' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "StringConstructorInterpolation"),
    $state
  )
};

(:~
 : Parse the 1st loop of production StringConstructorContent (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-StringConstructorContent-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(17, $input, $state)          (: ']``' | '`{' :)
    return
      if ($state[$p:l1] != 74) then                         (: '`{' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-StringConstructorInterpolation($input, $state)
        let $state := p:lookahead1(1, $input, $state)       (: StringConstructorChars :)
        let $state := p:consume(16, $input, $state)         (: StringConstructorChars :)
        return p:parse-StringConstructorContent-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production StringConstructorContent (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-StringConstructorContent-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(17, $input, $state)          (: ']``' | '`{' :)
    return
      if ($state[$p:l1] != 74) then                         (: '`{' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-StringConstructorInterpolation($input, $state)
        let $state := p:lookahead1(1, $input, $state)       (: StringConstructorChars :)
        let $state := p:consume(16, $input, $state)         (: StringConstructorChars :)
        return p:try-StringConstructorContent-1($input, $state)
};

(:~
 : Parse StringConstructorContent.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-StringConstructorContent($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "StringConstructorContent"),
  let $state :=
    let $state := p:lookahead1(1, $input, $state)           (: StringConstructorChars :)
    let $state := p:consume(16, $input, $state)             (: StringConstructorChars :)
    let $state := p:parse-StringConstructorContent-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "StringConstructorContent"),
    $state
  )
};

(:~
 : Try parsing StringConstructorContent.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-StringConstructorContent($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "StringConstructorContent"),
  let $state :=
    let $state := p:lookahead1(1, $input, $state)           (: StringConstructorChars :)
    let $state := p:consume(16, $input, $state)             (: StringConstructorChars :)
    let $state := p:try-StringConstructorContent-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "StringConstructorContent"),
    $state
  )
};

(:~
 : Parse StringConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-StringConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "StringConstructor"),
  let $state :=
    let $state := p:consume(73, $input, $state)             (: '``[' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-StringConstructorContent($input, $state)
    let $state := p:consume(72, $input, $state)             (: ']``' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "StringConstructor"),
    $state
  )
};

(:~
 : Try parsing StringConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-StringConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "StringConstructor"),
  let $state :=
    let $state := p:consume(73, $input, $state)             (: '``[' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-StringConstructorContent($input, $state)
    let $state := p:consume(72, $input, $state)             (: ']``' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "StringConstructor"),
    $state
  )
};

(:~
 : Parse CurlyArrayConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CurlyArrayConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CurlyArrayConstructor"),
  let $state :=
    let $state := p:consume(82, $input, $state)             (: 'array' :)
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EnclosedExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CurlyArrayConstructor"),
    $state
  )
};

(:~
 : Try parsing CurlyArrayConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CurlyArrayConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "CurlyArrayConstructor"),
  let $state :=
    let $state := p:consume(82, $input, $state)             (: 'array' :)
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EnclosedExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "CurlyArrayConstructor"),
    $state
  )
};

(:~
 : Parse the 1st loop of production SquareArrayConstructor (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SquareArrayConstructor-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(95, $input, $state)         (: S^WS | ('(' ':') | ',' | ']' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ExprSingle($input, $state)
        return p:parse-SquareArrayConstructor-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production SquareArrayConstructor (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-SquareArrayConstructor-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(95, $input, $state)         (: S^WS | ('(' ':') | ',' | ']' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ExprSingle($input, $state)
        return p:try-SquareArrayConstructor-1($input, $state)
};

(:~
 : Parse SquareArrayConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SquareArrayConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "SquareArrayConstructor"),
  let $state :=
    let $state := p:consume(69, $input, $state)             (: '[' :)
    let $state := p:lookahead1W(248, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | ']' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 70) then                    (: ']' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ExprSingle($input, $state)
        let $state := p:parse-SquareArrayConstructor-1($input, $state)
        return $state
      else
        $state
    let $state := p:consume(70, $input, $state)             (: ']' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "SquareArrayConstructor"),
    $state
  )
};

(:~
 : Try parsing SquareArrayConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-SquareArrayConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "SquareArrayConstructor"),
  let $state :=
    let $state := p:consume(69, $input, $state)             (: '[' :)
    let $state := p:lookahead1W(248, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | ']' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 70) then                    (: ']' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ExprSingle($input, $state)
        let $state := p:try-SquareArrayConstructor-1($input, $state)
        return $state
      else
        $state
    let $state := p:consume(70, $input, $state)             (: ']' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "SquareArrayConstructor"),
    $state
  )
};

(:~
 : Parse ArrayConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ArrayConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ArrayConstructor"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 69) then                     (: '[' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-SquareArrayConstructor($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-CurlyArrayConstructor($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ArrayConstructor"),
    $state
  )
};

(:~
 : Try parsing ArrayConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ArrayConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ArrayConstructor"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 69) then                     (: '[' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-SquareArrayConstructor($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-CurlyArrayConstructor($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ArrayConstructor"),
    $state
  )
};

(:~
 : Parse MapValueExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-MapValueExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "MapValueExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "MapValueExpr"),
    $state
  )
};

(:~
 : Try parsing MapValueExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-MapValueExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "MapValueExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "MapValueExpr"),
    $state
  )
};

(:~
 : Parse MapKeyExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-MapKeyExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "MapKeyExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "MapKeyExpr"),
    $state
  )
};

(:~
 : Try parsing MapKeyExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-MapKeyExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "MapKeyExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "MapKeyExpr"),
    $state
  )
};

(:~
 : Parse MapConstructorEntry.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-MapConstructorEntry($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "MapConstructorEntry"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-MapKeyExpr($input, $state)
    let $state := p:lookahead1W(28, $input, $state)         (: S^WS | ('(' ':') | ':' :)
    let $state := p:consume(48, $input, $state)             (: ':' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-MapValueExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "MapConstructorEntry"),
    $state
  )
};

(:~
 : Try parsing MapConstructorEntry.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-MapConstructorEntry($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "MapConstructorEntry"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-MapKeyExpr($input, $state)
    let $state := p:lookahead1W(28, $input, $state)         (: S^WS | ('(' ':') | ':' :)
    let $state := p:consume(48, $input, $state)             (: ':' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-MapValueExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "MapConstructorEntry"),
    $state
  )
};

(:~
 : Parse the 1st loop of production MapConstructor (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-MapConstructor-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(98, $input, $state)         (: S^WS | ('(' ':') | ',' | '}' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-MapConstructorEntry($input, $state)
        return p:parse-MapConstructor-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production MapConstructor (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-MapConstructor-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(98, $input, $state)         (: S^WS | ('(' ':') | ',' | '}' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-MapConstructorEntry($input, $state)
        return p:try-MapConstructor-1($input, $state)
};

(:~
 : Parse MapConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-MapConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "MapConstructor"),
  let $state :=
    let $state := p:consume(171, $input, $state)            (: 'map' :)
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state := p:consume(264, $input, $state)            (: '{' :)
    let $state := p:lookahead1W(249, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' | '}' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 268) then                   (: '}' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-MapConstructorEntry($input, $state)
        let $state := p:parse-MapConstructor-1($input, $state)
        return $state
      else
        $state
    let $state := p:consume(268, $input, $state)            (: '}' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "MapConstructor"),
    $state
  )
};

(:~
 : Try parsing MapConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-MapConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "MapConstructor"),
  let $state :=
    let $state := p:consume(171, $input, $state)            (: 'map' :)
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state := p:consume(264, $input, $state)            (: '{' :)
    let $state := p:lookahead1W(249, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' | '}' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 268) then                   (: '}' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-MapConstructorEntry($input, $state)
        let $state := p:try-MapConstructor-1($input, $state)
        return $state
      else
        $state
    let $state := p:consume(268, $input, $state)            (: '}' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "MapConstructor"),
    $state
  )
};

(:~
 : Parse FunctionBody.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FunctionBody($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FunctionBody"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EnclosedExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FunctionBody"),
    $state
  )
};

(:~
 : Try parsing FunctionBody.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FunctionBody($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FunctionBody"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EnclosedExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FunctionBody"),
    $state
  )
};

(:~
 : Parse Param.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Param($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "Param"),
  let $state :=
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EQName($input, $state)
    let $state := p:lookahead1W(137, $input, $state)        (: S^WS | ('(' ':') | ')' | ',' | 'as' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 83) then                     (: 'as' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-TypeDeclaration($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "Param"),
    $state
  )
};

(:~
 : Try parsing Param.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-Param($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "Param"),
  let $state :=
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EQName($input, $state)
    let $state := p:lookahead1W(137, $input, $state)        (: S^WS | ('(' ':') | ')' | ',' | 'as' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 83) then                     (: 'as' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-TypeDeclaration($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "Param"),
    $state
  )
};

(:~
 : Parse the 1st loop of production ParamList (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ParamList-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(92, $input, $state)         (: S^WS | ('(' ':') | ')' | ',' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(23, $input, $state)     (: S^WS | '$' | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Param($input, $state)
        return p:parse-ParamList-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production ParamList (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ParamList-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(92, $input, $state)         (: S^WS | ('(' ':') | ')' | ',' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(23, $input, $state)     (: S^WS | '$' | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-Param($input, $state)
        return p:try-ParamList-1($input, $state)
};

(:~
 : Parse ParamList.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ParamList($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ParamList"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Param($input, $state)
    let $state := p:parse-ParamList-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ParamList"),
    $state
  )
};

(:~
 : Try parsing ParamList.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ParamList($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ParamList"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-Param($input, $state)
    let $state := p:try-ParamList-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ParamList"),
    $state
  )
};

(:~
 : Parse the 1st loop of production InlineFunctionExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-InlineFunctionExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(89, $input, $state)         (: S^WS | '%' | ('(' ':') | 'function' :)
    return
      if ($state[$p:l1] != 32) then                         (: '%' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Annotation($input, $state)
        return p:parse-InlineFunctionExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production InlineFunctionExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-InlineFunctionExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(89, $input, $state)         (: S^WS | '%' | ('(' ':') | 'function' :)
    return
      if ($state[$p:l1] != 32) then                         (: '%' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-Annotation($input, $state)
        return p:try-InlineFunctionExpr-1($input, $state)
};

(:~
 : Parse InlineFunctionExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-InlineFunctionExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "InlineFunctionExpr"),
  let $state :=
    let $state := p:parse-InlineFunctionExpr-1($input, $state)
    let $state := p:consume(142, $input, $state)            (: 'function' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(86, $input, $state)         (: S^WS | '$' | ('(' ':') | ')' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 31) then                     (: '$' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ParamList($input, $state)
        return $state
      else
        $state
    let $state := p:consume(37, $input, $state)             (: ')' :)
    let $state := p:lookahead1W(105, $input, $state)        (: S^WS | ('(' ':') | 'as' | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 83) then                     (: 'as' :)
        let $state := p:consume(83, $input, $state)         (: 'as' :)
        let $state := p:lookahead1W(239, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-SequenceType($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-FunctionBody($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "InlineFunctionExpr"),
    $state
  )
};

(:~
 : Try parsing InlineFunctionExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-InlineFunctionExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "InlineFunctionExpr"),
  let $state :=
    let $state := p:try-InlineFunctionExpr-1($input, $state)
    let $state := p:consume(142, $input, $state)            (: 'function' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(86, $input, $state)         (: S^WS | '$' | ('(' ':') | ')' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 31) then                     (: '$' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ParamList($input, $state)
        return $state
      else
        $state
    let $state := p:consume(37, $input, $state)             (: ')' :)
    let $state := p:lookahead1W(105, $input, $state)        (: S^WS | ('(' ':') | 'as' | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 83) then                     (: 'as' :)
        let $state := p:consume(83, $input, $state)         (: 'as' :)
        let $state := p:lookahead1W(239, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-SequenceType($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-FunctionBody($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "InlineFunctionExpr"),
    $state
  )
};

(:~
 : Parse NamedFunctionRef.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-NamedFunctionRef($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "NamedFunctionRef"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EQName($input, $state)
    let $state := p:lookahead1W(22, $input, $state)         (: S^WS | '#' | ('(' ':') :)
    let $state := p:consume(29, $input, $state)             (: '#' :)
    let $state := p:lookahead1W(18, $input, $state)         (: IntegerLiteral | S^WS | ('(' ':') :)
    let $state := p:consume(1, $input, $state)              (: IntegerLiteral :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "NamedFunctionRef"),
    $state
  )
};

(:~
 : Try parsing NamedFunctionRef.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-NamedFunctionRef($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "NamedFunctionRef"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EQName($input, $state)
    let $state := p:lookahead1W(22, $input, $state)         (: S^WS | '#' | ('(' ':') :)
    let $state := p:consume(29, $input, $state)             (: '#' :)
    let $state := p:lookahead1W(18, $input, $state)         (: IntegerLiteral | S^WS | ('(' ':') :)
    let $state := p:consume(1, $input, $state)              (: IntegerLiteral :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "NamedFunctionRef"),
    $state
  )
};

(:~
 : Parse FunctionItemExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FunctionItemExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FunctionItemExpr"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 142) then                        (: 'function' :)
        let $state := p:lookahead2W(84, $input, $state)     (: S^WS | '#' | '(' | ('(' ':') :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 32                           (: '%' :)
            or $state[$p:lk] = 17550) then                  (: 'function' '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-InlineFunctionExpr($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-NamedFunctionRef($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FunctionItemExpr"),
    $state
  )
};

(:~
 : Try parsing FunctionItemExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FunctionItemExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FunctionItemExpr"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 142) then                        (: 'function' :)
        let $state := p:lookahead2W(84, $input, $state)     (: S^WS | '#' | '(' | ('(' ':') :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 32                           (: '%' :)
            or $state[$p:lk] = 17550) then                  (: 'function' '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-InlineFunctionExpr($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-NamedFunctionRef($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FunctionItemExpr"),
    $state
  )
};

(:~
 : Parse CompPIConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CompPIConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CompPIConstructor"),
  let $state :=
    let $state := p:consume(206, $input, $state)            (: 'processing-instruction' :)
    let $state := p:lookahead1W(177, $input, $state)        (: NCName^Token | S^WS | ('(' ':') | 'and' | 'as' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 264) then                    (: '{' :)
        let $state := p:consume(264, $input, $state)        (: '{' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Expr($input, $state)
        let $state := p:consume(268, $input, $state)        (: '}' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-NCName($input, $state)
        return $state
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EnclosedExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CompPIConstructor"),
    $state
  )
};

(:~
 : Try parsing CompPIConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CompPIConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "CompPIConstructor"),
  let $state :=
    let $state := p:consume(206, $input, $state)            (: 'processing-instruction' :)
    let $state := p:lookahead1W(177, $input, $state)        (: NCName^Token | S^WS | ('(' ':') | 'and' | 'as' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 264) then                    (: '{' :)
        let $state := p:consume(264, $input, $state)        (: '{' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-Expr($input, $state)
        let $state := p:consume(268, $input, $state)        (: '}' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-NCName($input, $state)
        return $state
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EnclosedExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "CompPIConstructor"),
    $state
  )
};

(:~
 : Parse CompCommentConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CompCommentConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CompCommentConstructor"),
  let $state :=
    let $state := p:consume(97, $input, $state)             (: 'comment' :)
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EnclosedExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CompCommentConstructor"),
    $state
  )
};

(:~
 : Try parsing CompCommentConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CompCommentConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "CompCommentConstructor"),
  let $state :=
    let $state := p:consume(97, $input, $state)             (: 'comment' :)
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EnclosedExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "CompCommentConstructor"),
    $state
  )
};

(:~
 : Parse CompTextConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CompTextConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CompTextConstructor"),
  let $state :=
    let $state := p:consume(232, $input, $state)            (: 'text' :)
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EnclosedExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CompTextConstructor"),
    $state
  )
};

(:~
 : Try parsing CompTextConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CompTextConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "CompTextConstructor"),
  let $state :=
    let $state := p:consume(232, $input, $state)            (: 'text' :)
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EnclosedExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "CompTextConstructor"),
    $state
  )
};

(:~
 : Parse URIExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-URIExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "URIExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Expr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "URIExpr"),
    $state
  )
};

(:~
 : Try parsing URIExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-URIExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "URIExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-Expr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "URIExpr"),
    $state
  )
};

(:~
 : Parse PrefixExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-PrefixExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "PrefixExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Expr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "PrefixExpr"),
    $state
  )
};

(:~
 : Try parsing PrefixExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-PrefixExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "PrefixExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-Expr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "PrefixExpr"),
    $state
  )
};

(:~
 : Parse Prefix.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Prefix($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "Prefix"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-NCName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "Prefix"),
    $state
  )
};

(:~
 : Try parsing Prefix.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-Prefix($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "Prefix"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-NCName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "Prefix"),
    $state
  )
};

(:~
 : Parse CompNamespaceConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CompNamespaceConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CompNamespaceConstructor"),
  let $state :=
    let $state := p:consume(177, $input, $state)            (: 'namespace' :)
    let $state := p:lookahead1W(177, $input, $state)        (: NCName^Token | S^WS | ('(' ':') | 'and' | 'as' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 264) then                    (: '{' :)
        let $state := p:consume(264, $input, $state)        (: '{' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-PrefixExpr($input, $state)
        let $state := p:consume(268, $input, $state)        (: '}' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Prefix($input, $state)
        return $state
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state := p:consume(264, $input, $state)            (: '{' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-URIExpr($input, $state)
    let $state := p:consume(268, $input, $state)            (: '}' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CompNamespaceConstructor"),
    $state
  )
};

(:~
 : Try parsing CompNamespaceConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CompNamespaceConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "CompNamespaceConstructor"),
  let $state :=
    let $state := p:consume(177, $input, $state)            (: 'namespace' :)
    let $state := p:lookahead1W(177, $input, $state)        (: NCName^Token | S^WS | ('(' ':') | 'and' | 'as' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 264) then                    (: '{' :)
        let $state := p:consume(264, $input, $state)        (: '{' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-PrefixExpr($input, $state)
        let $state := p:consume(268, $input, $state)        (: '}' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-Prefix($input, $state)
        return $state
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state := p:consume(264, $input, $state)            (: '{' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-URIExpr($input, $state)
    let $state := p:consume(268, $input, $state)            (: '}' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "CompNamespaceConstructor"),
    $state
  )
};

(:~
 : Parse CompAttrConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CompAttrConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CompAttrConstructor"),
  let $state :=
    let $state := p:consume(86, $input, $state)             (: 'attribute' :)
    let $state := p:lookahead1W(235, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 264) then                    (: '{' :)
        let $state := p:consume(264, $input, $state)        (: '{' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Expr($input, $state)
        let $state := p:consume(268, $input, $state)        (: '}' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-EQName($input, $state)
        return $state
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EnclosedExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CompAttrConstructor"),
    $state
  )
};

(:~
 : Try parsing CompAttrConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CompAttrConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "CompAttrConstructor"),
  let $state :=
    let $state := p:consume(86, $input, $state)             (: 'attribute' :)
    let $state := p:lookahead1W(235, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 264) then                    (: '{' :)
        let $state := p:consume(264, $input, $state)        (: '{' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-Expr($input, $state)
        let $state := p:consume(268, $input, $state)        (: '}' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-EQName($input, $state)
        return $state
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EnclosedExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "CompAttrConstructor"),
    $state
  )
};

(:~
 : Parse EnclosedContentExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-EnclosedContentExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "EnclosedContentExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EnclosedExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "EnclosedContentExpr"),
    $state
  )
};

(:~
 : Try parsing EnclosedContentExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-EnclosedContentExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "EnclosedContentExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EnclosedExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "EnclosedContentExpr"),
    $state
  )
};

(:~
 : Parse CompElemConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CompElemConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CompElemConstructor"),
  let $state :=
    let $state := p:consume(120, $input, $state)            (: 'element' :)
    let $state := p:lookahead1W(235, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 264) then                    (: '{' :)
        let $state := p:consume(264, $input, $state)        (: '{' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Expr($input, $state)
        let $state := p:consume(268, $input, $state)        (: '}' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-EQName($input, $state)
        return $state
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EnclosedContentExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CompElemConstructor"),
    $state
  )
};

(:~
 : Try parsing CompElemConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CompElemConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "CompElemConstructor"),
  let $state :=
    let $state := p:consume(120, $input, $state)            (: 'element' :)
    let $state := p:lookahead1W(235, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 264) then                    (: '{' :)
        let $state := p:consume(264, $input, $state)        (: '{' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-Expr($input, $state)
        let $state := p:consume(268, $input, $state)        (: '}' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-EQName($input, $state)
        return $state
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EnclosedContentExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "CompElemConstructor"),
    $state
  )
};

(:~
 : Parse CompDocConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CompDocConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CompDocConstructor"),
  let $state :=
    let $state := p:consume(118, $input, $state)            (: 'document' :)
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EnclosedExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CompDocConstructor"),
    $state
  )
};

(:~
 : Try parsing CompDocConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CompDocConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "CompDocConstructor"),
  let $state :=
    let $state := p:consume(118, $input, $state)            (: 'document' :)
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EnclosedExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "CompDocConstructor"),
    $state
  )
};

(:~
 : Parse ComputedConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ComputedConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ComputedConstructor"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 118) then                    (: 'document' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-CompDocConstructor($input, $state)
        return $state
      else if ($state[$p:l1] = 120) then                    (: 'element' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-CompElemConstructor($input, $state)
        return $state
      else if ($state[$p:l1] = 86) then                     (: 'attribute' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-CompAttrConstructor($input, $state)
        return $state
      else if ($state[$p:l1] = 177) then                    (: 'namespace' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-CompNamespaceConstructor($input, $state)
        return $state
      else if ($state[$p:l1] = 232) then                    (: 'text' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-CompTextConstructor($input, $state)
        return $state
      else if ($state[$p:l1] = 97) then                     (: 'comment' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-CompCommentConstructor($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-CompPIConstructor($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ComputedConstructor"),
    $state
  )
};

(:~
 : Try parsing ComputedConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ComputedConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ComputedConstructor"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 118) then                    (: 'document' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-CompDocConstructor($input, $state)
        return $state
      else if ($state[$p:l1] = 120) then                    (: 'element' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-CompElemConstructor($input, $state)
        return $state
      else if ($state[$p:l1] = 86) then                     (: 'attribute' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-CompAttrConstructor($input, $state)
        return $state
      else if ($state[$p:l1] = 177) then                    (: 'namespace' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-CompNamespaceConstructor($input, $state)
        return $state
      else if ($state[$p:l1] = 232) then                    (: 'text' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-CompTextConstructor($input, $state)
        return $state
      else if ($state[$p:l1] = 97) then                     (: 'comment' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-CompCommentConstructor($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-CompPIConstructor($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ComputedConstructor"),
    $state
  )
};

(:~
 : Parse DirPIConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DirPIConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "DirPIConstructor"),
  let $state :=
    let $state := p:consume(59, $input, $state)             (: '<?' :)
    let $state := p:lookahead1(0, $input, $state)           (: PITarget :)
    let $state := p:consume(12, $input, $state)             (: PITarget :)
    let $state := p:lookahead1(15, $input, $state)          (: S | '?>' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 17) then                     (: S :)
        let $state := p:consume(17, $input, $state)         (: S :)
        let $state := p:lookahead1(4, $input, $state)       (: DirPIContents :)
        let $state := p:consume(23, $input, $state)         (: DirPIContents :)
        return $state
      else
        $state
    let $state := p:lookahead1(10, $input, $state)          (: '?>' :)
    let $state := p:consume(66, $input, $state)             (: '?>' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "DirPIConstructor"),
    $state
  )
};

(:~
 : Try parsing DirPIConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-DirPIConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "DirPIConstructor"),
  let $state :=
    let $state := p:consume(59, $input, $state)             (: '<?' :)
    let $state := p:lookahead1(0, $input, $state)           (: PITarget :)
    let $state := p:consume(12, $input, $state)             (: PITarget :)
    let $state := p:lookahead1(15, $input, $state)          (: S | '?>' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 17) then                     (: S :)
        let $state := p:consume(17, $input, $state)         (: S :)
        let $state := p:lookahead1(4, $input, $state)       (: DirPIContents :)
        let $state := p:consume(23, $input, $state)         (: DirPIContents :)
        return $state
      else
        $state
    let $state := p:lookahead1(10, $input, $state)          (: '?>' :)
    let $state := p:consume(66, $input, $state)             (: '?>' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "DirPIConstructor"),
    $state
  )
};

(:~
 : Parse DirCommentConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DirCommentConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "DirCommentConstructor"),
  let $state :=
    let $state := p:consume(54, $input, $state)             (: '<!--' :)
    let $state := p:lookahead1(3, $input, $state)           (: DirCommentContents :)
    let $state := p:consume(22, $input, $state)             (: DirCommentContents :)
    let $state := p:lookahead1(7, $input, $state)           (: '-->' :)
    let $state := p:consume(42, $input, $state)             (: '-->' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "DirCommentConstructor"),
    $state
  )
};

(:~
 : Try parsing DirCommentConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-DirCommentConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "DirCommentConstructor"),
  let $state :=
    let $state := p:consume(54, $input, $state)             (: '<!--' :)
    let $state := p:lookahead1(3, $input, $state)           (: DirCommentContents :)
    let $state := p:consume(22, $input, $state)             (: DirCommentContents :)
    let $state := p:lookahead1(7, $input, $state)           (: '-->' :)
    let $state := p:consume(42, $input, $state)             (: '-->' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "DirCommentConstructor"),
    $state
  )
};

(:~
 : Parse CDataSection.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CDataSection($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CDataSection"),
  let $state :=
    let $state := p:consume(55, $input, $state)             (: '<![CDATA[' :)
    let $state := p:lookahead1(5, $input, $state)           (: CDataSectionContents :)
    let $state := p:consume(24, $input, $state)             (: CDataSectionContents :)
    let $state := p:lookahead1(11, $input, $state)          (: ']]>' :)
    let $state := p:consume(71, $input, $state)             (: ']]>' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CDataSection"),
    $state
  )
};

(:~
 : Try parsing CDataSection.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CDataSection($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "CDataSection"),
  let $state :=
    let $state := p:consume(55, $input, $state)             (: '<![CDATA[' :)
    let $state := p:lookahead1(5, $input, $state)           (: CDataSectionContents :)
    let $state := p:consume(24, $input, $state)             (: CDataSectionContents :)
    let $state := p:lookahead1(11, $input, $state)          (: ']]>' :)
    let $state := p:consume(71, $input, $state)             (: ']]>' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "CDataSection"),
    $state
  )
};

(:~
 : Parse DirElemContent.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DirElemContent($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "DirElemContent"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 53                           (: '<' :)
            or $state[$p:l1] = 54                           (: '<!--' :)
            or $state[$p:l1] = 59) then                     (: '<?' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-DirectConstructor($input, $state)
        return $state
      else if ($state[$p:l1] = 55) then                     (: '<![CDATA[' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-CDataSection($input, $state)
        return $state
      else if ($state[$p:l1] = 9) then                      (: ElementContentChar :)
        let $state := p:consume(9, $input, $state)          (: ElementContentChar :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-CommonContent($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "DirElemContent"),
    $state
  )
};

(:~
 : Try parsing DirElemContent.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-DirElemContent($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "DirElemContent"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 53                           (: '<' :)
            or $state[$p:l1] = 54                           (: '<!--' :)
            or $state[$p:l1] = 59) then                     (: '<?' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-DirectConstructor($input, $state)
        return $state
      else if ($state[$p:l1] = 55) then                     (: '<![CDATA[' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-CDataSection($input, $state)
        return $state
      else if ($state[$p:l1] = 9) then                      (: ElementContentChar :)
        let $state := p:consume(9, $input, $state)          (: ElementContentChar :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-CommonContent($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "DirElemContent"),
    $state
  )
};

(:~
 : Parse AposAttrValueContent.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AposAttrValueContent($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "AposAttrValueContent"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 11) then                     (: AposAttrContentChar :)
        let $state := p:consume(11, $input, $state)         (: AposAttrContentChar :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-CommonContent($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "AposAttrValueContent"),
    $state
  )
};

(:~
 : Try parsing AposAttrValueContent.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-AposAttrValueContent($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "AposAttrValueContent"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 11) then                     (: AposAttrContentChar :)
        let $state := p:consume(11, $input, $state)         (: AposAttrContentChar :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-CommonContent($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "AposAttrValueContent"),
    $state
  )
};

(:~
 : Parse CommonContent.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CommonContent($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CommonContent"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 6) then                      (: PredefinedEntityRef :)
        let $state := p:consume(6, $input, $state)          (: PredefinedEntityRef :)
        return $state
      else if ($state[$p:l1] = 13) then                     (: CharRef :)
        let $state := p:consume(13, $input, $state)         (: CharRef :)
        return $state
      else if ($state[$p:l1] = 265) then                    (: '{{' :)
        let $state := p:consume(265, $input, $state)        (: '{{' :)
        return $state
      else if ($state[$p:l1] = 270) then                    (: '}}' :)
        let $state := p:consume(270, $input, $state)        (: '}}' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-EnclosedExpr($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CommonContent"),
    $state
  )
};

(:~
 : Try parsing CommonContent.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CommonContent($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "CommonContent"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 6) then                      (: PredefinedEntityRef :)
        let $state := p:consume(6, $input, $state)          (: PredefinedEntityRef :)
        return $state
      else if ($state[$p:l1] = 13) then                     (: CharRef :)
        let $state := p:consume(13, $input, $state)         (: CharRef :)
        return $state
      else if ($state[$p:l1] = 265) then                    (: '{{' :)
        let $state := p:consume(265, $input, $state)        (: '{{' :)
        return $state
      else if ($state[$p:l1] = 270) then                    (: '}}' :)
        let $state := p:consume(270, $input, $state)        (: '}}' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-EnclosedExpr($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "CommonContent"),
    $state
  )
};

(:~
 : Parse QuotAttrValueContent.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-QuotAttrValueContent($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "QuotAttrValueContent"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 10) then                     (: QuotAttrContentChar :)
        let $state := p:consume(10, $input, $state)         (: QuotAttrContentChar :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-CommonContent($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "QuotAttrValueContent"),
    $state
  )
};

(:~
 : Try parsing QuotAttrValueContent.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-QuotAttrValueContent($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "QuotAttrValueContent"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 10) then                     (: QuotAttrContentChar :)
        let $state := p:consume(10, $input, $state)         (: QuotAttrContentChar :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-CommonContent($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "QuotAttrValueContent"),
    $state
  )
};

(:~
 : Parse the 1st loop of production DirAttributeValue (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DirAttributeValue-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(159, $input, $state)         (: PredefinedEntityRef | EscapeQuot | QuotAttrContentChar |
                                                               CharRef | '"' | '{' | '{{' | '}}' :)
    return
      if ($state[$p:l1] = 28) then                          (: '"' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 7) then                  (: EscapeQuot :)
            let $state := p:consume(7, $input, $state)      (: EscapeQuot :)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-QuotAttrValueContent($input, $state)
            return $state
        return p:parse-DirAttributeValue-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production DirAttributeValue (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-DirAttributeValue-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(159, $input, $state)         (: PredefinedEntityRef | EscapeQuot | QuotAttrContentChar |
                                                               CharRef | '"' | '{' | '{{' | '}}' :)
    return
      if ($state[$p:l1] = 28) then                          (: '"' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 7) then                  (: EscapeQuot :)
            let $state := p:consume(7, $input, $state)      (: EscapeQuot :)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-QuotAttrValueContent($input, $state)
            return $state
        return p:try-DirAttributeValue-1($input, $state)
};

(:~
 : Parse the 2nd loop of production DirAttributeValue (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DirAttributeValue-2($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(160, $input, $state)         (: PredefinedEntityRef | EscapeApos | AposAttrContentChar |
                                                               CharRef | "'" | '{' | '{{' | '}}' :)
    return
      if ($state[$p:l1] = 33) then                          (: "'" :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 8) then                  (: EscapeApos :)
            let $state := p:consume(8, $input, $state)      (: EscapeApos :)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-AposAttrValueContent($input, $state)
            return $state
        return p:parse-DirAttributeValue-2($input, $state)
};

(:~
 : Try parsing the 2nd loop of production DirAttributeValue (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-DirAttributeValue-2($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(160, $input, $state)         (: PredefinedEntityRef | EscapeApos | AposAttrContentChar |
                                                               CharRef | "'" | '{' | '{{' | '}}' :)
    return
      if ($state[$p:l1] = 33) then                          (: "'" :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 8) then                  (: EscapeApos :)
            let $state := p:consume(8, $input, $state)      (: EscapeApos :)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-AposAttrValueContent($input, $state)
            return $state
        return p:try-DirAttributeValue-2($input, $state)
};

(:~
 : Parse DirAttributeValue.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DirAttributeValue($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "DirAttributeValue"),
  let $state :=
    let $state := p:lookahead1(16, $input, $state)          (: '"' | "'" :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 28) then                     (: '"' :)
        let $state := p:consume(28, $input, $state)         (: '"' :)
        let $state := p:parse-DirAttributeValue-1($input, $state)
        let $state := p:consume(28, $input, $state)         (: '"' :)
        return $state
      else
        let $state := p:consume(33, $input, $state)         (: "'" :)
        let $state := p:parse-DirAttributeValue-2($input, $state)
        let $state := p:consume(33, $input, $state)         (: "'" :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "DirAttributeValue"),
    $state
  )
};

(:~
 : Try parsing DirAttributeValue.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-DirAttributeValue($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "DirAttributeValue"),
  let $state :=
    let $state := p:lookahead1(16, $input, $state)          (: '"' | "'" :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 28) then                     (: '"' :)
        let $state := p:consume(28, $input, $state)         (: '"' :)
        let $state := p:try-DirAttributeValue-1($input, $state)
        let $state := p:consume(28, $input, $state)         (: '"' :)
        return $state
      else
        let $state := p:consume(33, $input, $state)         (: "'" :)
        let $state := p:try-DirAttributeValue-2($input, $state)
        let $state := p:consume(33, $input, $state)         (: "'" :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "DirAttributeValue"),
    $state
  )
};

(:~
 : Parse the 1st loop of production DirAttributeList (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DirAttributeList-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(21, $input, $state)          (: S | '/>' | '>' :)
    return
      if ($state[$p:l1] != 17) then                         (: S :)
        $state
      else
        let $state := p:consume(17, $input, $state)         (: S :)
        let $state := p:lookahead1(233, $input, $state)     (: QName^Token | S | '/>' | '>' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                                               'default' | 'delete' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] != 17                      (: S :)
               and $state[$p:l1] != 47                      (: '/>' :)
               and $state[$p:l1] != 62) then                (: '>' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-QName($input, $state)
            let $state := p:lookahead1(13, $input, $state)  (: S | '=' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] = 17) then             (: S :)
                let $state := p:consume(17, $input, $state) (: S :)
                return $state
              else
                $state
            let $state := p:lookahead1(8, $input, $state)   (: '=' :)
            let $state := p:consume(60, $input, $state)     (: '=' :)
            let $state := p:lookahead1(20, $input, $state)  (: S | '"' | "'" :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] = 17) then             (: S :)
                let $state := p:consume(17, $input, $state) (: S :)
                return $state
              else
                $state
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-DirAttributeValue($input, $state)
            return $state
          else
            $state
        return p:parse-DirAttributeList-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production DirAttributeList (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-DirAttributeList-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(21, $input, $state)          (: S | '/>' | '>' :)
    return
      if ($state[$p:l1] != 17) then                         (: S :)
        $state
      else
        let $state := p:consume(17, $input, $state)         (: S :)
        let $state := p:lookahead1(233, $input, $state)     (: QName^Token | S | '/>' | '>' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                                               'default' | 'delete' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] != 17                      (: S :)
               and $state[$p:l1] != 47                      (: '/>' :)
               and $state[$p:l1] != 62) then                (: '>' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-QName($input, $state)
            let $state := p:lookahead1(13, $input, $state)  (: S | '=' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] = 17) then             (: S :)
                let $state := p:consume(17, $input, $state) (: S :)
                return $state
              else
                $state
            let $state := p:lookahead1(8, $input, $state)   (: '=' :)
            let $state := p:consume(60, $input, $state)     (: '=' :)
            let $state := p:lookahead1(20, $input, $state)  (: S | '"' | "'" :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] = 17) then             (: S :)
                let $state := p:consume(17, $input, $state) (: S :)
                return $state
              else
                $state
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-DirAttributeValue($input, $state)
            return $state
          else
            $state
        return p:try-DirAttributeList-1($input, $state)
};

(:~
 : Parse DirAttributeList.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DirAttributeList($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "DirAttributeList"),
  let $state :=
    let $state := p:parse-DirAttributeList-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "DirAttributeList"),
    $state
  )
};

(:~
 : Try parsing DirAttributeList.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-DirAttributeList($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "DirAttributeList"),
  let $state :=
    let $state := p:try-DirAttributeList-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "DirAttributeList"),
    $state
  )
};

(:~
 : Parse the 1st loop of production DirElemConstructor (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DirElemConstructor-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(165, $input, $state)         (: PredefinedEntityRef | ElementContentChar | CharRef |
                                                               '<' | '<!--' | '<![CDATA[' | '</' | '<?' | '{' | '{{' |
                                                               '}}' :)
    return
      if ($state[$p:l1] = 56) then                          (: '</' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-DirElemContent($input, $state)
        return p:parse-DirElemConstructor-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production DirElemConstructor (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-DirElemConstructor-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(165, $input, $state)         (: PredefinedEntityRef | ElementContentChar | CharRef |
                                                               '<' | '<!--' | '<![CDATA[' | '</' | '<?' | '{' | '{{' |
                                                               '}}' :)
    return
      if ($state[$p:l1] = 56) then                          (: '</' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-DirElemContent($input, $state)
        return p:try-DirElemConstructor-1($input, $state)
};

(:~
 : Parse DirElemConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DirElemConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "DirElemConstructor"),
  let $state :=
    let $state := p:consume(53, $input, $state)             (: '<' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-QName($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-DirAttributeList($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 47) then                     (: '/>' :)
        let $state := p:consume(47, $input, $state)         (: '/>' :)
        return $state
      else
        let $state := p:consume(62, $input, $state)         (: '>' :)
        let $state := p:parse-DirElemConstructor-1($input, $state)
        let $state := p:consume(56, $input, $state)         (: '</' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-QName($input, $state)
        let $state := p:lookahead1(14, $input, $state)      (: S | '>' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 17) then                 (: S :)
            let $state := p:consume(17, $input, $state)     (: S :)
            return $state
          else
            $state
        let $state := p:lookahead1(9, $input, $state)       (: '>' :)
        let $state := p:consume(62, $input, $state)         (: '>' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "DirElemConstructor"),
    $state
  )
};

(:~
 : Try parsing DirElemConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-DirElemConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "DirElemConstructor"),
  let $state :=
    let $state := p:consume(53, $input, $state)             (: '<' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-QName($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-DirAttributeList($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 47) then                     (: '/>' :)
        let $state := p:consume(47, $input, $state)         (: '/>' :)
        return $state
      else
        let $state := p:consume(62, $input, $state)         (: '>' :)
        let $state := p:try-DirElemConstructor-1($input, $state)
        let $state := p:consume(56, $input, $state)         (: '</' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-QName($input, $state)
        let $state := p:lookahead1(14, $input, $state)      (: S | '>' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 17) then                 (: S :)
            let $state := p:consume(17, $input, $state)     (: S :)
            return $state
          else
            $state
        let $state := p:lookahead1(9, $input, $state)       (: '>' :)
        let $state := p:consume(62, $input, $state)         (: '>' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "DirElemConstructor"),
    $state
  )
};

(:~
 : Parse DirectConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DirectConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "DirectConstructor"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 53) then                     (: '<' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-DirElemConstructor($input, $state)
        return $state
      else if ($state[$p:l1] = 54) then                     (: '<!--' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-DirCommentConstructor($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-DirPIConstructor($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "DirectConstructor"),
    $state
  )
};

(:~
 : Try parsing DirectConstructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-DirectConstructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "DirectConstructor"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 53) then                     (: '<' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-DirElemConstructor($input, $state)
        return $state
      else if ($state[$p:l1] = 54) then                     (: '<!--' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-DirCommentConstructor($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-DirPIConstructor($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "DirectConstructor"),
    $state
  )
};

(:~
 : Parse Constructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Constructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "Constructor"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 53                           (: '<' :)
            or $state[$p:l1] = 54                           (: '<!--' :)
            or $state[$p:l1] = 59) then                     (: '<?' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-DirectConstructor($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ComputedConstructor($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "Constructor"),
    $state
  )
};

(:~
 : Try parsing Constructor.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-Constructor($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "Constructor"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 53                           (: '<' :)
            or $state[$p:l1] = 54                           (: '<!--' :)
            or $state[$p:l1] = 59) then                     (: '<?' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-DirectConstructor($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ComputedConstructor($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "Constructor"),
    $state
  )
};

(:~
 : Parse UnorderedExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-UnorderedExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "UnorderedExpr"),
  let $state :=
    let $state := p:consume(244, $input, $state)            (: 'unordered' :)
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state := p:consume(264, $input, $state)            (: '{' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Expr($input, $state)
    let $state := p:consume(268, $input, $state)            (: '}' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "UnorderedExpr"),
    $state
  )
};

(:~
 : Try parsing UnorderedExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-UnorderedExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "UnorderedExpr"),
  let $state :=
    let $state := p:consume(244, $input, $state)            (: 'unordered' :)
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state := p:consume(264, $input, $state)            (: '{' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-Expr($input, $state)
    let $state := p:consume(268, $input, $state)            (: '}' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "UnorderedExpr"),
    $state
  )
};

(:~
 : Parse OrderedExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-OrderedExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "OrderedExpr"),
  let $state :=
    let $state := p:consume(193, $input, $state)            (: 'ordered' :)
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state := p:consume(264, $input, $state)            (: '{' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Expr($input, $state)
    let $state := p:consume(268, $input, $state)            (: '}' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "OrderedExpr"),
    $state
  )
};

(:~
 : Try parsing OrderedExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-OrderedExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "OrderedExpr"),
  let $state :=
    let $state := p:consume(193, $input, $state)            (: 'ordered' :)
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state := p:consume(264, $input, $state)            (: '{' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-Expr($input, $state)
    let $state := p:consume(268, $input, $state)            (: '}' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "OrderedExpr"),
    $state
  )
};

(:~
 : Parse ArgumentPlaceholder.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ArgumentPlaceholder($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ArgumentPlaceholder"),
  let $state :=
    let $state := p:consume(65, $input, $state)             (: '?' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ArgumentPlaceholder"),
    $state
  )
};

(:~
 : Try parsing ArgumentPlaceholder.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ArgumentPlaceholder($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ArgumentPlaceholder"),
  let $state :=
    let $state := p:consume(65, $input, $state)             (: '?' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ArgumentPlaceholder"),
    $state
  )
};

(:~
 : Parse Argument.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Argument($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "Argument"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 65) then                         (: '?' :)
        let $state := p:lookahead2W(182, $input, $state)    (: IntegerLiteral | NCName^Token | S^WS | '(' | ('(' ':') |
                                                               ')' | '*' | ',' | 'and' | 'as' | 'ascending' | 'case' |
                                                               'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                                               'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                                               'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                                               'union' | 'where' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 19009                        (: '?' ')' :)
            or $state[$p:lk] = 20545) then                  (: '?' ',' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ArgumentPlaceholder($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ExprSingle($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "Argument"),
    $state
  )
};

(:~
 : Try parsing Argument.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-Argument($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "Argument"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 65) then                         (: '?' :)
        let $state := p:lookahead2W(182, $input, $state)    (: IntegerLiteral | NCName^Token | S^WS | '(' | ('(' ':') |
                                                               ')' | '*' | ',' | 'and' | 'as' | 'ascending' | 'case' |
                                                               'cast' | 'castable' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                                               'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                                               'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                                               'union' | 'where' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 19009                        (: '?' ')' :)
            or $state[$p:lk] = 20545) then                  (: '?' ',' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ArgumentPlaceholder($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ExprSingle($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "Argument"),
    $state
  )
};

(:~
 : Parse the 1st loop of production ArgumentList (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ArgumentList-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(92, $input, $state)         (: S^WS | ('(' ':') | ')' | ',' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Argument($input, $state)
        return p:parse-ArgumentList-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production ArgumentList (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ArgumentList-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(92, $input, $state)         (: S^WS | ('(' ':') | ')' | ',' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-Argument($input, $state)
        return p:try-ArgumentList-1($input, $state)
};

(:~
 : Parse ArgumentList.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ArgumentList($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ArgumentList"),
  let $state :=
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(247, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | ')' |
                                                               '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' |
                                                               '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 37) then                    (: ')' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Argument($input, $state)
        let $state := p:parse-ArgumentList-1($input, $state)
        return $state
      else
        $state
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ArgumentList"),
    $state
  )
};

(:~
 : Try parsing ArgumentList.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ArgumentList($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ArgumentList"),
  let $state :=
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(247, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | ')' |
                                                               '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' |
                                                               '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 37) then                    (: ')' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-Argument($input, $state)
        let $state := p:try-ArgumentList-1($input, $state)
        return $state
      else
        $state
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ArgumentList"),
    $state
  )
};

(:~
 : Parse FunctionEQName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FunctionEQName($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FunctionEQName"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 5) then                      (: URIQualifiedName :)
        let $state := p:consume(5, $input, $state)          (: URIQualifiedName :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FunctionName($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FunctionEQName"),
    $state
  )
};

(:~
 : Try parsing FunctionEQName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FunctionEQName($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FunctionEQName"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 5) then                      (: URIQualifiedName :)
        let $state := p:consume(5, $input, $state)          (: URIQualifiedName :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FunctionName($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FunctionEQName"),
    $state
  )
};

(:~
 : Parse FunctionCall.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FunctionCall($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FunctionCall"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-FunctionEQName($input, $state)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ArgumentList($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FunctionCall"),
    $state
  )
};

(:~
 : Try parsing FunctionCall.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FunctionCall($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FunctionCall"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-FunctionEQName($input, $state)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ArgumentList($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FunctionCall"),
    $state
  )
};

(:~
 : Parse ContextItemExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ContextItemExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ContextItemExpr"),
  let $state :=
    let $state := p:consume(43, $input, $state)             (: '.' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ContextItemExpr"),
    $state
  )
};

(:~
 : Try parsing ContextItemExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ContextItemExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ContextItemExpr"),
  let $state :=
    let $state := p:consume(43, $input, $state)             (: '.' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ContextItemExpr"),
    $state
  )
};

(:~
 : Parse ParenthesizedExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ParenthesizedExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ParenthesizedExpr"),
  let $state :=
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(247, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | ')' |
                                                               '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' |
                                                               '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 37) then                    (: ')' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Expr($input, $state)
        return $state
      else
        $state
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ParenthesizedExpr"),
    $state
  )
};

(:~
 : Try parsing ParenthesizedExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ParenthesizedExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ParenthesizedExpr"),
  let $state :=
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(247, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | ')' |
                                                               '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' |
                                                               '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 37) then                    (: ')' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-Expr($input, $state)
        return $state
      else
        $state
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ParenthesizedExpr"),
    $state
  )
};

(:~
 : Parse VarRef.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-VarRef($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "VarRef"),
  let $state :=
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-VarName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "VarRef"),
    $state
  )
};

(:~
 : Try parsing VarRef.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-VarRef($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "VarRef"),
  let $state :=
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-VarName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "VarRef"),
    $state
  )
};

(:~
 : Parse PrimaryExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-PrimaryExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "PrimaryExpr"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 177) then                        (: 'namespace' :)
        let $state := p:lookahead2W(181, $input, $state)    (: NCName^Token | S^WS | '#' | '(' | ('(' ':') | 'and' |
                                                               'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '{' :)
        return $state
      else if ($state[$p:l1] eq 206) then                   (: 'processing-instruction' :)
        let $state := p:lookahead2W(179, $input, $state)    (: NCName^Token | S^WS | '#' | ('(' ':') | 'and' | 'as' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '{' :)
        return $state
      else if ($state[$p:l1] = (86,                         (: 'attribute' :)
                                120)) then                  (: 'element' :)
        let $state := p:lookahead2W(236, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | '#' | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' | '{' :)
        return $state
      else if ($state[$p:l1] = (97,                         (: 'comment' :)
                                232)) then                  (: 'text' :)
        let $state := p:lookahead2W(85, $input, $state)     (: S^WS | '#' | ('(' ':') | '{' :)
        return $state
      else if ($state[$p:l1] = (118,                        (: 'document' :)
                                193,                        (: 'ordered' :)
                                244)) then                  (: 'unordered' :)
        let $state := p:lookahead2W(134, $input, $state)    (: S^WS | '#' | '(' | ('(' ':') | '{' :)
        return $state
      else if ($state[$p:l1] = (5,                          (: URIQualifiedName :)
                                15,                         (: QName^Token :)
                                78,                         (: 'ancestor' :)
                                79,                         (: 'ancestor-or-self' :)
                                80,                         (: 'and' :)
                                83,                         (: 'as' :)
                                84,                         (: 'ascending' :)
                                85,                         (: 'at' :)
                                91,                         (: 'case' :)
                                92,                         (: 'cast' :)
                                93,                         (: 'castable' :)
                                95,                         (: 'child' :)
                                96,                         (: 'collation' :)
                                102,                        (: 'copy' :)
                                104,                        (: 'count' :)
                                107,                        (: 'declare' :)
                                108,                        (: 'default' :)
                                109,                        (: 'delete' :)
                                110,                        (: 'descendant' :)
                                111,                        (: 'descendant-or-self' :)
                                112,                        (: 'descending' :)
                                117,                        (: 'div' :)
                                121,                        (: 'else' :)
                                122,                        (: 'empty' :)
                                125,                        (: 'end' :)
                                127,                        (: 'eq' :)
                                128,                        (: 'every' :)
                                130,                        (: 'except' :)
                                134,                        (: 'following' :)
                                135,                        (: 'following-sibling' :)
                                136,                        (: 'for' :)
                                143,                        (: 'ge' :)
                                145,                        (: 'group' :)
                                147,                        (: 'gt' :)
                                148,                        (: 'idiv' :)
                                150,                        (: 'import' :)
                                155,                        (: 'insert' :)
                                156,                        (: 'instance' :)
                                157,                        (: 'intersect' :)
                                159,                        (: 'invoke' :)
                                160,                        (: 'is' :)
                                165,                        (: 'le' :)
                                167,                        (: 'let' :)
                                170,                        (: 'lt' :)
                                173,                        (: 'mod' :)
                                174,                        (: 'modify' :)
                                175,                        (: 'module' :)
                                179,                        (: 'ne' :)
                                189,                        (: 'only' :)
                                191,                        (: 'or' :)
                                192,                        (: 'order' :)
                                197,                        (: 'parent' :)
                                202,                        (: 'preceding' :)
                                203,                        (: 'preceding-sibling' :)
                                208,                        (: 'rename' :)
                                209,                        (: 'replace' :)
                                210,                        (: 'return' :)
                                213,                        (: 'satisfies' :)
                                218,                        (: 'self' :)
                                224,                        (: 'some' :)
                                225,                        (: 'stable' :)
                                226,                        (: 'start' :)
                                236,                        (: 'to' :)
                                237,                        (: 'transform' :)
                                238,                        (: 'treat' :)
                                239,                        (: 'try' :)
                                243,                        (: 'union' :)
                                245,                        (: 'update' :)
                                249,                        (: 'validate' :)
                                255,                        (: 'where' :)
                                258,                        (: 'with' :)
                                262)) then                  (: 'xquery' :)
        let $state := p:lookahead2W(84, $input, $state)     (: S^WS | '#' | '(' | ('(' ':') :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 1                            (: IntegerLiteral :)
            or $state[$p:lk] = 2                            (: DecimalLiteral :)
            or $state[$p:lk] = 3                            (: DoubleLiteral :)
            or $state[$p:lk] = 4) then                      (: StringLiteral :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Literal($input, $state)
        return $state
      else if ($state[$p:lk] = 31) then                     (: '$' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-VarRef($input, $state)
        return $state
      else if ($state[$p:lk] = 34) then                     (: '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ParenthesizedExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 43) then                     (: '.' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ContextItemExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 17413                        (: URIQualifiedName '(' :)
            or $state[$p:lk] = 17423                        (: QName^Token '(' :)
            or $state[$p:lk] = 17486                        (: 'ancestor' '(' :)
            or $state[$p:lk] = 17487                        (: 'ancestor-or-self' '(' :)
            or $state[$p:lk] = 17488                        (: 'and' '(' :)
            or $state[$p:lk] = 17491                        (: 'as' '(' :)
            or $state[$p:lk] = 17492                        (: 'ascending' '(' :)
            or $state[$p:lk] = 17493                        (: 'at' '(' :)
            or $state[$p:lk] = 17499                        (: 'case' '(' :)
            or $state[$p:lk] = 17500                        (: 'cast' '(' :)
            or $state[$p:lk] = 17501                        (: 'castable' '(' :)
            or $state[$p:lk] = 17503                        (: 'child' '(' :)
            or $state[$p:lk] = 17504                        (: 'collation' '(' :)
            or $state[$p:lk] = 17510                        (: 'copy' '(' :)
            or $state[$p:lk] = 17512                        (: 'count' '(' :)
            or $state[$p:lk] = 17515                        (: 'declare' '(' :)
            or $state[$p:lk] = 17516                        (: 'default' '(' :)
            or $state[$p:lk] = 17517                        (: 'delete' '(' :)
            or $state[$p:lk] = 17518                        (: 'descendant' '(' :)
            or $state[$p:lk] = 17519                        (: 'descendant-or-self' '(' :)
            or $state[$p:lk] = 17520                        (: 'descending' '(' :)
            or $state[$p:lk] = 17525                        (: 'div' '(' :)
            or $state[$p:lk] = 17526                        (: 'document' '(' :)
            or $state[$p:lk] = 17529                        (: 'else' '(' :)
            or $state[$p:lk] = 17530                        (: 'empty' '(' :)
            or $state[$p:lk] = 17533                        (: 'end' '(' :)
            or $state[$p:lk] = 17535                        (: 'eq' '(' :)
            or $state[$p:lk] = 17536                        (: 'every' '(' :)
            or $state[$p:lk] = 17538                        (: 'except' '(' :)
            or $state[$p:lk] = 17542                        (: 'following' '(' :)
            or $state[$p:lk] = 17543                        (: 'following-sibling' '(' :)
            or $state[$p:lk] = 17544                        (: 'for' '(' :)
            or $state[$p:lk] = 17551                        (: 'ge' '(' :)
            or $state[$p:lk] = 17553                        (: 'group' '(' :)
            or $state[$p:lk] = 17555                        (: 'gt' '(' :)
            or $state[$p:lk] = 17556                        (: 'idiv' '(' :)
            or $state[$p:lk] = 17558                        (: 'import' '(' :)
            or $state[$p:lk] = 17563                        (: 'insert' '(' :)
            or $state[$p:lk] = 17564                        (: 'instance' '(' :)
            or $state[$p:lk] = 17565                        (: 'intersect' '(' :)
            or $state[$p:lk] = 17567                        (: 'invoke' '(' :)
            or $state[$p:lk] = 17568                        (: 'is' '(' :)
            or $state[$p:lk] = 17573                        (: 'le' '(' :)
            or $state[$p:lk] = 17575                        (: 'let' '(' :)
            or $state[$p:lk] = 17578                        (: 'lt' '(' :)
            or $state[$p:lk] = 17581                        (: 'mod' '(' :)
            or $state[$p:lk] = 17582                        (: 'modify' '(' :)
            or $state[$p:lk] = 17583                        (: 'module' '(' :)
            or $state[$p:lk] = 17585                        (: 'namespace' '(' :)
            or $state[$p:lk] = 17587                        (: 'ne' '(' :)
            or $state[$p:lk] = 17597                        (: 'only' '(' :)
            or $state[$p:lk] = 17599                        (: 'or' '(' :)
            or $state[$p:lk] = 17600                        (: 'order' '(' :)
            or $state[$p:lk] = 17601                        (: 'ordered' '(' :)
            or $state[$p:lk] = 17605                        (: 'parent' '(' :)
            or $state[$p:lk] = 17610                        (: 'preceding' '(' :)
            or $state[$p:lk] = 17611                        (: 'preceding-sibling' '(' :)
            or $state[$p:lk] = 17616                        (: 'rename' '(' :)
            or $state[$p:lk] = 17617                        (: 'replace' '(' :)
            or $state[$p:lk] = 17618                        (: 'return' '(' :)
            or $state[$p:lk] = 17621                        (: 'satisfies' '(' :)
            or $state[$p:lk] = 17626                        (: 'self' '(' :)
            or $state[$p:lk] = 17632                        (: 'some' '(' :)
            or $state[$p:lk] = 17633                        (: 'stable' '(' :)
            or $state[$p:lk] = 17634                        (: 'start' '(' :)
            or $state[$p:lk] = 17644                        (: 'to' '(' :)
            or $state[$p:lk] = 17645                        (: 'transform' '(' :)
            or $state[$p:lk] = 17646                        (: 'treat' '(' :)
            or $state[$p:lk] = 17647                        (: 'try' '(' :)
            or $state[$p:lk] = 17651                        (: 'union' '(' :)
            or $state[$p:lk] = 17652                        (: 'unordered' '(' :)
            or $state[$p:lk] = 17653                        (: 'update' '(' :)
            or $state[$p:lk] = 17657                        (: 'validate' '(' :)
            or $state[$p:lk] = 17663                        (: 'where' '(' :)
            or $state[$p:lk] = 17666                        (: 'with' '(' :)
            or $state[$p:lk] = 17670) then                  (: 'xquery' '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FunctionCall($input, $state)
        return $state
      else if ($state[$p:lk] = 135361) then                 (: 'ordered' '{' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-OrderedExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 135412) then                 (: 'unordered' '{' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-UnorderedExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 32                           (: '%' :)
            or $state[$p:lk] = 119                          (: 'document-node' :)
            or $state[$p:lk] = 123                          (: 'empty-sequence' :)
            or $state[$p:lk] = 142                          (: 'function' :)
            or $state[$p:lk] = 149                          (: 'if' :)
            or $state[$p:lk] = 161                          (: 'item' :)
            or $state[$p:lk] = 178                          (: 'namespace-node' :)
            or $state[$p:lk] = 184                          (: 'node' :)
            or $state[$p:lk] = 215                          (: 'schema-attribute' :)
            or $state[$p:lk] = 216                          (: 'schema-element' :)
            or $state[$p:lk] = 231                          (: 'switch' :)
            or $state[$p:lk] = 242                          (: 'typeswitch' :)
            or $state[$p:lk] = 14853                        (: URIQualifiedName '#' :)
            or $state[$p:lk] = 14863                        (: QName^Token '#' :)
            or $state[$p:lk] = 14926                        (: 'ancestor' '#' :)
            or $state[$p:lk] = 14927                        (: 'ancestor-or-self' '#' :)
            or $state[$p:lk] = 14928                        (: 'and' '#' :)
            or $state[$p:lk] = 14931                        (: 'as' '#' :)
            or $state[$p:lk] = 14932                        (: 'ascending' '#' :)
            or $state[$p:lk] = 14933                        (: 'at' '#' :)
            or $state[$p:lk] = 14934                        (: 'attribute' '#' :)
            or $state[$p:lk] = 14939                        (: 'case' '#' :)
            or $state[$p:lk] = 14940                        (: 'cast' '#' :)
            or $state[$p:lk] = 14941                        (: 'castable' '#' :)
            or $state[$p:lk] = 14943                        (: 'child' '#' :)
            or $state[$p:lk] = 14944                        (: 'collation' '#' :)
            or $state[$p:lk] = 14945                        (: 'comment' '#' :)
            or $state[$p:lk] = 14950                        (: 'copy' '#' :)
            or $state[$p:lk] = 14952                        (: 'count' '#' :)
            or $state[$p:lk] = 14955                        (: 'declare' '#' :)
            or $state[$p:lk] = 14956                        (: 'default' '#' :)
            or $state[$p:lk] = 14957                        (: 'delete' '#' :)
            or $state[$p:lk] = 14958                        (: 'descendant' '#' :)
            or $state[$p:lk] = 14959                        (: 'descendant-or-self' '#' :)
            or $state[$p:lk] = 14960                        (: 'descending' '#' :)
            or $state[$p:lk] = 14965                        (: 'div' '#' :)
            or $state[$p:lk] = 14966                        (: 'document' '#' :)
            or $state[$p:lk] = 14968                        (: 'element' '#' :)
            or $state[$p:lk] = 14969                        (: 'else' '#' :)
            or $state[$p:lk] = 14970                        (: 'empty' '#' :)
            or $state[$p:lk] = 14973                        (: 'end' '#' :)
            or $state[$p:lk] = 14975                        (: 'eq' '#' :)
            or $state[$p:lk] = 14976                        (: 'every' '#' :)
            or $state[$p:lk] = 14978                        (: 'except' '#' :)
            or $state[$p:lk] = 14982                        (: 'following' '#' :)
            or $state[$p:lk] = 14983                        (: 'following-sibling' '#' :)
            or $state[$p:lk] = 14984                        (: 'for' '#' :)
            or $state[$p:lk] = 14991                        (: 'ge' '#' :)
            or $state[$p:lk] = 14993                        (: 'group' '#' :)
            or $state[$p:lk] = 14995                        (: 'gt' '#' :)
            or $state[$p:lk] = 14996                        (: 'idiv' '#' :)
            or $state[$p:lk] = 14998                        (: 'import' '#' :)
            or $state[$p:lk] = 15003                        (: 'insert' '#' :)
            or $state[$p:lk] = 15004                        (: 'instance' '#' :)
            or $state[$p:lk] = 15005                        (: 'intersect' '#' :)
            or $state[$p:lk] = 15007                        (: 'invoke' '#' :)
            or $state[$p:lk] = 15008                        (: 'is' '#' :)
            or $state[$p:lk] = 15013                        (: 'le' '#' :)
            or $state[$p:lk] = 15015                        (: 'let' '#' :)
            or $state[$p:lk] = 15018                        (: 'lt' '#' :)
            or $state[$p:lk] = 15021                        (: 'mod' '#' :)
            or $state[$p:lk] = 15022                        (: 'modify' '#' :)
            or $state[$p:lk] = 15023                        (: 'module' '#' :)
            or $state[$p:lk] = 15025                        (: 'namespace' '#' :)
            or $state[$p:lk] = 15027                        (: 'ne' '#' :)
            or $state[$p:lk] = 15037                        (: 'only' '#' :)
            or $state[$p:lk] = 15039                        (: 'or' '#' :)
            or $state[$p:lk] = 15040                        (: 'order' '#' :)
            or $state[$p:lk] = 15041                        (: 'ordered' '#' :)
            or $state[$p:lk] = 15045                        (: 'parent' '#' :)
            or $state[$p:lk] = 15050                        (: 'preceding' '#' :)
            or $state[$p:lk] = 15051                        (: 'preceding-sibling' '#' :)
            or $state[$p:lk] = 15054                        (: 'processing-instruction' '#' :)
            or $state[$p:lk] = 15056                        (: 'rename' '#' :)
            or $state[$p:lk] = 15057                        (: 'replace' '#' :)
            or $state[$p:lk] = 15058                        (: 'return' '#' :)
            or $state[$p:lk] = 15061                        (: 'satisfies' '#' :)
            or $state[$p:lk] = 15066                        (: 'self' '#' :)
            or $state[$p:lk] = 15072                        (: 'some' '#' :)
            or $state[$p:lk] = 15073                        (: 'stable' '#' :)
            or $state[$p:lk] = 15074                        (: 'start' '#' :)
            or $state[$p:lk] = 15080                        (: 'text' '#' :)
            or $state[$p:lk] = 15084                        (: 'to' '#' :)
            or $state[$p:lk] = 15085                        (: 'transform' '#' :)
            or $state[$p:lk] = 15086                        (: 'treat' '#' :)
            or $state[$p:lk] = 15087                        (: 'try' '#' :)
            or $state[$p:lk] = 15091                        (: 'union' '#' :)
            or $state[$p:lk] = 15092                        (: 'unordered' '#' :)
            or $state[$p:lk] = 15093                        (: 'update' '#' :)
            or $state[$p:lk] = 15097                        (: 'validate' '#' :)
            or $state[$p:lk] = 15103                        (: 'where' '#' :)
            or $state[$p:lk] = 15106                        (: 'with' '#' :)
            or $state[$p:lk] = 15110) then                  (: 'xquery' '#' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FunctionItemExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 171) then                    (: 'map' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-MapConstructor($input, $state)
        return $state
      else if ($state[$p:lk] = 69                           (: '[' :)
            or $state[$p:lk] = 82) then                     (: 'array' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ArrayConstructor($input, $state)
        return $state
      else if ($state[$p:lk] = 73) then                     (: '``[' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-StringConstructor($input, $state)
        return $state
      else if ($state[$p:lk] = 65) then                     (: '?' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-UnaryLookup($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Constructor($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "PrimaryExpr"),
    $state
  )
};

(:~
 : Try parsing PrimaryExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-PrimaryExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "PrimaryExpr"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 177) then                        (: 'namespace' :)
        let $state := p:lookahead2W(181, $input, $state)    (: NCName^Token | S^WS | '#' | '(' | ('(' ':') | 'and' |
                                                               'as' | 'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '{' :)
        return $state
      else if ($state[$p:l1] eq 206) then                   (: 'processing-instruction' :)
        let $state := p:lookahead2W(179, $input, $state)    (: NCName^Token | S^WS | '#' | ('(' ':') | 'and' | 'as' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' |
                                                               '{' :)
        return $state
      else if ($state[$p:l1] = (86,                         (: 'attribute' :)
                                120)) then                  (: 'element' :)
        let $state := p:lookahead2W(236, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | '#' | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' | '{' :)
        return $state
      else if ($state[$p:l1] = (97,                         (: 'comment' :)
                                232)) then                  (: 'text' :)
        let $state := p:lookahead2W(85, $input, $state)     (: S^WS | '#' | ('(' ':') | '{' :)
        return $state
      else if ($state[$p:l1] = (118,                        (: 'document' :)
                                193,                        (: 'ordered' :)
                                244)) then                  (: 'unordered' :)
        let $state := p:lookahead2W(134, $input, $state)    (: S^WS | '#' | '(' | ('(' ':') | '{' :)
        return $state
      else if ($state[$p:l1] = (5,                          (: URIQualifiedName :)
                                15,                         (: QName^Token :)
                                78,                         (: 'ancestor' :)
                                79,                         (: 'ancestor-or-self' :)
                                80,                         (: 'and' :)
                                83,                         (: 'as' :)
                                84,                         (: 'ascending' :)
                                85,                         (: 'at' :)
                                91,                         (: 'case' :)
                                92,                         (: 'cast' :)
                                93,                         (: 'castable' :)
                                95,                         (: 'child' :)
                                96,                         (: 'collation' :)
                                102,                        (: 'copy' :)
                                104,                        (: 'count' :)
                                107,                        (: 'declare' :)
                                108,                        (: 'default' :)
                                109,                        (: 'delete' :)
                                110,                        (: 'descendant' :)
                                111,                        (: 'descendant-or-self' :)
                                112,                        (: 'descending' :)
                                117,                        (: 'div' :)
                                121,                        (: 'else' :)
                                122,                        (: 'empty' :)
                                125,                        (: 'end' :)
                                127,                        (: 'eq' :)
                                128,                        (: 'every' :)
                                130,                        (: 'except' :)
                                134,                        (: 'following' :)
                                135,                        (: 'following-sibling' :)
                                136,                        (: 'for' :)
                                143,                        (: 'ge' :)
                                145,                        (: 'group' :)
                                147,                        (: 'gt' :)
                                148,                        (: 'idiv' :)
                                150,                        (: 'import' :)
                                155,                        (: 'insert' :)
                                156,                        (: 'instance' :)
                                157,                        (: 'intersect' :)
                                159,                        (: 'invoke' :)
                                160,                        (: 'is' :)
                                165,                        (: 'le' :)
                                167,                        (: 'let' :)
                                170,                        (: 'lt' :)
                                173,                        (: 'mod' :)
                                174,                        (: 'modify' :)
                                175,                        (: 'module' :)
                                179,                        (: 'ne' :)
                                189,                        (: 'only' :)
                                191,                        (: 'or' :)
                                192,                        (: 'order' :)
                                197,                        (: 'parent' :)
                                202,                        (: 'preceding' :)
                                203,                        (: 'preceding-sibling' :)
                                208,                        (: 'rename' :)
                                209,                        (: 'replace' :)
                                210,                        (: 'return' :)
                                213,                        (: 'satisfies' :)
                                218,                        (: 'self' :)
                                224,                        (: 'some' :)
                                225,                        (: 'stable' :)
                                226,                        (: 'start' :)
                                236,                        (: 'to' :)
                                237,                        (: 'transform' :)
                                238,                        (: 'treat' :)
                                239,                        (: 'try' :)
                                243,                        (: 'union' :)
                                245,                        (: 'update' :)
                                249,                        (: 'validate' :)
                                255,                        (: 'where' :)
                                258,                        (: 'with' :)
                                262)) then                  (: 'xquery' :)
        let $state := p:lookahead2W(84, $input, $state)     (: S^WS | '#' | '(' | ('(' ':') :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 1                            (: IntegerLiteral :)
            or $state[$p:lk] = 2                            (: DecimalLiteral :)
            or $state[$p:lk] = 3                            (: DoubleLiteral :)
            or $state[$p:lk] = 4) then                      (: StringLiteral :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-Literal($input, $state)
        return $state
      else if ($state[$p:lk] = 31) then                     (: '$' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-VarRef($input, $state)
        return $state
      else if ($state[$p:lk] = 34) then                     (: '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ParenthesizedExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 43) then                     (: '.' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ContextItemExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 17413                        (: URIQualifiedName '(' :)
            or $state[$p:lk] = 17423                        (: QName^Token '(' :)
            or $state[$p:lk] = 17486                        (: 'ancestor' '(' :)
            or $state[$p:lk] = 17487                        (: 'ancestor-or-self' '(' :)
            or $state[$p:lk] = 17488                        (: 'and' '(' :)
            or $state[$p:lk] = 17491                        (: 'as' '(' :)
            or $state[$p:lk] = 17492                        (: 'ascending' '(' :)
            or $state[$p:lk] = 17493                        (: 'at' '(' :)
            or $state[$p:lk] = 17499                        (: 'case' '(' :)
            or $state[$p:lk] = 17500                        (: 'cast' '(' :)
            or $state[$p:lk] = 17501                        (: 'castable' '(' :)
            or $state[$p:lk] = 17503                        (: 'child' '(' :)
            or $state[$p:lk] = 17504                        (: 'collation' '(' :)
            or $state[$p:lk] = 17510                        (: 'copy' '(' :)
            or $state[$p:lk] = 17512                        (: 'count' '(' :)
            or $state[$p:lk] = 17515                        (: 'declare' '(' :)
            or $state[$p:lk] = 17516                        (: 'default' '(' :)
            or $state[$p:lk] = 17517                        (: 'delete' '(' :)
            or $state[$p:lk] = 17518                        (: 'descendant' '(' :)
            or $state[$p:lk] = 17519                        (: 'descendant-or-self' '(' :)
            or $state[$p:lk] = 17520                        (: 'descending' '(' :)
            or $state[$p:lk] = 17525                        (: 'div' '(' :)
            or $state[$p:lk] = 17526                        (: 'document' '(' :)
            or $state[$p:lk] = 17529                        (: 'else' '(' :)
            or $state[$p:lk] = 17530                        (: 'empty' '(' :)
            or $state[$p:lk] = 17533                        (: 'end' '(' :)
            or $state[$p:lk] = 17535                        (: 'eq' '(' :)
            or $state[$p:lk] = 17536                        (: 'every' '(' :)
            or $state[$p:lk] = 17538                        (: 'except' '(' :)
            or $state[$p:lk] = 17542                        (: 'following' '(' :)
            or $state[$p:lk] = 17543                        (: 'following-sibling' '(' :)
            or $state[$p:lk] = 17544                        (: 'for' '(' :)
            or $state[$p:lk] = 17551                        (: 'ge' '(' :)
            or $state[$p:lk] = 17553                        (: 'group' '(' :)
            or $state[$p:lk] = 17555                        (: 'gt' '(' :)
            or $state[$p:lk] = 17556                        (: 'idiv' '(' :)
            or $state[$p:lk] = 17558                        (: 'import' '(' :)
            or $state[$p:lk] = 17563                        (: 'insert' '(' :)
            or $state[$p:lk] = 17564                        (: 'instance' '(' :)
            or $state[$p:lk] = 17565                        (: 'intersect' '(' :)
            or $state[$p:lk] = 17567                        (: 'invoke' '(' :)
            or $state[$p:lk] = 17568                        (: 'is' '(' :)
            or $state[$p:lk] = 17573                        (: 'le' '(' :)
            or $state[$p:lk] = 17575                        (: 'let' '(' :)
            or $state[$p:lk] = 17578                        (: 'lt' '(' :)
            or $state[$p:lk] = 17581                        (: 'mod' '(' :)
            or $state[$p:lk] = 17582                        (: 'modify' '(' :)
            or $state[$p:lk] = 17583                        (: 'module' '(' :)
            or $state[$p:lk] = 17585                        (: 'namespace' '(' :)
            or $state[$p:lk] = 17587                        (: 'ne' '(' :)
            or $state[$p:lk] = 17597                        (: 'only' '(' :)
            or $state[$p:lk] = 17599                        (: 'or' '(' :)
            or $state[$p:lk] = 17600                        (: 'order' '(' :)
            or $state[$p:lk] = 17601                        (: 'ordered' '(' :)
            or $state[$p:lk] = 17605                        (: 'parent' '(' :)
            or $state[$p:lk] = 17610                        (: 'preceding' '(' :)
            or $state[$p:lk] = 17611                        (: 'preceding-sibling' '(' :)
            or $state[$p:lk] = 17616                        (: 'rename' '(' :)
            or $state[$p:lk] = 17617                        (: 'replace' '(' :)
            or $state[$p:lk] = 17618                        (: 'return' '(' :)
            or $state[$p:lk] = 17621                        (: 'satisfies' '(' :)
            or $state[$p:lk] = 17626                        (: 'self' '(' :)
            or $state[$p:lk] = 17632                        (: 'some' '(' :)
            or $state[$p:lk] = 17633                        (: 'stable' '(' :)
            or $state[$p:lk] = 17634                        (: 'start' '(' :)
            or $state[$p:lk] = 17644                        (: 'to' '(' :)
            or $state[$p:lk] = 17645                        (: 'transform' '(' :)
            or $state[$p:lk] = 17646                        (: 'treat' '(' :)
            or $state[$p:lk] = 17647                        (: 'try' '(' :)
            or $state[$p:lk] = 17651                        (: 'union' '(' :)
            or $state[$p:lk] = 17652                        (: 'unordered' '(' :)
            or $state[$p:lk] = 17653                        (: 'update' '(' :)
            or $state[$p:lk] = 17657                        (: 'validate' '(' :)
            or $state[$p:lk] = 17663                        (: 'where' '(' :)
            or $state[$p:lk] = 17666                        (: 'with' '(' :)
            or $state[$p:lk] = 17670) then                  (: 'xquery' '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FunctionCall($input, $state)
        return $state
      else if ($state[$p:lk] = 135361) then                 (: 'ordered' '{' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-OrderedExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 135412) then                 (: 'unordered' '{' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-UnorderedExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 32                           (: '%' :)
            or $state[$p:lk] = 119                          (: 'document-node' :)
            or $state[$p:lk] = 123                          (: 'empty-sequence' :)
            or $state[$p:lk] = 142                          (: 'function' :)
            or $state[$p:lk] = 149                          (: 'if' :)
            or $state[$p:lk] = 161                          (: 'item' :)
            or $state[$p:lk] = 178                          (: 'namespace-node' :)
            or $state[$p:lk] = 184                          (: 'node' :)
            or $state[$p:lk] = 215                          (: 'schema-attribute' :)
            or $state[$p:lk] = 216                          (: 'schema-element' :)
            or $state[$p:lk] = 231                          (: 'switch' :)
            or $state[$p:lk] = 242                          (: 'typeswitch' :)
            or $state[$p:lk] = 14853                        (: URIQualifiedName '#' :)
            or $state[$p:lk] = 14863                        (: QName^Token '#' :)
            or $state[$p:lk] = 14926                        (: 'ancestor' '#' :)
            or $state[$p:lk] = 14927                        (: 'ancestor-or-self' '#' :)
            or $state[$p:lk] = 14928                        (: 'and' '#' :)
            or $state[$p:lk] = 14931                        (: 'as' '#' :)
            or $state[$p:lk] = 14932                        (: 'ascending' '#' :)
            or $state[$p:lk] = 14933                        (: 'at' '#' :)
            or $state[$p:lk] = 14934                        (: 'attribute' '#' :)
            or $state[$p:lk] = 14939                        (: 'case' '#' :)
            or $state[$p:lk] = 14940                        (: 'cast' '#' :)
            or $state[$p:lk] = 14941                        (: 'castable' '#' :)
            or $state[$p:lk] = 14943                        (: 'child' '#' :)
            or $state[$p:lk] = 14944                        (: 'collation' '#' :)
            or $state[$p:lk] = 14945                        (: 'comment' '#' :)
            or $state[$p:lk] = 14950                        (: 'copy' '#' :)
            or $state[$p:lk] = 14952                        (: 'count' '#' :)
            or $state[$p:lk] = 14955                        (: 'declare' '#' :)
            or $state[$p:lk] = 14956                        (: 'default' '#' :)
            or $state[$p:lk] = 14957                        (: 'delete' '#' :)
            or $state[$p:lk] = 14958                        (: 'descendant' '#' :)
            or $state[$p:lk] = 14959                        (: 'descendant-or-self' '#' :)
            or $state[$p:lk] = 14960                        (: 'descending' '#' :)
            or $state[$p:lk] = 14965                        (: 'div' '#' :)
            or $state[$p:lk] = 14966                        (: 'document' '#' :)
            or $state[$p:lk] = 14968                        (: 'element' '#' :)
            or $state[$p:lk] = 14969                        (: 'else' '#' :)
            or $state[$p:lk] = 14970                        (: 'empty' '#' :)
            or $state[$p:lk] = 14973                        (: 'end' '#' :)
            or $state[$p:lk] = 14975                        (: 'eq' '#' :)
            or $state[$p:lk] = 14976                        (: 'every' '#' :)
            or $state[$p:lk] = 14978                        (: 'except' '#' :)
            or $state[$p:lk] = 14982                        (: 'following' '#' :)
            or $state[$p:lk] = 14983                        (: 'following-sibling' '#' :)
            or $state[$p:lk] = 14984                        (: 'for' '#' :)
            or $state[$p:lk] = 14991                        (: 'ge' '#' :)
            or $state[$p:lk] = 14993                        (: 'group' '#' :)
            or $state[$p:lk] = 14995                        (: 'gt' '#' :)
            or $state[$p:lk] = 14996                        (: 'idiv' '#' :)
            or $state[$p:lk] = 14998                        (: 'import' '#' :)
            or $state[$p:lk] = 15003                        (: 'insert' '#' :)
            or $state[$p:lk] = 15004                        (: 'instance' '#' :)
            or $state[$p:lk] = 15005                        (: 'intersect' '#' :)
            or $state[$p:lk] = 15007                        (: 'invoke' '#' :)
            or $state[$p:lk] = 15008                        (: 'is' '#' :)
            or $state[$p:lk] = 15013                        (: 'le' '#' :)
            or $state[$p:lk] = 15015                        (: 'let' '#' :)
            or $state[$p:lk] = 15018                        (: 'lt' '#' :)
            or $state[$p:lk] = 15021                        (: 'mod' '#' :)
            or $state[$p:lk] = 15022                        (: 'modify' '#' :)
            or $state[$p:lk] = 15023                        (: 'module' '#' :)
            or $state[$p:lk] = 15025                        (: 'namespace' '#' :)
            or $state[$p:lk] = 15027                        (: 'ne' '#' :)
            or $state[$p:lk] = 15037                        (: 'only' '#' :)
            or $state[$p:lk] = 15039                        (: 'or' '#' :)
            or $state[$p:lk] = 15040                        (: 'order' '#' :)
            or $state[$p:lk] = 15041                        (: 'ordered' '#' :)
            or $state[$p:lk] = 15045                        (: 'parent' '#' :)
            or $state[$p:lk] = 15050                        (: 'preceding' '#' :)
            or $state[$p:lk] = 15051                        (: 'preceding-sibling' '#' :)
            or $state[$p:lk] = 15054                        (: 'processing-instruction' '#' :)
            or $state[$p:lk] = 15056                        (: 'rename' '#' :)
            or $state[$p:lk] = 15057                        (: 'replace' '#' :)
            or $state[$p:lk] = 15058                        (: 'return' '#' :)
            or $state[$p:lk] = 15061                        (: 'satisfies' '#' :)
            or $state[$p:lk] = 15066                        (: 'self' '#' :)
            or $state[$p:lk] = 15072                        (: 'some' '#' :)
            or $state[$p:lk] = 15073                        (: 'stable' '#' :)
            or $state[$p:lk] = 15074                        (: 'start' '#' :)
            or $state[$p:lk] = 15080                        (: 'text' '#' :)
            or $state[$p:lk] = 15084                        (: 'to' '#' :)
            or $state[$p:lk] = 15085                        (: 'transform' '#' :)
            or $state[$p:lk] = 15086                        (: 'treat' '#' :)
            or $state[$p:lk] = 15087                        (: 'try' '#' :)
            or $state[$p:lk] = 15091                        (: 'union' '#' :)
            or $state[$p:lk] = 15092                        (: 'unordered' '#' :)
            or $state[$p:lk] = 15093                        (: 'update' '#' :)
            or $state[$p:lk] = 15097                        (: 'validate' '#' :)
            or $state[$p:lk] = 15103                        (: 'where' '#' :)
            or $state[$p:lk] = 15106                        (: 'with' '#' :)
            or $state[$p:lk] = 15110) then                  (: 'xquery' '#' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FunctionItemExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 171) then                    (: 'map' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-MapConstructor($input, $state)
        return $state
      else if ($state[$p:lk] = 69                           (: '[' :)
            or $state[$p:lk] = 82) then                     (: 'array' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ArrayConstructor($input, $state)
        return $state
      else if ($state[$p:lk] = 73) then                     (: '``[' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-StringConstructor($input, $state)
        return $state
      else if ($state[$p:lk] = 65) then                     (: '?' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-UnaryLookup($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-Constructor($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "PrimaryExpr"),
    $state
  )
};

(:~
 : Parse the 1st loop of production UpdatingFunctionCall (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-UpdatingFunctionCall-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(92, $input, $state)         (: S^WS | ('(' ':') | ')' | ',' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ExprSingle($input, $state)
        return p:parse-UpdatingFunctionCall-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production UpdatingFunctionCall (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-UpdatingFunctionCall-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(92, $input, $state)         (: S^WS | ('(' ':') | ')' | ',' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ExprSingle($input, $state)
        return p:try-UpdatingFunctionCall-1($input, $state)
};

(:~
 : Parse UpdatingFunctionCall.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-UpdatingFunctionCall($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "UpdatingFunctionCall"),
  let $state :=
    let $state := p:consume(159, $input, $state)            (: 'invoke' :)
    let $state := p:lookahead1W(73, $input, $state)         (: S^WS | ('(' ':') | 'updating' :)
    let $state := p:consume(246, $input, $state)            (: 'updating' :)
    let $state := p:lookahead1W(242, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               '$' | '%' | '(' | ('(' ':') | '.' | '<' | '<!--' | '<?' |
                                                               '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' |
                                                               'and' | 'array' | 'as' | 'ascending' | 'at' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                                               'default' | 'delete' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-PrimaryExpr($input, $state)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(247, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | ')' |
                                                               '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' |
                                                               '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 37) then                    (: ')' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ExprSingle($input, $state)
        let $state := p:parse-UpdatingFunctionCall-1($input, $state)
        return $state
      else
        $state
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "UpdatingFunctionCall"),
    $state
  )
};

(:~
 : Try parsing UpdatingFunctionCall.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-UpdatingFunctionCall($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "UpdatingFunctionCall"),
  let $state :=
    let $state := p:consume(159, $input, $state)            (: 'invoke' :)
    let $state := p:lookahead1W(73, $input, $state)         (: S^WS | ('(' ':') | 'updating' :)
    let $state := p:consume(246, $input, $state)            (: 'updating' :)
    let $state := p:lookahead1W(242, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               '$' | '%' | '(' | ('(' ':') | '.' | '<' | '<!--' | '<?' |
                                                               '?' | '[' | '``[' | 'ancestor' | 'ancestor-or-self' |
                                                               'and' | 'array' | 'as' | 'ascending' | 'at' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                                               'default' | 'delete' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-PrimaryExpr($input, $state)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(247, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | ')' |
                                                               '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' |
                                                               '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 37) then                    (: ')' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ExprSingle($input, $state)
        let $state := p:try-UpdatingFunctionCall-1($input, $state)
        return $state
      else
        $state
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "UpdatingFunctionCall"),
    $state
  )
};

(:~
 : Parse ReplaceExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ReplaceExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ReplaceExpr"),
  let $state :=
    let $state := p:consume(209, $input, $state)            (: 'replace' :)
    let $state := p:lookahead1W(125, $input, $state)        (: S^WS | ('(' ':') | 'node' | 'value' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 250) then                    (: 'value' :)
        let $state := p:consume(250, $input, $state)        (: 'value' :)
        let $state := p:lookahead1W(59, $input, $state)     (: S^WS | ('(' ':') | 'of' :)
        let $state := p:consume(188, $input, $state)        (: 'of' :)
        return $state
      else
        $state
    let $state := p:lookahead1W(58, $input, $state)         (: S^WS | ('(' ':') | 'node' :)
    let $state := p:consume(184, $input, $state)            (: 'node' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-TargetExpr($input, $state)
    let $state := p:lookahead1W(78, $input, $state)         (: S^WS | ('(' ':') | 'with' :)
    let $state := p:consume(258, $input, $state)            (: 'with' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ReplaceExpr"),
    $state
  )
};

(:~
 : Try parsing ReplaceExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ReplaceExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ReplaceExpr"),
  let $state :=
    let $state := p:consume(209, $input, $state)            (: 'replace' :)
    let $state := p:lookahead1W(125, $input, $state)        (: S^WS | ('(' ':') | 'node' | 'value' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 250) then                    (: 'value' :)
        let $state := p:consume(250, $input, $state)        (: 'value' :)
        let $state := p:lookahead1W(59, $input, $state)     (: S^WS | ('(' ':') | 'of' :)
        let $state := p:consume(188, $input, $state)        (: 'of' :)
        return $state
      else
        $state
    let $state := p:lookahead1W(58, $input, $state)         (: S^WS | ('(' ':') | 'node' :)
    let $state := p:consume(184, $input, $state)            (: 'node' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-TargetExpr($input, $state)
    let $state := p:lookahead1W(78, $input, $state)         (: S^WS | ('(' ':') | 'with' :)
    let $state := p:consume(258, $input, $state)            (: 'with' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ReplaceExpr"),
    $state
  )
};

(:~
 : Parse NewNameExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-NewNameExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "NewNameExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "NewNameExpr"),
    $state
  )
};

(:~
 : Try parsing NewNameExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-NewNameExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "NewNameExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "NewNameExpr"),
    $state
  )
};

(:~
 : Parse RenameExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-RenameExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "RenameExpr"),
  let $state :=
    let $state := p:consume(208, $input, $state)            (: 'rename' :)
    let $state := p:lookahead1W(58, $input, $state)         (: S^WS | ('(' ':') | 'node' :)
    let $state := p:consume(184, $input, $state)            (: 'node' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-TargetExpr($input, $state)
    let $state := p:lookahead1W(33, $input, $state)         (: S^WS | ('(' ':') | 'as' :)
    let $state := p:consume(83, $input, $state)             (: 'as' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-NewNameExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "RenameExpr"),
    $state
  )
};

(:~
 : Try parsing RenameExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-RenameExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "RenameExpr"),
  let $state :=
    let $state := p:consume(208, $input, $state)            (: 'rename' :)
    let $state := p:lookahead1W(58, $input, $state)         (: S^WS | ('(' ':') | 'node' :)
    let $state := p:consume(184, $input, $state)            (: 'node' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-TargetExpr($input, $state)
    let $state := p:lookahead1W(33, $input, $state)         (: S^WS | ('(' ':') | 'as' :)
    let $state := p:consume(83, $input, $state)             (: 'as' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-NewNameExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "RenameExpr"),
    $state
  )
};

(:~
 : Parse DeleteExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DeleteExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "DeleteExpr"),
  let $state :=
    let $state := p:consume(109, $input, $state)            (: 'delete' :)
    let $state := p:lookahead1W(124, $input, $state)        (: S^WS | ('(' ':') | 'node' | 'nodes' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 184) then                    (: 'node' :)
        let $state := p:consume(184, $input, $state)        (: 'node' :)
        return $state
      else
        let $state := p:consume(185, $input, $state)        (: 'nodes' :)
        return $state
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-TargetExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "DeleteExpr"),
    $state
  )
};

(:~
 : Try parsing DeleteExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-DeleteExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "DeleteExpr"),
  let $state :=
    let $state := p:consume(109, $input, $state)            (: 'delete' :)
    let $state := p:lookahead1W(124, $input, $state)        (: S^WS | ('(' ':') | 'node' | 'nodes' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 184) then                    (: 'node' :)
        let $state := p:consume(184, $input, $state)        (: 'node' :)
        return $state
      else
        let $state := p:consume(185, $input, $state)        (: 'nodes' :)
        return $state
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-TargetExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "DeleteExpr"),
    $state
  )
};

(:~
 : Parse TargetExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-TargetExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "TargetExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "TargetExpr"),
    $state
  )
};

(:~
 : Try parsing TargetExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-TargetExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "TargetExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "TargetExpr"),
    $state
  )
};

(:~
 : Parse InsertExprTargetChoice.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-InsertExprTargetChoice($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "InsertExprTargetChoice"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 75) then                     (: 'after' :)
        let $state := p:consume(75, $input, $state)         (: 'after' :)
        return $state
      else if ($state[$p:l1] = 88) then                     (: 'before' :)
        let $state := p:consume(88, $input, $state)         (: 'before' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 83) then                 (: 'as' :)
            let $state := p:consume(83, $input, $state)     (: 'as' :)
            let $state := p:lookahead1W(115, $input, $state) (: S^WS | ('(' ':') | 'first' | 'last' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] = 133) then            (: 'first' :)
                let $state := p:consume(133, $input, $state) (: 'first' :)
                return $state
              else
                let $state := p:consume(163, $input, $state) (: 'last' :)
                return $state
            return $state
          else
            $state
        let $state := p:lookahead1W(53, $input, $state)     (: S^WS | ('(' ':') | 'into' :)
        let $state := p:consume(158, $input, $state)        (: 'into' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "InsertExprTargetChoice"),
    $state
  )
};

(:~
 : Try parsing InsertExprTargetChoice.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-InsertExprTargetChoice($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "InsertExprTargetChoice"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 75) then                     (: 'after' :)
        let $state := p:consume(75, $input, $state)         (: 'after' :)
        return $state
      else if ($state[$p:l1] = 88) then                     (: 'before' :)
        let $state := p:consume(88, $input, $state)         (: 'before' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 83) then                 (: 'as' :)
            let $state := p:consume(83, $input, $state)     (: 'as' :)
            let $state := p:lookahead1W(115, $input, $state) (: S^WS | ('(' ':') | 'first' | 'last' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] = 133) then            (: 'first' :)
                let $state := p:consume(133, $input, $state) (: 'first' :)
                return $state
              else
                let $state := p:consume(163, $input, $state) (: 'last' :)
                return $state
            return $state
          else
            $state
        let $state := p:lookahead1W(53, $input, $state)     (: S^WS | ('(' ':') | 'into' :)
        let $state := p:consume(158, $input, $state)        (: 'into' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "InsertExprTargetChoice"),
    $state
  )
};

(:~
 : Parse SourceExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SourceExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "SourceExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "SourceExpr"),
    $state
  )
};

(:~
 : Try parsing SourceExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-SourceExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "SourceExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "SourceExpr"),
    $state
  )
};

(:~
 : Parse InsertExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-InsertExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "InsertExpr"),
  let $state :=
    let $state := p:consume(155, $input, $state)            (: 'insert' :)
    let $state := p:lookahead1W(124, $input, $state)        (: S^WS | ('(' ':') | 'node' | 'nodes' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 184) then                    (: 'node' :)
        let $state := p:consume(184, $input, $state)        (: 'node' :)
        return $state
      else
        let $state := p:consume(185, $input, $state)        (: 'nodes' :)
        return $state
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-SourceExpr($input, $state)
    let $state := p:lookahead1W(148, $input, $state)        (: S^WS | ('(' ':') | 'after' | 'as' | 'before' | 'into' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-InsertExprTargetChoice($input, $state)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-TargetExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "InsertExpr"),
    $state
  )
};

(:~
 : Try parsing InsertExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-InsertExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "InsertExpr"),
  let $state :=
    let $state := p:consume(155, $input, $state)            (: 'insert' :)
    let $state := p:lookahead1W(124, $input, $state)        (: S^WS | ('(' ':') | 'node' | 'nodes' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 184) then                    (: 'node' :)
        let $state := p:consume(184, $input, $state)        (: 'node' :)
        return $state
      else
        let $state := p:consume(185, $input, $state)        (: 'nodes' :)
        return $state
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-SourceExpr($input, $state)
    let $state := p:lookahead1W(148, $input, $state)        (: S^WS | ('(' ':') | 'after' | 'as' | 'before' | 'into' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-InsertExprTargetChoice($input, $state)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-TargetExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "InsertExpr"),
    $state
  )
};

(:~
 : Parse NameTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-NameTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "NameTest"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 21) then                     (: Wildcard :)
        let $state := p:consume(21, $input, $state)         (: Wildcard :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-EQName($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "NameTest"),
    $state
  )
};

(:~
 : Try parsing NameTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-NameTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "NameTest"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 21) then                     (: Wildcard :)
        let $state := p:consume(21, $input, $state)         (: Wildcard :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-EQName($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "NameTest"),
    $state
  )
};

(:~
 : Parse the 1st loop of production CatchErrorList (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CatchErrorList-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(131, $input, $state)        (: S^WS | ('(' ':') | '{' | '|' :)
    return
      if ($state[$p:l1] != 266) then                        (: '|' :)
        $state
      else
        let $state := p:consume(266, $input, $state)        (: '|' :)
        let $state := p:lookahead1W(234, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | Wildcard |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-NameTest($input, $state)
        return p:parse-CatchErrorList-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production CatchErrorList (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CatchErrorList-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(131, $input, $state)        (: S^WS | ('(' ':') | '{' | '|' :)
    return
      if ($state[$p:l1] != 266) then                        (: '|' :)
        $state
      else
        let $state := p:consume(266, $input, $state)        (: '|' :)
        let $state := p:lookahead1W(234, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | Wildcard |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-NameTest($input, $state)
        return p:try-CatchErrorList-1($input, $state)
};

(:~
 : Parse CatchErrorList.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CatchErrorList($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CatchErrorList"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-NameTest($input, $state)
    let $state := p:parse-CatchErrorList-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CatchErrorList"),
    $state
  )
};

(:~
 : Try parsing CatchErrorList.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CatchErrorList($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "CatchErrorList"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-NameTest($input, $state)
    let $state := p:try-CatchErrorList-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "CatchErrorList"),
    $state
  )
};

(:~
 : Parse CatchClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CatchClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CatchClause"),
  let $state :=
    let $state := p:consume(94, $input, $state)             (: 'catch' :)
    let $state := p:lookahead1W(234, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | Wildcard |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-CatchErrorList($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EnclosedExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CatchClause"),
    $state
  )
};

(:~
 : Try parsing CatchClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CatchClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "CatchClause"),
  let $state :=
    let $state := p:consume(94, $input, $state)             (: 'catch' :)
    let $state := p:lookahead1W(234, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | Wildcard |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-CatchErrorList($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EnclosedExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "CatchClause"),
    $state
  )
};

(:~
 : Parse EnclosedExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-EnclosedExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "EnclosedExpr"),
  let $state :=
    let $state := p:consume(264, $input, $state)            (: '{' :)
    let $state := p:lookahead1W(249, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' | '}' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 268) then                   (: '}' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Expr($input, $state)
        return $state
      else
        $state
    let $state := p:consume(268, $input, $state)            (: '}' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "EnclosedExpr"),
    $state
  )
};

(:~
 : Try parsing EnclosedExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-EnclosedExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "EnclosedExpr"),
  let $state :=
    let $state := p:consume(264, $input, $state)            (: '{' :)
    let $state := p:lookahead1W(249, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' | '}' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 268) then                   (: '}' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-Expr($input, $state)
        return $state
      else
        $state
    let $state := p:consume(268, $input, $state)            (: '}' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "EnclosedExpr"),
    $state
  )
};

(:~
 : Parse EnclosedTryTargetExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-EnclosedTryTargetExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "EnclosedTryTargetExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EnclosedExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "EnclosedTryTargetExpr"),
    $state
  )
};

(:~
 : Try parsing EnclosedTryTargetExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-EnclosedTryTargetExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "EnclosedTryTargetExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EnclosedExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "EnclosedTryTargetExpr"),
    $state
  )
};

(:~
 : Parse TryClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-TryClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "TryClause"),
  let $state :=
    let $state := p:consume(239, $input, $state)            (: 'try' :)
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EnclosedTryTargetExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "TryClause"),
    $state
  )
};

(:~
 : Try parsing TryClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-TryClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "TryClause"),
  let $state :=
    let $state := p:consume(239, $input, $state)            (: 'try' :)
    let $state := p:lookahead1W(80, $input, $state)         (: S^WS | ('(' ':') | '{' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EnclosedTryTargetExpr($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "TryClause"),
    $state
  )
};

(:~
 : Parse the 1st loop of production TryCatchExpr (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-TryCatchExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(39, $input, $state)         (: S^WS | ('(' ':') | 'catch' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-CatchClause($input, $state)
    let $state := p:lookahead1W(175, $input, $state)        (: S^WS | EOF | ('(' ':') | ')' | ',' | ':' | ';' | ']' |
                                                               'after' | 'as' | 'ascending' | 'before' | 'case' |
                                                               'catch' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'else' | 'empty' | 'end' | 'for' |
                                                               'group' | 'into' | 'let' | 'modify' | 'only' | 'order' |
                                                               'return' | 'satisfies' | 'stable' | 'start' | 'where' |
                                                               'with' | '}' | '}`' :)
    return
      if ($state[$p:l1] != 94) then                         (: 'catch' :)
        $state
      else
        p:parse-TryCatchExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production TryCatchExpr (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-TryCatchExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(39, $input, $state)         (: S^WS | ('(' ':') | 'catch' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-CatchClause($input, $state)
    let $state := p:lookahead1W(175, $input, $state)        (: S^WS | EOF | ('(' ':') | ')' | ',' | ':' | ';' | ']' |
                                                               'after' | 'as' | 'ascending' | 'before' | 'case' |
                                                               'catch' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'else' | 'empty' | 'end' | 'for' |
                                                               'group' | 'into' | 'let' | 'modify' | 'only' | 'order' |
                                                               'return' | 'satisfies' | 'stable' | 'start' | 'where' |
                                                               'with' | '}' | '}`' :)
    return
      if ($state[$p:l1] != 94) then                         (: 'catch' :)
        $state
      else
        p:try-TryCatchExpr-1($input, $state)
};

(:~
 : Parse TryCatchExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-TryCatchExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "TryCatchExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-TryClause($input, $state)
    let $state := p:parse-TryCatchExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "TryCatchExpr"),
    $state
  )
};

(:~
 : Try parsing TryCatchExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-TryCatchExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "TryCatchExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-TryClause($input, $state)
    let $state := p:try-TryCatchExpr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "TryCatchExpr"),
    $state
  )
};

(:~
 : Parse BasexIfExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-BasexIfExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "BasexIfExpr"),
  let $state :=
    let $state := p:consume(149, $input, $state)            (: 'if' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Expr($input, $state)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    let $state := p:lookahead1W(70, $input, $state)         (: S^WS | ('(' ':') | 'then' :)
    let $state := p:consume(233, $input, $state)            (: 'then' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "BasexIfExpr"),
    $state
  )
};

(:~
 : Try parsing BasexIfExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-BasexIfExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "BasexIfExpr"),
  let $state :=
    let $state := p:consume(149, $input, $state)            (: 'if' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-Expr($input, $state)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    let $state := p:lookahead1W(70, $input, $state)         (: S^WS | ('(' ':') | 'then' :)
    let $state := p:consume(233, $input, $state)            (: 'then' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "BasexIfExpr"),
    $state
  )
};

(:~
 : Parse IfExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-IfExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "IfExpr"),
  let $state :=
    let $state := p:consume(149, $input, $state)            (: 'if' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Expr($input, $state)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    let $state := p:lookahead1W(70, $input, $state)         (: S^WS | ('(' ':') | 'then' :)
    let $state := p:consume(233, $input, $state)            (: 'then' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    let $state := p:lookahead1W(48, $input, $state)         (: S^WS | ('(' ':') | 'else' :)
    let $state := p:consume(121, $input, $state)            (: 'else' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "IfExpr"),
    $state
  )
};

(:~
 : Try parsing IfExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-IfExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "IfExpr"),
  let $state :=
    let $state := p:consume(149, $input, $state)            (: 'if' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-Expr($input, $state)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    let $state := p:lookahead1W(70, $input, $state)         (: S^WS | ('(' ':') | 'then' :)
    let $state := p:consume(233, $input, $state)            (: 'then' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    let $state := p:lookahead1W(48, $input, $state)         (: S^WS | ('(' ':') | 'else' :)
    let $state := p:consume(121, $input, $state)            (: 'else' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "IfExpr"),
    $state
  )
};

(:~
 : Parse the 1st loop of production SequenceTypeUnion (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SequenceTypeUnion-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(129, $input, $state)        (: S^WS | ('(' ':') | 'return' | '|' :)
    return
      if ($state[$p:l1] != 266) then                        (: '|' :)
        $state
      else
        let $state := p:consume(266, $input, $state)        (: '|' :)
        let $state := p:lookahead1W(239, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-SequenceType($input, $state)
        return p:parse-SequenceTypeUnion-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production SequenceTypeUnion (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-SequenceTypeUnion-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(129, $input, $state)        (: S^WS | ('(' ':') | 'return' | '|' :)
    return
      if ($state[$p:l1] != 266) then                        (: '|' :)
        $state
      else
        let $state := p:consume(266, $input, $state)        (: '|' :)
        let $state := p:lookahead1W(239, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-SequenceType($input, $state)
        return p:try-SequenceTypeUnion-1($input, $state)
};

(:~
 : Parse SequenceTypeUnion.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SequenceTypeUnion($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "SequenceTypeUnion"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-SequenceType($input, $state)
    let $state := p:parse-SequenceTypeUnion-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "SequenceTypeUnion"),
    $state
  )
};

(:~
 : Try parsing SequenceTypeUnion.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-SequenceTypeUnion($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "SequenceTypeUnion"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-SequenceType($input, $state)
    let $state := p:try-SequenceTypeUnion-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "SequenceTypeUnion"),
    $state
  )
};

(:~
 : Parse CaseClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CaseClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CaseClause"),
  let $state :=
    let $state := p:consume(91, $input, $state)             (: 'case' :)
    let $state := p:lookahead1W(240, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 31) then                     (: '$' :)
        let $state := p:consume(31, $input, $state)         (: '$' :)
        let $state := p:lookahead1W(232, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-VarName($input, $state)
        let $state := p:lookahead1W(33, $input, $state)     (: S^WS | ('(' ':') | 'as' :)
        let $state := p:consume(83, $input, $state)         (: 'as' :)
        return $state
      else
        $state
    let $state := p:lookahead1W(239, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-SequenceTypeUnion($input, $state)
    let $state := p:consume(210, $input, $state)            (: 'return' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CaseClause"),
    $state
  )
};

(:~
 : Try parsing CaseClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CaseClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "CaseClause"),
  let $state :=
    let $state := p:consume(91, $input, $state)             (: 'case' :)
    let $state := p:lookahead1W(240, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | '$' | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 31) then                     (: '$' :)
        let $state := p:consume(31, $input, $state)         (: '$' :)
        let $state := p:lookahead1W(232, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-VarName($input, $state)
        let $state := p:lookahead1W(33, $input, $state)     (: S^WS | ('(' ':') | 'as' :)
        let $state := p:consume(83, $input, $state)         (: 'as' :)
        return $state
      else
        $state
    let $state := p:lookahead1W(239, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-SequenceTypeUnion($input, $state)
    let $state := p:consume(210, $input, $state)            (: 'return' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "CaseClause"),
    $state
  )
};

(:~
 : Parse the 1st loop of production TypeswitchExpr (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-TypeswitchExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(38, $input, $state)         (: S^WS | ('(' ':') | 'case' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-CaseClause($input, $state)
    let $state := p:lookahead1W(107, $input, $state)        (: S^WS | ('(' ':') | 'case' | 'default' :)
    return
      if ($state[$p:l1] != 91) then                         (: 'case' :)
        $state
      else
        p:parse-TypeswitchExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production TypeswitchExpr (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-TypeswitchExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(38, $input, $state)         (: S^WS | ('(' ':') | 'case' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-CaseClause($input, $state)
    let $state := p:lookahead1W(107, $input, $state)        (: S^WS | ('(' ':') | 'case' | 'default' :)
    return
      if ($state[$p:l1] != 91) then                         (: 'case' :)
        $state
      else
        p:try-TypeswitchExpr-1($input, $state)
};

(:~
 : Parse TypeswitchExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-TypeswitchExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "TypeswitchExpr"),
  let $state :=
    let $state := p:consume(242, $input, $state)            (: 'typeswitch' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Expr($input, $state)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    let $state := p:parse-TypeswitchExpr-1($input, $state)
    let $state := p:consume(108, $input, $state)            (: 'default' :)
    let $state := p:lookahead1W(87, $input, $state)         (: S^WS | '$' | ('(' ':') | 'return' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 31) then                     (: '$' :)
        let $state := p:consume(31, $input, $state)         (: '$' :)
        let $state := p:lookahead1W(232, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-VarName($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(63, $input, $state)         (: S^WS | ('(' ':') | 'return' :)
    let $state := p:consume(210, $input, $state)            (: 'return' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "TypeswitchExpr"),
    $state
  )
};

(:~
 : Try parsing TypeswitchExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-TypeswitchExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "TypeswitchExpr"),
  let $state :=
    let $state := p:consume(242, $input, $state)            (: 'typeswitch' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-Expr($input, $state)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    let $state := p:try-TypeswitchExpr-1($input, $state)
    let $state := p:consume(108, $input, $state)            (: 'default' :)
    let $state := p:lookahead1W(87, $input, $state)         (: S^WS | '$' | ('(' ':') | 'return' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 31) then                     (: '$' :)
        let $state := p:consume(31, $input, $state)         (: '$' :)
        let $state := p:lookahead1W(232, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-VarName($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(63, $input, $state)         (: S^WS | ('(' ':') | 'return' :)
    let $state := p:consume(210, $input, $state)            (: 'return' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "TypeswitchExpr"),
    $state
  )
};

(:~
 : Parse SwitchCaseOperand.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SwitchCaseOperand($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "SwitchCaseOperand"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "SwitchCaseOperand"),
    $state
  )
};

(:~
 : Try parsing SwitchCaseOperand.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-SwitchCaseOperand($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "SwitchCaseOperand"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "SwitchCaseOperand"),
    $state
  )
};

(:~
 : Parse the 1st loop of production SwitchCaseClause (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SwitchCaseClause-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:consume(91, $input, $state)             (: 'case' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-SwitchCaseOperand($input, $state)
    let $state := p:lookahead1W(108, $input, $state)        (: S^WS | ('(' ':') | 'case' | 'return' :)
    return
      if ($state[$p:l1] != 91) then                         (: 'case' :)
        $state
      else
        p:parse-SwitchCaseClause-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production SwitchCaseClause (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-SwitchCaseClause-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:consume(91, $input, $state)             (: 'case' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-SwitchCaseOperand($input, $state)
    let $state := p:lookahead1W(108, $input, $state)        (: S^WS | ('(' ':') | 'case' | 'return' :)
    return
      if ($state[$p:l1] != 91) then                         (: 'case' :)
        $state
      else
        p:try-SwitchCaseClause-1($input, $state)
};

(:~
 : Parse SwitchCaseClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SwitchCaseClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "SwitchCaseClause"),
  let $state :=
    let $state := p:parse-SwitchCaseClause-1($input, $state)
    let $state := p:consume(210, $input, $state)            (: 'return' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "SwitchCaseClause"),
    $state
  )
};

(:~
 : Try parsing SwitchCaseClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-SwitchCaseClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "SwitchCaseClause"),
  let $state :=
    let $state := p:try-SwitchCaseClause-1($input, $state)
    let $state := p:consume(210, $input, $state)            (: 'return' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "SwitchCaseClause"),
    $state
  )
};

(:~
 : Parse the 1st loop of production Expr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Expr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(161, $input, $state)        (: S^WS | EOF | ('(' ':') | ')' | ',' | ']' | '}' | '}`' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ExprSingle($input, $state)
        return p:parse-Expr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production Expr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-Expr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(161, $input, $state)        (: S^WS | EOF | ('(' ':') | ')' | ',' | ']' | '}' | '}`' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ExprSingle($input, $state)
        return p:try-Expr-1($input, $state)
};

(:~
 : Parse Expr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Expr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "Expr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    let $state := p:parse-Expr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "Expr"),
    $state
  )
};

(:~
 : Try parsing Expr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-Expr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "Expr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    let $state := p:try-Expr-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "Expr"),
    $state
  )
};

(:~
 : Parse the 1st loop of production SwitchExpr (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SwitchExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(38, $input, $state)         (: S^WS | ('(' ':') | 'case' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-SwitchCaseClause($input, $state)
    let $state := p:lookahead1W(107, $input, $state)        (: S^WS | ('(' ':') | 'case' | 'default' :)
    return
      if ($state[$p:l1] != 91) then                         (: 'case' :)
        $state
      else
        p:parse-SwitchExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production SwitchExpr (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-SwitchExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(38, $input, $state)         (: S^WS | ('(' ':') | 'case' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-SwitchCaseClause($input, $state)
    let $state := p:lookahead1W(107, $input, $state)        (: S^WS | ('(' ':') | 'case' | 'default' :)
    return
      if ($state[$p:l1] != 91) then                         (: 'case' :)
        $state
      else
        p:try-SwitchExpr-1($input, $state)
};

(:~
 : Parse SwitchExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SwitchExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "SwitchExpr"),
  let $state :=
    let $state := p:consume(231, $input, $state)            (: 'switch' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Expr($input, $state)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    let $state := p:parse-SwitchExpr-1($input, $state)
    let $state := p:consume(108, $input, $state)            (: 'default' :)
    let $state := p:lookahead1W(63, $input, $state)         (: S^WS | ('(' ':') | 'return' :)
    let $state := p:consume(210, $input, $state)            (: 'return' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "SwitchExpr"),
    $state
  )
};

(:~
 : Try parsing SwitchExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-SwitchExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "SwitchExpr"),
  let $state :=
    let $state := p:consume(231, $input, $state)            (: 'switch' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-Expr($input, $state)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    let $state := p:try-SwitchExpr-1($input, $state)
    let $state := p:consume(108, $input, $state)            (: 'default' :)
    let $state := p:lookahead1W(63, $input, $state)         (: S^WS | ('(' ':') | 'return' :)
    let $state := p:consume(210, $input, $state)            (: 'return' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "SwitchExpr"),
    $state
  )
};

(:~
 : Parse QuantifiedVarDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-QuantifiedVarDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "QuantifiedVarDecl"),
  let $state :=
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-VarName($input, $state)
    let $state := p:lookahead1W(104, $input, $state)        (: S^WS | ('(' ':') | 'as' | 'in' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 83) then                     (: 'as' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-TypeDeclaration($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(52, $input, $state)         (: S^WS | ('(' ':') | 'in' :)
    let $state := p:consume(151, $input, $state)            (: 'in' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "QuantifiedVarDecl"),
    $state
  )
};

(:~
 : Try parsing QuantifiedVarDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-QuantifiedVarDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "QuantifiedVarDecl"),
  let $state :=
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-VarName($input, $state)
    let $state := p:lookahead1W(104, $input, $state)        (: S^WS | ('(' ':') | 'as' | 'in' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 83) then                     (: 'as' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-TypeDeclaration($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(52, $input, $state)         (: S^WS | ('(' ':') | 'in' :)
    let $state := p:consume(151, $input, $state)            (: 'in' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "QuantifiedVarDecl"),
    $state
  )
};

(:~
 : Parse the 1st loop of production QuantifiedExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-QuantifiedExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(97, $input, $state)         (: S^WS | ('(' ':') | ',' | 'satisfies' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(23, $input, $state)     (: S^WS | '$' | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-QuantifiedVarDecl($input, $state)
        return p:parse-QuantifiedExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production QuantifiedExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-QuantifiedExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(97, $input, $state)         (: S^WS | ('(' ':') | ',' | 'satisfies' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(23, $input, $state)     (: S^WS | '$' | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-QuantifiedVarDecl($input, $state)
        return p:try-QuantifiedExpr-1($input, $state)
};

(:~
 : Parse QuantifiedExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-QuantifiedExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "QuantifiedExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 224) then                    (: 'some' :)
        let $state := p:consume(224, $input, $state)        (: 'some' :)
        return $state
      else
        let $state := p:consume(128, $input, $state)        (: 'every' :)
        return $state
    let $state := p:lookahead1W(23, $input, $state)         (: S^WS | '$' | ('(' ':') :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-QuantifiedVarDecl($input, $state)
    let $state := p:parse-QuantifiedExpr-1($input, $state)
    let $state := p:consume(213, $input, $state)            (: 'satisfies' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "QuantifiedExpr"),
    $state
  )
};

(:~
 : Try parsing QuantifiedExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-QuantifiedExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "QuantifiedExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 224) then                    (: 'some' :)
        let $state := p:consume(224, $input, $state)        (: 'some' :)
        return $state
      else
        let $state := p:consume(128, $input, $state)        (: 'every' :)
        return $state
    let $state := p:lookahead1W(23, $input, $state)         (: S^WS | '$' | ('(' ':') :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-QuantifiedVarDecl($input, $state)
    let $state := p:try-QuantifiedExpr-1($input, $state)
    let $state := p:consume(213, $input, $state)            (: 'satisfies' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "QuantifiedExpr"),
    $state
  )
};

(:~
 : Parse ReturnClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ReturnClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ReturnClause"),
  let $state :=
    let $state := p:consume(210, $input, $state)            (: 'return' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ReturnClause"),
    $state
  )
};

(:~
 : Try parsing ReturnClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ReturnClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ReturnClause"),
  let $state :=
    let $state := p:consume(210, $input, $state)            (: 'return' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ReturnClause"),
    $state
  )
};

(:~
 : Parse CountClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CountClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CountClause"),
  let $state :=
    let $state := p:consume(104, $input, $state)            (: 'count' :)
    let $state := p:lookahead1W(23, $input, $state)         (: S^WS | '$' | ('(' ':') :)
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-VarName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CountClause"),
    $state
  )
};

(:~
 : Try parsing CountClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CountClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "CountClause"),
  let $state :=
    let $state := p:consume(104, $input, $state)            (: 'count' :)
    let $state := p:lookahead1W(23, $input, $state)         (: S^WS | '$' | ('(' ':') :)
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-VarName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "CountClause"),
    $state
  )
};

(:~
 : Parse OrderModifier.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-OrderModifier($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "OrderModifier"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 84                           (: 'ascending' :)
            or $state[$p:l1] = 112) then                    (: 'descending' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 84) then                 (: 'ascending' :)
            let $state := p:consume(84, $input, $state)     (: 'ascending' :)
            return $state
          else
            let $state := p:consume(112, $input, $state)    (: 'descending' :)
            return $state
        return $state
      else
        $state
    let $state := p:lookahead1W(170, $input, $state)        (: S^WS | ('(' ':') | ',' | 'collation' | 'count' |
                                                               'empty' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                                               'stable' | 'where' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 122) then                    (: 'empty' :)
        let $state := p:consume(122, $input, $state)        (: 'empty' :)
        let $state := p:lookahead1W(116, $input, $state)    (: S^WS | ('(' ':') | 'greatest' | 'least' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 144) then                (: 'greatest' :)
            let $state := p:consume(144, $input, $state)    (: 'greatest' :)
            return $state
          else
            let $state := p:consume(166, $input, $state)    (: 'least' :)
            return $state
        return $state
      else
        $state
    let $state := p:lookahead1W(167, $input, $state)        (: S^WS | ('(' ':') | ',' | 'collation' | 'count' | 'for' |
                                                               'group' | 'let' | 'order' | 'return' | 'stable' | 'where' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 96) then                     (: 'collation' :)
        let $state := p:consume(96, $input, $state)         (: 'collation' :)
        let $state := p:lookahead1W(19, $input, $state)     (: StringLiteral | S^WS | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-URILiteral($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "OrderModifier"),
    $state
  )
};

(:~
 : Try parsing OrderModifier.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-OrderModifier($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "OrderModifier"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 84                           (: 'ascending' :)
            or $state[$p:l1] = 112) then                    (: 'descending' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 84) then                 (: 'ascending' :)
            let $state := p:consume(84, $input, $state)     (: 'ascending' :)
            return $state
          else
            let $state := p:consume(112, $input, $state)    (: 'descending' :)
            return $state
        return $state
      else
        $state
    let $state := p:lookahead1W(170, $input, $state)        (: S^WS | ('(' ':') | ',' | 'collation' | 'count' |
                                                               'empty' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                                               'stable' | 'where' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 122) then                    (: 'empty' :)
        let $state := p:consume(122, $input, $state)        (: 'empty' :)
        let $state := p:lookahead1W(116, $input, $state)    (: S^WS | ('(' ':') | 'greatest' | 'least' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 144) then                (: 'greatest' :)
            let $state := p:consume(144, $input, $state)    (: 'greatest' :)
            return $state
          else
            let $state := p:consume(166, $input, $state)    (: 'least' :)
            return $state
        return $state
      else
        $state
    let $state := p:lookahead1W(167, $input, $state)        (: S^WS | ('(' ':') | ',' | 'collation' | 'count' | 'for' |
                                                               'group' | 'let' | 'order' | 'return' | 'stable' | 'where' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 96) then                     (: 'collation' :)
        let $state := p:consume(96, $input, $state)         (: 'collation' :)
        let $state := p:lookahead1W(19, $input, $state)     (: StringLiteral | S^WS | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-URILiteral($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "OrderModifier"),
    $state
  )
};

(:~
 : Parse OrderSpec.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-OrderSpec($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "OrderSpec"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    let $state := p:lookahead1W(174, $input, $state)        (: S^WS | ('(' ':') | ',' | 'ascending' | 'collation' |
                                                               'count' | 'descending' | 'empty' | 'for' | 'group' |
                                                               'let' | 'order' | 'return' | 'stable' | 'where' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-OrderModifier($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "OrderSpec"),
    $state
  )
};

(:~
 : Try parsing OrderSpec.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-OrderSpec($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "OrderSpec"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    let $state := p:lookahead1W(174, $input, $state)        (: S^WS | ('(' ':') | ',' | 'ascending' | 'collation' |
                                                               'count' | 'descending' | 'empty' | 'for' | 'group' |
                                                               'let' | 'order' | 'return' | 'stable' | 'where' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-OrderModifier($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "OrderSpec"),
    $state
  )
};

(:~
 : Parse the 1st loop of production OrderSpecList (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-OrderSpecList-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(166, $input, $state)        (: S^WS | ('(' ':') | ',' | 'count' | 'for' | 'group' |
                                                               'let' | 'order' | 'return' | 'stable' | 'where' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-OrderSpec($input, $state)
        return p:parse-OrderSpecList-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production OrderSpecList (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-OrderSpecList-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(166, $input, $state)        (: S^WS | ('(' ':') | ',' | 'count' | 'for' | 'group' |
                                                               'let' | 'order' | 'return' | 'stable' | 'where' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-OrderSpec($input, $state)
        return p:try-OrderSpecList-1($input, $state)
};

(:~
 : Parse OrderSpecList.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-OrderSpecList($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "OrderSpecList"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-OrderSpec($input, $state)
    let $state := p:parse-OrderSpecList-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "OrderSpecList"),
    $state
  )
};

(:~
 : Try parsing OrderSpecList.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-OrderSpecList($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "OrderSpecList"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-OrderSpec($input, $state)
    let $state := p:try-OrderSpecList-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "OrderSpecList"),
    $state
  )
};

(:~
 : Parse OrderByClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-OrderByClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "OrderByClause"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 192) then                    (: 'order' :)
        let $state := p:consume(192, $input, $state)        (: 'order' :)
        let $state := p:lookahead1W(37, $input, $state)     (: S^WS | ('(' ':') | 'by' :)
        let $state := p:consume(90, $input, $state)         (: 'by' :)
        return $state
      else
        let $state := p:consume(225, $input, $state)        (: 'stable' :)
        let $state := p:lookahead1W(61, $input, $state)     (: S^WS | ('(' ':') | 'order' :)
        let $state := p:consume(192, $input, $state)        (: 'order' :)
        let $state := p:lookahead1W(37, $input, $state)     (: S^WS | ('(' ':') | 'by' :)
        let $state := p:consume(90, $input, $state)         (: 'by' :)
        return $state
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-OrderSpecList($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "OrderByClause"),
    $state
  )
};

(:~
 : Try parsing OrderByClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-OrderByClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "OrderByClause"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 192) then                    (: 'order' :)
        let $state := p:consume(192, $input, $state)        (: 'order' :)
        let $state := p:lookahead1W(37, $input, $state)     (: S^WS | ('(' ':') | 'by' :)
        let $state := p:consume(90, $input, $state)         (: 'by' :)
        return $state
      else
        let $state := p:consume(225, $input, $state)        (: 'stable' :)
        let $state := p:lookahead1W(61, $input, $state)     (: S^WS | ('(' ':') | 'order' :)
        let $state := p:consume(192, $input, $state)        (: 'order' :)
        let $state := p:lookahead1W(37, $input, $state)     (: S^WS | ('(' ':') | 'by' :)
        let $state := p:consume(90, $input, $state)         (: 'by' :)
        return $state
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-OrderSpecList($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "OrderByClause"),
    $state
  )
};

(:~
 : Parse GroupingVariable.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-GroupingVariable($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "GroupingVariable"),
  let $state :=
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-VarName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "GroupingVariable"),
    $state
  )
};

(:~
 : Try parsing GroupingVariable.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-GroupingVariable($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "GroupingVariable"),
  let $state :=
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-VarName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "GroupingVariable"),
    $state
  )
};

(:~
 : Parse GroupingSpec.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-GroupingSpec($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "GroupingSpec"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 31) then                         (: '$' :)
        let $state := p:lookahead2W(232, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 2591                         (: '$' URIQualifiedName :)
            or $state[$p:lk] = 7711                         (: '$' QName^Token :)
            or $state[$p:lk] = 39967                        (: '$' 'ancestor' :)
            or $state[$p:lk] = 40479                        (: '$' 'ancestor-or-self' :)
            or $state[$p:lk] = 40991                        (: '$' 'and' :)
            or $state[$p:lk] = 42527                        (: '$' 'as' :)
            or $state[$p:lk] = 43039                        (: '$' 'ascending' :)
            or $state[$p:lk] = 43551                        (: '$' 'at' :)
            or $state[$p:lk] = 44063                        (: '$' 'attribute' :)
            or $state[$p:lk] = 46623                        (: '$' 'case' :)
            or $state[$p:lk] = 47135                        (: '$' 'cast' :)
            or $state[$p:lk] = 47647                        (: '$' 'castable' :)
            or $state[$p:lk] = 48671                        (: '$' 'child' :)
            or $state[$p:lk] = 49183                        (: '$' 'collation' :)
            or $state[$p:lk] = 49695                        (: '$' 'comment' :)
            or $state[$p:lk] = 52255                        (: '$' 'copy' :)
            or $state[$p:lk] = 53279                        (: '$' 'count' :)
            or $state[$p:lk] = 54815                        (: '$' 'declare' :)
            or $state[$p:lk] = 55327                        (: '$' 'default' :)
            or $state[$p:lk] = 55839                        (: '$' 'delete' :)
            or $state[$p:lk] = 56351                        (: '$' 'descendant' :)
            or $state[$p:lk] = 56863                        (: '$' 'descendant-or-self' :)
            or $state[$p:lk] = 57375                        (: '$' 'descending' :)
            or $state[$p:lk] = 59935                        (: '$' 'div' :)
            or $state[$p:lk] = 60447                        (: '$' 'document' :)
            or $state[$p:lk] = 60959                        (: '$' 'document-node' :)
            or $state[$p:lk] = 61471                        (: '$' 'element' :)
            or $state[$p:lk] = 61983                        (: '$' 'else' :)
            or $state[$p:lk] = 62495                        (: '$' 'empty' :)
            or $state[$p:lk] = 63007                        (: '$' 'empty-sequence' :)
            or $state[$p:lk] = 64031                        (: '$' 'end' :)
            or $state[$p:lk] = 65055                        (: '$' 'eq' :)
            or $state[$p:lk] = 65567                        (: '$' 'every' :)
            or $state[$p:lk] = 66591                        (: '$' 'except' :)
            or $state[$p:lk] = 68639                        (: '$' 'following' :)
            or $state[$p:lk] = 69151                        (: '$' 'following-sibling' :)
            or $state[$p:lk] = 69663                        (: '$' 'for' :)
            or $state[$p:lk] = 72735                        (: '$' 'function' :)
            or $state[$p:lk] = 73247                        (: '$' 'ge' :)
            or $state[$p:lk] = 74271                        (: '$' 'group' :)
            or $state[$p:lk] = 75295                        (: '$' 'gt' :)
            or $state[$p:lk] = 75807                        (: '$' 'idiv' :)
            or $state[$p:lk] = 76319                        (: '$' 'if' :)
            or $state[$p:lk] = 76831                        (: '$' 'import' :)
            or $state[$p:lk] = 79391                        (: '$' 'insert' :)
            or $state[$p:lk] = 79903                        (: '$' 'instance' :)
            or $state[$p:lk] = 80415                        (: '$' 'intersect' :)
            or $state[$p:lk] = 81439                        (: '$' 'invoke' :)
            or $state[$p:lk] = 81951                        (: '$' 'is' :)
            or $state[$p:lk] = 82463                        (: '$' 'item' :)
            or $state[$p:lk] = 84511                        (: '$' 'le' :)
            or $state[$p:lk] = 85535                        (: '$' 'let' :)
            or $state[$p:lk] = 87071                        (: '$' 'lt' :)
            or $state[$p:lk] = 88607                        (: '$' 'mod' :)
            or $state[$p:lk] = 89119                        (: '$' 'modify' :)
            or $state[$p:lk] = 89631                        (: '$' 'module' :)
            or $state[$p:lk] = 90655                        (: '$' 'namespace' :)
            or $state[$p:lk] = 91167                        (: '$' 'namespace-node' :)
            or $state[$p:lk] = 91679                        (: '$' 'ne' :)
            or $state[$p:lk] = 94239                        (: '$' 'node' :)
            or $state[$p:lk] = 96799                        (: '$' 'only' :)
            or $state[$p:lk] = 97823                        (: '$' 'or' :)
            or $state[$p:lk] = 98335                        (: '$' 'order' :)
            or $state[$p:lk] = 98847                        (: '$' 'ordered' :)
            or $state[$p:lk] = 100895                       (: '$' 'parent' :)
            or $state[$p:lk] = 103455                       (: '$' 'preceding' :)
            or $state[$p:lk] = 103967                       (: '$' 'preceding-sibling' :)
            or $state[$p:lk] = 105503                       (: '$' 'processing-instruction' :)
            or $state[$p:lk] = 106527                       (: '$' 'rename' :)
            or $state[$p:lk] = 107039                       (: '$' 'replace' :)
            or $state[$p:lk] = 107551                       (: '$' 'return' :)
            or $state[$p:lk] = 109087                       (: '$' 'satisfies' :)
            or $state[$p:lk] = 110111                       (: '$' 'schema-attribute' :)
            or $state[$p:lk] = 110623                       (: '$' 'schema-element' :)
            or $state[$p:lk] = 111647                       (: '$' 'self' :)
            or $state[$p:lk] = 114719                       (: '$' 'some' :)
            or $state[$p:lk] = 115231                       (: '$' 'stable' :)
            or $state[$p:lk] = 115743                       (: '$' 'start' :)
            or $state[$p:lk] = 118303                       (: '$' 'switch' :)
            or $state[$p:lk] = 118815                       (: '$' 'text' :)
            or $state[$p:lk] = 120863                       (: '$' 'to' :)
            or $state[$p:lk] = 121375                       (: '$' 'transform' :)
            or $state[$p:lk] = 121887                       (: '$' 'treat' :)
            or $state[$p:lk] = 122399                       (: '$' 'try' :)
            or $state[$p:lk] = 123935                       (: '$' 'typeswitch' :)
            or $state[$p:lk] = 124447                       (: '$' 'union' :)
            or $state[$p:lk] = 124959                       (: '$' 'unordered' :)
            or $state[$p:lk] = 125471                       (: '$' 'update' :)
            or $state[$p:lk] = 127519                       (: '$' 'validate' :)
            or $state[$p:lk] = 130591                       (: '$' 'where' :)
            or $state[$p:lk] = 132127                       (: '$' 'with' :)
            or $state[$p:lk] = 134175) then                 (: '$' 'xquery' :)
        let $state := p:memoized($state, 2)
        return
          if ($state[$p:lk] != 0) then
            $state
          else
            let $backtrack := $state
            let $state := p:strip-result($state)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-GroupingVariable($input, $state)
            let $state := p:lookahead1W(172, $input, $state) (: S^WS | ('(' ':') | ',' | ':=' | 'as' | 'collation' |
                                                                'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                                                'stable' | 'where' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] = 51                   (: ':=' :)
                    or $state[$p:l1] = 83) then             (: 'as' :)
                let $state :=
                  if ($state[$p:error]) then
                    $state
                  else if ($state[$p:l1] = 83) then         (: 'as' :)
                    let $state :=
                      if ($state[$p:error]) then
                        $state
                      else
                        p:try-TypeDeclaration($input, $state)
                    return $state
                  else
                    $state
                let $state := p:lookahead1W(30, $input, $state) (: S^WS | ('(' ':') | ':=' :)
                let $state := p:consume(51, $input, $state) (: ':=' :)
                let $state := p:lookahead1W(245, $input, $state) (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                                    StringLiteral | URIQualifiedName | QName^Token |
                                                                    S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                                                    ('(' ':') | '+' | '-' | '.' | '..' | '/' | '//' |
                                                                    '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' |
                                                                    'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                                                    'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                                    'cast' | 'castable' | 'child' | 'collation' |
                                                                    'comment' | 'copy' | 'count' | 'declare' |
                                                                    'default' | 'delete' | 'descendant' |
                                                                    'descendant-or-self' | 'descending' | 'div' |
                                                                    'document' | 'document-node' | 'element' | 'else' |
                                                                    'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                                    'every' | 'except' | 'following' |
                                                                    'following-sibling' | 'for' | 'function' | 'ge' |
                                                                    'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                                                    'insert' | 'instance' | 'intersect' | 'invoke' |
                                                                    'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                                    'mod' | 'modify' | 'module' | 'namespace' |
                                                                    'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                                    'order' | 'ordered' | 'parent' | 'preceding' |
                                                                    'preceding-sibling' | 'processing-instruction' |
                                                                    'rename' | 'replace' | 'return' | 'satisfies' |
                                                                    'schema-attribute' | 'schema-element' | 'self' |
                                                                    'some' | 'stable' | 'start' | 'switch' | 'text' |
                                                                    'to' | 'transform' | 'treat' | 'try' |
                                                                    'typeswitch' | 'union' | 'unordered' | 'update' |
                                                                    'validate' | 'where' | 'with' | 'xquery' :)
                let $state :=
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-ExprSingle($input, $state)
                return $state
              else
                $state
            let $state := p:lookahead1W(167, $input, $state) (: S^WS | ('(' ':') | ',' | 'collation' | 'count' | 'for' |
                                                                'group' | 'let' | 'order' | 'return' | 'stable' |
                                                                'where' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] = 96) then             (: 'collation' :)
                let $state := p:consume(96, $input, $state) (: 'collation' :)
                let $state := p:lookahead1W(19, $input, $state) (: StringLiteral | S^WS | ('(' ':') :)
                let $state :=
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-URILiteral($input, $state)
                return $state
              else
                $state
            return
              if (not($state[$p:error])) then
                p:memoize($backtrack, $state, 2, $backtrack[$p:e0], -1, -1)
              else
                p:memoize($backtrack, $state, 2, $backtrack[$p:e0], -2, -2)
      else
        $state
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = -1) then
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-GroupingVariable($input, $state)
        let $state := p:lookahead1W(172, $input, $state)    (: S^WS | ('(' ':') | ',' | ':=' | 'as' | 'collation' |
                                                               'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                                               'stable' | 'where' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 51                       (: ':=' :)
                or $state[$p:l1] = 83) then                 (: 'as' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] = 83) then             (: 'as' :)
                let $state :=
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-TypeDeclaration($input, $state)
                return $state
              else
                $state
            let $state := p:lookahead1W(30, $input, $state) (: S^WS | ('(' ':') | ':=' :)
            let $state := p:consume(51, $input, $state)     (: ':=' :)
            let $state := p:lookahead1W(245, $input, $state) (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                                StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                                Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                                '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                                '?' | '@' | '[' | '``[' | 'ancestor' |
                                                                'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                                'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                                'castable' | 'child' | 'collation' | 'comment' |
                                                                'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                                'descendant' | 'descendant-or-self' | 'descending' |
                                                                'div' | 'document' | 'document-node' | 'element' |
                                                                'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                                'every' | 'except' | 'following' | 'following-sibling' |
                                                                'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                                'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                                'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                                'mod' | 'modify' | 'module' | 'namespace' |
                                                                'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                                'order' | 'ordered' | 'parent' | 'preceding' |
                                                                'preceding-sibling' | 'processing-instruction' |
                                                                'rename' | 'replace' | 'return' | 'satisfies' |
                                                                'schema-attribute' | 'schema-element' | 'self' |
                                                                'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                                'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                                'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                                'xquery' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-ExprSingle($input, $state)
            return $state
          else
            $state
        let $state := p:lookahead1W(167, $input, $state)    (: S^WS | ('(' ':') | ',' | 'collation' | 'count' | 'for' |
                                                               'group' | 'let' | 'order' | 'return' | 'stable' | 'where' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 96) then                 (: 'collation' :)
            let $state := p:consume(96, $input, $state)     (: 'collation' :)
            let $state := p:lookahead1W(19, $input, $state) (: StringLiteral | S^WS | ('(' ':') :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-URILiteral($input, $state)
            return $state
          else
            $state
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ExprSingle($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "GroupingSpec"),
    $state
  )
};

(:~
 : Try parsing GroupingSpec.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-GroupingSpec($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "GroupingSpec"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 31) then                         (: '$' :)
        let $state := p:lookahead2W(232, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 2591                         (: '$' URIQualifiedName :)
            or $state[$p:lk] = 7711                         (: '$' QName^Token :)
            or $state[$p:lk] = 39967                        (: '$' 'ancestor' :)
            or $state[$p:lk] = 40479                        (: '$' 'ancestor-or-self' :)
            or $state[$p:lk] = 40991                        (: '$' 'and' :)
            or $state[$p:lk] = 42527                        (: '$' 'as' :)
            or $state[$p:lk] = 43039                        (: '$' 'ascending' :)
            or $state[$p:lk] = 43551                        (: '$' 'at' :)
            or $state[$p:lk] = 44063                        (: '$' 'attribute' :)
            or $state[$p:lk] = 46623                        (: '$' 'case' :)
            or $state[$p:lk] = 47135                        (: '$' 'cast' :)
            or $state[$p:lk] = 47647                        (: '$' 'castable' :)
            or $state[$p:lk] = 48671                        (: '$' 'child' :)
            or $state[$p:lk] = 49183                        (: '$' 'collation' :)
            or $state[$p:lk] = 49695                        (: '$' 'comment' :)
            or $state[$p:lk] = 52255                        (: '$' 'copy' :)
            or $state[$p:lk] = 53279                        (: '$' 'count' :)
            or $state[$p:lk] = 54815                        (: '$' 'declare' :)
            or $state[$p:lk] = 55327                        (: '$' 'default' :)
            or $state[$p:lk] = 55839                        (: '$' 'delete' :)
            or $state[$p:lk] = 56351                        (: '$' 'descendant' :)
            or $state[$p:lk] = 56863                        (: '$' 'descendant-or-self' :)
            or $state[$p:lk] = 57375                        (: '$' 'descending' :)
            or $state[$p:lk] = 59935                        (: '$' 'div' :)
            or $state[$p:lk] = 60447                        (: '$' 'document' :)
            or $state[$p:lk] = 60959                        (: '$' 'document-node' :)
            or $state[$p:lk] = 61471                        (: '$' 'element' :)
            or $state[$p:lk] = 61983                        (: '$' 'else' :)
            or $state[$p:lk] = 62495                        (: '$' 'empty' :)
            or $state[$p:lk] = 63007                        (: '$' 'empty-sequence' :)
            or $state[$p:lk] = 64031                        (: '$' 'end' :)
            or $state[$p:lk] = 65055                        (: '$' 'eq' :)
            or $state[$p:lk] = 65567                        (: '$' 'every' :)
            or $state[$p:lk] = 66591                        (: '$' 'except' :)
            or $state[$p:lk] = 68639                        (: '$' 'following' :)
            or $state[$p:lk] = 69151                        (: '$' 'following-sibling' :)
            or $state[$p:lk] = 69663                        (: '$' 'for' :)
            or $state[$p:lk] = 72735                        (: '$' 'function' :)
            or $state[$p:lk] = 73247                        (: '$' 'ge' :)
            or $state[$p:lk] = 74271                        (: '$' 'group' :)
            or $state[$p:lk] = 75295                        (: '$' 'gt' :)
            or $state[$p:lk] = 75807                        (: '$' 'idiv' :)
            or $state[$p:lk] = 76319                        (: '$' 'if' :)
            or $state[$p:lk] = 76831                        (: '$' 'import' :)
            or $state[$p:lk] = 79391                        (: '$' 'insert' :)
            or $state[$p:lk] = 79903                        (: '$' 'instance' :)
            or $state[$p:lk] = 80415                        (: '$' 'intersect' :)
            or $state[$p:lk] = 81439                        (: '$' 'invoke' :)
            or $state[$p:lk] = 81951                        (: '$' 'is' :)
            or $state[$p:lk] = 82463                        (: '$' 'item' :)
            or $state[$p:lk] = 84511                        (: '$' 'le' :)
            or $state[$p:lk] = 85535                        (: '$' 'let' :)
            or $state[$p:lk] = 87071                        (: '$' 'lt' :)
            or $state[$p:lk] = 88607                        (: '$' 'mod' :)
            or $state[$p:lk] = 89119                        (: '$' 'modify' :)
            or $state[$p:lk] = 89631                        (: '$' 'module' :)
            or $state[$p:lk] = 90655                        (: '$' 'namespace' :)
            or $state[$p:lk] = 91167                        (: '$' 'namespace-node' :)
            or $state[$p:lk] = 91679                        (: '$' 'ne' :)
            or $state[$p:lk] = 94239                        (: '$' 'node' :)
            or $state[$p:lk] = 96799                        (: '$' 'only' :)
            or $state[$p:lk] = 97823                        (: '$' 'or' :)
            or $state[$p:lk] = 98335                        (: '$' 'order' :)
            or $state[$p:lk] = 98847                        (: '$' 'ordered' :)
            or $state[$p:lk] = 100895                       (: '$' 'parent' :)
            or $state[$p:lk] = 103455                       (: '$' 'preceding' :)
            or $state[$p:lk] = 103967                       (: '$' 'preceding-sibling' :)
            or $state[$p:lk] = 105503                       (: '$' 'processing-instruction' :)
            or $state[$p:lk] = 106527                       (: '$' 'rename' :)
            or $state[$p:lk] = 107039                       (: '$' 'replace' :)
            or $state[$p:lk] = 107551                       (: '$' 'return' :)
            or $state[$p:lk] = 109087                       (: '$' 'satisfies' :)
            or $state[$p:lk] = 110111                       (: '$' 'schema-attribute' :)
            or $state[$p:lk] = 110623                       (: '$' 'schema-element' :)
            or $state[$p:lk] = 111647                       (: '$' 'self' :)
            or $state[$p:lk] = 114719                       (: '$' 'some' :)
            or $state[$p:lk] = 115231                       (: '$' 'stable' :)
            or $state[$p:lk] = 115743                       (: '$' 'start' :)
            or $state[$p:lk] = 118303                       (: '$' 'switch' :)
            or $state[$p:lk] = 118815                       (: '$' 'text' :)
            or $state[$p:lk] = 120863                       (: '$' 'to' :)
            or $state[$p:lk] = 121375                       (: '$' 'transform' :)
            or $state[$p:lk] = 121887                       (: '$' 'treat' :)
            or $state[$p:lk] = 122399                       (: '$' 'try' :)
            or $state[$p:lk] = 123935                       (: '$' 'typeswitch' :)
            or $state[$p:lk] = 124447                       (: '$' 'union' :)
            or $state[$p:lk] = 124959                       (: '$' 'unordered' :)
            or $state[$p:lk] = 125471                       (: '$' 'update' :)
            or $state[$p:lk] = 127519                       (: '$' 'validate' :)
            or $state[$p:lk] = 130591                       (: '$' 'where' :)
            or $state[$p:lk] = 132127                       (: '$' 'with' :)
            or $state[$p:lk] = 134175) then                 (: '$' 'xquery' :)
        let $state := p:memoized($state, 2)
        return
          if ($state[$p:lk] != 0) then
            $state
          else
            let $backtrack := $state
            let $state := p:strip-result($state)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-GroupingVariable($input, $state)
            let $state := p:lookahead1W(172, $input, $state) (: S^WS | ('(' ':') | ',' | ':=' | 'as' | 'collation' |
                                                                'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                                                'stable' | 'where' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] = 51                   (: ':=' :)
                    or $state[$p:l1] = 83) then             (: 'as' :)
                let $state :=
                  if ($state[$p:error]) then
                    $state
                  else if ($state[$p:l1] = 83) then         (: 'as' :)
                    let $state :=
                      if ($state[$p:error]) then
                        $state
                      else
                        p:try-TypeDeclaration($input, $state)
                    return $state
                  else
                    $state
                let $state := p:lookahead1W(30, $input, $state) (: S^WS | ('(' ':') | ':=' :)
                let $state := p:consume(51, $input, $state) (: ':=' :)
                let $state := p:lookahead1W(245, $input, $state) (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                                    StringLiteral | URIQualifiedName | QName^Token |
                                                                    S^WS | Wildcard | '$' | '%' | '(' | '(#' |
                                                                    ('(' ':') | '+' | '-' | '.' | '..' | '/' | '//' |
                                                                    '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' |
                                                                    'ancestor' | 'ancestor-or-self' | 'and' | 'array' |
                                                                    'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                                    'cast' | 'castable' | 'child' | 'collation' |
                                                                    'comment' | 'copy' | 'count' | 'declare' |
                                                                    'default' | 'delete' | 'descendant' |
                                                                    'descendant-or-self' | 'descending' | 'div' |
                                                                    'document' | 'document-node' | 'element' | 'else' |
                                                                    'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                                    'every' | 'except' | 'following' |
                                                                    'following-sibling' | 'for' | 'function' | 'ge' |
                                                                    'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                                                    'insert' | 'instance' | 'intersect' | 'invoke' |
                                                                    'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                                    'mod' | 'modify' | 'module' | 'namespace' |
                                                                    'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                                    'order' | 'ordered' | 'parent' | 'preceding' |
                                                                    'preceding-sibling' | 'processing-instruction' |
                                                                    'rename' | 'replace' | 'return' | 'satisfies' |
                                                                    'schema-attribute' | 'schema-element' | 'self' |
                                                                    'some' | 'stable' | 'start' | 'switch' | 'text' |
                                                                    'to' | 'transform' | 'treat' | 'try' |
                                                                    'typeswitch' | 'union' | 'unordered' | 'update' |
                                                                    'validate' | 'where' | 'with' | 'xquery' :)
                let $state :=
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-ExprSingle($input, $state)
                return $state
              else
                $state
            let $state := p:lookahead1W(167, $input, $state) (: S^WS | ('(' ':') | ',' | 'collation' | 'count' | 'for' |
                                                                'group' | 'let' | 'order' | 'return' | 'stable' |
                                                                'where' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] = 96) then             (: 'collation' :)
                let $state := p:consume(96, $input, $state) (: 'collation' :)
                let $state := p:lookahead1W(19, $input, $state) (: StringLiteral | S^WS | ('(' ':') :)
                let $state :=
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-URILiteral($input, $state)
                return $state
              else
                $state
            return
              if (not($state[$p:error])) then
                p:memoize($backtrack, $state, 2, $backtrack[$p:e0], -1, -1)
              else
                p:memoize($backtrack, $state, 2, $backtrack[$p:e0], -2, -2)
      else
        $state
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = -1) then
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-GroupingVariable($input, $state)
        let $state := p:lookahead1W(172, $input, $state)    (: S^WS | ('(' ':') | ',' | ':=' | 'as' | 'collation' |
                                                               'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                                               'stable' | 'where' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 51                       (: ':=' :)
                or $state[$p:l1] = 83) then                 (: 'as' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] = 83) then             (: 'as' :)
                let $state :=
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-TypeDeclaration($input, $state)
                return $state
              else
                $state
            let $state := p:lookahead1W(30, $input, $state) (: S^WS | ('(' ':') | ':=' :)
            let $state := p:consume(51, $input, $state)     (: ':=' :)
            let $state := p:lookahead1W(245, $input, $state) (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                                StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                                Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                                '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                                '?' | '@' | '[' | '``[' | 'ancestor' |
                                                                'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                                'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                                'castable' | 'child' | 'collation' | 'comment' |
                                                                'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                                'descendant' | 'descendant-or-self' | 'descending' |
                                                                'div' | 'document' | 'document-node' | 'element' |
                                                                'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                                'every' | 'except' | 'following' | 'following-sibling' |
                                                                'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                                'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                                'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                                'mod' | 'modify' | 'module' | 'namespace' |
                                                                'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                                'order' | 'ordered' | 'parent' | 'preceding' |
                                                                'preceding-sibling' | 'processing-instruction' |
                                                                'rename' | 'replace' | 'return' | 'satisfies' |
                                                                'schema-attribute' | 'schema-element' | 'self' |
                                                                'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                                'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                                'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                                'xquery' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-ExprSingle($input, $state)
            return $state
          else
            $state
        let $state := p:lookahead1W(167, $input, $state)    (: S^WS | ('(' ':') | ',' | 'collation' | 'count' | 'for' |
                                                               'group' | 'let' | 'order' | 'return' | 'stable' | 'where' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 96) then                 (: 'collation' :)
            let $state := p:consume(96, $input, $state)     (: 'collation' :)
            let $state := p:lookahead1W(19, $input, $state) (: StringLiteral | S^WS | ('(' ':') :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-URILiteral($input, $state)
            return $state
          else
            $state
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ExprSingle($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "GroupingSpec"),
    $state
  )
};

(:~
 : Parse the 1st loop of production GroupingSpecList (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-GroupingSpecList-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(166, $input, $state)        (: S^WS | ('(' ':') | ',' | 'count' | 'for' | 'group' |
                                                               'let' | 'order' | 'return' | 'stable' | 'where' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-GroupingSpec($input, $state)
        return p:parse-GroupingSpecList-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production GroupingSpecList (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-GroupingSpecList-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(166, $input, $state)        (: S^WS | ('(' ':') | ',' | 'count' | 'for' | 'group' |
                                                               'let' | 'order' | 'return' | 'stable' | 'where' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-GroupingSpec($input, $state)
        return p:try-GroupingSpecList-1($input, $state)
};

(:~
 : Parse GroupingSpecList.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-GroupingSpecList($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "GroupingSpecList"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-GroupingSpec($input, $state)
    let $state := p:parse-GroupingSpecList-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "GroupingSpecList"),
    $state
  )
};

(:~
 : Try parsing GroupingSpecList.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-GroupingSpecList($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "GroupingSpecList"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-GroupingSpec($input, $state)
    let $state := p:try-GroupingSpecList-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "GroupingSpecList"),
    $state
  )
};

(:~
 : Parse GroupByClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-GroupByClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "GroupByClause"),
  let $state :=
    let $state := p:consume(145, $input, $state)            (: 'group' :)
    let $state := p:lookahead1W(37, $input, $state)         (: S^WS | ('(' ':') | 'by' :)
    let $state := p:consume(90, $input, $state)             (: 'by' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-GroupingSpecList($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "GroupByClause"),
    $state
  )
};

(:~
 : Try parsing GroupByClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-GroupByClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "GroupByClause"),
  let $state :=
    let $state := p:consume(145, $input, $state)            (: 'group' :)
    let $state := p:lookahead1W(37, $input, $state)         (: S^WS | ('(' ':') | 'by' :)
    let $state := p:consume(90, $input, $state)             (: 'by' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-GroupingSpecList($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "GroupByClause"),
    $state
  )
};

(:~
 : Parse WhereClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-WhereClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "WhereClause"),
  let $state :=
    let $state := p:consume(255, $input, $state)            (: 'where' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "WhereClause"),
    $state
  )
};

(:~
 : Try parsing WhereClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-WhereClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "WhereClause"),
  let $state :=
    let $state := p:consume(255, $input, $state)            (: 'where' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "WhereClause"),
    $state
  )
};

(:~
 : Parse IntermediateClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-IntermediateClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "IntermediateClause"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 136                          (: 'for' :)
            or $state[$p:l1] = 167) then                    (: 'let' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-InitialClause($input, $state)
        return $state
      else if ($state[$p:l1] = 255) then                    (: 'where' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-WhereClause($input, $state)
        return $state
      else if ($state[$p:l1] = 145) then                    (: 'group' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-GroupByClause($input, $state)
        return $state
      else if ($state[$p:l1] = 104) then                    (: 'count' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-CountClause($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-OrderByClause($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "IntermediateClause"),
    $state
  )
};

(:~
 : Try parsing IntermediateClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-IntermediateClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "IntermediateClause"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 136                          (: 'for' :)
            or $state[$p:l1] = 167) then                    (: 'let' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-InitialClause($input, $state)
        return $state
      else if ($state[$p:l1] = 255) then                    (: 'where' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-WhereClause($input, $state)
        return $state
      else if ($state[$p:l1] = 145) then                    (: 'group' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-GroupByClause($input, $state)
        return $state
      else if ($state[$p:l1] = 104) then                    (: 'count' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-CountClause($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-OrderByClause($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "IntermediateClause"),
    $state
  )
};

(:~
 : Parse SlidingWindowClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SlidingWindowClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "SlidingWindowClause"),
  let $state :=
    let $state := p:consume(223, $input, $state)            (: 'sliding' :)
    let $state := p:lookahead1W(77, $input, $state)         (: S^WS | ('(' ':') | 'window' :)
    let $state := p:consume(257, $input, $state)            (: 'window' :)
    let $state := p:lookahead1W(23, $input, $state)         (: S^WS | '$' | ('(' ':') :)
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-VarName($input, $state)
    let $state := p:lookahead1W(104, $input, $state)        (: S^WS | ('(' ':') | 'as' | 'in' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 83) then                     (: 'as' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-TypeDeclaration($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(52, $input, $state)         (: S^WS | ('(' ':') | 'in' :)
    let $state := p:consume(151, $input, $state)            (: 'in' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    let $state := p:lookahead1W(66, $input, $state)         (: S^WS | ('(' ':') | 'start' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-WindowStartCondition($input, $state)
    let $state := p:lookahead1W(112, $input, $state)        (: S^WS | ('(' ':') | 'end' | 'only' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-WindowEndCondition($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "SlidingWindowClause"),
    $state
  )
};

(:~
 : Try parsing SlidingWindowClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-SlidingWindowClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "SlidingWindowClause"),
  let $state :=
    let $state := p:consume(223, $input, $state)            (: 'sliding' :)
    let $state := p:lookahead1W(77, $input, $state)         (: S^WS | ('(' ':') | 'window' :)
    let $state := p:consume(257, $input, $state)            (: 'window' :)
    let $state := p:lookahead1W(23, $input, $state)         (: S^WS | '$' | ('(' ':') :)
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-VarName($input, $state)
    let $state := p:lookahead1W(104, $input, $state)        (: S^WS | ('(' ':') | 'as' | 'in' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 83) then                     (: 'as' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-TypeDeclaration($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(52, $input, $state)         (: S^WS | ('(' ':') | 'in' :)
    let $state := p:consume(151, $input, $state)            (: 'in' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    let $state := p:lookahead1W(66, $input, $state)         (: S^WS | ('(' ':') | 'start' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-WindowStartCondition($input, $state)
    let $state := p:lookahead1W(112, $input, $state)        (: S^WS | ('(' ':') | 'end' | 'only' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-WindowEndCondition($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "SlidingWindowClause"),
    $state
  )
};

(:~
 : Parse WindowEndCondition.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-WindowEndCondition($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "WindowEndCondition"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 189) then                    (: 'only' :)
        let $state := p:consume(189, $input, $state)        (: 'only' :)
        return $state
      else
        $state
    let $state := p:lookahead1W(50, $input, $state)         (: S^WS | ('(' ':') | 'end' :)
    let $state := p:consume(125, $input, $state)            (: 'end' :)
    let $state := p:lookahead1W(155, $input, $state)        (: S^WS | '$' | ('(' ':') | 'at' | 'next' | 'previous' |
                                                               'when' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-WindowVars($input, $state)
    let $state := p:lookahead1W(75, $input, $state)         (: S^WS | ('(' ':') | 'when' :)
    let $state := p:consume(254, $input, $state)            (: 'when' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "WindowEndCondition"),
    $state
  )
};

(:~
 : Try parsing WindowEndCondition.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-WindowEndCondition($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "WindowEndCondition"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 189) then                    (: 'only' :)
        let $state := p:consume(189, $input, $state)        (: 'only' :)
        return $state
      else
        $state
    let $state := p:lookahead1W(50, $input, $state)         (: S^WS | ('(' ':') | 'end' :)
    let $state := p:consume(125, $input, $state)            (: 'end' :)
    let $state := p:lookahead1W(155, $input, $state)        (: S^WS | '$' | ('(' ':') | 'at' | 'next' | 'previous' |
                                                               'when' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-WindowVars($input, $state)
    let $state := p:lookahead1W(75, $input, $state)         (: S^WS | ('(' ':') | 'when' :)
    let $state := p:consume(254, $input, $state)            (: 'when' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "WindowEndCondition"),
    $state
  )
};

(:~
 : Parse NextItem.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-NextItem($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "NextItem"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EQName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "NextItem"),
    $state
  )
};

(:~
 : Try parsing NextItem.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-NextItem($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "NextItem"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EQName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "NextItem"),
    $state
  )
};

(:~
 : Parse PreviousItem.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-PreviousItem($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "PreviousItem"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EQName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "PreviousItem"),
    $state
  )
};

(:~
 : Try parsing PreviousItem.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-PreviousItem($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "PreviousItem"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EQName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "PreviousItem"),
    $state
  )
};

(:~
 : Parse CurrentItem.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CurrentItem($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CurrentItem"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EQName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CurrentItem"),
    $state
  )
};

(:~
 : Try parsing CurrentItem.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CurrentItem($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "CurrentItem"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EQName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "CurrentItem"),
    $state
  )
};

(:~
 : Parse WindowVars.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-WindowVars($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "WindowVars"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 31) then                     (: '$' :)
        let $state := p:consume(31, $input, $state)         (: '$' :)
        let $state := p:lookahead1W(232, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-CurrentItem($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(150, $input, $state)        (: S^WS | ('(' ':') | 'at' | 'next' | 'previous' | 'when' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 85) then                     (: 'at' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-PositionalVar($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(144, $input, $state)        (: S^WS | ('(' ':') | 'next' | 'previous' | 'when' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 205) then                    (: 'previous' :)
        let $state := p:consume(205, $input, $state)        (: 'previous' :)
        let $state := p:lookahead1W(23, $input, $state)     (: S^WS | '$' | ('(' ':') :)
        let $state := p:consume(31, $input, $state)         (: '$' :)
        let $state := p:lookahead1W(232, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-PreviousItem($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(122, $input, $state)        (: S^WS | ('(' ':') | 'next' | 'when' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 180) then                    (: 'next' :)
        let $state := p:consume(180, $input, $state)        (: 'next' :)
        let $state := p:lookahead1W(23, $input, $state)     (: S^WS | '$' | ('(' ':') :)
        let $state := p:consume(31, $input, $state)         (: '$' :)
        let $state := p:lookahead1W(232, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-NextItem($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "WindowVars"),
    $state
  )
};

(:~
 : Try parsing WindowVars.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-WindowVars($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "WindowVars"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 31) then                     (: '$' :)
        let $state := p:consume(31, $input, $state)         (: '$' :)
        let $state := p:lookahead1W(232, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-CurrentItem($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(150, $input, $state)        (: S^WS | ('(' ':') | 'at' | 'next' | 'previous' | 'when' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 85) then                     (: 'at' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-PositionalVar($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(144, $input, $state)        (: S^WS | ('(' ':') | 'next' | 'previous' | 'when' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 205) then                    (: 'previous' :)
        let $state := p:consume(205, $input, $state)        (: 'previous' :)
        let $state := p:lookahead1W(23, $input, $state)     (: S^WS | '$' | ('(' ':') :)
        let $state := p:consume(31, $input, $state)         (: '$' :)
        let $state := p:lookahead1W(232, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-PreviousItem($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(122, $input, $state)        (: S^WS | ('(' ':') | 'next' | 'when' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 180) then                    (: 'next' :)
        let $state := p:consume(180, $input, $state)        (: 'next' :)
        let $state := p:lookahead1W(23, $input, $state)     (: S^WS | '$' | ('(' ':') :)
        let $state := p:consume(31, $input, $state)         (: '$' :)
        let $state := p:lookahead1W(232, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-NextItem($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "WindowVars"),
    $state
  )
};

(:~
 : Parse WindowStartCondition.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-WindowStartCondition($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "WindowStartCondition"),
  let $state :=
    let $state := p:consume(226, $input, $state)            (: 'start' :)
    let $state := p:lookahead1W(155, $input, $state)        (: S^WS | '$' | ('(' ':') | 'at' | 'next' | 'previous' |
                                                               'when' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-WindowVars($input, $state)
    let $state := p:lookahead1W(75, $input, $state)         (: S^WS | ('(' ':') | 'when' :)
    let $state := p:consume(254, $input, $state)            (: 'when' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "WindowStartCondition"),
    $state
  )
};

(:~
 : Try parsing WindowStartCondition.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-WindowStartCondition($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "WindowStartCondition"),
  let $state :=
    let $state := p:consume(226, $input, $state)            (: 'start' :)
    let $state := p:lookahead1W(155, $input, $state)        (: S^WS | '$' | ('(' ':') | 'at' | 'next' | 'previous' |
                                                               'when' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-WindowVars($input, $state)
    let $state := p:lookahead1W(75, $input, $state)         (: S^WS | ('(' ':') | 'when' :)
    let $state := p:consume(254, $input, $state)            (: 'when' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "WindowStartCondition"),
    $state
  )
};

(:~
 : Parse TumblingWindowClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-TumblingWindowClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "TumblingWindowClause"),
  let $state :=
    let $state := p:consume(240, $input, $state)            (: 'tumbling' :)
    let $state := p:lookahead1W(77, $input, $state)         (: S^WS | ('(' ':') | 'window' :)
    let $state := p:consume(257, $input, $state)            (: 'window' :)
    let $state := p:lookahead1W(23, $input, $state)         (: S^WS | '$' | ('(' ':') :)
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-VarName($input, $state)
    let $state := p:lookahead1W(104, $input, $state)        (: S^WS | ('(' ':') | 'as' | 'in' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 83) then                     (: 'as' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-TypeDeclaration($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(52, $input, $state)         (: S^WS | ('(' ':') | 'in' :)
    let $state := p:consume(151, $input, $state)            (: 'in' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    let $state := p:lookahead1W(66, $input, $state)         (: S^WS | ('(' ':') | 'start' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-WindowStartCondition($input, $state)
    let $state := p:lookahead1W(169, $input, $state)        (: S^WS | ('(' ':') | 'count' | 'end' | 'for' | 'group' |
                                                               'let' | 'only' | 'order' | 'return' | 'stable' | 'where' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 125                          (: 'end' :)
            or $state[$p:l1] = 189) then                    (: 'only' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-WindowEndCondition($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "TumblingWindowClause"),
    $state
  )
};

(:~
 : Try parsing TumblingWindowClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-TumblingWindowClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "TumblingWindowClause"),
  let $state :=
    let $state := p:consume(240, $input, $state)            (: 'tumbling' :)
    let $state := p:lookahead1W(77, $input, $state)         (: S^WS | ('(' ':') | 'window' :)
    let $state := p:consume(257, $input, $state)            (: 'window' :)
    let $state := p:lookahead1W(23, $input, $state)         (: S^WS | '$' | ('(' ':') :)
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-VarName($input, $state)
    let $state := p:lookahead1W(104, $input, $state)        (: S^WS | ('(' ':') | 'as' | 'in' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 83) then                     (: 'as' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-TypeDeclaration($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(52, $input, $state)         (: S^WS | ('(' ':') | 'in' :)
    let $state := p:consume(151, $input, $state)            (: 'in' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    let $state := p:lookahead1W(66, $input, $state)         (: S^WS | ('(' ':') | 'start' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-WindowStartCondition($input, $state)
    let $state := p:lookahead1W(169, $input, $state)        (: S^WS | ('(' ':') | 'count' | 'end' | 'for' | 'group' |
                                                               'let' | 'only' | 'order' | 'return' | 'stable' | 'where' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 125                          (: 'end' :)
            or $state[$p:l1] = 189) then                    (: 'only' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-WindowEndCondition($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "TumblingWindowClause"),
    $state
  )
};

(:~
 : Parse WindowClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-WindowClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "WindowClause"),
  let $state :=
    let $state := p:consume(136, $input, $state)            (: 'for' :)
    let $state := p:lookahead1W(130, $input, $state)        (: S^WS | ('(' ':') | 'sliding' | 'tumbling' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 240) then                    (: 'tumbling' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-TumblingWindowClause($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-SlidingWindowClause($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "WindowClause"),
    $state
  )
};

(:~
 : Try parsing WindowClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-WindowClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "WindowClause"),
  let $state :=
    let $state := p:consume(136, $input, $state)            (: 'for' :)
    let $state := p:lookahead1W(130, $input, $state)        (: S^WS | ('(' ':') | 'sliding' | 'tumbling' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 240) then                    (: 'tumbling' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-TumblingWindowClause($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-SlidingWindowClause($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "WindowClause"),
    $state
  )
};

(:~
 : Parse LetBinding.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-LetBinding($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "LetBinding"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 31) then                     (: '$' :)
        let $state := p:consume(31, $input, $state)         (: '$' :)
        let $state := p:lookahead1W(232, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-VarName($input, $state)
        let $state := p:lookahead1W(100, $input, $state)    (: S^WS | ('(' ':') | ':=' | 'as' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 83) then                 (: 'as' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-TypeDeclaration($input, $state)
            return $state
          else
            $state
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTScoreVar($input, $state)
        return $state
    let $state := p:lookahead1W(30, $input, $state)         (: S^WS | ('(' ':') | ':=' :)
    let $state := p:consume(51, $input, $state)             (: ':=' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "LetBinding"),
    $state
  )
};

(:~
 : Try parsing LetBinding.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-LetBinding($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "LetBinding"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 31) then                     (: '$' :)
        let $state := p:consume(31, $input, $state)         (: '$' :)
        let $state := p:lookahead1W(232, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-VarName($input, $state)
        let $state := p:lookahead1W(100, $input, $state)    (: S^WS | ('(' ':') | ':=' | 'as' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 83) then                 (: 'as' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-TypeDeclaration($input, $state)
            return $state
          else
            $state
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTScoreVar($input, $state)
        return $state
    let $state := p:lookahead1W(30, $input, $state)         (: S^WS | ('(' ':') | ':=' :)
    let $state := p:consume(51, $input, $state)             (: ':=' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "LetBinding"),
    $state
  )
};

(:~
 : Parse the 1st loop of production LetClause (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-LetClause-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(166, $input, $state)        (: S^WS | ('(' ':') | ',' | 'count' | 'for' | 'group' |
                                                               'let' | 'order' | 'return' | 'stable' | 'where' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(88, $input, $state)     (: S^WS | '$' | ('(' ':') | 'score' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-LetBinding($input, $state)
        return p:parse-LetClause-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production LetClause (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-LetClause-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(166, $input, $state)        (: S^WS | ('(' ':') | ',' | 'count' | 'for' | 'group' |
                                                               'let' | 'order' | 'return' | 'stable' | 'where' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(88, $input, $state)     (: S^WS | '$' | ('(' ':') | 'score' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-LetBinding($input, $state)
        return p:try-LetClause-1($input, $state)
};

(:~
 : Parse LetClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-LetClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "LetClause"),
  let $state :=
    let $state := p:consume(167, $input, $state)            (: 'let' :)
    let $state := p:lookahead1W(88, $input, $state)         (: S^WS | '$' | ('(' ':') | 'score' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-LetBinding($input, $state)
    let $state := p:parse-LetClause-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "LetClause"),
    $state
  )
};

(:~
 : Try parsing LetClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-LetClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "LetClause"),
  let $state :=
    let $state := p:consume(167, $input, $state)            (: 'let' :)
    let $state := p:lookahead1W(88, $input, $state)         (: S^WS | '$' | ('(' ':') | 'score' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-LetBinding($input, $state)
    let $state := p:try-LetClause-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "LetClause"),
    $state
  )
};

(:~
 : Parse FTScoreVar.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTScoreVar($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTScoreVar"),
  let $state :=
    let $state := p:consume(217, $input, $state)            (: 'score' :)
    let $state := p:lookahead1W(23, $input, $state)         (: S^WS | '$' | ('(' ':') :)
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-VarName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTScoreVar"),
    $state
  )
};

(:~
 : Try parsing FTScoreVar.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTScoreVar($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTScoreVar"),
  let $state :=
    let $state := p:consume(217, $input, $state)            (: 'score' :)
    let $state := p:lookahead1W(23, $input, $state)         (: S^WS | '$' | ('(' ':') :)
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-VarName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTScoreVar"),
    $state
  )
};

(:~
 : Parse PositionalVar.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-PositionalVar($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "PositionalVar"),
  let $state :=
    let $state := p:consume(85, $input, $state)             (: 'at' :)
    let $state := p:lookahead1W(23, $input, $state)         (: S^WS | '$' | ('(' ':') :)
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-VarName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "PositionalVar"),
    $state
  )
};

(:~
 : Try parsing PositionalVar.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-PositionalVar($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "PositionalVar"),
  let $state :=
    let $state := p:consume(85, $input, $state)             (: 'at' :)
    let $state := p:lookahead1W(23, $input, $state)         (: S^WS | '$' | ('(' ':') :)
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-VarName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "PositionalVar"),
    $state
  )
};

(:~
 : Parse AllowingEmpty.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AllowingEmpty($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "AllowingEmpty"),
  let $state :=
    let $state := p:consume(77, $input, $state)             (: 'allowing' :)
    let $state := p:lookahead1W(49, $input, $state)         (: S^WS | ('(' ':') | 'empty' :)
    let $state := p:consume(122, $input, $state)            (: 'empty' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "AllowingEmpty"),
    $state
  )
};

(:~
 : Try parsing AllowingEmpty.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-AllowingEmpty($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "AllowingEmpty"),
  let $state :=
    let $state := p:consume(77, $input, $state)             (: 'allowing' :)
    let $state := p:lookahead1W(49, $input, $state)         (: S^WS | ('(' ':') | 'empty' :)
    let $state := p:consume(122, $input, $state)            (: 'empty' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "AllowingEmpty"),
    $state
  )
};

(:~
 : Parse TypeDeclaration.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-TypeDeclaration($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "TypeDeclaration"),
  let $state :=
    let $state := p:consume(83, $input, $state)             (: 'as' :)
    let $state := p:lookahead1W(239, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-SequenceType($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "TypeDeclaration"),
    $state
  )
};

(:~
 : Try parsing TypeDeclaration.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-TypeDeclaration($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "TypeDeclaration"),
  let $state :=
    let $state := p:consume(83, $input, $state)             (: 'as' :)
    let $state := p:lookahead1W(239, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-SequenceType($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "TypeDeclaration"),
    $state
  )
};

(:~
 : Parse VarName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-VarName($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "VarName"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EQName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "VarName"),
    $state
  )
};

(:~
 : Try parsing VarName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-VarName($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "VarName"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EQName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "VarName"),
    $state
  )
};

(:~
 : Parse ForBinding.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ForBinding($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ForBinding"),
  let $state :=
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-VarName($input, $state)
    let $state := p:lookahead1W(157, $input, $state)        (: S^WS | ('(' ':') | 'allowing' | 'as' | 'at' | 'in' |
                                                               'score' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 83) then                     (: 'as' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-TypeDeclaration($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(149, $input, $state)        (: S^WS | ('(' ':') | 'allowing' | 'at' | 'in' | 'score' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 77) then                     (: 'allowing' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-AllowingEmpty($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(142, $input, $state)        (: S^WS | ('(' ':') | 'at' | 'in' | 'score' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 85) then                     (: 'at' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-PositionalVar($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(117, $input, $state)        (: S^WS | ('(' ':') | 'in' | 'score' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 217) then                    (: 'score' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTScoreVar($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(52, $input, $state)         (: S^WS | ('(' ':') | 'in' :)
    let $state := p:consume(151, $input, $state)            (: 'in' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ForBinding"),
    $state
  )
};

(:~
 : Try parsing ForBinding.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ForBinding($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ForBinding"),
  let $state :=
    let $state := p:consume(31, $input, $state)             (: '$' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-VarName($input, $state)
    let $state := p:lookahead1W(157, $input, $state)        (: S^WS | ('(' ':') | 'allowing' | 'as' | 'at' | 'in' |
                                                               'score' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 83) then                     (: 'as' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-TypeDeclaration($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(149, $input, $state)        (: S^WS | ('(' ':') | 'allowing' | 'at' | 'in' | 'score' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 77) then                     (: 'allowing' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-AllowingEmpty($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(142, $input, $state)        (: S^WS | ('(' ':') | 'at' | 'in' | 'score' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 85) then                     (: 'at' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-PositionalVar($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(117, $input, $state)        (: S^WS | ('(' ':') | 'in' | 'score' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 217) then                    (: 'score' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTScoreVar($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(52, $input, $state)         (: S^WS | ('(' ':') | 'in' :)
    let $state := p:consume(151, $input, $state)            (: 'in' :)
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ForBinding"),
    $state
  )
};

(:~
 : Parse the 1st loop of production ForClause (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ForClause-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(166, $input, $state)        (: S^WS | ('(' ':') | ',' | 'count' | 'for' | 'group' |
                                                               'let' | 'order' | 'return' | 'stable' | 'where' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(23, $input, $state)     (: S^WS | '$' | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ForBinding($input, $state)
        return p:parse-ForClause-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production ForClause (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ForClause-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(166, $input, $state)        (: S^WS | ('(' ':') | ',' | 'count' | 'for' | 'group' |
                                                               'let' | 'order' | 'return' | 'stable' | 'where' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(23, $input, $state)     (: S^WS | '$' | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ForBinding($input, $state)
        return p:try-ForClause-1($input, $state)
};

(:~
 : Parse ForClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ForClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ForClause"),
  let $state :=
    let $state := p:consume(136, $input, $state)            (: 'for' :)
    let $state := p:lookahead1W(23, $input, $state)         (: S^WS | '$' | ('(' ':') :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ForBinding($input, $state)
    let $state := p:parse-ForClause-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ForClause"),
    $state
  )
};

(:~
 : Try parsing ForClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ForClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ForClause"),
  let $state :=
    let $state := p:consume(136, $input, $state)            (: 'for' :)
    let $state := p:lookahead1W(23, $input, $state)         (: S^WS | '$' | ('(' ':') :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ForBinding($input, $state)
    let $state := p:try-ForClause-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ForClause"),
    $state
  )
};

(:~
 : Parse InitialClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-InitialClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "InitialClause"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 136) then                        (: 'for' :)
        let $state := p:lookahead2W(135, $input, $state)    (: S^WS | '$' | ('(' ':') | 'sliding' | 'tumbling' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 16008) then                  (: 'for' '$' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ForClause($input, $state)
        return $state
      else if ($state[$p:lk] = 167) then                    (: 'let' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-LetClause($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-WindowClause($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "InitialClause"),
    $state
  )
};

(:~
 : Try parsing InitialClause.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-InitialClause($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "InitialClause"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 136) then                        (: 'for' :)
        let $state := p:lookahead2W(135, $input, $state)    (: S^WS | '$' | ('(' ':') | 'sliding' | 'tumbling' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 16008) then                  (: 'for' '$' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ForClause($input, $state)
        return $state
      else if ($state[$p:lk] = 167) then                    (: 'let' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-LetClause($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-WindowClause($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "InitialClause"),
    $state
  )
};

(:~
 : Parse the 1st loop of production FLWORExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FLWORExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(164, $input, $state)        (: S^WS | ('(' ':') | 'count' | 'for' | 'group' | 'let' |
                                                               'order' | 'return' | 'stable' | 'where' :)
    return
      if ($state[$p:l1] = 210) then                         (: 'return' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-IntermediateClause($input, $state)
        return p:parse-FLWORExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production FLWORExpr (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FLWORExpr-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(164, $input, $state)        (: S^WS | ('(' ':') | 'count' | 'for' | 'group' | 'let' |
                                                               'order' | 'return' | 'stable' | 'where' :)
    return
      if ($state[$p:l1] = 210) then                         (: 'return' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-IntermediateClause($input, $state)
        return p:try-FLWORExpr-1($input, $state)
};

(:~
 : Parse FLWORExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FLWORExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FLWORExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-InitialClause($input, $state)
    let $state := p:parse-FLWORExpr-1($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ReturnClause($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FLWORExpr"),
    $state
  )
};

(:~
 : Try parsing FLWORExpr.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FLWORExpr($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FLWORExpr"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-InitialClause($input, $state)
    let $state := p:try-FLWORExpr-1($input, $state)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ReturnClause($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FLWORExpr"),
    $state
  )
};

(:~
 : Parse ExprSingle.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ExprSingle($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ExprSingle"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 136) then                        (: 'for' :)
        let $state := p:lookahead2W(218, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | ('(' ':') |
                                                               ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                                               '[' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                                               'contains' | 'count' | 'default' | 'descending' | 'div' |
                                                               'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                                               'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'return' | 'satisfies' | 'sliding' | 'stable' | 'start' |
                                                               'to' | 'transform' | 'treat' | 'tumbling' | 'union' |
                                                               'update' | 'where' | 'with' | '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] eq 159) then                   (: 'invoke' :)
        let $state := p:lookahead2W(211, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                                               ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'updating' | 'where' | 'with' |
                                                               '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] eq 167) then                   (: 'let' :)
        let $state := p:lookahead2W(214, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | ('(' ':') |
                                                               ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                                               '[' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                                               'contains' | 'count' | 'default' | 'descending' | 'div' |
                                                               'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                                               'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'return' | 'satisfies' | 'score' | 'stable' | 'start' |
                                                               'to' | 'transform' | 'treat' | 'union' | 'update' |
                                                               'where' | 'with' | '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] eq 208) then                   (: 'rename' :)
        let $state := p:lookahead2W(210, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                                               ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'return' |
                                                               'satisfies' | 'stable' | 'start' | 'to' | 'transform' |
                                                               'treat' | 'union' | 'update' | 'where' | 'with' | '|' |
                                                               '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] eq 209) then                   (: 'replace' :)
        let $state := p:lookahead2W(216, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                                               ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'return' |
                                                               'satisfies' | 'stable' | 'start' | 'to' | 'transform' |
                                                               'treat' | 'union' | 'update' | 'value' | 'where' |
                                                               'with' | '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] eq 239) then                   (: 'try' :)
        let $state := p:lookahead2W(212, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                                               ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'where' | 'with' | '{' | '|' |
                                                               '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] = (109,                        (: 'delete' :)
                                155)) then                  (: 'insert' :)
        let $state := p:lookahead2W(215, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                                               ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'node' | 'nodes' | 'only' | 'or' | 'order' |
                                                               'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                                               'transform' | 'treat' | 'union' | 'update' | 'where' |
                                                               'with' | '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] = (102,                        (: 'copy' :)
                                128,                        (: 'every' :)
                                224)) then                  (: 'some' :)
        let $state := p:lookahead2W(209, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | ('(' ':') |
                                                               ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                                               '[' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                                               'contains' | 'count' | 'default' | 'descending' | 'div' |
                                                               'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                                               'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                                               'transform' | 'treat' | 'union' | 'update' | 'where' |
                                                               'with' | '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] = (149,                        (: 'if' :)
                                231,                        (: 'switch' :)
                                242)) then                  (: 'typeswitch' :)
        let $state := p:lookahead2W(207, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                                               ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'where' | 'with' | '|' | '||' |
                                                               '}' | '}`' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 17557) then                  (: 'if' '(' :)
        let $state := p:memoized($state, 9)
        return
          if ($state[$p:lk] != 0) then
            $state
          else
            let $backtrack := $state
            let $state := p:strip-result($state)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-IfExpr($input, $state)
            return
              if (not($state[$p:error])) then
                p:memoize($backtrack, $state, 9, $backtrack[$p:e0], -5, -5)
              else
                p:memoize($backtrack, $state, 9, $backtrack[$p:e0], -6, -6)
      else
        $state
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 16008                        (: 'for' '$' :)
            or $state[$p:lk] = 16039                        (: 'let' '$' :)
            or $state[$p:lk] = 111271                       (: 'let' 'score' :)
            or $state[$p:lk] = 114312                       (: 'for' 'sliding' :)
            or $state[$p:lk] = 123016) then                 (: 'for' 'tumbling' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FLWORExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 16000                        (: 'every' '$' :)
            or $state[$p:lk] = 16096) then                  (: 'some' '$' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-QuantifiedExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 17639) then                  (: 'switch' '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-SwitchExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 17650) then                  (: 'typeswitch' '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-TypeswitchExpr($input, $state)
        return $state
      else if ($state[$p:lk] = -5) then
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-IfExpr($input, $state)
        return $state
      else if ($state[$p:lk] = -6) then
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-BasexIfExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 135407) then                 (: 'try' '{' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-TryCatchExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 94363                        (: 'insert' 'node' :)
            or $state[$p:lk] = 94875) then                  (: 'insert' 'nodes' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-InsertExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 94317                        (: 'delete' 'node' :)
            or $state[$p:lk] = 94829) then                  (: 'delete' 'nodes' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-DeleteExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 94416) then                  (: 'rename' 'node' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-RenameExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 94417                        (: 'replace' 'node' :)
            or $state[$p:lk] = 128209) then                 (: 'replace' 'value' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ReplaceExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 126111) then                 (: 'invoke' 'updating' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-UpdatingFunctionCall($input, $state)
        return $state
      else if ($state[$p:lk] = 15974) then                  (: 'copy' '$' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-CopyModifyExpr($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-OrExpr($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ExprSingle"),
    $state
  )
};

(:~
 : Try parsing ExprSingle.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ExprSingle($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ExprSingle"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 136) then                        (: 'for' :)
        let $state := p:lookahead2W(218, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | ('(' ':') |
                                                               ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                                               '[' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                                               'contains' | 'count' | 'default' | 'descending' | 'div' |
                                                               'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                                               'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'return' | 'satisfies' | 'sliding' | 'stable' | 'start' |
                                                               'to' | 'transform' | 'treat' | 'tumbling' | 'union' |
                                                               'update' | 'where' | 'with' | '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] eq 159) then                   (: 'invoke' :)
        let $state := p:lookahead2W(211, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                                               ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'updating' | 'where' | 'with' |
                                                               '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] eq 167) then                   (: 'let' :)
        let $state := p:lookahead2W(214, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | ('(' ':') |
                                                               ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                                               '[' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                                               'contains' | 'count' | 'default' | 'descending' | 'div' |
                                                               'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                                               'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'return' | 'satisfies' | 'score' | 'stable' | 'start' |
                                                               'to' | 'transform' | 'treat' | 'union' | 'update' |
                                                               'where' | 'with' | '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] eq 208) then                   (: 'rename' :)
        let $state := p:lookahead2W(210, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                                               ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'return' |
                                                               'satisfies' | 'stable' | 'start' | 'to' | 'transform' |
                                                               'treat' | 'union' | 'update' | 'where' | 'with' | '|' |
                                                               '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] eq 209) then                   (: 'replace' :)
        let $state := p:lookahead2W(216, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                                               ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'return' |
                                                               'satisfies' | 'stable' | 'start' | 'to' | 'transform' |
                                                               'treat' | 'union' | 'update' | 'value' | 'where' |
                                                               'with' | '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] eq 239) then                   (: 'try' :)
        let $state := p:lookahead2W(212, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                                               ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'where' | 'with' | '{' | '|' |
                                                               '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] = (109,                        (: 'delete' :)
                                155)) then                  (: 'insert' :)
        let $state := p:lookahead2W(215, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                                               ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'node' | 'nodes' | 'only' | 'or' | 'order' |
                                                               'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                                               'transform' | 'treat' | 'union' | 'update' | 'where' |
                                                               'with' | '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] = (102,                        (: 'copy' :)
                                128,                        (: 'every' :)
                                224)) then                  (: 'some' :)
        let $state := p:lookahead2W(209, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | ('(' ':') |
                                                               ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                                               '[' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                                               'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                                               'contains' | 'count' | 'default' | 'descending' | 'div' |
                                                               'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                                               'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                                               'return' | 'satisfies' | 'stable' | 'start' | 'to' |
                                                               'transform' | 'treat' | 'union' | 'update' | 'where' |
                                                               'with' | '|' | '||' | '}' | '}`' :)
        return $state
      else if ($state[$p:l1] = (149,                        (: 'if' :)
                                231,                        (: 'switch' :)
                                242)) then                  (: 'typeswitch' :)
        let $state := p:lookahead2W(207, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | ')' |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | ':' | ';' | '<' |
                                                               '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                                               ']' | 'after' | 'and' | 'as' | 'ascending' | 'before' |
                                                               'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                                               'count' | 'default' | 'descending' | 'div' | 'else' |
                                                               'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' |
                                                               'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'where' | 'with' | '|' | '||' |
                                                               '}' | '}`' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 17557) then                  (: 'if' '(' :)
        let $state := p:memoized($state, 9)
        return
          if ($state[$p:lk] != 0) then
            $state
          else
            let $backtrack := $state
            let $state := p:strip-result($state)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-IfExpr($input, $state)
            return
              if (not($state[$p:error])) then
                p:memoize($backtrack, $state, 9, $backtrack[$p:e0], -5, -5)
              else
                p:memoize($backtrack, $state, 9, $backtrack[$p:e0], -6, -6)
      else
        $state
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 16008                        (: 'for' '$' :)
            or $state[$p:lk] = 16039                        (: 'let' '$' :)
            or $state[$p:lk] = 111271                       (: 'let' 'score' :)
            or $state[$p:lk] = 114312                       (: 'for' 'sliding' :)
            or $state[$p:lk] = 123016) then                 (: 'for' 'tumbling' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FLWORExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 16000                        (: 'every' '$' :)
            or $state[$p:lk] = 16096) then                  (: 'some' '$' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-QuantifiedExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 17639) then                  (: 'switch' '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-SwitchExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 17650) then                  (: 'typeswitch' '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-TypeswitchExpr($input, $state)
        return $state
      else if ($state[$p:lk] = -5) then
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-IfExpr($input, $state)
        return $state
      else if ($state[$p:lk] = -6) then
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-BasexIfExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 135407) then                 (: 'try' '{' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-TryCatchExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 94363                        (: 'insert' 'node' :)
            or $state[$p:lk] = 94875) then                  (: 'insert' 'nodes' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-InsertExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 94317                        (: 'delete' 'node' :)
            or $state[$p:lk] = 94829) then                  (: 'delete' 'nodes' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-DeleteExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 94416) then                  (: 'rename' 'node' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-RenameExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 94417                        (: 'replace' 'node' :)
            or $state[$p:lk] = 128209) then                 (: 'replace' 'value' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ReplaceExpr($input, $state)
        return $state
      else if ($state[$p:lk] = 126111) then                 (: 'invoke' 'updating' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-UpdatingFunctionCall($input, $state)
        return $state
      else if ($state[$p:lk] = 15974) then                  (: 'copy' '$' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-CopyModifyExpr($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-OrExpr($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ExprSingle"),
    $state
  )
};

(:~
 : Parse VarValue.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-VarValue($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "VarValue"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "VarValue"),
    $state
  )
};

(:~
 : Parse ParenthesizedItemType.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ParenthesizedItemType($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ParenthesizedItemType"),
  let $state :=
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(239, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ItemType($input, $state)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ParenthesizedItemType"),
    $state
  )
};

(:~
 : Try parsing ParenthesizedItemType.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ParenthesizedItemType($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ParenthesizedItemType"),
  let $state :=
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(239, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ItemType($input, $state)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ParenthesizedItemType"),
    $state
  )
};

(:~
 : Parse TypedArrayTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-TypedArrayTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "TypedArrayTest"),
  let $state :=
    let $state := p:consume(82, $input, $state)             (: 'array' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(239, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-SequenceType($input, $state)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "TypedArrayTest"),
    $state
  )
};

(:~
 : Try parsing TypedArrayTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-TypedArrayTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "TypedArrayTest"),
  let $state :=
    let $state := p:consume(82, $input, $state)             (: 'array' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(239, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-SequenceType($input, $state)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "TypedArrayTest"),
    $state
  )
};

(:~
 : Parse AnyArrayTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AnyArrayTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "AnyArrayTest"),
  let $state :=
    let $state := p:consume(82, $input, $state)             (: 'array' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(26, $input, $state)         (: S^WS | ('(' ':') | '*' :)
    let $state := p:consume(38, $input, $state)             (: '*' :)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "AnyArrayTest"),
    $state
  )
};

(:~
 : Try parsing AnyArrayTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-AnyArrayTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "AnyArrayTest"),
  let $state :=
    let $state := p:consume(82, $input, $state)             (: 'array' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(26, $input, $state)         (: S^WS | ('(' ':') | '*' :)
    let $state := p:consume(38, $input, $state)             (: '*' :)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "AnyArrayTest"),
    $state
  )
};

(:~
 : Parse ArrayTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ArrayTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ArrayTest"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 82) then                         (: 'array' :)
        let $state := p:lookahead2W(24, $input, $state)     (: S^WS | '(' | ('(' ':') :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      let $state := p:memoized($state, 8)
      return
        if ($state[$p:lk] != 0) then
          $state
        else
          let $backtrack := $state
          let $state := p:strip-result($state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:try-AnyArrayTest($input, $state)
          return
            if (not($state[$p:error])) then
              p:memoize($backtrack, $state, 8, $backtrack[$p:e0], -1, -1)
            else
              p:memoize($backtrack, $state, 8, $backtrack[$p:e0], -2, -2)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = -1) then
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-AnyArrayTest($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-TypedArrayTest($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ArrayTest"),
    $state
  )
};

(:~
 : Try parsing ArrayTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ArrayTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ArrayTest"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 82) then                         (: 'array' :)
        let $state := p:lookahead2W(24, $input, $state)     (: S^WS | '(' | ('(' ':') :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      let $state := p:memoized($state, 8)
      return
        if ($state[$p:lk] != 0) then
          $state
        else
          let $backtrack := $state
          let $state := p:strip-result($state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:try-AnyArrayTest($input, $state)
          return
            if (not($state[$p:error])) then
              p:memoize($backtrack, $state, 8, $backtrack[$p:e0], -1, -1)
            else
              p:memoize($backtrack, $state, 8, $backtrack[$p:e0], -2, -2)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = -1) then
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-AnyArrayTest($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-TypedArrayTest($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ArrayTest"),
    $state
  )
};

(:~
 : Parse AtomicOrUnionType.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AtomicOrUnionType($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "AtomicOrUnionType"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EQName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "AtomicOrUnionType"),
    $state
  )
};

(:~
 : Try parsing AtomicOrUnionType.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-AtomicOrUnionType($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "AtomicOrUnionType"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EQName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "AtomicOrUnionType"),
    $state
  )
};

(:~
 : Parse TypedMapTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-TypedMapTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "TypedMapTest"),
  let $state :=
    let $state := p:consume(171, $input, $state)            (: 'map' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-AtomicOrUnionType($input, $state)
    let $state := p:lookahead1W(27, $input, $state)         (: S^WS | ('(' ':') | ',' :)
    let $state := p:consume(40, $input, $state)             (: ',' :)
    let $state := p:lookahead1W(239, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-SequenceType($input, $state)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "TypedMapTest"),
    $state
  )
};

(:~
 : Try parsing TypedMapTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-TypedMapTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "TypedMapTest"),
  let $state :=
    let $state := p:consume(171, $input, $state)            (: 'map' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-AtomicOrUnionType($input, $state)
    let $state := p:lookahead1W(27, $input, $state)         (: S^WS | ('(' ':') | ',' :)
    let $state := p:consume(40, $input, $state)             (: ',' :)
    let $state := p:lookahead1W(239, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-SequenceType($input, $state)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "TypedMapTest"),
    $state
  )
};

(:~
 : Parse AnyMapTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AnyMapTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "AnyMapTest"),
  let $state :=
    let $state := p:consume(171, $input, $state)            (: 'map' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(26, $input, $state)         (: S^WS | ('(' ':') | '*' :)
    let $state := p:consume(38, $input, $state)             (: '*' :)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "AnyMapTest"),
    $state
  )
};

(:~
 : Try parsing AnyMapTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-AnyMapTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "AnyMapTest"),
  let $state :=
    let $state := p:consume(171, $input, $state)            (: 'map' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(26, $input, $state)         (: S^WS | ('(' ':') | '*' :)
    let $state := p:consume(38, $input, $state)             (: '*' :)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "AnyMapTest"),
    $state
  )
};

(:~
 : Parse MapTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-MapTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "MapTest"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 171) then                        (: 'map' :)
        let $state := p:lookahead2W(24, $input, $state)     (: S^WS | '(' | ('(' ':') :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      let $state := p:memoized($state, 7)
      return
        if ($state[$p:lk] != 0) then
          $state
        else
          let $backtrack := $state
          let $state := p:strip-result($state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:try-AnyMapTest($input, $state)
          return
            if (not($state[$p:error])) then
              p:memoize($backtrack, $state, 7, $backtrack[$p:e0], -1, -1)
            else
              p:memoize($backtrack, $state, 7, $backtrack[$p:e0], -2, -2)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = -1) then
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-AnyMapTest($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-TypedMapTest($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "MapTest"),
    $state
  )
};

(:~
 : Try parsing MapTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-MapTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "MapTest"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 171) then                        (: 'map' :)
        let $state := p:lookahead2W(24, $input, $state)     (: S^WS | '(' | ('(' ':') :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      let $state := p:memoized($state, 7)
      return
        if ($state[$p:lk] != 0) then
          $state
        else
          let $backtrack := $state
          let $state := p:strip-result($state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:try-AnyMapTest($input, $state)
          return
            if (not($state[$p:error])) then
              p:memoize($backtrack, $state, 7, $backtrack[$p:e0], -1, -1)
            else
              p:memoize($backtrack, $state, 7, $backtrack[$p:e0], -2, -2)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = -1) then
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-AnyMapTest($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-TypedMapTest($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "MapTest"),
    $state
  )
};

(:~
 : Parse OccurrenceIndicator.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-OccurrenceIndicator($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "OccurrenceIndicator"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 65) then                     (: '?' :)
        let $state := p:consume(65, $input, $state)         (: '?' :)
        return $state
      else if ($state[$p:l1] = 38) then                     (: '*' :)
        let $state := p:consume(38, $input, $state)         (: '*' :)
        return $state
      else
        let $state := p:consume(39, $input, $state)         (: '+' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "OccurrenceIndicator"),
    $state
  )
};

(:~
 : Try parsing OccurrenceIndicator.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-OccurrenceIndicator($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "OccurrenceIndicator"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 65) then                     (: '?' :)
        let $state := p:consume(65, $input, $state)         (: '?' :)
        return $state
      else if ($state[$p:l1] = 38) then                     (: '*' :)
        let $state := p:consume(38, $input, $state)         (: '*' :)
        return $state
      else
        let $state := p:consume(39, $input, $state)         (: '+' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "OccurrenceIndicator"),
    $state
  )
};

(:~
 : Parse SequenceType.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SequenceType($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "SequenceType"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 123) then                        (: 'empty-sequence' :)
        let $state := p:lookahead2W(213, $input, $state)    (: S^WS | EOF | '!=' | '(' | ('(' ':') | ')' | '*' | '+' |
                                                               ',' | '-' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' |
                                                               '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                                               'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                                               'collation' | 'contains' | 'count' | 'default' |
                                                               'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                                               'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'in' | 'instance' | 'intersect' | 'into' |
                                                               'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                                               'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                                               'satisfies' | 'score' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'union' | 'where' | 'with' |
                                                               'words' | '{' | '|' | '||' | '}' | '}`' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 17531) then                  (: 'empty-sequence' '(' :)
        let $state := p:consume(123, $input, $state)        (: 'empty-sequence' :)
        let $state := p:lookahead1W(24, $input, $state)     (: S^WS | '(' | ('(' ':') :)
        let $state := p:consume(34, $input, $state)         (: '(' :)
        let $state := p:lookahead1W(25, $input, $state)     (: S^WS | ('(' ':') | ')' :)
        let $state := p:consume(37, $input, $state)         (: ')' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ItemType($input, $state)
        let $state := p:lookahead1W(208, $input, $state)    (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                                               '>=' | '>>' | '?' | ']' | 'after' | 'allowing' | 'and' |
                                                               'as' | 'ascending' | 'at' | 'before' | 'case' |
                                                               'collation' | 'contains' | 'count' | 'default' |
                                                               'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                                               'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'in' | 'instance' | 'intersect' | 'into' |
                                                               'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                                               'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                                               'satisfies' | 'score' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'union' | 'where' | 'with' |
                                                               'words' | '{' | '|' | '||' | '}' | '}`' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 38                       (: '*' :)
                or $state[$p:l1] = 39                       (: '+' :)
                or $state[$p:l1] = 65) then                 (: '?' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-OccurrenceIndicator($input, $state)
            return $state
          else
            $state
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "SequenceType"),
    $state
  )
};

(:~
 : Try parsing SequenceType.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-SequenceType($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "SequenceType"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 123) then                        (: 'empty-sequence' :)
        let $state := p:lookahead2W(213, $input, $state)    (: S^WS | EOF | '!=' | '(' | ('(' ':') | ')' | '*' | '+' |
                                                               ',' | '-' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' |
                                                               '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                                               'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                                               'collation' | 'contains' | 'count' | 'default' |
                                                               'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                                               'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'in' | 'instance' | 'intersect' | 'into' |
                                                               'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                                               'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                                               'satisfies' | 'score' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'union' | 'where' | 'with' |
                                                               'words' | '{' | '|' | '||' | '}' | '}`' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 17531) then                  (: 'empty-sequence' '(' :)
        let $state := p:consume(123, $input, $state)        (: 'empty-sequence' :)
        let $state := p:lookahead1W(24, $input, $state)     (: S^WS | '(' | ('(' ':') :)
        let $state := p:consume(34, $input, $state)         (: '(' :)
        let $state := p:lookahead1W(25, $input, $state)     (: S^WS | ('(' ':') | ')' :)
        let $state := p:consume(37, $input, $state)         (: ')' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ItemType($input, $state)
        let $state := p:lookahead1W(208, $input, $state)    (: S^WS | EOF | '!=' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                               '-' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                                               '>=' | '>>' | '?' | ']' | 'after' | 'allowing' | 'and' |
                                                               'as' | 'ascending' | 'at' | 'before' | 'case' |
                                                               'collation' | 'contains' | 'count' | 'default' |
                                                               'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                                               'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'in' | 'instance' | 'intersect' | 'into' |
                                                               'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                                               'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                                               'satisfies' | 'score' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'union' | 'where' | 'with' |
                                                               'words' | '{' | '|' | '||' | '}' | '}`' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 38                       (: '*' :)
                or $state[$p:l1] = 39                       (: '+' :)
                or $state[$p:l1] = 65) then                 (: '?' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-OccurrenceIndicator($input, $state)
            return $state
          else
            $state
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "SequenceType"),
    $state
  )
};

(:~
 : Parse the 1st loop of production TypedFunctionTest (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-TypedFunctionTest-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(92, $input, $state)         (: S^WS | ('(' ':') | ')' | ',' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(239, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-SequenceType($input, $state)
        return p:parse-TypedFunctionTest-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production TypedFunctionTest (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-TypedFunctionTest-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(92, $input, $state)         (: S^WS | ('(' ':') | ')' | ',' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(239, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-SequenceType($input, $state)
        return p:try-TypedFunctionTest-1($input, $state)
};

(:~
 : Parse TypedFunctionTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-TypedFunctionTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "TypedFunctionTest"),
  let $state :=
    let $state := p:consume(142, $input, $state)            (: 'function' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(241, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | ')' | 'ancestor' | 'ancestor-or-self' |
                                                               'and' | 'array' | 'as' | 'ascending' | 'at' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                                               'default' | 'delete' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 37) then                    (: ')' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-SequenceType($input, $state)
        let $state := p:parse-TypedFunctionTest-1($input, $state)
        return $state
      else
        $state
    let $state := p:consume(37, $input, $state)             (: ')' :)
    let $state := p:lookahead1W(33, $input, $state)         (: S^WS | ('(' ':') | 'as' :)
    let $state := p:consume(83, $input, $state)             (: 'as' :)
    let $state := p:lookahead1W(239, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-SequenceType($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "TypedFunctionTest"),
    $state
  )
};

(:~
 : Try parsing TypedFunctionTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-TypedFunctionTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "TypedFunctionTest"),
  let $state :=
    let $state := p:consume(142, $input, $state)            (: 'function' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(241, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | ')' | 'ancestor' | 'ancestor-or-self' |
                                                               'and' | 'array' | 'as' | 'ascending' | 'at' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                                               'default' | 'delete' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 37) then                    (: ')' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-SequenceType($input, $state)
        let $state := p:try-TypedFunctionTest-1($input, $state)
        return $state
      else
        $state
    let $state := p:consume(37, $input, $state)             (: ')' :)
    let $state := p:lookahead1W(33, $input, $state)         (: S^WS | ('(' ':') | 'as' :)
    let $state := p:consume(83, $input, $state)             (: 'as' :)
    let $state := p:lookahead1W(239, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-SequenceType($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "TypedFunctionTest"),
    $state
  )
};

(:~
 : Parse AnyFunctionTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AnyFunctionTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "AnyFunctionTest"),
  let $state :=
    let $state := p:consume(142, $input, $state)            (: 'function' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(26, $input, $state)         (: S^WS | ('(' ':') | '*' :)
    let $state := p:consume(38, $input, $state)             (: '*' :)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "AnyFunctionTest"),
    $state
  )
};

(:~
 : Try parsing AnyFunctionTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-AnyFunctionTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "AnyFunctionTest"),
  let $state :=
    let $state := p:consume(142, $input, $state)            (: 'function' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(26, $input, $state)         (: S^WS | ('(' ':') | '*' :)
    let $state := p:consume(38, $input, $state)             (: '*' :)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "AnyFunctionTest"),
    $state
  )
};

(:~
 : Parse NumericLiteral.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-NumericLiteral($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "NumericLiteral"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 1) then                      (: IntegerLiteral :)
        let $state := p:consume(1, $input, $state)          (: IntegerLiteral :)
        return $state
      else if ($state[$p:l1] = 2) then                      (: DecimalLiteral :)
        let $state := p:consume(2, $input, $state)          (: DecimalLiteral :)
        return $state
      else
        let $state := p:consume(3, $input, $state)          (: DoubleLiteral :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "NumericLiteral"),
    $state
  )
};

(:~
 : Try parsing NumericLiteral.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-NumericLiteral($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "NumericLiteral"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 1) then                      (: IntegerLiteral :)
        let $state := p:consume(1, $input, $state)          (: IntegerLiteral :)
        return $state
      else if ($state[$p:l1] = 2) then                      (: DecimalLiteral :)
        let $state := p:consume(2, $input, $state)          (: DecimalLiteral :)
        return $state
      else
        let $state := p:consume(3, $input, $state)          (: DoubleLiteral :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "NumericLiteral"),
    $state
  )
};

(:~
 : Parse Literal.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Literal($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "Literal"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 4) then                      (: StringLiteral :)
        let $state := p:consume(4, $input, $state)          (: StringLiteral :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-NumericLiteral($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "Literal"),
    $state
  )
};

(:~
 : Try parsing Literal.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-Literal($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "Literal"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 4) then                      (: StringLiteral :)
        let $state := p:consume(4, $input, $state)          (: StringLiteral :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-NumericLiteral($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "Literal"),
    $state
  )
};

(:~
 : Parse the 1st loop of production Annotation (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Annotation-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(92, $input, $state)         (: S^WS | ('(' ':') | ')' | ',' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(145, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | S^WS | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Literal($input, $state)
        return p:parse-Annotation-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production Annotation (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-Annotation-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(92, $input, $state)         (: S^WS | ('(' ':') | ')' | ',' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(145, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | S^WS | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-Literal($input, $state)
        return p:try-Annotation-1($input, $state)
};

(:~
 : Parse Annotation.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Annotation($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "Annotation"),
  let $state :=
    let $state := p:consume(32, $input, $state)             (: '%' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EQName($input, $state)
    let $state := p:lookahead1W(156, $input, $state)        (: S^WS | '%' | '(' | ('(' ':') | 'function' | 'updating' |
                                                               'variable' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 34) then                     (: '(' :)
        let $state := p:consume(34, $input, $state)         (: '(' :)
        let $state := p:lookahead1W(145, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | S^WS | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Literal($input, $state)
        let $state := p:parse-Annotation-1($input, $state)
        let $state := p:consume(37, $input, $state)         (: ')' :)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "Annotation"),
    $state
  )
};

(:~
 : Try parsing Annotation.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-Annotation($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "Annotation"),
  let $state :=
    let $state := p:consume(32, $input, $state)             (: '%' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EQName($input, $state)
    let $state := p:lookahead1W(156, $input, $state)        (: S^WS | '%' | '(' | ('(' ':') | 'function' | 'updating' |
                                                               'variable' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 34) then                     (: '(' :)
        let $state := p:consume(34, $input, $state)         (: '(' :)
        let $state := p:lookahead1W(145, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | S^WS | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-Literal($input, $state)
        let $state := p:try-Annotation-1($input, $state)
        let $state := p:consume(37, $input, $state)         (: ')' :)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "Annotation"),
    $state
  )
};

(:~
 : Parse the 1st loop of production FunctionTest (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FunctionTest-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(89, $input, $state)         (: S^WS | '%' | ('(' ':') | 'function' :)
    return
      if ($state[$p:l1] != 32) then                         (: '%' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Annotation($input, $state)
        return p:parse-FunctionTest-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production FunctionTest (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FunctionTest-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(89, $input, $state)         (: S^WS | '%' | ('(' ':') | 'function' :)
    return
      if ($state[$p:l1] != 32) then                         (: '%' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-Annotation($input, $state)
        return p:try-FunctionTest-1($input, $state)
};

(:~
 : Parse FunctionTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FunctionTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FunctionTest"),
  let $state :=
    let $state := p:parse-FunctionTest-1($input, $state)
    let $state :=
      if ($state[$p:l1] eq 142) then                        (: 'function' :)
        let $state := p:lookahead2W(24, $input, $state)     (: S^WS | '(' | ('(' ':') :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      let $state := p:memoized($state, 6)
      return
        if ($state[$p:lk] != 0) then
          $state
        else
          let $backtrack := $state
          let $state := p:strip-result($state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:try-AnyFunctionTest($input, $state)
          return
            if (not($state[$p:error])) then
              p:memoize($backtrack, $state, 6, $backtrack[$p:e0], -1, -1)
            else
              p:memoize($backtrack, $state, 6, $backtrack[$p:e0], -2, -2)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = -1) then
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-AnyFunctionTest($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-TypedFunctionTest($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FunctionTest"),
    $state
  )
};

(:~
 : Try parsing FunctionTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FunctionTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FunctionTest"),
  let $state :=
    let $state := p:try-FunctionTest-1($input, $state)
    let $state :=
      if ($state[$p:l1] eq 142) then                        (: 'function' :)
        let $state := p:lookahead2W(24, $input, $state)     (: S^WS | '(' | ('(' ':') :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      let $state := p:memoized($state, 6)
      return
        if ($state[$p:lk] != 0) then
          $state
        else
          let $backtrack := $state
          let $state := p:strip-result($state)
          let $state :=
            if ($state[$p:error]) then
              $state
            else
              p:try-AnyFunctionTest($input, $state)
          return
            if (not($state[$p:error])) then
              p:memoize($backtrack, $state, 6, $backtrack[$p:e0], -1, -1)
            else
              p:memoize($backtrack, $state, 6, $backtrack[$p:e0], -2, -2)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = -1) then
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-AnyFunctionTest($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-TypedFunctionTest($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FunctionTest"),
    $state
  )
};

(:~
 : Parse AnyKindTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AnyKindTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "AnyKindTest"),
  let $state :=
    let $state := p:consume(184, $input, $state)            (: 'node' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "AnyKindTest"),
    $state
  )
};

(:~
 : Try parsing AnyKindTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-AnyKindTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "AnyKindTest"),
  let $state :=
    let $state := p:consume(184, $input, $state)            (: 'node' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "AnyKindTest"),
    $state
  )
};

(:~
 : Parse NamespaceNodeTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-NamespaceNodeTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "NamespaceNodeTest"),
  let $state :=
    let $state := p:consume(178, $input, $state)            (: 'namespace-node' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "NamespaceNodeTest"),
    $state
  )
};

(:~
 : Try parsing NamespaceNodeTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-NamespaceNodeTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "NamespaceNodeTest"),
  let $state :=
    let $state := p:consume(178, $input, $state)            (: 'namespace-node' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "NamespaceNodeTest"),
    $state
  )
};

(:~
 : Parse TextTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-TextTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "TextTest"),
  let $state :=
    let $state := p:consume(232, $input, $state)            (: 'text' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "TextTest"),
    $state
  )
};

(:~
 : Try parsing TextTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-TextTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "TextTest"),
  let $state :=
    let $state := p:consume(232, $input, $state)            (: 'text' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "TextTest"),
    $state
  )
};

(:~
 : Parse CommentTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CommentTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CommentTest"),
  let $state :=
    let $state := p:consume(97, $input, $state)             (: 'comment' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CommentTest"),
    $state
  )
};

(:~
 : Try parsing CommentTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-CommentTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "CommentTest"),
  let $state :=
    let $state := p:consume(97, $input, $state)             (: 'comment' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "CommentTest"),
    $state
  )
};

(:~
 : Parse PITest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-PITest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "PITest"),
  let $state :=
    let $state := p:consume(206, $input, $state)            (: 'processing-instruction' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(178, $input, $state)        (: StringLiteral | NCName^Token | S^WS | ('(' ':') | ')' |
                                                               'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                                               'castable' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                                               'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                                               'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                                               'union' | 'where' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 37) then                    (: ')' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 4) then                  (: StringLiteral :)
            let $state := p:consume(4, $input, $state)      (: StringLiteral :)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-NCName($input, $state)
            return $state
        return $state
      else
        $state
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "PITest"),
    $state
  )
};

(:~
 : Try parsing PITest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-PITest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "PITest"),
  let $state :=
    let $state := p:consume(206, $input, $state)            (: 'processing-instruction' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(178, $input, $state)        (: StringLiteral | NCName^Token | S^WS | ('(' ':') | ')' |
                                                               'and' | 'as' | 'ascending' | 'case' | 'cast' |
                                                               'castable' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                                               'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'instance' | 'intersect' | 'is' | 'le' | 'let' | 'lt' |
                                                               'mod' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                                               'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                                               'union' | 'where' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 37) then                    (: ')' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 4) then                  (: StringLiteral :)
            let $state := p:consume(4, $input, $state)      (: StringLiteral :)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-NCName($input, $state)
            return $state
        return $state
      else
        $state
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "PITest"),
    $state
  )
};

(:~
 : Parse AttributeDeclaration.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AttributeDeclaration($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "AttributeDeclaration"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-AttributeName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "AttributeDeclaration"),
    $state
  )
};

(:~
 : Try parsing AttributeDeclaration.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-AttributeDeclaration($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "AttributeDeclaration"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-AttributeName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "AttributeDeclaration"),
    $state
  )
};

(:~
 : Parse SchemaAttributeTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SchemaAttributeTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "SchemaAttributeTest"),
  let $state :=
    let $state := p:consume(215, $input, $state)            (: 'schema-attribute' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-AttributeDeclaration($input, $state)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "SchemaAttributeTest"),
    $state
  )
};

(:~
 : Try parsing SchemaAttributeTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-SchemaAttributeTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "SchemaAttributeTest"),
  let $state :=
    let $state := p:consume(215, $input, $state)            (: 'schema-attribute' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-AttributeDeclaration($input, $state)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "SchemaAttributeTest"),
    $state
  )
};

(:~
 : Parse AttributeName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AttributeName($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "AttributeName"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EQName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "AttributeName"),
    $state
  )
};

(:~
 : Try parsing AttributeName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-AttributeName($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "AttributeName"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EQName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "AttributeName"),
    $state
  )
};

(:~
 : Parse AttribNameOrWildcard.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AttribNameOrWildcard($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "AttribNameOrWildcard"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 38) then                     (: '*' :)
        let $state := p:consume(38, $input, $state)         (: '*' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-AttributeName($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "AttribNameOrWildcard"),
    $state
  )
};

(:~
 : Try parsing AttribNameOrWildcard.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-AttribNameOrWildcard($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "AttribNameOrWildcard"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 38) then                     (: '*' :)
        let $state := p:consume(38, $input, $state)         (: '*' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-AttributeName($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "AttribNameOrWildcard"),
    $state
  )
};

(:~
 : Parse AttributeTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-AttributeTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "AttributeTest"),
  let $state :=
    let $state := p:consume(86, $input, $state)             (: 'attribute' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(238, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') | ')' |
                                                               '*' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 37) then                    (: ')' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-AttribNameOrWildcard($input, $state)
        let $state := p:lookahead1W(92, $input, $state)     (: S^WS | ('(' ':') | ')' | ',' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 40) then                 (: ',' :)
            let $state := p:consume(40, $input, $state)     (: ',' :)
            let $state := p:lookahead1W(232, $input, $state) (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                                'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                                'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                                'castable' | 'child' | 'collation' | 'comment' |
                                                                'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                                'descendant' | 'descendant-or-self' | 'descending' |
                                                                'div' | 'document' | 'document-node' | 'element' |
                                                                'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                                'every' | 'except' | 'following' | 'following-sibling' |
                                                                'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                                'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                                'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                                'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                                'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                                'parent' | 'preceding' | 'preceding-sibling' |
                                                                'processing-instruction' | 'rename' | 'replace' |
                                                                'return' | 'satisfies' | 'schema-attribute' |
                                                                'schema-element' | 'self' | 'some' | 'stable' |
                                                                'start' | 'switch' | 'text' | 'to' | 'transform' |
                                                                'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                                                'update' | 'validate' | 'where' | 'with' | 'xquery' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-TypeName($input, $state)
            return $state
          else
            $state
        return $state
      else
        $state
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "AttributeTest"),
    $state
  )
};

(:~
 : Try parsing AttributeTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-AttributeTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "AttributeTest"),
  let $state :=
    let $state := p:consume(86, $input, $state)             (: 'attribute' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(238, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') | ')' |
                                                               '*' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 37) then                    (: ')' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-AttribNameOrWildcard($input, $state)
        let $state := p:lookahead1W(92, $input, $state)     (: S^WS | ('(' ':') | ')' | ',' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 40) then                 (: ',' :)
            let $state := p:consume(40, $input, $state)     (: ',' :)
            let $state := p:lookahead1W(232, $input, $state) (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                                'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                                'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                                'castable' | 'child' | 'collation' | 'comment' |
                                                                'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                                'descendant' | 'descendant-or-self' | 'descending' |
                                                                'div' | 'document' | 'document-node' | 'element' |
                                                                'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                                'every' | 'except' | 'following' | 'following-sibling' |
                                                                'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                                'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                                'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                                'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                                'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                                'parent' | 'preceding' | 'preceding-sibling' |
                                                                'processing-instruction' | 'rename' | 'replace' |
                                                                'return' | 'satisfies' | 'schema-attribute' |
                                                                'schema-element' | 'self' | 'some' | 'stable' |
                                                                'start' | 'switch' | 'text' | 'to' | 'transform' |
                                                                'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                                                'update' | 'validate' | 'where' | 'with' | 'xquery' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-TypeName($input, $state)
            return $state
          else
            $state
        return $state
      else
        $state
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "AttributeTest"),
    $state
  )
};

(:~
 : Parse ElementDeclaration.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ElementDeclaration($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ElementDeclaration"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ElementName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ElementDeclaration"),
    $state
  )
};

(:~
 : Try parsing ElementDeclaration.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ElementDeclaration($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ElementDeclaration"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ElementName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ElementDeclaration"),
    $state
  )
};

(:~
 : Parse SchemaElementTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SchemaElementTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "SchemaElementTest"),
  let $state :=
    let $state := p:consume(216, $input, $state)            (: 'schema-element' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ElementDeclaration($input, $state)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "SchemaElementTest"),
    $state
  )
};

(:~
 : Try parsing SchemaElementTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-SchemaElementTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "SchemaElementTest"),
  let $state :=
    let $state := p:consume(216, $input, $state)            (: 'schema-element' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-ElementDeclaration($input, $state)
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "SchemaElementTest"),
    $state
  )
};

(:~
 : Parse TypeName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-TypeName($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "TypeName"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EQName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "TypeName"),
    $state
  )
};

(:~
 : Try parsing TypeName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-TypeName($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "TypeName"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EQName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "TypeName"),
    $state
  )
};

(:~
 : Parse ElementName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ElementName($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ElementName"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EQName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ElementName"),
    $state
  )
};

(:~
 : Try parsing ElementName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ElementName($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ElementName"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EQName($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ElementName"),
    $state
  )
};

(:~
 : Parse ElementNameOrWildcard.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ElementNameOrWildcard($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ElementNameOrWildcard"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 38) then                     (: '*' :)
        let $state := p:consume(38, $input, $state)         (: '*' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ElementName($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ElementNameOrWildcard"),
    $state
  )
};

(:~
 : Try parsing ElementNameOrWildcard.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ElementNameOrWildcard($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ElementNameOrWildcard"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 38) then                     (: '*' :)
        let $state := p:consume(38, $input, $state)         (: '*' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ElementName($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ElementNameOrWildcard"),
    $state
  )
};

(:~
 : Parse ElementTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ElementTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ElementTest"),
  let $state :=
    let $state := p:consume(120, $input, $state)            (: 'element' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(238, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') | ')' |
                                                               '*' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 37) then                    (: ')' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ElementNameOrWildcard($input, $state)
        let $state := p:lookahead1W(92, $input, $state)     (: S^WS | ('(' ':') | ')' | ',' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 40) then                 (: ',' :)
            let $state := p:consume(40, $input, $state)     (: ',' :)
            let $state := p:lookahead1W(232, $input, $state) (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                                'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                                'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                                'castable' | 'child' | 'collation' | 'comment' |
                                                                'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                                'descendant' | 'descendant-or-self' | 'descending' |
                                                                'div' | 'document' | 'document-node' | 'element' |
                                                                'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                                'every' | 'except' | 'following' | 'following-sibling' |
                                                                'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                                'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                                'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                                'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                                'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                                'parent' | 'preceding' | 'preceding-sibling' |
                                                                'processing-instruction' | 'rename' | 'replace' |
                                                                'return' | 'satisfies' | 'schema-attribute' |
                                                                'schema-element' | 'self' | 'some' | 'stable' |
                                                                'start' | 'switch' | 'text' | 'to' | 'transform' |
                                                                'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                                                'update' | 'validate' | 'where' | 'with' | 'xquery' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-TypeName($input, $state)
            let $state := p:lookahead1W(93, $input, $state) (: S^WS | ('(' ':') | ')' | '?' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] = 65) then             (: '?' :)
                let $state := p:consume(65, $input, $state) (: '?' :)
                return $state
              else
                $state
            return $state
          else
            $state
        return $state
      else
        $state
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ElementTest"),
    $state
  )
};

(:~
 : Try parsing ElementTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ElementTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ElementTest"),
  let $state :=
    let $state := p:consume(120, $input, $state)            (: 'element' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(238, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') | ')' |
                                                               '*' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 37) then                    (: ')' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ElementNameOrWildcard($input, $state)
        let $state := p:lookahead1W(92, $input, $state)     (: S^WS | ('(' ':') | ')' | ',' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 40) then                 (: ',' :)
            let $state := p:consume(40, $input, $state)     (: ',' :)
            let $state := p:lookahead1W(232, $input, $state) (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                                'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                                'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                                'castable' | 'child' | 'collation' | 'comment' |
                                                                'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                                'descendant' | 'descendant-or-self' | 'descending' |
                                                                'div' | 'document' | 'document-node' | 'element' |
                                                                'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                                'every' | 'except' | 'following' | 'following-sibling' |
                                                                'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                                'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                                'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                                'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                                'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                                'parent' | 'preceding' | 'preceding-sibling' |
                                                                'processing-instruction' | 'rename' | 'replace' |
                                                                'return' | 'satisfies' | 'schema-attribute' |
                                                                'schema-element' | 'self' | 'some' | 'stable' |
                                                                'start' | 'switch' | 'text' | 'to' | 'transform' |
                                                                'treat' | 'try' | 'typeswitch' | 'union' | 'unordered' |
                                                                'update' | 'validate' | 'where' | 'with' | 'xquery' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-TypeName($input, $state)
            let $state := p:lookahead1W(93, $input, $state) (: S^WS | ('(' ':') | ')' | '?' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] = 65) then             (: '?' :)
                let $state := p:consume(65, $input, $state) (: '?' :)
                return $state
              else
                $state
            return $state
          else
            $state
        return $state
      else
        $state
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ElementTest"),
    $state
  )
};

(:~
 : Parse DocumentTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DocumentTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "DocumentTest"),
  let $state :=
    let $state := p:consume(119, $input, $state)            (: 'document-node' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(138, $input, $state)        (: S^WS | ('(' ':') | ')' | 'element' | 'schema-element' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 37) then                    (: ')' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 120) then                (: 'element' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-ElementTest($input, $state)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-SchemaElementTest($input, $state)
            return $state
        return $state
      else
        $state
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "DocumentTest"),
    $state
  )
};

(:~
 : Try parsing DocumentTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-DocumentTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "DocumentTest"),
  let $state :=
    let $state := p:consume(119, $input, $state)            (: 'document-node' :)
    let $state := p:lookahead1W(24, $input, $state)         (: S^WS | '(' | ('(' ':') :)
    let $state := p:consume(34, $input, $state)             (: '(' :)
    let $state := p:lookahead1W(138, $input, $state)        (: S^WS | ('(' ':') | ')' | 'element' | 'schema-element' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 37) then                    (: ')' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 120) then                (: 'element' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-ElementTest($input, $state)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-SchemaElementTest($input, $state)
            return $state
        return $state
      else
        $state
    let $state := p:lookahead1W(25, $input, $state)         (: S^WS | ('(' ':') | ')' :)
    let $state := p:consume(37, $input, $state)             (: ')' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "DocumentTest"),
    $state
  )
};

(:~
 : Parse KindTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-KindTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "KindTest"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 119) then                    (: 'document-node' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-DocumentTest($input, $state)
        return $state
      else if ($state[$p:l1] = 120) then                    (: 'element' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ElementTest($input, $state)
        return $state
      else if ($state[$p:l1] = 86) then                     (: 'attribute' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-AttributeTest($input, $state)
        return $state
      else if ($state[$p:l1] = 216) then                    (: 'schema-element' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-SchemaElementTest($input, $state)
        return $state
      else if ($state[$p:l1] = 215) then                    (: 'schema-attribute' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-SchemaAttributeTest($input, $state)
        return $state
      else if ($state[$p:l1] = 206) then                    (: 'processing-instruction' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-PITest($input, $state)
        return $state
      else if ($state[$p:l1] = 97) then                     (: 'comment' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-CommentTest($input, $state)
        return $state
      else if ($state[$p:l1] = 232) then                    (: 'text' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-TextTest($input, $state)
        return $state
      else if ($state[$p:l1] = 178) then                    (: 'namespace-node' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-NamespaceNodeTest($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-AnyKindTest($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "KindTest"),
    $state
  )
};

(:~
 : Try parsing KindTest.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-KindTest($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "KindTest"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 119) then                    (: 'document-node' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-DocumentTest($input, $state)
        return $state
      else if ($state[$p:l1] = 120) then                    (: 'element' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ElementTest($input, $state)
        return $state
      else if ($state[$p:l1] = 86) then                     (: 'attribute' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-AttributeTest($input, $state)
        return $state
      else if ($state[$p:l1] = 216) then                    (: 'schema-element' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-SchemaElementTest($input, $state)
        return $state
      else if ($state[$p:l1] = 215) then                    (: 'schema-attribute' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-SchemaAttributeTest($input, $state)
        return $state
      else if ($state[$p:l1] = 206) then                    (: 'processing-instruction' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-PITest($input, $state)
        return $state
      else if ($state[$p:l1] = 97) then                     (: 'comment' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-CommentTest($input, $state)
        return $state
      else if ($state[$p:l1] = 232) then                    (: 'text' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-TextTest($input, $state)
        return $state
      else if ($state[$p:l1] = 178) then                    (: 'namespace-node' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-NamespaceNodeTest($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-AnyKindTest($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "KindTest"),
    $state
  )
};

(:~
 : Parse ItemType.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ItemType($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ItemType"),
  let $state :=
    let $state :=
      if ($state[$p:l1] = (86,                              (: 'attribute' :)
                           97,                              (: 'comment' :)
                           119,                             (: 'document-node' :)
                           120,                             (: 'element' :)
                           142,                             (: 'function' :)
                           161,                             (: 'item' :)
                           178,                             (: 'namespace-node' :)
                           184,                             (: 'node' :)
                           206,                             (: 'processing-instruction' :)
                           215,                             (: 'schema-attribute' :)
                           216,                             (: 'schema-element' :)
                           232)) then                       (: 'text' :)
        let $state := p:lookahead2W(213, $input, $state)    (: S^WS | EOF | '!=' | '(' | ('(' ':') | ')' | '*' | '+' |
                                                               ',' | '-' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' |
                                                               '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                                               'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                                               'collation' | 'contains' | 'count' | 'default' |
                                                               'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                                               'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'in' | 'instance' | 'intersect' | 'into' |
                                                               'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                                               'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                                               'satisfies' | 'score' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'union' | 'where' | 'with' |
                                                               'words' | '{' | '|' | '||' | '}' | '}`' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 17494                        (: 'attribute' '(' :)
            or $state[$p:lk] = 17505                        (: 'comment' '(' :)
            or $state[$p:lk] = 17527                        (: 'document-node' '(' :)
            or $state[$p:lk] = 17528                        (: 'element' '(' :)
            or $state[$p:lk] = 17586                        (: 'namespace-node' '(' :)
            or $state[$p:lk] = 17592                        (: 'node' '(' :)
            or $state[$p:lk] = 17614                        (: 'processing-instruction' '(' :)
            or $state[$p:lk] = 17623                        (: 'schema-attribute' '(' :)
            or $state[$p:lk] = 17624                        (: 'schema-element' '(' :)
            or $state[$p:lk] = 17640) then                  (: 'text' '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-KindTest($input, $state)
        return $state
      else if ($state[$p:lk] = 17569) then                  (: 'item' '(' :)
        let $state := p:consume(161, $input, $state)        (: 'item' :)
        let $state := p:lookahead1W(24, $input, $state)     (: S^WS | '(' | ('(' ':') :)
        let $state := p:consume(34, $input, $state)         (: '(' :)
        let $state := p:lookahead1W(25, $input, $state)     (: S^WS | ('(' ':') | ')' :)
        let $state := p:consume(37, $input, $state)         (: ')' :)
        return $state
      else if ($state[$p:lk] = 32                           (: '%' :)
            or $state[$p:lk] = 17550) then                  (: 'function' '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FunctionTest($input, $state)
        return $state
      else if ($state[$p:lk] = 171) then                    (: 'map' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-MapTest($input, $state)
        return $state
      else if ($state[$p:lk] = 82) then                     (: 'array' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ArrayTest($input, $state)
        return $state
      else if ($state[$p:lk] = 34) then                     (: '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ParenthesizedItemType($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-AtomicOrUnionType($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ItemType"),
    $state
  )
};

(:~
 : Try parsing ItemType.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-ItemType($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "ItemType"),
  let $state :=
    let $state :=
      if ($state[$p:l1] = (86,                              (: 'attribute' :)
                           97,                              (: 'comment' :)
                           119,                             (: 'document-node' :)
                           120,                             (: 'element' :)
                           142,                             (: 'function' :)
                           161,                             (: 'item' :)
                           178,                             (: 'namespace-node' :)
                           184,                             (: 'node' :)
                           206,                             (: 'processing-instruction' :)
                           215,                             (: 'schema-attribute' :)
                           216,                             (: 'schema-element' :)
                           232)) then                       (: 'text' :)
        let $state := p:lookahead2W(213, $input, $state)    (: S^WS | EOF | '!=' | '(' | ('(' ':') | ')' | '*' | '+' |
                                                               ',' | '-' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' |
                                                               '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                                               'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                                               'collation' | 'contains' | 'count' | 'default' |
                                                               'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                                               'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                                               'idiv' | 'in' | 'instance' | 'intersect' | 'into' |
                                                               'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                                               'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                                               'satisfies' | 'score' | 'sentences' | 'stable' |
                                                               'start' | 'times' | 'to' | 'union' | 'where' | 'with' |
                                                               'words' | '{' | '|' | '||' | '}' | '}`' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 17494                        (: 'attribute' '(' :)
            or $state[$p:lk] = 17505                        (: 'comment' '(' :)
            or $state[$p:lk] = 17527                        (: 'document-node' '(' :)
            or $state[$p:lk] = 17528                        (: 'element' '(' :)
            or $state[$p:lk] = 17586                        (: 'namespace-node' '(' :)
            or $state[$p:lk] = 17592                        (: 'node' '(' :)
            or $state[$p:lk] = 17614                        (: 'processing-instruction' '(' :)
            or $state[$p:lk] = 17623                        (: 'schema-attribute' '(' :)
            or $state[$p:lk] = 17624                        (: 'schema-element' '(' :)
            or $state[$p:lk] = 17640) then                  (: 'text' '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-KindTest($input, $state)
        return $state
      else if ($state[$p:lk] = 17569) then                  (: 'item' '(' :)
        let $state := p:consume(161, $input, $state)        (: 'item' :)
        let $state := p:lookahead1W(24, $input, $state)     (: S^WS | '(' | ('(' ':') :)
        let $state := p:consume(34, $input, $state)         (: '(' :)
        let $state := p:lookahead1W(25, $input, $state)     (: S^WS | ('(' ':') | ')' :)
        let $state := p:consume(37, $input, $state)         (: ')' :)
        return $state
      else if ($state[$p:lk] = 32                           (: '%' :)
            or $state[$p:lk] = 17550) then                  (: 'function' '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FunctionTest($input, $state)
        return $state
      else if ($state[$p:lk] = 171) then                    (: 'map' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-MapTest($input, $state)
        return $state
      else if ($state[$p:lk] = 82) then                     (: 'array' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ArrayTest($input, $state)
        return $state
      else if ($state[$p:lk] = 34) then                     (: '(' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-ParenthesizedItemType($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-AtomicOrUnionType($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "ItemType"),
    $state
  )
};

(:~
 : Parse ContextItemDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ContextItemDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ContextItemDecl"),
  let $state :=
    let $state := p:consume(107, $input, $state)            (: 'declare' :)
    let $state := p:lookahead1W(43, $input, $state)         (: S^WS | ('(' ':') | 'context' :)
    let $state := p:consume(101, $input, $state)            (: 'context' :)
    let $state := p:lookahead1W(54, $input, $state)         (: S^WS | ('(' ':') | 'item' :)
    let $state := p:consume(161, $input, $state)            (: 'item' :)
    let $state := p:lookahead1W(139, $input, $state)        (: S^WS | ('(' ':') | ':=' | 'as' | 'external' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 83) then                     (: 'as' :)
        let $state := p:consume(83, $input, $state)         (: 'as' :)
        let $state := p:lookahead1W(239, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | '%' | '(' |
                                                               ('(' ':') | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                                               'case' | 'cast' | 'castable' | 'child' | 'collation' |
                                                               'comment' | 'copy' | 'count' | 'declare' | 'default' |
                                                               'delete' | 'descendant' | 'descendant-or-self' |
                                                               'descending' | 'div' | 'document' | 'document-node' |
                                                               'element' | 'else' | 'empty' | 'empty-sequence' | 'end' |
                                                               'eq' | 'every' | 'except' | 'following' |
                                                               'following-sibling' | 'for' | 'function' | 'ge' |
                                                               'group' | 'gt' | 'idiv' | 'if' | 'import' | 'insert' |
                                                               'instance' | 'intersect' | 'invoke' | 'is' | 'item' |
                                                               'le' | 'let' | 'lt' | 'map' | 'mod' | 'modify' |
                                                               'module' | 'namespace' | 'namespace-node' | 'ne' |
                                                               'node' | 'only' | 'or' | 'order' | 'ordered' | 'parent' |
                                                               'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ItemType($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(101, $input, $state)        (: S^WS | ('(' ':') | ':=' | 'external' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 51) then                     (: ':=' :)
        let $state := p:consume(51, $input, $state)         (: ':=' :)
        let $state := p:lookahead1W(245, $input, $state)    (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-VarValue($input, $state)
        return $state
      else
        let $state := p:consume(132, $input, $state)        (: 'external' :)
        let $state := p:lookahead1W(99, $input, $state)     (: S^WS | ('(' ':') | ':=' | ';' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 51) then                 (: ':=' :)
            let $state := p:consume(51, $input, $state)     (: ':=' :)
            let $state := p:lookahead1W(245, $input, $state) (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                                StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                                Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                                '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                                '?' | '@' | '[' | '``[' | 'ancestor' |
                                                                'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                                'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                                'castable' | 'child' | 'collation' | 'comment' |
                                                                'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                                'descendant' | 'descendant-or-self' | 'descending' |
                                                                'div' | 'document' | 'document-node' | 'element' |
                                                                'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                                'every' | 'except' | 'following' | 'following-sibling' |
                                                                'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                                'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                                'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                                'mod' | 'modify' | 'module' | 'namespace' |
                                                                'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                                'order' | 'ordered' | 'parent' | 'preceding' |
                                                                'preceding-sibling' | 'processing-instruction' |
                                                                'rename' | 'replace' | 'return' | 'satisfies' |
                                                                'schema-attribute' | 'schema-element' | 'self' |
                                                                'some' | 'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                                'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                                'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                                'xquery' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-VarDefaultValue($input, $state)
            return $state
          else
            $state
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ContextItemDecl"),
    $state
  )
};

(:~
 : Parse FTExtensionOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTExtensionOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTExtensionOption"),
  let $state :=
    let $state := p:consume(190, $input, $state)            (: 'option' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-EQName($input, $state)
    let $state := p:lookahead1W(19, $input, $state)         (: StringLiteral | S^WS | ('(' ':') :)
    let $state := p:consume(4, $input, $state)              (: StringLiteral :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTExtensionOption"),
    $state
  )
};

(:~
 : Try parsing FTExtensionOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTExtensionOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTExtensionOption"),
  let $state :=
    let $state := p:consume(190, $input, $state)            (: 'option' :)
    let $state := p:lookahead1W(232, $input, $state)        (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-EQName($input, $state)
    let $state := p:lookahead1W(19, $input, $state)         (: StringLiteral | S^WS | ('(' ':') :)
    let $state := p:consume(4, $input, $state)              (: StringLiteral :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTExtensionOption"),
    $state
  )
};

(:~
 : Parse FTStopWordsInclExcl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTStopWordsInclExcl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTStopWordsInclExcl"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 243) then                    (: 'union' :)
        let $state := p:consume(243, $input, $state)        (: 'union' :)
        return $state
      else
        let $state := p:consume(130, $input, $state)        (: 'except' :)
        return $state
    let $state := p:lookahead1W(90, $input, $state)         (: S^WS | '(' | ('(' ':') | 'at' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-FTStopWords($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTStopWordsInclExcl"),
    $state
  )
};

(:~
 : Try parsing FTStopWordsInclExcl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTStopWordsInclExcl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTStopWordsInclExcl"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 243) then                    (: 'union' :)
        let $state := p:consume(243, $input, $state)        (: 'union' :)
        return $state
      else
        let $state := p:consume(130, $input, $state)        (: 'except' :)
        return $state
    let $state := p:lookahead1W(90, $input, $state)         (: S^WS | '(' | ('(' ':') | 'at' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-FTStopWords($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTStopWordsInclExcl"),
    $state
  )
};

(:~
 : Parse the 1st loop of production FTStopWords (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTStopWords-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(92, $input, $state)         (: S^WS | ('(' ':') | ')' | ',' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(19, $input, $state)     (: StringLiteral | S^WS | ('(' ':') :)
        let $state := p:consume(4, $input, $state)          (: StringLiteral :)
        return p:parse-FTStopWords-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production FTStopWords (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTStopWords-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(92, $input, $state)         (: S^WS | ('(' ':') | ')' | ',' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(19, $input, $state)     (: StringLiteral | S^WS | ('(' ':') :)
        let $state := p:consume(4, $input, $state)          (: StringLiteral :)
        return p:try-FTStopWords-1($input, $state)
};

(:~
 : Parse FTStopWords.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTStopWords($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTStopWords"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 85) then                     (: 'at' :)
        let $state := p:consume(85, $input, $state)         (: 'at' :)
        let $state := p:lookahead1W(19, $input, $state)     (: StringLiteral | S^WS | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-URILiteral($input, $state)
        return $state
      else
        let $state := p:consume(34, $input, $state)         (: '(' :)
        let $state := p:lookahead1W(19, $input, $state)     (: StringLiteral | S^WS | ('(' ':') :)
        let $state := p:consume(4, $input, $state)          (: StringLiteral :)
        let $state := p:parse-FTStopWords-1($input, $state)
        let $state := p:consume(37, $input, $state)         (: ')' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTStopWords"),
    $state
  )
};

(:~
 : Try parsing FTStopWords.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTStopWords($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTStopWords"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 85) then                     (: 'at' :)
        let $state := p:consume(85, $input, $state)         (: 'at' :)
        let $state := p:lookahead1W(19, $input, $state)     (: StringLiteral | S^WS | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-URILiteral($input, $state)
        return $state
      else
        let $state := p:consume(34, $input, $state)         (: '(' :)
        let $state := p:lookahead1W(19, $input, $state)     (: StringLiteral | S^WS | ('(' ':') :)
        let $state := p:consume(4, $input, $state)          (: StringLiteral :)
        let $state := p:try-FTStopWords-1($input, $state)
        let $state := p:consume(37, $input, $state)         (: ')' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTStopWords"),
    $state
  )
};

(:~
 : Parse the 1st loop of production FTStopWordOption (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTStopWordOption-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(193, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' |
                                                               'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                                               'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' |
                                                               'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' |
                                                               'satisfies' | 'stable' | 'start' | 'union' | 'using' |
                                                               'weight' | 'where' | 'window' | 'with' | 'without' |
                                                               '}' | '}`' :)
    return
      if ($state[$p:l1] != 130                              (: 'except' :)
      and $state[$p:l1] != 243) then                        (: 'union' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTStopWordsInclExcl($input, $state)
        return p:parse-FTStopWordOption-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production FTStopWordOption (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTStopWordOption-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(193, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' |
                                                               'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                                               'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' |
                                                               'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' |
                                                               'satisfies' | 'stable' | 'start' | 'union' | 'using' |
                                                               'weight' | 'where' | 'window' | 'with' | 'without' |
                                                               '}' | '}`' :)
    return
      if ($state[$p:l1] != 130                              (: 'except' :)
      and $state[$p:l1] != 243) then                        (: 'union' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTStopWordsInclExcl($input, $state)
        return p:try-FTStopWordOption-1($input, $state)
};

(:~
 : Parse the 2nd loop of production FTStopWordOption (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTStopWordOption-2($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(193, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' |
                                                               'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                                               'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' |
                                                               'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' |
                                                               'satisfies' | 'stable' | 'start' | 'union' | 'using' |
                                                               'weight' | 'where' | 'window' | 'with' | 'without' |
                                                               '}' | '}`' :)
    return
      if ($state[$p:l1] != 130                              (: 'except' :)
      and $state[$p:l1] != 243) then                        (: 'union' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTStopWordsInclExcl($input, $state)
        return p:parse-FTStopWordOption-2($input, $state)
};

(:~
 : Try parsing the 2nd loop of production FTStopWordOption (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTStopWordOption-2($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(193, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'except' | 'for' |
                                                               'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                                               'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' |
                                                               'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' |
                                                               'satisfies' | 'stable' | 'start' | 'union' | 'using' |
                                                               'weight' | 'where' | 'window' | 'with' | 'without' |
                                                               '}' | '}`' :)
    return
      if ($state[$p:l1] != 130                              (: 'except' :)
      and $state[$p:l1] != 243) then                        (: 'union' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTStopWordsInclExcl($input, $state)
        return p:try-FTStopWordOption-2($input, $state)
};

(:~
 : Parse FTStopWordOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTStopWordOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTStopWordOption"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 228) then                    (: 'stop' :)
        let $state := p:consume(228, $input, $state)        (: 'stop' :)
        let $state := p:lookahead1W(79, $input, $state)     (: S^WS | ('(' ':') | 'words' :)
        let $state := p:consume(261, $input, $state)        (: 'words' :)
        let $state := p:lookahead1W(136, $input, $state)    (: S^WS | '(' | ('(' ':') | 'at' | 'default' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 108) then                (: 'default' :)
            let $state := p:consume(108, $input, $state)    (: 'default' :)
            let $state := p:parse-FTStopWordOption-2($input, $state)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-FTStopWords($input, $state)
            let $state := p:parse-FTStopWordOption-1($input, $state)
            return $state
        return $state
      else
        let $state := p:consume(181, $input, $state)        (: 'no' :)
        let $state := p:lookahead1W(68, $input, $state)     (: S^WS | ('(' ':') | 'stop' :)
        let $state := p:consume(228, $input, $state)        (: 'stop' :)
        let $state := p:lookahead1W(79, $input, $state)     (: S^WS | ('(' ':') | 'words' :)
        let $state := p:consume(261, $input, $state)        (: 'words' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTStopWordOption"),
    $state
  )
};

(:~
 : Try parsing FTStopWordOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTStopWordOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTStopWordOption"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 228) then                    (: 'stop' :)
        let $state := p:consume(228, $input, $state)        (: 'stop' :)
        let $state := p:lookahead1W(79, $input, $state)     (: S^WS | ('(' ':') | 'words' :)
        let $state := p:consume(261, $input, $state)        (: 'words' :)
        let $state := p:lookahead1W(136, $input, $state)    (: S^WS | '(' | ('(' ':') | 'at' | 'default' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 108) then                (: 'default' :)
            let $state := p:consume(108, $input, $state)    (: 'default' :)
            let $state := p:try-FTStopWordOption-2($input, $state)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-FTStopWords($input, $state)
            let $state := p:try-FTStopWordOption-1($input, $state)
            return $state
        return $state
      else
        let $state := p:consume(181, $input, $state)        (: 'no' :)
        let $state := p:lookahead1W(68, $input, $state)     (: S^WS | ('(' ':') | 'stop' :)
        let $state := p:consume(228, $input, $state)        (: 'stop' :)
        let $state := p:lookahead1W(79, $input, $state)     (: S^WS | ('(' ':') | 'words' :)
        let $state := p:consume(261, $input, $state)        (: 'words' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTStopWordOption"),
    $state
  )
};

(:~
 : Parse FTDiacriticsOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTDiacriticsOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTDiacriticsOption"),
  let $state :=
    let $state := p:consume(113, $input, $state)            (: 'diacritics' :)
    let $state := p:lookahead1W(119, $input, $state)        (: S^WS | ('(' ':') | 'insensitive' | 'sensitive' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 154) then                    (: 'insensitive' :)
        let $state := p:consume(154, $input, $state)        (: 'insensitive' :)
        return $state
      else
        let $state := p:consume(219, $input, $state)        (: 'sensitive' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTDiacriticsOption"),
    $state
  )
};

(:~
 : Try parsing FTDiacriticsOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTDiacriticsOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTDiacriticsOption"),
  let $state :=
    let $state := p:consume(113, $input, $state)            (: 'diacritics' :)
    let $state := p:lookahead1W(119, $input, $state)        (: S^WS | ('(' ':') | 'insensitive' | 'sensitive' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 154) then                    (: 'insensitive' :)
        let $state := p:consume(154, $input, $state)        (: 'insensitive' :)
        return $state
      else
        let $state := p:consume(219, $input, $state)        (: 'sensitive' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTDiacriticsOption"),
    $state
  )
};

(:~
 : Parse FTCaseOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTCaseOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTCaseOption"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 91) then                     (: 'case' :)
        let $state := p:consume(91, $input, $state)         (: 'case' :)
        let $state := p:lookahead1W(119, $input, $state)    (: S^WS | ('(' ':') | 'insensitive' | 'sensitive' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 154) then                (: 'insensitive' :)
            let $state := p:consume(154, $input, $state)    (: 'insensitive' :)
            return $state
          else
            let $state := p:consume(219, $input, $state)    (: 'sensitive' :)
            return $state
        return $state
      else if ($state[$p:l1] = 169) then                    (: 'lowercase' :)
        let $state := p:consume(169, $input, $state)        (: 'lowercase' :)
        return $state
      else
        let $state := p:consume(247, $input, $state)        (: 'uppercase' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTCaseOption"),
    $state
  )
};

(:~
 : Try parsing FTCaseOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTCaseOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTCaseOption"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 91) then                     (: 'case' :)
        let $state := p:consume(91, $input, $state)         (: 'case' :)
        let $state := p:lookahead1W(119, $input, $state)    (: S^WS | ('(' ':') | 'insensitive' | 'sensitive' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 154) then                (: 'insensitive' :)
            let $state := p:consume(154, $input, $state)    (: 'insensitive' :)
            return $state
          else
            let $state := p:consume(219, $input, $state)    (: 'sensitive' :)
            return $state
        return $state
      else if ($state[$p:l1] = 169) then                    (: 'lowercase' :)
        let $state := p:consume(169, $input, $state)        (: 'lowercase' :)
        return $state
      else
        let $state := p:consume(247, $input, $state)        (: 'uppercase' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTCaseOption"),
    $state
  )
};

(:~
 : Parse FTStemOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTStemOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTStemOption"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 227) then                    (: 'stemming' :)
        let $state := p:consume(227, $input, $state)        (: 'stemming' :)
        return $state
      else
        let $state := p:consume(181, $input, $state)        (: 'no' :)
        let $state := p:lookahead1W(67, $input, $state)     (: S^WS | ('(' ':') | 'stemming' :)
        let $state := p:consume(227, $input, $state)        (: 'stemming' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTStemOption"),
    $state
  )
};

(:~
 : Try parsing FTStemOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTStemOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTStemOption"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 227) then                    (: 'stemming' :)
        let $state := p:consume(227, $input, $state)        (: 'stemming' :)
        return $state
      else
        let $state := p:consume(181, $input, $state)        (: 'no' :)
        let $state := p:lookahead1W(67, $input, $state)     (: S^WS | ('(' ':') | 'stemming' :)
        let $state := p:consume(227, $input, $state)        (: 'stemming' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTStemOption"),
    $state
  )
};

(:~
 : Parse FTLiteralRange.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTLiteralRange($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTLiteralRange"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 129) then                    (: 'exactly' :)
        let $state := p:consume(129, $input, $state)        (: 'exactly' :)
        let $state := p:lookahead1W(18, $input, $state)     (: IntegerLiteral | S^WS | ('(' ':') :)
        let $state := p:consume(1, $input, $state)          (: IntegerLiteral :)
        return $state
      else if ($state[$p:l1] = 85) then                     (: 'at' :)
        let $state := p:consume(85, $input, $state)         (: 'at' :)
        let $state := p:lookahead1W(120, $input, $state)    (: S^WS | ('(' ':') | 'least' | 'most' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 166) then                (: 'least' :)
            let $state := p:consume(166, $input, $state)    (: 'least' :)
            let $state := p:lookahead1W(18, $input, $state) (: IntegerLiteral | S^WS | ('(' ':') :)
            let $state := p:consume(1, $input, $state)      (: IntegerLiteral :)
            return $state
          else
            let $state := p:consume(176, $input, $state)    (: 'most' :)
            let $state := p:lookahead1W(18, $input, $state) (: IntegerLiteral | S^WS | ('(' ':') :)
            let $state := p:consume(1, $input, $state)      (: IntegerLiteral :)
            return $state
        return $state
      else
        let $state := p:consume(137, $input, $state)        (: 'from' :)
        let $state := p:lookahead1W(18, $input, $state)     (: IntegerLiteral | S^WS | ('(' ':') :)
        let $state := p:consume(1, $input, $state)          (: IntegerLiteral :)
        let $state := p:lookahead1W(72, $input, $state)     (: S^WS | ('(' ':') | 'to' :)
        let $state := p:consume(236, $input, $state)        (: 'to' :)
        let $state := p:lookahead1W(18, $input, $state)     (: IntegerLiteral | S^WS | ('(' ':') :)
        let $state := p:consume(1, $input, $state)          (: IntegerLiteral :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTLiteralRange"),
    $state
  )
};

(:~
 : Try parsing FTLiteralRange.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTLiteralRange($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTLiteralRange"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 129) then                    (: 'exactly' :)
        let $state := p:consume(129, $input, $state)        (: 'exactly' :)
        let $state := p:lookahead1W(18, $input, $state)     (: IntegerLiteral | S^WS | ('(' ':') :)
        let $state := p:consume(1, $input, $state)          (: IntegerLiteral :)
        return $state
      else if ($state[$p:l1] = 85) then                     (: 'at' :)
        let $state := p:consume(85, $input, $state)         (: 'at' :)
        let $state := p:lookahead1W(120, $input, $state)    (: S^WS | ('(' ':') | 'least' | 'most' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 166) then                (: 'least' :)
            let $state := p:consume(166, $input, $state)    (: 'least' :)
            let $state := p:lookahead1W(18, $input, $state) (: IntegerLiteral | S^WS | ('(' ':') :)
            let $state := p:consume(1, $input, $state)      (: IntegerLiteral :)
            return $state
          else
            let $state := p:consume(176, $input, $state)    (: 'most' :)
            let $state := p:lookahead1W(18, $input, $state) (: IntegerLiteral | S^WS | ('(' ':') :)
            let $state := p:consume(1, $input, $state)      (: IntegerLiteral :)
            return $state
        return $state
      else
        let $state := p:consume(137, $input, $state)        (: 'from' :)
        let $state := p:lookahead1W(18, $input, $state)     (: IntegerLiteral | S^WS | ('(' ':') :)
        let $state := p:consume(1, $input, $state)          (: IntegerLiteral :)
        let $state := p:lookahead1W(72, $input, $state)     (: S^WS | ('(' ':') | 'to' :)
        let $state := p:consume(236, $input, $state)        (: 'to' :)
        let $state := p:lookahead1W(18, $input, $state)     (: IntegerLiteral | S^WS | ('(' ':') :)
        let $state := p:consume(1, $input, $state)          (: IntegerLiteral :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTLiteralRange"),
    $state
  )
};

(:~
 : Parse FTThesaurusID.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTThesaurusID($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTThesaurusID"),
  let $state :=
    let $state := p:consume(85, $input, $state)             (: 'at' :)
    let $state := p:lookahead1W(19, $input, $state)         (: StringLiteral | S^WS | ('(' ':') :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-URILiteral($input, $state)
    let $state := p:lookahead1W(196, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'for' |
                                                               'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                                               'not' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'relationship' | 'return' | 'same' | 'satisfies' |
                                                               'stable' | 'start' | 'using' | 'weight' | 'where' |
                                                               'window' | 'with' | 'without' | '}' | '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 207) then                    (: 'relationship' :)
        let $state := p:consume(207, $input, $state)        (: 'relationship' :)
        let $state := p:lookahead1W(19, $input, $state)     (: StringLiteral | S^WS | ('(' ':') :)
        let $state := p:consume(4, $input, $state)          (: StringLiteral :)
        return $state
      else
        $state
    let $state := p:lookahead1W(192, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'for' |
                                                               'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                                               'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                                               'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                                               'weight' | 'where' | 'window' | 'with' | 'without' |
                                                               '}' | '}`' :)
    let $state :=
      if ($state[$p:l1] eq 85) then                         (: 'at' :)
        let $state := p:lookahead2W(151, $input, $state)    (: S^WS | ('(' ':') | 'end' | 'least' | 'most' | 'start' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 129                          (: 'exactly' :)
            or $state[$p:lk] = 137                          (: 'from' :)
            or $state[$p:lk] = 85077                        (: 'at' 'least' :)
            or $state[$p:lk] = 90197) then                  (: 'at' 'most' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTLiteralRange($input, $state)
        let $state := p:lookahead1W(55, $input, $state)     (: S^WS | ('(' ':') | 'levels' :)
        let $state := p:consume(168, $input, $state)        (: 'levels' :)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTThesaurusID"),
    $state
  )
};

(:~
 : Try parsing FTThesaurusID.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTThesaurusID($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTThesaurusID"),
  let $state :=
    let $state := p:consume(85, $input, $state)             (: 'at' :)
    let $state := p:lookahead1W(19, $input, $state)         (: StringLiteral | S^WS | ('(' ':') :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-URILiteral($input, $state)
    let $state := p:lookahead1W(196, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'for' |
                                                               'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                                               'not' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'relationship' | 'return' | 'same' | 'satisfies' |
                                                               'stable' | 'start' | 'using' | 'weight' | 'where' |
                                                               'window' | 'with' | 'without' | '}' | '}`' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 207) then                    (: 'relationship' :)
        let $state := p:consume(207, $input, $state)        (: 'relationship' :)
        let $state := p:lookahead1W(19, $input, $state)     (: StringLiteral | S^WS | ('(' ':') :)
        let $state := p:consume(4, $input, $state)          (: StringLiteral :)
        return $state
      else
        $state
    let $state := p:lookahead1W(192, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'exactly' | 'for' |
                                                               'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' |
                                                               'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                                               'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                                               'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                                               'weight' | 'where' | 'window' | 'with' | 'without' |
                                                               '}' | '}`' :)
    let $state :=
      if ($state[$p:l1] eq 85) then                         (: 'at' :)
        let $state := p:lookahead2W(151, $input, $state)    (: S^WS | ('(' ':') | 'end' | 'least' | 'most' | 'start' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 129                          (: 'exactly' :)
            or $state[$p:lk] = 137                          (: 'from' :)
            or $state[$p:lk] = 85077                        (: 'at' 'least' :)
            or $state[$p:lk] = 90197) then                  (: 'at' 'most' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTLiteralRange($input, $state)
        let $state := p:lookahead1W(55, $input, $state)     (: S^WS | ('(' ':') | 'levels' :)
        let $state := p:consume(168, $input, $state)        (: 'levels' :)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTThesaurusID"),
    $state
  )
};

(:~
 : Parse the 1st loop of production FTThesaurusOption (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTThesaurusOption-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(92, $input, $state)         (: S^WS | ('(' ':') | ')' | ',' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(34, $input, $state)     (: S^WS | ('(' ':') | 'at' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTThesaurusID($input, $state)
        return p:parse-FTThesaurusOption-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production FTThesaurusOption (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTThesaurusOption-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(92, $input, $state)         (: S^WS | ('(' ':') | ')' | ',' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(34, $input, $state)     (: S^WS | ('(' ':') | 'at' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTThesaurusID($input, $state)
        return p:try-FTThesaurusOption-1($input, $state)
};

(:~
 : Parse FTThesaurusOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTThesaurusOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTThesaurusOption"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 234) then                    (: 'thesaurus' :)
        let $state := p:consume(234, $input, $state)        (: 'thesaurus' :)
        let $state := p:lookahead1W(136, $input, $state)    (: S^WS | '(' | ('(' ':') | 'at' | 'default' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 85) then                 (: 'at' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-FTThesaurusID($input, $state)
            return $state
          else if ($state[$p:l1] = 108) then                (: 'default' :)
            let $state := p:consume(108, $input, $state)    (: 'default' :)
            return $state
          else
            let $state := p:consume(34, $input, $state)     (: '(' :)
            let $state := p:lookahead1W(106, $input, $state) (: S^WS | ('(' ':') | 'at' | 'default' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] = 85) then             (: 'at' :)
                let $state :=
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-FTThesaurusID($input, $state)
                return $state
              else
                let $state := p:consume(108, $input, $state) (: 'default' :)
                return $state
            let $state := p:parse-FTThesaurusOption-1($input, $state)
            let $state := p:consume(37, $input, $state)     (: ')' :)
            return $state
        return $state
      else
        let $state := p:consume(181, $input, $state)        (: 'no' :)
        let $state := p:lookahead1W(71, $input, $state)     (: S^WS | ('(' ':') | 'thesaurus' :)
        let $state := p:consume(234, $input, $state)        (: 'thesaurus' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTThesaurusOption"),
    $state
  )
};

(:~
 : Try parsing FTThesaurusOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTThesaurusOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTThesaurusOption"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 234) then                    (: 'thesaurus' :)
        let $state := p:consume(234, $input, $state)        (: 'thesaurus' :)
        let $state := p:lookahead1W(136, $input, $state)    (: S^WS | '(' | ('(' ':') | 'at' | 'default' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 85) then                 (: 'at' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-FTThesaurusID($input, $state)
            return $state
          else if ($state[$p:l1] = 108) then                (: 'default' :)
            let $state := p:consume(108, $input, $state)    (: 'default' :)
            return $state
          else
            let $state := p:consume(34, $input, $state)     (: '(' :)
            let $state := p:lookahead1W(106, $input, $state) (: S^WS | ('(' ':') | 'at' | 'default' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else if ($state[$p:l1] = 85) then             (: 'at' :)
                let $state :=
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-FTThesaurusID($input, $state)
                return $state
              else
                let $state := p:consume(108, $input, $state) (: 'default' :)
                return $state
            let $state := p:try-FTThesaurusOption-1($input, $state)
            let $state := p:consume(37, $input, $state)     (: ')' :)
            return $state
        return $state
      else
        let $state := p:consume(181, $input, $state)        (: 'no' :)
        let $state := p:lookahead1W(71, $input, $state)     (: S^WS | ('(' ':') | 'thesaurus' :)
        let $state := p:consume(234, $input, $state)        (: 'thesaurus' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTThesaurusOption"),
    $state
  )
};

(:~
 : Parse FTWildCardOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTWildCardOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTWildCardOption"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 256) then                    (: 'wildcards' :)
        let $state := p:consume(256, $input, $state)        (: 'wildcards' :)
        return $state
      else
        let $state := p:consume(181, $input, $state)        (: 'no' :)
        let $state := p:lookahead1W(76, $input, $state)     (: S^WS | ('(' ':') | 'wildcards' :)
        let $state := p:consume(256, $input, $state)        (: 'wildcards' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTWildCardOption"),
    $state
  )
};

(:~
 : Try parsing FTWildCardOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTWildCardOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTWildCardOption"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 256) then                    (: 'wildcards' :)
        let $state := p:consume(256, $input, $state)        (: 'wildcards' :)
        return $state
      else
        let $state := p:consume(181, $input, $state)        (: 'no' :)
        let $state := p:lookahead1W(76, $input, $state)     (: S^WS | ('(' ':') | 'wildcards' :)
        let $state := p:consume(256, $input, $state)        (: 'wildcards' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTWildCardOption"),
    $state
  )
};

(:~
 : Parse FTLanguageOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTLanguageOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTLanguageOption"),
  let $state :=
    let $state := p:consume(162, $input, $state)            (: 'language' :)
    let $state := p:lookahead1W(19, $input, $state)         (: StringLiteral | S^WS | ('(' ':') :)
    let $state := p:consume(4, $input, $state)              (: StringLiteral :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTLanguageOption"),
    $state
  )
};

(:~
 : Try parsing FTLanguageOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTLanguageOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTLanguageOption"),
  let $state :=
    let $state := p:consume(162, $input, $state)            (: 'language' :)
    let $state := p:lookahead1W(19, $input, $state)         (: StringLiteral | S^WS | ('(' ':') :)
    let $state := p:consume(4, $input, $state)              (: StringLiteral :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTLanguageOption"),
    $state
  )
};

(:~
 : Parse FTMatchOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTMatchOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTMatchOption"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 181) then                        (: 'no' :)
        let $state := p:lookahead2W(153, $input, $state)    (: S^WS | ('(' ':') | 'stemming' | 'stop' | 'thesaurus' |
                                                               'wildcards' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 162) then                    (: 'language' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTLanguageOption($input, $state)
        return $state
      else if ($state[$p:lk] = 256                          (: 'wildcards' :)
            or $state[$p:lk] = 131253) then                 (: 'no' 'wildcards' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTWildCardOption($input, $state)
        return $state
      else if ($state[$p:lk] = 234                          (: 'thesaurus' :)
            or $state[$p:lk] = 119989) then                 (: 'no' 'thesaurus' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTThesaurusOption($input, $state)
        return $state
      else if ($state[$p:lk] = 227                          (: 'stemming' :)
            or $state[$p:lk] = 116405) then                 (: 'no' 'stemming' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTStemOption($input, $state)
        return $state
      else if ($state[$p:lk] = 113) then                    (: 'diacritics' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTDiacriticsOption($input, $state)
        return $state
      else if ($state[$p:lk] = 228                          (: 'stop' :)
            or $state[$p:lk] = 116917) then                 (: 'no' 'stop' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTStopWordOption($input, $state)
        return $state
      else if ($state[$p:lk] = 190) then                    (: 'option' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTExtensionOption($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FTCaseOption($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTMatchOption"),
    $state
  )
};

(:~
 : Try parsing FTMatchOption.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTMatchOption($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTMatchOption"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 181) then                        (: 'no' :)
        let $state := p:lookahead2W(153, $input, $state)    (: S^WS | ('(' ':') | 'stemming' | 'stop' | 'thesaurus' |
                                                               'wildcards' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 162) then                    (: 'language' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTLanguageOption($input, $state)
        return $state
      else if ($state[$p:lk] = 256                          (: 'wildcards' :)
            or $state[$p:lk] = 131253) then                 (: 'no' 'wildcards' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTWildCardOption($input, $state)
        return $state
      else if ($state[$p:lk] = 234                          (: 'thesaurus' :)
            or $state[$p:lk] = 119989) then                 (: 'no' 'thesaurus' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTThesaurusOption($input, $state)
        return $state
      else if ($state[$p:lk] = 227                          (: 'stemming' :)
            or $state[$p:lk] = 116405) then                 (: 'no' 'stemming' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTStemOption($input, $state)
        return $state
      else if ($state[$p:lk] = 113) then                    (: 'diacritics' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTDiacriticsOption($input, $state)
        return $state
      else if ($state[$p:lk] = 228                          (: 'stop' :)
            or $state[$p:lk] = 116917) then                 (: 'no' 'stop' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTStopWordOption($input, $state)
        return $state
      else if ($state[$p:lk] = 190) then                    (: 'option' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTExtensionOption($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FTCaseOption($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTMatchOption"),
    $state
  )
};

(:~
 : Parse the 1st loop of production FTMatchOptions (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTMatchOptions-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:consume(248, $input, $state)            (: 'using' :)
    let $state := p:lookahead1W(171, $input, $state)        (: S^WS | ('(' ':') | 'case' | 'diacritics' | 'language' |
                                                               'lowercase' | 'no' | 'option' | 'stemming' | 'stop' |
                                                               'thesaurus' | 'uppercase' | 'wildcards' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-FTMatchOption($input, $state)
    let $state := p:lookahead1W(190, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                                               'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                                               'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                                               'stable' | 'start' | 'using' | 'weight' | 'where' |
                                                               'window' | 'with' | 'without' | '}' | '}`' :)
    return
      if ($state[$p:l1] != 248) then                        (: 'using' :)
        $state
      else
        p:parse-FTMatchOptions-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production FTMatchOptions (one or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTMatchOptions-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:consume(248, $input, $state)            (: 'using' :)
    let $state := p:lookahead1W(171, $input, $state)        (: S^WS | ('(' ':') | 'case' | 'diacritics' | 'language' |
                                                               'lowercase' | 'no' | 'option' | 'stemming' | 'stop' |
                                                               'thesaurus' | 'uppercase' | 'wildcards' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-FTMatchOption($input, $state)
    let $state := p:lookahead1W(190, $input, $state)        (: S^WS | EOF | '!=' | ('(' ':') | ')' | ',' | ':' | ';' |
                                                               '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' |
                                                               'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' |
                                                               'case' | 'collation' | 'count' | 'default' |
                                                               'descending' | 'different' | 'distance' | 'else' |
                                                               'empty' | 'end' | 'entire' | 'eq' | 'for' | 'ftand' |
                                                               'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                                               'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                                               'stable' | 'start' | 'using' | 'weight' | 'where' |
                                                               'window' | 'with' | 'without' | '}' | '}`' :)
    return
      if ($state[$p:l1] != 248) then                        (: 'using' :)
        $state
      else
        p:try-FTMatchOptions-1($input, $state)
};

(:~
 : Parse FTMatchOptions.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTMatchOptions($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTMatchOptions"),
  let $state :=
    let $state := p:parse-FTMatchOptions-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTMatchOptions"),
    $state
  )
};

(:~
 : Try parsing FTMatchOptions.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FTMatchOptions($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FTMatchOptions"),
  let $state :=
    let $state := p:try-FTMatchOptions-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FTMatchOptions"),
    $state
  )
};

(:~
 : Parse FTOptionDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FTOptionDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FTOptionDecl"),
  let $state :=
    let $state := p:consume(107, $input, $state)            (: 'declare' :)
    let $state := p:lookahead1W(51, $input, $state)         (: S^WS | ('(' ':') | 'ft-option' :)
    let $state := p:consume(138, $input, $state)            (: 'ft-option' :)
    let $state := p:lookahead1W(74, $input, $state)         (: S^WS | ('(' ':') | 'using' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-FTMatchOptions($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FTOptionDecl"),
    $state
  )
};

(:~
 : Parse the 1st loop of production ModuleImport (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ModuleImport-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(94, $input, $state)         (: S^WS | ('(' ':') | ',' | ';' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(19, $input, $state)     (: StringLiteral | S^WS | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-URILiteral($input, $state)
        return p:parse-ModuleImport-1($input, $state)
};

(:~
 : Parse ModuleImport.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ModuleImport($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ModuleImport"),
  let $state :=
    let $state := p:consume(150, $input, $state)            (: 'import' :)
    let $state := p:lookahead1W(56, $input, $state)         (: S^WS | ('(' ':') | 'module' :)
    let $state := p:consume(175, $input, $state)            (: 'module' :)
    let $state := p:lookahead1W(83, $input, $state)         (: StringLiteral | S^WS | ('(' ':') | 'namespace' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 177) then                    (: 'namespace' :)
        let $state := p:consume(177, $input, $state)        (: 'namespace' :)
        let $state := p:lookahead1W(176, $input, $state)    (: NCName^Token | S^WS | ('(' ':') | 'and' | 'as' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-NCName($input, $state)
        let $state := p:lookahead1W(32, $input, $state)     (: S^WS | ('(' ':') | '=' :)
        let $state := p:consume(60, $input, $state)         (: '=' :)
        return $state
      else
        $state
    let $state := p:lookahead1W(19, $input, $state)         (: StringLiteral | S^WS | ('(' ':') :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-URILiteral($input, $state)
    let $state := p:lookahead1W(102, $input, $state)        (: S^WS | ('(' ':') | ';' | 'at' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 85) then                     (: 'at' :)
        let $state := p:consume(85, $input, $state)         (: 'at' :)
        let $state := p:lookahead1W(19, $input, $state)     (: StringLiteral | S^WS | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-URILiteral($input, $state)
        let $state := p:parse-ModuleImport-1($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ModuleImport"),
    $state
  )
};

(:~
 : Parse SchemaPrefix.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SchemaPrefix($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "SchemaPrefix"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 177) then                    (: 'namespace' :)
        let $state := p:consume(177, $input, $state)        (: 'namespace' :)
        let $state := p:lookahead1W(176, $input, $state)    (: NCName^Token | S^WS | ('(' ':') | 'and' | 'as' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-NCName($input, $state)
        let $state := p:lookahead1W(32, $input, $state)     (: S^WS | ('(' ':') | '=' :)
        let $state := p:consume(60, $input, $state)         (: '=' :)
        return $state
      else
        let $state := p:consume(108, $input, $state)        (: 'default' :)
        let $state := p:lookahead1W(47, $input, $state)     (: S^WS | ('(' ':') | 'element' :)
        let $state := p:consume(120, $input, $state)        (: 'element' :)
        let $state := p:lookahead1W(57, $input, $state)     (: S^WS | ('(' ':') | 'namespace' :)
        let $state := p:consume(177, $input, $state)        (: 'namespace' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "SchemaPrefix"),
    $state
  )
};

(:~
 : Parse the 1st loop of production SchemaImport (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SchemaImport-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(94, $input, $state)         (: S^WS | ('(' ':') | ',' | ';' :)
    return
      if ($state[$p:l1] != 40) then                         (: ',' :)
        $state
      else
        let $state := p:consume(40, $input, $state)         (: ',' :)
        let $state := p:lookahead1W(19, $input, $state)     (: StringLiteral | S^WS | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-URILiteral($input, $state)
        return p:parse-SchemaImport-1($input, $state)
};

(:~
 : Parse SchemaImport.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-SchemaImport($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "SchemaImport"),
  let $state :=
    let $state := p:consume(150, $input, $state)            (: 'import' :)
    let $state := p:lookahead1W(65, $input, $state)         (: S^WS | ('(' ':') | 'schema' :)
    let $state := p:consume(214, $input, $state)            (: 'schema' :)
    let $state := p:lookahead1W(132, $input, $state)        (: StringLiteral | S^WS | ('(' ':') | 'default' |
                                                               'namespace' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] != 4) then                     (: StringLiteral :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-SchemaPrefix($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(19, $input, $state)         (: StringLiteral | S^WS | ('(' ':') :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-URILiteral($input, $state)
    let $state := p:lookahead1W(102, $input, $state)        (: S^WS | ('(' ':') | ';' | 'at' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 85) then                     (: 'at' :)
        let $state := p:consume(85, $input, $state)         (: 'at' :)
        let $state := p:lookahead1W(19, $input, $state)     (: StringLiteral | S^WS | ('(' ':') :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-URILiteral($input, $state)
        let $state := p:parse-SchemaImport-1($input, $state)
        return $state
      else
        $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "SchemaImport"),
    $state
  )
};

(:~
 : Parse Import.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Import($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "Import"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 150) then                        (: 'import' :)
        let $state := p:lookahead2W(121, $input, $state)    (: S^WS | ('(' ':') | 'module' | 'schema' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 109718) then                 (: 'import' 'schema' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-SchemaImport($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ModuleImport($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "Import"),
    $state
  )
};

(:~
 : Parse NamespaceDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-NamespaceDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "NamespaceDecl"),
  let $state :=
    let $state := p:consume(107, $input, $state)            (: 'declare' :)
    let $state := p:lookahead1W(57, $input, $state)         (: S^WS | ('(' ':') | 'namespace' :)
    let $state := p:consume(177, $input, $state)            (: 'namespace' :)
    let $state := p:lookahead1W(176, $input, $state)        (: NCName^Token | S^WS | ('(' ':') | 'and' | 'as' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-NCName($input, $state)
    let $state := p:lookahead1W(32, $input, $state)         (: S^WS | ('(' ':') | '=' :)
    let $state := p:consume(60, $input, $state)             (: '=' :)
    let $state := p:lookahead1W(19, $input, $state)         (: StringLiteral | S^WS | ('(' ':') :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-URILiteral($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "NamespaceDecl"),
    $state
  )
};

(:~
 : Parse DFPropertyName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DFPropertyName($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "DFPropertyName"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 106) then                    (: 'decimal-separator' :)
        let $state := p:consume(106, $input, $state)        (: 'decimal-separator' :)
        return $state
      else if ($state[$p:l1] = 146) then                    (: 'grouping-separator' :)
        let $state := p:consume(146, $input, $state)        (: 'grouping-separator' :)
        return $state
      else if ($state[$p:l1] = 152) then                    (: 'infinity' :)
        let $state := p:consume(152, $input, $state)        (: 'infinity' :)
        return $state
      else if ($state[$p:l1] = 172) then                    (: 'minus-sign' :)
        let $state := p:consume(172, $input, $state)        (: 'minus-sign' :)
        return $state
      else if ($state[$p:l1] = 68) then                     (: 'NaN' :)
        let $state := p:consume(68, $input, $state)         (: 'NaN' :)
        return $state
      else if ($state[$p:l1] = 200) then                    (: 'percent' :)
        let $state := p:consume(200, $input, $state)        (: 'percent' :)
        return $state
      else if ($state[$p:l1] = 199) then                    (: 'per-mille' :)
        let $state := p:consume(199, $input, $state)        (: 'per-mille' :)
        return $state
      else if ($state[$p:l1] = 263) then                    (: 'zero-digit' :)
        let $state := p:consume(263, $input, $state)        (: 'zero-digit' :)
        return $state
      else if ($state[$p:l1] = 115) then                    (: 'digit' :)
        let $state := p:consume(115, $input, $state)        (: 'digit' :)
        return $state
      else if ($state[$p:l1] = 198) then                    (: 'pattern-separator' :)
        let $state := p:consume(198, $input, $state)        (: 'pattern-separator' :)
        return $state
      else
        let $state := p:consume(131, $input, $state)        (: 'exponent-separator' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "DFPropertyName"),
    $state
  )
};

(:~
 : Parse FunctionName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-FunctionName($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "FunctionName"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 15) then                     (: QName^Token :)
        let $state := p:consume(15, $input, $state)         (: QName^Token :)
        return $state
      else if ($state[$p:l1] = 78) then                     (: 'ancestor' :)
        let $state := p:consume(78, $input, $state)         (: 'ancestor' :)
        return $state
      else if ($state[$p:l1] = 79) then                     (: 'ancestor-or-self' :)
        let $state := p:consume(79, $input, $state)         (: 'ancestor-or-self' :)
        return $state
      else if ($state[$p:l1] = 80) then                     (: 'and' :)
        let $state := p:consume(80, $input, $state)         (: 'and' :)
        return $state
      else if ($state[$p:l1] = 83) then                     (: 'as' :)
        let $state := p:consume(83, $input, $state)         (: 'as' :)
        return $state
      else if ($state[$p:l1] = 84) then                     (: 'ascending' :)
        let $state := p:consume(84, $input, $state)         (: 'ascending' :)
        return $state
      else if ($state[$p:l1] = 85) then                     (: 'at' :)
        let $state := p:consume(85, $input, $state)         (: 'at' :)
        return $state
      else if ($state[$p:l1] = 91) then                     (: 'case' :)
        let $state := p:consume(91, $input, $state)         (: 'case' :)
        return $state
      else if ($state[$p:l1] = 92) then                     (: 'cast' :)
        let $state := p:consume(92, $input, $state)         (: 'cast' :)
        return $state
      else if ($state[$p:l1] = 93) then                     (: 'castable' :)
        let $state := p:consume(93, $input, $state)         (: 'castable' :)
        return $state
      else if ($state[$p:l1] = 95) then                     (: 'child' :)
        let $state := p:consume(95, $input, $state)         (: 'child' :)
        return $state
      else if ($state[$p:l1] = 96) then                     (: 'collation' :)
        let $state := p:consume(96, $input, $state)         (: 'collation' :)
        return $state
      else if ($state[$p:l1] = 102) then                    (: 'copy' :)
        let $state := p:consume(102, $input, $state)        (: 'copy' :)
        return $state
      else if ($state[$p:l1] = 104) then                    (: 'count' :)
        let $state := p:consume(104, $input, $state)        (: 'count' :)
        return $state
      else if ($state[$p:l1] = 107) then                    (: 'declare' :)
        let $state := p:consume(107, $input, $state)        (: 'declare' :)
        return $state
      else if ($state[$p:l1] = 108) then                    (: 'default' :)
        let $state := p:consume(108, $input, $state)        (: 'default' :)
        return $state
      else if ($state[$p:l1] = 109) then                    (: 'delete' :)
        let $state := p:consume(109, $input, $state)        (: 'delete' :)
        return $state
      else if ($state[$p:l1] = 110) then                    (: 'descendant' :)
        let $state := p:consume(110, $input, $state)        (: 'descendant' :)
        return $state
      else if ($state[$p:l1] = 111) then                    (: 'descendant-or-self' :)
        let $state := p:consume(111, $input, $state)        (: 'descendant-or-self' :)
        return $state
      else if ($state[$p:l1] = 112) then                    (: 'descending' :)
        let $state := p:consume(112, $input, $state)        (: 'descending' :)
        return $state
      else if ($state[$p:l1] = 117) then                    (: 'div' :)
        let $state := p:consume(117, $input, $state)        (: 'div' :)
        return $state
      else if ($state[$p:l1] = 118) then                    (: 'document' :)
        let $state := p:consume(118, $input, $state)        (: 'document' :)
        return $state
      else if ($state[$p:l1] = 121) then                    (: 'else' :)
        let $state := p:consume(121, $input, $state)        (: 'else' :)
        return $state
      else if ($state[$p:l1] = 122) then                    (: 'empty' :)
        let $state := p:consume(122, $input, $state)        (: 'empty' :)
        return $state
      else if ($state[$p:l1] = 125) then                    (: 'end' :)
        let $state := p:consume(125, $input, $state)        (: 'end' :)
        return $state
      else if ($state[$p:l1] = 127) then                    (: 'eq' :)
        let $state := p:consume(127, $input, $state)        (: 'eq' :)
        return $state
      else if ($state[$p:l1] = 128) then                    (: 'every' :)
        let $state := p:consume(128, $input, $state)        (: 'every' :)
        return $state
      else if ($state[$p:l1] = 130) then                    (: 'except' :)
        let $state := p:consume(130, $input, $state)        (: 'except' :)
        return $state
      else if ($state[$p:l1] = 134) then                    (: 'following' :)
        let $state := p:consume(134, $input, $state)        (: 'following' :)
        return $state
      else if ($state[$p:l1] = 135) then                    (: 'following-sibling' :)
        let $state := p:consume(135, $input, $state)        (: 'following-sibling' :)
        return $state
      else if ($state[$p:l1] = 136) then                    (: 'for' :)
        let $state := p:consume(136, $input, $state)        (: 'for' :)
        return $state
      else if ($state[$p:l1] = 143) then                    (: 'ge' :)
        let $state := p:consume(143, $input, $state)        (: 'ge' :)
        return $state
      else if ($state[$p:l1] = 145) then                    (: 'group' :)
        let $state := p:consume(145, $input, $state)        (: 'group' :)
        return $state
      else if ($state[$p:l1] = 147) then                    (: 'gt' :)
        let $state := p:consume(147, $input, $state)        (: 'gt' :)
        return $state
      else if ($state[$p:l1] = 148) then                    (: 'idiv' :)
        let $state := p:consume(148, $input, $state)        (: 'idiv' :)
        return $state
      else if ($state[$p:l1] = 150) then                    (: 'import' :)
        let $state := p:consume(150, $input, $state)        (: 'import' :)
        return $state
      else if ($state[$p:l1] = 155) then                    (: 'insert' :)
        let $state := p:consume(155, $input, $state)        (: 'insert' :)
        return $state
      else if ($state[$p:l1] = 156) then                    (: 'instance' :)
        let $state := p:consume(156, $input, $state)        (: 'instance' :)
        return $state
      else if ($state[$p:l1] = 157) then                    (: 'intersect' :)
        let $state := p:consume(157, $input, $state)        (: 'intersect' :)
        return $state
      else if ($state[$p:l1] = 159) then                    (: 'invoke' :)
        let $state := p:consume(159, $input, $state)        (: 'invoke' :)
        return $state
      else if ($state[$p:l1] = 160) then                    (: 'is' :)
        let $state := p:consume(160, $input, $state)        (: 'is' :)
        return $state
      else if ($state[$p:l1] = 165) then                    (: 'le' :)
        let $state := p:consume(165, $input, $state)        (: 'le' :)
        return $state
      else if ($state[$p:l1] = 167) then                    (: 'let' :)
        let $state := p:consume(167, $input, $state)        (: 'let' :)
        return $state
      else if ($state[$p:l1] = 170) then                    (: 'lt' :)
        let $state := p:consume(170, $input, $state)        (: 'lt' :)
        return $state
      else if ($state[$p:l1] = 173) then                    (: 'mod' :)
        let $state := p:consume(173, $input, $state)        (: 'mod' :)
        return $state
      else if ($state[$p:l1] = 175) then                    (: 'module' :)
        let $state := p:consume(175, $input, $state)        (: 'module' :)
        return $state
      else if ($state[$p:l1] = 174) then                    (: 'modify' :)
        let $state := p:consume(174, $input, $state)        (: 'modify' :)
        return $state
      else if ($state[$p:l1] = 177) then                    (: 'namespace' :)
        let $state := p:consume(177, $input, $state)        (: 'namespace' :)
        return $state
      else if ($state[$p:l1] = 179) then                    (: 'ne' :)
        let $state := p:consume(179, $input, $state)        (: 'ne' :)
        return $state
      else if ($state[$p:l1] = 189) then                    (: 'only' :)
        let $state := p:consume(189, $input, $state)        (: 'only' :)
        return $state
      else if ($state[$p:l1] = 191) then                    (: 'or' :)
        let $state := p:consume(191, $input, $state)        (: 'or' :)
        return $state
      else if ($state[$p:l1] = 192) then                    (: 'order' :)
        let $state := p:consume(192, $input, $state)        (: 'order' :)
        return $state
      else if ($state[$p:l1] = 193) then                    (: 'ordered' :)
        let $state := p:consume(193, $input, $state)        (: 'ordered' :)
        return $state
      else if ($state[$p:l1] = 197) then                    (: 'parent' :)
        let $state := p:consume(197, $input, $state)        (: 'parent' :)
        return $state
      else if ($state[$p:l1] = 202) then                    (: 'preceding' :)
        let $state := p:consume(202, $input, $state)        (: 'preceding' :)
        return $state
      else if ($state[$p:l1] = 203) then                    (: 'preceding-sibling' :)
        let $state := p:consume(203, $input, $state)        (: 'preceding-sibling' :)
        return $state
      else if ($state[$p:l1] = 208) then                    (: 'rename' :)
        let $state := p:consume(208, $input, $state)        (: 'rename' :)
        return $state
      else if ($state[$p:l1] = 209) then                    (: 'replace' :)
        let $state := p:consume(209, $input, $state)        (: 'replace' :)
        return $state
      else if ($state[$p:l1] = 210) then                    (: 'return' :)
        let $state := p:consume(210, $input, $state)        (: 'return' :)
        return $state
      else if ($state[$p:l1] = 213) then                    (: 'satisfies' :)
        let $state := p:consume(213, $input, $state)        (: 'satisfies' :)
        return $state
      else if ($state[$p:l1] = 218) then                    (: 'self' :)
        let $state := p:consume(218, $input, $state)        (: 'self' :)
        return $state
      else if ($state[$p:l1] = 224) then                    (: 'some' :)
        let $state := p:consume(224, $input, $state)        (: 'some' :)
        return $state
      else if ($state[$p:l1] = 225) then                    (: 'stable' :)
        let $state := p:consume(225, $input, $state)        (: 'stable' :)
        return $state
      else if ($state[$p:l1] = 226) then                    (: 'start' :)
        let $state := p:consume(226, $input, $state)        (: 'start' :)
        return $state
      else if ($state[$p:l1] = 236) then                    (: 'to' :)
        let $state := p:consume(236, $input, $state)        (: 'to' :)
        return $state
      else if ($state[$p:l1] = 237) then                    (: 'transform' :)
        let $state := p:consume(237, $input, $state)        (: 'transform' :)
        return $state
      else if ($state[$p:l1] = 238) then                    (: 'treat' :)
        let $state := p:consume(238, $input, $state)        (: 'treat' :)
        return $state
      else if ($state[$p:l1] = 239) then                    (: 'try' :)
        let $state := p:consume(239, $input, $state)        (: 'try' :)
        return $state
      else if ($state[$p:l1] = 243) then                    (: 'union' :)
        let $state := p:consume(243, $input, $state)        (: 'union' :)
        return $state
      else if ($state[$p:l1] = 244) then                    (: 'unordered' :)
        let $state := p:consume(244, $input, $state)        (: 'unordered' :)
        return $state
      else if ($state[$p:l1] = 245) then                    (: 'update' :)
        let $state := p:consume(245, $input, $state)        (: 'update' :)
        return $state
      else if ($state[$p:l1] = 249) then                    (: 'validate' :)
        let $state := p:consume(249, $input, $state)        (: 'validate' :)
        return $state
      else if ($state[$p:l1] = 255) then                    (: 'where' :)
        let $state := p:consume(255, $input, $state)        (: 'where' :)
        return $state
      else if ($state[$p:l1] = 258) then                    (: 'with' :)
        let $state := p:consume(258, $input, $state)        (: 'with' :)
        return $state
      else
        let $state := p:consume(262, $input, $state)        (: 'xquery' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "FunctionName"),
    $state
  )
};

(:~
 : Try parsing FunctionName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-FunctionName($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "FunctionName"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 15) then                     (: QName^Token :)
        let $state := p:consume(15, $input, $state)         (: QName^Token :)
        return $state
      else if ($state[$p:l1] = 78) then                     (: 'ancestor' :)
        let $state := p:consume(78, $input, $state)         (: 'ancestor' :)
        return $state
      else if ($state[$p:l1] = 79) then                     (: 'ancestor-or-self' :)
        let $state := p:consume(79, $input, $state)         (: 'ancestor-or-self' :)
        return $state
      else if ($state[$p:l1] = 80) then                     (: 'and' :)
        let $state := p:consume(80, $input, $state)         (: 'and' :)
        return $state
      else if ($state[$p:l1] = 83) then                     (: 'as' :)
        let $state := p:consume(83, $input, $state)         (: 'as' :)
        return $state
      else if ($state[$p:l1] = 84) then                     (: 'ascending' :)
        let $state := p:consume(84, $input, $state)         (: 'ascending' :)
        return $state
      else if ($state[$p:l1] = 85) then                     (: 'at' :)
        let $state := p:consume(85, $input, $state)         (: 'at' :)
        return $state
      else if ($state[$p:l1] = 91) then                     (: 'case' :)
        let $state := p:consume(91, $input, $state)         (: 'case' :)
        return $state
      else if ($state[$p:l1] = 92) then                     (: 'cast' :)
        let $state := p:consume(92, $input, $state)         (: 'cast' :)
        return $state
      else if ($state[$p:l1] = 93) then                     (: 'castable' :)
        let $state := p:consume(93, $input, $state)         (: 'castable' :)
        return $state
      else if ($state[$p:l1] = 95) then                     (: 'child' :)
        let $state := p:consume(95, $input, $state)         (: 'child' :)
        return $state
      else if ($state[$p:l1] = 96) then                     (: 'collation' :)
        let $state := p:consume(96, $input, $state)         (: 'collation' :)
        return $state
      else if ($state[$p:l1] = 102) then                    (: 'copy' :)
        let $state := p:consume(102, $input, $state)        (: 'copy' :)
        return $state
      else if ($state[$p:l1] = 104) then                    (: 'count' :)
        let $state := p:consume(104, $input, $state)        (: 'count' :)
        return $state
      else if ($state[$p:l1] = 107) then                    (: 'declare' :)
        let $state := p:consume(107, $input, $state)        (: 'declare' :)
        return $state
      else if ($state[$p:l1] = 108) then                    (: 'default' :)
        let $state := p:consume(108, $input, $state)        (: 'default' :)
        return $state
      else if ($state[$p:l1] = 109) then                    (: 'delete' :)
        let $state := p:consume(109, $input, $state)        (: 'delete' :)
        return $state
      else if ($state[$p:l1] = 110) then                    (: 'descendant' :)
        let $state := p:consume(110, $input, $state)        (: 'descendant' :)
        return $state
      else if ($state[$p:l1] = 111) then                    (: 'descendant-or-self' :)
        let $state := p:consume(111, $input, $state)        (: 'descendant-or-self' :)
        return $state
      else if ($state[$p:l1] = 112) then                    (: 'descending' :)
        let $state := p:consume(112, $input, $state)        (: 'descending' :)
        return $state
      else if ($state[$p:l1] = 117) then                    (: 'div' :)
        let $state := p:consume(117, $input, $state)        (: 'div' :)
        return $state
      else if ($state[$p:l1] = 118) then                    (: 'document' :)
        let $state := p:consume(118, $input, $state)        (: 'document' :)
        return $state
      else if ($state[$p:l1] = 121) then                    (: 'else' :)
        let $state := p:consume(121, $input, $state)        (: 'else' :)
        return $state
      else if ($state[$p:l1] = 122) then                    (: 'empty' :)
        let $state := p:consume(122, $input, $state)        (: 'empty' :)
        return $state
      else if ($state[$p:l1] = 125) then                    (: 'end' :)
        let $state := p:consume(125, $input, $state)        (: 'end' :)
        return $state
      else if ($state[$p:l1] = 127) then                    (: 'eq' :)
        let $state := p:consume(127, $input, $state)        (: 'eq' :)
        return $state
      else if ($state[$p:l1] = 128) then                    (: 'every' :)
        let $state := p:consume(128, $input, $state)        (: 'every' :)
        return $state
      else if ($state[$p:l1] = 130) then                    (: 'except' :)
        let $state := p:consume(130, $input, $state)        (: 'except' :)
        return $state
      else if ($state[$p:l1] = 134) then                    (: 'following' :)
        let $state := p:consume(134, $input, $state)        (: 'following' :)
        return $state
      else if ($state[$p:l1] = 135) then                    (: 'following-sibling' :)
        let $state := p:consume(135, $input, $state)        (: 'following-sibling' :)
        return $state
      else if ($state[$p:l1] = 136) then                    (: 'for' :)
        let $state := p:consume(136, $input, $state)        (: 'for' :)
        return $state
      else if ($state[$p:l1] = 143) then                    (: 'ge' :)
        let $state := p:consume(143, $input, $state)        (: 'ge' :)
        return $state
      else if ($state[$p:l1] = 145) then                    (: 'group' :)
        let $state := p:consume(145, $input, $state)        (: 'group' :)
        return $state
      else if ($state[$p:l1] = 147) then                    (: 'gt' :)
        let $state := p:consume(147, $input, $state)        (: 'gt' :)
        return $state
      else if ($state[$p:l1] = 148) then                    (: 'idiv' :)
        let $state := p:consume(148, $input, $state)        (: 'idiv' :)
        return $state
      else if ($state[$p:l1] = 150) then                    (: 'import' :)
        let $state := p:consume(150, $input, $state)        (: 'import' :)
        return $state
      else if ($state[$p:l1] = 155) then                    (: 'insert' :)
        let $state := p:consume(155, $input, $state)        (: 'insert' :)
        return $state
      else if ($state[$p:l1] = 156) then                    (: 'instance' :)
        let $state := p:consume(156, $input, $state)        (: 'instance' :)
        return $state
      else if ($state[$p:l1] = 157) then                    (: 'intersect' :)
        let $state := p:consume(157, $input, $state)        (: 'intersect' :)
        return $state
      else if ($state[$p:l1] = 159) then                    (: 'invoke' :)
        let $state := p:consume(159, $input, $state)        (: 'invoke' :)
        return $state
      else if ($state[$p:l1] = 160) then                    (: 'is' :)
        let $state := p:consume(160, $input, $state)        (: 'is' :)
        return $state
      else if ($state[$p:l1] = 165) then                    (: 'le' :)
        let $state := p:consume(165, $input, $state)        (: 'le' :)
        return $state
      else if ($state[$p:l1] = 167) then                    (: 'let' :)
        let $state := p:consume(167, $input, $state)        (: 'let' :)
        return $state
      else if ($state[$p:l1] = 170) then                    (: 'lt' :)
        let $state := p:consume(170, $input, $state)        (: 'lt' :)
        return $state
      else if ($state[$p:l1] = 173) then                    (: 'mod' :)
        let $state := p:consume(173, $input, $state)        (: 'mod' :)
        return $state
      else if ($state[$p:l1] = 175) then                    (: 'module' :)
        let $state := p:consume(175, $input, $state)        (: 'module' :)
        return $state
      else if ($state[$p:l1] = 174) then                    (: 'modify' :)
        let $state := p:consume(174, $input, $state)        (: 'modify' :)
        return $state
      else if ($state[$p:l1] = 177) then                    (: 'namespace' :)
        let $state := p:consume(177, $input, $state)        (: 'namespace' :)
        return $state
      else if ($state[$p:l1] = 179) then                    (: 'ne' :)
        let $state := p:consume(179, $input, $state)        (: 'ne' :)
        return $state
      else if ($state[$p:l1] = 189) then                    (: 'only' :)
        let $state := p:consume(189, $input, $state)        (: 'only' :)
        return $state
      else if ($state[$p:l1] = 191) then                    (: 'or' :)
        let $state := p:consume(191, $input, $state)        (: 'or' :)
        return $state
      else if ($state[$p:l1] = 192) then                    (: 'order' :)
        let $state := p:consume(192, $input, $state)        (: 'order' :)
        return $state
      else if ($state[$p:l1] = 193) then                    (: 'ordered' :)
        let $state := p:consume(193, $input, $state)        (: 'ordered' :)
        return $state
      else if ($state[$p:l1] = 197) then                    (: 'parent' :)
        let $state := p:consume(197, $input, $state)        (: 'parent' :)
        return $state
      else if ($state[$p:l1] = 202) then                    (: 'preceding' :)
        let $state := p:consume(202, $input, $state)        (: 'preceding' :)
        return $state
      else if ($state[$p:l1] = 203) then                    (: 'preceding-sibling' :)
        let $state := p:consume(203, $input, $state)        (: 'preceding-sibling' :)
        return $state
      else if ($state[$p:l1] = 208) then                    (: 'rename' :)
        let $state := p:consume(208, $input, $state)        (: 'rename' :)
        return $state
      else if ($state[$p:l1] = 209) then                    (: 'replace' :)
        let $state := p:consume(209, $input, $state)        (: 'replace' :)
        return $state
      else if ($state[$p:l1] = 210) then                    (: 'return' :)
        let $state := p:consume(210, $input, $state)        (: 'return' :)
        return $state
      else if ($state[$p:l1] = 213) then                    (: 'satisfies' :)
        let $state := p:consume(213, $input, $state)        (: 'satisfies' :)
        return $state
      else if ($state[$p:l1] = 218) then                    (: 'self' :)
        let $state := p:consume(218, $input, $state)        (: 'self' :)
        return $state
      else if ($state[$p:l1] = 224) then                    (: 'some' :)
        let $state := p:consume(224, $input, $state)        (: 'some' :)
        return $state
      else if ($state[$p:l1] = 225) then                    (: 'stable' :)
        let $state := p:consume(225, $input, $state)        (: 'stable' :)
        return $state
      else if ($state[$p:l1] = 226) then                    (: 'start' :)
        let $state := p:consume(226, $input, $state)        (: 'start' :)
        return $state
      else if ($state[$p:l1] = 236) then                    (: 'to' :)
        let $state := p:consume(236, $input, $state)        (: 'to' :)
        return $state
      else if ($state[$p:l1] = 237) then                    (: 'transform' :)
        let $state := p:consume(237, $input, $state)        (: 'transform' :)
        return $state
      else if ($state[$p:l1] = 238) then                    (: 'treat' :)
        let $state := p:consume(238, $input, $state)        (: 'treat' :)
        return $state
      else if ($state[$p:l1] = 239) then                    (: 'try' :)
        let $state := p:consume(239, $input, $state)        (: 'try' :)
        return $state
      else if ($state[$p:l1] = 243) then                    (: 'union' :)
        let $state := p:consume(243, $input, $state)        (: 'union' :)
        return $state
      else if ($state[$p:l1] = 244) then                    (: 'unordered' :)
        let $state := p:consume(244, $input, $state)        (: 'unordered' :)
        return $state
      else if ($state[$p:l1] = 245) then                    (: 'update' :)
        let $state := p:consume(245, $input, $state)        (: 'update' :)
        return $state
      else if ($state[$p:l1] = 249) then                    (: 'validate' :)
        let $state := p:consume(249, $input, $state)        (: 'validate' :)
        return $state
      else if ($state[$p:l1] = 255) then                    (: 'where' :)
        let $state := p:consume(255, $input, $state)        (: 'where' :)
        return $state
      else if ($state[$p:l1] = 258) then                    (: 'with' :)
        let $state := p:consume(258, $input, $state)        (: 'with' :)
        return $state
      else
        let $state := p:consume(262, $input, $state)        (: 'xquery' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "FunctionName"),
    $state
  )
};

(:~
 : Parse QName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-QName($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "QName"),
  let $state :=
    let $state := p:lookahead1(229, $input, $state)         (: QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 86) then                     (: 'attribute' :)
        let $state := p:consume(86, $input, $state)         (: 'attribute' :)
        return $state
      else if ($state[$p:l1] = 97) then                     (: 'comment' :)
        let $state := p:consume(97, $input, $state)         (: 'comment' :)
        return $state
      else if ($state[$p:l1] = 119) then                    (: 'document-node' :)
        let $state := p:consume(119, $input, $state)        (: 'document-node' :)
        return $state
      else if ($state[$p:l1] = 120) then                    (: 'element' :)
        let $state := p:consume(120, $input, $state)        (: 'element' :)
        return $state
      else if ($state[$p:l1] = 123) then                    (: 'empty-sequence' :)
        let $state := p:consume(123, $input, $state)        (: 'empty-sequence' :)
        return $state
      else if ($state[$p:l1] = 142) then                    (: 'function' :)
        let $state := p:consume(142, $input, $state)        (: 'function' :)
        return $state
      else if ($state[$p:l1] = 149) then                    (: 'if' :)
        let $state := p:consume(149, $input, $state)        (: 'if' :)
        return $state
      else if ($state[$p:l1] = 161) then                    (: 'item' :)
        let $state := p:consume(161, $input, $state)        (: 'item' :)
        return $state
      else if ($state[$p:l1] = 178) then                    (: 'namespace-node' :)
        let $state := p:consume(178, $input, $state)        (: 'namespace-node' :)
        return $state
      else if ($state[$p:l1] = 184) then                    (: 'node' :)
        let $state := p:consume(184, $input, $state)        (: 'node' :)
        return $state
      else if ($state[$p:l1] = 206) then                    (: 'processing-instruction' :)
        let $state := p:consume(206, $input, $state)        (: 'processing-instruction' :)
        return $state
      else if ($state[$p:l1] = 215) then                    (: 'schema-attribute' :)
        let $state := p:consume(215, $input, $state)        (: 'schema-attribute' :)
        return $state
      else if ($state[$p:l1] = 216) then                    (: 'schema-element' :)
        let $state := p:consume(216, $input, $state)        (: 'schema-element' :)
        return $state
      else if ($state[$p:l1] = 231) then                    (: 'switch' :)
        let $state := p:consume(231, $input, $state)        (: 'switch' :)
        return $state
      else if ($state[$p:l1] = 232) then                    (: 'text' :)
        let $state := p:consume(232, $input, $state)        (: 'text' :)
        return $state
      else if ($state[$p:l1] = 242) then                    (: 'typeswitch' :)
        let $state := p:consume(242, $input, $state)        (: 'typeswitch' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-FunctionName($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "QName"),
    $state
  )
};

(:~
 : Try parsing QName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-QName($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "QName"),
  let $state :=
    let $state := p:lookahead1(229, $input, $state)         (: QName^Token | 'ancestor' | 'ancestor-or-self' | 'and' |
                                                               'as' | 'ascending' | 'at' | 'attribute' | 'case' |
                                                               'cast' | 'castable' | 'child' | 'collation' | 'comment' |
                                                               'copy' | 'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 86) then                     (: 'attribute' :)
        let $state := p:consume(86, $input, $state)         (: 'attribute' :)
        return $state
      else if ($state[$p:l1] = 97) then                     (: 'comment' :)
        let $state := p:consume(97, $input, $state)         (: 'comment' :)
        return $state
      else if ($state[$p:l1] = 119) then                    (: 'document-node' :)
        let $state := p:consume(119, $input, $state)        (: 'document-node' :)
        return $state
      else if ($state[$p:l1] = 120) then                    (: 'element' :)
        let $state := p:consume(120, $input, $state)        (: 'element' :)
        return $state
      else if ($state[$p:l1] = 123) then                    (: 'empty-sequence' :)
        let $state := p:consume(123, $input, $state)        (: 'empty-sequence' :)
        return $state
      else if ($state[$p:l1] = 142) then                    (: 'function' :)
        let $state := p:consume(142, $input, $state)        (: 'function' :)
        return $state
      else if ($state[$p:l1] = 149) then                    (: 'if' :)
        let $state := p:consume(149, $input, $state)        (: 'if' :)
        return $state
      else if ($state[$p:l1] = 161) then                    (: 'item' :)
        let $state := p:consume(161, $input, $state)        (: 'item' :)
        return $state
      else if ($state[$p:l1] = 178) then                    (: 'namespace-node' :)
        let $state := p:consume(178, $input, $state)        (: 'namespace-node' :)
        return $state
      else if ($state[$p:l1] = 184) then                    (: 'node' :)
        let $state := p:consume(184, $input, $state)        (: 'node' :)
        return $state
      else if ($state[$p:l1] = 206) then                    (: 'processing-instruction' :)
        let $state := p:consume(206, $input, $state)        (: 'processing-instruction' :)
        return $state
      else if ($state[$p:l1] = 215) then                    (: 'schema-attribute' :)
        let $state := p:consume(215, $input, $state)        (: 'schema-attribute' :)
        return $state
      else if ($state[$p:l1] = 216) then                    (: 'schema-element' :)
        let $state := p:consume(216, $input, $state)        (: 'schema-element' :)
        return $state
      else if ($state[$p:l1] = 231) then                    (: 'switch' :)
        let $state := p:consume(231, $input, $state)        (: 'switch' :)
        return $state
      else if ($state[$p:l1] = 232) then                    (: 'text' :)
        let $state := p:consume(232, $input, $state)        (: 'text' :)
        return $state
      else if ($state[$p:l1] = 242) then                    (: 'typeswitch' :)
        let $state := p:consume(242, $input, $state)        (: 'typeswitch' :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-FunctionName($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "QName"),
    $state
  )
};

(:~
 : Parse EQName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-EQName($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "EQName"),
  let $state :=
    let $state := p:lookahead1(230, $input, $state)         (: URIQualifiedName | QName^Token | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                                               'default' | 'delete' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 5) then                      (: URIQualifiedName :)
        let $state := p:consume(5, $input, $state)          (: URIQualifiedName :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-QName($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "EQName"),
    $state
  )
};

(:~
 : Try parsing EQName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-EQName($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "EQName"),
  let $state :=
    let $state := p:lookahead1(230, $input, $state)         (: URIQualifiedName | QName^Token | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                                               'attribute' | 'case' | 'cast' | 'castable' | 'child' |
                                                               'collation' | 'comment' | 'copy' | 'count' | 'declare' |
                                                               'default' | 'delete' | 'descendant' |
                                                               'descendant-or-self' | 'descending' | 'div' |
                                                               'document' | 'document-node' | 'element' | 'else' |
                                                               'empty' | 'empty-sequence' | 'end' | 'eq' | 'every' |
                                                               'except' | 'following' | 'following-sibling' | 'for' |
                                                               'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' |
                                                               'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 5) then                      (: URIQualifiedName :)
        let $state := p:consume(5, $input, $state)          (: URIQualifiedName :)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:try-QName($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "EQName"),
    $state
  )
};

(:~
 : Parse the 1st loop of production DecimalFormatDecl (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DecimalFormatDecl-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(173, $input, $state)        (: S^WS | ('(' ':') | ';' | 'NaN' | 'decimal-separator' |
                                                               'digit' | 'exponent-separator' | 'grouping-separator' |
                                                               'infinity' | 'minus-sign' | 'pattern-separator' |
                                                               'per-mille' | 'percent' | 'zero-digit' :)
    return
      if ($state[$p:l1] = 52) then                          (: ';' :)
        $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-DFPropertyName($input, $state)
        let $state := p:lookahead1W(32, $input, $state)     (: S^WS | ('(' ':') | '=' :)
        let $state := p:consume(60, $input, $state)         (: '=' :)
        let $state := p:lookahead1W(19, $input, $state)     (: StringLiteral | S^WS | ('(' ':') :)
        let $state := p:consume(4, $input, $state)          (: StringLiteral :)
        return p:parse-DecimalFormatDecl-1($input, $state)
};

(:~
 : Parse DecimalFormatDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DecimalFormatDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "DecimalFormatDecl"),
  let $state :=
    let $state := p:consume(107, $input, $state)            (: 'declare' :)
    let $state := p:lookahead1W(109, $input, $state)        (: S^WS | ('(' ':') | 'decimal-format' | 'default' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 105) then                    (: 'decimal-format' :)
        let $state := p:consume(105, $input, $state)        (: 'decimal-format' :)
        let $state := p:lookahead1W(232, $input, $state)    (: URIQualifiedName | QName^Token | S^WS | ('(' ':') |
                                                               'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'mod' |
                                                               'modify' | 'module' | 'namespace' | 'namespace-node' |
                                                               'ne' | 'node' | 'only' | 'or' | 'order' | 'ordered' |
                                                               'parent' | 'preceding' | 'preceding-sibling' |
                                                               'processing-instruction' | 'rename' | 'replace' |
                                                               'return' | 'satisfies' | 'schema-attribute' |
                                                               'schema-element' | 'self' | 'some' | 'stable' | 'start' |
                                                               'switch' | 'text' | 'to' | 'transform' | 'treat' |
                                                               'try' | 'typeswitch' | 'union' | 'unordered' | 'update' |
                                                               'validate' | 'where' | 'with' | 'xquery' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-EQName($input, $state)
        return $state
      else
        let $state := p:consume(108, $input, $state)        (: 'default' :)
        let $state := p:lookahead1W(45, $input, $state)     (: S^WS | ('(' ':') | 'decimal-format' :)
        let $state := p:consume(105, $input, $state)        (: 'decimal-format' :)
        return $state
    let $state := p:parse-DecimalFormatDecl-1($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "DecimalFormatDecl"),
    $state
  )
};

(:~
 : Parse InheritMode.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-InheritMode($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "InheritMode"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 153) then                    (: 'inherit' :)
        let $state := p:consume(153, $input, $state)        (: 'inherit' :)
        return $state
      else
        let $state := p:consume(182, $input, $state)        (: 'no-inherit' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "InheritMode"),
    $state
  )
};

(:~
 : Parse PreserveMode.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-PreserveMode($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "PreserveMode"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 204) then                    (: 'preserve' :)
        let $state := p:consume(204, $input, $state)        (: 'preserve' :)
        return $state
      else
        let $state := p:consume(183, $input, $state)        (: 'no-preserve' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "PreserveMode"),
    $state
  )
};

(:~
 : Parse CopyNamespacesDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-CopyNamespacesDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "CopyNamespacesDecl"),
  let $state :=
    let $state := p:consume(107, $input, $state)            (: 'declare' :)
    let $state := p:lookahead1W(44, $input, $state)         (: S^WS | ('(' ':') | 'copy-namespaces' :)
    let $state := p:consume(103, $input, $state)            (: 'copy-namespaces' :)
    let $state := p:lookahead1W(123, $input, $state)        (: S^WS | ('(' ':') | 'no-preserve' | 'preserve' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-PreserveMode($input, $state)
    let $state := p:lookahead1W(27, $input, $state)         (: S^WS | ('(' ':') | ',' :)
    let $state := p:consume(40, $input, $state)             (: ',' :)
    let $state := p:lookahead1W(118, $input, $state)        (: S^WS | ('(' ':') | 'inherit' | 'no-inherit' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-InheritMode($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "CopyNamespacesDecl"),
    $state
  )
};

(:~
 : Parse RevalidationDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-RevalidationDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "RevalidationDecl"),
  let $state :=
    let $state := p:consume(107, $input, $state)            (: 'declare' :)
    let $state := p:lookahead1W(64, $input, $state)         (: S^WS | ('(' ':') | 'revalidation' :)
    let $state := p:consume(211, $input, $state)            (: 'revalidation' :)
    let $state := p:lookahead1W(143, $input, $state)        (: S^WS | ('(' ':') | 'lax' | 'skip' | 'strict' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 229) then                    (: 'strict' :)
        let $state := p:consume(229, $input, $state)        (: 'strict' :)
        return $state
      else if ($state[$p:l1] = 164) then                    (: 'lax' :)
        let $state := p:consume(164, $input, $state)        (: 'lax' :)
        return $state
      else
        let $state := p:consume(222, $input, $state)        (: 'skip' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "RevalidationDecl"),
    $state
  )
};

(:~
 : Parse EmptyOrderDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-EmptyOrderDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "EmptyOrderDecl"),
  let $state :=
    let $state := p:consume(107, $input, $state)            (: 'declare' :)
    let $state := p:lookahead1W(46, $input, $state)         (: S^WS | ('(' ':') | 'default' :)
    let $state := p:consume(108, $input, $state)            (: 'default' :)
    let $state := p:lookahead1W(61, $input, $state)         (: S^WS | ('(' ':') | 'order' :)
    let $state := p:consume(192, $input, $state)            (: 'order' :)
    let $state := p:lookahead1W(49, $input, $state)         (: S^WS | ('(' ':') | 'empty' :)
    let $state := p:consume(122, $input, $state)            (: 'empty' :)
    let $state := p:lookahead1W(116, $input, $state)        (: S^WS | ('(' ':') | 'greatest' | 'least' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 144) then                    (: 'greatest' :)
        let $state := p:consume(144, $input, $state)        (: 'greatest' :)
        return $state
      else
        let $state := p:consume(166, $input, $state)        (: 'least' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "EmptyOrderDecl"),
    $state
  )
};

(:~
 : Try parsing EmptyOrderDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-EmptyOrderDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "EmptyOrderDecl"),
  let $state :=
    let $state := p:consume(107, $input, $state)            (: 'declare' :)
    let $state := p:lookahead1W(46, $input, $state)         (: S^WS | ('(' ':') | 'default' :)
    let $state := p:consume(108, $input, $state)            (: 'default' :)
    let $state := p:lookahead1W(61, $input, $state)         (: S^WS | ('(' ':') | 'order' :)
    let $state := p:consume(192, $input, $state)            (: 'order' :)
    let $state := p:lookahead1W(49, $input, $state)         (: S^WS | ('(' ':') | 'empty' :)
    let $state := p:consume(122, $input, $state)            (: 'empty' :)
    let $state := p:lookahead1W(116, $input, $state)        (: S^WS | ('(' ':') | 'greatest' | 'least' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 144) then                    (: 'greatest' :)
        let $state := p:consume(144, $input, $state)        (: 'greatest' :)
        return $state
      else
        let $state := p:consume(166, $input, $state)        (: 'least' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "EmptyOrderDecl"),
    $state
  )
};

(:~
 : Parse OrderingModeDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-OrderingModeDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "OrderingModeDecl"),
  let $state :=
    let $state := p:consume(107, $input, $state)            (: 'declare' :)
    let $state := p:lookahead1W(62, $input, $state)         (: S^WS | ('(' ':') | 'ordering' :)
    let $state := p:consume(194, $input, $state)            (: 'ordering' :)
    let $state := p:lookahead1W(126, $input, $state)        (: S^WS | ('(' ':') | 'ordered' | 'unordered' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 193) then                    (: 'ordered' :)
        let $state := p:consume(193, $input, $state)        (: 'ordered' :)
        return $state
      else
        let $state := p:consume(244, $input, $state)        (: 'unordered' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "OrderingModeDecl"),
    $state
  )
};

(:~
 : Parse ConstructionDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ConstructionDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ConstructionDecl"),
  let $state :=
    let $state := p:consume(107, $input, $state)            (: 'declare' :)
    let $state := p:lookahead1W(41, $input, $state)         (: S^WS | ('(' ':') | 'construction' :)
    let $state := p:consume(98, $input, $state)             (: 'construction' :)
    let $state := p:lookahead1W(128, $input, $state)        (: S^WS | ('(' ':') | 'preserve' | 'strip' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 230) then                    (: 'strip' :)
        let $state := p:consume(230, $input, $state)        (: 'strip' :)
        return $state
      else
        let $state := p:consume(204, $input, $state)        (: 'preserve' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ConstructionDecl"),
    $state
  )
};

(:~
 : Parse BaseURIDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-BaseURIDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "BaseURIDecl"),
  let $state :=
    let $state := p:consume(107, $input, $state)            (: 'declare' :)
    let $state := p:lookahead1W(35, $input, $state)         (: S^WS | ('(' ':') | 'base-uri' :)
    let $state := p:consume(87, $input, $state)             (: 'base-uri' :)
    let $state := p:lookahead1W(19, $input, $state)         (: StringLiteral | S^WS | ('(' ':') :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-URILiteral($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "BaseURIDecl"),
    $state
  )
};

(:~
 : Parse DefaultCollationDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DefaultCollationDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "DefaultCollationDecl"),
  let $state :=
    let $state := p:consume(107, $input, $state)            (: 'declare' :)
    let $state := p:lookahead1W(46, $input, $state)         (: S^WS | ('(' ':') | 'default' :)
    let $state := p:consume(108, $input, $state)            (: 'default' :)
    let $state := p:lookahead1W(40, $input, $state)         (: S^WS | ('(' ':') | 'collation' :)
    let $state := p:consume(96, $input, $state)             (: 'collation' :)
    let $state := p:lookahead1W(19, $input, $state)         (: StringLiteral | S^WS | ('(' ':') :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-URILiteral($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "DefaultCollationDecl"),
    $state
  )
};

(:~
 : Try parsing DefaultCollationDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-DefaultCollationDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "DefaultCollationDecl"),
  let $state :=
    let $state := p:consume(107, $input, $state)            (: 'declare' :)
    let $state := p:lookahead1W(46, $input, $state)         (: S^WS | ('(' ':') | 'default' :)
    let $state := p:consume(108, $input, $state)            (: 'default' :)
    let $state := p:lookahead1W(40, $input, $state)         (: S^WS | ('(' ':') | 'collation' :)
    let $state := p:consume(96, $input, $state)             (: 'collation' :)
    let $state := p:lookahead1W(19, $input, $state)         (: StringLiteral | S^WS | ('(' ':') :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-URILiteral($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "DefaultCollationDecl"),
    $state
  )
};

(:~
 : Parse BoundarySpaceDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-BoundarySpaceDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "BoundarySpaceDecl"),
  let $state :=
    let $state := p:consume(107, $input, $state)            (: 'declare' :)
    let $state := p:lookahead1W(36, $input, $state)         (: S^WS | ('(' ':') | 'boundary-space' :)
    let $state := p:consume(89, $input, $state)             (: 'boundary-space' :)
    let $state := p:lookahead1W(128, $input, $state)        (: S^WS | ('(' ':') | 'preserve' | 'strip' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 204) then                    (: 'preserve' :)
        let $state := p:consume(204, $input, $state)        (: 'preserve' :)
        return $state
      else
        let $state := p:consume(230, $input, $state)        (: 'strip' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "BoundarySpaceDecl"),
    $state
  )
};

(:~
 : Parse Setter.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Setter($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "Setter"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 107) then                        (: 'declare' :)
        let $state := p:lookahead2W(163, $input, $state)    (: S^WS | ('(' ':') | 'base-uri' | 'boundary-space' |
                                                               'construction' | 'copy-namespaces' | 'decimal-format' |
                                                               'default' | 'ordering' | 'revalidation' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 55403) then                  (: 'declare' 'default' :)
        let $state := p:memoized($state, 1)
        return
          if ($state[$p:lk] != 0) then
            $state
          else
            let $backtrack := $state
            let $state := p:strip-result($state)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:try-DefaultCollationDecl($input, $state)
            return
              if (not($state[$p:error])) then
                p:memoize($backtrack, $state, 1, $backtrack[$p:e0], -2, -2)
              else
                let $state := p:restore($backtrack, $state)
                let $state :=
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-EmptyOrderDecl($input, $state)
                return
                  if (not($state[$p:error])) then
                    p:memoize($backtrack, $state, 1, $backtrack[$p:e0], -6, -6)
                  else
                    p:memoize($backtrack, $state, 1, $backtrack[$p:e0], -9, -9)
      else
        $state
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 45675) then                  (: 'declare' 'boundary-space' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-BoundarySpaceDecl($input, $state)
        return $state
      else if ($state[$p:lk] = -2) then
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-DefaultCollationDecl($input, $state)
        return $state
      else if ($state[$p:lk] = 44651) then                  (: 'declare' 'base-uri' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-BaseURIDecl($input, $state)
        return $state
      else if ($state[$p:lk] = 50283) then                  (: 'declare' 'construction' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-ConstructionDecl($input, $state)
        return $state
      else if ($state[$p:lk] = 99435) then                  (: 'declare' 'ordering' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-OrderingModeDecl($input, $state)
        return $state
      else if ($state[$p:lk] = -6) then
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-EmptyOrderDecl($input, $state)
        return $state
      else if ($state[$p:lk] = 108139) then                 (: 'declare' 'revalidation' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-RevalidationDecl($input, $state)
        return $state
      else if ($state[$p:lk] = 52843) then                  (: 'declare' 'copy-namespaces' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-CopyNamespacesDecl($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-DecimalFormatDecl($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "Setter"),
    $state
  )
};

(:~
 : Parse DefaultNamespaceDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-DefaultNamespaceDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "DefaultNamespaceDecl"),
  let $state :=
    let $state := p:consume(107, $input, $state)            (: 'declare' :)
    let $state := p:lookahead1W(46, $input, $state)         (: S^WS | ('(' ':') | 'default' :)
    let $state := p:consume(108, $input, $state)            (: 'default' :)
    let $state := p:lookahead1W(110, $input, $state)        (: S^WS | ('(' ':') | 'element' | 'function' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 120) then                    (: 'element' :)
        let $state := p:consume(120, $input, $state)        (: 'element' :)
        return $state
      else
        let $state := p:consume(142, $input, $state)        (: 'function' :)
        return $state
    let $state := p:lookahead1W(57, $input, $state)         (: S^WS | ('(' ':') | 'namespace' :)
    let $state := p:consume(177, $input, $state)            (: 'namespace' :)
    let $state := p:lookahead1W(19, $input, $state)         (: StringLiteral | S^WS | ('(' ':') :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-URILiteral($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "DefaultNamespaceDecl"),
    $state
  )
};

(:~
 : Try parsing DefaultNamespaceDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-DefaultNamespaceDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "DefaultNamespaceDecl"),
  let $state :=
    let $state := p:consume(107, $input, $state)            (: 'declare' :)
    let $state := p:lookahead1W(46, $input, $state)         (: S^WS | ('(' ':') | 'default' :)
    let $state := p:consume(108, $input, $state)            (: 'default' :)
    let $state := p:lookahead1W(110, $input, $state)        (: S^WS | ('(' ':') | 'element' | 'function' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 120) then                    (: 'element' :)
        let $state := p:consume(120, $input, $state)        (: 'element' :)
        return $state
      else
        let $state := p:consume(142, $input, $state)        (: 'function' :)
        return $state
    let $state := p:lookahead1W(57, $input, $state)         (: S^WS | ('(' ':') | 'namespace' :)
    let $state := p:consume(177, $input, $state)            (: 'namespace' :)
    let $state := p:lookahead1W(19, $input, $state)         (: StringLiteral | S^WS | ('(' ':') :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:try-URILiteral($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "DefaultNamespaceDecl"),
    $state
  )
};

(:~
 : Parse the 1st loop of production Prolog (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Prolog-1($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(246, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | EOF | '$' | '%' | '(' | '(#' | ('(' ':') |
                                                               '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' |
                                                               '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:l1] eq 107) then                        (: 'declare' :)
        let $state := p:lookahead2W(188, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | ('(' ':') |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | '<' | '<<' | '<=' |
                                                               '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                                               'base-uri' | 'boundary-space' | 'cast' | 'castable' |
                                                               'construction' | 'contains' | 'context' |
                                                               'copy-namespaces' | 'decimal-format' | 'default' |
                                                               'div' | 'eq' | 'except' | 'ft-option' | 'function' |
                                                               'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' |
                                                               'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'option' |
                                                               'or' | 'ordering' | 'revalidation' | 'to' | 'transform' |
                                                               'treat' | 'union' | 'update' | 'updating' | 'variable' |
                                                               '|' | '||' :)
        return $state
      else if ($state[$p:l1] eq 150) then                   (: 'import' :)
        let $state := p:lookahead2W(185, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | '*' |
                                                               '+' | ',' | '-' | '/' | '//' | '<' | '<<' | '<=' | '=' |
                                                               '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                                               'castable' | 'contains' | 'div' | 'eq' | 'except' |
                                                               'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' |
                                                               'le' | 'lt' | 'mod' | 'module' | 'ne' | 'or' | 'schema' |
                                                               'to' | 'transform' | 'treat' | 'union' | 'update' | '|' |
                                                               '||' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] != 44651                            (: 'declare' 'base-uri' :)
      and $state[$p:lk] != 45675                            (: 'declare' 'boundary-space' :)
      and $state[$p:lk] != 50283                            (: 'declare' 'construction' :)
      and $state[$p:lk] != 52843                            (: 'declare' 'copy-namespaces' :)
      and $state[$p:lk] != 53867                            (: 'declare' 'decimal-format' :)
      and $state[$p:lk] != 55403                            (: 'declare' 'default' :)
      and $state[$p:lk] != 70763                            (: 'declare' 'ft-option' :)
      and $state[$p:lk] != 89750                            (: 'import' 'module' :)
      and $state[$p:lk] != 90731                            (: 'declare' 'namespace' :)
      and $state[$p:lk] != 99435                            (: 'declare' 'ordering' :)
      and $state[$p:lk] != 108139                           (: 'declare' 'revalidation' :)
      and $state[$p:lk] != 109718) then                     (: 'import' 'schema' :)
        $state
      else
        let $state :=
          if ($state[$p:l1] eq 107) then                    (: 'declare' :)
            let $state := p:lookahead2W(168, $input, $state) (: S^WS | ('(' ':') | 'base-uri' | 'boundary-space' |
                                                                'construction' | 'copy-namespaces' | 'decimal-format' |
                                                                'default' | 'ft-option' | 'namespace' | 'ordering' |
                                                                'revalidation' :)
            return $state
          else
            ($state[$p:l1], subsequence($state, $p:lk + 1))
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:lk] = 55403) then              (: 'declare' 'default' :)
            let $state := p:memoized($state, 0)
            return
              if ($state[$p:lk] != 0) then
                $state
              else
                let $backtrack := $state
                let $state := p:strip-result($state)
                let $state :=
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-DefaultNamespaceDecl($input, $state)
                return
                  if (not($state[$p:error])) then
                    p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -1, -1)
                  else
                    p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -2, -2)
          else
            $state
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:lk] = -1) then
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-DefaultNamespaceDecl($input, $state)
            return $state
          else if ($state[$p:lk] = 90731) then              (: 'declare' 'namespace' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-NamespaceDecl($input, $state)
            return $state
          else if ($state[$p:lk] = 150) then                (: 'import' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-Import($input, $state)
            return $state
          else if ($state[$p:lk] = 70763) then              (: 'declare' 'ft-option' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-FTOptionDecl($input, $state)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-Setter($input, $state)
            return $state
        let $state := p:lookahead1W(31, $input, $state)     (: S^WS | ('(' ':') | ';' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Separator($input, $state)
        return p:parse-Prolog-1($input, $state)
};

(:~
 : Parse the 2nd loop of production Prolog (zero or more). Use
 : tail recursion for iteratively updating the lexer state.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Prolog-2($input as xs:string, $state as item()+)
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(246, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | EOF | '$' | '%' | '(' | '(#' | ('(' ':') |
                                                               '+' | '-' | '.' | '..' | '/' | '//' | '<' | '<!--' |
                                                               '<?' | '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:l1] eq 107) then                        (: 'declare' :)
        let $state := p:lookahead2W(186, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | ('(' ':') |
                                                               '*' | '+' | ',' | '-' | '/' | '//' | '<' | '<<' | '<=' |
                                                               '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                                               'castable' | 'contains' | 'context' | 'div' | 'eq' |
                                                               'except' | 'function' | 'ge' | 'gt' | 'idiv' |
                                                               'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' |
                                                               'ne' | 'option' | 'or' | 'to' | 'transform' | 'treat' |
                                                               'union' | 'update' | 'updating' | 'variable' | '|' | '||' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] != 16491                            (: 'declare' '%' :)
      and $state[$p:lk] != 51819                            (: 'declare' 'context' :)
      and $state[$p:lk] != 72811                            (: 'declare' 'function' :)
      and $state[$p:lk] != 97387                            (: 'declare' 'option' :)
      and $state[$p:lk] != 126059                           (: 'declare' 'updating' :)
      and $state[$p:lk] != 128619) then                     (: 'declare' 'variable' :)
        $state
      else
        let $state :=
          if ($state[$p:l1] eq 107) then                    (: 'declare' :)
            let $state := p:lookahead2W(162, $input, $state) (: S^WS | '%' | ('(' ':') | 'context' | 'function' |
                                                                'option' | 'updating' | 'variable' :)
            return $state
          else
            ($state[$p:l1], subsequence($state, $p:lk + 1))
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:lk] = 51819) then              (: 'declare' 'context' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-ContextItemDecl($input, $state)
            return $state
          else if ($state[$p:lk] = 97387) then              (: 'declare' 'option' :)
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-OptionDecl($input, $state)
            return $state
          else
            let $state :=
              if ($state[$p:error]) then
                $state
              else
                p:parse-AnnotatedDecl($input, $state)
            return $state
        let $state := p:lookahead1W(31, $input, $state)     (: S^WS | ('(' ':') | ';' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-Separator($input, $state)
        return p:parse-Prolog-2($input, $state)
};

(:~
 : Parse Prolog.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Prolog($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "Prolog"),
  let $state :=
    let $state := p:parse-Prolog-1($input, $state)
    let $state := p:parse-Prolog-2($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "Prolog"),
    $state
  )
};

(:~
 : Parse URILiteral.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-URILiteral($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "URILiteral"),
  let $state :=
    let $state := p:consume(4, $input, $state)              (: StringLiteral :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "URILiteral"),
    $state
  )
};

(:~
 : Try parsing URILiteral.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-URILiteral($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "URILiteral"),
  let $state :=
    let $state := p:consume(4, $input, $state)              (: StringLiteral :)
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "URILiteral"),
    $state
  )
};

(:~
 : Parse NCName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-NCName($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "NCName"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 14) then                     (: NCName^Token :)
        let $state := p:consume(14, $input, $state)         (: NCName^Token :)
        return $state
      else if ($state[$p:l1] = 80) then                     (: 'and' :)
        let $state := p:consume(80, $input, $state)         (: 'and' :)
        return $state
      else if ($state[$p:l1] = 83) then                     (: 'as' :)
        let $state := p:consume(83, $input, $state)         (: 'as' :)
        return $state
      else if ($state[$p:l1] = 84) then                     (: 'ascending' :)
        let $state := p:consume(84, $input, $state)         (: 'ascending' :)
        return $state
      else if ($state[$p:l1] = 91) then                     (: 'case' :)
        let $state := p:consume(91, $input, $state)         (: 'case' :)
        return $state
      else if ($state[$p:l1] = 92) then                     (: 'cast' :)
        let $state := p:consume(92, $input, $state)         (: 'cast' :)
        return $state
      else if ($state[$p:l1] = 93) then                     (: 'castable' :)
        let $state := p:consume(93, $input, $state)         (: 'castable' :)
        return $state
      else if ($state[$p:l1] = 96) then                     (: 'collation' :)
        let $state := p:consume(96, $input, $state)         (: 'collation' :)
        return $state
      else if ($state[$p:l1] = 104) then                    (: 'count' :)
        let $state := p:consume(104, $input, $state)        (: 'count' :)
        return $state
      else if ($state[$p:l1] = 108) then                    (: 'default' :)
        let $state := p:consume(108, $input, $state)        (: 'default' :)
        return $state
      else if ($state[$p:l1] = 112) then                    (: 'descending' :)
        let $state := p:consume(112, $input, $state)        (: 'descending' :)
        return $state
      else if ($state[$p:l1] = 117) then                    (: 'div' :)
        let $state := p:consume(117, $input, $state)        (: 'div' :)
        return $state
      else if ($state[$p:l1] = 121) then                    (: 'else' :)
        let $state := p:consume(121, $input, $state)        (: 'else' :)
        return $state
      else if ($state[$p:l1] = 122) then                    (: 'empty' :)
        let $state := p:consume(122, $input, $state)        (: 'empty' :)
        return $state
      else if ($state[$p:l1] = 125) then                    (: 'end' :)
        let $state := p:consume(125, $input, $state)        (: 'end' :)
        return $state
      else if ($state[$p:l1] = 127) then                    (: 'eq' :)
        let $state := p:consume(127, $input, $state)        (: 'eq' :)
        return $state
      else if ($state[$p:l1] = 130) then                    (: 'except' :)
        let $state := p:consume(130, $input, $state)        (: 'except' :)
        return $state
      else if ($state[$p:l1] = 136) then                    (: 'for' :)
        let $state := p:consume(136, $input, $state)        (: 'for' :)
        return $state
      else if ($state[$p:l1] = 143) then                    (: 'ge' :)
        let $state := p:consume(143, $input, $state)        (: 'ge' :)
        return $state
      else if ($state[$p:l1] = 145) then                    (: 'group' :)
        let $state := p:consume(145, $input, $state)        (: 'group' :)
        return $state
      else if ($state[$p:l1] = 147) then                    (: 'gt' :)
        let $state := p:consume(147, $input, $state)        (: 'gt' :)
        return $state
      else if ($state[$p:l1] = 148) then                    (: 'idiv' :)
        let $state := p:consume(148, $input, $state)        (: 'idiv' :)
        return $state
      else if ($state[$p:l1] = 156) then                    (: 'instance' :)
        let $state := p:consume(156, $input, $state)        (: 'instance' :)
        return $state
      else if ($state[$p:l1] = 157) then                    (: 'intersect' :)
        let $state := p:consume(157, $input, $state)        (: 'intersect' :)
        return $state
      else if ($state[$p:l1] = 160) then                    (: 'is' :)
        let $state := p:consume(160, $input, $state)        (: 'is' :)
        return $state
      else if ($state[$p:l1] = 165) then                    (: 'le' :)
        let $state := p:consume(165, $input, $state)        (: 'le' :)
        return $state
      else if ($state[$p:l1] = 167) then                    (: 'let' :)
        let $state := p:consume(167, $input, $state)        (: 'let' :)
        return $state
      else if ($state[$p:l1] = 170) then                    (: 'lt' :)
        let $state := p:consume(170, $input, $state)        (: 'lt' :)
        return $state
      else if ($state[$p:l1] = 173) then                    (: 'mod' :)
        let $state := p:consume(173, $input, $state)        (: 'mod' :)
        return $state
      else if ($state[$p:l1] = 179) then                    (: 'ne' :)
        let $state := p:consume(179, $input, $state)        (: 'ne' :)
        return $state
      else if ($state[$p:l1] = 189) then                    (: 'only' :)
        let $state := p:consume(189, $input, $state)        (: 'only' :)
        return $state
      else if ($state[$p:l1] = 191) then                    (: 'or' :)
        let $state := p:consume(191, $input, $state)        (: 'or' :)
        return $state
      else if ($state[$p:l1] = 192) then                    (: 'order' :)
        let $state := p:consume(192, $input, $state)        (: 'order' :)
        return $state
      else if ($state[$p:l1] = 210) then                    (: 'return' :)
        let $state := p:consume(210, $input, $state)        (: 'return' :)
        return $state
      else if ($state[$p:l1] = 213) then                    (: 'satisfies' :)
        let $state := p:consume(213, $input, $state)        (: 'satisfies' :)
        return $state
      else if ($state[$p:l1] = 225) then                    (: 'stable' :)
        let $state := p:consume(225, $input, $state)        (: 'stable' :)
        return $state
      else if ($state[$p:l1] = 226) then                    (: 'start' :)
        let $state := p:consume(226, $input, $state)        (: 'start' :)
        return $state
      else if ($state[$p:l1] = 236) then                    (: 'to' :)
        let $state := p:consume(236, $input, $state)        (: 'to' :)
        return $state
      else if ($state[$p:l1] = 238) then                    (: 'treat' :)
        let $state := p:consume(238, $input, $state)        (: 'treat' :)
        return $state
      else if ($state[$p:l1] = 243) then                    (: 'union' :)
        let $state := p:consume(243, $input, $state)        (: 'union' :)
        return $state
      else
        let $state := p:consume(255, $input, $state)        (: 'where' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "NCName"),
    $state
  )
};

(:~
 : Try parsing NCName.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:try-NCName($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "try", "start", "NCName"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 14) then                     (: NCName^Token :)
        let $state := p:consume(14, $input, $state)         (: NCName^Token :)
        return $state
      else if ($state[$p:l1] = 80) then                     (: 'and' :)
        let $state := p:consume(80, $input, $state)         (: 'and' :)
        return $state
      else if ($state[$p:l1] = 83) then                     (: 'as' :)
        let $state := p:consume(83, $input, $state)         (: 'as' :)
        return $state
      else if ($state[$p:l1] = 84) then                     (: 'ascending' :)
        let $state := p:consume(84, $input, $state)         (: 'ascending' :)
        return $state
      else if ($state[$p:l1] = 91) then                     (: 'case' :)
        let $state := p:consume(91, $input, $state)         (: 'case' :)
        return $state
      else if ($state[$p:l1] = 92) then                     (: 'cast' :)
        let $state := p:consume(92, $input, $state)         (: 'cast' :)
        return $state
      else if ($state[$p:l1] = 93) then                     (: 'castable' :)
        let $state := p:consume(93, $input, $state)         (: 'castable' :)
        return $state
      else if ($state[$p:l1] = 96) then                     (: 'collation' :)
        let $state := p:consume(96, $input, $state)         (: 'collation' :)
        return $state
      else if ($state[$p:l1] = 104) then                    (: 'count' :)
        let $state := p:consume(104, $input, $state)        (: 'count' :)
        return $state
      else if ($state[$p:l1] = 108) then                    (: 'default' :)
        let $state := p:consume(108, $input, $state)        (: 'default' :)
        return $state
      else if ($state[$p:l1] = 112) then                    (: 'descending' :)
        let $state := p:consume(112, $input, $state)        (: 'descending' :)
        return $state
      else if ($state[$p:l1] = 117) then                    (: 'div' :)
        let $state := p:consume(117, $input, $state)        (: 'div' :)
        return $state
      else if ($state[$p:l1] = 121) then                    (: 'else' :)
        let $state := p:consume(121, $input, $state)        (: 'else' :)
        return $state
      else if ($state[$p:l1] = 122) then                    (: 'empty' :)
        let $state := p:consume(122, $input, $state)        (: 'empty' :)
        return $state
      else if ($state[$p:l1] = 125) then                    (: 'end' :)
        let $state := p:consume(125, $input, $state)        (: 'end' :)
        return $state
      else if ($state[$p:l1] = 127) then                    (: 'eq' :)
        let $state := p:consume(127, $input, $state)        (: 'eq' :)
        return $state
      else if ($state[$p:l1] = 130) then                    (: 'except' :)
        let $state := p:consume(130, $input, $state)        (: 'except' :)
        return $state
      else if ($state[$p:l1] = 136) then                    (: 'for' :)
        let $state := p:consume(136, $input, $state)        (: 'for' :)
        return $state
      else if ($state[$p:l1] = 143) then                    (: 'ge' :)
        let $state := p:consume(143, $input, $state)        (: 'ge' :)
        return $state
      else if ($state[$p:l1] = 145) then                    (: 'group' :)
        let $state := p:consume(145, $input, $state)        (: 'group' :)
        return $state
      else if ($state[$p:l1] = 147) then                    (: 'gt' :)
        let $state := p:consume(147, $input, $state)        (: 'gt' :)
        return $state
      else if ($state[$p:l1] = 148) then                    (: 'idiv' :)
        let $state := p:consume(148, $input, $state)        (: 'idiv' :)
        return $state
      else if ($state[$p:l1] = 156) then                    (: 'instance' :)
        let $state := p:consume(156, $input, $state)        (: 'instance' :)
        return $state
      else if ($state[$p:l1] = 157) then                    (: 'intersect' :)
        let $state := p:consume(157, $input, $state)        (: 'intersect' :)
        return $state
      else if ($state[$p:l1] = 160) then                    (: 'is' :)
        let $state := p:consume(160, $input, $state)        (: 'is' :)
        return $state
      else if ($state[$p:l1] = 165) then                    (: 'le' :)
        let $state := p:consume(165, $input, $state)        (: 'le' :)
        return $state
      else if ($state[$p:l1] = 167) then                    (: 'let' :)
        let $state := p:consume(167, $input, $state)        (: 'let' :)
        return $state
      else if ($state[$p:l1] = 170) then                    (: 'lt' :)
        let $state := p:consume(170, $input, $state)        (: 'lt' :)
        return $state
      else if ($state[$p:l1] = 173) then                    (: 'mod' :)
        let $state := p:consume(173, $input, $state)        (: 'mod' :)
        return $state
      else if ($state[$p:l1] = 179) then                    (: 'ne' :)
        let $state := p:consume(179, $input, $state)        (: 'ne' :)
        return $state
      else if ($state[$p:l1] = 189) then                    (: 'only' :)
        let $state := p:consume(189, $input, $state)        (: 'only' :)
        return $state
      else if ($state[$p:l1] = 191) then                    (: 'or' :)
        let $state := p:consume(191, $input, $state)        (: 'or' :)
        return $state
      else if ($state[$p:l1] = 192) then                    (: 'order' :)
        let $state := p:consume(192, $input, $state)        (: 'order' :)
        return $state
      else if ($state[$p:l1] = 210) then                    (: 'return' :)
        let $state := p:consume(210, $input, $state)        (: 'return' :)
        return $state
      else if ($state[$p:l1] = 213) then                    (: 'satisfies' :)
        let $state := p:consume(213, $input, $state)        (: 'satisfies' :)
        return $state
      else if ($state[$p:l1] = 225) then                    (: 'stable' :)
        let $state := p:consume(225, $input, $state)        (: 'stable' :)
        return $state
      else if ($state[$p:l1] = 226) then                    (: 'start' :)
        let $state := p:consume(226, $input, $state)        (: 'start' :)
        return $state
      else if ($state[$p:l1] = 236) then                    (: 'to' :)
        let $state := p:consume(236, $input, $state)        (: 'to' :)
        return $state
      else if ($state[$p:l1] = 238) then                    (: 'treat' :)
        let $state := p:consume(238, $input, $state)        (: 'treat' :)
        return $state
      else if ($state[$p:l1] = 243) then                    (: 'union' :)
        let $state := p:consume(243, $input, $state)        (: 'union' :)
        return $state
      else
        let $state := p:consume(255, $input, $state)        (: 'where' :)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "try", "end", "NCName"),
    $state
  )
};

(:~
 : Parse ModuleDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-ModuleDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "ModuleDecl"),
  let $state :=
    let $state := p:consume(175, $input, $state)            (: 'module' :)
    let $state := p:lookahead1W(57, $input, $state)         (: S^WS | ('(' ':') | 'namespace' :)
    let $state := p:consume(177, $input, $state)            (: 'namespace' :)
    let $state := p:lookahead1W(176, $input, $state)        (: NCName^Token | S^WS | ('(' ':') | 'and' | 'as' |
                                                               'ascending' | 'case' | 'cast' | 'castable' |
                                                               'collation' | 'count' | 'default' | 'descending' |
                                                               'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                                               'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'ne' |
                                                               'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                                               'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-NCName($input, $state)
    let $state := p:lookahead1W(32, $input, $state)         (: S^WS | ('(' ':') | '=' :)
    let $state := p:consume(60, $input, $state)             (: '=' :)
    let $state := p:lookahead1W(19, $input, $state)         (: StringLiteral | S^WS | ('(' ':') :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-URILiteral($input, $state)
    let $state := p:lookahead1W(31, $input, $state)         (: S^WS | ('(' ':') | ';' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Separator($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "ModuleDecl"),
    $state
  )
};

(:~
 : Parse LibraryModule.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-LibraryModule($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "LibraryModule"),
  let $state :=
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-ModuleDecl($input, $state)
    let $state := p:lookahead1W(133, $input, $state)        (: S^WS | EOF | ('(' ':') | 'declare' | 'import' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Prolog($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "LibraryModule"),
    $state
  )
};

(:~
 : Parse Separator.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Separator($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "Separator"),
  let $state :=
    let $state := p:consume(52, $input, $state)             (: ';' :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "Separator"),
    $state
  )
};

(:~
 : Parse VersionDecl.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-VersionDecl($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "VersionDecl"),
  let $state :=
    let $state := p:consume(262, $input, $state)            (: 'xquery' :)
    let $state := p:lookahead1W(111, $input, $state)        (: S^WS | ('(' ':') | 'encoding' | 'version' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:l1] = 124) then                    (: 'encoding' :)
        let $state := p:consume(124, $input, $state)        (: 'encoding' :)
        let $state := p:lookahead1W(19, $input, $state)     (: StringLiteral | S^WS | ('(' ':') :)
        let $state := p:consume(4, $input, $state)          (: StringLiteral :)
        return $state
      else
        let $state := p:consume(252, $input, $state)        (: 'version' :)
        let $state := p:lookahead1W(19, $input, $state)     (: StringLiteral | S^WS | ('(' ':') :)
        let $state := p:consume(4, $input, $state)          (: StringLiteral :)
        let $state := p:lookahead1W(103, $input, $state)    (: S^WS | ('(' ':') | ';' | 'encoding' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else if ($state[$p:l1] = 124) then                (: 'encoding' :)
            let $state := p:consume(124, $input, $state)    (: 'encoding' :)
            let $state := p:lookahead1W(19, $input, $state) (: StringLiteral | S^WS | ('(' ':') :)
            let $state := p:consume(4, $input, $state)      (: StringLiteral :)
            return $state
          else
            $state
        return $state
    let $state := p:lookahead1W(31, $input, $state)         (: S^WS | ('(' ':') | ';' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Separator($input, $state)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "VersionDecl"),
    $state
  )
};

(:~
 : Parse Module.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-Module($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "Module"),
  let $state :=
    let $state :=
      if ($state[$p:l1] eq 262) then                        (: 'xquery' :)
        let $state := p:lookahead2W(184, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | '*' |
                                                               '+' | ',' | '-' | '/' | '//' | '<' | '<<' | '<=' | '=' |
                                                               '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                                               'castable' | 'contains' | 'div' | 'encoding' | 'eq' |
                                                               'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                                               'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                                               'to' | 'transform' | 'treat' | 'union' | 'update' |
                                                               'version' | '|' | '||' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 63750                        (: 'xquery' 'encoding' :)
            or $state[$p:lk] = 129286) then                 (: 'xquery' 'version' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-VersionDecl($input, $state)
        return $state
      else
        $state
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:l1] eq 175) then                        (: 'module' :)
        let $state := p:lookahead2W(183, $input, $state)    (: S^WS | EOF | '!' | '!=' | '#' | '(' | ('(' ':') | '*' |
                                                               '+' | ',' | '-' | '/' | '//' | '<' | '<<' | '<=' | '=' |
                                                               '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                                               'castable' | 'contains' | 'div' | 'eq' | 'except' |
                                                               'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' |
                                                               'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'or' | 'to' |
                                                               'transform' | 'treat' | 'union' | 'update' | '|' | '||' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 90799) then                  (: 'module' 'namespace' :)
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-LibraryModule($input, $state)
        return $state
      else
        let $state :=
          if ($state[$p:error]) then
            $state
          else
            p:parse-MainModule($input, $state)
        return $state
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "Module"),
    $state
  )
};

(:~
 : Parse XQuery.
 :
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:parse-XQuery($input as xs:string, $state as item()+) as item()+
{
  p:trace-nonterminal($state, "parse", "start", "XQuery"),
  let $state :=
    let $state := p:lookahead1W(245, $input, $state)        (: IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                                               StringLiteral | URIQualifiedName | QName^Token | S^WS |
                                                               Wildcard | '$' | '%' | '(' | '(#' | ('(' ':') | '+' |
                                                               '-' | '.' | '..' | '/' | '//' | '<' | '<!--' | '<?' |
                                                               '?' | '@' | '[' | '``[' | 'ancestor' |
                                                               'ancestor-or-self' | 'and' | 'array' | 'as' |
                                                               'ascending' | 'at' | 'attribute' | 'case' | 'cast' |
                                                               'castable' | 'child' | 'collation' | 'comment' | 'copy' |
                                                               'count' | 'declare' | 'default' | 'delete' |
                                                               'descendant' | 'descendant-or-self' | 'descending' |
                                                               'div' | 'document' | 'document-node' | 'element' |
                                                               'else' | 'empty' | 'empty-sequence' | 'end' | 'eq' |
                                                               'every' | 'except' | 'following' | 'following-sibling' |
                                                               'for' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' |
                                                               'if' | 'import' | 'insert' | 'instance' | 'intersect' |
                                                               'invoke' | 'is' | 'item' | 'le' | 'let' | 'lt' | 'map' |
                                                               'mod' | 'modify' | 'module' | 'namespace' |
                                                               'namespace-node' | 'ne' | 'node' | 'only' | 'or' |
                                                               'order' | 'ordered' | 'parent' | 'preceding' |
                                                               'preceding-sibling' | 'processing-instruction' |
                                                               'rename' | 'replace' | 'return' | 'satisfies' |
                                                               'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                               'stable' | 'start' | 'switch' | 'text' | 'to' |
                                                               'transform' | 'treat' | 'try' | 'typeswitch' | 'union' |
                                                               'unordered' | 'update' | 'validate' | 'where' | 'with' |
                                                               'xquery' :)
    let $state :=
      if ($state[$p:error]) then
        $state
      else
        p:parse-Module($input, $state)
    let $state := p:consume(25, $input, $state)             (: EOF :)
    return $state
  return
  (
    p:trace-nonterminal($state, "parse", "end", "XQuery"),
    $state
  )
};

(:~
 : Assemble a string showing current lookahead tokens, as far as they have
 : been tokenized.
 :
 : @param $state lexer state, error indicator, and result stack.
 : @return a string containing the space-separated list of lookahead tokens.
 :)
declare function p:lookahead-string($state as item()+) as xs:string
{
  string-join
  (
    (
      if ($state[$p:l1] le 0) then
        ()
      else
      (
        $p:TOKEN[$state[$p:l1] + 1],
        if ($state[$p:l2] le 0) then
          ()
        else
        (
          $p:TOKEN[$state[$p:l2] + 1]
        )
      )
    ),
    " "
  )
};

(:~
 : Create a textual error message from a parsing error.
 :
 : @param $input the input string.
 : @param $error the parsing error descriptor.
 : @return the error message.
 :)
declare function p:error-message($input as xs:string, $error as element(error)) as xs:string
{
  let $begin := xs:integer($error/@b)
  let $context := string-to-codepoints(substring($input, 1, $begin - 1))
  let $linefeeds := index-of($context, 10)
  let $line := count($linefeeds) + 1
  let $column := ($begin - $linefeeds[last()], $begin)[1]
  return
    string-join
    (
      (
        if ($error/@o) then
          ("syntax error, found ", $p:TOKEN[$error/@o + 1])
        else
          "lexical analysis failed",
        "&#10;",
        "while expecting ",
        if ($error/@x) then
          $p:TOKEN[$error/@x + 1]
        else
          let $expected := p:expected-token-set($error/@s)
          return
          (
            "["[exists($expected[2])],
            string-join($expected, ", "),
            "]"[exists($expected[2])]
          ),
        "&#10;",
        if ($error/@o or $error/@e = $begin) then
          ()
        else
          ("after successfully scanning ", string($error/@e - $begin), " characters beginning "),
        "at line ", string($line), ", column ", string($column), ":&#10;",
        "...", substring($input, $begin, 64), "..."
      ),
      ""
    )
};

(:~
 : Consume one token, i.e. compare lookahead token 1 with expected
 : token and in case of a match, shift lookahead tokens down such that
 : l1 becomes the current token, and higher lookahead tokens move down.
 : When lookahead token 1 does not match the expected token, raise an
 : error by saving the expected token code in the error field of the
 : lexer state.
 :
 : @param $code the expected token.
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:consume($code as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else if ($state[$p:l1] eq $code) then
    let $state :=
    (
      subsequence($state, $p:l1, 6),
      0, 0, 0,
      subsequence($state, 10)
    )
    return
    (
      p:trace
      (
        string-join
        (
          (
            "  <parse terminal=""", p:xml-escape($p:TOKEN[$code + 1]), """",
            if ($state[$p:l1] le 0) then () else (" input=""", p:xml-escape(p:lookahead-string($state)), """"),
            "/>"
          ),
          ""
        )
      ),
      $state
    )
  else
  (
    subsequence($state, 1, $p:error - 1),
    element error
    {
      if ($state[$p:e1] < $state[$p:memo]/@e) then
        $state[$p:memo]/@*
      else
      (
        attribute b {$state[$p:b1]},
        attribute e {$state[$p:e1]},
        if ($state[$p:l1] lt 0) then
          attribute s {- $state[$p:l1]}
        else
          (attribute o {$state[$p:l1]}, attribute x {$code})
      )
    },
    subsequence($state, $p:error + 1)
  )
};

(:~
 : Use p:match to fetch the next token, but skip any leading
 : whitespace.
 :
 : @param $input the input string.
 : @param $begin the index where to start.
 : @param $token-set the valid token set id.
 : @return a sequence of three values: the token code of the result
 : token, with input string positions of token begin and end.
 :)
declare function p:matchW($input as xs:string,
                          $begin as xs:integer,
                          $token-set as xs:integer)
{
  let $match := p:match($input, $begin, $token-set)
  return
    if ($match[1] = 18) then                                (: S^WS :)
      p:matchW($input, $match[3], $token-set)
    else if ($match[1] = 36) then                           (: ('(' ':') :)
      let $state := p:try-Whitespace($input, (0, $begin, $begin, $match, 0, 0, 0, false(), <memo/>))
      return p:matchW($input, $state[$p:e0], $token-set)
    else
      $match
};

(:~
 : Lookahead one token on level 1 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:lookahead1W($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:l1] ne 0) then
    $state
  else
    let $match :=
      (
        p:matchW($input, $state[$p:e0], $set),
        0, 0, 0
      )
    return
    (
      $match[1],
      subsequence($state, $p:b0, 2),
      $match,
      subsequence($state, 10)
    )
};

(:~
 : Lookahead one token on level 2 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:lookahead2W($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  let $match :=
    if ($state[$p:l2] ne 0) then
      subsequence($state, $p:l2, 3)
    else
      p:matchW($input, $state[$p:e1], $set)
  return
  (
    $match[1] * 512 + $state[$p:l1],
    subsequence($state, $p:b0, 5),
    $match,
    subsequence($state, 10)
  )
};

(:~
 : Lookahead one token on level 1.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state lexer state, error indicator, and result stack.
 : @return the updated state.
 :)
declare function p:lookahead1($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:l1] ne 0) then
    $state
  else
    let $match :=
      (
        p:match($input, $state[$p:e0], $set),
        0, 0, 0
      )
    return
    (
      $match[1],
      subsequence($state, $p:b0, 2),
      $match,
      subsequence($state, 10)
    )
};

(:~
 : Strip result from lexer state, in order to avoid carrying it while
 : backtracking.
 :
 : @param $state the lexer state after an alternative failed.
 : @return the updated state.
 :)
declare function p:strip-result($state as item()+) as item()+
{
  subsequence($state, 1, $p:memo)
};

(:~
 : Restore lexer state after unsuccessfully trying an alternative,
 : merging any memoization that was collected on the way.
 :
 : @param $backtrack the lexer state before backtracking started.
 : @param $state the lexer state after an alternative failed.
 : @return the updated state.
 :)
declare function p:restore($backtrack as item()+,
                           $state as item()+) as item()+
{
  subsequence($backtrack, 1, $p:memo - 1),
  element memo
  {
    let $errors := ($state[$p:memo], $state[$p:error])[.]
    return $errors[@e = max($errors/xs:integer(@e))][last()]/@*,
    $state[$p:memo]/value
  }
};

(:~
 : Memoize the backtracking result that was computed at decision point
 : $dpi for input position $e0. Reconstruct state from the parameters.
 :
 : @param $state the lexer state to be restored.
 : @param $update the lexer state containing updates.
 : @param $dpi the decision point id.
 : @param $e0 the input position.
 : @param $v the id of the successful alternative.
 : @param $lk the new lookahead code.
 : @return the reconstructed state.
 :)
declare function p:memoize($state as item()+,
                           $update as item()+,
                           $dpi as xs:integer,
                           $e0 as xs:integer,
                           $v as xs:integer,
                           $lk as xs:integer) as item()+
{
  $lk,
  subsequence($state, $p:b0, $p:memo - $p:b0),
  let $memo := $update[$p:memo]
  let $errors := ($memo, $update[$p:error])[.]
  return
    element memo
    {
      $errors[@e = max($errors/xs:integer(@e))][last()]/@*,
      $memo/value,
      element value {attribute key {$e0 * 16 + $dpi}, $v}
    },
  subsequence($state, $p:memo + 1)
};

(:~
 : Retrieve memoized backtracking result for decision point $dpi
 : and input position $state[$p:e0] into $state[$p:lk].
 :
 : @param $state lexer state, error indicator, and result stack.
 : @param $dpi the decision point id.
 : @return the updated state.
 :)
declare function p:memoized($state as item()+, $dpi as xs:integer) as item()+
{
  let $value := data($state[$p:memo]/value[@key = $state[$p:e0] * 16 + $dpi])
  return
  (
    if ($value) then $value else 0,
    subsequence($state, $p:lk + 1)
  )
};

(:~
 : Parse start symbol XQuery from given string.
 :
 : @param $s the string to be parsed.
 : @return the result as generated by parser actions.
 :)
declare function p:parse-XQuery($s as xs:string) as item()*
{
  let $state := (0, 1, 1, 0, 0, 0, 0, 0, 0, false(), <memo/>)
  let $state := p:parse-XQuery($s, $state)
  let $error := $state[$p:error]
  return
    if ($error) then
      element ERROR {$error/@*, p:error-message($s, $error)}
    else
      subsequence($state, $p:result)
};

(:~
 : Trace LL processing of a nonterminal.
 :
 : @param $state lexer state, error indicator, and result stack.
 : @param $method processing method type.
 : @param $occasion the current step.
 : @param $name the nonterminal name.
 : @return the empty sequence.
 :)
declare function p:trace-nonterminal($state as item()+,
                                     $method as xs:string,
                                     $occasion as xs:string,
                                     $name as xs:string) as xs:string?
{
  p:trace
  (
    string-join
    (
      (
        "  <",
        $method,
        " ",
        $occasion,
        "nonterminal=""",
        $name,
        """",
        if ($state[$p:l1] le 0) then () else (" input=""", p:xml-escape(p:lookahead-string($state)), """"),
        "/>"
      ),
      ""
    )
  )
};

(: End :)
